
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015dc  0800e388  0800e388  0001e388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f964  0800f964  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f96c  0800f96c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f96c  0800f96c  0001f96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f970  0800f970  0001f970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800f974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e4  20000354  0800fcc8  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a38  0800fcc8  00022a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006edbe  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009f6d  00000000  00000000  0008f142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00024bd5  00000000  00000000  000990af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc8  00000000  00000000  000bdc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ae8  00000000  00000000  000bfc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f117  00000000  00000000  000c3738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004f8f4  00000000  00000000  0010284f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017e77e  00000000  00000000  00152143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002d08c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fb0  00000000  00000000  002d0914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e36c 	.word	0x0800e36c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	0800e36c 	.word	0x0800e36c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZN9Convertor9updateLEDEv>:



}

void Convertor::updateLED(void){
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
uint16_t hard_led_pwm = 250;

	if(_sbus->B_button() && _ledPWM < _max_led_intensity) {
 8000fe0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000fe2:	f001 fd81 	bl	8002ae8 <_ZN4SBUS8B_buttonEv>
 8000fe6:	b178      	cbz	r0, 8001008 <_ZN9Convertor9updateLEDEv+0x2c>
 8000fe8:	f9b4 5092 	ldrsh.w	r5, [r4, #146]	; 0x92
 8000fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fee:	429d      	cmp	r5, r3
 8000ff0:	da0a      	bge.n	8001008 <_ZN9Convertor9updateLEDEv+0x2c>
		_ledPWM += (_max_led_intensity / 4);
 8000ff2:	eb05 0593 	add.w	r5, r5, r3, lsr #2
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);


	}else if(_sbus->A_button() && _ledPWM > 0){

		_ledPWM -= 250;
 8000ff6:	b22d      	sxth	r5, r5
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8000ff8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		_ledPWM -= 250;
 8000ffa:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8000ffe:	f002 fbbf 	bl	8003780 <_ZN11Initializer13get_LED_TimerEv>
 8001002:	6803      	ldr	r3, [r0, #0]
 8001004:	635d      	str	r5, [r3, #52]	; 0x34
	}

	//__HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, 250);


}
 8001006:	bd38      	pop	{r3, r4, r5, pc}
	}else if(_sbus->A_button() && _ledPWM > 0){
 8001008:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800100a:	f001 fd3f 	bl	8002a8c <_ZN4SBUS8A_buttonEv>
 800100e:	2800      	cmp	r0, #0
 8001010:	d0f9      	beq.n	8001006 <_ZN9Convertor9updateLEDEv+0x2a>
 8001012:	f9b4 5092 	ldrsh.w	r5, [r4, #146]	; 0x92
 8001016:	2d00      	cmp	r5, #0
 8001018:	ddf5      	ble.n	8001006 <_ZN9Convertor9updateLEDEv+0x2a>
		_ledPWM -= 250;
 800101a:	3dfa      	subs	r5, #250	; 0xfa
 800101c:	e7eb      	b.n	8000ff6 <_ZN9Convertor9updateLEDEv+0x1a>

0800101e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:

//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800101e:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001022:	b510      	push	{r4, lr}
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001024:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward channel of h bridge.
 8001028:	2900      	cmp	r1, #0
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 800102a:	9c02      	ldr	r4, [sp, #8]
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	b280      	uxth	r0, r0
	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward channel of h bridge.
 8001030:	db28      	blt.n	8001084 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001032:	b91b      	cbnz	r3, 800103c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e>
 8001034:	6350      	str	r0, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001036:	b994      	cbnz	r4, 800105e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x40>
 8001038:	6354      	str	r4, [r2, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 800103a:	bd10      	pop	{r4, pc}
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800103c:	2b04      	cmp	r3, #4
 800103e:	d101      	bne.n	8001044 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x26>
 8001040:	6390      	str	r0, [r2, #56]	; 0x38
 8001042:	e7f8      	b.n	8001036 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 8001044:	2b08      	cmp	r3, #8
 8001046:	d101      	bne.n	800104c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x2e>
 8001048:	63d0      	str	r0, [r2, #60]	; 0x3c
 800104a:	e7f4      	b.n	8001036 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d101      	bne.n	8001054 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x36>
 8001050:	6410      	str	r0, [r2, #64]	; 0x40
 8001052:	e7f0      	b.n	8001036 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 8001054:	2b10      	cmp	r3, #16
 8001056:	bf0c      	ite	eq
 8001058:	6490      	streq	r0, [r2, #72]	; 0x48
 800105a:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800105c:	e7eb      	b.n	8001036 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 800105e:	2c04      	cmp	r4, #4
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	d101      	bne.n	800106a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 8001066:	6393      	str	r3, [r2, #56]	; 0x38
 8001068:	e7e7      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 800106a:	2c08      	cmp	r4, #8
 800106c:	d101      	bne.n	8001072 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x54>
 800106e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001070:	e7e3      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 8001072:	2c0c      	cmp	r4, #12
 8001074:	d101      	bne.n	800107a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x5c>
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	e7df      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 800107a:	2c10      	cmp	r4, #16
 800107c:	bf0c      	ite	eq
 800107e:	6493      	streq	r3, [r2, #72]	; 0x48
 8001080:	64d3      	strne	r3, [r2, #76]	; 0x4c
 8001082:	e7da      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001084:	b91b      	cbnz	r3, 800108e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x70>
 8001086:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001088:	b9a4      	cbnz	r4, 80010b4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x96>
 800108a:	6350      	str	r0, [r2, #52]	; 0x34
 800108c:	e7d5      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 800108e:	2b04      	cmp	r3, #4
 8001090:	f04f 0100 	mov.w	r1, #0
 8001094:	d101      	bne.n	800109a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x7c>
 8001096:	6391      	str	r1, [r2, #56]	; 0x38
 8001098:	e7f6      	b.n	8001088 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 800109a:	2b08      	cmp	r3, #8
 800109c:	d101      	bne.n	80010a2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x84>
 800109e:	63d1      	str	r1, [r2, #60]	; 0x3c
 80010a0:	e7f2      	b.n	8001088 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d101      	bne.n	80010aa <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x8c>
 80010a6:	6411      	str	r1, [r2, #64]	; 0x40
 80010a8:	e7ee      	b.n	8001088 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	bf0c      	ite	eq
 80010ae:	6491      	streq	r1, [r2, #72]	; 0x48
 80010b0:	64d1      	strne	r1, [r2, #76]	; 0x4c
 80010b2:	e7e9      	b.n	8001088 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80010b4:	2c04      	cmp	r4, #4
 80010b6:	d101      	bne.n	80010bc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9e>
 80010b8:	6390      	str	r0, [r2, #56]	; 0x38
 80010ba:	e7be      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 80010bc:	2c08      	cmp	r4, #8
 80010be:	d101      	bne.n	80010c4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xa6>
 80010c0:	63d0      	str	r0, [r2, #60]	; 0x3c
 80010c2:	e7ba      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 80010c4:	2c0c      	cmp	r4, #12
 80010c6:	d101      	bne.n	80010cc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xae>
 80010c8:	6410      	str	r0, [r2, #64]	; 0x40
 80010ca:	e7b6      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 80010cc:	2c10      	cmp	r4, #16
 80010ce:	bf0c      	ite	eq
 80010d0:	6490      	streq	r0, [r2, #72]	; 0x48
 80010d2:	64d0      	strne	r0, [r2, #76]	; 0x4c
}
 80010d4:	e7b1      	b.n	800103a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>

080010d6 <_ZN9Convertor18updateCleanerMotorEs>:

void Convertor::updateCleanerMotor(int16_t PWM){

	this->_cleanerMotorPWM = PWM;

	if(_cleanerMotorPWM > 10){
 80010d6:	290a      	cmp	r1, #10
void Convertor::updateCleanerMotor(int16_t PWM){
 80010d8:	b510      	push	{r4, lr}
	this->_cleanerMotorPWM = PWM;
 80010da:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
void Convertor::updateCleanerMotor(int16_t PWM){
 80010de:	460c      	mov	r4, r1
 80010e0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	if(_cleanerMotorPWM > 10){
 80010e2:	dd08      	ble.n	80010f6 <_ZN9Convertor18updateCleanerMotorEs+0x20>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80010e4:	f002 fb55 	bl	8003792 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	6803      	ldr	r3, [r0, #0]
 80010ec:	bfb8      	it	lt
 80010ee:	4264      	neglt	r4, r4
 80010f0:	b2a4      	uxth	r4, r4
 80010f2:	63dc      	str	r4, [r3, #60]	; 0x3c
	}else{

		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
	}

}
 80010f4:	bd10      	pop	{r4, pc}
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 80010f6:	f002 fb4c 	bl	8003792 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80010fa:	6803      	ldr	r3, [r0, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001100:	e7f8      	b.n	80010f4 <_ZN9Convertor18updateCleanerMotorEs+0x1e>
	...

08001104 <_ZN9Convertor14updateSelectorEv>:


void Convertor::updateSelector(void){
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4604      	mov	r4, r0

	static bool debounceTrigger = 0;
	float tolerance = 10.0f;


	if(_sbus->getRightX() < -750 && debounceTrigger == 0){
 8001108:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800110a:	f001 fc7b 	bl	8002a04 <_ZN4SBUS9getRightXEv>
 800110e:	eddf 7a64 	vldr	s15, [pc, #400]	; 80012a0 <_ZN9Convertor14updateSelectorEv+0x19c>
 8001112:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d50d      	bpl.n	8001138 <_ZN9Convertor14updateSelectorEv+0x34>
 800111c:	4e61      	ldr	r6, [pc, #388]	; (80012a4 <_ZN9Convertor14updateSelectorEv+0x1a0>)
 800111e:	7835      	ldrb	r5, [r6, #0]
 8001120:	b955      	cbnz	r5, 8001138 <_ZN9Convertor14updateSelectorEv+0x34>
		this->updateCleanerMotor(0);
 8001122:	4629      	mov	r1, r5
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff ffd6 	bl	80010d6 <_ZN9Convertor18updateCleanerMotorEs>

		debounceTrigger = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	7033      	strb	r3, [r6, #0]
		_indexer = 0;
 800112e:	f884 508e 	strb.w	r5, [r4, #142]	; 0x8e
			}
			_indexer = 2;
			break;
		default:

			_pidSelector.setPoint = _cleanerPos;
 8001132:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8001136:	e041      	b.n	80011bc <_ZN9Convertor14updateSelectorEv+0xb8>
	}else if(_sbus->getRightX() > 750 && debounceTrigger == 0){
 8001138:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800113a:	f001 fc63 	bl	8002a04 <_ZN4SBUS9getRightXEv>
 800113e:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80012a8 <_ZN9Convertor14updateSelectorEv+0x1a4>
 8001142:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd02      	ble.n	8001152 <_ZN9Convertor14updateSelectorEv+0x4e>
 800114c:	4d55      	ldr	r5, [pc, #340]	; (80012a4 <_ZN9Convertor14updateSelectorEv+0x1a0>)
 800114e:	7829      	ldrb	r1, [r5, #0]
 8001150:	b359      	cbz	r1, 80011aa <_ZN9Convertor14updateSelectorEv+0xa6>
	}else if((_sbus->getRightY() > 20 && debounceTrigger == 0) && (_pidSelector.measurement == _cleanerPos) ){
 8001152:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001154:	f001 fc34 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 8001158:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800115c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dc2d      	bgt.n	80011c2 <_ZN9Convertor14updateSelectorEv+0xbe>
	}else if (_sbus->getRightY() == 0  && _sbus->getRightY() == 0 && debounceTrigger == 1){
 8001166:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001168:	f001 fc2a 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 800116c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d15d      	bne.n	8001232 <_ZN9Convertor14updateSelectorEv+0x12e>
 8001176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001178:	f001 fc22 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 800117c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d155      	bne.n	8001232 <_ZN9Convertor14updateSelectorEv+0x12e>
 8001186:	4d47      	ldr	r5, [pc, #284]	; (80012a4 <_ZN9Convertor14updateSelectorEv+0x1a0>)
 8001188:	782b      	ldrb	r3, [r5, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d051      	beq.n	8001232 <_ZN9Convertor14updateSelectorEv+0x12e>
		this->updateCleanerMotor(0);
 800118e:	2100      	movs	r1, #0
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ffa0 	bl	80010d6 <_ZN9Convertor18updateCleanerMotorEs>
		if( _indexer == 2 || _indexer == 3){
 8001196:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800119a:	3b02      	subs	r3, #2
		debounceTrigger = 0;
 800119c:	2200      	movs	r2, #0
		if( _indexer == 2 || _indexer == 3){
 800119e:	2b01      	cmp	r3, #1
		debounceTrigger = 0;
 80011a0:	702a      	strb	r2, [r5, #0]
		if( _indexer == 2 || _indexer == 3){
 80011a2:	d846      	bhi.n	8001232 <_ZN9Convertor14updateSelectorEv+0x12e>
			_indexer = 0;
 80011a4:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
 80011a8:	e7c3      	b.n	8001132 <_ZN9Convertor14updateSelectorEv+0x2e>
		this->updateCleanerMotor(0);
 80011aa:	4620      	mov	r0, r4
 80011ac:	f7ff ff93 	bl	80010d6 <_ZN9Convertor18updateCleanerMotorEs>
		debounceTrigger = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	702b      	strb	r3, [r5, #0]
		_indexer = 1;
 80011b4:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			_pidSelector.setPoint = _probePos;
 80011b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
			_pidSelector.setPoint = _cleanerPos;
 80011bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80


	}


}
 80011c0:	e036      	b.n	8001230 <_ZN9Convertor14updateSelectorEv+0x12c>
	}else if((_sbus->getRightY() > 20 && debounceTrigger == 0) && (_pidSelector.measurement == _cleanerPos) ){
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <_ZN9Convertor14updateSelectorEv+0x1a0>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d1cd      	bne.n	8001166 <_ZN9Convertor14updateSelectorEv+0x62>
 80011ca:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 80011ce:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
 80011d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d1c4      	bne.n	8001166 <_ZN9Convertor14updateSelectorEv+0x62>
		debounceTrigger = 1;
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
		_indexer = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			this->updateCleanerMotor(this->_sbus->getRightY());
 80011e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011e8:	f001 fbea 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 80011ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80011f0:	4620      	mov	r0, r4
 80011f2:	ee10 3a10 	vmov	r3, s0
 80011f6:	b219      	sxth	r1, r3
 80011f8:	f7ff ff6d 	bl	80010d6 <_ZN9Convertor18updateCleanerMotorEs>
			if(_pidSelector.measurement <= (_squarePosA + tolerance) && _pidSelector.measurement >= (_squarePosA - tolerance)){
 80011fc:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8001200:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8001204:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001208:	ee37 6aa6 	vadd.f32	s12, s15, s13
 800120c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d809      	bhi.n	800122a <_ZN9Convertor14updateSelectorEv+0x126>
 8001216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				_pidSelector.setPoint = _squarePosB;
 8001222:	bfa4      	itt	ge
 8001224:	6b23      	ldrge	r3, [r4, #48]	; 0x30
 8001226:	f8c4 3080 	strge.w	r3, [r4, #128]	; 0x80
			_indexer = 3;
 800122a:	2303      	movs	r3, #3
			_indexer = 2;
 800122c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
}
 8001230:	bd70      	pop	{r4, r5, r6, pc}
	switch(_indexer){
 8001232:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8001236:	2b03      	cmp	r3, #3
 8001238:	f63f af7b 	bhi.w	8001132 <_ZN9Convertor14updateSelectorEv+0x2e>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <_ZN9Convertor14updateSelectorEv+0x140>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001133 	.word	0x08001133
 8001248:	080011b9 	.word	0x080011b9
 800124c:	080011e7 	.word	0x080011e7
 8001250:	08001255 	.word	0x08001255
			this->updateCleanerMotor(this->_sbus->getRightY());
 8001254:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001256:	f001 fbb3 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 800125a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800125e:	4620      	mov	r0, r4
 8001260:	ee10 3a10 	vmov	r3, s0
 8001264:	b219      	sxth	r1, r3
 8001266:	f7ff ff36 	bl	80010d6 <_ZN9Convertor18updateCleanerMotorEs>
			if(_pidSelector.measurement <= (_squarePosB + tolerance) && _pidSelector.measurement >= (_squarePosB - tolerance)){
 800126a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800126e:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8001272:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001276:	ee37 6aa6 	vadd.f32	s12, s15, s13
 800127a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d80a      	bhi.n	800129a <_ZN9Convertor14updateSelectorEv+0x196>
 8001284:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				_pidSelector.setPoint = _squarePosA;
 8001290:	bfa4      	itt	ge
 8001292:	f8d4 309c 	ldrge.w	r3, [r4, #156]	; 0x9c
 8001296:	f8c4 3080 	strge.w	r3, [r4, #128]	; 0x80
			_indexer = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	e7c6      	b.n	800122c <_ZN9Convertor14updateSelectorEv+0x128>
 800129e:	bf00      	nop
 80012a0:	c43b8000 	.word	0xc43b8000
 80012a4:	20000370 	.word	0x20000370
 80012a8:	443b8000 	.word	0x443b8000

080012ac <_ZN9Convertor12moveSelectorEs>:


void Convertor::moveSelector(int16_t pwm){
 80012ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012ae:	4604      	mov	r4, r0

//low level function for controlling the selector actuator with the PIDController. 

	if(pwm > 0){
 80012b0:	460d      	mov	r5, r1
 80012b2:	b151      	cbz	r1, 80012ca <_ZN9Convertor12moveSelectorEs+0x1e>

		this->actuatorControl(pwm, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 80012b4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80012b6:	f002 fa65 	bl	8003784 <_ZN11Initializer18get_selector_TimerEv>
 80012ba:	2308      	movs	r3, #8
 80012bc:	4602      	mov	r2, r0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4629      	mov	r1, r5
 80012c2:	230c      	movs	r3, #12
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff feaa 	bl	800101e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(pwm, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 80012ca:	b003      	add	sp, #12
 80012cc:	bd30      	pop	{r4, r5, pc}

080012ce <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 80012ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012d0:	4604      	mov	r4, r0
	//Checks the y-axis of the left joystick and adjusts the push motor accordingly

	this->_pushMotorPWM = this->_sbus->getLeftY();
 80012d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80012d4:	f001 fb30 	bl	8002938 <_ZN4SBUS8getLeftYEv>
 80012d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80012dc:	ee10 3a10 	vmov	r3, s0
 80012e0:	b21d      	sxth	r5, r3

	if(_pushMotorPWM > 0){
 80012e2:	2d00      	cmp	r5, #0
	this->_pushMotorPWM = this->_sbus->getLeftY();
 80012e4:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
	if(_pushMotorPWM > 0){
 80012e8:	dd0b      	ble.n	8001302 <_ZN9Convertor15updatePushMotorEv+0x34>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);

	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 80012ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012ec:	f002 fa4c 	bl	8003788 <_ZN11Initializer19get_pushMotor_TimerEv>
 80012f0:	2308      	movs	r3, #8
 80012f2:	4602      	mov	r2, r0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4629      	mov	r1, r5
 80012f8:	2304      	movs	r3, #4
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fe8f 	bl	800101e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}

}
 8001300:	e000      	b.n	8001304 <_ZN9Convertor15updatePushMotorEv+0x36>
	}else if(_pushMotorPWM < 0){
 8001302:	d1f2      	bne.n	80012ea <_ZN9Convertor15updatePushMotorEv+0x1c>
}
 8001304:	b003      	add	sp, #12
 8001306:	bd30      	pop	{r4, r5, pc}

08001308 <_ZN9Convertor24updateFluidMotorJogWheelEv>:

void Convertor::updateFluidMotorJogWheel(void){
 8001308:	b510      	push	{r4, lr}
 800130a:	4604      	mov	r4, r0

	float fluidPWM = this->_sbus->getJogWheel();
 800130c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800130e:	f001 fb9b 	bl	8002a48 <_ZN4SBUS11getJogWheelEv>

	if(fluidPWM > 950 && (_fluidPosition < 950)){
 8001312:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001388 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x80>
 8001316:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	dd13      	ble.n	8001348 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x40>
 8001320:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d50c      	bpl.n	8001348 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x40>

		_fluidPosition += 0.05;
 800132e:	ee17 0a90 	vmov	r0, s15
 8001332:	f7ff f931 	bl	8000598 <__aeabi_f2d>
 8001336:	a312      	add	r3, pc, #72	; (adr r3, 8001380 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x78>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>

	}else if(fluidPWM < -950 && (_fluidPosition > 5)){

	 	_fluidPosition -= 0.05;
 8001340:	f7ff fc7a 	bl	8000c38 <__aeabi_d2f>
 8001344:	6260      	str	r0, [r4, #36]	; 0x24
	}

}
 8001346:	bd10      	pop	{r4, pc}
	}else if(fluidPWM < -950 && (_fluidPosition > 5)){
 8001348:	eddf 7a10 	vldr	s15, [pc, #64]	; 800138c <_ZN9Convertor24updateFluidMotorJogWheelEv+0x84>
 800134c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d5f7      	bpl.n	8001346 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x3e>
 8001356:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800135a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800135e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	ddee      	ble.n	8001346 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x3e>
	 	_fluidPosition -= 0.05;
 8001368:	ee17 0a90 	vmov	r0, s15
 800136c:	f7ff f914 	bl	8000598 <__aeabi_f2d>
 8001370:	a303      	add	r3, pc, #12	; (adr r3, 8001380 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x78>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7fe ffaf 	bl	80002d8 <__aeabi_dsub>
 800137a:	e7e1      	b.n	8001340 <_ZN9Convertor24updateFluidMotorJogWheelEv+0x38>
 800137c:	f3af 8000 	nop.w
 8001380:	9999999a 	.word	0x9999999a
 8001384:	3fa99999 	.word	0x3fa99999
 8001388:	446d8000 	.word	0x446d8000
 800138c:	c46d8000 	.word	0xc46d8000

08001390 <_ZN9Convertor17updateFluidAmountEv>:
	}


}

void Convertor::updateFluidAmount(void){
 8001390:	b510      	push	{r4, lr}
 8001392:	4604      	mov	r4, r0

	//Set fluidamount (increments of the fluid actuator)

	if(this->_sbus->D_button() && (_fluidAmount < 100)){
 8001394:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001396:	f001 fc03 	bl	8002ba0 <_ZN4SBUS8D_buttonEv>
 800139a:	b128      	cbz	r0, 80013a8 <_ZN9Convertor17updateFluidAmountEv+0x18>
 800139c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800139e:	2b63      	cmp	r3, #99	; 0x63
 80013a0:	d802      	bhi.n	80013a8 <_ZN9Convertor17updateFluidAmountEv+0x18>

		_fluidAmount += 5;
 80013a2:	3305      	adds	r3, #5
	}else if(_sbus->C_button() && (_fluidAmount > 5)){

		_fluidAmount -= 5;
 80013a4:	8523      	strh	r3, [r4, #40]	; 0x28
	}

}
 80013a6:	bd10      	pop	{r4, pc}
	}else if(_sbus->C_button() && (_fluidAmount > 5)){
 80013a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013aa:	f001 fbcb 	bl	8002b44 <_ZN4SBUS8C_buttonEv>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d0f9      	beq.n	80013a6 <_ZN9Convertor17updateFluidAmountEv+0x16>
 80013b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d9f6      	bls.n	80013a6 <_ZN9Convertor17updateFluidAmountEv+0x16>
		_fluidAmount -= 5;
 80013b8:	3b05      	subs	r3, #5
 80013ba:	e7f3      	b.n	80013a4 <_ZN9Convertor17updateFluidAmountEv+0x14>

080013bc <_ZN9Convertor15get_selectorPWMEv>:

int16_t Convertor::get_selectorPWM(void){

	return this->_selectorPWM;

}
 80013bc:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	; 0x96
 80013c0:	4770      	bx	lr

080013c2 <_ZN9Convertor12get_fluidPWMEv>:


int16_t Convertor::get_fluidPWM(void){

	return this->_fluidPWM;
}
 80013c2:	f9b0 009a 	ldrsh.w	r0, [r0, #154]	; 0x9a
 80013c6:	4770      	bx	lr

080013c8 <_ZN9Convertor11get_pushPWMEv>:
int16_t Convertor::get_pushPWM(void){


	return this->_pushMotorPWM;

}
 80013c8:	f9b0 0098 	ldrsh.w	r0, [r0, #152]	; 0x98
 80013cc:	4770      	bx	lr

080013ce <_ZN9Convertor19get_cleanerMotorPWMEv>:
int16_t Convertor::get_cleanerMotorPWM(void){

	return this->_cleanerMotorPWM;


}
 80013ce:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	; 0x94
 80013d2:	4770      	bx	lr

080013d4 <_ZN9Convertor10get_LEDPWMEv>:

int16_t Convertor::get_LEDPWM(void){

	return _ledPWM;
}
 80013d4:	f9b0 0092 	ldrsh.w	r0, [r0, #146]	; 0x92
 80013d8:	4770      	bx	lr
	...

080013dc <_ZN9Convertor19get_battery_voltageEv>:

uint16_t Convertor::get_battery_voltage(void){
 80013dc:	b508      	push	{r3, lr}
	float adcRange = 4095; //because 12 bits
	float resistorTop = 96000.0; 	// not 100k ohm because 1% res and with this factor it's apparently 0.1V accurate
	float resistorBottom = 9500.0;
	float resistorTotal = resistorTop + resistorBottom;

	uint16_t batteryValue = (uint16_t) ((supplyVoltage * (float)batteryInteger * resistorTotal) / (adcRange * resistorBottom) * 10.0);
 80013de:	8a03      	ldrh	r3, [r0, #16]
 80013e0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800143c <_ZN9Convertor19get_battery_voltageEv+0x60>
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001440 <_ZN9Convertor19get_battery_voltageEv+0x64>
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001444 <_ZN9Convertor19get_battery_voltageEv+0x68>
 80013fc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001400:	ee17 0a90 	vmov	r0, s15
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <_ZN9Convertor19get_battery_voltageEv+0x6c>)
 800140a:	2200      	movs	r2, #0
 800140c:	f7ff f91c 	bl	8000648 <__aeabi_dmul>
 8001410:	f7ff fbf2 	bl	8000bf8 <__aeabi_d2uiz>
	float voltageNormalized = (batteryValue - 111) / (float)(126 - 111) * 100.0;
 8001414:	b280      	uxth	r0, r0
 8001416:	386f      	subs	r0, #111	; 0x6f
 8001418:	ee07 0a90 	vmov	s15, r0
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001424:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001428:	eddf 7a08 	vldr	s15, [pc, #32]	; 800144c <_ZN9Convertor19get_battery_voltageEv+0x70>
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
	
	return voltageNormalized;
 8001430:	eefc 7ae7 	vcvt.u32.f32	s15, s15


}
 8001434:	ee17 3a90 	vmov	r3, s15
 8001438:	b298      	uxth	r0, r3
 800143a:	bd08      	pop	{r3, pc}
 800143c:	40533333 	.word	0x40533333
 8001440:	47ce0e00 	.word	0x47ce0e00
 8001444:	4c1466b9 	.word	0x4c1466b9
 8001448:	40240000 	.word	0x40240000
 800144c:	42c80000 	.word	0x42c80000

08001450 <_ZN9Convertor21get_selector_positionEv>:
int16_t Convertor::get_selector_position(void){
 8001450:	b508      	push	{r3, lr}

	return ADC_1_Buffer[0] / 4.095;
 8001452:	6840      	ldr	r0, [r0, #4]
 8001454:	f7ff f87e 	bl	8000554 <__aeabi_ui2d>
 8001458:	a305      	add	r3, pc, #20	; (adr r3, 8001470 <_ZN9Convertor21get_selector_positionEv+0x20>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff fa1d 	bl	800089c <__aeabi_ddiv>
 8001462:	f7ff fba1 	bl	8000ba8 <__aeabi_d2iz>
}
 8001466:	b200      	sxth	r0, r0
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ae147ae1 	.word	0xae147ae1
 8001474:	40106147 	.word	0x40106147

08001478 <_ZN9Convertor22updateSelectorPositionEv>:
void Convertor::updateSelectorPosition(void){
 8001478:	b510      	push	{r4, lr}
 800147a:	4604      	mov	r4, r0
		_pidSelector.measurement = this->get_selector_position();
 800147c:	f7ff ffe8 	bl	8001450 <_ZN9Convertor21get_selector_positionEv>
 8001480:	ee07 0a90 	vmov	s15, r0
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		PIDControllerUpdate(&_pidSelector);
 8001488:	f104 0048 	add.w	r0, r4, #72	; 0x48
		_pidSelector.measurement = this->get_selector_position();
 800148c:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
		PIDControllerUpdate(&_pidSelector);
 8001490:	f009 fe4b 	bl	800b12a <PIDControllerUpdate>
		_selectorPWM =(int16_t) _pidSelector.out;
 8001494:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 8001498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		this->moveSelector(_selectorPWM);
 800149c:	4620      	mov	r0, r4
		_selectorPWM =(int16_t) _pidSelector.out;
 800149e:	ee17 3a90 	vmov	r3, s15
 80014a2:	b219      	sxth	r1, r3
 80014a4:	f8a4 1096 	strh.w	r1, [r4, #150]	; 0x96
}
 80014a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		this->moveSelector(_selectorPWM);
 80014ac:	f7ff befe 	b.w	80012ac <_ZN9Convertor12moveSelectorEs>

080014b0 <_ZN9Convertor17get_fluidPositionEv>:

int16_t Convertor::get_fluidPosition(void){
 80014b0:	b508      	push	{r3, lr}


	return ADC_1_Buffer[2] / 4.095;
 80014b2:	68c0      	ldr	r0, [r0, #12]
 80014b4:	f7ff f84e 	bl	8000554 <__aeabi_ui2d>
 80014b8:	a305      	add	r3, pc, #20	; (adr r3, 80014d0 <_ZN9Convertor17get_fluidPositionEv+0x20>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f9ed 	bl	800089c <__aeabi_ddiv>
 80014c2:	f7ff fb71 	bl	8000ba8 <__aeabi_d2iz>

}
 80014c6:	b200      	sxth	r0, r0
 80014c8:	bd08      	pop	{r3, pc}
 80014ca:	bf00      	nop
 80014cc:	f3af 8000 	nop.w
 80014d0:	ae147ae1 	.word	0xae147ae1
 80014d4:	40106147 	.word	0x40106147

080014d8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>:
Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 80014d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014dc:	2500      	movs	r5, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4688      	mov	r8, r1
 80014e2:	4617      	mov	r7, r2
 80014e4:	4629      	mov	r1, r5
 80014e6:	f800 5b04 	strb.w	r5, [r0], #4
 80014ea:	2210      	movs	r2, #16
 80014ec:	461e      	mov	r6, r3
 80014ee:	f00a f9ad 	bl	800b84c <memset>
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xc0>)
 80014f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80014fa:	f104 0948 	add.w	r9, r4, #72	; 0x48
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xc4>)
 8001500:	6323      	str	r3, [r4, #48]	; 0x30
 8001502:	4629      	mov	r1, r5
 8001504:	2244      	movs	r2, #68	; 0x44
 8001506:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800150a:	e9c4 5507 	strd	r5, r5, [r4, #28]
 800150e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8001512:	4648      	mov	r0, r9
 8001514:	f00a f99a 	bl	800b84c <memset>
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xc8>)
 800151a:	64a3      	str	r3, [r4, #72]	; 0x48
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xcc>)
 800151e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xd0>)
 8001522:	6523      	str	r3, [r4, #80]	; 0x50
 8001524:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001528:	6563      	str	r3, [r4, #84]	; 0x54
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xd4>)
 800152c:	65a3      	str	r3, [r4, #88]	; 0x58
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xd8>)
 8001530:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xdc>)
 8001534:	6623      	str	r3, [r4, #96]	; 0x60
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xe0>)
 8001538:	6663      	str	r3, [r4, #100]	; 0x64
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xe4>)
 800153c:	66a3      	str	r3, [r4, #104]	; 0x68
 800153e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001542:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001544:	2301      	movs	r3, #1
 8001546:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xe8>)
 800154c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c
 8001550:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8001554:	f884 508e 	strb.w	r5, [r4, #142]	; 0x8e
 8001558:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 800155c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8001560:	4d18      	ldr	r5, [pc, #96]	; (80015c4 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xec>)
	this->_altimeter = altimeter;
 8001562:	9b08      	ldr	r3, [sp, #32]
 8001564:	6463      	str	r3, [r4, #68]	; 0x44
	this->_timers = init;
 8001566:	e9c4 870e 	strd	r8, r7, [r4, #56]	; 0x38
Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 800156a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 800156e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	this->_components = components;
 8001572:	6426      	str	r6, [r4, #64]	; 0x40
	this->_fluidPosition = this->get_fluidPosition();
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff ff9b 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 800157a:	ee07 0a90 	vmov	s15, r0
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	PIDControllerInit(&_pidSelector);
 8001582:	4648      	mov	r0, r9
	this->_fluidPosition = this->get_fluidPosition();
 8001584:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	_pidSelector.setPoint = _cleanerPos;
 8001588:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	PIDControllerInit(&_pidSelector);
 800158c:	f009 fdc6 	bl	800b11c <PIDControllerInit>
}
 8001590:	4620      	mov	r0, r4
 8001592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001596:	bf00      	nop
 8001598:	03e80014 	.word	0x03e80014
 800159c:	43480000 	.word	0x43480000
 80015a0:	42200000 	.word	0x42200000
 80015a4:	42c80000 	.word	0x42c80000
 80015a8:	40a00000 	.word	0x40a00000
 80015ac:	c47a0000 	.word	0xc47a0000
 80015b0:	447a0000 	.word	0x447a0000
 80015b4:	c3fa0000 	.word	0xc3fa0000
 80015b8:	43fa0000 	.word	0x43fa0000
 80015bc:	3ba3d70a 	.word	0x3ba3d70a
 80015c0:	44750000 	.word	0x44750000
 80015c4:	42dc0000 	.word	0x42dc0000

080015c8 <_ZN9Convertor19updateFluidPositionEv>:
void Convertor::updateFluidPosition(void){
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
	if(_sbus->shoulder_button() &&( _fluidPosition < 950)){
 80015cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015ce:	f001 fb43 	bl	8002c58 <_ZN4SBUS15shoulder_buttonEv>
 80015d2:	b188      	cbz	r0, 80015f8 <_ZN9Convertor19updateFluidPositionEv+0x30>
 80015d4:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80015d8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800163c <_ZN9Convertor19updateFluidPositionEv+0x74>
 80015dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d508      	bpl.n	80015f8 <_ZN9Convertor19updateFluidPositionEv+0x30>
    	_fluidPosition += _fluidAmount;
 80015e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    if(_sbus->shoulder_button_long()){
 80015f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015fa:	f001 fb5b 	bl	8002cb4 <_ZN4SBUS20shoulder_button_longEv>
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <_ZN9Convertor19updateFluidPositionEv+0x78>)
 8001600:	b1c8      	cbz	r0, 8001636 <_ZN9Convertor19updateFluidPositionEv+0x6e>
        if(++timer <= long_press){
 8001602:	8813      	ldrh	r3, [r2, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b29b      	uxth	r3, r3
        if(timer == 300){
 8001608:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
        if(++timer <= long_press){
 800160c:	8013      	strh	r3, [r2, #0]
        if(timer == 300){
 800160e:	d109      	bne.n	8001624 <_ZN9Convertor19updateFluidPositionEv+0x5c>
        	_fluidPosition = this->get_fluidPosition();
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff ff4d 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 8001616:	ee07 0a90 	vmov	s15, r0
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8001622:	bd10      	pop	{r4, pc}
        if(timer == 599){
 8001624:	f240 2157 	movw	r1, #599	; 0x257
 8001628:	428b      	cmp	r3, r1
 800162a:	d1fa      	bne.n	8001622 <_ZN9Convertor19updateFluidPositionEv+0x5a>
			_fluidPosition = 50;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <_ZN9Convertor19updateFluidPositionEv+0x7c>)
 800162e:	6263      	str	r3, [r4, #36]	; 0x24
        	timer = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	8013      	strh	r3, [r2, #0]
 8001634:	e7f5      	b.n	8001622 <_ZN9Convertor19updateFluidPositionEv+0x5a>
    	timer = 0;
 8001636:	8010      	strh	r0, [r2, #0]
}
 8001638:	e7f3      	b.n	8001622 <_ZN9Convertor19updateFluidPositionEv+0x5a>
 800163a:	bf00      	nop
 800163c:	446d8000 	.word	0x446d8000
 8001640:	20000372 	.word	0x20000372
 8001644:	42480000 	.word	0x42480000

08001648 <_ZN9Convertor16updateFluidMotorEv>:
void Convertor::updateFluidMotor(void){
 8001648:	b510      	push	{r4, lr}
 800164a:	4604      	mov	r4, r0
	if((this->get_fluidPosition() <= (_fluidPosition + tolerance)) && (this->get_fluidPosition() >= (_fluidPosition - tolerance)) ){
 800164c:	f7ff ff30 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 8001650:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8001654:	ee07 0a90 	vmov	s15, r0
 8001658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	ee36 6a87 	vadd.f32	s12, s13, s14
 8001664:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	d80e      	bhi.n	800168c <_ZN9Convertor16updateFluidMotorEv+0x44>
 800166e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	db07      	blt.n	800168c <_ZN9Convertor16updateFluidMotorEv+0x44>
		this->actuatorControl(0, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800167c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800167e:	f002 f885 	bl	800378c <_ZN11Initializer20get_fluidMotor_TimerEv>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001682:	6803      	ldr	r3, [r0, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
}
 800168a:	bd10      	pop	{r4, pc}
	}else if(this->get_fluidPosition() < (_fluidPosition )){
 800168c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d508      	bpl.n	80016a8 <_ZN9Convertor16updateFluidMotorEv+0x60>
		this->actuatorControl(300, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001696:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001698:	f002 f878 	bl	800378c <_ZN11Initializer20get_fluidMotor_TimerEv>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	e7ef      	b.n	8001688 <_ZN9Convertor16updateFluidMotorEv+0x40>
	}else if(this->get_fluidPosition() > (_fluidPosition)){
 80016a8:	ddef      	ble.n	800168a <_ZN9Convertor16updateFluidMotorEv+0x42>
		this->actuatorControl(-300, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 80016aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80016ac:	f002 f86e 	bl	800378c <_ZN11Initializer20get_fluidMotor_TimerEv>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 80016b0:	6803      	ldr	r3, [r0, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80016b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ba:	e7e5      	b.n	8001688 <_ZN9Convertor16updateFluidMotorEv+0x40>

080016bc <_ZN9Convertor12setSleepModeEv>:
void Convertor::setSleepMode(void){
 80016bc:	b510      	push	{r4, lr}
 80016be:	4604      	mov	r4, r0
	if(this->_sbus->home_button()){
 80016c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80016c2:	f001 fa9b 	bl	8002bfc <_ZN4SBUS11home_buttonEv>
 80016c6:	b170      	cbz	r0, 80016e6 <_ZN9Convertor12setSleepModeEv+0x2a>
		_sleepToggle = !_sleepToggle;
 80016c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		_fluidPosition = this->get_fluidPosition();
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff feeb 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 80016da:	ee07 0a90 	vmov	s15, r0
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 80016e6:	bd10      	pop	{r4, pc}

080016e8 <_ZN9Convertor16get_pushPositionEv>:

int16_t Convertor::get_pushPosition(void){
 80016e8:	b508      	push	{r3, lr}

	return ADC_1_Buffer[1]/ 4.095;
 80016ea:	6880      	ldr	r0, [r0, #8]
 80016ec:	f7fe ff32 	bl	8000554 <__aeabi_ui2d>
 80016f0:	a305      	add	r3, pc, #20	; (adr r3, 8001708 <_ZN9Convertor16get_pushPositionEv+0x20>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff f8d1 	bl	800089c <__aeabi_ddiv>
 80016fa:	f7ff fa55 	bl	8000ba8 <__aeabi_d2iz>
}
 80016fe:	b200      	sxth	r0, r0
 8001700:	bd08      	pop	{r3, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	ae147ae1 	.word	0xae147ae1
 800170c:	40106147 	.word	0x40106147

08001710 <_ZN9Convertor14get_LEDCurrentEv>:


int16_t Convertor::get_LEDCurrent(void){
 8001710:	b508      	push	{r3, lr}

	return ADC_2_Buffer[0] / 4.095;
 8001712:	6940      	ldr	r0, [r0, #20]
 8001714:	f7fe ff1e 	bl	8000554 <__aeabi_ui2d>
 8001718:	a305      	add	r3, pc, #20	; (adr r3, 8001730 <_ZN9Convertor14get_LEDCurrentEv+0x20>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f8bd 	bl	800089c <__aeabi_ddiv>
 8001722:	f7ff fa41 	bl	8000ba8 <__aeabi_d2iz>
}
 8001726:	b200      	sxth	r0, r0
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	ae147ae1 	.word	0xae147ae1
 8001734:	40106147 	.word	0x40106147

08001738 <_ZN9Convertor16get_fluidCurrentEv>:

int16_t Convertor::get_fluidCurrent(void){
 8001738:	b508      	push	{r3, lr}


	return ADC_2_Buffer[1] / 4.095;
 800173a:	6980      	ldr	r0, [r0, #24]
 800173c:	f7fe ff0a 	bl	8000554 <__aeabi_ui2d>
 8001740:	a305      	add	r3, pc, #20	; (adr r3, 8001758 <_ZN9Convertor16get_fluidCurrentEv+0x20>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7ff f8a9 	bl	800089c <__aeabi_ddiv>
 800174a:	f7ff fa2d 	bl	8000ba8 <__aeabi_d2iz>
}
 800174e:	b200      	sxth	r0, r0
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	ae147ae1 	.word	0xae147ae1
 800175c:	40106147 	.word	0x40106147

08001760 <_ZN9Convertor15get_pushCurrentEv>:

int16_t Convertor::get_pushCurrent(void){
 8001760:	b508      	push	{r3, lr}

	return ADC_5_Buffer[0] / 4.095;
 8001762:	69c0      	ldr	r0, [r0, #28]
 8001764:	f7fe fef6 	bl	8000554 <__aeabi_ui2d>
 8001768:	a305      	add	r3, pc, #20	; (adr r3, 8001780 <_ZN9Convertor15get_pushCurrentEv+0x20>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7ff f895 	bl	800089c <__aeabi_ddiv>
 8001772:	f7ff fa19 	bl	8000ba8 <__aeabi_d2iz>

}
 8001776:	b200      	sxth	r0, r0
 8001778:	bd08      	pop	{r3, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	ae147ae1 	.word	0xae147ae1
 8001784:	40106147 	.word	0x40106147

08001788 <_ZN9Convertor19get_selectorCurrentEv>:

int16_t Convertor::get_selectorCurrent(void){
 8001788:	b508      	push	{r3, lr}

	return ADC_5_Buffer[1] / 4.095;
 800178a:	6a00      	ldr	r0, [r0, #32]
 800178c:	f7fe fee2 	bl	8000554 <__aeabi_ui2d>
 8001790:	a305      	add	r3, pc, #20	; (adr r3, 80017a8 <_ZN9Convertor19get_selectorCurrentEv+0x20>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7ff f881 	bl	800089c <__aeabi_ddiv>
 800179a:	f7ff fa05 	bl	8000ba8 <__aeabi_d2iz>
}
 800179e:	b200      	sxth	r0, r0
 80017a0:	bd08      	pop	{r3, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	ae147ae1 	.word	0xae147ae1
 80017ac:	40106147 	.word	0x40106147

080017b0 <_ZN9Convertor15get_fluidAmountEv>:

int16_t Convertor::get_fluidAmount(void){

	return _fluidAmount;
}
 80017b0:	f9b0 0028 	ldrsh.w	r0, [r0, #40]	; 0x28
 80017b4:	4770      	bx	lr

080017b6 <_ZN9Convertor15get_sleepToggleEv>:

int16_t Convertor::get_sleepToggle(void){

	return _sleepToggle;

}
 80017b6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80017ba:	4770      	bx	lr

080017bc <_ZN9Convertor13Error_HandlerEv>:


}


void Convertor::Error_Handler(void){
 80017bc:	b570      	push	{r4, r5, r6, lr}

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80017be:	4e09      	ldr	r6, [pc, #36]	; (80017e4 <_ZN9Convertor13Error_HandlerEv+0x28>)
		HAL_Delay(100);
		printf("Problem with convertor class \r\n");
 80017c0:	4d09      	ldr	r5, [pc, #36]	; (80017e8 <_ZN9Convertor13Error_HandlerEv+0x2c>)
void Convertor::Error_Handler(void){
 80017c2:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80017c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c8:	4630      	mov	r0, r6
 80017ca:	f005 f874 	bl	80068b6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f003 fb22 	bl	8004e18 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80017d4:	3c01      	subs	r4, #1
		printf("Problem with convertor class \r\n");
 80017d6:	4628      	mov	r0, r5
 80017d8:	f00a fe10 	bl	800c3fc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80017dc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80017e0:	d1f0      	bne.n	80017c4 <_ZN9Convertor13Error_HandlerEv+0x8>

	}

}
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	48000800 	.word	0x48000800
 80017e8:	0800e3d0 	.word	0x0800e3d0

080017ec <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>:
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 80017ec:	b530      	push	{r4, r5, lr}
 80017ee:	b089      	sub	sp, #36	; 0x24
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017f0:	2300      	movs	r3, #0
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 80017f2:	460c      	mov	r4, r1
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017f4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80017f8:	9307      	str	r3, [sp, #28]
	sConfig.Channel = Channel; // ADC_CHANNEL_VOPAMP1; example. switching channels. Better to use built in function ch scanning and dma adc to minmize overhead.
 80017fa:	9200      	str	r2, [sp, #0]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5; //important. Less cycles means less consistent and accurate results.
 80017fc:	2304      	movs	r3, #4
 80017fe:	2206      	movs	r2, #6
 8001800:	e9cd 2301 	strd	r2, r3, [sp, #4]
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 8001804:	4605      	mov	r5, r0
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001806:	227f      	movs	r2, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001808:	4669      	mov	r1, sp
 800180a:	4620      	mov	r0, r4
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180c:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001810:	f003 fe76 	bl	8005500 <HAL_ADC_ConfigChannel>
 8001814:	b110      	cbz	r0, 800181c <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm+0x30>
		Error_Handler();
 8001816:	4628      	mov	r0, r5
 8001818:	f7ff ffd0 	bl	80017bc <_ZN9Convertor13Error_HandlerEv>
	HAL_ADC_Start(hadc); //motor
 800181c:	4620      	mov	r0, r4
 800181e:	f004 f8ff 	bl	8005a20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8001822:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001826:	4620      	mov	r0, r4
 8001828:	f003 fc36 	bl	8005098 <HAL_ADC_PollForConversion>
	uint16_t Value = HAL_ADC_GetValue(hadc); // - 637 for motor offset
 800182c:	4620      	mov	r0, r4
 800182e:	f003 fcc9 	bl	80051c4 <HAL_ADC_GetValue>
 8001832:	4605      	mov	r5, r0
	HAL_ADC_Stop(hadc);
 8001834:	4620      	mov	r0, r4
 8001836:	f004 fa31 	bl	8005c9c <HAL_ADC_Stop>
}
 800183a:	b2a8      	uxth	r0, r5
 800183c:	b009      	add	sp, #36	; 0x24
 800183e:	bd30      	pop	{r4, r5, pc}

08001840 <_ZN9Convertor6getADCEv>:
void Convertor::getADC(void){
 8001840:	b510      	push	{r4, lr}
 8001842:	4604      	mov	r4, r0
	ADC_1_Buffer[0] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_11);
 8001844:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001846:	f002 fb19 	bl	8003e7c <_ZN10Components9get_ADC_1Ev>
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <_ZN9Convertor6getADCEv+0x70>)
 800184c:	4601      	mov	r1, r0
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff ffcc 	bl	80017ec <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 8001854:	6060      	str	r0, [r4, #4]
	ADC_1_Buffer[1] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_14);
 8001856:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001858:	f002 fb10 	bl	8003e7c <_ZN10Components9get_ADC_1Ev>
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <_ZN9Convertor6getADCEv+0x74>)
 800185e:	4601      	mov	r1, r0
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff ffc3 	bl	80017ec <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 8001866:	60a0      	str	r0, [r4, #8]
	ADC_1_Buffer[2] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_12);
 8001868:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800186a:	f002 fb07 	bl	8003e7c <_ZN10Components9get_ADC_1Ev>
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_ZN9Convertor6getADCEv+0x78>)
 8001870:	4601      	mov	r1, r0
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff ffba 	bl	80017ec <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 8001878:	60e0      	str	r0, [r4, #12]
	ADC_1_Buffer[3] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_1);
 800187a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800187c:	f002 fafe 	bl	8003e7c <_ZN10Components9get_ADC_1Ev>
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <_ZN9Convertor6getADCEv+0x7c>)
 8001882:	4601      	mov	r1, r0
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff ffb1 	bl	80017ec <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 800188a:	6120      	str	r0, [r4, #16]
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 800188c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800188e:	f002 faf9 	bl	8003e84 <_ZN10Components9get_ADC_2Ev>
 8001892:	f104 0114 	add.w	r1, r4, #20
 8001896:	2202      	movs	r2, #2
 8001898:	f004 f944 	bl	8005b24 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 800189c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800189e:	f002 faf5 	bl	8003e8c <_ZN10Components9get_ADC_5Ev>
 80018a2:	f104 011c 	add.w	r1, r4, #28
 80018a6:	2202      	movs	r2, #2
}
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 80018ac:	f004 b93a 	b.w	8005b24 <HAL_ADC_Start_DMA>
 80018b0:	2e300800 	.word	0x2e300800
 80018b4:	3ac04000 	.word	0x3ac04000
 80018b8:	32601000 	.word	0x32601000
 80018bc:	04300002 	.word	0x04300002

080018c0 <_ZN9Convertor7processEv>:
void Convertor::process(void){
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4604      	mov	r4, r0
	this->setSleepMode();
 80018c4:	f7ff fefa 	bl	80016bc <_ZN9Convertor12setSleepModeEv>
	if(_sleepToggle == 1){
 80018c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
		this->updateLED();
 80018cc:	4620      	mov	r0, r4
	if(_sleepToggle == 1){
 80018ce:	b1db      	cbz	r3, 8001908 <_ZN9Convertor7processEv+0x48>
		this->updateLED();
 80018d0:	f7ff fb84 	bl	8000fdc <_ZN9Convertor9updateLEDEv>
		this->updateSelector();
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff fc15 	bl	8001104 <_ZN9Convertor14updateSelectorEv>
		this->updateSelectorPosition();
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fdcc 	bl	8001478 <_ZN9Convertor22updateSelectorPositionEv>
		this->updatePushMotor();
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff fcf4 	bl	80012ce <_ZN9Convertor15updatePushMotorEv>
		this->getADC();
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ffaa 	bl	8001840 <_ZN9Convertor6getADCEv>
		this->updateFluidAmount();
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff fd4f 	bl	8001390 <_ZN9Convertor17updateFluidAmountEv>
		this->updateFluidMotor();
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff fea8 	bl	8001648 <_ZN9Convertor16updateFluidMotorEv>
		this->updateFluidMotorJogWheel();
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff fd05 	bl	8001308 <_ZN9Convertor24updateFluidMotorJogWheelEv>
		this->updateFluidPosition();
 80018fe:	4620      	mov	r0, r4
}
 8001900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		this->updateFluidPosition();
 8001904:	f7ff be60 	b.w	80015c8 <_ZN9Convertor19updateFluidPositionEv>
		this->updateSelectorPosition();
 8001908:	f7ff fdb6 	bl	8001478 <_ZN9Convertor22updateSelectorPositionEv>
		this->updateFluidPosition();
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff fe5b 	bl	80015c8 <_ZN9Convertor19updateFluidPositionEv>
		this->getADC();
 8001912:	4620      	mov	r0, r4
}
 8001914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		this->getADC();
 8001918:	f7ff bf92 	b.w	8001840 <_ZN9Convertor6getADCEv>

0800191c <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components>:

//DONT FORGET TO ADD DEFAULT IMPLEMENTATION
HerelinkController::HerelinkController(){};


HerelinkController::HerelinkController(UART_HandleTypeDef *huart_sbus, UART_HandleTypeDef *huart_mavlink, Initializer *init, Components *components)
 800191c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001920:	4604      	mov	r4, r0
 8001922:	4617      	mov	r7, r2
 8001924:	460e      	mov	r6, r1
	:_altimeter(&hi2c2),
	 _sbus(huart_sbus),
	 _convertor(&this->_sbus, init, components, &this->_altimeter),
	 _mavlink(huart_mavlink, &this->_altimeter, &this->_convertor) {
 8001926:	f504 68fc 	add.w	r8, r4, #2016	; 0x7e0
 800192a:	4917      	ldr	r1, [pc, #92]	; (8001988 <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components+0x6c>)
HerelinkController::HerelinkController(UART_HandleTypeDef *huart_sbus, UART_HandleTypeDef *huart_mavlink, Initializer *init, Components *components)
 800192c:	461d      	mov	r5, r3
	 _mavlink(huart_mavlink, &this->_altimeter, &this->_convertor) {
 800192e:	f001 f9c8 	bl	8002cc2 <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>
 8001932:	4643      	mov	r3, r8
 8001934:	4622      	mov	r2, r4
 8001936:	4639      	mov	r1, r7
 8001938:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800193c:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8001940:	f000 fb1a 	bl	8001f78 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9AltimeterP9Convertor>
 8001944:	4631      	mov	r1, r6
 8001946:	4638      	mov	r0, r7
 8001948:	f000 ff50 	bl	80027ec <_ZN4SBUSC1EP20__UART_HandleTypeDef>
 800194c:	9b08      	ldr	r3, [sp, #32]
 800194e:	9400      	str	r4, [sp, #0]
 8001950:	462a      	mov	r2, r5
 8001952:	4639      	mov	r1, r7
 8001954:	4640      	mov	r0, r8
 8001956:	f7ff fdbf 	bl	80014d8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>
 800195a:	f604 038c 	addw	r3, r4, #2188	; 0x88c
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components+0x70>)
 8001960:	2164      	movs	r1, #100	; 0x64
 8001962:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
 8001966:	601a      	str	r2, [r3, #0]

}

void HerelinkController::setMotorSpeed(int speed){

	this->_convertor._maxPercentage = speed;
 8001968:	f8a4 180c 	strh.w	r1, [r4, #2060]	; 0x80c
}

void HerelinkController::setSquareSize(int size){

	this->_convertor._squarePosB = size;
 800196c:	f504 6101 	add.w	r1, r4, #2064	; 0x810
	 _mavlink(huart_mavlink, &this->_altimeter, &this->_convertor) {
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8001974:	4620      	mov	r0, r4
	 _mavlink(huart_mavlink, &this->_altimeter, &this->_convertor) {
 8001976:	f8c4 3890 	str.w	r3, [r4, #2192]	; 0x890
	this->_convertor._squarePosB = size;
 800197a:	600a      	str	r2, [r1, #0]

}

void HerelinkController::setLedIntensity(int intensity){

	this->_convertor._max_led_intensity = intensity;
 800197c:	f8a4 380a 	strh.w	r3, [r4, #2058]	; 0x80a
}
 8001980:	b002      	add	sp, #8
 8001982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001986:	bf00      	nop
 8001988:	20000ab8 	.word	0x20000ab8
 800198c:	43480000 	.word	0x43480000

08001990 <_ZN18HerelinkController6updateEv>:
SBUS HerelinkController::getSbus(void){

	return _sbus;
}

void HerelinkController::update(void){
 8001990:	b513      	push	{r0, r1, r4, lr}
 8001992:	4604      	mov	r4, r0

	//Volgorde is belangrijker dan je denkt. Heb hier een soort van "scheduler" proberen te maken.
	//Voorlopig werkt deze oplossing goed. Beter zou zijn om met threads en een queue systeem te werken.

	this->_sbus.update();
 8001994:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8001998:	f000 ffc0 	bl	800291c <_ZN4SBUS6updateEv>
	this->_convertor.process();
 800199c:	f504 60fc 	add.w	r0, r4, #2016	; 0x7e0
 80019a0:	f7ff ff8e 	bl	80018c0 <_ZN9Convertor7processEv>


	if(HAL_GetTick() % 500 == 0){
 80019a4:	f003 fa32 	bl	8004e0c <HAL_GetTick>
 80019a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019ac:	fbb0 f2f3 	udiv	r2, r0, r3
 80019b0:	fb02 0013 	mls	r0, r2, r3, r0
 80019b4:	b918      	cbnz	r0, 80019be <_ZN18HerelinkController6updateEv+0x2e>
		this->_mavlink.heartbeat();
 80019b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80019ba:	f000 fb29 	bl	8002010 <_ZN14MavlinkControl9heartbeatEv>



	}if(HAL_GetTick() % 103 == 0){
 80019be:	f003 fa25 	bl	8004e0c <HAL_GetTick>
 80019c2:	2367      	movs	r3, #103	; 0x67
 80019c4:	fbb0 f2f3 	udiv	r2, r0, r3
 80019c8:	fb02 0013 	mls	r0, r2, r3, r0
 80019cc:	b938      	cbnz	r0, 80019de <_ZN18HerelinkController6updateEv+0x4e>

		this->_mavlink.update_RX();
 80019ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80019d2:	9001      	str	r0, [sp, #4]
 80019d4:	f000 fb14 	bl	8002000 <_ZN14MavlinkControl9update_RXEv>
		//this->_mavlink.sendTestMessage();
		//this->_mavlink.sendAltitude();
		this->_mavlink.sendBattery();
 80019d8:	9801      	ldr	r0, [sp, #4]
 80019da:	f000 fe59 	bl	8002690 <_ZN14MavlinkControl11sendBatteryEv>


	}if(HAL_GetTick() % 120 == 0){
 80019de:	f003 fa15 	bl	8004e0c <HAL_GetTick>
 80019e2:	2378      	movs	r3, #120	; 0x78
 80019e4:	fbb0 f2f3 	udiv	r2, r0, r3
 80019e8:	fb02 0013 	mls	r0, r2, r3, r0
 80019ec:	b930      	cbnz	r0, 80019fc <_ZN18HerelinkController6updateEv+0x6c>

		this->_mavlink.sendFluids();
 80019ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
		//this->_altimeter.read_altitude();




}
 80019f2:	b002      	add	sp, #8
 80019f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		this->_mavlink.sendFluids();
 80019f8:	f000 be9a 	b.w	8002730 <_ZN14MavlinkControl10sendFluidsEv>
}
 80019fc:	b002      	add	sp, #8
 80019fe:	bd10      	pop	{r4, pc}

08001a00 <crc_accumulate>:
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001a00:	880a      	ldrh	r2, [r1, #0]
 8001a02:	4050      	eors	r0, r2
        tmp ^= (tmp<<4);
 8001a04:	ea80 1000 	eor.w	r0, r0, r0, lsl #4
 8001a08:	b2c0      	uxtb	r0, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001a0a:	0903      	lsrs	r3, r0, #4
 8001a0c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001a10:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a14:	ea83 00c0 	eor.w	r0, r3, r0, lsl #3
 8001a18:	8008      	strh	r0, [r1, #0]
}
 8001a1a:	4770      	bx	lr

08001a1c <mavlink_update_checksum>:
	crc_init(&crcTmp);
	msg->checksum = crcTmp;
}

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001a1c:	b513      	push	{r0, r1, r4, lr}
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
	uint16_t checksum = msg->checksum;
 8001a22:	7823      	ldrb	r3, [r4, #0]
 8001a24:	7862      	ldrb	r2, [r4, #1]
	crc_accumulate(c, &checksum);
 8001a26:	f10d 0106 	add.w	r1, sp, #6
	uint16_t checksum = msg->checksum;
 8001a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate(c, &checksum);
 8001a32:	f7ff ffe5 	bl	8001a00 <crc_accumulate>
	msg->checksum = checksum;
 8001a36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a3a:	8023      	strh	r3, [r4, #0]
}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <mavlink_sha256_update>:
    m->counter[6] += GG;
    m->counter[7] += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 8001a44:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 8001a46:	00d3      	lsls	r3, r2, #3
 8001a48:	195b      	adds	r3, r3, r5
 8001a4a:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 8001a4c:	bf28      	it	cs
 8001a4e:	6843      	ldrcs	r3, [r0, #4]
{
 8001a50:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 8001a52:	bf24      	itt	cs
 8001a54:	3301      	addcs	r3, #1
 8001a56:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001a58:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8001a5e:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 8001a62:	4604      	mov	r4, r0
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 8001a68:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 8001a6c:	930d      	str	r3, [sp, #52]	; 0x34
	data[i] = in[i];
 8001a6e:	f10d 0978 	add.w	r9, sp, #120	; 0x78
    while(len > 0){
 8001a72:	2e00      	cmp	r6, #0
 8001a74:	f000 80be 	beq.w	8001bf4 <mavlink_sha256_update+0x1b4>
	uint32_t l = 64 - offset;
 8001a78:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 8001a7c:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a80:	9900      	ldr	r1, [sp, #0]
 8001a82:	bf28      	it	cs
 8001a84:	4637      	movcs	r7, r6
 8001a86:	1958      	adds	r0, r3, r5
 8001a88:	463a      	mov	r2, r7
 8001a8a:	f009 fed1 	bl	800b830 <memcpy>
	offset += l;
	p += l;
 8001a8e:	9b00      	ldr	r3, [sp, #0]
	offset += l;
 8001a90:	443d      	add	r5, r7
	p += l;
 8001a92:	443b      	add	r3, r7
	len -= l;
	if(offset == 64){
 8001a94:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 8001a96:	9300      	str	r3, [sp, #0]
	len -= l;
 8001a98:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 8001a9c:	d1e9      	bne.n	8001a72 <mavlink_sha256_update+0x32>
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	aa0e      	add	r2, sp, #56	; 0x38
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 8001aa2:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001aa6:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001aa8:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8001aac:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8001aae:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001ab2:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001ab4:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001ab8:	70d1      	strb	r1, [r2, #3]
	    for (i = 0; i < 16; i++){
 8001aba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001abc:	3304      	adds	r3, #4
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	f102 0204 	add.w	r2, r2, #4
 8001ac4:	d1ed      	bne.n	8001aa2 <mavlink_sha256_update+0x62>
    AA = m->counter[0];
 8001ac6:	68a3      	ldr	r3, [r4, #8]
 8001ac8:	9301      	str	r3, [sp, #4]
    BB = m->counter[1];
 8001aca:	68e3      	ldr	r3, [r4, #12]
 8001acc:	9302      	str	r3, [sp, #8]
    CC = m->counter[2];
 8001ace:	6923      	ldr	r3, [r4, #16]
 8001ad0:	9303      	str	r3, [sp, #12]
    DD = m->counter[3];
 8001ad2:	6963      	ldr	r3, [r4, #20]
 8001ad4:	9304      	str	r3, [sp, #16]
    EE = m->counter[4];
 8001ad6:	69a3      	ldr	r3, [r4, #24]
 8001ad8:	9305      	str	r3, [sp, #20]
    FF = m->counter[5];
 8001ada:	69e3      	ldr	r3, [r4, #28]
 8001adc:	9306      	str	r3, [sp, #24]
    GG = m->counter[6];
 8001ade:	6a23      	ldr	r3, [r4, #32]
 8001ae0:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8001ae2:	af0e      	add	r7, sp, #56	; 0x38
    HH = m->counter[7];
 8001ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae6:	9308      	str	r3, [sp, #32]
	data[i] = in[i];
 8001ae8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001aea:	464d      	mov	r5, r9
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001afa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001afe:	464a      	mov	r2, r9
    for (i = 16; i < 64; ++i)
 8001b00:	2010      	movs	r0, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001b02:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b04:	4617      	mov	r7, r2
 8001b06:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8001b0a:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8001b0e:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	683f      	ldr	r7, [r7, #0]
 8001b16:	f852 5f04 	ldr.w	r5, [r2, #4]!
 8001b1a:	443b      	add	r3, r7
 8001b1c:	4419      	add	r1, r3
 8001b1e:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8001b22:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8001b26:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 8001b2a:	3001      	adds	r0, #1
	    sigma0(data[i-15]) + data[i - 16];
 8001b2c:	4419      	add	r1, r3
    for (i = 16; i < 64; ++i)
 8001b2e:	2840      	cmp	r0, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001b30:	63d1      	str	r1, [r2, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001b32:	d1e6      	bne.n	8001b02 <mavlink_sha256_update+0xc2>
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <mavlink_sha256_update+0x1bc>)
 8001b36:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = m->counter[1];
 8001b38:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = m->counter[5];
 8001b3c:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = m->counter[3];
 8001b40:	9b04      	ldr	r3, [sp, #16]
    AA = m->counter[0];
 8001b42:	9d01      	ldr	r5, [sp, #4]
    HH = m->counter[7];
 8001b44:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = m->counter[4];
 8001b48:	9805      	ldr	r0, [sp, #20]
    DD = m->counter[3];
 8001b4a:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8001b4c:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b52:	f853 1b04 	ldr.w	r1, [r3], #4
 8001b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b58:	ea4f 23f0 	mov.w	r3, r0, ror #11
 8001b5c:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 8001b60:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 8001b64:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
 8001b68:	4419      	add	r1, r3
 8001b6a:	eb0a 0301 	add.w	r3, sl, r1
 8001b6e:	ea2c 0a00 	bic.w	sl, ip, r0
 8001b72:	ea00 010e 	and.w	r1, r0, lr
 8001b76:	ea8a 0101 	eor.w	r1, sl, r1
 8001b7a:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001b7c:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001b80:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001b82:	402b      	ands	r3, r5
 8001b84:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8001b88:	ea07 0b02 	and.w	fp, r7, r2
 8001b8c:	ea83 0b0b 	eor.w	fp, r3, fp
 8001b90:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 8001b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b96:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001b98:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 8001b9c:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001ba0:	44da      	add	sl, fp
	EE = DD + T1;
 8001ba2:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 8001ba4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 8001ba8:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 8001baa:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 8001bac:	46e3      	mov	fp, ip
 8001bae:	d11a      	bne.n	8001be6 <mavlink_sha256_update+0x1a6>
    m->counter[0] += AA;
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	60a3      	str	r3, [r4, #8]
    m->counter[1] += BB;
 8001bb6:	9b02      	ldr	r3, [sp, #8]
 8001bb8:	442b      	add	r3, r5
 8001bba:	60e3      	str	r3, [r4, #12]
    m->counter[2] += CC;
 8001bbc:	9b03      	ldr	r3, [sp, #12]
 8001bbe:	443b      	add	r3, r7
 8001bc0:	6123      	str	r3, [r4, #16]
    m->counter[3] += DD;
 8001bc2:	9b04      	ldr	r3, [sp, #16]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	6163      	str	r3, [r4, #20]
    m->counter[4] += EE;
 8001bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bca:	9b05      	ldr	r3, [sp, #20]
 8001bcc:	4413      	add	r3, r2
 8001bce:	61a3      	str	r3, [r4, #24]
    m->counter[5] += FF;
 8001bd0:	9b06      	ldr	r3, [sp, #24]
 8001bd2:	4403      	add	r3, r0
 8001bd4:	61e3      	str	r3, [r4, #28]
    m->counter[6] += GG;
 8001bd6:	9b07      	ldr	r3, [sp, #28]
 8001bd8:	4473      	add	r3, lr
 8001bda:	6223      	str	r3, [r4, #32]
    m->counter[7] += HH;
 8001bdc:	9b08      	ldr	r3, [sp, #32]
 8001bde:	4463      	add	r3, ip
 8001be0:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8001be2:	2500      	movs	r5, #0
 8001be4:	e745      	b.n	8001a72 <mavlink_sha256_update+0x32>
 8001be6:	463a      	mov	r2, r7
 8001be8:	46f4      	mov	ip, lr
 8001bea:	462f      	mov	r7, r5
 8001bec:	4686      	mov	lr, r0
	AA = T1 + T2;
 8001bee:	460d      	mov	r5, r1
	EE = DD + T1;
 8001bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bf2:	e7ad      	b.n	8001b50 <mavlink_sha256_update+0x110>
	}
    }
}
 8001bf4:	b05f      	add	sp, #380	; 0x17c
 8001bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bfa:	bf00      	nop
 8001bfc:	0800e3f0 	.word	0x0800e3f0

08001c00 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001c02:	6806      	ldr	r6, [r0, #0]
 8001c04:	08f7      	lsrs	r7, r6, #3
{
 8001c06:	b093      	sub	sp, #76	; 0x4c
 8001c08:	f1c7 0777 	rsb	r7, r7, #119	; 0x77
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	460d      	mov	r5, r1
 8001c10:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 8001c14:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001c16:	2247      	movs	r2, #71	; 0x47
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f10d 0001 	add.w	r0, sp, #1
    *zeros = 0x80;
 8001c1e:	f88d 3000 	strb.w	r3, [sp]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001c22:	f009 fe13 	bl	800b84c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c2a:	446b      	add	r3, sp
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001c2c:	0a32      	lsrs	r2, r6, #8
 8001c2e:	f803 2c41 	strb.w	r2, [r3, #-65]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c32:	0c32      	lsrs	r2, r6, #16
 8001c34:	f803 2c42 	strb.w	r2, [r3, #-66]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001c38:	6862      	ldr	r2, [r4, #4]
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001c3a:	f803 6c40 	strb.w	r6, [r3, #-64]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001c3e:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001c40:	f803 2c44 	strb.w	r2, [r3, #-68]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001c44:	f803 1c45 	strb.w	r1, [r3, #-69]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c48:	0e36      	lsrs	r6, r6, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001c4a:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001c4c:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c4e:	f803 6c43 	strb.w	r6, [r3, #-67]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001c52:	f803 1c46 	strb.w	r1, [r3, #-70]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001c56:	f803 2c47 	strb.w	r2, [r3, #-71]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001c5a:	4669      	mov	r1, sp
 8001c5c:	f107 0209 	add.w	r2, r7, #9
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff feed 	bl	8001a40 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001c66:	7ae3      	ldrb	r3, [r4, #11]
 8001c68:	702b      	strb	r3, [r5, #0]
    result[1] = p[2];
 8001c6a:	7aa3      	ldrb	r3, [r4, #10]
 8001c6c:	706b      	strb	r3, [r5, #1]
    result[2] = p[1];
 8001c6e:	7a63      	ldrb	r3, [r4, #9]
 8001c70:	70ab      	strb	r3, [r5, #2]
    result[3] = p[0];
 8001c72:	7a23      	ldrb	r3, [r4, #8]
 8001c74:	70eb      	strb	r3, [r5, #3]
    result[4] = p[7];
 8001c76:	7be3      	ldrb	r3, [r4, #15]
 8001c78:	712b      	strb	r3, [r5, #4]
    result[5] = p[6];
 8001c7a:	7ba3      	ldrb	r3, [r4, #14]
 8001c7c:	716b      	strb	r3, [r5, #5]
}
 8001c7e:	b013      	add	sp, #76	; 0x4c
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c82 <mavlink_msg_to_send_buffer>:
{
 8001c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001c84:	788b      	ldrb	r3, [r1, #2]
        uint8_t length = msg->len;
 8001c86:	78cf      	ldrb	r7, [r1, #3]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001c88:	2bfe      	cmp	r3, #254	; 0xfe
{
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	4604      	mov	r4, r0
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001c8e:	f101 010c 	add.w	r1, r1, #12
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001c92:	d028      	beq.n	8001ce6 <mavlink_msg_to_send_buffer+0x64>
 8001c94:	463e      	mov	r6, r7
	while (length > 1 && payload[length-1] == 0) {
 8001c96:	2e01      	cmp	r6, #1
 8001c98:	b2f7      	uxtb	r7, r6
 8001c9a:	d903      	bls.n	8001ca4 <mavlink_msg_to_send_buffer+0x22>
 8001c9c:	1e72      	subs	r2, r6, #1
 8001c9e:	5c88      	ldrb	r0, [r1, r2]
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d044      	beq.n	8001d2e <mavlink_msg_to_send_buffer+0xac>
		buf[0] = msg->magic;
 8001ca4:	7023      	strb	r3, [r4, #0]
		buf[1] = length;
 8001ca6:	7067      	strb	r7, [r4, #1]
		buf[2] = msg->incompat_flags;
 8001ca8:	792b      	ldrb	r3, [r5, #4]
 8001caa:	70a3      	strb	r3, [r4, #2]
		buf[3] = msg->compat_flags;
 8001cac:	796b      	ldrb	r3, [r5, #5]
 8001cae:	70e3      	strb	r3, [r4, #3]
		buf[4] = msg->seq;
 8001cb0:	79ab      	ldrb	r3, [r5, #6]
 8001cb2:	7123      	strb	r3, [r4, #4]
		buf[5] = msg->sysid;
 8001cb4:	79eb      	ldrb	r3, [r5, #7]
 8001cb6:	7163      	strb	r3, [r4, #5]
		buf[6] = msg->compid;
 8001cb8:	7a2b      	ldrb	r3, [r5, #8]
 8001cba:	71a3      	strb	r3, [r4, #6]
		buf[7] = msg->msgid & 0xFF;
 8001cbc:	7a6b      	ldrb	r3, [r5, #9]
 8001cbe:	71e3      	strb	r3, [r4, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001cc0:	7aab      	ldrb	r3, [r5, #10]
 8001cc2:	7223      	strb	r3, [r4, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001cc4:	7aeb      	ldrb	r3, [r5, #11]
 8001cc6:	7263      	strb	r3, [r4, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001cc8:	4632      	mov	r2, r6
 8001cca:	f104 000a 	add.w	r0, r4, #10
 8001cce:	f009 fdaf 	bl	800b830 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001cd2:	f106 000a 	add.w	r0, r6, #10
 8001cd6:	792e      	ldrb	r6, [r5, #4]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001cd8:	f016 0601 	ands.w	r6, r6, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 8001cdc:	4420      	add	r0, r4
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001cde:	bf18      	it	ne
 8001ce0:	260d      	movne	r6, #13
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001ce2:	2409      	movs	r4, #9
 8001ce4:	e012      	b.n	8001d0c <mavlink_msg_to_send_buffer+0x8a>
		buf[0] = msg->magic;
 8001ce6:	7003      	strb	r3, [r0, #0]
		buf[1] = length;
 8001ce8:	7047      	strb	r7, [r0, #1]
		buf[2] = msg->seq;
 8001cea:	79ab      	ldrb	r3, [r5, #6]
 8001cec:	7083      	strb	r3, [r0, #2]
		buf[3] = msg->sysid;
 8001cee:	79eb      	ldrb	r3, [r5, #7]
 8001cf0:	70c3      	strb	r3, [r0, #3]
		buf[4] = msg->compid;
 8001cf2:	7a2b      	ldrb	r3, [r5, #8]
 8001cf4:	7103      	strb	r3, [r0, #4]
		buf[5] = msg->msgid & 0xFF;
 8001cf6:	7a6b      	ldrb	r3, [r5, #9]
 8001cf8:	7143      	strb	r3, [r0, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001cfa:	78ea      	ldrb	r2, [r5, #3]
 8001cfc:	3006      	adds	r0, #6
 8001cfe:	f009 fd97 	bl	800b830 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001d02:	78e8      	ldrb	r0, [r5, #3]
 8001d04:	3006      	adds	r0, #6
 8001d06:	4420      	add	r0, r4
		signature_len = 0;
 8001d08:	2600      	movs	r6, #0
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001d0a:	2405      	movs	r4, #5
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001d0c:	882b      	ldrh	r3, [r5, #0]
 8001d0e:	7003      	strb	r3, [r0, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001d10:	882b      	ldrh	r3, [r5, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	7043      	strb	r3, [r0, #1]
	if (signature_len > 0) {
 8001d16:	b12e      	cbz	r6, 8001d24 <mavlink_msg_to_send_buffer+0xa2>
		memcpy(&ck[2], msg->signature, signature_len);
 8001d18:	4632      	mov	r2, r6
 8001d1a:	f505 718b 	add.w	r1, r5, #278	; 0x116
 8001d1e:	3002      	adds	r0, #2
 8001d20:	f009 fd86 	bl	800b830 <memcpy>
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001d24:	443c      	add	r4, r7
 8001d26:	3403      	adds	r4, #3
 8001d28:	4434      	add	r4, r6
}
 8001d2a:	b2a0      	uxth	r0, r4
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d2e:	4616      	mov	r6, r2
 8001d30:	e7b1      	b.n	8001c96 <mavlink_msg_to_send_buffer+0x14>

08001d32 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001d32:	4603      	mov	r3, r0
 8001d34:	4608      	mov	r0, r1
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001d36:	78da      	ldrb	r2, [r3, #3]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001d38:	2100      	movs	r1, #0
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001d3a:	2a09      	cmp	r2, #9
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001d3c:	6001      	str	r1, [r0, #0]
 8001d3e:	6041      	str	r1, [r0, #4]
 8001d40:	7201      	strb	r1, [r0, #8]
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001d42:	bf28      	it	cs
 8001d44:	2209      	movcs	r2, #9
 8001d46:	f103 010c 	add.w	r1, r3, #12
 8001d4a:	f009 bd71 	b.w	800b830 <memcpy>
	...

08001d50 <mavlink_finalize_message>:
{
 8001d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001d54:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8001f74 <mavlink_finalize_message+0x224>
 8001d58:	f89b 600c 	ldrb.w	r6, [fp, #12]
{
 8001d5c:	b0a5      	sub	sp, #148	; 0x94
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d5e:	f016 0602 	ands.w	r6, r6, #2
{
 8001d62:	4604      	mov	r4, r0
 8001d64:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d68:	d11b      	bne.n	8001da2 <mavlink_finalize_message+0x52>
 8001d6a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d057      	beq.n	8001e22 <mavlink_finalize_message+0xd2>
 8001d72:	781d      	ldrb	r5, [r3, #0]
 8001d74:	f015 0501 	ands.w	r5, r5, #1
 8001d78:	d056      	beq.n	8001e28 <mavlink_finalize_message+0xd8>
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001d7a:	250d      	movs	r5, #13
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d7c:	2701      	movs	r7, #1
		msg->magic = MAVLINK_STX;
 8001d7e:	23fd      	movs	r3, #253	; 0xfd
 8001d80:	70a3      	strb	r3, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8001d82:	f100 030c 	add.w	r3, r0, #12
 8001d86:	fa54 f383 	uxtab	r3, r4, r3
 8001d8a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8001d8e:	f1bc 0f00 	cmp.w	ip, #0
 8001d92:	d103      	bne.n	8001d9c <mavlink_finalize_message+0x4c>
		length--;
 8001d94:	3801      	subs	r0, #1
 8001d96:	b2c0      	uxtb	r0, r0
	while (length > 1 && payload[length-1] == 0) {
 8001d98:	2801      	cmp	r0, #1
 8001d9a:	d1f6      	bne.n	8001d8a <mavlink_finalize_message+0x3a>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001d9c:	f04f 080a 	mov.w	r8, #10
 8001da0:	e006      	b.n	8001db0 <mavlink_finalize_message+0x60>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001da2:	20fe      	movs	r0, #254	; 0xfe
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001da4:	2500      	movs	r5, #0
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001da6:	70a0      	strb	r0, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001da8:	f04f 0806 	mov.w	r8, #6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001dac:	4618      	mov	r0, r3
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001dae:	462f      	mov	r7, r5
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001db0:	70e0      	strb	r0, [r4, #3]
	msg->sysid = system_id;
 8001db2:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 8001db4:	7222      	strb	r2, [r4, #8]
	if (signing) {
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d138      	bne.n	8001e2c <mavlink_finalize_message+0xdc>
	msg->incompat_flags = 0;
 8001dba:	7127      	strb	r7, [r4, #4]
	msg->compat_flags = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	7163      	strb	r3, [r4, #5]
	msg->seq = status->current_tx_seq;
 8001dc0:	f89b 3006 	ldrb.w	r3, [fp, #6]
 8001dc4:	71a3      	strb	r3, [r4, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f88b 3006 	strb.w	r3, [fp, #6]
	buf[0] = msg->magic;
 8001dcc:	78a3      	ldrb	r3, [r4, #2]
 8001dce:	f88d 301c 	strb.w	r3, [sp, #28]
	buf[1] = msg->len;
 8001dd2:	78e3      	ldrb	r3, [r4, #3]
		buf[5] = msg->msgid & 0xFF;
 8001dd4:	7aa0      	ldrb	r0, [r4, #10]
	buf[1] = msg->len;
 8001dd6:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[5] = msg->msgid & 0xFF;
 8001dda:	7a63      	ldrb	r3, [r4, #9]
 8001ddc:	f894 c006 	ldrb.w	ip, [r4, #6]
 8001de0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001de4:	7ae0      	ldrb	r0, [r4, #11]
 8001de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001dea:	b2db      	uxtb	r3, r3
	if (mavlink1) {
 8001dec:	b30e      	cbz	r6, 8001e32 <mavlink_finalize_message+0xe2>
		buf[2] = msg->seq;
 8001dee:	f88d c01e 	strb.w	ip, [sp, #30]
		buf[3] = msg->sysid;
 8001df2:	f88d 101f 	strb.w	r1, [sp, #31]
		buf[4] = msg->compid;
 8001df6:	f88d 2020 	strb.w	r2, [sp, #32]
		buf[5] = msg->msgid & 0xFF;
 8001dfa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001dfe:	fa1f fa88 	uxth.w	sl, r8
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8001e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
}
 8001e0a:	4656      	mov	r6, sl
 8001e0c:	f10d 091d 	add.w	r9, sp, #29
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 8001e10:	3e01      	subs	r6, #1
 8001e12:	b2b6      	uxth	r6, r6
 8001e14:	b316      	cbz	r6, 8001e5c <mavlink_finalize_message+0x10c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001e16:	f819 0b01 	ldrb.w	r0, [r9], #1
 8001e1a:	a90a      	add	r1, sp, #40	; 0x28
 8001e1c:	f7ff fdf0 	bl	8001a00 <crc_accumulate>
	while (length--) {
 8001e20:	e7f6      	b.n	8001e10 <mavlink_finalize_message+0xc0>
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001e22:	4635      	mov	r5, r6
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e24:	4637      	mov	r7, r6
 8001e26:	e7aa      	b.n	8001d7e <mavlink_finalize_message+0x2e>
 8001e28:	462f      	mov	r7, r5
 8001e2a:	e7a8      	b.n	8001d7e <mavlink_finalize_message+0x2e>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	7123      	strb	r3, [r4, #4]
 8001e30:	e7c4      	b.n	8001dbc <mavlink_finalize_message+0x6c>
		buf[2] = msg->incompat_flags;
 8001e32:	7926      	ldrb	r6, [r4, #4]
 8001e34:	f88d 601e 	strb.w	r6, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8001e38:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		buf[3] = msg->compat_flags;
 8001e3c:	7966      	ldrb	r6, [r4, #5]
 8001e3e:	f88d 601f 	strb.w	r6, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001e42:	1203      	asrs	r3, r0, #8
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001e44:	1400      	asrs	r0, r0, #16
		buf[4] = msg->seq;
 8001e46:	f88d c020 	strb.w	ip, [sp, #32]
		buf[5] = msg->sysid;
 8001e4a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
		buf[6] = msg->compid;
 8001e4e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001e52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001e56:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8001e5a:	e7d0      	b.n	8001dfe <mavlink_finalize_message+0xae>
        }
        return crcTmp;
 8001e5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001e60:	78e6      	ldrb	r6, [r4, #3]
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001e62:	f8ad 300e 	strh.w	r3, [sp, #14]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001e66:	f104 090c 	add.w	r9, r4, #12
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001e6a:	464b      	mov	r3, r9
	while (length--) {
                crc_accumulate(*p++, crcAccum);
 8001e6c:	f10d 010e 	add.w	r1, sp, #14
	while (length--) {
 8001e70:	b146      	cbz	r6, 8001e84 <mavlink_finalize_message+0x134>
                crc_accumulate(*p++, crcAccum);
 8001e72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	3e01      	subs	r6, #1
 8001e7a:	f7ff fdc1 	bl	8001a00 <crc_accumulate>
 8001e7e:	b2b6      	uxth	r6, r6
	while (length--) {
 8001e80:	9b01      	ldr	r3, [sp, #4]
 8001e82:	e7f3      	b.n	8001e6c <mavlink_finalize_message+0x11c>
	crc_accumulate(crc_extra, &checksum);
 8001e84:	f89d 00bc 	ldrb.w	r0, [sp, #188]	; 0xbc
 8001e88:	f7ff fdba 	bl	8001a00 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001e8c:	78e2      	ldrb	r2, [r4, #3]
 8001e8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001e92:	f809 3002 	strb.w	r3, [r9, r2]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001e96:	78e2      	ldrb	r2, [r4, #3]
 8001e98:	444a      	add	r2, r9
 8001e9a:	0a19      	lsrs	r1, r3, #8
 8001e9c:	7051      	strb	r1, [r2, #1]
	msg->checksum = checksum;
 8001e9e:	8023      	strh	r3, [r4, #0]
	if (signing) {
 8001ea0:	2f00      	cmp	r7, #0
 8001ea2:	d052      	beq.n	8001f4a <mavlink_finalize_message+0x1fa>
		mavlink_sign_packet(status->signing,
 8001ea4:	f8db 1010 	ldr.w	r1, [fp, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d04e      	beq.n	8001f4a <mavlink_finalize_message+0x1fa>
 8001eac:	780b      	ldrb	r3, [r1, #0]
 8001eae:	07df      	lsls	r7, r3, #31
 8001eb0:	d54b      	bpl.n	8001f4a <mavlink_finalize_message+0x1fa>
	signature[0] = signing->link_id;
 8001eb2:	784b      	ldrb	r3, [r1, #1]
 8001eb4:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8001eb8:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8001ebc:	e9cd 3204 	strd	r3, r2, [sp, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001ec0:	f8c4 3117 	str.w	r3, [r4, #279]	; 0x117
 8001ec4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001ec8:	f8a4 311b 	strh.w	r3, [r4, #283]	; 0x11b
	signing->timestamp++;
 8001ecc:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f142 0200 	adc.w	r2, r2, #0
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001ed6:	78e7      	ldrb	r7, [r4, #3]
    m->counter[3] = 0xa54ff53a;
 8001ed8:	481f      	ldr	r0, [pc, #124]	; (8001f58 <mavlink_finalize_message+0x208>)
	signing->timestamp++;
 8001eda:	e9c1 3202 	strd	r3, r2, [r1, #8]
    m->counter[1] = 0xbb67ae85;
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <mavlink_finalize_message+0x20c>)
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <mavlink_finalize_message+0x210>)
 8001ee2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    m->counter[3] = 0xa54ff53a;
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <mavlink_finalize_message+0x214>)
    m->sz[1] = 0;
 8001ee8:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    m->counter[3] = 0xa54ff53a;
 8001eec:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
    m->counter[5] = 0x9b05688c;
 8001ef0:	4e1d      	ldr	r6, [pc, #116]	; (8001f68 <mavlink_finalize_message+0x218>)
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <mavlink_finalize_message+0x21c>)
 8001ef4:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    m->counter[6] = 0x1f83d9ab;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <mavlink_finalize_message+0x220>)
 8001efa:	9312      	str	r3, [sp, #72]	; 0x48
    m->counter[7] = 0x5be0cd19;
 8001efc:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001f00:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001f04:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001f08:	2220      	movs	r2, #32
 8001f0a:	3110      	adds	r1, #16
 8001f0c:	a80a      	add	r0, sp, #40	; 0x28
 8001f0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001f10:	f7ff fd96 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001f14:	4642      	mov	r2, r8
 8001f16:	a907      	add	r1, sp, #28
 8001f18:	a80a      	add	r0, sp, #40	; 0x28
 8001f1a:	f7ff fd91 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001f1e:	463a      	mov	r2, r7
 8001f20:	4649      	mov	r1, r9
 8001f22:	a80a      	add	r0, sp, #40	; 0x28
 8001f24:	f7ff fd8c 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001f28:	2202      	movs	r2, #2
 8001f2a:	eb09 0107 	add.w	r1, r9, r7
 8001f2e:	a80a      	add	r0, sp, #40	; 0x28
 8001f30:	f7ff fd86 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001f34:	f504 718b 	add.w	r1, r4, #278	; 0x116
 8001f38:	a80a      	add	r0, sp, #40	; 0x28
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	f7ff fd80 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001f40:	f204 111d 	addw	r1, r4, #285	; 0x11d
 8001f44:	a80a      	add	r0, sp, #40	; 0x28
 8001f46:	f7ff fe5b 	bl	8001c00 <mavlink_sha256_final_48>
	return msg->len + header_len + 2 + signature_len;
 8001f4a:	78e0      	ldrb	r0, [r4, #3]
 8001f4c:	3002      	adds	r0, #2
 8001f4e:	4450      	add	r0, sl
}
 8001f50:	4428      	add	r0, r5
 8001f52:	b025      	add	sp, #148	; 0x94
 8001f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f58:	3c6ef372 	.word	0x3c6ef372
 8001f5c:	6a09e667 	.word	0x6a09e667
 8001f60:	bb67ae85 	.word	0xbb67ae85
 8001f64:	a54ff53a 	.word	0xa54ff53a
 8001f68:	510e527f 	.word	0x510e527f
 8001f6c:	9b05688c 	.word	0x9b05688c
 8001f70:	1f83d9ab 	.word	0x1f83d9ab
 8001f74:	20000804 	.word	0x20000804

08001f78 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9AltimeterP9Convertor>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter, Convertor* convertor)
 8001f78:	b538      	push	{r3, r4, r5, lr}
: _huart_mavlink(huart), _altimeter(altimeter), _convertor(convertor)  {
 8001f7a:	6083      	str	r3, [r0, #8]
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9AltimeterP9Convertor+0x7c>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	f8a0 33bc 	strh.w	r3, [r0, #956]	; 0x3bc
 8001f84:	2500      	movs	r5, #0
MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter, Convertor* convertor)
 8001f86:	4604      	mov	r4, r0
: _huart_mavlink(huart), _altimeter(altimeter), _convertor(convertor)  {
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9AltimeterP9Convertor+0x80>)
 8001f8a:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
 8001f8e:	e9c0 1200 	strd	r1, r2, [r0]
 8001f92:	7305      	strb	r5, [r0, #12]
 8001f94:	81c5      	strh	r5, [r0, #14]
 8001f96:	f8c0 53c0 	str.w	r5, [r0, #960]	; 0x3c0
 8001f9a:	f8c0 53c8 	str.w	r5, [r0, #968]	; 0x3c8
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001fa4:	f500 707c 	add.w	r0, r0, #1008	; 0x3f0
 8001fa8:	f009 fc50 	bl	800b84c <memset>
 8001fac:	4629      	mov	r1, r5
 8001fae:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8001fb2:	f8c4 5510 	str.w	r5, [r4, #1296]	; 0x510
 8001fb6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001fba:	f204 5014 	addw	r0, r4, #1300	; 0x514
 8001fbe:	f009 fc45 	bl	800b84c <memset>
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001fc8:	f204 602c 	addw	r0, r4, #1580	; 0x62c
 8001fcc:	f009 fc3e 	bl	800b84c <memset>
 8001fd0:	f504 63ea 	add.w	r3, r4, #1872	; 0x750
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	e943 0102 	strd	r0, r1, [r3, #-8]

	  instancePtr = this;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9AltimeterP9Convertor+0x84>)
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 8001fde:	f8c4 5750 	str.w	r5, [r4, #1872]	; 0x750
 8001fe2:	f8a4 5754 	strh.w	r5, [r4, #1876]	; 0x754
 8001fe6:	f884 5756 	strb.w	r5, [r4, #1878]	; 0x756
 8001fea:	f8c4 5758 	str.w	r5, [r4, #1880]	; 0x758
 8001fee:	601c      	str	r4, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);



}
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	0800e388 	.word	0x0800e388
 8001ff8:	0380000a 	.word	0x0380000a
 8001ffc:	20000374 	.word	0x20000374

08002000 <_ZN14MavlinkControl9update_RXEv>:

}

void MavlinkControl::update_RX(void){

	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);
 8002000:	f500 717c 	add.w	r1, r0, #1008	; 0x3f0
 8002004:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002008:	6800      	ldr	r0, [r0, #0]
 800200a:	f007 bddd 	b.w	8009bc8 <HAL_UARTEx_ReceiveToIdle_DMA>
	...

08002010 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    packet.custom_mode = custom_mode;
 8002014:	e9d0 13f0 	ldrd	r1, r3, [r0, #960]	; 0x3c0
 8002018:	b087      	sub	sp, #28
    packet.type = type;
 800201a:	e9cd 1303 	strd	r1, r3, [sp, #12]
    packet.mavlink_version = 3;
 800201e:	f04f 0803 	mov.w	r8, #3
 8002022:	f88d 8014 	strb.w	r8, [sp, #20]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002026:	ab03      	add	r3, sp, #12
 8002028:	4604      	mov	r4, r0
	//Encode the information and send it periodically to maintain connection. 

	_bufferLength = mavlink_msg_heartbeat_encode(
 800202a:	f890 63bc 	ldrb.w	r6, [r0, #956]	; 0x3bc
 800202e:	f890 23bd 	ldrb.w	r2, [r0, #957]	; 0x3bd
 8002032:	f884 8147 	strb.w	r8, [r4, #327]	; 0x147
 8002036:	f200 1933 	addw	r9, r0, #307	; 0x133
 800203a:	cb03      	ldmia	r3!, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 800203c:	2500      	movs	r5, #0
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 800203e:	2709      	movs	r7, #9
 8002040:	f04f 0b32 	mov.w	fp, #50	; 0x32
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002044:	f8c4 013f 	str.w	r0, [r4, #319]	; 0x13f
 8002048:	f8c4 1143 	str.w	r1, [r4, #323]	; 0x143
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 800204c:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
 8002050:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
 8002054:	f884 513e 	strb.w	r5, [r4, #318]	; 0x13e
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002058:	463b      	mov	r3, r7
 800205a:	4631      	mov	r1, r6
 800205c:	e9cd 7b00 	strd	r7, fp, [sp]
 8002060:	4648      	mov	r0, r9
 8002062:	f7ff fe75 	bl	8001d50 <mavlink_finalize_message>
    packet.type = type;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <_ZN14MavlinkControl9heartbeatEv+0xb0>)
    packet.custom_mode = custom_mode;
 8002068:	9503      	str	r5, [sp, #12]
    packet.type = type;
 800206a:	9304      	str	r3, [sp, #16]
    packet.mavlink_version = 3;
 800206c:	f88d 8014 	strb.w	r8, [sp, #20]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002070:	ae03      	add	r6, sp, #12
 8002072:	81e0      	strh	r0, [r4, #14]
 8002074:	ce03      	ldmia	r6!, {r0, r1}
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1,
			&_mavlink_heartbeat);

	//Check and see if you need the pack or encode function. 
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8002076:	f894 c3bc 	ldrb.w	ip, [r4, #956]	; 0x3bc
 800207a:	f894 23bd 	ldrb.w	r2, [r4, #957]	; 0x3bd
 800207e:	f8c4 013f 	str.w	r0, [r4, #319]	; 0x13f
 8002082:	f8c4 1143 	str.w	r1, [r4, #323]	; 0x143
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002086:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 800208a:	4661      	mov	r1, ip
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 800208c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
 8002090:	f884 513e 	strb.w	r5, [r4, #318]	; 0x13e
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002094:	463b      	mov	r3, r7
			&_mavlinkSend_1, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend_1);
 8002096:	f204 5514 	addw	r5, r4, #1300	; 0x514
 800209a:	e9cd 7b00 	strd	r7, fp, [sp]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 800209e:	f884 8147 	strb.w	r8, [r4, #327]	; 0x147
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80020a2:	4648      	mov	r0, r9
 80020a4:	f7ff fe54 	bl	8001d50 <mavlink_finalize_message>
 80020a8:	4649      	mov	r1, r9
 80020aa:	4628      	mov	r0, r5
 80020ac:	f7ff fde9 	bl	8001c82 <mavlink_msg_to_send_buffer>

	HAL_UART_Transmit_DMA(_huart_mavlink,_bufferPackedforUart, _bufferLength);
 80020b0:	89e2      	ldrh	r2, [r4, #14]
 80020b2:	6820      	ldr	r0, [r4, #0]
 80020b4:	4629      	mov	r1, r5


}
 80020b6:	b007      	add	sp, #28
 80020b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Transmit_DMA(_huart_mavlink,_bufferPackedforUart, _bufferLength);
 80020bc:	f006 bfae 	b.w	800901c <HAL_UART_Transmit_DMA>
 80020c0:	0380000a 	.word	0x0380000a

080020c4 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>:

}


//doesn't work, never receives a proper message 
void MavlinkControl::readFlightTime(mavlink_message_t receivedMessage) {
 80020c4:	b084      	sub	sp, #16
 80020c6:	b530      	push	{r4, r5, lr}
 80020c8:	b08d      	sub	sp, #52	; 0x34
 80020ca:	4604      	mov	r4, r0
 80020cc:	a811      	add	r0, sp, #68	; 0x44
 80020ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if(receivedMessage.msgid == MAVLINK_MSG_ID_SYS_STATUS){
 80020d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d115      	bne.n	8002106 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message+0x42>
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 80020da:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 80020de:	2d2b      	cmp	r5, #43	; 0x2b
 80020e0:	bf28      	it	cs
 80020e2:	252b      	movcs	r5, #43	; 0x2b
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 80020e4:	222b      	movs	r2, #43	; 0x2b
 80020e6:	2100      	movs	r1, #0
 80020e8:	a801      	add	r0, sp, #4
 80020ea:	f009 fbaf 	bl	800b84c <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 80020ee:	462a      	mov	r2, r5
 80020f0:	a914      	add	r1, sp, #80	; 0x50
 80020f2:	a801      	add	r0, sp, #4
 80020f4:	f009 fb9c 	bl	800b830 <memcpy>
		mavlink_sys_status_t status;
		mavlink_msg_sys_status_decode(&receivedMessage,&status);
        _flight_time = status.onboard_control_sensors_present;
 80020f8:	9801      	ldr	r0, [sp, #4]
 80020fa:	f7fe fa2b 	bl	8000554 <__aeabi_ui2d>
 80020fe:	f504 64ea 	add.w	r4, r4, #1872	; 0x750
 8002102:	e944 0102 	strd	r0, r1, [r4, #-8]

	}


}
 8002106:	b00d      	add	sp, #52	; 0x34
 8002108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800210c:	b004      	add	sp, #16
 800210e:	4770      	bx	lr

08002110 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MavlinkControl* instance = MavlinkControl::instancePtr;
 8002114:	4bb0      	ldr	r3, [pc, #704]	; (80023d8 <HAL_UARTEx_RxEventCallback+0x2c8>)
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002116:	4cb1      	ldr	r4, [pc, #708]	; (80023dc <HAL_UARTEx_RxEventCallback+0x2cc>)
 8002118:	681f      	ldr	r7, [r3, #0]
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800211a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800211e:	f04f 0800 	mov.w	r8, #0
  while (mavlink_parse_char(MAVLINK_COMM_0, instance->_receiveBuffer_1[instance->_bufferIndex++], &instance->_mavlinkReceived, &instance->_status) == MAVLINK_FRAMING_INCOMPLETE);
 8002122:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002126:	4dae      	ldr	r5, [pc, #696]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	443b      	add	r3, r7
 800212c:	f8c7 2510 	str.w	r2, [r7, #1296]	; 0x510
 8002130:	f893 63f0 	ldrb.w	r6, [r3, #1008]	; 0x3f0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	7023      	strb	r3, [r4, #0]

	switch (status->parse_state)
 800213a:	78e3      	ldrb	r3, [r4, #3]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d822      	bhi.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
 8002140:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002144:	00120012 	.word	0x00120012
 8002148:	00740061 	.word	0x00740061
 800214c:	00890083 	.word	0x00890083
 8002150:	00970090 	.word	0x00970090
 8002154:	00b0009e 	.word	0x00b0009e
 8002158:	00d900c5 	.word	0x00d900c5
 800215c:	012f00e9 	.word	0x012f00e9
 8002160:	0172012f 	.word	0x0172012f
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002164:	70e3      	strb	r3, [r4, #3]
 8002166:	e7dc      	b.n	8002122 <HAL_UARTEx_RxEventCallback+0x12>
		if (c == MAVLINK_STX)
 8002168:	2efd      	cmp	r6, #253	; 0xfd
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800216a:	7b23      	ldrb	r3, [r4, #12]
		if (c == MAVLINK_STX)
 800216c:	d141      	bne.n	80021f2 <HAL_UARTEx_RxEventCallback+0xe2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800216e:	2202      	movs	r2, #2
 8002170:	70e2      	strb	r2, [r4, #3]
			rxmsg->len = 0;
 8002172:	f885 8003 	strb.w	r8, [r5, #3]
			rxmsg->magic = c;
 8002176:	70ae      	strb	r6, [r5, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002178:	f023 0301 	bic.w	r3, r3, #1
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800217c:	7323      	strb	r3, [r4, #12]
	msg->checksum = crcTmp;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	702b      	strb	r3, [r5, #0]
 8002184:	706b      	strb	r3, [r5, #1]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002186:	7822      	ldrb	r2, [r4, #0]
 8002188:	2a01      	cmp	r2, #1
 800218a:	d106      	bne.n	800219a <HAL_UARTEx_RxEventCallback+0x8a>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800218c:	8923      	ldrh	r3, [r4, #8]
		status->current_rx_seq = rxmsg->seq;
 800218e:	79a9      	ldrb	r1, [r5, #6]
 8002190:	7161      	strb	r1, [r4, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002192:	b903      	cbnz	r3, 8002196 <HAL_UARTEx_RxEventCallback+0x86>
 8002194:	8163      	strh	r3, [r4, #10]
		status->packet_rx_success_count++;
 8002196:	3301      	adds	r3, #1
 8002198:	8123      	strh	r3, [r4, #8]
           r_mavlink_status->parse_state = status->parse_state;
 800219a:	78e3      	ldrb	r3, [r4, #3]
 800219c:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
           r_mavlink_status->packet_idx = status->packet_idx;
 80021a0:	7923      	ldrb	r3, [r4, #4]
 80021a2:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80021a6:	7963      	ldrb	r3, [r4, #5]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80021a8:	78e9      	ldrb	r1, [r5, #3]
 80021aa:	74f9      	strb	r1, [r7, #19]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80021ac:	3301      	adds	r3, #1
 80021ae:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80021b2:	8923      	ldrh	r3, [r4, #8]
 80021b4:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80021b8:	78a3      	ldrb	r3, [r4, #2]
 80021ba:	f8a7 33ae 	strh.w	r3, [r7, #942]	; 0x3ae
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021be:	2a02      	cmp	r2, #2
           r_mavlink_status->flags = status->flags;
 80021c0:	7b23      	ldrb	r3, [r4, #12]
 80021c2:	f887 33b0 	strb.w	r3, [r7, #944]	; 0x3b0
       status->parse_error = 0;
 80021c6:	f884 8002 	strb.w	r8, [r4, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021ca:	f040 8206 	bne.w	80025da <HAL_UARTEx_RxEventCallback+0x4ca>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80021ce:	f8b5 3114 	ldrh.w	r3, [r5, #276]	; 0x114
 80021d2:	823b      	strh	r3, [r7, #16]
    status->parse_error++;
 80021d4:	2301      	movs	r3, #1
	    if (c == MAVLINK_STX)
 80021d6:	2efd      	cmp	r6, #253	; 0xfd
    status->parse_error++;
 80021d8:	70a3      	strb	r3, [r4, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021da:	f884 8000 	strb.w	r8, [r4]
	    if (c == MAVLINK_STX)
 80021de:	d1c1      	bne.n	8002164 <HAL_UARTEx_RxEventCallback+0x54>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021e0:	2302      	movs	r3, #2
 80021e2:	70e3      	strb	r3, [r4, #3]
	msg->checksum = crcTmp;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
		    rxmsg->len = 0;
 80021e8:	f885 8003 	strb.w	r8, [r5, #3]
	msg->checksum = crcTmp;
 80021ec:	702b      	strb	r3, [r5, #0]
 80021ee:	706b      	strb	r3, [r5, #1]
 80021f0:	e797      	b.n	8002122 <HAL_UARTEx_RxEventCallback+0x12>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80021f2:	2efe      	cmp	r6, #254	; 0xfe
 80021f4:	d1c7      	bne.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021f6:	2202      	movs	r2, #2
 80021f8:	70e2      	strb	r2, [r4, #3]
			rxmsg->len = 0;
 80021fa:	f885 8003 	strb.w	r8, [r5, #3]
			rxmsg->magic = c;
 80021fe:	70ae      	strb	r6, [r5, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	e7ba      	b.n	800217c <HAL_UARTEx_RxEventCallback+0x6c>
			mavlink_update_checksum(rxmsg, c);
 8002206:	4876      	ldr	r0, [pc, #472]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
			status->packet_idx = 0;
 8002208:	f884 8004 	strb.w	r8, [r4, #4]
			mavlink_update_checksum(rxmsg, c);
 800220c:	4631      	mov	r1, r6
			rxmsg->len = c;
 800220e:	70ee      	strb	r6, [r5, #3]
			mavlink_update_checksum(rxmsg, c);
 8002210:	f7ff fc04 	bl	8001a1c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002214:	7b23      	ldrb	r3, [r4, #12]
 8002216:	07d8      	lsls	r0, r3, #31
 8002218:	d505      	bpl.n	8002226 <HAL_UARTEx_RxEventCallback+0x116>
                            rxmsg->incompat_flags = 0;
 800221a:	f885 8004 	strb.w	r8, [r5, #4]
                            rxmsg->compat_flags = 0;
 800221e:	f885 8005 	strb.w	r8, [r5, #5]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002222:	2305      	movs	r3, #5
 8002224:	e000      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002226:	2303      	movs	r3, #3
 8002228:	70e3      	strb	r3, [r4, #3]
 800222a:	e7ac      	b.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800222c:	f016 0ffe 	tst.w	r6, #254	; 0xfe
		rxmsg->incompat_flags = c;
 8002230:	712e      	strb	r6, [r5, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002232:	d004      	beq.n	800223e <HAL_UARTEx_RxEventCallback+0x12e>
    status->parse_error++;
 8002234:	78a3      	ldrb	r3, [r4, #2]
 8002236:	3301      	adds	r3, #1
 8002238:	70a3      	strb	r3, [r4, #2]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800223a:	2301      	movs	r3, #1
 800223c:	e7f4      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 800223e:	4868      	ldr	r0, [pc, #416]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8002240:	4631      	mov	r1, r6
 8002242:	f7ff fbeb 	bl	8001a1c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002246:	2304      	movs	r3, #4
 8002248:	e7ee      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 800224a:	4865      	ldr	r0, [pc, #404]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->compat_flags = c;
 800224c:	716e      	strb	r6, [r5, #5]
		mavlink_update_checksum(rxmsg, c);
 800224e:	4631      	mov	r1, r6
 8002250:	f7ff fbe4 	bl	8001a1c <mavlink_update_checksum>
 8002254:	e7e5      	b.n	8002222 <HAL_UARTEx_RxEventCallback+0x112>
		mavlink_update_checksum(rxmsg, c);
 8002256:	4862      	ldr	r0, [pc, #392]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->seq = c;
 8002258:	71ae      	strb	r6, [r5, #6]
		mavlink_update_checksum(rxmsg, c);
 800225a:	4631      	mov	r1, r6
 800225c:	f7ff fbde 	bl	8001a1c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8002260:	2306      	movs	r3, #6
 8002262:	e7e1      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8002264:	485e      	ldr	r0, [pc, #376]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->sysid = c;
 8002266:	71ee      	strb	r6, [r5, #7]
		mavlink_update_checksum(rxmsg, c);
 8002268:	4631      	mov	r1, r6
 800226a:	f7ff fbd7 	bl	8001a1c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 800226e:	2307      	movs	r3, #7
 8002270:	e7da      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8002272:	485b      	ldr	r0, [pc, #364]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->compid = c;
 8002274:	722e      	strb	r6, [r5, #8]
		mavlink_update_checksum(rxmsg, c);
 8002276:	4631      	mov	r1, r6
 8002278:	f7ff fbd0 	bl	8001a1c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800227c:	2308      	movs	r3, #8
 800227e:	e7d3      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid = c;
 8002280:	2300      	movs	r3, #0
		mavlink_update_checksum(rxmsg, c);
 8002282:	4631      	mov	r1, r6
 8002284:	4856      	ldr	r0, [pc, #344]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid = c;
 8002286:	72ab      	strb	r3, [r5, #10]
 8002288:	72eb      	strb	r3, [r5, #11]
 800228a:	726e      	strb	r6, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 800228c:	f7ff fbc6 	bl	8001a1c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002290:	7b23      	ldrb	r3, [r4, #12]
 8002292:	07d9      	lsls	r1, r3, #31
 8002294:	d504      	bpl.n	80022a0 <HAL_UARTEx_RxEventCallback+0x190>
			if(rxmsg->len > 0) {
 8002296:	78eb      	ldrb	r3, [r5, #3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03a      	beq.n	8002312 <HAL_UARTEx_RxEventCallback+0x202>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800229c:	230b      	movs	r3, #11
 800229e:	e7c3      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80022a0:	2309      	movs	r3, #9
 80022a2:	e7c1      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid |= c<<8;
 80022a4:	7aaa      	ldrb	r2, [r5, #10]
 80022a6:	7a6b      	ldrb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 80022a8:	484d      	ldr	r0, [pc, #308]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid |= c<<8;
 80022aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022ae:	7aea      	ldrb	r2, [r5, #11]
 80022b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022b4:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
 80022b8:	726b      	strb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 80022ba:	4631      	mov	r1, r6
		rxmsg->msgid |= c<<8;
 80022bc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80022c0:	0c12      	lsrs	r2, r2, #16
 80022c2:	72ab      	strb	r3, [r5, #10]
 80022c4:	72ea      	strb	r2, [r5, #11]
		mavlink_update_checksum(rxmsg, c);
 80022c6:	f7ff fba9 	bl	8001a1c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80022ca:	230a      	movs	r3, #10
 80022cc:	e7ac      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022ce:	7aaa      	ldrb	r2, [r5, #10]
 80022d0:	7a6b      	ldrb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 80022d2:	4843      	ldr	r0, [pc, #268]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022d8:	7aea      	ldrb	r2, [r5, #11]
 80022da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022de:	ea43 4206 	orr.w	r2, r3, r6, lsl #16
 80022e2:	726b      	strb	r3, [r5, #9]
 80022e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80022e8:	72ab      	strb	r3, [r5, #10]
		mavlink_update_checksum(rxmsg, c);
 80022ea:	4631      	mov	r1, r6
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022ec:	0c13      	lsrs	r3, r2, #16
 80022ee:	72eb      	strb	r3, [r5, #11]
		mavlink_update_checksum(rxmsg, c);
 80022f0:	f7ff fb94 	bl	8001a1c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80022f4:	e7cf      	b.n	8002296 <HAL_UARTEx_RxEventCallback+0x186>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80022f6:	7923      	ldrb	r3, [r4, #4]
		mavlink_update_checksum(rxmsg, c);
 80022f8:	4839      	ldr	r0, [pc, #228]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	442b      	add	r3, r5
 80022fe:	7122      	strb	r2, [r4, #4]
 8002300:	731e      	strb	r6, [r3, #12]
		mavlink_update_checksum(rxmsg, c);
 8002302:	4631      	mov	r1, r6
 8002304:	f7ff fb8a 	bl	8001a1c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002308:	7922      	ldrb	r2, [r4, #4]
 800230a:	78eb      	ldrb	r3, [r5, #3]
 800230c:	429a      	cmp	r2, r3
 800230e:	f47f af3a 	bne.w	8002186 <HAL_UARTEx_RxEventCallback+0x76>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002312:	230c      	movs	r3, #12
 8002314:	e788      	b.n	8002228 <HAL_UARTEx_RxEventCallback+0x118>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002316:	7aab      	ldrb	r3, [r5, #10]
 8002318:	7a69      	ldrb	r1, [r5, #9]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800231a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80023e8 <HAL_UARTEx_RxEventCallback+0x2d8>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800231e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8002322:	7aeb      	ldrb	r3, [r5, #11]
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8002324:	20da      	movs	r0, #218	; 0xda
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002326:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800232a:	f04f 0e0c 	mov.w	lr, #12
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800232e:	2300      	movs	r3, #0
            uint32_t mid = (low+1+high)/2;
 8002330:	181a      	adds	r2, r3, r0
 8002332:	3201      	adds	r2, #1
 8002334:	0852      	lsrs	r2, r2, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002336:	fb0e f902 	mul.w	r9, lr, r2
 800233a:	f85c 9009 	ldr.w	r9, [ip, r9]
 800233e:	4549      	cmp	r1, r9
 8002340:	d22c      	bcs.n	800239c <HAL_UARTEx_RxEventCallback+0x28c>
                high = mid-1;
 8002342:	1e50      	subs	r0, r2, #1
        while (low < high) {
 8002344:	4298      	cmp	r0, r3
 8002346:	d8f3      	bhi.n	8002330 <HAL_UARTEx_RxEventCallback+0x220>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002348:	220c      	movs	r2, #12
 800234a:	4353      	muls	r3, r2
 800234c:	eb0c 0903 	add.w	r9, ip, r3
 8002350:	f85c 3003 	ldr.w	r3, [ip, r3]
		mavlink_update_checksum(rxmsg, crc_extra);
 8002354:	4822      	ldr	r0, [pc, #136]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x2d0>)
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002356:	4299      	cmp	r1, r3
            return NULL;
 8002358:	bf16      	itet	ne
 800235a:	f04f 0900 	movne.w	r9, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 800235e:	f899 1004 	ldrbeq.w	r1, [r9, #4]
 8002362:	4649      	movne	r1, r9
		mavlink_update_checksum(rxmsg, crc_extra);
 8002364:	f7ff fb5a 	bl	8001a1c <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002368:	882b      	ldrh	r3, [r5, #0]
                rxmsg->ck[0] = c;
 800236a:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
		if (c != (rxmsg->checksum & 0xFF)) {
 800236e:	b2db      	uxtb	r3, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002370:	429e      	cmp	r6, r3
 8002372:	bf14      	ite	ne
 8002374:	230e      	movne	r3, #14
 8002376:	230d      	moveq	r3, #13
 8002378:	70e3      	strb	r3, [r4, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 800237a:	f1b9 0f00 	cmp.w	r9, #0
 800237e:	f43f af02 	beq.w	8002186 <HAL_UARTEx_RxEventCallback+0x76>
 8002382:	7923      	ldrb	r3, [r4, #4]
 8002384:	f899 2006 	ldrb.w	r2, [r9, #6]
 8002388:	429a      	cmp	r2, r3
 800238a:	f67f aefc 	bls.w	8002186 <HAL_UARTEx_RxEventCallback+0x76>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800238e:	4815      	ldr	r0, [pc, #84]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8002390:	1ad2      	subs	r2, r2, r3
 8002392:	2100      	movs	r1, #0
 8002394:	4418      	add	r0, r3
 8002396:	f009 fa59 	bl	800b84c <memset>
 800239a:	e6f4      	b.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
                low = mid;
 800239c:	4613      	mov	r3, r2
            if (msgid > mavlink_message_crcs[mid].msgid) {
 800239e:	d9d3      	bls.n	8002348 <HAL_UARTEx_RxEventCallback+0x238>
 80023a0:	e7d0      	b.n	8002344 <HAL_UARTEx_RxEventCallback+0x234>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80023a2:	2b0e      	cmp	r3, #14
 80023a4:	d016      	beq.n	80023d4 <HAL_UARTEx_RxEventCallback+0x2c4>
 80023a6:	882b      	ldrh	r3, [r5, #0]
			status->msg_received = MAVLINK_FRAMING_OK;
 80023a8:	ebb6 2f13 	cmp.w	r6, r3, lsr #8
 80023ac:	bf14      	ite	ne
 80023ae:	2302      	movne	r3, #2
 80023b0:	2301      	moveq	r3, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80023b2:	792a      	ldrb	r2, [r5, #4]
 80023b4:	7023      	strb	r3, [r4, #0]
 80023b6:	07d2      	lsls	r2, r2, #31
		rxmsg->ck[1] = c;
 80023b8:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80023bc:	d516      	bpl.n	80023ec <HAL_UARTEx_RxEventCallback+0x2dc>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80023be:	220f      	movs	r2, #15
 80023c0:	70e2      	strb	r2, [r4, #3]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80023c2:	2b02      	cmp	r3, #2
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80023c4:	f04f 020d 	mov.w	r2, #13
 80023c8:	7362      	strb	r2, [r4, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80023ca:	f43f aedc 	beq.w	8002186 <HAL_UARTEx_RxEventCallback+0x76>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80023ce:	f884 8000 	strb.w	r8, [r4]
 80023d2:	e6d8      	b.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80023d4:	2302      	movs	r3, #2
 80023d6:	e7ec      	b.n	80023b2 <HAL_UARTEx_RxEventCallback+0x2a2>
 80023d8:	20000374 	.word	0x20000374
 80023dc:	20000804 	.word	0x20000804
 80023e0:	20000378 	.word	0x20000378
 80023e4:	20000384 	.word	0x20000384
 80023e8:	0800e4f0 	.word	0x0800e4f0
			if (status->signing &&
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	b12b      	cbz	r3, 80023fc <HAL_UARTEx_RxEventCallback+0x2ec>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80023f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (status->signing &&
 80023f2:	b96a      	cbnz	r2, 8002410 <HAL_UARTEx_RxEventCallback+0x300>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80023f4:	7823      	ldrb	r3, [r4, #0]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	f040 80ec 	bne.w	80025d4 <HAL_UARTEx_RxEventCallback+0x4c4>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80023fc:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80023fe:	4995      	ldr	r1, [pc, #596]	; (8002654 <HAL_UARTEx_RxEventCallback+0x544>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002400:	70e3      	strb	r3, [r4, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002402:	f240 1223 	movw	r2, #291	; 0x123
 8002406:	f107 0010 	add.w	r0, r7, #16
 800240a:	f009 fa11 	bl	800b830 <memcpy>
 800240e:	e6ba      	b.n	8002186 <HAL_UARTEx_RxEventCallback+0x76>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002410:	7aa9      	ldrb	r1, [r5, #10]
 8002412:	7a6b      	ldrb	r3, [r5, #9]
 8002414:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002418:	7ae9      	ldrb	r1, [r5, #11]
 800241a:	4620      	mov	r0, r4
 800241c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8002420:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002422:	2800      	cmp	r0, #0
 8002424:	d1ea      	bne.n	80023fc <HAL_UARTEx_RxEventCallback+0x2ec>
 8002426:	e7e5      	b.n	80023f4 <HAL_UARTEx_RxEventCallback+0x2e4>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002428:	7b63      	ldrb	r3, [r4, #13]
 800242a:	1aea      	subs	r2, r5, r3
		status->signature_wait--;
 800242c:	3b01      	subs	r3, #1
 800242e:	b2db      	uxtb	r3, r3
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002430:	f882 6123 	strb.w	r6, [r2, #291]	; 0x123
		status->signature_wait--;
 8002434:	7363      	strb	r3, [r4, #13]
		if (status->signature_wait == 0) {
 8002436:	2b00      	cmp	r3, #0
 8002438:	f47f aea5 	bne.w	8002186 <HAL_UARTEx_RxEventCallback+0x76>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800243c:	f8d4 a010 	ldr.w	sl, [r4, #16]
	if (signing == NULL) {
 8002440:	f1ba 0f00 	cmp.w	sl, #0
 8002444:	f000 809f 	beq.w	8002586 <HAL_UARTEx_RxEventCallback+0x476>
    m->sz[1] = 0;
 8002448:	e9cd 334f 	strd	r3, r3, [sp, #316]	; 0x13c
    m->counter[1] = 0xbb67ae85;
 800244c:	4a82      	ldr	r2, [pc, #520]	; (8002658 <HAL_UARTEx_RxEventCallback+0x548>)
 800244e:	4b83      	ldr	r3, [pc, #524]	; (800265c <HAL_UARTEx_RxEventCallback+0x54c>)
    m->counter[3] = 0xa54ff53a;
 8002450:	4983      	ldr	r1, [pc, #524]	; (8002660 <HAL_UARTEx_RxEventCallback+0x550>)
    m->counter[5] = 0x9b05688c;
 8002452:	4884      	ldr	r0, [pc, #528]	; (8002664 <HAL_UARTEx_RxEventCallback+0x554>)
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002454:	f8d4 9014 	ldr.w	r9, [r4, #20]
    m->counter[1] = 0xbb67ae85;
 8002458:	e9cd 2351 	strd	r2, r3, [sp, #324]	; 0x144
    m->counter[3] = 0xa54ff53a;
 800245c:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_UARTEx_RxEventCallback+0x558>)
 800245e:	e9cd 1353 	strd	r1, r3, [sp, #332]	; 0x14c
    m->counter[5] = 0x9b05688c;
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_UARTEx_RxEventCallback+0x55c>)
 8002464:	e9cd 0355 	strd	r0, r3, [sp, #340]	; 0x154
    m->counter[6] = 0x1f83d9ab;
 8002468:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_UARTEx_RxEventCallback+0x560>)
 800246a:	9357      	str	r3, [sp, #348]	; 0x15c
    m->counter[7] = 0x5be0cd19;
 800246c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8002470:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8002474:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8002478:	2220      	movs	r2, #32
 800247a:	f10a 0110 	add.w	r1, sl, #16
 800247e:	a84f      	add	r0, sp, #316	; 0x13c
 8002480:	9358      	str	r3, [sp, #352]	; 0x160
 8002482:	f7ff fadd 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8002486:	497b      	ldr	r1, [pc, #492]	; (8002674 <HAL_UARTEx_RxEventCallback+0x564>)
 8002488:	220a      	movs	r2, #10
 800248a:	a84f      	add	r0, sp, #316	; 0x13c
 800248c:	f7ff fad8 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8002490:	78ea      	ldrb	r2, [r5, #3]
 8002492:	4979      	ldr	r1, [pc, #484]	; (8002678 <HAL_UARTEx_RxEventCallback+0x568>)
 8002494:	a84f      	add	r0, sp, #316	; 0x13c
 8002496:	f7ff fad3 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800249a:	4978      	ldr	r1, [pc, #480]	; (800267c <HAL_UARTEx_RxEventCallback+0x56c>)
 800249c:	2202      	movs	r2, #2
 800249e:	a84f      	add	r0, sp, #316	; 0x13c
 80024a0:	f7ff face 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80024a4:	2207      	movs	r2, #7
 80024a6:	4976      	ldr	r1, [pc, #472]	; (8002680 <HAL_UARTEx_RxEventCallback+0x570>)
 80024a8:	a84f      	add	r0, sp, #316	; 0x13c
 80024aa:	f7ff fac9 	bl	8001a40 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80024ae:	a948      	add	r1, sp, #288	; 0x120
 80024b0:	a84f      	add	r0, sp, #316	; 0x13c
 80024b2:	f7ff fba5 	bl	8001c00 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80024b6:	4973      	ldr	r1, [pc, #460]	; (8002684 <HAL_UARTEx_RxEventCallback+0x574>)
 80024b8:	2206      	movs	r2, #6
 80024ba:	a848      	add	r0, sp, #288	; 0x120
 80024bc:	f009 f9a8 	bl	800b810 <memcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d178      	bne.n	80025b8 <HAL_UARTEx_RxEventCallback+0x4a8>
	memcpy(tstamp.t8, psig+1, 6);
 80024c6:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800268c <HAL_UARTEx_RxEventCallback+0x57c>
	uint8_t link_id = psig[0];
 80024ca:	f895 b116 	ldrb.w	fp, [r5, #278]	; 0x116
	memcpy(tstamp.t8, psig+1, 6);
 80024ce:	f8bc 2004 	ldrh.w	r2, [ip, #4]
	tstamp.t64 = 0;
 80024d2:	2000      	movs	r0, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	e9cd 014a 	strd	r0, r1, [sp, #296]	; 0x128
	memcpy(tstamp.t8, psig+1, 6);
 80024da:	f8dc 0000 	ldr.w	r0, [ip]
 80024de:	904a      	str	r0, [sp, #296]	; 0x128
 80024e0:	f8ad 212c 	strh.w	r2, [sp, #300]	; 0x12c
	if (signing_streams == NULL) {
 80024e4:	f1b9 0f00 	cmp.w	r9, #0
 80024e8:	d066      	beq.n	80025b8 <HAL_UARTEx_RxEventCallback+0x4a8>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80024ea:	79ea      	ldrb	r2, [r5, #7]
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80024ec:	f8b9 e000 	ldrh.w	lr, [r9]
		    msg->compid == signing_streams->stream[i].compid &&
 80024f0:	7a28      	ldrb	r0, [r5, #8]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80024f2:	9247      	str	r2, [sp, #284]	; 0x11c
		    msg->compid == signing_streams->stream[i].compid &&
 80024f4:	9346      	str	r3, [sp, #280]	; 0x118
 80024f6:	464a      	mov	r2, r9
 80024f8:	f8bd 1118 	ldrh.w	r1, [sp, #280]	; 0x118
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80024fc:	458e      	cmp	lr, r1
 80024fe:	d90e      	bls.n	800251e <HAL_UARTEx_RxEventCallback+0x40e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8002500:	78d1      	ldrb	r1, [r2, #3]
 8002502:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002504:	4299      	cmp	r1, r3
 8002506:	d105      	bne.n	8002514 <HAL_UARTEx_RxEventCallback+0x404>
 8002508:	7911      	ldrb	r1, [r2, #4]
 800250a:	4281      	cmp	r1, r0
 800250c:	d102      	bne.n	8002514 <HAL_UARTEx_RxEventCallback+0x404>
		    msg->compid == signing_streams->stream[i].compid &&
 800250e:	7891      	ldrb	r1, [r2, #2]
 8002510:	4559      	cmp	r1, fp
 8002512:	d03a      	beq.n	800258a <HAL_UARTEx_RxEventCallback+0x47a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8002514:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002516:	3301      	adds	r3, #1
 8002518:	9346      	str	r3, [sp, #280]	; 0x118
 800251a:	3209      	adds	r2, #9
 800251c:	e7ec      	b.n	80024f8 <HAL_UARTEx_RxEventCallback+0x3e8>
	if (i == signing_streams->num_signing_streams) {
 800251e:	d134      	bne.n	800258a <HAL_UARTEx_RxEventCallback+0x47a>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8002520:	f1be 0f0f 	cmp.w	lr, #15
 8002524:	d848      	bhi.n	80025b8 <HAL_UARTEx_RxEventCallback+0x4a8>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8002526:	e9dd 214a 	ldrd	r2, r1, [sp, #296]	; 0x128
 800252a:	4857      	ldr	r0, [pc, #348]	; (8002688 <HAL_UARTEx_RxEventCallback+0x578>)
 800252c:	1810      	adds	r0, r2, r0
 800252e:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8002532:	f141 0100 	adc.w	r1, r1, #0
 8002536:	4298      	cmp	r0, r3
 8002538:	eb71 0302 	sbcs.w	r3, r1, r2
 800253c:	d33c      	bcc.n	80025b8 <HAL_UARTEx_RxEventCallback+0x4a8>
		signing_streams->stream[i].sysid = msg->sysid;
 800253e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002540:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002544:	444a      	add	r2, r9
 8002546:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002548:	70d3      	strb	r3, [r2, #3]
		signing_streams->stream[i].compid = msg->compid;
 800254a:	7a29      	ldrb	r1, [r5, #8]
 800254c:	7111      	strb	r1, [r2, #4]
		signing_streams->num_signing_streams++;
 800254e:	f10e 0e01 	add.w	lr, lr, #1
		signing_streams->stream[i].link_id = link_id;
 8002552:	f882 b002 	strb.w	fp, [r2, #2]
		signing_streams->num_signing_streams++;
 8002556:	f8a9 e000 	strh.w	lr, [r9]
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 800255a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800255c:	f8dc 1000 	ldr.w	r1, [ip]
 8002560:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002564:	3305      	adds	r3, #5
 8002566:	eb09 0203 	add.w	r2, r9, r3
 800256a:	f849 1003 	str.w	r1, [r9, r3]
 800256e:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8002572:	8093      	strh	r3, [r2, #4]
	if (tstamp.t64 > signing->timestamp) {
 8002574:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 8002578:	e9dd 034a 	ldrd	r0, r3, [sp, #296]	; 0x128
 800257c:	4281      	cmp	r1, r0
 800257e:	419a      	sbcs	r2, r3
 8002580:	d201      	bcs.n	8002586 <HAL_UARTEx_RxEventCallback+0x476>
		signing->timestamp = tstamp.t64;
 8002582:	e9ca 0302 	strd	r0, r3, [sl, #8]
				status->msg_received = MAVLINK_FRAMING_OK;
 8002586:	2301      	movs	r3, #1
 8002588:	e025      	b.n	80025d6 <HAL_UARTEx_RxEventCallback+0x4c6>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800258a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800258c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002590:	3205      	adds	r2, #5
		last_tstamp.t64 = 0;
 8002592:	2000      	movs	r0, #0
 8002594:	2100      	movs	r1, #0
 8002596:	e9cd 014c 	strd	r0, r1, [sp, #304]	; 0x130
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800259a:	eb09 0102 	add.w	r1, r9, r2
 800259e:	f859 0002 	ldr.w	r0, [r9, r2]
 80025a2:	888a      	ldrh	r2, [r1, #4]
 80025a4:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
		if (tstamp.t64 <= last_tstamp.t64) {
 80025a8:	e9dd 314a 	ldrd	r3, r1, [sp, #296]	; 0x128
 80025ac:	9a4d      	ldr	r2, [sp, #308]	; 0x134
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80025ae:	904c      	str	r0, [sp, #304]	; 0x130
		if (tstamp.t64 <= last_tstamp.t64) {
 80025b0:	4298      	cmp	r0, r3
 80025b2:	eb72 0301 	sbcs.w	r3, r2, r1
 80025b6:	d3d0      	bcc.n	800255a <HAL_UARTEx_RxEventCallback+0x44a>
			   	(status->signing->accept_unsigned_callback &&
 80025b8:	6923      	ldr	r3, [r4, #16]
 80025ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (!sig_ok &&
 80025bc:	b152      	cbz	r2, 80025d4 <HAL_UARTEx_RxEventCallback+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80025be:	7aa9      	ldrb	r1, [r5, #10]
 80025c0:	7a6b      	ldrb	r3, [r5, #9]
 80025c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025c6:	7ae9      	ldrb	r1, [r5, #11]
 80025c8:	4620      	mov	r0, r4
 80025ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80025ce:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback &&
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1d8      	bne.n	8002586 <HAL_UARTEx_RxEventCallback+0x476>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80025d4:	2303      	movs	r3, #3
 80025d6:	7023      	strb	r3, [r4, #0]
 80025d8:	e710      	b.n	80023fc <HAL_UARTEx_RxEventCallback+0x2ec>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80025da:	2a03      	cmp	r2, #3
 80025dc:	f43f adfa 	beq.w	80021d4 <HAL_UARTEx_RxEventCallback+0xc4>
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	f43f ad9e 	beq.w	8002122 <HAL_UARTEx_RxEventCallback+0x12>
  instance->_mavlink_received_header.magic = instance->_mavlinkReceived.magic;
 80025e6:	7cbb      	ldrb	r3, [r7, #18]
 80025e8:	f887 3750 	strb.w	r3, [r7, #1872]	; 0x750
  instance->_mavlink_received_header.compid = instance->_mavlinkReceived.compid;
 80025ec:	7e3b      	ldrb	r3, [r7, #24]
 80025ee:	f887 3756 	strb.w	r3, [r7, #1878]	; 0x756
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 80025f2:	69bb      	ldr	r3, [r7, #24]
  instance->_mavlink_received_header.incompat_flags = instance->_mavlinkReceived.incompat_flags;
 80025f4:	8aba      	ldrh	r2, [r7, #20]
 80025f6:	f8a7 2752 	strh.w	r2, [r7, #1874]	; 0x752
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 80025fa:	f3c3 2317 	ubfx	r3, r3, #8, #24
  instance->_mavlink_received_header.seq = instance->_mavlinkReceived.seq;
 80025fe:	8afa      	ldrh	r2, [r7, #22]
 8002600:	f8a7 2754 	strh.w	r2, [r7, #1876]	; 0x754
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 8002604:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
  instance->_mavlink_received_header.len = instance->_mavlinkReceived.len;
 8002608:	f887 1751 	strb.w	r1, [r7, #1873]	; 0x751
  instance->readFlightTime(instance->_mavlinkReceived);
 800260c:	f240 1217 	movw	r2, #279	; 0x117
 8002610:	f107 011c 	add.w	r1, r7, #28
 8002614:	f107 0410 	add.w	r4, r7, #16
 8002618:	4668      	mov	r0, sp
 800261a:	f009 f909 	bl	800b830 <memcpy>
 800261e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002622:	4638      	mov	r0, r7
 8002624:	f7ff fd4e 	bl	80020c4 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>
  instance->decodeHeartbeat(instance->_mavlinkReceived);
 8002628:	f240 1223 	movw	r2, #291	; 0x123
 800262c:	4621      	mov	r1, r4
 800262e:	a84f      	add	r0, sp, #316	; 0x13c
 8002630:	f009 f8fe 	bl	800b830 <memcpy>
	if(receivedMessage.msgid == MAVLINK_MSG_ID_HEARTBEAT){
 8002634:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	d104      	bne.n	8002644 <HAL_UARTEx_RxEventCallback+0x534>
		mavlink_msg_heartbeat_decode(&receivedMessage, &_received_heartbeat);
 800263a:	f207 715c 	addw	r1, r7, #1884	; 0x75c
 800263e:	a84f      	add	r0, sp, #316	; 0x13c
 8002640:	f7ff fb77 	bl	8001d32 <mavlink_msg_heartbeat_decode>
  instance->_bufferIndex = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
}
 800264a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002652:	bf00      	nop
 8002654:	20000378 	.word	0x20000378
 8002658:	6a09e667 	.word	0x6a09e667
 800265c:	bb67ae85 	.word	0xbb67ae85
 8002660:	3c6ef372 	.word	0x3c6ef372
 8002664:	510e527f 	.word	0x510e527f
 8002668:	a54ff53a 	.word	0xa54ff53a
 800266c:	9b05688c 	.word	0x9b05688c
 8002670:	1f83d9ab 	.word	0x1f83d9ab
 8002674:	2000037a 	.word	0x2000037a
 8002678:	20000384 	.word	0x20000384
 800267c:	2000048c 	.word	0x2000048c
 8002680:	2000048e 	.word	0x2000048e
 8002684:	20000495 	.word	0x20000495
 8002688:	005b8d80 	.word	0x005b8d80
 800268c:	2000048f 	.word	0x2000048f

08002690 <_ZN14MavlinkControl11sendBatteryEv>:
	 HAL_UART_Transmit_DMA(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength);
	

}

void MavlinkControl::sendBattery(void){
 8002690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002692:	4604      	mov	r4, r0
	// Ok, so for some reason (probably because of the firmware inside the HerelinkController or the Mavlink dialect of the Qground app)
	// I can't send the battery data with the battery_status_pack function. So I'm sending battery info with 
	// The system status function.

	uint16_t batteryRemaining = _convertor->get_battery_voltage();
 8002694:	6880      	ldr	r0, [r0, #8]
 8002696:	f7fe fea1 	bl	80013dc <_ZN9Convertor19get_battery_voltageEv>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 800269a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800269e:	f04f 32ff 	mov.w	r2, #4294967295
 80026a2:	f8c4 2262 	str.w	r2, [r4, #610]	; 0x262
 80026a6:	f8c4 2266 	str.w	r2, [r4, #614]	; 0x266
 80026aa:	f8c4 226a 	str.w	r2, [r4, #618]	; 0x26a
 80026ae:	f8a4 326e 	strh.w	r3, [r4, #622]	; 0x26e
 80026b2:	f8a4 3270 	strh.w	r3, [r4, #624]	; 0x270
 80026b6:	f8a4 3272 	strh.w	r3, [r4, #626]	; 0x272
 80026ba:	f8a4 3274 	strh.w	r3, [r4, #628]	; 0x274
 80026be:	f8a4 3276 	strh.w	r3, [r4, #630]	; 0x276
 80026c2:	f8a4 3278 	strh.w	r3, [r4, #632]	; 0x278
 80026c6:	f8a4 327a 	strh.w	r3, [r4, #634]	; 0x27a
 80026ca:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
 80026ce:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
 80026d2:	f8c4 2281 	str.w	r2, [r4, #641]	; 0x281
 80026d6:	f8c4 2285 	str.w	r2, [r4, #645]	; 0x285
 80026da:	f8c4 2289 	str.w	r2, [r4, #649]	; 0x289
    msg->msgid = MAVLINK_MSG_ID_SYS_STATUS;
 80026de:	2300      	movs	r3, #0
 80026e0:	2201      	movs	r2, #1

	_TX_bufferLength = mavlink_msg_sys_status_pack(
 80026e2:	f204 2656 	addw	r6, r4, #598	; 0x256
 80026e6:	f884 225f 	strb.w	r2, [r4, #607]	; 0x25f
 80026ea:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
 80026ee:	f884 3261 	strb.w	r3, [r4, #609]	; 0x261
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SYS_STATUS_MIN_LEN, MAVLINK_MSG_ID_SYS_STATUS_LEN, MAVLINK_MSG_ID_SYS_STATUS_CRC);
 80026f2:	227c      	movs	r2, #124	; 0x7c
 80026f4:	232b      	movs	r3, #43	; 0x2b
 80026f6:	e9cd 3200 	strd	r3, r2, [sp]
 80026fa:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80026fe:	f894 23bd 	ldrb.w	r2, [r4, #957]	; 0x3bd
 8002702:	f884 0280 	strb.w	r0, [r4, #640]	; 0x280
 8002706:	231f      	movs	r3, #31
 8002708:	4630      	mov	r0, r6
 800270a:	f7ff fb21 	bl	8001d50 <mavlink_finalize_message>
		-1,                         // Battery mode (0: power source is connected, 1: power source is disconnected)
		-1                          // Fault/health indications (for future use)
);


	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend_2);
 800270e:	f204 5514 	addw	r5, r4, #1300	; 0x514
	_TX_bufferLength = mavlink_msg_sys_status_pack(
 8002712:	f8a4 0744 	strh.w	r0, [r4, #1860]	; 0x744
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend_2);
 8002716:	4631      	mov	r1, r6
 8002718:	4628      	mov	r0, r5
 800271a:	f7ff fab2 	bl	8001c82 <mavlink_msg_to_send_buffer>
	HAL_UART_Transmit_DMA(_huart_mavlink,_bufferPackedforUart,_TX_bufferLength);
 800271e:	f8b4 2744 	ldrh.w	r2, [r4, #1860]	; 0x744
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	4629      	mov	r1, r5



}
 8002726:	b002      	add	sp, #8
 8002728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit_DMA(_huart_mavlink,_bufferPackedforUart,_TX_bufferLength);
 800272c:	f006 bc76 	b.w	800901c <HAL_UART_Transmit_DMA>

08002730 <_ZN14MavlinkControl10sendFluidsEv>:

void MavlinkControl::sendFluids(void){
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	ed2d 8b02 	vpush	{d8}
 8002736:	4604      	mov	r4, r0
 8002738:	b089      	sub	sp, #36	; 0x24

	float fluidPosition = _convertor->get_fluidPosition();
 800273a:	6880      	ldr	r0, [r0, #8]
 800273c:	f7fe feb8 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 8002740:	ee08 0a10 	vmov	s16, r0
	float fluidPercentage = fluidPosition / 10;
	int16_t fluidAmount = _convertor->get_fluidAmount();
 8002744:	68a0      	ldr	r0, [r4, #8]
 8002746:	f7ff f833 	bl	80017b0 <_ZN9Convertor15get_fluidAmountEv>



	_TX_bufferLength = mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1, 0, 0, 0, fluidPercentage,0,fluidAmount);
 800274a:	ee07 0a90 	vmov	s15, r0
	float fluidPosition = _convertor->get_fluidPosition();
 800274e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	_TX_bufferLength = mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1, 0, 0, 0, fluidPercentage,0,fluidAmount);
 8002752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float fluidPercentage = fluidPosition / 10;
 8002756:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
	_TX_bufferLength = mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1, 0, 0, 0, fluidPercentage,0,fluidAmount);
 800275a:	edcd 7a06 	vstr	s15, [sp, #24]
	float fluidPercentage = fluidPosition / 10;
 800275e:	eec8 7a07 	vdiv.f32	s15, s16, s14
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 8002762:	2300      	movs	r3, #0
 8002764:	9303      	str	r3, [sp, #12]
    packet.groundspeed = groundspeed;
 8002766:	9304      	str	r3, [sp, #16]
    packet.alt = alt;
 8002768:	9305      	str	r3, [sp, #20]
    packet.climb = climb;
    packet.heading = heading;
 800276a:	2300      	movs	r3, #0
 800276c:	f8ad 301c 	strh.w	r3, [sp, #28]
	_TX_bufferLength = mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1, 0, 0, 0, fluidPercentage,0,fluidAmount);
 8002770:	f894 c3bc 	ldrb.w	ip, [r4, #956]	; 0x3bc
 8002774:	f894 23bd 	ldrb.w	r2, [r4, #957]	; 0x3bd
 8002778:	f204 1733 	addw	r7, r4, #307	; 0x133
    packet.throttle = throttle;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 800277c:	ae03      	add	r6, sp, #12
 800277e:	f10d 0e1c 	add.w	lr, sp, #28
 8002782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002786:	ee17 3a90 	vmov	r3, s15
 800278a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800278e:	f204 133f 	addw	r3, r4, #319	; 0x13f
 8002792:	4635      	mov	r5, r6
 8002794:	cd03      	ldmia	r5!, {r0, r1}
 8002796:	4575      	cmp	r5, lr
 8002798:	6018      	str	r0, [r3, #0]
 800279a:	6059      	str	r1, [r3, #4]
 800279c:	462e      	mov	r6, r5
 800279e:	f103 0308 	add.w	r3, r3, #8
 80027a2:	d1f6      	bne.n	8002792 <_ZN14MavlinkControl10sendFluidsEv+0x62>
 80027a4:	6828      	ldr	r0, [r5, #0]
 80027a6:	6018      	str	r0, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
 80027ae:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
 80027b2:	214a      	movs	r1, #74	; 0x4a
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80027b4:	2314      	movs	r3, #20
 80027b6:	e9cd 3300 	strd	r3, r3, [sp]
    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80027ba:	f884 113c 	strb.w	r1, [r4, #316]	; 0x13c
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80027be:	4638      	mov	r0, r7
 80027c0:	4661      	mov	r1, ip
 80027c2:	f7ff fac5 	bl	8001d50 <mavlink_finalize_message>
	mavlink_msg_to_send_buffer(_bufferPackedforUart_2, &_mavlinkSend_1);
 80027c6:	f204 652c 	addw	r5, r4, #1580	; 0x62c
	_TX_bufferLength = mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend_1, 0, 0, 0, fluidPercentage,0,fluidAmount);
 80027ca:	f8a4 0744 	strh.w	r0, [r4, #1860]	; 0x744
	mavlink_msg_to_send_buffer(_bufferPackedforUart_2, &_mavlinkSend_1);
 80027ce:	4639      	mov	r1, r7
 80027d0:	4628      	mov	r0, r5
 80027d2:	f7ff fa56 	bl	8001c82 <mavlink_msg_to_send_buffer>
	HAL_UART_Transmit_DMA(_huart_mavlink, _bufferPackedforUart_2, _TX_bufferLength);
 80027d6:	f8b4 2744 	ldrh.w	r2, [r4, #1860]	; 0x744
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	4629      	mov	r1, r5

}
 80027de:	b009      	add	sp, #36	; 0x24
 80027e0:	ecbd 8b02 	vpop	{d8}
 80027e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_UART_Transmit_DMA(_huart_mavlink, _bufferPackedforUart_2, _TX_bufferLength);
 80027e8:	f006 bc18 	b.w	800901c <HAL_UART_Transmit_DMA>

080027ec <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	2219      	movs	r2, #25
 80027f0:	4604      	mov	r4, r0
 80027f2:	460d      	mov	r5, r1
 80027f4:	3004      	adds	r0, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	f009 f828 	bl	800b84c <memset>
 80027fc:	2222      	movs	r2, #34	; 0x22
 80027fe:	2100      	movs	r1, #0
 8002800:	f104 001e 	add.w	r0, r4, #30
 8002804:	f009 f822 	bl	800b84c <memset>

	this->_huart_sbus = huart_sbus;
 8002808:	6025      	str	r5, [r4, #0]




}
 800280a:	4620      	mov	r0, r4
 800280c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002810 <_ZN4SBUS8readSBUSEv>:


}


bool SBUS::readSBUS(void){
 8002810:	b508      	push	{r3, lr}

		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
		uint16_t LSB = _sbus_buffer[2] << 8;
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8002812:	f8b0 3005 	ldrh.w	r3, [r0, #5]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8002816:	7981      	ldrb	r1, [r0, #6]
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8002818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281c:	83c3      	strh	r3, [r0, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
		LSB = _sbus_buffer[3] << 5;
 800281e:	79c3      	ldrb	r3, [r0, #7]
 8002820:	015a      	lsls	r2, r3, #5
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8002822:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8002826:	f3c2 020a 	ubfx	r2, r2, #0, #11

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
		LSB = _sbus_buffer[4] << 2;
 800282a:	7a01      	ldrb	r1, [r0, #8]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 800282c:	8402      	strh	r2, [r0, #32]
		MSB = _sbus_buffer[3] >> 6;
 800282e:	099b      	lsrs	r3, r3, #6
		thirdByte = _sbus_buffer[5] << 10;
 8002830:	7a42      	ldrb	r2, [r0, #9]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8002832:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8002836:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
		LSB = _sbus_buffer[6] << 7;
 800283a:	7a81      	ldrb	r1, [r0, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 800283c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002840:	8443      	strh	r3, [r0, #34]	; 0x22
		LSB = _sbus_buffer[6] << 7;
 8002842:	01cb      	lsls	r3, r1, #7
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8002844:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284c:	8483      	strh	r3, [r0, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
		LSB = _sbus_buffer[7] << 4;
 800284e:	7ac3      	ldrb	r3, [r0, #11]
 8002850:	011a      	lsls	r2, r3, #4
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8002852:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8002856:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800285a:	84c2      	strh	r2, [r0, #38]	; 0x26

		//BUTTON A - CHANNEL 6
		MSB = _sbus_buffer[7] >> 7;
		LSB = _sbus_buffer[8] << 1;
 800285c:	7b02      	ldrb	r2, [r0, #12]
		thirdByte = _sbus_buffer[9] << 9;
 800285e:	7b41      	ldrb	r1, [r0, #13]
		MSB = _sbus_buffer[7] >> 7;
 8002860:	09db      	lsrs	r3, r3, #7
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8002862:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8002866:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800286a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286e:	8503      	strh	r3, [r0, #40]	; 0x28

		//BUTTON B - CHANNEL 7
		MSB = _sbus_buffer[9] >> 2;
		LSB = _sbus_buffer[10] << 6;
 8002870:	7b83      	ldrb	r3, [r0, #14]
 8002872:	019a      	lsls	r2, r3, #6
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8002874:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
 8002878:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800287c:	8542      	strh	r2, [r0, #42]	; 0x2a

		//BUTTON C - CHANNEL 8
		MSB = _sbus_buffer[10] >> 5;
		LSB = _sbus_buffer[11] << 3;
 800287e:	7bc2      	ldrb	r2, [r0, #15]
		this->_channels[7] = (MSB | LSB) & 0x07FF;

		//BUTTON D - CHANNEL 9
		MSB = _sbus_buffer[12];
		LSB = _sbus_buffer[13] << 8;
 8002880:	7c41      	ldrb	r1, [r0, #17]
		MSB = _sbus_buffer[10] >> 5;
 8002882:	095b      	lsrs	r3, r3, #5
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8002884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002888:	8583      	strh	r3, [r0, #44]	; 0x2c
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 800288a:	8a03      	ldrh	r3, [r0, #16]
 800288c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002890:	85c3      	strh	r3, [r0, #46]	; 0x2e

		//BUTTON HOME - CHANNEL - 10
		MSB = _sbus_buffer[13] >> 3;
		LSB = _sbus_buffer[14] << 5;
 8002892:	7c83      	ldrb	r3, [r0, #18]
 8002894:	015a      	lsls	r2, r3, #5
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8002896:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800289a:	f3c2 020a 	ubfx	r2, r2, #0, #11


		MSB = _sbus_buffer[14] >> 6;
		LSB = _sbus_buffer[15] << 2;
 800289e:	7cc1      	ldrb	r1, [r0, #19]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 80028a0:	8602      	strh	r2, [r0, #48]	; 0x30
		MSB = _sbus_buffer[14] >> 6;
 80028a2:	099b      	lsrs	r3, r3, #6
		thirdByte = _sbus_buffer[16] << 10;
 80028a4:	7d02      	ldrb	r2, [r0, #20]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 80028a6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80028aa:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

		//SHOULDER BUTTON
		MSB = _sbus_buffer[16] >> 1;
		LSB = _sbus_buffer[17] << 7;
 80028ae:	7d41      	ldrb	r1, [r0, #21]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 80028b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b4:	8643      	strh	r3, [r0, #50]	; 0x32
		LSB = _sbus_buffer[17] << 7;
 80028b6:	01cb      	lsls	r3, r1, #7
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 80028b8:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80028bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c0:	8683      	strh	r3, [r0, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
		LSB = _sbus_buffer[18] << 4;
 80028c2:	7d83      	ldrb	r3, [r0, #22]
 80028c4:	011a      	lsls	r2, r3, #4
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 80028c6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 80028ca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80028ce:	86c2      	strh	r2, [r0, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
		LSB = _sbus_buffer[19] << 1;
		thirdByte = _sbus_buffer[20] >> 9;
 80028d0:	7e01      	ldrb	r1, [r0, #24]
		LSB = _sbus_buffer[19] << 1;
 80028d2:	7dc2      	ldrb	r2, [r0, #23]
		MSB = _sbus_buffer[18] >> 7;
 80028d4:	09db      	lsrs	r3, r3, #7
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 80028d6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80028da:	8703      	strh	r3, [r0, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
		LSB = _sbus_buffer[21] << 6;
 80028dc:	7e43      	ldrb	r3, [r0, #25]
 80028de:	019a      	lsls	r2, r3, #6
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 80028e0:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
 80028e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80028e8:	8742      	strh	r2, [r0, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
		LSB = _sbus_buffer[22] << 3;
 80028ea:	7e82      	ldrb	r2, [r0, #26]
		MSB = _sbus_buffer[21] >> 5;
 80028ec:	095b      	lsrs	r3, r3, #5
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 80028ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028f2:	8783      	strh	r3, [r0, #60]	; 0x3c

		if(_channels[16] == (_sbus_buffer[23] & 0x001 ? 2047 : 0)){
 80028f4:	7ec3      	ldrb	r3, [r0, #27]
 80028f6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80028f8:	f013 0f01 	tst.w	r3, #1
 80028fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002900:	bf08      	it	eq
 8002902:	2300      	moveq	r3, #0
 8002904:	429a      	cmp	r2, r3
 8002906:	d004      	beq.n	8002912 <_ZN4SBUS8readSBUSEv+0x102>
			return 1;

		}else {

			printf("something wrong with SBUS \r\n");
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <_ZN4SBUS8readSBUSEv+0x108>)
 800290a:	f009 fd77 	bl	800c3fc <puts>
			return 0;
 800290e:	2000      	movs	r0, #0





}
 8002910:	bd08      	pop	{r3, pc}
			return 1;
 8002912:	2001      	movs	r0, #1
 8002914:	e7fc      	b.n	8002910 <_ZN4SBUS8readSBUSEv+0x100>
 8002916:	bf00      	nop
 8002918:	0800ef34 	.word	0x0800ef34

0800291c <_ZN4SBUS6updateEv>:
void SBUS::update(void){
 800291c:	b510      	push	{r4, lr}
	if(HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE) == HAL_OK){
 800291e:	1d01      	adds	r1, r0, #4
void SBUS::update(void){
 8002920:	4604      	mov	r4, r0
	if(HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE) == HAL_OK){
 8002922:	2219      	movs	r2, #25
 8002924:	6800      	ldr	r0, [r0, #0]
 8002926:	f007 f94f 	bl	8009bc8 <HAL_UARTEx_ReceiveToIdle_DMA>
 800292a:	b920      	cbnz	r0, 8002936 <_ZN4SBUS6updateEv+0x1a>
		this->readSBUS();
 800292c:	4620      	mov	r0, r4
}
 800292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		this->readSBUS();
 8002932:	f7ff bf6d 	b.w	8002810 <_ZN4SBUS8readSBUSEv>
}
 8002936:	bd10      	pop	{r4, pc}

08002938 <_ZN4SBUS8getLeftYEv>:

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){

	int16_t raw_value = _channels[2];
 8002938:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
	int16_t center_value = 1024;
	int16_t max_up = 364;
	int16_t max_down = 1684;

	if(raw_value < center_value){
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002940:	da0d      	bge.n	800295e <_ZN4SBUS8getLeftYEv+0x26>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8002942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002946:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800294a:	4353      	muls	r3, r2
 800294c:	f2a2 627c 	subw	r2, r2, #1660	; 0x67c

	}else if(raw_value > center_value){

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8002950:	fb93 f3f2 	sdiv	r3, r3, r2
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800295c:	4770      	bx	lr
	}else if(raw_value > center_value){
 800295e:	d008      	beq.n	8002972 <_ZN4SBUS8getLeftYEv+0x3a>
		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8002960:	f64f 4218 	movw	r2, #64536	; 0xfc18
 8002964:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002968:	fb13 f302 	smulbb	r3, r3, r2
 800296c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002970:	e7ee      	b.n	8002950 <_ZN4SBUS8getLeftYEv+0x18>

	}else{

	    return 0.0f;
 8002972:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002978 <_ZN4SBUS8getLeftYEv+0x40>

	}

}
 8002976:	4770      	bx	lr
 8002978:	00000000 	.word	0x00000000

0800297c <_ZN4SBUS8getLeftXEv>:

float SBUS::getLeftX(void){
  int16_t raw_value = _channels[3];
 800297c:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  float center_value = 1024.0f;
  float max_left = 364.0f;
  float max_right = 1684.0f;

  if (raw_value < center_value) {
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298c:	da0c      	bge.n	80029a8 <_ZN4SBUS8getLeftXEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 800298e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029b0 <_ZN4SBUS8getLeftXEv+0x34>
 8002992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002996:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029b4 <_ZN4SBUS8getLeftXEv+0x38>
 800299a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029b8 <_ZN4SBUS8getLeftXEv+0x3c>
 80029a2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80029a6:	4770      	bx	lr
  } else if (raw_value > center_value) {
 80029a8:	d1f1      	bne.n	800298e <_ZN4SBUS8getLeftXEv+0x12>

  } else {

    return 0.0f;
 80029aa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80029bc <_ZN4SBUS8getLeftXEv+0x40>

  }
}
 80029ae:	4770      	bx	lr
 80029b0:	44800000 	.word	0x44800000
 80029b4:	447a0000 	.word	0x447a0000
 80029b8:	44250000 	.word	0x44250000
 80029bc:	00000000 	.word	0x00000000

080029c0 <_ZN4SBUS9getRightYEv>:


float SBUS::getRightY(void){

  int16_t raw_value = _channels[1];
 80029c0:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
  float center_value = 1024.0f;
  float max_up = 364.0f;
  float max_down = 1684.0f;

  if (raw_value < center_value) {
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d0:	da0c      	bge.n	80029ec <_ZN4SBUS9getRightYEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 80029d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029f4 <_ZN4SBUS9getRightYEv+0x34>
 80029d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029da:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029f8 <_ZN4SBUS9getRightYEv+0x38>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029fc <_ZN4SBUS9getRightYEv+0x3c>
 80029e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80029ea:	4770      	bx	lr
  } else if (raw_value > center_value) {
 80029ec:	d1f1      	bne.n	80029d2 <_ZN4SBUS9getRightYEv+0x12>

  } else {

	  return 0.0f;
 80029ee:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002a00 <_ZN4SBUS9getRightYEv+0x40>

  }
}
 80029f2:	4770      	bx	lr
 80029f4:	44800000 	.word	0x44800000
 80029f8:	447a0000 	.word	0x447a0000
 80029fc:	c4250000 	.word	0xc4250000
 8002a00:	00000000 	.word	0x00000000

08002a04 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){

  int16_t raw_value = _channels[0];
 8002a04:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
  float center_value = 1024.0f;
  float max_left = 364.0f;
  float max_right = 1684.0f;


  if (raw_value < center_value) {
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	da0c      	bge.n	8002a30 <_ZN4SBUS9getRightXEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8002a16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a38 <_ZN4SBUS9getRightXEv+0x34>
 8002a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a3c <_ZN4SBUS9getRightXEv+0x38>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a26:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a40 <_ZN4SBUS9getRightXEv+0x3c>
 8002a2a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8002a2e:	4770      	bx	lr
  } else if (raw_value > center_value) {
 8002a30:	d1f1      	bne.n	8002a16 <_ZN4SBUS9getRightXEv+0x12>

  } else {

    return 0.0f;
 8002a32:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002a44 <_ZN4SBUS9getRightXEv+0x40>

  }

}
 8002a36:	4770      	bx	lr
 8002a38:	44800000 	.word	0x44800000
 8002a3c:	447a0000 	.word	0x447a0000
 8002a40:	44250000 	.word	0x44250000
 8002a44:	00000000 	.word	0x00000000

08002a48 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){

	int16_t raw_value = _channels[4];
 8002a48:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26

	float center_value = 1024.0f;
	float max_left = 1684.0f;
	float max_right = 364.0f;

	if(raw_value < center_value){
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	da0c      	bge.n	8002a74 <_ZN4SBUS11getJogWheelEv+0x2c>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));

	}else if (raw_value > center_value){

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8002a5a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a7c <_ZN4SBUS11getJogWheelEv+0x34>
 8002a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a62:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a80 <_ZN4SBUS11getJogWheelEv+0x38>
 8002a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a84 <_ZN4SBUS11getJogWheelEv+0x3c>
 8002a6e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8002a72:	4770      	bx	lr
	}else if (raw_value > center_value){
 8002a74:	d1f1      	bne.n	8002a5a <_ZN4SBUS11getJogWheelEv+0x12>
	}else {

		return 0.0f;
 8002a76:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002a88 <_ZN4SBUS11getJogWheelEv+0x40>
	}


}
 8002a7a:	4770      	bx	lr
 8002a7c:	44800000 	.word	0x44800000
 8002a80:	447a0000 	.word	0x447a0000
 8002a84:	c4250000 	.word	0xc4250000
 8002a88:	00000000 	.word	0x00000000

08002a8c <_ZN4SBUS8A_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);

	  switch (debounce_state) {
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_ZN4SBUS8A_buttonEv+0x54>)
	  bool button_pressed = (_channels[5] > 500);
 8002a8e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	  switch (debounce_state) {
 8002a90:	7813      	ldrb	r3, [r2, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d00e      	beq.n	8002ab4 <_ZN4SBUS8A_buttonEv+0x28>
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f04f 0000 	mov.w	r0, #0
 8002a9c:	d019      	beq.n	8002ad2 <_ZN4SBUS8A_buttonEv+0x46>
 8002a9e:	b9eb      	cbnz	r3, 8002adc <_ZN4SBUS8A_buttonEv+0x50>

	    case 0:
	      if (button_pressed) {
 8002aa0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002aa4:	d801      	bhi.n	8002aaa <_ZN4SBUS8A_buttonEv+0x1e>
	        return true;
	      }
	      break;
	  }

	  return false;
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	4770      	bx	lr
	        debounce_state = 1;
 8002aaa:	2101      	movs	r1, #1
 8002aac:	7011      	strb	r1, [r2, #0]
	        debounce_counter = 0;
 8002aae:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <_ZN4SBUS8A_buttonEv+0x58>)
	        debounce_state = 2;
 8002ab0:	7013      	strb	r3, [r2, #0]
 8002ab2:	e7f8      	b.n	8002aa6 <_ZN4SBUS8A_buttonEv+0x1a>
	      if (!button_pressed) {
 8002ab4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002ab8:	d802      	bhi.n	8002ac0 <_ZN4SBUS8A_buttonEv+0x34>
	        debounce_state = 0;
 8002aba:	2000      	movs	r0, #0
 8002abc:	7010      	strb	r0, [r2, #0]
 8002abe:	4770      	bx	lr
	      } else if (++debounce_counter >= _debounceTime) {
 8002ac0:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <_ZN4SBUS8A_buttonEv+0x58>)
 8002ac2:	780b      	ldrb	r3, [r1, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b13      	cmp	r3, #19
 8002aca:	700b      	strb	r3, [r1, #0]
 8002acc:	d9eb      	bls.n	8002aa6 <_ZN4SBUS8A_buttonEv+0x1a>
	        debounce_state = 2;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e7ee      	b.n	8002ab0 <_ZN4SBUS8A_buttonEv+0x24>
	      if (!button_pressed) {
 8002ad2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002ad6:	d8e6      	bhi.n	8002aa6 <_ZN4SBUS8A_buttonEv+0x1a>
	        debounce_state = 0;
 8002ad8:	7010      	strb	r0, [r2, #0]
	        return true;
 8002ada:	2001      	movs	r0, #1

}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000868 	.word	0x20000868
 8002ae4:	20000869 	.word	0x20000869

08002ae8 <_ZN4SBUS8B_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000);

	  switch (debounce_state) {
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <_ZN4SBUS8B_buttonEv+0x54>)
	  bool button_pressed = (_channels[6] > 1000);
 8002aea:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	  switch (debounce_state) {
 8002aec:	7813      	ldrb	r3, [r2, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00e      	beq.n	8002b10 <_ZN4SBUS8B_buttonEv+0x28>
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f04f 0000 	mov.w	r0, #0
 8002af8:	d019      	beq.n	8002b2e <_ZN4SBUS8B_buttonEv+0x46>
 8002afa:	b9eb      	cbnz	r3, 8002b38 <_ZN4SBUS8B_buttonEv+0x50>
	    case 0:  // button released
	      if (button_pressed) {
 8002afc:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b00:	d801      	bhi.n	8002b06 <_ZN4SBUS8B_buttonEv+0x1e>
	        return true;
	      }
	      break;
	  }

	  return false;
 8002b02:	2000      	movs	r0, #0
 8002b04:	4770      	bx	lr
	        debounce_state = 1;
 8002b06:	2101      	movs	r1, #1
 8002b08:	7011      	strb	r1, [r2, #0]
	        debounce_counter = 0;
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <_ZN4SBUS8B_buttonEv+0x58>)
	        debounce_state = 2;
 8002b0c:	7013      	strb	r3, [r2, #0]
 8002b0e:	e7f8      	b.n	8002b02 <_ZN4SBUS8B_buttonEv+0x1a>
	      if (!button_pressed) {
 8002b10:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b14:	d802      	bhi.n	8002b1c <_ZN4SBUS8B_buttonEv+0x34>
	        debounce_state = 0;
 8002b16:	2000      	movs	r0, #0
 8002b18:	7010      	strb	r0, [r2, #0]
 8002b1a:	4770      	bx	lr
	      } else if (++debounce_counter >= _debounceTime) {
 8002b1c:	4908      	ldr	r1, [pc, #32]	; (8002b40 <_ZN4SBUS8B_buttonEv+0x58>)
 8002b1e:	780b      	ldrb	r3, [r1, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b13      	cmp	r3, #19
 8002b26:	700b      	strb	r3, [r1, #0]
 8002b28:	d9eb      	bls.n	8002b02 <_ZN4SBUS8B_buttonEv+0x1a>
	        debounce_state = 2;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e7ee      	b.n	8002b0c <_ZN4SBUS8B_buttonEv+0x24>
	      if (!button_pressed) {
 8002b2e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b32:	d8e6      	bhi.n	8002b02 <_ZN4SBUS8B_buttonEv+0x1a>
	        debounce_state = 0;
 8002b34:	7010      	strb	r0, [r2, #0]
	        return true;
 8002b36:	2001      	movs	r0, #1


}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000086a 	.word	0x2000086a
 8002b40:	2000086b 	.word	0x2000086b

08002b44 <_ZN4SBUS8C_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[7] > 1000);

	  switch (debounce_state) {
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <_ZN4SBUS8C_buttonEv+0x54>)
	  bool button_pressed = (_channels[7] > 1000);
 8002b46:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
	  switch (debounce_state) {
 8002b48:	7813      	ldrb	r3, [r2, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d00e      	beq.n	8002b6c <_ZN4SBUS8C_buttonEv+0x28>
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	d019      	beq.n	8002b8a <_ZN4SBUS8C_buttonEv+0x46>
 8002b56:	b9eb      	cbnz	r3, 8002b94 <_ZN4SBUS8C_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 8002b58:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b5c:	d801      	bhi.n	8002b62 <_ZN4SBUS8C_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	4770      	bx	lr
			debounce_state = 1;
 8002b62:	2101      	movs	r1, #1
 8002b64:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <_ZN4SBUS8C_buttonEv+0x58>)
			debounce_state = 2;
 8002b68:	7013      	strb	r3, [r2, #0]
 8002b6a:	e7f8      	b.n	8002b5e <_ZN4SBUS8C_buttonEv+0x1a>
		  if (!button_pressed) {
 8002b6c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b70:	d802      	bhi.n	8002b78 <_ZN4SBUS8C_buttonEv+0x34>
			debounce_state = 0;
 8002b72:	2000      	movs	r0, #0
 8002b74:	7010      	strb	r0, [r2, #0]
 8002b76:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002b78:	4908      	ldr	r1, [pc, #32]	; (8002b9c <_ZN4SBUS8C_buttonEv+0x58>)
 8002b7a:	780b      	ldrb	r3, [r1, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b13      	cmp	r3, #19
 8002b82:	700b      	strb	r3, [r1, #0]
 8002b84:	d9eb      	bls.n	8002b5e <_ZN4SBUS8C_buttonEv+0x1a>
			debounce_state = 2;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e7ee      	b.n	8002b68 <_ZN4SBUS8C_buttonEv+0x24>
		  if (!button_pressed) {
 8002b8a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b8e:	d8e6      	bhi.n	8002b5e <_ZN4SBUS8C_buttonEv+0x1a>
			debounce_state = 0;
 8002b90:	7010      	strb	r0, [r2, #0]
			return true;
 8002b92:	2001      	movs	r0, #1

}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000086c 	.word	0x2000086c
 8002b9c:	2000086d 	.word	0x2000086d

08002ba0 <_ZN4SBUS8D_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[8] > 1000);

	  switch (debounce_state) {
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <_ZN4SBUS8D_buttonEv+0x54>)
	  bool button_pressed = (_channels[8] > 1000);
 8002ba2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
	  switch (debounce_state) {
 8002ba4:	7813      	ldrb	r3, [r2, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d00e      	beq.n	8002bc8 <_ZN4SBUS8D_buttonEv+0x28>
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	d019      	beq.n	8002be6 <_ZN4SBUS8D_buttonEv+0x46>
 8002bb2:	b9eb      	cbnz	r3, 8002bf0 <_ZN4SBUS8D_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 8002bb4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002bb8:	d801      	bhi.n	8002bbe <_ZN4SBUS8D_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002bba:	2000      	movs	r0, #0
 8002bbc:	4770      	bx	lr
			debounce_state = 1;
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 8002bc2:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <_ZN4SBUS8D_buttonEv+0x58>)
			debounce_state = 2;
 8002bc4:	7013      	strb	r3, [r2, #0]
 8002bc6:	e7f8      	b.n	8002bba <_ZN4SBUS8D_buttonEv+0x1a>
		  if (!button_pressed) {
 8002bc8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002bcc:	d802      	bhi.n	8002bd4 <_ZN4SBUS8D_buttonEv+0x34>
			debounce_state = 0;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	7010      	strb	r0, [r2, #0]
 8002bd2:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002bd4:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <_ZN4SBUS8D_buttonEv+0x58>)
 8002bd6:	780b      	ldrb	r3, [r1, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b13      	cmp	r3, #19
 8002bde:	700b      	strb	r3, [r1, #0]
 8002be0:	d9eb      	bls.n	8002bba <_ZN4SBUS8D_buttonEv+0x1a>
			debounce_state = 2;
 8002be2:	2302      	movs	r3, #2
 8002be4:	e7ee      	b.n	8002bc4 <_ZN4SBUS8D_buttonEv+0x24>
		  if (!button_pressed) {
 8002be6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002bea:	d8e6      	bhi.n	8002bba <_ZN4SBUS8D_buttonEv+0x1a>
			debounce_state = 0;
 8002bec:	7010      	strb	r0, [r2, #0]
			return true;
 8002bee:	2001      	movs	r0, #1

}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000086e 	.word	0x2000086e
 8002bf8:	2000086f 	.word	0x2000086f

08002bfc <_ZN4SBUS11home_buttonEv>:
      static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[9] > 1000);

	  switch (debounce_state) {
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <_ZN4SBUS11home_buttonEv+0x54>)
	  bool button_pressed = (_channels[9] > 1000);
 8002bfe:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	  switch (debounce_state) {
 8002c00:	7813      	ldrb	r3, [r2, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d00e      	beq.n	8002c24 <_ZN4SBUS11home_buttonEv+0x28>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	d019      	beq.n	8002c42 <_ZN4SBUS11home_buttonEv+0x46>
 8002c0e:	b9eb      	cbnz	r3, 8002c4c <_ZN4SBUS11home_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 8002c10:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002c14:	d801      	bhi.n	8002c1a <_ZN4SBUS11home_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002c16:	2000      	movs	r0, #0
 8002c18:	4770      	bx	lr
			debounce_state = 1;
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <_ZN4SBUS11home_buttonEv+0x58>)
			debounce_state = 2;
 8002c20:	7013      	strb	r3, [r2, #0]
 8002c22:	e7f8      	b.n	8002c16 <_ZN4SBUS11home_buttonEv+0x1a>
		  if (!button_pressed) {
 8002c24:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002c28:	d802      	bhi.n	8002c30 <_ZN4SBUS11home_buttonEv+0x34>
			debounce_state = 0;
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	7010      	strb	r0, [r2, #0]
 8002c2e:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002c30:	4908      	ldr	r1, [pc, #32]	; (8002c54 <_ZN4SBUS11home_buttonEv+0x58>)
 8002c32:	780b      	ldrb	r3, [r1, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b13      	cmp	r3, #19
 8002c3a:	700b      	strb	r3, [r1, #0]
 8002c3c:	d9eb      	bls.n	8002c16 <_ZN4SBUS11home_buttonEv+0x1a>
			debounce_state = 2;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e7ee      	b.n	8002c20 <_ZN4SBUS11home_buttonEv+0x24>
		  if (!button_pressed) {
 8002c42:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002c46:	d8e6      	bhi.n	8002c16 <_ZN4SBUS11home_buttonEv+0x1a>
			debounce_state = 0;
 8002c48:	7010      	strb	r0, [r2, #0]
			return true;
 8002c4a:	2001      	movs	r0, #1
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000864 	.word	0x20000864
 8002c54:	20000865 	.word	0x20000865

08002c58 <_ZN4SBUS15shoulder_buttonEv>:
    static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[11] > 1000);

	  switch (debounce_state) {
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <_ZN4SBUS15shoulder_buttonEv+0x54>)
	  bool button_pressed = (_channels[11] > 1000);
 8002c5a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
	  switch (debounce_state) {
 8002c5c:	7813      	ldrb	r3, [r2, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00e      	beq.n	8002c80 <_ZN4SBUS15shoulder_buttonEv+0x28>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	d019      	beq.n	8002c9e <_ZN4SBUS15shoulder_buttonEv+0x46>
 8002c6a:	b9eb      	cbnz	r3, 8002ca8 <_ZN4SBUS15shoulder_buttonEv+0x50>
		case 0:  // button released
 		  if (button_pressed) {
 8002c6c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002c70:	d801      	bhi.n	8002c76 <_ZN4SBUS15shoulder_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002c72:	2000      	movs	r0, #0
 8002c74:	4770      	bx	lr
			debounce_state = 1;
 8002c76:	2101      	movs	r1, #1
 8002c78:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 8002c7a:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <_ZN4SBUS15shoulder_buttonEv+0x58>)
			debounce_state = 2;
 8002c7c:	7013      	strb	r3, [r2, #0]
 8002c7e:	e7f8      	b.n	8002c72 <_ZN4SBUS15shoulder_buttonEv+0x1a>
		  if (!button_pressed) {
 8002c80:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002c84:	d802      	bhi.n	8002c8c <_ZN4SBUS15shoulder_buttonEv+0x34>
			debounce_state = 0;
 8002c86:	2000      	movs	r0, #0
 8002c88:	7010      	strb	r0, [r2, #0]
 8002c8a:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002c8c:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <_ZN4SBUS15shoulder_buttonEv+0x58>)
 8002c8e:	780b      	ldrb	r3, [r1, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b13      	cmp	r3, #19
 8002c96:	700b      	strb	r3, [r1, #0]
 8002c98:	d9eb      	bls.n	8002c72 <_ZN4SBUS15shoulder_buttonEv+0x1a>
			debounce_state = 2;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e7ee      	b.n	8002c7c <_ZN4SBUS15shoulder_buttonEv+0x24>
		  if (!button_pressed) {
 8002c9e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002ca2:	d8e6      	bhi.n	8002c72 <_ZN4SBUS15shoulder_buttonEv+0x1a>
			debounce_state = 0;
 8002ca4:	7010      	strb	r0, [r2, #0]
			return true;
 8002ca6:	2001      	movs	r0, #1

}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000866 	.word	0x20000866
 8002cb0:	20000867 	.word	0x20000867

08002cb4 <_ZN4SBUS20shoulder_button_longEv>:

bool SBUS::shoulder_button_long(void){


	if(_channels[11] < 500){
 8002cb4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
		return false;
	}else if(_channels[11] > 500){
		return true;
	}
}
 8002cb6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002cba:	bf34      	ite	cc
 8002cbc:	2000      	movcc	r0, #0
 8002cbe:	2001      	movcs	r0, #1
 8002cc0:	4770      	bx	lr

08002cc2 <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c){
 8002cc2:	b538      	push	{r3, r4, r5, lr}
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	6083      	str	r3, [r0, #8]
 8002ccc:	60c3      	str	r3, [r0, #12]
 8002cce:	6103      	str	r3, [r0, #16]
 8002cd0:	6143      	str	r3, [r0, #20]
 8002cd2:	2214      	movs	r2, #20
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	3018      	adds	r0, #24
 8002cd8:	f008 fdb8 	bl	800b84c <memset>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ce0:	8623      	strh	r3, [r4, #48]	; 0x30

	_i2c = i2c;
 8002ce2:	6025      	str	r5, [r4, #0]
}
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}

08002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>:
	return &hi2c2;
}



void Initializer::Error_Handler(void){
 8002ce8:	b570      	push	{r4, r5, r6, lr}

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002cea:	4e09      	ldr	r6, [pc, #36]	; (8002d10 <_ZN11Initializer13Error_HandlerEv.constprop.0+0x28>)
		HAL_Delay(50);
		printf("Initialization error handler !! \r\n");
 8002cec:	4d09      	ldr	r5, [pc, #36]	; (8002d14 <_ZN11Initializer13Error_HandlerEv.constprop.0+0x2c>)
void Initializer::Error_Handler(void){
 8002cee:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f003 fdde 	bl	80068b6 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8002cfa:	2032      	movs	r0, #50	; 0x32
 8002cfc:	f002 f88c 	bl	8004e18 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002d00:	3c01      	subs	r4, #1
		printf("Initialization error handler !! \r\n");
 8002d02:	4628      	mov	r0, r5
 8002d04:	f009 fb7a 	bl	800c3fc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002d08:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002d0c:	d1f0      	bne.n	8002cf0 <_ZN11Initializer13Error_HandlerEv.constprop.0+0x8>

	}

}
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	48000800 	.word	0x48000800
 8002d14:	0800ef50 	.word	0x0800ef50

08002d18 <_ZN11Initializer9initTIM_1Ev>:
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <_ZN11Initializer9initTIM_1Ev+0x120>)
void Initializer::initTIM_1(void){
 8002d1a:	b570      	push	{r4, r5, r6, lr}
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_1(void){
 8002d26:	b09c      	sub	sp, #112	; 0x70
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d28:	2210      	movs	r2, #16
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2e:	2500      	movs	r5, #0
void Initializer::initTIM_1(void){
 8002d30:	4604      	mov	r4, r0
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d32:	9300      	str	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d34:	2100      	movs	r1, #0
 8002d36:	eb0d 0002 	add.w	r0, sp, r2
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d3a:	9b00      	ldr	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3c:	f008 fd86 	bl	800b84c <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d40:	221c      	movs	r2, #28
 8002d42:	4629      	mov	r1, r5
 8002d44:	a808      	add	r0, sp, #32
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d46:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8002d4a:	9503      	str	r5, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4c:	f008 fd7e 	bl	800b84c <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d50:	2234      	movs	r2, #52	; 0x34
 8002d52:	4629      	mov	r1, r5
 8002d54:	a80f      	add	r0, sp, #60	; 0x3c
 8002d56:	f008 fd79 	bl	800b84c <memset>
	  htim1.Init.Prescaler = 8;
 8002d5a:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <_ZN11Initializer9initTIM_1Ev+0x124>)
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	6165      	str	r5, [r4, #20]
	  htim1.Init.Prescaler = 8;
 8002d5e:	2308      	movs	r3, #8
 8002d60:	e9c4 2303 	strd	r2, r3, [r4, #12]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d64:	f104 060c 	add.w	r6, r4, #12
	  htim1.Init.Period = 1080;
 8002d68:	f44f 6387 	mov.w	r3, #1080	; 0x438
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6c:	e9c4 3506 	strd	r3, r5, [r4, #24]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d70:	e9c4 5508 	strd	r5, r5, [r4, #32]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d74:	4630      	mov	r0, r6
 8002d76:	f005 fd3b 	bl	80087f0 <HAL_TIM_Base_Init>
 8002d7a:	b120      	cbz	r0, 8002d86 <_ZN11Initializer9initTIM_1Ev+0x6e>
	    this->Error_Handler();
 8002d7c:	f7ff ffb4 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002d80:	482f      	ldr	r0, [pc, #188]	; (8002e40 <_ZN11Initializer9initTIM_1Ev+0x128>)
 8002d82:	f009 fab5 	bl	800c2f0 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d8a:	a904      	add	r1, sp, #16
 8002d8c:	4630      	mov	r0, r6
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d8e:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d90:	f005 fe68 	bl	8008a64 <HAL_TIM_ConfigClockSource>
 8002d94:	b108      	cbz	r0, 8002d9a <_ZN11Initializer9initTIM_1Ev+0x82>
	    Error_Handler();
 8002d96:	f7ff ffa7 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f005 fd58 	bl	8008850 <HAL_TIM_PWM_Init>
 8002da0:	b120      	cbz	r0, 8002dac <_ZN11Initializer9initTIM_1Ev+0x94>
	    this->Error_Handler();
 8002da2:	f7ff ffa1 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002da6:	4826      	ldr	r0, [pc, #152]	; (8002e40 <_ZN11Initializer9initTIM_1Ev+0x128>)
 8002da8:	f009 faa2 	bl	800c2f0 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dac:	2500      	movs	r5, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dae:	a901      	add	r1, sp, #4
 8002db0:	4630      	mov	r0, r6
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002db2:	e9cd 5501 	strd	r5, r5, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db6:	9503      	str	r5, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db8:	f006 f836 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 8002dbc:	b108      	cbz	r0, 8002dc2 <_ZN11Initializer9initTIM_1Ev+0xaa>
	    this->Error_Handler();
 8002dbe:	f7ff ff93 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc2:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	a908      	add	r1, sp, #32
 8002dc8:	4630      	mov	r0, r6
	  sConfigOC.Pulse = 0;
 8002dca:	e9cd 3508 	strd	r3, r5, [sp, #32]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dce:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dd2:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dd6:	950e      	str	r5, [sp, #56]	; 0x38
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dd8:	f005 fdb8 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8002ddc:	b120      	cbz	r0, 8002de8 <_ZN11Initializer9initTIM_1Ev+0xd0>
	    this->Error_Handler();
 8002dde:	f7ff ff83 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002de2:	4817      	ldr	r0, [pc, #92]	; (8002e40 <_ZN11Initializer9initTIM_1Ev+0x128>)
 8002de4:	f009 fa84 	bl	800c2f0 <iprintf>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002de8:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002df2:	a90f      	add	r1, sp, #60	; 0x3c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002df8:	4630      	mov	r0, r6
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dfa:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	  sBreakDeadTimeConfig.DeadTime = 0;
 8002dfe:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e02:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e06:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e0a:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e0e:	9313      	str	r3, [sp, #76]	; 0x4c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e10:	f006 f85a 	bl	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e14:	b120      	cbz	r0, 8002e20 <_ZN11Initializer9initTIM_1Ev+0x108>
	    this->Error_Handler();
 8002e16:	f7ff ff67 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <_ZN11Initializer9initTIM_1Ev+0x128>)
 8002e1c:	f009 fa68 	bl	800c2f0 <iprintf>
	  HAL_TIM_MspPostInit(&htim1);
 8002e20:	4630      	mov	r0, r6
 8002e22:	f001 fd23 	bl	800486c <HAL_TIM_MspPostInit>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002e26:	2108      	movs	r1, #8
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f005 fffb 	bl	8008e24 <HAL_TIMEx_PWMN_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002e2e:	68e3      	ldr	r3, [r4, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e34:	b01c      	add	sp, #112	; 0x70
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	0800ef72 	.word	0x0800ef72

08002e44 <_ZN11Initializer9initTIM_2Ev>:
void Initializer::initTIM_2(void){
 8002e44:	b510      	push	{r4, lr}
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e46:	2210      	movs	r2, #16
void Initializer::initTIM_2(void){
 8002e48:	b088      	sub	sp, #32
 8002e4a:	4604      	mov	r4, r0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	eb0d 0002 	add.w	r0, sp, r2
 8002e52:	f008 fcfb 	bl	800b84c <memset>
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e56:	2300      	movs	r3, #0
	  htim2.Instance = TIM2;
 8002e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  htim2.Init.Prescaler = 0;
 8002e5c:	e9c4 2362 	strd	r2, r3, [r4, #392]	; 0x188
	  htim2.Init.Period = 4.294967295E9;
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e68:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6c:	e9c4 2365 	strd	r2, r3, [r4, #404]	; 0x194
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e70:	f504 74c4 	add.w	r4, r4, #392	; 0x188
 8002e74:	4620      	mov	r0, r4
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e76:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002e7a:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e7c:	f005 fcb8 	bl	80087f0 <HAL_TIM_Base_Init>
 8002e80:	b120      	cbz	r0, 8002e8c <_ZN11Initializer9initTIM_2Ev+0x48>
	    this->Error_Handler();
 8002e82:	f7ff ff31 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 8002e86:	480f      	ldr	r0, [pc, #60]	; (8002ec4 <_ZN11Initializer9initTIM_2Ev+0x80>)
 8002e88:	f009 fa32 	bl	800c2f0 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e90:	a904      	add	r1, sp, #16
 8002e92:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e94:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e96:	f005 fde5 	bl	8008a64 <HAL_TIM_ConfigClockSource>
 8002e9a:	b120      	cbz	r0, 8002ea6 <_ZN11Initializer9initTIM_2Ev+0x62>
	    this->Error_Handler();
 8002e9c:	f7ff ff24 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 8002ea0:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <_ZN11Initializer9initTIM_2Ev+0x80>)
 8002ea2:	f009 fa25 	bl	800c2f0 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea6:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ea8:	a901      	add	r1, sp, #4
 8002eaa:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eac:	9301      	str	r3, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eae:	9303      	str	r3, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eb0:	f005 ffba 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb4:	b120      	cbz	r0, 8002ec0 <_ZN11Initializer9initTIM_2Ev+0x7c>
	    this->Error_Handler();
 8002eb6:	f7ff ff17 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 8002eba:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <_ZN11Initializer9initTIM_2Ev+0x80>)
 8002ebc:	f009 fa18 	bl	800c2f0 <iprintf>
}
 8002ec0:	b008      	add	sp, #32
 8002ec2:	bd10      	pop	{r4, pc}
 8002ec4:	0800ef89 	.word	0x0800ef89

08002ec8 <_ZN11Initializer9initTIM_3Ev>:
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <_ZN11Initializer9initTIM_3Ev+0xcc>)
void Initializer::initTIM_3(void){
 8002eca:	b570      	push	{r4, r5, r6, lr}
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ece:	f042 0202 	orr.w	r2, r2, #2
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
void Initializer::initTIM_3(void){
 8002ed6:	b08c      	sub	sp, #48	; 0x30
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed8:	2500      	movs	r5, #0
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002eda:	f003 0302 	and.w	r3, r3, #2
void Initializer::initTIM_3(void){
 8002ede:	4604      	mov	r4, r0
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002ee0:	9301      	str	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee2:	221c      	movs	r2, #28
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	a805      	add	r0, sp, #20
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002ee8:	9b01      	ldr	r3, [sp, #4]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eea:	9504      	str	r5, [sp, #16]
 8002eec:	e9cd 5502 	strd	r5, r5, [sp, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef0:	f008 fcac 	bl	800b84c <memset>
	  htim3.Instance = TIM3;
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <_ZN11Initializer9initTIM_3Ev+0xd0>)
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	  htim3.Init.Prescaler = 0;
 8002efa:	e9c4 354f 	strd	r3, r5, [r4, #316]	; 0x13c
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002efe:	f504 769e 	add.w	r6, r4, #316	; 0x13c
	  htim3.Init.Period = 1000;
 8002f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	e9c4 3552 	strd	r3, r5, [r4, #328]	; 0x148
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f005 fc9e 	bl	8008850 <HAL_TIM_PWM_Init>
 8002f14:	b120      	cbz	r0, 8002f20 <_ZN11Initializer9initTIM_3Ev+0x58>
	    this->Error_Handler();
 8002f16:	f7ff fee7 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 8002f1a:	4820      	ldr	r0, [pc, #128]	; (8002f9c <_ZN11Initializer9initTIM_3Ev+0xd4>)
 8002f1c:	f009 f9e8 	bl	800c2f0 <iprintf>
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f20:	a902      	add	r1, sp, #8
 8002f22:	4630      	mov	r0, r6
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f24:	9502      	str	r5, [sp, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	9504      	str	r5, [sp, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f28:	f005 ff7e 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2c:	b120      	cbz	r0, 8002f38 <_ZN11Initializer9initTIM_3Ev+0x70>
	    this->Error_Handler();
 8002f2e:	f7ff fedb 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 8002f32:	481a      	ldr	r0, [pc, #104]	; (8002f9c <_ZN11Initializer9initTIM_3Ev+0xd4>)
 8002f34:	f009 f9dc 	bl	800c2f0 <iprintf>
	  sConfigOC.Pulse = 0;
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f3c:	a905      	add	r1, sp, #20
 8002f3e:	4630      	mov	r0, r6
	  sConfigOC.Pulse = 0;
 8002f40:	e9cd 3205 	strd	r3, r2, [sp, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f44:	9207      	str	r2, [sp, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f46:	9209      	str	r2, [sp, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f48:	f005 fd00 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8002f4c:	b120      	cbz	r0, 8002f58 <_ZN11Initializer9initTIM_3Ev+0x90>
	    this->Error_Handler();
 8002f4e:	f7ff fecb 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 8002f52:	4812      	ldr	r0, [pc, #72]	; (8002f9c <_ZN11Initializer9initTIM_3Ev+0xd4>)
 8002f54:	f009 f9cc 	bl	800c2f0 <iprintf>
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f58:	2204      	movs	r2, #4
 8002f5a:	a905      	add	r1, sp, #20
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f005 fcf5 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8002f62:	b120      	cbz	r0, 8002f6e <_ZN11Initializer9initTIM_3Ev+0xa6>
	    this->Error_Handler();
 8002f64:	f7ff fec0 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <_ZN11Initializer9initTIM_3Ev+0xd4>)
 8002f6a:	f009 f9c1 	bl	800c2f0 <iprintf>
	  HAL_TIM_MspPostInit(&htim3);
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f001 fc7c 	bl	800486c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f74:	2100      	movs	r1, #0
 8002f76:	4630      	mov	r0, r6
 8002f78:	f005 fee2 	bl	8008d40 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f005 fede 	bl	8008d40 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002f84:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f8e:	b00c      	add	sp, #48	; 0x30
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	0800efa0 	.word	0x0800efa0

08002fa0 <_ZN11Initializer9initTIM_4Ev>:
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <_ZN11Initializer9initTIM_4Ev+0x100>)
void Initializer::initTIM_4(void){
 8002fa2:	b530      	push	{r4, r5, lr}
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
void Initializer::initTIM_4(void){
 8002fae:	b091      	sub	sp, #68	; 0x44
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002fb0:	f003 0304 	and.w	r3, r3, #4
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	2500      	movs	r5, #0
void Initializer::initTIM_4(void){
 8002fb6:	4604      	mov	r4, r0
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002fb8:	9301      	str	r3, [sp, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	2210      	movs	r2, #16
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	a805      	add	r0, sp, #20
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002fc0:	9b01      	ldr	r3, [sp, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f008 fc43 	bl	800b84c <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	221c      	movs	r2, #28
 8002fca:	a809      	add	r0, sp, #36	; 0x24
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8002fd0:	9504      	str	r5, [sp, #16]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fd2:	f008 fc3b 	bl	800b84c <memset>
	  htim4.Init.Prescaler = 2;
 8002fd6:	4933      	ldr	r1, [pc, #204]	; (80030a4 <_ZN11Initializer9initTIM_4Ev+0x104>)
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd8:	6625      	str	r5, [r4, #96]	; 0x60
	  htim4.Init.Prescaler = 2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
	  htim4.Init.Period = 1000;
 8002fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe4:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe8:	6725      	str	r5, [r4, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fea:	f104 0558 	add.w	r5, r4, #88	; 0x58
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f005 fbfe 	bl	80087f0 <HAL_TIM_Base_Init>
 8002ff4:	b120      	cbz	r0, 8003000 <_ZN11Initializer9initTIM_4Ev+0x60>
	    this->Error_Handler();
 8002ff6:	f7ff fe77 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8002ffa:	482b      	ldr	r0, [pc, #172]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 8002ffc:	f009 f978 	bl	800c2f0 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003004:	a905      	add	r1, sp, #20
 8003006:	4628      	mov	r0, r5
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003008:	9305      	str	r3, [sp, #20]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800300a:	f005 fd2b 	bl	8008a64 <HAL_TIM_ConfigClockSource>
 800300e:	b120      	cbz	r0, 800301a <_ZN11Initializer9initTIM_4Ev+0x7a>
	    this->Error_Handler();
 8003010:	f7ff fe6a 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8003014:	4824      	ldr	r0, [pc, #144]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 8003016:	f009 f96b 	bl	800c2f0 <iprintf>
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800301a:	4628      	mov	r0, r5
 800301c:	f005 fc18 	bl	8008850 <HAL_TIM_PWM_Init>
 8003020:	b120      	cbz	r0, 800302c <_ZN11Initializer9initTIM_4Ev+0x8c>
	    this->Error_Handler();
 8003022:	f7ff fe61 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8003026:	4820      	ldr	r0, [pc, #128]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 8003028:	f009 f962 	bl	800c2f0 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302c:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800302e:	a902      	add	r1, sp, #8
 8003030:	4628      	mov	r0, r5
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003032:	9302      	str	r3, [sp, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	9304      	str	r3, [sp, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003036:	f005 fef7 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	b120      	cbz	r0, 8003046 <_ZN11Initializer9initTIM_4Ev+0xa6>
	    this->Error_Handler();
 800303c:	f7ff fe54 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8003040:	4819      	ldr	r0, [pc, #100]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 8003042:	f009 f955 	bl	800c2f0 <iprintf>
	  sConfigOC.Pulse = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	2260      	movs	r2, #96	; 0x60
 800304a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304e:	a909      	add	r1, sp, #36	; 0x24
 8003050:	2204      	movs	r2, #4
 8003052:	4628      	mov	r0, r5
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003054:	930b      	str	r3, [sp, #44]	; 0x2c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003056:	930d      	str	r3, [sp, #52]	; 0x34
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003058:	f005 fc78 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 800305c:	b120      	cbz	r0, 8003068 <_ZN11Initializer9initTIM_4Ev+0xc8>
	    this->Error_Handler();
 800305e:	f7ff fe43 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8003062:	4811      	ldr	r0, [pc, #68]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 8003064:	f009 f944 	bl	800c2f0 <iprintf>
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003068:	2208      	movs	r2, #8
 800306a:	a909      	add	r1, sp, #36	; 0x24
 800306c:	4628      	mov	r0, r5
 800306e:	f005 fc6d 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8003072:	b120      	cbz	r0, 800307e <_ZN11Initializer9initTIM_4Ev+0xde>
	    this->Error_Handler();
 8003074:	f7ff fe38 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <_ZN11Initializer9initTIM_4Ev+0x108>)
 800307a:	f009 f939 	bl	800c2f0 <iprintf>
	  HAL_TIM_MspPostInit(&htim4);
 800307e:	4628      	mov	r0, r5
 8003080:	f001 fbf4 	bl	800486c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003084:	2108      	movs	r1, #8
 8003086:	4628      	mov	r0, r5
 8003088:	f005 fe5a 	bl	8008d40 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800308c:	2104      	movs	r1, #4
 800308e:	4628      	mov	r0, r5
 8003090:	f005 fe56 	bl	8008d40 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8003094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003096:	2200      	movs	r2, #0
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800309c:	b011      	add	sp, #68	; 0x44
 800309e:	bd30      	pop	{r4, r5, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40000800 	.word	0x40000800
 80030a8:	0800efb7 	.word	0x0800efb7

080030ac <_ZN11Initializer9initTIM_8Ev>:
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <_ZN11Initializer9initTIM_8Ev+0x128>)
void Initializer::initTIM_8(void){
 80030ae:	b570      	push	{r4, r5, r6, lr}
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 80030b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_8(void){
 80030ba:	b09c      	sub	sp, #112	; 0x70
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030bc:	2210      	movs	r2, #16
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 80030be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c2:	2500      	movs	r5, #0
void Initializer::initTIM_8(void){
 80030c4:	4604      	mov	r4, r0
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 80030c6:	9300      	str	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030c8:	2100      	movs	r1, #0
 80030ca:	eb0d 0002 	add.w	r0, sp, r2
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 80030ce:	9b00      	ldr	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d0:	f008 fbbc 	bl	800b84c <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d4:	4629      	mov	r1, r5
 80030d6:	221c      	movs	r2, #28
 80030d8:	a808      	add	r0, sp, #32
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030da:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80030de:	9503      	str	r5, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80030e0:	f008 fbb4 	bl	800b84c <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030e4:	2234      	movs	r2, #52	; 0x34
 80030e6:	4629      	mov	r1, r5
 80030e8:	a80f      	add	r0, sp, #60	; 0x3c
 80030ea:	f008 fbaf 	bl	800b84c <memset>
	  htim8.Init.Prescaler = 2;
 80030ee:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <_ZN11Initializer9initTIM_8Ev+0x12c>)
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
	  htim8.Init.Prescaler = 2;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e9c4 233c 	strd	r2, r3, [r4, #240]	; 0xf0
	  htim8.Init.Period = 1000;
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fe:	e9c4 353f 	strd	r3, r5, [r4, #252]	; 0xfc
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003102:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003106:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800310a:	4628      	mov	r0, r5
 800310c:	f005 fb70 	bl	80087f0 <HAL_TIM_Base_Init>
 8003110:	b108      	cbz	r0, 8003116 <_ZN11Initializer9initTIM_8Ev+0x6a>
	    Error_Handler();
 8003112:	f7ff fde9 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800311a:	a904      	add	r1, sp, #16
 800311c:	4628      	mov	r0, r5
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311e:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003120:	f005 fca0 	bl	8008a64 <HAL_TIM_ConfigClockSource>
 8003124:	b108      	cbz	r0, 800312a <_ZN11Initializer9initTIM_8Ev+0x7e>
	    Error_Handler();
 8003126:	f7ff fddf 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800312a:	4628      	mov	r0, r5
 800312c:	f005 fb90 	bl	8008850 <HAL_TIM_PWM_Init>
 8003130:	b108      	cbz	r0, 8003136 <_ZN11Initializer9initTIM_8Ev+0x8a>
	    Error_Handler();
 8003132:	f7ff fdd9 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003136:	2600      	movs	r6, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003138:	a901      	add	r1, sp, #4
 800313a:	4628      	mov	r0, r5
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800313c:	e9cd 6601 	strd	r6, r6, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003140:	9603      	str	r6, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003142:	f005 fe71 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 8003146:	b108      	cbz	r0, 800314c <_ZN11Initializer9initTIM_8Ev+0xa0>
	    Error_Handler();
 8003148:	f7ff fdce 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800314c:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800314e:	2208      	movs	r2, #8
 8003150:	a908      	add	r1, sp, #32
 8003152:	4628      	mov	r0, r5
	  sConfigOC.Pulse = 0;
 8003154:	e9cd 3608 	strd	r3, r6, [sp, #32]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003158:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800315c:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003160:	960e      	str	r6, [sp, #56]	; 0x38
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003162:	f005 fbf3 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8003166:	b108      	cbz	r0, 800316c <_ZN11Initializer9initTIM_8Ev+0xc0>
	    Error_Handler();
 8003168:	f7ff fdbe 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800316c:	220c      	movs	r2, #12
 800316e:	a908      	add	r1, sp, #32
 8003170:	4628      	mov	r0, r5
 8003172:	f005 fbeb 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8003176:	b108      	cbz	r0, 800317c <_ZN11Initializer9initTIM_8Ev+0xd0>
	    Error_Handler();
 8003178:	f7ff fdb6 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800317c:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800317e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8003182:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003186:	a90f      	add	r1, sp, #60	; 0x3c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800318c:	4628      	mov	r0, r5
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800318e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	  sBreakDeadTimeConfig.DeadTime = 0;
 8003192:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003196:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2Filter = 0;
 800319a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800319e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031a2:	9313      	str	r3, [sp, #76]	; 0x4c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031a4:	f005 fe90 	bl	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80031a8:	b108      	cbz	r0, 80031ae <_ZN11Initializer9initTIM_8Ev+0x102>
	    Error_Handler();
 80031aa:	f7ff fd9d 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  HAL_TIM_MspPostInit(&htim8);
 80031ae:	4628      	mov	r0, r5
 80031b0:	f001 fb5c 	bl	800486c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80031b4:	2108      	movs	r1, #8
 80031b6:	4628      	mov	r0, r5
 80031b8:	f005 fdc2 	bl	8008d40 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 80031bc:	210c      	movs	r1, #12
 80031be:	4628      	mov	r0, r5
 80031c0:	f005 fe30 	bl	8008e24 <HAL_TIMEx_PWMN_Start>
  	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80031c4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80031c8:	2200      	movs	r2, #0
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031ce:	b01c      	add	sp, #112	; 0x70
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40013400 	.word	0x40013400

080031dc <_ZN11Initializer10initTIM_16Ev>:
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <_ZN11Initializer10initTIM_16Ev+0xdc>)
void Initializer::initTIM_16(void){
 80031de:	b570      	push	{r4, r5, r6, lr}
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 80031e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_16(void){
 80031ea:	b096      	sub	sp, #88	; 0x58
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
void Initializer::initTIM_16(void){
 80031f0:	4605      	mov	r5, r0
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 80031f2:	9301      	str	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f4:	221c      	movs	r2, #28
 80031f6:	2100      	movs	r1, #0
 80031f8:	a802      	add	r0, sp, #8
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 80031fa:	9b01      	ldr	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80031fc:	f008 fb26 	bl	800b84c <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003200:	2234      	movs	r2, #52	; 0x34
 8003202:	2100      	movs	r1, #0
 8003204:	a809      	add	r0, sp, #36	; 0x24
 8003206:	f008 fb21 	bl	800b84c <memset>
	  htim16.Init.Prescaler = 128;
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <_ZN11Initializer10initTIM_16Ev+0xe0>)
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	e9c5 2329 	strd	r2, r3, [r5, #164]	; 0xa4
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003212:	f105 06a4 	add.w	r6, r5, #164	; 0xa4
	  htim16.Init.Period = 1000;
 8003216:	2300      	movs	r3, #0
 8003218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800321c:	e9c5 322b 	strd	r3, r2, [r5, #172]	; 0xac
	  htim16.Init.RepetitionCounter = 0;
 8003220:	e9c5 332d 	strd	r3, r3, [r5, #180]	; 0xb4
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003224:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003228:	4630      	mov	r0, r6
 800322a:	f005 fae1 	bl	80087f0 <HAL_TIM_Base_Init>
 800322e:	b120      	cbz	r0, 800323a <_ZN11Initializer10initTIM_16Ev+0x5e>
	    this->Error_Handler();
 8003230:	f7ff fd5a 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8003234:	4822      	ldr	r0, [pc, #136]	; (80032c0 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8003236:	f009 f85b 	bl	800c2f0 <iprintf>
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800323a:	4630      	mov	r0, r6
 800323c:	f005 fb08 	bl	8008850 <HAL_TIM_PWM_Init>
 8003240:	b120      	cbz	r0, 800324c <_ZN11Initializer10initTIM_16Ev+0x70>
	    this->Error_Handler();
 8003242:	f7ff fd51 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8003246:	481e      	ldr	r0, [pc, #120]	; (80032c0 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8003248:	f009 f852 	bl	800c2f0 <iprintf>
	  sConfigOC.Pulse = 0;
 800324c:	2400      	movs	r4, #0
 800324e:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003250:	4622      	mov	r2, r4
 8003252:	a902      	add	r1, sp, #8
 8003254:	4630      	mov	r0, r6
	  sConfigOC.Pulse = 0;
 8003256:	e9cd 3402 	strd	r3, r4, [sp, #8]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800325a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800325e:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003262:	9408      	str	r4, [sp, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003264:	f005 fb72 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8003268:	b120      	cbz	r0, 8003274 <_ZN11Initializer10initTIM_16Ev+0x98>
	   this->Error_Handler();
 800326a:	f7ff fd3d 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 800326e:	4814      	ldr	r0, [pc, #80]	; (80032c0 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8003270:	f009 f83e 	bl	800c2f0 <iprintf>
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003278:	a909      	add	r1, sp, #36	; 0x24
 800327a:	4630      	mov	r0, r6
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800327c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	  sBreakDeadTimeConfig.DeadTime = 0;
 8003280:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8003284:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003288:	940d      	str	r4, [sp, #52]	; 0x34
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800328a:	9415      	str	r4, [sp, #84]	; 0x54
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800328c:	f005 fe1c 	bl	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003290:	b120      	cbz	r0, 800329c <_ZN11Initializer10initTIM_16Ev+0xc0>
	    this->Error_Handler();
 8003292:	f7ff fd29 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8003296:	480a      	ldr	r0, [pc, #40]	; (80032c0 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8003298:	f009 f82a 	bl	800c2f0 <iprintf>
	  HAL_TIM_MspPostInit(&htim16);
 800329c:	4630      	mov	r0, r6
 800329e:	f001 fae5 	bl	800486c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80032a2:	2100      	movs	r1, #0
 80032a4:	4630      	mov	r0, r6
 80032a6:	f005 fd4b 	bl	8008d40 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 80032aa:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80032ae:	2200      	movs	r2, #0
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032b2:	b016      	add	sp, #88	; 0x58
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	0800efce 	.word	0x0800efce

080032c4 <_ZN11Initializer10initTIM_20Ev>:
void Initializer::initTIM_20(void){
 80032c4:	b500      	push	{lr}
 80032c6:	b09b      	sub	sp, #108	; 0x6c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c8:	2210      	movs	r2, #16
 80032ca:	2100      	movs	r1, #0
 80032cc:	a803      	add	r0, sp, #12
 80032ce:	f008 fabd 	bl	800b84c <memset>
	  htim20.Instance = TIM20;
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <_ZN11Initializer10initTIM_20Ev+0x78>)
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d4:	2300      	movs	r3, #0
	  htim20.Init.Prescaler = 0;
 80032d6:	e9cd 2307 	strd	r2, r3, [sp, #28]
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80032da:	a807      	add	r0, sp, #28
	  htim20.Init.Period = 65535;
 80032dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e0:	e9cd 3300 	strd	r3, r3, [sp]
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ec:	9302      	str	r3, [sp, #8]
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80032f0:	f005 fa7e 	bl	80087f0 <HAL_TIM_Base_Init>
 80032f4:	b120      	cbz	r0, 8003300 <_ZN11Initializer10initTIM_20Ev+0x3c>
	    this->Error_Handler();
 80032f6:	f7ff fcf7 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 80032fa:	4811      	ldr	r0, [pc, #68]	; (8003340 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 80032fc:	f008 fff8 	bl	800c2f0 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003304:	a903      	add	r1, sp, #12
 8003306:	a807      	add	r0, sp, #28
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003308:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800330a:	f005 fbab 	bl	8008a64 <HAL_TIM_ConfigClockSource>
 800330e:	b120      	cbz	r0, 800331a <_ZN11Initializer10initTIM_20Ev+0x56>
	    this->Error_Handler();
 8003310:	f7ff fcea 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8003314:	480a      	ldr	r0, [pc, #40]	; (8003340 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 8003316:	f008 ffeb 	bl	800c2f0 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331a:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800331c:	4669      	mov	r1, sp
 800331e:	a807      	add	r0, sp, #28
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003320:	e9cd 3300 	strd	r3, r3, [sp]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003324:	9302      	str	r3, [sp, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003326:	f005 fd7f 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	b120      	cbz	r0, 8003336 <_ZN11Initializer10initTIM_20Ev+0x72>
	    this->Error_Handler();
 800332c:	f7ff fcdc 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8003330:	4803      	ldr	r0, [pc, #12]	; (8003340 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 8003332:	f008 ffdd 	bl	800c2f0 <iprintf>
}
 8003336:	b01b      	add	sp, #108	; 0x6c
 8003338:	f85d fb04 	ldr.w	pc, [sp], #4
 800333c:	40015000 	.word	0x40015000
 8003340:	0800efce 	.word	0x0800efce

08003344 <_ZN11Initializer11initUSART_1Ev>:
void Initializer::initUSART_1(void){
 8003344:	b510      	push	{r4, lr}
	  _huart1->Init.BaudRate = 57600;
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <_ZN11Initializer11initUSART_1Ev+0x78>)
void Initializer::initUSART_1(void){
 8003348:	4604      	mov	r4, r0
	  _huart1->Instance = USART1;
 800334a:	6800      	ldr	r0, [r0, #0]
	  _huart1->Init.BaudRate = 57600;
 800334c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003350:	e9c0 2300 	strd	r2, r3, [r0]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 8003354:	2300      	movs	r3, #0
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8003356:	220c      	movs	r2, #12
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8003358:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335c:	e9c0 2305 	strd	r2, r3, [r0, #20]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003360:	e9c0 3307 	strd	r3, r3, [r0, #28]
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003364:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	  _huart1->Init.Parity = UART_PARITY_NONE;
 8003368:	6103      	str	r3, [r0, #16]
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 800336a:	f006 fb20 	bl	80099ae <HAL_UART_Init>
 800336e:	b120      	cbz	r0, 800337a <_ZN11Initializer11initUSART_1Ev+0x36>
	    this->Error_Handler();
 8003370:	f7ff fcba 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 8003374:	4812      	ldr	r0, [pc, #72]	; (80033c0 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 8003376:	f008 ffbb 	bl	800c2f0 <iprintf>
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	2100      	movs	r1, #0
 800337e:	f006 fbdb 	bl	8009b38 <HAL_UARTEx_SetTxFifoThreshold>
 8003382:	b120      	cbz	r0, 800338e <_ZN11Initializer11initUSART_1Ev+0x4a>
	    this->Error_Handler();
 8003384:	f7ff fcb0 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 800338a:	f008 ffb1 	bl	800c2f0 <iprintf>
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	2100      	movs	r1, #0
 8003392:	f006 fbf5 	bl	8009b80 <HAL_UARTEx_SetRxFifoThreshold>
 8003396:	b120      	cbz	r0, 80033a2 <_ZN11Initializer11initUSART_1Ev+0x5e>
	    this->Error_Handler();
 8003398:	f7ff fca6 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 800339c:	4808      	ldr	r0, [pc, #32]	; (80033c0 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 800339e:	f008 ffa7 	bl	800c2f0 <iprintf>
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	f006 fbad 	bl	8009b02 <HAL_UARTEx_DisableFifoMode>
 80033a8:	b130      	cbz	r0, 80033b8 <_ZN11Initializer11initUSART_1Ev+0x74>
	    this->Error_Handler();
 80033aa:	f7ff fc9d 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
}
 80033ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    printf("problem with UART1");
 80033b2:	4803      	ldr	r0, [pc, #12]	; (80033c0 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 80033b4:	f008 bf9c 	b.w	800c2f0 <iprintf>
}
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	bf00      	nop
 80033bc:	40013800 	.word	0x40013800
 80033c0:	0800efe6 	.word	0x0800efe6

080033c4 <_ZN11Initializer11initUSART_2Ev>:
void Initializer::initUSART_2(void){
 80033c4:	b510      	push	{r4, lr}
	   _huart2->Init.BaudRate = 100000;
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <_ZN11Initializer11initUSART_2Ev+0x84>)
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <_ZN11Initializer11initUSART_2Ev+0x88>)
void Initializer::initUSART_2(void){
 80033ca:	4604      	mov	r4, r0
	   _huart2->Instance = USART2;
 80033cc:	6840      	ldr	r0, [r0, #4]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 80033ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	   _huart2->Init.BaudRate = 100000;
 80033d2:	e9c0 2300 	strd	r2, r3, [r0]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e9c0 1302 	strd	r1, r3, [r0, #8]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 80033dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033e0:	e9c0 3308 	strd	r3, r3, [r0, #32]
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80033e4:	2302      	movs	r3, #2
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 80033e6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80033ea:	220c      	movs	r2, #12
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80033ec:	6283      	str	r3, [r0, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80033ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 80033f2:	e9c0 c204 	strd	ip, r2, [r0, #16]
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80033f6:	6303      	str	r3, [r0, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 80033f8:	f006 fad9 	bl	80099ae <HAL_UART_Init>
 80033fc:	b120      	cbz	r0, 8003408 <_ZN11Initializer11initUSART_2Ev+0x44>
	     Error_Handler();
 80033fe:	f7ff fc73 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 8003402:	4813      	ldr	r0, [pc, #76]	; (8003450 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8003404:	f008 ff74 	bl	800c2f0 <iprintf>
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003408:	6860      	ldr	r0, [r4, #4]
 800340a:	2100      	movs	r1, #0
 800340c:	f006 fb94 	bl	8009b38 <HAL_UARTEx_SetTxFifoThreshold>
 8003410:	b120      	cbz	r0, 800341c <_ZN11Initializer11initUSART_2Ev+0x58>
	     Error_Handler();
 8003412:	f7ff fc69 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 8003416:	480e      	ldr	r0, [pc, #56]	; (8003450 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8003418:	f008 ff6a 	bl	800c2f0 <iprintf>
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800341c:	6860      	ldr	r0, [r4, #4]
 800341e:	2100      	movs	r1, #0
 8003420:	f006 fbae 	bl	8009b80 <HAL_UARTEx_SetRxFifoThreshold>
 8003424:	b120      	cbz	r0, 8003430 <_ZN11Initializer11initUSART_2Ev+0x6c>
	     Error_Handler();
 8003426:	f7ff fc5f 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 800342a:	4809      	ldr	r0, [pc, #36]	; (8003450 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 800342c:	f008 ff60 	bl	800c2f0 <iprintf>
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8003430:	6860      	ldr	r0, [r4, #4]
 8003432:	f006 fb66 	bl	8009b02 <HAL_UARTEx_DisableFifoMode>
 8003436:	b130      	cbz	r0, 8003446 <_ZN11Initializer11initUSART_2Ev+0x82>
	     Error_Handler();
 8003438:	f7ff fc56 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
}
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		    printf("problem with UART2");
 8003440:	4803      	ldr	r0, [pc, #12]	; (8003450 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8003442:	f008 bf55 	b.w	800c2f0 <iprintf>
}
 8003446:	bd10      	pop	{r4, pc}
 8003448:	40004400 	.word	0x40004400
 800344c:	000186a0 	.word	0x000186a0
 8003450:	0800eff9 	.word	0x0800eff9

08003454 <_ZN11Initializer8initI2C2Ev>:
void Initializer::initI2C2(void){
 8003454:	b513      	push	{r0, r1, r4, lr}
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <_ZN11Initializer8initI2C2Ev+0x70>)
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <_ZN11Initializer8initI2C2Ev+0x74>)
void Initializer::initI2C2(void){
 800345a:	4604      	mov	r4, r0
	  hi2c_ptr->Instance = I2C2;
 800345c:	6880      	ldr	r0, [r0, #8]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 800345e:	e9c0 2300 	strd	r2, r3, [r0]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003462:	2300      	movs	r3, #0
 8003464:	2201      	movs	r2, #1
 8003466:	e9c0 3202 	strd	r3, r2, [r0, #8]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 800346a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800346e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003472:	6203      	str	r3, [r0, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 8003474:	f003 fa28 	bl	80068c8 <HAL_I2C_Init>
 8003478:	b120      	cbz	r0, 8003484 <_ZN11Initializer8initI2C2Ev+0x30>
	    Error_Handler();
 800347a:	f7ff fc35 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 800347e:	4813      	ldr	r0, [pc, #76]	; (80034cc <_ZN11Initializer8initI2C2Ev+0x78>)
 8003480:	f008 ff36 	bl	800c2f0 <iprintf>
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003484:	68a0      	ldr	r0, [r4, #8]
 8003486:	2100      	movs	r1, #0
 8003488:	f003 fa76 	bl	8006978 <HAL_I2CEx_ConfigAnalogFilter>
 800348c:	b120      	cbz	r0, 8003498 <_ZN11Initializer8initI2C2Ev+0x44>
	    this->Error_Handler();
 800348e:	f7ff fc2b 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 8003492:	480e      	ldr	r0, [pc, #56]	; (80034cc <_ZN11Initializer8initI2C2Ev+0x78>)
 8003494:	f008 ff2c 	bl	800c2f0 <iprintf>
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	2100      	movs	r1, #0
 800349c:	f003 fa92 	bl	80069c4 <HAL_I2CEx_ConfigDigitalFilter>
 80034a0:	b120      	cbz	r0, 80034ac <_ZN11Initializer8initI2C2Ev+0x58>
	    this->Error_Handler();
 80034a2:	f7ff fc21 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 80034a6:	4809      	ldr	r0, [pc, #36]	; (80034cc <_ZN11Initializer8initI2C2Ev+0x78>)
 80034a8:	f008 ff22 	bl	800c2f0 <iprintf>
	  __HAL_RCC_I2C2_CLK_ENABLE();
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <_ZN11Initializer8initI2C2Ev+0x7c>)
 80034ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034b4:	659a      	str	r2, [r3, #88]	; 0x58
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	9b01      	ldr	r3, [sp, #4]
}
 80034c0:	b002      	add	sp, #8
 80034c2:	bd10      	pop	{r4, pc}
 80034c4:	40005800 	.word	0x40005800
 80034c8:	20a0c4df 	.word	0x20a0c4df
 80034cc:	0800f00c 	.word	0x0800f00c
 80034d0:	40021000 	.word	0x40021000

080034d4 <_ZN11Initializer7initDMAEv>:
void Initializer::initDMA(void){
 80034d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <_ZN11Initializer7initDMAEv+0xb0>)
 80034d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034da:	f042 0204 	orr.w	r2, r2, #4
 80034de:	649a      	str	r2, [r3, #72]	; 0x48
 80034e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034e2:	f002 0204 	and.w	r2, r2, #4
 80034e6:	9201      	str	r2, [sp, #4]
 80034e8:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	649a      	str	r2, [r3, #72]	; 0x48
 80034f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034f4:	f002 0201 	and.w	r2, r2, #1
 80034f8:	9202      	str	r2, [sp, #8]
 80034fa:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80034fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034fe:	f042 0202 	orr.w	r2, r2, #2
 8003502:	649a      	str	r2, [r3, #72]	; 0x48
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8003508:	f003 0302 	and.w	r3, r3, #2
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800350c:	4611      	mov	r1, r2
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800350e:	9303      	str	r3, [sp, #12]
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003510:	200b      	movs	r0, #11
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8003512:	9b03      	ldr	r3, [sp, #12]
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003514:	f002 fdfc 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003518:	200b      	movs	r0, #11
 800351a:	f002 fe2b 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	4611      	mov	r1, r2
 8003522:	200c      	movs	r0, #12
 8003524:	f002 fdf4 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003528:	200c      	movs	r0, #12
 800352a:	f002 fe23 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	4611      	mov	r1, r2
 8003532:	200d      	movs	r0, #13
 8003534:	f002 fdec 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003538:	200d      	movs	r0, #13
 800353a:	f002 fe1b 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	4611      	mov	r1, r2
 8003542:	200e      	movs	r0, #14
 8003544:	f002 fde4 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003548:	200e      	movs	r0, #14
 800354a:	f002 fe13 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	4611      	mov	r1, r2
 8003552:	200f      	movs	r0, #15
 8003554:	f002 fddc 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003558:	200f      	movs	r0, #15
 800355a:	f002 fe0b 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	4611      	mov	r1, r2
 8003562:	2010      	movs	r0, #16
 8003564:	f002 fdd4 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003568:	2010      	movs	r0, #16
 800356a:	f002 fe03 	bl	8006174 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	4611      	mov	r1, r2
 8003572:	2038      	movs	r0, #56	; 0x38
 8003574:	f002 fdcc 	bl	8006110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003578:	2038      	movs	r0, #56	; 0x38
}
 800357a:	b005      	add	sp, #20
 800357c:	f85d eb04 	ldr.w	lr, [sp], #4
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003580:	f002 bdf8 	b.w	8006174 <HAL_NVIC_EnableIRQ>
 8003584:	40021000 	.word	0x40021000

08003588 <_ZN11Initializer12init_ConfigsEv>:
void Initializer::init_Configs(void){
 8003588:	b510      	push	{r4, lr}
 800358a:	4604      	mov	r4, r0
	this->initDMA();
 800358c:	f7ff ffa2 	bl	80034d4 <_ZN11Initializer7initDMAEv>
	this->initTIM_1();
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fbc1 	bl	8002d18 <_ZN11Initializer9initTIM_1Ev>
	this->initTIM_2();
 8003596:	4620      	mov	r0, r4
 8003598:	f7ff fc54 	bl	8002e44 <_ZN11Initializer9initTIM_2Ev>
	this->initTIM_3();
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff fc93 	bl	8002ec8 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7ff fcfc 	bl	8002fa0 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7ff fd7f 	bl	80030ac <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 80035ae:	4620      	mov	r0, r4
 80035b0:	f7ff fe14 	bl	80031dc <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff fe85 	bl	80032c4 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff fec2 	bl	8003344 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff feff 	bl	80033c4 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 80035c6:	4620      	mov	r0, r4
 80035c8:	f7ff ff44 	bl	8003454 <_ZN11Initializer8initI2C2Ev>
}
 80035cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MX_USB_Device_Init();
 80035d0:	f007 be2e 	b.w	800b230 <MX_USB_Device_Init>

080035d4 <_ZN11Initializer8initGPIOEv>:
void Initializer::initGPIO(void){
 80035d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	2214      	movs	r2, #20
void Initializer::initGPIO(void){
 80035da:	b08a      	sub	sp, #40	; 0x28
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	eb0d 0002 	add.w	r0, sp, r2
 80035e0:	2100      	movs	r1, #0
 80035e2:	f008 f933 	bl	800b84c <memset>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <_ZN11Initializer8initGPIOEv+0xfc>)
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 80035e8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80036dc <_ZN11Initializer8initGPIOEv+0x108>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 80035ee:	4f39      	ldr	r7, [pc, #228]	; (80036d4 <_ZN11Initializer8initGPIOEv+0x100>)
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 80035f0:	4e39      	ldr	r6, [pc, #228]	; (80036d8 <_ZN11Initializer8initGPIOEv+0x104>)
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	f042 0204 	orr.w	r2, r2, #4
 80035f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80035f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fa:	f002 0204 	and.w	r2, r2, #4
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003604:	f042 0220 	orr.w	r2, r2, #32
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
 800360a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360c:	f002 0220 	and.w	r2, r2, #32
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003614:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c
 800361c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003622:	9202      	str	r2, [sp, #8]
 8003624:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	64da      	str	r2, [r3, #76]	; 0x4c
 800362e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003630:	f002 0201 	and.w	r2, r2, #1
 8003634:	9203      	str	r2, [sp, #12]
 8003636:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800363a:	f042 0202 	orr.w	r2, r2, #2
 800363e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8003648:	4640      	mov	r0, r8
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003650:	9b04      	ldr	r3, [sp, #16]
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8003652:	f003 f92b 	bl	80068ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8003656:	4638      	mov	r0, r7
 8003658:	2200      	movs	r2, #0
 800365a:	2102      	movs	r1, #2
 800365c:	f003 f926 	bl	80068ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 8003660:	4630      	mov	r0, r6
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003668:	f003 f920 	bl	80068ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800366c:	2200      	movs	r2, #0
 800366e:	2110      	movs	r1, #16
 8003670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003674:	f003 f91a 	bl	80068ac <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	2501      	movs	r5, #1
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2400      	movs	r4, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	a905      	add	r1, sp, #20
 8003682:	4640      	mov	r0, r8
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003684:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368c:	f003 f83c 	bl	8006708 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 8003690:	2302      	movs	r3, #2
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8003692:	a905      	add	r1, sp, #20
 8003694:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003696:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 800369e:	f003 f833 	bl	8006708 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 80036a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80036a6:	a905      	add	r1, sp, #20
 80036a8:	4630      	mov	r0, r6
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036aa:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f003 f829 	bl	8006708 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036b6:	2310      	movs	r3, #16
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b8:	a905      	add	r1, sp, #20
 80036ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036be:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f003 f81f 	bl	8006708 <HAL_GPIO_Init>
}
 80036ca:	b00a      	add	sp, #40	; 0x28
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	48001400 	.word	0x48001400
 80036d8:	48001800 	.word	0x48001800
 80036dc:	48000800 	.word	0x48000800

080036e0 <_ZN11Initializer9initClockEv>:
void Initializer::initClock(){
 80036e0:	b500      	push	{lr}
 80036e2:	b095      	sub	sp, #84	; 0x54
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036e4:	2238      	movs	r2, #56	; 0x38
 80036e6:	2100      	movs	r1, #0
 80036e8:	a806      	add	r0, sp, #24
 80036ea:	f008 f8af 	bl	800b84c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036ee:	2214      	movs	r2, #20
 80036f0:	2100      	movs	r1, #0
 80036f2:	a801      	add	r0, sp, #4
 80036f4:	f008 f8aa 	bl	800b84c <memset>
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036fc:	f004 f972 	bl	80079e4 <HAL_PWREx_ControlVoltageScaling>
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003700:	2322      	movs	r3, #34	; 0x22
 8003702:	9306      	str	r3, [sp, #24]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003708:	2340      	movs	r3, #64	; 0x40
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800370a:	2201      	movs	r2, #1
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800370c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003710:	2302      	movs	r3, #2
 8003712:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003716:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800371a:	a806      	add	r0, sp, #24
	  RCC_OscInitStruct.PLL.PLLN = 16;
 800371c:	2210      	movs	r2, #16
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800371e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003722:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003726:	f004 f9b7 	bl	8007a98 <HAL_RCC_OscConfig>
 800372a:	b120      	cbz	r0, 8003736 <_ZN11Initializer9initClockEv+0x56>
	    this->Error_Handler();
 800372c:	f7ff fadc 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with initClock function");
 8003730:	480b      	ldr	r0, [pc, #44]	; (8003760 <_ZN11Initializer9initClockEv+0x80>)
 8003732:	f008 fddd 	bl	800c2f0 <iprintf>
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003736:	230f      	movs	r3, #15
 8003738:	2103      	movs	r1, #3
 800373a:	e9cd 3101 	strd	r3, r1, [sp, #4]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800373e:	a801      	add	r0, sp, #4
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003740:	2300      	movs	r3, #0
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003742:	e9cd 3303 	strd	r3, r3, [sp, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003746:	9305      	str	r3, [sp, #20]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003748:	f004 fbec 	bl	8007f24 <HAL_RCC_ClockConfig>
 800374c:	b120      	cbz	r0, 8003758 <_ZN11Initializer9initClockEv+0x78>
	    this->Error_Handler();
 800374e:	f7ff facb 	bl	8002ce8 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with initClock function");
 8003752:	4803      	ldr	r0, [pc, #12]	; (8003760 <_ZN11Initializer9initClockEv+0x80>)
 8003754:	f008 fdcc 	bl	800c2f0 <iprintf>
}
 8003758:	b015      	add	sp, #84	; 0x54
 800375a:	f85d fb04 	ldr.w	pc, [sp], #4
 800375e:	bf00      	nop
 8003760:	0800f01e 	.word	0x0800f01e

08003764 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 8003764:	b510      	push	{r4, lr}
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x18>)
 8003768:	4604      	mov	r4, r0
	this->_huart2 = huart2;
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->initClock();
 800376e:	f7ff ffb7 	bl	80036e0 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ff2e 	bl	80035d4 <_ZN11Initializer8initGPIOEv>
}
 8003778:	4620      	mov	r0, r4
 800377a:	bd10      	pop	{r4, pc}
 800377c:	20000ab8 	.word	0x20000ab8

08003780 <_ZN11Initializer13get_LED_TimerEv>:
}
 8003780:	30a4      	adds	r0, #164	; 0xa4
 8003782:	4770      	bx	lr

08003784 <_ZN11Initializer18get_selector_TimerEv>:
}
 8003784:	30f0      	adds	r0, #240	; 0xf0
 8003786:	4770      	bx	lr

08003788 <_ZN11Initializer19get_pushMotor_TimerEv>:
}
 8003788:	3058      	adds	r0, #88	; 0x58
 800378a:	4770      	bx	lr

0800378c <_ZN11Initializer20get_fluidMotor_TimerEv>:
}
 800378c:	f500 709e 	add.w	r0, r0, #316	; 0x13c
 8003790:	4770      	bx	lr

08003792 <_ZN11Initializer22get_cleanerMotor_TimerEv>:
}
 8003792:	300c      	adds	r0, #12
 8003794:	4770      	bx	lr
	...

08003798 <_ZN10Components13Error_HandlerEv.constprop.0>:
#include "components.h"




void Components::Error_Handler(void){
 8003798:	b570      	push	{r4, r5, r6, lr}

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 800379a:	4e09      	ldr	r6, [pc, #36]	; (80037c0 <_ZN10Components13Error_HandlerEv.constprop.0+0x28>)
		HAL_Delay(200);
		printf("Components error handler !! \r\n");
 800379c:	4d09      	ldr	r5, [pc, #36]	; (80037c4 <_ZN10Components13Error_HandlerEv.constprop.0+0x2c>)
void Components::Error_Handler(void){
 800379e:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80037a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037a4:	4630      	mov	r0, r6
 80037a6:	f003 f886 	bl	80068b6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80037aa:	20c8      	movs	r0, #200	; 0xc8
 80037ac:	f001 fb34 	bl	8004e18 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80037b0:	3c01      	subs	r4, #1
		printf("Components error handler !! \r\n");
 80037b2:	4628      	mov	r0, r5
 80037b4:	f008 fe22 	bl	800c3fc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80037b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80037bc:	d1f0      	bne.n	80037a0 <_ZN10Components13Error_HandlerEv.constprop.0+0x8>
	}


}
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	48000800 	.word	0x48000800
 80037c4:	0800f03e 	.word	0x0800f03e

080037c8 <_ZN10Components10init_ADC_1Ev>:


}


void Components::init_ADC_1(void){
 80037c8:	b530      	push	{r4, r5, lr}
 80037ca:	4605      	mov	r5, r0
 80037cc:	b085      	sub	sp, #20

		  ADC_MultiModeTypeDef multimode = {0};
		  ADC_ChannelConfTypeDef sConfig = {0};

		  hadc1_ptr->Instance = ADC1;
 80037ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
		  ADC_MultiModeTypeDef multimode = {0};
 80037d0:	2400      	movs	r4, #0
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80037d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
		  ADC_MultiModeTypeDef multimode = {0};
 80037da:	9403      	str	r4, [sp, #12]
 80037dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037e0:	e9c0 2300 	strd	r2, r3, [r0]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
		  hadc1_ptr->Init.GainCompensation = 0;
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_DISABLE;
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037e4:	2304      	movs	r3, #4
 80037e6:	6183      	str	r3, [r0, #24]
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80037e8:	211c      	movs	r1, #28
		  hadc1_ptr->Init.NbrOfConversion = 1;
 80037ea:	2301      	movs	r3, #1
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80037ec:	f44f 7280 	mov.w	r2, #256	; 0x100
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037f0:	e9c0 4402 	strd	r4, r4, [r0, #8]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037f4:	e9c0 4404 	strd	r4, r4, [r0, #16]
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037f8:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80037fc:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003800:	e9c0 4313 	strd	r4, r3, [r0, #76]	; 0x4c
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8003804:	8384      	strh	r4, [r0, #28]
		  hadc1_ptr->Init.NbrOfConversion = 1;
 8003806:	6203      	str	r3, [r0, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8003808:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 800380c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003810:	63c4      	str	r4, [r0, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8003812:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
//		  hadc1_ptr->Init.OversamplingMode = ENABLE;
//		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
//		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
//		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
//		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8003816:	f001 fb29 	bl	8004e6c <HAL_ADC_Init>
 800381a:	b120      	cbz	r0, 8003826 <_ZN10Components10init_ADC_1Ev+0x5e>
		  {
		    this->Error_Handler();
 800381c:	f7ff ffbc 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("ADC1 init failed");
 8003820:	4807      	ldr	r0, [pc, #28]	; (8003840 <_ZN10Components10init_ADC_1Ev+0x78>)
 8003822:	f008 fd65 	bl	800c2f0 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8003826:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003828:	9401      	str	r4, [sp, #4]
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 800382a:	a901      	add	r1, sp, #4
 800382c:	f002 faac 	bl	8005d88 <HAL_ADCEx_MultiModeConfigChannel>
 8003830:	b120      	cbz	r0, 800383c <_ZN10Components10init_ADC_1Ev+0x74>
		  {
		    this->Error_Handler();
 8003832:	f7ff ffb1 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8003836:	4803      	ldr	r0, [pc, #12]	; (8003844 <_ZN10Components10init_ADC_1Ev+0x7c>)
 8003838:	f008 fd5a 	bl	800c2f0 <iprintf>
//		  {
//		    this->Error_Handler();
//		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
//		  }

}
 800383c:	b005      	add	sp, #20
 800383e:	bd30      	pop	{r4, r5, pc}
 8003840:	0800f05c 	.word	0x0800f05c
 8003844:	0800f06d 	.word	0x0800f06d

08003848 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 8003848:	b510      	push	{r4, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	b088      	sub	sp, #32


	  ADC_ChannelConfTypeDef sConfig = {0};
 800384e:	2220      	movs	r2, #32
 8003850:	2100      	movs	r1, #0
 8003852:	4668      	mov	r0, sp
 8003854:	f007 fffa 	bl	800b84c <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8003858:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800385a:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003914 <_ZN10Components10init_ADC_2Ev+0xcc>
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2_ptr->Init.GainCompensation = 0;
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800385e:	2201      	movs	r2, #1
 8003860:	2108      	movs	r1, #8
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003862:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003866:	e9c0 2105 	strd	r2, r1, [r0, #20]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
	  hadc2_ptr->Init.NbrOfConversion = 2;
 800386a:	2102      	movs	r1, #2
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800386c:	e9c0 c300 	strd	ip, r3, [r0]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8003870:	6201      	str	r1, [r0, #32]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8003872:	2300      	movs	r3, #0
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003874:	f04f 0e18 	mov.w	lr, #24
 8003878:	21e0      	movs	r1, #224	; 0xe0
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800387a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800387e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003882:	e9c0 e111 	strd	lr, r1, [r0, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003886:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
	  hadc2_ptr->Init.GainCompensation = 0;
 800388a:	6103      	str	r3, [r0, #16]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 800388c:	8383      	strh	r3, [r0, #28]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 800388e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8003892:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003896:	63c3      	str	r3, [r0, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8003898:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 800389c:	f001 fae6 	bl	8004e6c <HAL_ADC_Init>
 80038a0:	b120      	cbz	r0, 80038ac <_ZN10Components10init_ADC_2Ev+0x64>
	  {
	    this->Error_Handler();
 80038a2:	f7ff ff79 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC2 init \r\n");
 80038a6:	4816      	ldr	r0, [pc, #88]	; (8003900 <_ZN10Components10init_ADC_2Ev+0xb8>)
 80038a8:	f008 fda8 	bl	800c3fc <puts>
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038ac:	4915      	ldr	r1, [pc, #84]	; (8003904 <_ZN10Components10init_ADC_2Ev+0xbc>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80038ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038b0:	2306      	movs	r3, #6
 80038b2:	e9cd 1300 	strd	r1, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038b6:	227f      	movs	r2, #127	; 0x7f
 80038b8:	2300      	movs	r3, #0
 80038ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80038be:	4669      	mov	r1, sp
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038c0:	2204      	movs	r2, #4
	  sConfig.Offset = 0;
 80038c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80038c6:	f001 fe1b 	bl	8005500 <HAL_ADC_ConfigChannel>
 80038ca:	b120      	cbz	r0, 80038d6 <_ZN10Components10init_ADC_2Ev+0x8e>
	  {
	    this->Error_Handler();
 80038cc:	f7ff ff64 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC2 channel one init \r\n");
 80038d0:	480d      	ldr	r0, [pc, #52]	; (8003908 <_ZN10Components10init_ADC_2Ev+0xc0>)
 80038d2:	f008 fd93 	bl	800c3fc <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038d6:	4a0d      	ldr	r2, [pc, #52]	; (800390c <_ZN10Components10init_ADC_2Ev+0xc4>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 80038d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038da:	230c      	movs	r3, #12
 80038dc:	e9cd 2300 	strd	r2, r3, [sp]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 80038e0:	4669      	mov	r1, sp
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038e2:	2304      	movs	r3, #4
 80038e4:	227f      	movs	r2, #127	; 0x7f
 80038e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038ea:	9304      	str	r3, [sp, #16]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 80038ec:	f001 fe08 	bl	8005500 <HAL_ADC_ConfigChannel>
 80038f0:	b120      	cbz	r0, 80038fc <_ZN10Components10init_ADC_2Ev+0xb4>

		  this->Error_Handler();
 80038f2:	f7ff ff51 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		  printf("problem with ADC2 channel two init \r\n");
 80038f6:	4806      	ldr	r0, [pc, #24]	; (8003910 <_ZN10Components10init_ADC_2Ev+0xc8>)
 80038f8:	f008 fd80 	bl	800c3fc <puts>

	  }


}
 80038fc:	b008      	add	sp, #32
 80038fe:	bd10      	pop	{r4, pc}
 8003900:	0800f09a 	.word	0x0800f09a
 8003904:	c3290000 	.word	0xc3290000
 8003908:	0800f0b3 	.word	0x0800f0b3
 800390c:	cb8c0000 	.word	0xcb8c0000
 8003910:	0800f0d8 	.word	0x0800f0d8
 8003914:	50000100 	.word	0x50000100

08003918 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8003918:	b510      	push	{r4, lr}
 800391a:	4604      	mov	r4, r0
 800391c:	b088      	sub	sp, #32

	  ADC_ChannelConfTypeDef sConfig = {0};
 800391e:	2220      	movs	r2, #32
 8003920:	2100      	movs	r1, #0
 8003922:	4668      	mov	r0, sp
 8003924:	f007 ff92 	bl	800b84c <memset>



	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 8003928:	6c20      	ldr	r0, [r4, #64]	; 0x40
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800392a:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80039e8 <_ZN10Components10init_ADC_5Ev+0xd0>
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc5_ptr->Init.GainCompensation = 0;
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800392e:	2201      	movs	r2, #1
 8003930:	2108      	movs	r1, #8
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003932:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003936:	e9c0 2105 	strd	r2, r1, [r0, #20]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
	  hadc5_ptr->Init.NbrOfConversion = 2;
 800393a:	2102      	movs	r1, #2
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800393c:	e9c0 c300 	strd	ip, r3, [r0]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 8003940:	6201      	str	r1, [r0, #32]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8003942:	2300      	movs	r3, #0
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003944:	f04f 0e18 	mov.w	lr, #24
 8003948:	21e0      	movs	r1, #224	; 0xe0
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800394a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800394e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003952:	e9c0 e111 	strd	lr, r1, [r0, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003956:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
	  hadc5_ptr->Init.GainCompensation = 0;
 800395a:	6103      	str	r3, [r0, #16]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 800395c:	8383      	strh	r3, [r0, #28]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 800395e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 8003962:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003966:	63c3      	str	r3, [r0, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 8003968:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 800396c:	f001 fa7e 	bl	8004e6c <HAL_ADC_Init>
 8003970:	b120      	cbz	r0, 800397c <_ZN10Components10init_ADC_5Ev+0x64>
	  {
	    this->Error_Handler();
 8003972:	f7ff ff11 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC5 init");
 8003976:	4817      	ldr	r0, [pc, #92]	; (80039d4 <_ZN10Components10init_ADC_5Ev+0xbc>)
 8003978:	f008 fcba 	bl	800c2f0 <iprintf>

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <_ZN10Components10init_ADC_5Ev+0xc0>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 800397e:	6c20      	ldr	r0, [r4, #64]	; 0x40
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003980:	2306      	movs	r3, #6
 8003982:	e9cd 1300 	strd	r1, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003986:	227f      	movs	r2, #127	; 0x7f
 8003988:	2300      	movs	r3, #0
 800398a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 800398e:	4669      	mov	r1, sp
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003990:	2204      	movs	r2, #4
	  sConfig.Offset = 0;
 8003992:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8003996:	f001 fdb3 	bl	8005500 <HAL_ADC_ConfigChannel>
 800399a:	b120      	cbz	r0, 80039a6 <_ZN10Components10init_ADC_5Ev+0x8e>
	  {
	    this->Error_Handler();
 800399c:	f7ff fefc 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC5 config channel");
 80039a0:	480e      	ldr	r0, [pc, #56]	; (80039dc <_ZN10Components10init_ADC_5Ev+0xc4>)
 80039a2:	f008 fca5 	bl	800c2f0 <iprintf>
//
//	  }

	  //KANAAL VOOR DE FLUID POT
	  sConfig.Channel = ADC_CHANNEL_12;
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <_ZN10Components10init_ADC_5Ev+0xc8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80039a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039aa:	230c      	movs	r3, #12
 80039ac:	e9cd 2300 	strd	r2, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039b0:	2304      	movs	r3, #4
 80039b2:	227f      	movs	r2, #127	; 0x7f
 80039b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039b8:	9304      	str	r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80039ba:	4669      	mov	r1, sp
	  sConfig.Offset = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	9305      	str	r3, [sp, #20]
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80039c0:	f001 fd9e 	bl	8005500 <HAL_ADC_ConfigChannel>
 80039c4:	b120      	cbz	r0, 80039d0 <_ZN10Components10init_ADC_5Ev+0xb8>
	  {
		this->Error_Handler();
 80039c6:	f7ff fee7 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 80039ca:	4806      	ldr	r0, [pc, #24]	; (80039e4 <_ZN10Components10init_ADC_5Ev+0xcc>)
 80039cc:	f008 fc90 	bl	800c2f0 <iprintf>
	  }



}
 80039d0:	b008      	add	sp, #32
 80039d2:	bd10      	pop	{r4, pc}
 80039d4:	0800f0fd 	.word	0x0800f0fd
 80039d8:	94f00020 	.word	0x94f00020
 80039dc:	0800f114 	.word	0x0800f114
 80039e0:	32601000 	.word	0x32601000
 80039e4:	0800f135 	.word	0x0800f135
 80039e8:	50000600 	.word	0x50000600

080039ec <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){

	  hcomp1_ptr->Instance = COMP1;
 80039ec:	6800      	ldr	r0, [r0, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80039ee:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <_ZN10Components11init_COMP_1Ev+0x30>)
void Components::init_COMP_1(void){
 80039f0:	b508      	push	{r3, lr}
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e9c0 2300 	strd	r2, r3, [r0]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80039f8:	2250      	movs	r2, #80	; 0x50
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80039fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80039fe:	e9c0 3305 	strd	r3, r3, [r0, #20]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8003a02:	6082      	str	r2, [r0, #8]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8003a04:	f002 fa66 	bl	8005ed4 <HAL_COMP_Init>
 8003a08:	b130      	cbz	r0, 8003a18 <_ZN10Components11init_COMP_1Ev+0x2c>
	  {
	    this->Error_Handler();
 8003a0a:	f7ff fec5 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with COMP1 init");

	  }
}
 8003a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with COMP1 init");
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <_ZN10Components11init_COMP_1Ev+0x34>)
 8003a14:	f008 bc6c 	b.w	800c2f0 <iprintf>
}
 8003a18:	bd08      	pop	{r3, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40010200 	.word	0x40010200
 8003a20:	0800f160 	.word	0x0800f160

08003a24 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){

	    hcomp2_ptr->Instance = COMP2;
 8003a24:	6840      	ldr	r0, [r0, #4]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a26:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <_ZN10Components11init_COMP_2Ev+0x30>)
void Components::init_COMP_2(void){
 8003a28:	b508      	push	{r3, lr}
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e9c0 2300 	strd	r2, r3, [r0]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8003a30:	2250      	movs	r2, #80	; 0x50
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003a32:	e9c0 3303 	strd	r3, r3, [r0, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003a36:	e9c0 3305 	strd	r3, r3, [r0, #20]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8003a3a:	6082      	str	r2, [r0, #8]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8003a3c:	f002 fa4a 	bl	8005ed4 <HAL_COMP_Init>
 8003a40:	b130      	cbz	r0, 8003a50 <_ZN10Components11init_COMP_2Ev+0x2c>
	    {
	      this->Error_Handler();
 8003a42:	f7ff fea9 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    }




}
 8003a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("problem with COMP2 init");
 8003a4a:	4803      	ldr	r0, [pc, #12]	; (8003a58 <_ZN10Components11init_COMP_2Ev+0x34>)
 8003a4c:	f008 bc50 	b.w	800c2f0 <iprintf>
}
 8003a50:	bd08      	pop	{r3, pc}
 8003a52:	bf00      	nop
 8003a54:	40010204 	.word	0x40010204
 8003a58:	0800f178 	.word	0x0800f178

08003a5c <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){

    hcomp4_ptr->Instance = COMP4;
 8003a5c:	6880      	ldr	r0, [r0, #8]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <_ZN10Components11init_COMP_4Ev+0x2c>)
void Components::init_COMP_4(void){
 8003a60:	b508      	push	{r3, lr}
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e9c0 2300 	strd	r2, r3, [r0]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8003a68:	2240      	movs	r2, #64	; 0x40
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8003a6e:	6082      	str	r2, [r0, #8]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003a70:	6183      	str	r3, [r0, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8003a72:	f002 fa2f 	bl	8005ed4 <HAL_COMP_Init>
 8003a76:	b130      	cbz	r0, 8003a86 <_ZN10Components11init_COMP_4Ev+0x2a>
    {
        this->Error_Handler();
 8003a78:	f7ff fe8e 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with COMP4 init");
    }
}
 8003a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printf("problem with COMP4 init");
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <_ZN10Components11init_COMP_4Ev+0x30>)
 8003a82:	f008 bc35 	b.w	800c2f0 <iprintf>
}
 8003a86:	bd08      	pop	{r3, pc}
 8003a88:	4001020c 	.word	0x4001020c
 8003a8c:	0800f190 	.word	0x0800f190

08003a90 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){

	  hcomp5_ptr->Instance = COMP5;
 8003a90:	68c0      	ldr	r0, [r0, #12]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <_ZN10Components11init_COMP_5Ev+0x30>)
void Components::init_COMP_5(void){
 8003a94:	b508      	push	{r3, lr}
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e9c0 2300 	strd	r2, r3, [r0]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8003a9c:	2240      	movs	r2, #64	; 0x40
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003a9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003aa2:	e9c0 3305 	strd	r3, r3, [r0, #20]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8003aa6:	6082      	str	r2, [r0, #8]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8003aa8:	f002 fa14 	bl	8005ed4 <HAL_COMP_Init>
 8003aac:	b130      	cbz	r0, 8003abc <_ZN10Components11init_COMP_5Ev+0x2c>
	  {
		this->Error_Handler();
 8003aae:	f7ff fe73 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with COMP5 init");

	  }

}
 8003ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with COMP5 init");
 8003ab6:	4803      	ldr	r0, [pc, #12]	; (8003ac4 <_ZN10Components11init_COMP_5Ev+0x34>)
 8003ab8:	f008 bc1a 	b.w	800c2f0 <iprintf>
}
 8003abc:	bd08      	pop	{r3, pc}
 8003abe:	bf00      	nop
 8003ac0:	40010210 	.word	0x40010210
 8003ac4:	0800f1a8 	.word	0x0800f1a8

08003ac8 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){


	   hcomp7_ptr->Instance = COMP7;
 8003ac8:	6900      	ldr	r0, [r0, #16]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <_ZN10Components11init_COMP_7Ev+0x28>)
void Components::init_COMP_7(void){
 8003acc:	b508      	push	{r3, lr}
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e9c0 2300 	strd	r2, r3, [r0]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8003ad4:	2250      	movs	r2, #80	; 0x50
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003ad6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003ada:	e9c0 3305 	strd	r3, r3, [r0, #20]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8003ade:	6082      	str	r2, [r0, #8]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8003ae0:	f002 f9f8 	bl	8005ed4 <HAL_COMP_Init>
 8003ae4:	b118      	cbz	r0, 8003aee <_ZN10Components11init_COMP_7Ev+0x26>
	     this->Error_Handler();
	   }



}
 8003ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	     this->Error_Handler();
 8003aea:	f7ff be55 	b.w	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
}
 8003aee:	bd08      	pop	{r3, pc}
 8003af0:	40010218 	.word	0x40010218

08003af4 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4604      	mov	r4, r0
 8003af8:	b08c      	sub	sp, #48	; 0x30

    DAC_ChannelConfTypeDef sConfig = {0};
 8003afa:	2230      	movs	r2, #48	; 0x30
 8003afc:	2100      	movs	r1, #0
 8003afe:	4668      	mov	r0, sp
 8003b00:	f007 fea4 	bl	800b84c <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8003b04:	6960      	ldr	r0, [r4, #20]
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <_ZN10Components10init_DAC_1Ev+0x6c>)
 8003b08:	6003      	str	r3, [r0, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 8003b0a:	f002 fb55 	bl	80061b8 <HAL_DAC_Init>
 8003b0e:	b120      	cbz	r0, 8003b1a <_ZN10Components10init_DAC_1Ev+0x26>
    {
        this->Error_Handler();
 8003b10:	f7ff fe42 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 8003b14:	4813      	ldr	r0, [pc, #76]	; (8003b64 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003b16:	f008 fbeb 	bl	800c2f0 <iprintf>
    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003b1a:	2200      	movs	r2, #0
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003b1c:	2302      	movs	r3, #2
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b1e:	6960      	ldr	r0, [r4, #20]
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003b20:	9300      	str	r3, [sp, #0]
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b22:	4669      	mov	r1, sp
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b24:	e9cd 2202 	strd	r2, r2, [sp, #8]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003b2c:	e9cd 3206 	strd	r3, r2, [sp, #24]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003b30:	f8ad 2004 	strh.w	r2, [sp, #4]
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b34:	f002 fb54 	bl	80061e0 <HAL_DAC_ConfigChannel>
 8003b38:	b120      	cbz	r0, 8003b44 <_ZN10Components10init_DAC_1Ev+0x50>
    {
        this->Error_Handler();
 8003b3a:	f7ff fe2d 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 8003b3e:	4809      	ldr	r0, [pc, #36]	; (8003b64 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003b40:	f008 fbd6 	bl	800c2f0 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003b44:	6960      	ldr	r0, [r4, #20]
 8003b46:	2210      	movs	r2, #16
 8003b48:	4669      	mov	r1, sp
 8003b4a:	f002 fb49 	bl	80061e0 <HAL_DAC_ConfigChannel>
 8003b4e:	b120      	cbz	r0, 8003b5a <_ZN10Components10init_DAC_1Ev+0x66>
    {
        this->Error_Handler();
 8003b50:	f7ff fe22 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 8003b54:	4803      	ldr	r0, [pc, #12]	; (8003b64 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003b56:	f008 fbcb 	bl	800c2f0 <iprintf>

    }

}
 8003b5a:	b00c      	add	sp, #48	; 0x30
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	50000800 	.word	0x50000800
 8003b64:	0800f1c0 	.word	0x0800f1c0

08003b68 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	b08c      	sub	sp, #48	; 0x30

	  DAC_ChannelConfTypeDef sConfig = {0};
 8003b6e:	2230      	movs	r2, #48	; 0x30
 8003b70:	2100      	movs	r1, #0
 8003b72:	4668      	mov	r0, sp
 8003b74:	f007 fe6a 	bl	800b84c <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8003b78:	69a0      	ldr	r0, [r4, #24]
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_ZN10Components10init_DAC_2Ev+0x54>)
 8003b7c:	6003      	str	r3, [r0, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 8003b7e:	f002 fb1b 	bl	80061b8 <HAL_DAC_Init>
 8003b82:	b120      	cbz	r0, 8003b8e <_ZN10Components10init_DAC_2Ev+0x26>
	  {
	    this->Error_Handler();
 8003b84:	f7ff fe08 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC2 init");
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <_ZN10Components10init_DAC_2Ev+0x58>)
 8003b8a:	f008 fbb1 	bl	800c2f0 <iprintf>
	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003b8e:	2200      	movs	r2, #0
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003b90:	2302      	movs	r3, #2
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <_ZN10Components10init_DAC_2Ev+0x5c>)
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003b94:	9300      	str	r3, [sp, #0]
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b96:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b98:	e9cd 2202 	strd	r2, r2, [sp, #8]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003b9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003ba0:	e9cd 3206 	strd	r3, r2, [sp, #24]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003ba4:	f8ad 2004 	strh.w	r2, [sp, #4]
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003ba8:	f002 fb1a 	bl	80061e0 <HAL_DAC_ConfigChannel>
 8003bac:	b120      	cbz	r0, 8003bb8 <_ZN10Components10init_DAC_2Ev+0x50>
	  {
	    this->Error_Handler();
 8003bae:	f7ff fdf3 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC2 init");
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <_ZN10Components10init_DAC_2Ev+0x58>)
 8003bb4:	f008 fb9c 	bl	800c2f0 <iprintf>

	  }


}
 8003bb8:	b00c      	add	sp, #48	; 0x30
 8003bba:	bd10      	pop	{r4, pc}
 8003bbc:	50000c00 	.word	0x50000c00
 8003bc0:	0800f1d7 	.word	0x0800f1d7
 8003bc4:	20000a7c 	.word	0x20000a7c

08003bc8 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	4604      	mov	r4, r0
 8003bcc:	b08c      	sub	sp, #48	; 0x30

	  DAC_ChannelConfTypeDef sConfig = {0};
 8003bce:	2230      	movs	r2, #48	; 0x30
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4668      	mov	r0, sp
 8003bd4:	f007 fe3a 	bl	800b84c <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 8003bd8:	69e0      	ldr	r0, [r4, #28]
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <_ZN10Components10init_DAC_3Ev+0x58>)
 8003bdc:	6003      	str	r3, [r0, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 8003bde:	f002 faeb 	bl	80061b8 <HAL_DAC_Init>
 8003be2:	b120      	cbz	r0, 8003bee <_ZN10Components10init_DAC_3Ev+0x26>
	  {
	    this->Error_Handler();
 8003be4:	f7ff fdd8 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC3 init");
 8003be8:	480e      	ldr	r0, [pc, #56]	; (8003c24 <_ZN10Components10init_DAC_3Ev+0x5c>)
 8003bea:	f008 fb81 	bl	800c2f0 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003bee:	2202      	movs	r2, #2
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003bf0:	2300      	movs	r3, #0
	  sConfig.DAC_SignedFormat = DISABLE;
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003bf2:	e9cd 3204 	strd	r3, r2, [sp, #16]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003bf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003bfa:	9200      	str	r2, [sp, #0]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003bfc:	69e0      	ldr	r0, [r4, #28]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003bfe:	f8ad 3004 	strh.w	r3, [sp, #4]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c02:	2210      	movs	r2, #16
 8003c04:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c06:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c0a:	f002 fae9 	bl	80061e0 <HAL_DAC_ConfigChannel>
 8003c0e:	b120      	cbz	r0, 8003c1a <_ZN10Components10init_DAC_3Ev+0x52>
	  {
	    this->Error_Handler();
 8003c10:	f7ff fdc2 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC3 init");
 8003c14:	4803      	ldr	r0, [pc, #12]	; (8003c24 <_ZN10Components10init_DAC_3Ev+0x5c>)
 8003c16:	f008 fb6b 	bl	800c2f0 <iprintf>

	  }



}
 8003c1a:	b00c      	add	sp, #48	; 0x30
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	bf00      	nop
 8003c20:	50001000 	.word	0x50001000
 8003c24:	0800f1ee 	.word	0x0800f1ee

08003c28 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	b08c      	sub	sp, #48	; 0x30


	  DAC_ChannelConfTypeDef sConfig = {0};
 8003c2e:	2230      	movs	r2, #48	; 0x30
 8003c30:	2100      	movs	r1, #0
 8003c32:	4668      	mov	r0, sp
 8003c34:	f007 fe0a 	bl	800b84c <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8003c38:	6a20      	ldr	r0, [r4, #32]
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <_ZN10Components10init_DAC_4Ev+0x54>)
 8003c3c:	6003      	str	r3, [r0, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8003c3e:	f002 fabb 	bl	80061b8 <HAL_DAC_Init>
 8003c42:	b120      	cbz	r0, 8003c4e <_ZN10Components10init_DAC_4Ev+0x26>
	  {
	    this->Error_Handler();
 8003c44:	f7ff fda8 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC4 init");
 8003c48:	480d      	ldr	r0, [pc, #52]	; (8003c80 <_ZN10Components10init_DAC_4Ev+0x58>)
 8003c4a:	f008 fb51 	bl	800c2f0 <iprintf>
	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003c4e:	2200      	movs	r2, #0
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003c50:	2302      	movs	r3, #2
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c52:	6a20      	ldr	r0, [r4, #32]
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003c54:	9300      	str	r3, [sp, #0]
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c56:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c58:	e9cd 2202 	strd	r2, r2, [sp, #8]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003c5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003c60:	e9cd 3206 	strd	r3, r2, [sp, #24]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003c64:	f8ad 2004 	strh.w	r2, [sp, #4]
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c68:	f002 faba 	bl	80061e0 <HAL_DAC_ConfigChannel>
 8003c6c:	b120      	cbz	r0, 8003c78 <_ZN10Components10init_DAC_4Ev+0x50>
	  {
	    this->Error_Handler();
 8003c6e:	f7ff fd93 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC4 init");
 8003c72:	4803      	ldr	r0, [pc, #12]	; (8003c80 <_ZN10Components10init_DAC_4Ev+0x58>)
 8003c74:	f008 fb3c 	bl	800c2f0 <iprintf>

	  }


}
 8003c78:	b00c      	add	sp, #48	; 0x30
 8003c7a:	bd10      	pop	{r4, pc}
 8003c7c:	50001400 	.word	0x50001400
 8003c80:	0800f205 	.word	0x0800f205

08003c84 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){

	  hopamp1_ptr->Instance = OPAMP1;
 8003c84:	6a40      	ldr	r0, [r0, #36]	; 0x24
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <_ZN10Components9init_OA_1Ev+0x34>)
void Components::init_OA_1(void){
 8003c88:	b508      	push	{r3, lr}
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	6082      	str	r2, [r0, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8003c94:	2201      	movs	r2, #1
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8003c96:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003c9a:	6103      	str	r3, [r0, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8003c9c:	7502      	strb	r2, [r0, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003c9e:	6183      	str	r3, [r0, #24]
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003ca0:	62c3      	str	r3, [r0, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 8003ca2:	f002 feb5 	bl	8006a10 <HAL_OPAMP_Init>
 8003ca6:	b130      	cbz	r0, 8003cb6 <_ZN10Components9init_OA_1Ev+0x32>
	  {
	    this->Error_Handler();
 8003ca8:	f7ff fd76 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA1 init");
	  }


}
 8003cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA1 init");
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <_ZN10Components9init_OA_1Ev+0x38>)
 8003cb2:	f008 bb1d 	b.w	800c2f0 <iprintf>
}
 8003cb6:	bd08      	pop	{r3, pc}
 8003cb8:	40010300 	.word	0x40010300
 8003cbc:	0800f21c 	.word	0x0800f21c

08003cc0 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){

	    hopamp2_ptr->Instance = OPAMP2;
 8003cc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <_ZN10Components9init_OA_2Ev+0x38>)
void Components::init_OA_2(void){
 8003cc4:	b508      	push	{r3, lr}
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e9c0 2300 	strd	r2, r3, [r0]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	6082      	str	r2, [r0, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	7502      	strb	r2, [r0, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003cd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003cd8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003cdc:	6103      	str	r3, [r0, #16]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003cde:	6183      	str	r3, [r0, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003ce0:	6243      	str	r3, [r0, #36]	; 0x24
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 8003ce2:	f002 fe95 	bl	8006a10 <HAL_OPAMP_Init>
 8003ce6:	b130      	cbz	r0, 8003cf6 <_ZN10Components9init_OA_2Ev+0x36>
	    {
	      this->Error_Handler();
 8003ce8:	f7ff fd56 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("problem with OA2 init");

	    }


}
 8003cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		    printf("problem with OA2 init");
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <_ZN10Components9init_OA_2Ev+0x3c>)
 8003cf2:	f008 bafd 	b.w	800c2f0 <iprintf>
}
 8003cf6:	bd08      	pop	{r3, pc}
 8003cf8:	40010304 	.word	0x40010304
 8003cfc:	0800f232 	.word	0x0800f232

08003d00 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){

	   hopamp3_ptr->Instance = OPAMP3;
 8003d00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <_ZN10Components9init_OA_3Ev+0x34>)
void Components::init_OA_3(void){
 8003d04:	b508      	push	{r3, lr}
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e9c0 2300 	strd	r2, r3, [r0]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	6082      	str	r2, [r0, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8003d10:	2201      	movs	r2, #1
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8003d12:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003d16:	6103      	str	r3, [r0, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8003d18:	7502      	strb	r2, [r0, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003d1a:	6183      	str	r3, [r0, #24]
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003d1c:	62c3      	str	r3, [r0, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8003d1e:	f002 fe77 	bl	8006a10 <HAL_OPAMP_Init>
 8003d22:	b130      	cbz	r0, 8003d32 <_ZN10Components9init_OA_3Ev+0x32>
	   {
	     this->Error_Handler();
 8003d24:	f7ff fd38 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("problem with OA3 init");

	   }

}
 8003d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		    printf("problem with OA3 init");
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <_ZN10Components9init_OA_3Ev+0x38>)
 8003d2e:	f008 badf 	b.w	800c2f0 <iprintf>
}
 8003d32:	bd08      	pop	{r3, pc}
 8003d34:	40010308 	.word	0x40010308
 8003d38:	0800f248 	.word	0x0800f248

08003d3c <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){

	  hopamp4_ptr->Instance = OPAMP4;
 8003d3c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <_ZN10Components9init_OA_4Ev+0x38>)
void Components::init_OA_4(void){
 8003d40:	b508      	push	{r3, lr}
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	6082      	str	r2, [r0, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	7502      	strb	r2, [r0, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003d50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003d54:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003d58:	6103      	str	r3, [r0, #16]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003d5a:	6183      	str	r3, [r0, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003d5c:	6243      	str	r3, [r0, #36]	; 0x24
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 8003d5e:	f002 fe57 	bl	8006a10 <HAL_OPAMP_Init>
 8003d62:	b130      	cbz	r0, 8003d72 <_ZN10Components9init_OA_4Ev+0x36>
	  {
	    this->Error_Handler();
 8003d64:	f7ff fd18 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA4 init");

	  }
}
 8003d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA4 init");
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <_ZN10Components9init_OA_4Ev+0x3c>)
 8003d6e:	f008 babf 	b.w	800c2f0 <iprintf>
}
 8003d72:	bd08      	pop	{r3, pc}
 8003d74:	4001030c 	.word	0x4001030c
 8003d78:	0800f25e 	.word	0x0800f25e

08003d7c <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){

	  hopamp5_ptr->Instance = OPAMP5;
 8003d7c:	6b40      	ldr	r0, [r0, #52]	; 0x34
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <_ZN10Components9init_OA_5Ev+0x38>)
void Components::init_OA_5(void){
 8003d80:	b508      	push	{r3, lr}
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	6082      	str	r2, [r0, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	7502      	strb	r2, [r0, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003d90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003d94:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003d98:	6103      	str	r3, [r0, #16]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003d9a:	6183      	str	r3, [r0, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003d9c:	6243      	str	r3, [r0, #36]	; 0x24
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 8003d9e:	f002 fe37 	bl	8006a10 <HAL_OPAMP_Init>
 8003da2:	b130      	cbz	r0, 8003db2 <_ZN10Components9init_OA_5Ev+0x36>
	  {
	    this->Error_Handler();
 8003da4:	f7ff fcf8 	bl	8003798 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA5 init");

	  }

}
 8003da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA5 init");
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <_ZN10Components9init_OA_5Ev+0x3c>)
 8003dae:	f008 ba9f 	b.w	800c2f0 <iprintf>
}
 8003db2:	bd08      	pop	{r3, pc}
 8003db4:	40010310 	.word	0x40010310
 8003db8:	0800f274 	.word	0x0800f274

08003dbc <_ZN10Components15init_ComponentsEv>:
void Components::init_Components(void){
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4604      	mov	r4, r0
	this->init_COMP_1();
 8003dc0:	f7ff fe14 	bl	80039ec <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f7ff fe2d 	bl	8003a24 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff fe46 	bl	8003a5c <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7ff fe5d 	bl	8003a90 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff fe76 	bl	8003ac8 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff fcf3 	bl	80037c8 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff fe86 	bl	8003af4 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7ff febd 	bl	8003b68 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7ff feea 	bl	8003bc8 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ff17 	bl	8003c28 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7ff ff42 	bl	8003c84 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8003e00:	4620      	mov	r0, r4
 8003e02:	f7ff ff5d 	bl	8003cc0 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff fd1e 	bl	8003848 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ff77 	bl	8003d00 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff ff92 	bl	8003d3c <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7ff fd7d 	bl	8003918 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f7ff ffac 	bl	8003d7c <_ZN10Components9init_OA_5Ev>
		HAL_OPAMP_Start(hopamp1_ptr);
 8003e24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e26:	f002 fe75 	bl	8006b14 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8003e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003e2c:	f002 fe72 	bl	8006b14 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8003e30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003e32:	f002 fe6f 	bl	8006b14 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8003e36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e38:	f002 fe6c 	bl	8006b14 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8003e3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e3e:	f002 fe69 	bl	8006b14 <HAL_OPAMP_Start>
		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8003e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e44:	f002 fe7b 	bl	8006b3e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8003e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003e4a:	f002 fe78 	bl	8006b3e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8003e4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003e50:	f002 fe75 	bl	8006b3e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8003e54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e56:	f002 fe72 	bl	8006b3e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8003e5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e5c:	f002 fe6f 	bl	8006b3e <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8003e60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e62:	217f      	movs	r1, #127	; 0x7f
 8003e64:	f001 ff3e 	bl	8005ce4 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8003e68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003e6a:	217f      	movs	r1, #127	; 0x7f
 8003e6c:	f001 ff3a 	bl	8005ce4 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8003e70:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003e72:	217f      	movs	r1, #127	; 0x7f
}
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8003e78:	f001 bf34 	b.w	8005ce4 <HAL_ADCEx_Calibration_Start>

08003e7c <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){

	return &hadc1;
}
 8003e7c:	4800      	ldr	r0, [pc, #0]	; (8003e80 <_ZN10Components9get_ADC_1Ev+0x4>)
 8003e7e:	4770      	bx	lr
 8003e80:	20000870 	.word	0x20000870

08003e84 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){

	return &hadc2;
}
 8003e84:	4800      	ldr	r0, [pc, #0]	; (8003e88 <_ZN10Components9get_ADC_2Ev+0x4>)
 8003e86:	4770      	bx	lr
 8003e88:	200008dc 	.word	0x200008dc

08003e8c <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){

	return &hadc5;

}
 8003e8c:	4800      	ldr	r0, [pc, #0]	; (8003e90 <_ZN10Components9get_ADC_5Ev+0x4>)
 8003e8e:	4770      	bx	lr
 8003e90:	20000948 	.word	0x20000948

08003e94 <_ZN8DebuggerC1EP18HerelinkController>:
#include "debugger.h"

Debugger::Debugger(HerelinkController *controller){

	this->_controller = controller;
 8003e94:	6001      	str	r1, [r0, #0]


}
 8003e96:	4770      	bx	lr

08003e98 <_ZN8Debugger16displayDebugInfoEv>:


void Debugger::displayDebugInfo(void){
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4604      	mov	r4, r0
	//BIG debug function. I'm just dumping everything here, because printf still is a bit wonky and this
	//works best...


	if(HAL_GetTick() % 100 == 0){
 8003e9c:	f000 ffb6 	bl	8004e0c <HAL_GetTick>
 8003ea0:	2364      	movs	r3, #100	; 0x64
 8003ea2:	fbb0 f2f3 	udiv	r2, r0, r3
 8003ea6:	fb02 0013 	mls	r0, r2, r3, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	f040 810a 	bne.w	80040c4 <_ZN8Debugger16displayDebugInfoEv+0x22c>



		printf("Left joystick Y: %f \r\n", this->_controller->_sbus.getLeftY());
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8003eb6:	f7fe fd3f 	bl	8002938 <_ZN4SBUS8getLeftYEv>
 8003eba:	ee10 0a10 	vmov	r0, s0
 8003ebe:	f7fc fb6b 	bl	8000598 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4880      	ldr	r0, [pc, #512]	; (80040c8 <_ZN8Debugger16displayDebugInfoEv+0x230>)
 8003ec8:	f008 fa12 	bl	800c2f0 <iprintf>
		printf("\r\n");
 8003ecc:	487f      	ldr	r0, [pc, #508]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 8003ece:	f008 fa95 	bl	800c3fc <puts>

		printf("Left joystick X: %f \r\n", this->_controller->_sbus.getLeftX());
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8003ed8:	f7fe fd50 	bl	800297c <_ZN4SBUS8getLeftXEv>
 8003edc:	ee10 0a10 	vmov	r0, s0
 8003ee0:	f7fc fb5a 	bl	8000598 <__aeabi_f2d>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4879      	ldr	r0, [pc, #484]	; (80040d0 <_ZN8Debugger16displayDebugInfoEv+0x238>)
 8003eea:	f008 fa01 	bl	800c2f0 <iprintf>
		printf("\r\n");
 8003eee:	4877      	ldr	r0, [pc, #476]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 8003ef0:	f008 fa84 	bl	800c3fc <puts>

		printf("Right joystick Y:%f \r\n", this->_controller->_sbus.getRightY());
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8003efa:	f7fe fd61 	bl	80029c0 <_ZN4SBUS9getRightYEv>
 8003efe:	ee10 0a10 	vmov	r0, s0
 8003f02:	f7fc fb49 	bl	8000598 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4872      	ldr	r0, [pc, #456]	; (80040d4 <_ZN8Debugger16displayDebugInfoEv+0x23c>)
 8003f0c:	f008 f9f0 	bl	800c2f0 <iprintf>
		printf("\r\n");
 8003f10:	486e      	ldr	r0, [pc, #440]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 8003f12:	f008 fa73 	bl	800c3fc <puts>

		printf("Right joystick X: %f \r\n", this->_controller->_sbus.getRightX());
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8003f1c:	f7fe fd72 	bl	8002a04 <_ZN4SBUS9getRightXEv>
 8003f20:	ee10 0a10 	vmov	r0, s0
 8003f24:	f7fc fb38 	bl	8000598 <__aeabi_f2d>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	486a      	ldr	r0, [pc, #424]	; (80040d8 <_ZN8Debugger16displayDebugInfoEv+0x240>)
 8003f2e:	f008 f9df 	bl	800c2f0 <iprintf>

		printf("Jogwheel: %f \r\n", this->_controller->_sbus.getJogWheel());
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 8003f38:	f7fe fd86 	bl	8002a48 <_ZN4SBUS11getJogWheelEv>
 8003f3c:	ee10 0a10 	vmov	r0, s0
 8003f40:	f7fc fb2a 	bl	8000598 <__aeabi_f2d>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4864      	ldr	r0, [pc, #400]	; (80040dc <_ZN8Debugger16displayDebugInfoEv+0x244>)
 8003f4a:	f008 f9d1 	bl	800c2f0 <iprintf>



		printf("home press: %d \r\n", this->_controller->_sbus._channels[9]);
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	4863      	ldr	r0, [pc, #396]	; (80040e0 <_ZN8Debugger16displayDebugInfoEv+0x248>)
 8003f52:	f8b3 17d0 	ldrh.w	r1, [r3, #2000]	; 0x7d0
 8003f56:	f008 f9cb 	bl	800c2f0 <iprintf>
		printf("shoulder press: %d \r\n", this->_controller->_sbus._channels[11]);
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	4861      	ldr	r0, [pc, #388]	; (80040e4 <_ZN8Debugger16displayDebugInfoEv+0x24c>)
 8003f5e:	f8b3 17d4 	ldrh.w	r1, [r3, #2004]	; 0x7d4
 8003f62:	f008 f9c5 	bl	800c2f0 <iprintf>

		printf("A press: %d \r\n", this->_controller->_sbus._channels[5]);
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	485f      	ldr	r0, [pc, #380]	; (80040e8 <_ZN8Debugger16displayDebugInfoEv+0x250>)
 8003f6a:	f8b3 17c8 	ldrh.w	r1, [r3, #1992]	; 0x7c8
 8003f6e:	f008 f9bf 	bl	800c2f0 <iprintf>
		printf("B press: %d \r\n", this->_controller->_sbus._channels[6]);
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	485d      	ldr	r0, [pc, #372]	; (80040ec <_ZN8Debugger16displayDebugInfoEv+0x254>)
 8003f76:	f8b3 17ca 	ldrh.w	r1, [r3, #1994]	; 0x7ca
 8003f7a:	f008 f9b9 	bl	800c2f0 <iprintf>
		printf("C press: %d \r\n", this->_controller->_sbus._channels[7]);
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	485b      	ldr	r0, [pc, #364]	; (80040f0 <_ZN8Debugger16displayDebugInfoEv+0x258>)
 8003f82:	f8b3 17cc 	ldrh.w	r1, [r3, #1996]	; 0x7cc
 8003f86:	f008 f9b3 	bl	800c2f0 <iprintf>
		printf("B press: %d \r\n", this->_controller->_sbus._channels[6]);
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	4857      	ldr	r0, [pc, #348]	; (80040ec <_ZN8Debugger16displayDebugInfoEv+0x254>)
 8003f8e:	f8b3 17ca 	ldrh.w	r1, [r3, #1994]	; 0x7ca
 8003f92:	f008 f9ad 	bl	800c2f0 <iprintf>


		printf("LedPWM: %d\r\n", this->_controller->_convertor.get_LEDPWM());
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8003f9c:	f7fd fa1a 	bl	80013d4 <_ZN9Convertor10get_LEDPWMEv>
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	4854      	ldr	r0, [pc, #336]	; (80040f4 <_ZN8Debugger16displayDebugInfoEv+0x25c>)
 8003fa4:	f008 f9a4 	bl	800c2f0 <iprintf>
		printf("selectorPWM: %d\r\n", this->_controller->_convertor.get_selectorPWM());
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8003fae:	f7fd fa05 	bl	80013bc <_ZN9Convertor15get_selectorPWMEv>
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	4850      	ldr	r0, [pc, #320]	; (80040f8 <_ZN8Debugger16displayDebugInfoEv+0x260>)
 8003fb6:	f008 f99b 	bl	800c2f0 <iprintf>
		printf("push motor PWM: %d \r\n", this->_controller->_convertor.get_pushPWM());
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8003fc0:	f7fd fa02 	bl	80013c8 <_ZN9Convertor11get_pushPWMEv>
 8003fc4:	4601      	mov	r1, r0
 8003fc6:	484d      	ldr	r0, [pc, #308]	; (80040fc <_ZN8Debugger16displayDebugInfoEv+0x264>)
 8003fc8:	f008 f992 	bl	800c2f0 <iprintf>
		printf("fluid motor PWM: %d \r\n", this->_controller->_convertor.get_fluidPWM());
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8003fd2:	f7fd f9f6 	bl	80013c2 <_ZN9Convertor12get_fluidPWMEv>
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	4849      	ldr	r0, [pc, #292]	; (8004100 <_ZN8Debugger16displayDebugInfoEv+0x268>)
 8003fda:	f008 f989 	bl	800c2f0 <iprintf>
		printf("next fluid position: %d \r\n", this->_controller->_convertor._fluidPosition);
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	f7fc fad7 	bl	8000598 <__aeabi_f2d>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4845      	ldr	r0, [pc, #276]	; (8004104 <_ZN8Debugger16displayDebugInfoEv+0x26c>)
 8003ff0:	f008 f97e 	bl	800c2f0 <iprintf>
		printf("cleaner motor PWM: %d \r\n", this->_controller->_convertor.get_cleanerMotorPWM());
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8003ffa:	f7fd f9e8 	bl	80013ce <_ZN9Convertor19get_cleanerMotorPWMEv>
 8003ffe:	4601      	mov	r1, r0
 8004000:	4841      	ldr	r0, [pc, #260]	; (8004108 <_ZN8Debugger16displayDebugInfoEv+0x270>)
 8004002:	f008 f975 	bl	800c2f0 <iprintf>
		printf("\r\n");
 8004006:	4831      	ldr	r0, [pc, #196]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 8004008:	f008 f9f8 	bl	800c3fc <puts>

		printf("battery voltage: %d \r\n", this->_controller->_convertor.get_battery_voltage());
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004012:	f7fd f9e3 	bl	80013dc <_ZN9Convertor19get_battery_voltageEv>
 8004016:	4601      	mov	r1, r0
 8004018:	483c      	ldr	r0, [pc, #240]	; (800410c <_ZN8Debugger16displayDebugInfoEv+0x274>)
 800401a:	f008 f969 	bl	800c2f0 <iprintf>
		printf("selector position %d \r\n", this->_controller->_convertor.get_selector_position());
 800401e:	6820      	ldr	r0, [r4, #0]
 8004020:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004024:	f7fd fa14 	bl	8001450 <_ZN9Convertor21get_selector_positionEv>
 8004028:	4601      	mov	r1, r0
 800402a:	4839      	ldr	r0, [pc, #228]	; (8004110 <_ZN8Debugger16displayDebugInfoEv+0x278>)
 800402c:	f008 f960 	bl	800c2f0 <iprintf>
		printf("fluid position %d \r\n", this->_controller->_convertor.get_fluidPosition());
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004036:	f7fd fa3b 	bl	80014b0 <_ZN9Convertor17get_fluidPositionEv>
 800403a:	4601      	mov	r1, r0
 800403c:	4835      	ldr	r0, [pc, #212]	; (8004114 <_ZN8Debugger16displayDebugInfoEv+0x27c>)
 800403e:	f008 f957 	bl	800c2f0 <iprintf>
		printf("push position %d \r\n", this->_controller->_convertor.get_pushPosition());
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004048:	f7fd fb4e 	bl	80016e8 <_ZN9Convertor16get_pushPositionEv>
 800404c:	4601      	mov	r1, r0
 800404e:	4832      	ldr	r0, [pc, #200]	; (8004118 <_ZN8Debugger16displayDebugInfoEv+0x280>)
 8004050:	f008 f94e 	bl	800c2f0 <iprintf>
		printf("Toggle lock %d \r\n", this->_controller->_convertor.get_sleepToggle());
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 800405a:	f7fd fbac 	bl	80017b6 <_ZN9Convertor15get_sleepToggleEv>
 800405e:	4601      	mov	r1, r0
 8004060:	482e      	ldr	r0, [pc, #184]	; (800411c <_ZN8Debugger16displayDebugInfoEv+0x284>)
 8004062:	f008 f945 	bl	800c2f0 <iprintf>



		printf("\r\n");
 8004066:	4819      	ldr	r0, [pc, #100]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 8004068:	f008 f9c8 	bl	800c3fc <puts>


		printf("led current:  %d \r\n", this->_controller->_convertor.get_LEDCurrent());
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004072:	f7fd fb4d 	bl	8001710 <_ZN9Convertor14get_LEDCurrentEv>
 8004076:	4601      	mov	r1, r0
 8004078:	4829      	ldr	r0, [pc, #164]	; (8004120 <_ZN8Debugger16displayDebugInfoEv+0x288>)
 800407a:	f008 f939 	bl	800c2f0 <iprintf>
		printf("fluid actuator current: %d \r\n", this->_controller->_convertor.get_fluidCurrent());
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004084:	f7fd fb58 	bl	8001738 <_ZN9Convertor16get_fluidCurrentEv>
 8004088:	4601      	mov	r1, r0
 800408a:	4826      	ldr	r0, [pc, #152]	; (8004124 <_ZN8Debugger16displayDebugInfoEv+0x28c>)
 800408c:	f008 f930 	bl	800c2f0 <iprintf>
		printf("push motor current: %d \r\n", this->_controller->_convertor.get_pushCurrent());
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8004096:	f7fd fb63 	bl	8001760 <_ZN9Convertor15get_pushCurrentEv>
 800409a:	4601      	mov	r1, r0
 800409c:	4822      	ldr	r0, [pc, #136]	; (8004128 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 800409e:	f008 f927 	bl	800c2f0 <iprintf>
		printf("selector motor current: %d \r\n", this->_controller->_convertor.get_selectorCurrent());
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 80040a8:	f7fd fb6e 	bl	8001788 <_ZN9Convertor19get_selectorCurrentEv>
 80040ac:	4601      	mov	r1, r0
 80040ae:	481f      	ldr	r0, [pc, #124]	; (800412c <_ZN8Debugger16displayDebugInfoEv+0x294>)
 80040b0:	f008 f91e 	bl	800c2f0 <iprintf>
//		printf("Mavlink received heartbeat system status %d \r\n",this->_controller->_mavlink._received_heartbeat.system_status);
//		printf("Mavlink received heartbeat vehicle type %d \r\n",this->_controller->_mavlink._received_heartbeat.system_status);
//		printf("Mavlink comp id: %d \r\n", this->_controller->_mavlink._mavlink_received_header.compid);
//		printf("Mavlink msg id: %d \r\n", this->_controller->_mavlink._mavlink_received_header.msgid);

		printf("\r\n");
 80040b4:	4805      	ldr	r0, [pc, #20]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 80040b6:	f008 f9a1 	bl	800c3fc <puts>


	}


}
 80040ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("\r\n");
 80040be:	4803      	ldr	r0, [pc, #12]	; (80040cc <_ZN8Debugger16displayDebugInfoEv+0x234>)
 80040c0:	f008 b99c 	b.w	800c3fc <puts>
}
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	bf00      	nop
 80040c8:	0800f28a 	.word	0x0800f28a
 80040cc:	0800ef70 	.word	0x0800ef70
 80040d0:	0800f2a1 	.word	0x0800f2a1
 80040d4:	0800f2b8 	.word	0x0800f2b8
 80040d8:	0800f2cf 	.word	0x0800f2cf
 80040dc:	0800f2e7 	.word	0x0800f2e7
 80040e0:	0800f2f7 	.word	0x0800f2f7
 80040e4:	0800f309 	.word	0x0800f309
 80040e8:	0800f31f 	.word	0x0800f31f
 80040ec:	0800f32e 	.word	0x0800f32e
 80040f0:	0800f33d 	.word	0x0800f33d
 80040f4:	0800f34c 	.word	0x0800f34c
 80040f8:	0800f359 	.word	0x0800f359
 80040fc:	0800f36b 	.word	0x0800f36b
 8004100:	0800f381 	.word	0x0800f381
 8004104:	0800f398 	.word	0x0800f398
 8004108:	0800f3b3 	.word	0x0800f3b3
 800410c:	0800f3cc 	.word	0x0800f3cc
 8004110:	0800f3e3 	.word	0x0800f3e3
 8004114:	0800f3fb 	.word	0x0800f3fb
 8004118:	0800f410 	.word	0x0800f410
 800411c:	0800f424 	.word	0x0800f424
 8004120:	0800f436 	.word	0x0800f436
 8004124:	0800f44a 	.word	0x0800f44a
 8004128:	0800f468 	.word	0x0800f468
 800412c:	0800f482 	.word	0x0800f482

08004130 <main>:
UART_HandleTypeDef huart2;

void testFunction(void);


int main(void){
 8004130:	b530      	push	{r4, r5, lr}
 8004132:	f6ad 2dc4 	subw	sp, sp, #2756	; 0xac4
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8004136:	f000 fe4d 	bl	8004dd4 <HAL_Init>
	HAL_Delay(100);
 800413a:	2064      	movs	r0, #100	; 0x64
 800413c:	f000 fe6c 	bl	8004e18 <HAL_Delay>


	//Initialize clock/DMA/... configurations and components.
	Initializer init(&huart1, &huart2);
 8004140:	4a36      	ldr	r2, [pc, #216]	; (800421c <main+0xec>)
 8004142:	4937      	ldr	r1, [pc, #220]	; (8004220 <main+0xf0>)
 8004144:	a815      	add	r0, sp, #84	; 0x54
 8004146:	f7ff fb0d 	bl	8003764 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>

	init.init_Configs();
	Components components;
 800414a:	ac04      	add	r4, sp, #16
	init.init_Configs();
 800414c:	a815      	add	r0, sp, #84	; 0x54
 800414e:	f7ff fa1b 	bl	8003588 <_ZN11Initializer12init_ConfigsEv>
	Components components;
 8004152:	4934      	ldr	r1, [pc, #208]	; (8004224 <main+0xf4>)
 8004154:	2244      	movs	r2, #68	; 0x44
 8004156:	4620      	mov	r0, r4
 8004158:	f007 fb6a 	bl	800b830 <memcpy>
	components.init_Components();
 800415c:	4620      	mov	r0, r4
 800415e:	f7ff fe2d 	bl	8003dbc <_ZN10Components15init_ComponentsEv>
	//HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
	HAL_Delay(500);
 8004162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004166:	f000 fe57 	bl	8004e18 <HAL_Delay>

	//HerelinkController object contains all sbus, altimeter & mavlink functionality. ctrl + click to expand
	HerelinkController controller(&huart2, &huart1, &init, &components);
 800416a:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <main+0xf0>)
 800416c:	492b      	ldr	r1, [pc, #172]	; (800421c <main+0xec>)
 800416e:	9400      	str	r4, [sp, #0]
 8004170:	ab15      	add	r3, sp, #84	; 0x54
 8004172:	a88a      	add	r0, sp, #552	; 0x228
 8004174:	f7fd fbd2 	bl	800191c <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components>
	Debugger debugger(&controller);
 8004178:	a98a      	add	r1, sp, #552	; 0x228
 800417a:	a803      	add	r0, sp, #12
 800417c:	f7ff fe8a 	bl	8003e94 <_ZN8DebuggerC1EP18HerelinkController>

	HAL_Delay(500);
 8004180:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004184:	f000 fe48 	bl	8004e18 <HAL_Delay>

	printf("\r\n sanity check \r \n");
 8004188:	4827      	ldr	r0, [pc, #156]	; (8004228 <main+0xf8>)
 800418a:	f008 f937 	bl	800c3fc <puts>
	//set camera pin to block 5v.

	uint32_t timeout_start = HAL_GetTick();	//get the current time
 800418e:	f000 fe3d 	bl	8004e0c <HAL_GetTick>
	uint32_t timeout_duration = 13000;	//timeout in milliseconds
	//HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
    GPIO_PinState PA4_pin_state = HAL_GPIO_ReadPin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 8004192:	2110      	movs	r1, #16
	uint32_t timeout_start = HAL_GetTick();	//get the current time
 8004194:	4604      	mov	r4, r0
    GPIO_PinState PA4_pin_state = HAL_GPIO_ReadPin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 8004196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419a:	f002 fb81 	bl	80068a0 <HAL_GPIO_ReadPin>

    if(PA4_pin_state == GPIO_PIN_RESET)
 800419e:	b920      	cbnz	r0, 80041aa <main+0x7a>
    {
    	HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 80041a0:	2110      	movs	r1, #16
 80041a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a6:	f002 fb86 	bl	80068b6 <HAL_GPIO_TogglePin>
			/*
			all the printf functions in the debugger-class can cause problems while restarting the Herelink controller
			so leave it commented when not debugging
			*/
			debugger.displayDebugInfo();
			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80041aa:	4d20      	ldr	r5, [pc, #128]	; (800422c <main+0xfc>)
			controller.update();
 80041ac:	a88a      	add	r0, sp, #552	; 0x228
 80041ae:	f7fd fbef 	bl	8001990 <_ZN18HerelinkController6updateEv>
			debugger.displayDebugInfo();
 80041b2:	a803      	add	r0, sp, #12
 80041b4:	f7ff fe70 	bl	8003e98 <_ZN8Debugger16displayDebugInfoEv>
			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80041b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041bc:	4628      	mov	r0, r5
 80041be:	f002 fb7a 	bl	80068b6 <HAL_GPIO_TogglePin>


			if(HAL_GetTick() - timeout_start == timeout_duration)
 80041c2:	f000 fe23 	bl	8004e0c <HAL_GetTick>
 80041c6:	f5a0 534b 	sub.w	r3, r0, #12992	; 0x32c0
 80041ca:	3b08      	subs	r3, #8
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d11f      	bne.n	8004210 <main+0xe0>
			{
				HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 80041d0:	2110      	movs	r1, #16
 80041d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041d6:	f002 fb6e 	bl	80068b6 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 80041da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041de:	f000 fe1b 	bl	8004e18 <HAL_Delay>
				HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 80041e2:	2110      	movs	r1, #16
 80041e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e8:	f002 fb65 	bl	80068b6 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 80041ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041f0:	f000 fe12 	bl	8004e18 <HAL_Delay>
				HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 80041f4:	2110      	movs	r1, #16
 80041f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fa:	f002 fb5c 	bl	80068b6 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 80041fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004202:	f000 fe09 	bl	8004e18 <HAL_Delay>
				HAL_GPIO_TogglePin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 8004206:	2110      	movs	r1, #16
 8004208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800420c:	f002 fb53 	bl	80068b6 <HAL_GPIO_TogglePin>



			}
			PA4_pin_state = HAL_GPIO_ReadPin(PA4_GPIO_GPIO_Port, PA4_GPIO_Pin);
 8004210:	2110      	movs	r1, #16
 8004212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004216:	f002 fb43 	bl	80068a0 <HAL_GPIO_ReadPin>
			controller.update();
 800421a:	e7c7      	b.n	80041ac <main+0x7c>
 800421c:	20000cc0 	.word	0x20000cc0
 8004220:	20000c30 	.word	0x20000c30
 8004224:	0800e38c 	.word	0x0800e38c
 8004228:	0800f4a0 	.word	0x0800f4a0
 800422c:	48000800 	.word	0x48000800

08004230 <Error_Handler>:

  /* USER CODE END Callback 1 */
}


void Error_Handler(void){
 8004230:	b570      	push	{r4, r5, r6, lr}


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004232:	4e0a      	ldr	r6, [pc, #40]	; (800425c <Error_Handler+0x2c>)
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8004234:	4d0a      	ldr	r5, [pc, #40]	; (8004260 <Error_Handler+0x30>)
void Error_Handler(void){
 8004236:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800423c:	4630      	mov	r0, r6
 800423e:	f002 fb3a 	bl	80068b6 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8004242:	4628      	mov	r0, r5
 8004244:	f008 f8da 	bl	800c3fc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004248:	3c01      	subs	r4, #1
		HAL_Delay(1000);
 800424a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800424e:	f000 fde3 	bl	8004e18 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004252:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004256:	d1ef      	bne.n	8004238 <Error_Handler+0x8>

	}

}
 8004258:	bd70      	pop	{r4, r5, r6, pc}
 800425a:	bf00      	nop
 800425c:	48000800 	.word	0x48000800
 8004260:	0800f4b3 	.word	0x0800f4b3

08004264 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_MspInit+0x2c>)
 8004266:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	661a      	str	r2, [r3, #96]	; 0x60
 800426e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004270:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004272:	f002 0201 	and.w	r2, r2, #1
 8004276:	9200      	str	r2, [sp, #0]
 8004278:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800427c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004280:	659a      	str	r2, [r3, #88]	; 0x58
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428c:	b002      	add	sp, #8
 800428e:	4770      	bx	lr
 8004290:	40021000 	.word	0x40021000

08004294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	b0a0      	sub	sp, #128	; 0x80
 8004298:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429a:	2214      	movs	r2, #20
 800429c:	2100      	movs	r1, #0
 800429e:	a806      	add	r0, sp, #24
 80042a0:	f007 fad4 	bl	800b84c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042a4:	2254      	movs	r2, #84	; 0x54
 80042a6:	2100      	movs	r1, #0
 80042a8:	a80b      	add	r0, sp, #44	; 0x2c
 80042aa:	f007 facf 	bl	800b84c <memset>
  if(hadc->Instance==ADC1)
 80042ae:	682b      	ldr	r3, [r5, #0]
 80042b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b4:	d169      	bne.n	800438a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80042b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ba:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042bc:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80042be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042c2:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042c4:	f003 ff4c 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 80042c8:	b108      	cbz	r0, 80042ce <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 80042ca:	f7ff ffb1 	bl	8004230 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80042ce:	4a6c      	ldr	r2, [pc, #432]	; (8004480 <HAL_ADC_MspInit+0x1ec>)
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80042d4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80042d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80042d8:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_ADC_MspInit+0x1f0>)
 80042da:	d108      	bne.n	80042ee <HAL_ADC_MspInit+0x5a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80042dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80042e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042ea:	9201      	str	r2, [sp, #4]
 80042ec:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80042f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f8:	f002 0201 	and.w	r2, r2, #1
 80042fc:	9202      	str	r2, [sp, #8]
 80042fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004302:	f042 0202 	orr.w	r2, r2, #2
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	9303      	str	r3, [sp, #12]
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004312:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004314:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004318:	2301      	movs	r3, #1
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 800431a:	a906      	add	r1, sp, #24
 800431c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004320:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8004324:	f002 f9f0 	bl	8006708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8004328:	f641 0302 	movw	r3, #6146	; 0x1802
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432c:	4856      	ldr	r0, [pc, #344]	; (8004488 <HAL_ADC_MspInit+0x1f4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004330:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004332:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004336:	f002 f9e7 	bl	8006708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800433a:	4c54      	ldr	r4, [pc, #336]	; (800448c <HAL_ADC_MspInit+0x1f8>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800433c:	4a54      	ldr	r2, [pc, #336]	; (8004490 <HAL_ADC_MspInit+0x1fc>)
 800433e:	2305      	movs	r3, #5
 8004340:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800434e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004352:	e9c4 3606 	strd	r3, r6, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004356:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800435c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004360:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004362:	f002 f863 	bl	800642c <HAL_DMA_Init>
 8004366:	b108      	cbz	r0, 800436c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8004368:	f7ff ff62 	bl	8004230 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	4611      	mov	r1, r2
 8004370:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004372:	656c      	str	r4, [r5, #84]	; 0x54
 8004374:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004376:	f001 fecb 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800437a:	2012      	movs	r0, #18
 800437c:	f001 fefa 	bl	8006174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8004380:	4844      	ldr	r0, [pc, #272]	; (8004494 <HAL_ADC_MspInit+0x200>)
 8004382:	f008 f83b 	bl	800c3fc <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8004386:	b020      	add	sp, #128	; 0x80
 8004388:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 800438a:	4a43      	ldr	r2, [pc, #268]	; (8004498 <HAL_ADC_MspInit+0x204>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d141      	bne.n	8004414 <HAL_ADC_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004394:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004396:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004398:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800439c:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800439e:	f003 fedf 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 80043a2:	b108      	cbz	r0, 80043a8 <HAL_ADC_MspInit+0x114>
      Error_Handler();
 80043a4:	f7ff ff44 	bl	8004230 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80043a8:	4a35      	ldr	r2, [pc, #212]	; (8004480 <HAL_ADC_MspInit+0x1ec>)
 80043aa:	6813      	ldr	r3, [r2, #0]
 80043ac:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80043ae:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80043b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80043b2:	d109      	bne.n	80043c8 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80043b4:	4b33      	ldr	r3, [pc, #204]	; (8004484 <HAL_ADC_MspInit+0x1f0>)
 80043b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	9b04      	ldr	r3, [sp, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 80043c8:	4c34      	ldr	r4, [pc, #208]	; (800449c <HAL_ADC_MspInit+0x208>)
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80043ca:	4e35      	ldr	r6, [pc, #212]	; (80044a0 <HAL_ADC_MspInit+0x20c>)
 80043cc:	2324      	movs	r3, #36	; 0x24
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d2:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80043d6:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043da:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043de:	2300      	movs	r3, #0
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e4:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80043e8:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80043ec:	4620      	mov	r0, r4
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80043ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80043f4:	f002 f81a 	bl	800642c <HAL_DMA_Init>
 80043f8:	b108      	cbz	r0, 80043fe <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 80043fa:	f7ff ff19 	bl	8004230 <Error_Handler>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80043fe:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004400:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004402:	4611      	mov	r1, r2
 8004404:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004406:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004408:	f001 fe82 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800440c:	2012      	movs	r0, #18
 800440e:	f001 feb1 	bl	8006174 <HAL_NVIC_EnableIRQ>
 8004412:	e7b8      	b.n	8004386 <HAL_ADC_MspInit+0xf2>
  else if(hadc->Instance==ADC5)
 8004414:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_ADC_MspInit+0x210>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d1b5      	bne.n	8004386 <HAL_ADC_MspInit+0xf2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800441a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800441e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004420:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004422:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004426:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004428:	f003 fe9a 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 800442c:	b108      	cbz	r0, 8004432 <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 800442e:	f7ff feff 	bl	8004230 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <HAL_ADC_MspInit+0x1f0>)
    hdma_adc5.Instance = DMA1_Channel4;
 8004434:	4c1c      	ldr	r4, [pc, #112]	; (80044a8 <HAL_ADC_MspInit+0x214>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443c:	64da      	str	r2, [r3, #76]	; 0x4c
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8004440:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <HAL_ADC_MspInit+0x218>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	9b05      	ldr	r3, [sp, #20]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800444a:	2327      	movs	r3, #39	; 0x27
 800444c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004456:	2300      	movs	r3, #0
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004458:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800445c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8004460:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8004464:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8004468:	4620      	mov	r0, r4
    hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 800446a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800446e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8004470:	f001 ffdc 	bl	800642c <HAL_DMA_Init>
 8004474:	b108      	cbz	r0, 800447a <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8004476:	f7ff fedb 	bl	8004230 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800447a:	656c      	str	r4, [r5, #84]	; 0x54
 800447c:	62a5      	str	r5, [r4, #40]	; 0x28
}
 800447e:	e782      	b.n	8004386 <HAL_ADC_MspInit+0xf2>
 8004480:	20000d50 	.word	0x20000d50
 8004484:	40021000 	.word	0x40021000
 8004488:	48000400 	.word	0x48000400
 800448c:	20000d54 	.word	0x20000d54
 8004490:	4002001c 	.word	0x4002001c
 8004494:	0800f4d5 	.word	0x0800f4d5
 8004498:	50000100 	.word	0x50000100
 800449c:	20000db4 	.word	0x20000db4
 80044a0:	40020030 	.word	0x40020030
 80044a4:	50000600 	.word	0x50000600
 80044a8:	20000e14 	.word	0x20000e14
 80044ac:	40020044 	.word	0x40020044

080044b0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80044b0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b2:	2214      	movs	r2, #20
{
 80044b4:	b08a      	sub	sp, #40	; 0x28
 80044b6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	2100      	movs	r1, #0
 80044ba:	eb0d 0002 	add.w	r0, sp, r2
 80044be:	f007 f9c5 	bl	800b84c <memset>
  if(hcomp->Instance==COMP2)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <HAL_COMP_MspInit+0xac>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d114      	bne.n	80044f4 <HAL_COMP_MspInit+0x44>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_COMP_MspInit+0xb0>)
 80044cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	9b01      	ldr	r3, [sp, #4]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	2303      	movs	r3, #3
 80044e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e6:	a905      	add	r1, sp, #20
 80044e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PB14     ------> COMP7_INP
    */
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f002 f90c 	bl	8006708 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80044f0:	b00a      	add	sp, #40	; 0x28
 80044f2:	bd10      	pop	{r4, pc}
  else if(hcomp->Instance==COMP4)
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_COMP_MspInit+0xb4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d110      	bne.n	800451c <HAL_COMP_MspInit+0x6c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_COMP_MspInit+0xb0>)
 80044fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044fe:	f042 0202 	orr.w	r2, r2, #2
 8004502:	64da      	str	r2, [r3, #76]	; 0x4c
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 800450e:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8004510:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004512:	2303      	movs	r3, #3
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8004514:	4814      	ldr	r0, [pc, #80]	; (8004568 <HAL_COMP_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004516:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8004518:	a905      	add	r1, sp, #20
 800451a:	e7e7      	b.n	80044ec <HAL_COMP_MspInit+0x3c>
  else if(hcomp->Instance==COMP5)
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <HAL_COMP_MspInit+0xbc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_COMP_MspInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_COMP_MspInit+0xb0>)
 8004524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004526:	f042 0202 	orr.w	r2, r2, #2
 800452a:	64da      	str	r2, [r3, #76]	; 0x4c
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	9303      	str	r3, [sp, #12]
 8004534:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8004536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453a:	e7e9      	b.n	8004510 <HAL_COMP_MspInit+0x60>
  else if(hcomp->Instance==COMP7)
 800453c:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <HAL_COMP_MspInit+0xc0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d1d6      	bne.n	80044f0 <HAL_COMP_MspInit+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <HAL_COMP_MspInit+0xb0>)
 8004544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004546:	f042 0202 	orr.w	r2, r2, #2
 800454a:	64da      	str	r2, [r3, #76]	; 0x4c
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8004556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800455a:	e7d9      	b.n	8004510 <HAL_COMP_MspInit+0x60>
 800455c:	40010204 	.word	0x40010204
 8004560:	40021000 	.word	0x40021000
 8004564:	4001020c 	.word	0x4001020c
 8004568:	48000400 	.word	0x48000400
 800456c:	40010210 	.word	0x40010210
 8004570:	40010218 	.word	0x40010218

08004574 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 8004574:	6803      	ldr	r3, [r0, #0]
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_DAC_MspInit+0x78>)
 8004578:	4293      	cmp	r3, r2
{
 800457a:	b084      	sub	sp, #16
  if(hdac->Instance==DAC1)
 800457c:	d10b      	bne.n	8004596 <HAL_DAC_MspInit+0x22>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <HAL_DAC_MspInit+0x7c>)
 8004580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004582:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004586:	64da      	str	r2, [r3, #76]	; 0x4c
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr
  else if(hdac->Instance==DAC2)
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_DAC_MspInit+0x80>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10a      	bne.n	80045b2 <HAL_DAC_MspInit+0x3e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_DAC_MspInit+0x7c>)
 800459e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	9b01      	ldr	r3, [sp, #4]
 80045b0:	e7ef      	b.n	8004592 <HAL_DAC_MspInit+0x1e>
  else if(hdac->Instance==DAC3)
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <HAL_DAC_MspInit+0x84>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10a      	bne.n	80045ce <HAL_DAC_MspInit+0x5a>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80045b8:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_DAC_MspInit+0x7c>)
 80045ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	9b02      	ldr	r3, [sp, #8]
 80045cc:	e7e1      	b.n	8004592 <HAL_DAC_MspInit+0x1e>
  else if(hdac->Instance==DAC4)
 80045ce:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <HAL_DAC_MspInit+0x88>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d1de      	bne.n	8004592 <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_DAC_MspInit+0x7c>)
 80045d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80045dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e4:	9303      	str	r3, [sp, #12]
 80045e6:	9b03      	ldr	r3, [sp, #12]
}
 80045e8:	e7d3      	b.n	8004592 <HAL_DAC_MspInit+0x1e>
 80045ea:	bf00      	nop
 80045ec:	50000800 	.word	0x50000800
 80045f0:	40021000 	.word	0x40021000
 80045f4:	50000c00 	.word	0x50000c00
 80045f8:	50001000 	.word	0x50001000
 80045fc:	50001400 	.word	0x50001400

08004600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004600:	b530      	push	{r4, r5, lr}
 8004602:	b09d      	sub	sp, #116	; 0x74
 8004604:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004606:	2214      	movs	r2, #20
 8004608:	2100      	movs	r1, #0
 800460a:	a802      	add	r0, sp, #8
 800460c:	f007 f91e 	bl	800b84c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004610:	2254      	movs	r2, #84	; 0x54
 8004612:	2100      	movs	r1, #0
 8004614:	a807      	add	r0, sp, #28
 8004616:	f007 f919 	bl	800b84c <memset>
  if(hi2c->Instance==I2C2)
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_I2C_MspInit+0x8c>)
 800461e:	429a      	cmp	r2, r3
 8004620:	d131      	bne.n	8004686 <HAL_I2C_MspInit+0x86>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004622:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004624:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004626:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004628:	f003 fd9a 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 800462c:	b108      	cbz	r0, 8004632 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 800462e:	f7ff fdff 	bl	8004230 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004632:	4c17      	ldr	r4, [pc, #92]	; (8004690 <HAL_I2C_MspInit+0x90>)
 8004634:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800463c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	9300      	str	r3, [sp, #0]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004644:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004648:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800464a:	2312      	movs	r3, #18
 800464c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004652:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	a902      	add	r1, sp, #8
 8004656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800465a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	e9cd 5504 	strd	r5, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	f002 f852 	bl	8006708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004666:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800466a:	65a3      	str	r3, [r4, #88]	; 0x58
 800466c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	9301      	str	r3, [sp, #4]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004674:	2021      	movs	r0, #33	; 0x21
 8004676:	462a      	mov	r2, r5
 8004678:	4629      	mov	r1, r5
    __HAL_RCC_I2C2_CLK_ENABLE();
 800467a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800467c:	f001 fd48 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004680:	2021      	movs	r0, #33	; 0x21
 8004682:	f001 fd77 	bl	8006174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004686:	b01d      	add	sp, #116	; 0x74
 8004688:	bd30      	pop	{r4, r5, pc}
 800468a:	bf00      	nop
 800468c:	40005800 	.word	0x40005800
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004694:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004696:	2214      	movs	r2, #20
{
 8004698:	b08a      	sub	sp, #40	; 0x28
 800469a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	2100      	movs	r1, #0
 800469e:	eb0d 0002 	add.w	r0, sp, r2
 80046a2:	f007 f8d3 	bl	800b84c <memset>
  if(hopamp->Instance==OPAMP1)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <HAL_OPAMP_MspInit+0xcc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d114      	bne.n	80046d8 <HAL_OPAMP_MspInit+0x44>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_OPAMP_MspInit+0xd0>)
 80046b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	9b00      	ldr	r3, [sp, #0]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 80046c2:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**OPAMP2 GPIO Configuration
    PA5     ------> OPAMP2_VINM0
    PA7     ------> OPAMP2_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046c6:	2303      	movs	r3, #3
 80046c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PB15     ------> OPAMP5_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	f002 f81a 	bl	8006708 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 80046d4:	b00a      	add	sp, #40	; 0x28
 80046d6:	bd10      	pop	{r4, pc}
  else if(hopamp->Instance==OPAMP2)
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_OPAMP_MspInit+0xd4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10b      	bne.n	80046f6 <HAL_OPAMP_MspInit+0x62>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_OPAMP_MspInit+0xd0>)
 80046e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046f2:	23a0      	movs	r3, #160	; 0xa0
 80046f4:	e7e6      	b.n	80046c4 <HAL_OPAMP_MspInit+0x30>
  else if(hopamp->Instance==OPAMP3)
 80046f6:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_OPAMP_MspInit+0xd8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d110      	bne.n	800471e <HAL_OPAMP_MspInit+0x8a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_OPAMP_MspInit+0xd0>)
 80046fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004700:	f042 0202 	orr.w	r2, r2, #2
 8004704:	64da      	str	r2, [r3, #76]	; 0x4c
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 8004710:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8004712:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004714:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004716:	4816      	ldr	r0, [pc, #88]	; (8004770 <HAL_OPAMP_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004718:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471a:	a905      	add	r1, sp, #20
 800471c:	e7d8      	b.n	80046d0 <HAL_OPAMP_MspInit+0x3c>
  else if(hopamp->Instance==OPAMP4)
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_OPAMP_MspInit+0xe0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10c      	bne.n	800473e <HAL_OPAMP_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_OPAMP_MspInit+0xd0>)
 8004726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004728:	f042 0202 	orr.w	r2, r2, #2
 800472c:	64da      	str	r2, [r3, #76]	; 0x4c
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8004738:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800473c:	e7e9      	b.n	8004712 <HAL_OPAMP_MspInit+0x7e>
  else if(hopamp->Instance==OPAMP5)
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_OPAMP_MspInit+0xe4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d1c7      	bne.n	80046d4 <HAL_OPAMP_MspInit+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_OPAMP_MspInit+0xd0>)
 8004746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004748:	f042 0202 	orr.w	r2, r2, #2
 800474c:	64da      	str	r2, [r3, #76]	; 0x4c
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8004758:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800475c:	e7d9      	b.n	8004712 <HAL_OPAMP_MspInit+0x7e>
 800475e:	bf00      	nop
 8004760:	40010300 	.word	0x40010300
 8004764:	40021000 	.word	0x40021000
 8004768:	40010304 	.word	0x40010304
 800476c:	40010308 	.word	0x40010308
 8004770:	48000400 	.word	0x48000400
 8004774:	4001030c 	.word	0x4001030c
 8004778:	40010310 	.word	0x40010310

0800477c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <HAL_TIM_Base_MspInit+0xb0>)
 8004780:	4293      	cmp	r3, r2
{
 8004782:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8004784:	d10b      	bne.n	800479e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004786:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <HAL_TIM_Base_MspInit+0xb4>)
 8004788:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800478a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800479a:	b006      	add	sp, #24
 800479c:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d10b      	bne.n	80047bc <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80047a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	659a      	str	r2, [r3, #88]	; 0x58
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	e7ee      	b.n	800479a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM4)
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10a      	bne.n	80047d8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_TIM_Base_MspInit+0xb4>)
 80047c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047c6:	f042 0204 	orr.w	r2, r2, #4
 80047ca:	659a      	str	r2, [r3, #88]	; 0x58
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	9b02      	ldr	r3, [sp, #8]
 80047d6:	e7e0      	b.n	800479a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_TIM_Base_MspInit+0xbc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10a      	bne.n	80047f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_TIM_Base_MspInit+0xb4>)
 80047e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
 80047e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	e7d2      	b.n	800479a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM16)
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <HAL_TIM_Base_MspInit+0xc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10a      	bne.n	8004810 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_TIM_Base_MspInit+0xb4>)
 80047fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	e7c4      	b.n	800479a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM20)
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <HAL_TIM_Base_MspInit+0xc4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d1c1      	bne.n	800479a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_TIM_Base_MspInit+0xb4>)
 8004818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800481a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800481e:	661a      	str	r2, [r3, #96]	; 0x60
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	9b05      	ldr	r3, [sp, #20]
}
 800482a:	e7b6      	b.n	800479a <HAL_TIM_Base_MspInit+0x1e>
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40021000 	.word	0x40021000
 8004834:	40000800 	.word	0x40000800
 8004838:	40013400 	.word	0x40013400
 800483c:	40014400 	.word	0x40014400
 8004840:	40015000 	.word	0x40015000

08004844 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8004844:	6802      	ldr	r2, [r0, #0]
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_TIM_PWM_MspInit+0x24>)
 8004848:	429a      	cmp	r2, r3
{
 800484a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 800484c:	d10a      	bne.n	8004864 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800484e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004852:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004854:	f042 0202 	orr.w	r2, r2, #2
 8004858:	659a      	str	r2, [r3, #88]	; 0x58
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004864:	b002      	add	sp, #8
 8004866:	4770      	bx	lr
 8004868:	40000400 	.word	0x40000400

0800486c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800486c:	b510      	push	{r4, lr}
 800486e:	4604      	mov	r4, r0
 8004870:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004872:	2214      	movs	r2, #20
 8004874:	2100      	movs	r1, #0
 8004876:	a807      	add	r0, sp, #28
 8004878:	f006 ffe8 	bl	800b84c <memset>
  if(htim->Instance==TIM1)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	4a3f      	ldr	r2, [pc, #252]	; (800497c <HAL_TIM_MspPostInit+0x110>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d115      	bne.n	80048b0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004884:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8004886:	483f      	ldr	r0, [pc, #252]	; (8004984 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800488a:	f042 0220 	orr.w	r2, r2, #32
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004898:	2101      	movs	r1, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800489a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489c:	2302      	movs	r3, #2
 800489e:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80048a2:	2306      	movs	r3, #6
 80048a4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 80048a6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 80048a8:	f001 ff2e 	bl	8006708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80048ac:	b00c      	add	sp, #48	; 0x30
 80048ae:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 80048b0:	4a35      	ldr	r2, [pc, #212]	; (8004988 <HAL_TIM_MspPostInit+0x11c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <HAL_TIM_MspPostInit+0x6e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b6:	4b32      	ldr	r3, [pc, #200]	; (8004980 <HAL_TIM_MspPostInit+0x114>)
 80048b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ba:	f042 0202 	orr.w	r2, r2, #2
 80048be:	64da      	str	r2, [r3, #76]	; 0x4c
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 80048ca:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 80048cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 80048d2:	482e      	ldr	r0, [pc, #184]	; (800498c <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80048d4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 80048d6:	a907      	add	r1, sp, #28
 80048d8:	e7e6      	b.n	80048a8 <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM4)
 80048da:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <HAL_TIM_MspPostInit+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_TIM_MspPostInit+0x114>)
 80048e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e4:	f042 0202 	orr.w	r2, r2, #2
 80048e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	9303      	str	r3, [sp, #12]
 80048f2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 80048f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80048f8:	e7e8      	b.n	80048cc <HAL_TIM_MspPostInit+0x60>
  else if(htim->Instance==TIM8)
 80048fa:	4a26      	ldr	r2, [pc, #152]	; (8004994 <HAL_TIM_MspPostInit+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d126      	bne.n	800494e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_TIM_MspPostInit+0x114>)
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8004902:	4825      	ldr	r0, [pc, #148]	; (8004998 <HAL_TIM_MspPostInit+0x12c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004906:	f042 0204 	orr.w	r2, r2, #4
 800490a:	64da      	str	r2, [r3, #76]	; 0x4c
 800490c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800490e:	f002 0204 	and.w	r2, r2, #4
 8004912:	9204      	str	r2, [sp, #16]
 8004914:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004918:	f042 0202 	orr.w	r2, r2, #2
 800491c:	64da      	str	r2, [r3, #76]	; 0x4c
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2402      	movs	r4, #2
 800492a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800492e:	e9cd 3407 	strd	r3, r4, [sp, #28]
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8004932:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8004934:	2306      	movs	r3, #6
 8004936:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8004938:	f001 fee6 	bl	8006708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 800493c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004946:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800494a:	230a      	movs	r3, #10
 800494c:	e7c1      	b.n	80048d2 <HAL_TIM_MspPostInit+0x66>
  else if(htim->Instance==TIM16)
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_TIM_MspPostInit+0x130>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d1ab      	bne.n	80048ac <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_TIM_MspPostInit+0x114>)
 8004956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	64da      	str	r2, [r3, #76]	; 0x4c
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	9306      	str	r3, [sp, #24]
 8004966:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	2302      	movs	r3, #2
 800496c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004970:	2301      	movs	r3, #1
 8004972:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8004974:	a907      	add	r1, sp, #28
 8004976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800497a:	e795      	b.n	80048a8 <HAL_TIM_MspPostInit+0x3c>
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40021000 	.word	0x40021000
 8004984:	48001400 	.word	0x48001400
 8004988:	40000400 	.word	0x40000400
 800498c:	48000400 	.word	0x48000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40013400 	.word	0x40013400
 8004998:	48000800 	.word	0x48000800
 800499c:	40014400 	.word	0x40014400

080049a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b0a1      	sub	sp, #132	; 0x84
 80049a4:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a6:	2214      	movs	r2, #20
 80049a8:	2100      	movs	r1, #0
 80049aa:	a806      	add	r0, sp, #24
 80049ac:	f006 ff4e 	bl	800b84c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049b0:	2254      	movs	r2, #84	; 0x54
 80049b2:	2100      	movs	r1, #0
 80049b4:	a80b      	add	r0, sp, #44	; 0x2c
 80049b6:	f006 ff49 	bl	800b84c <memset>
  if(huart->Instance==USART1)
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	4a6d      	ldr	r2, [pc, #436]	; (8004b74 <HAL_UART_MspInit+0x1d4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d176      	bne.n	8004ab0 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049c2:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049c4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049c6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049c8:	f003 fbca 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 80049cc:	b108      	cbz	r0, 80049d2 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80049ce:	f7ff fc2f 	bl	8004230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049d2:	4b69      	ldr	r3, [pc, #420]	; (8004b78 <HAL_UART_MspInit+0x1d8>)
 80049d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
 80049dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80049e2:	9201      	str	r2, [sp, #4]
 80049e4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80049ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f0:	f002 0201 	and.w	r2, r2, #1
 80049f4:	9202      	str	r2, [sp, #8]
 80049f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049fa:	f042 0202 	orr.w	r2, r2, #2
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	9303      	str	r3, [sp, #12]
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a08:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a0a:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a0e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a14:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a16:	a906      	add	r1, sp, #24
 8004a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1c:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a20:	e9cd 6608 	strd	r6, r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a24:	f001 fe70 	bl	8006708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a28:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2a:	4854      	ldr	r0, [pc, #336]	; (8004b7c <HAL_UART_MspInit+0x1dc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a2c:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	a906      	add	r1, sp, #24

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004a30:	4c53      	ldr	r4, [pc, #332]	; (8004b80 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a32:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a36:	e9cd 6608 	strd	r6, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3a:	f001 fe65 	bl	8006708 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004a3e:	4a51      	ldr	r2, [pc, #324]	; (8004b84 <HAL_UART_MspInit+0x1e4>)
 8004a40:	2318      	movs	r3, #24
 8004a42:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a46:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a48:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a4c:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a52:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004a56:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a5a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a5c:	f001 fce6 	bl	800642c <HAL_DMA_Init>
 8004a60:	b108      	cbz	r0, 8004a66 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004a62:	f7ff fbe5 	bl	8004230 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004a66:	f8df c138 	ldr.w	ip, [pc, #312]	; 8004ba0 <HAL_UART_MspInit+0x200>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004a6a:	67ec      	str	r4, [r5, #124]	; 0x7c
 8004a6c:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8004a6e:	4c46      	ldr	r4, [pc, #280]	; (8004b88 <HAL_UART_MspInit+0x1e8>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004a70:	2319      	movs	r3, #25
 8004a72:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a76:	f04f 0e10 	mov.w	lr, #16
 8004a7a:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a7c:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a7e:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a80:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a84:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a88:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a8c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a8e:	f001 fccd 	bl	800642c <HAL_DMA_Init>
 8004a92:	b108      	cbz	r0, 8004a98 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8004a94:	f7ff fbcc 	bl	8004230 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a9c:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a9e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004aa0:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004aa2:	f001 fb35 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aa6:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aa8:	f001 fb64 	bl	8006174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004aac:	b021      	add	sp, #132	; 0x84
 8004aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8004ab0:	4a36      	ldr	r2, [pc, #216]	; (8004b8c <HAL_UART_MspInit+0x1ec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d1fa      	bne.n	8004aac <HAL_UART_MspInit+0x10c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004ab6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ab8:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004aba:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004abc:	f003 fb50 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 8004ac0:	b108      	cbz	r0, 8004ac6 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8004ac2:	f7ff fbb5 	bl	8004230 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_UART_MspInit+0x1d8>)
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8004ac8:	4c31      	ldr	r4, [pc, #196]	; (8004b90 <HAL_UART_MspInit+0x1f0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004aca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004acc:	4f31      	ldr	r7, [pc, #196]	; (8004b94 <HAL_UART_MspInit+0x1f4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ace:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ad6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004ada:	9204      	str	r2, [sp, #16]
 8004adc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	9305      	str	r3, [sp, #20]
 8004aee:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	f248 0004 	movw	r0, #32772	; 0x8004
 8004af4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af8:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004afe:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b04:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b06:	e9cd 6608 	strd	r6, r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0a:	f001 fdfd 	bl	8006708 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004b0e:	231a      	movs	r3, #26
 8004b10:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b14:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b16:	e9c4 3604 	strd	r3, r6, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b1a:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b20:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004b24:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b28:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b2a:	f001 fc7f 	bl	800642c <HAL_DMA_Init>
 8004b2e:	b108      	cbz	r0, 8004b34 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8004b30:	f7ff fb7e 	bl	8004230 <Error_Handler>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_UART_MspInit+0x1f8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004b36:	67ec      	str	r4, [r5, #124]	; 0x7c
 8004b38:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 8004b3a:	4c18      	ldr	r4, [pc, #96]	; (8004b9c <HAL_UART_MspInit+0x1fc>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004b3c:	231b      	movs	r3, #27
 8004b3e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b42:	2110      	movs	r1, #16
 8004b44:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b46:	2280      	movs	r2, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b48:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b4a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b4e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004b52:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b56:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b58:	f001 fc68 	bl	800642c <HAL_DMA_Init>
 8004b5c:	b108      	cbz	r0, 8004b62 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8004b5e:	f7ff fb67 	bl	8004230 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004b66:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b68:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004b6a:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b6c:	f001 fad0 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b70:	2026      	movs	r0, #38	; 0x26
 8004b72:	e799      	b.n	8004aa8 <HAL_UART_MspInit+0x108>
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	48000400 	.word	0x48000400
 8004b80:	20000e74 	.word	0x20000e74
 8004b84:	40020008 	.word	0x40020008
 8004b88:	20000ed4 	.word	0x20000ed4
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	20000f34 	.word	0x20000f34
 8004b94:	40020408 	.word	0x40020408
 8004b98:	4002006c 	.word	0x4002006c
 8004b9c:	20000f94 	.word	0x20000f94
 8004ba0:	40020058 	.word	0x40020058

08004ba4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ba4:	e7fe      	b.n	8004ba4 <NMI_Handler>

08004ba6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ba6:	e7fe      	b.n	8004ba6 <HardFault_Handler>

08004ba8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba8:	e7fe      	b.n	8004ba8 <MemManage_Handler>

08004baa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004baa:	e7fe      	b.n	8004baa <BusFault_Handler>

08004bac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bac:	e7fe      	b.n	8004bac <UsageFault_Handler>

08004bae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bae:	4770      	bx	lr

08004bb0 <DebugMon_Handler>:
 8004bb0:	4770      	bx	lr

08004bb2 <PendSV_Handler>:
 8004bb2:	4770      	bx	lr

08004bb4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bb4:	f000 b91e 	b.w	8004df4 <HAL_IncTick>

08004bb8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <DMA1_Channel1_IRQHandler+0x8>)
 8004bba:	f001 bd5a 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004bbe:	bf00      	nop
 8004bc0:	20000e74 	.word	0x20000e74

08004bc4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <DMA1_Channel2_IRQHandler+0x8>)
 8004bc6:	f001 bd54 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004bca:	bf00      	nop
 8004bcc:	20000d54 	.word	0x20000d54

08004bd0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <DMA1_Channel3_IRQHandler+0x8>)
 8004bd2:	f001 bd4e 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004bd6:	bf00      	nop
 8004bd8:	20000db4 	.word	0x20000db4

08004bdc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <DMA1_Channel4_IRQHandler+0x8>)
 8004bde:	f001 bd48 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004be2:	bf00      	nop
 8004be4:	20000e14 	.word	0x20000e14

08004be8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <DMA1_Channel5_IRQHandler+0x8>)
 8004bea:	f001 bd42 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004bee:	bf00      	nop
 8004bf0:	20000ed4 	.word	0x20000ed4

08004bf4 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004bf4:	4801      	ldr	r0, [pc, #4]	; (8004bfc <DMA1_Channel6_IRQHandler+0x8>)
 8004bf6:	f001 bd3c 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004bfa:	bf00      	nop
 8004bfc:	20000f94 	.word	0x20000f94

08004c00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c02:	4804      	ldr	r0, [pc, #16]	; (8004c14 <ADC1_2_IRQHandler+0x14>)
 8004c04:	f000 faea 	bl	80051dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <ADC1_2_IRQHandler+0x18>)
 8004c0e:	f000 bae5 	b.w	80051dc <HAL_ADC_IRQHandler>
 8004c12:	bf00      	nop
 8004c14:	20000870 	.word	0x20000870
 8004c18:	200008dc 	.word	0x200008dc

08004c1c <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <USB_LP_IRQHandler+0x8>)
 8004c1e:	f002 b8b9 	b.w	8006d94 <HAL_PCD_IRQHandler>
 8004c22:	bf00      	nop
 8004c24:	20002514 	.word	0x20002514

08004c28 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <I2C2_EV_IRQHandler+0x8>)
 8004c2a:	f001 be9e 	b.w	800696a <HAL_I2C_EV_IRQHandler>
 8004c2e:	bf00      	nop
 8004c30:	20000ab8 	.word	0x20000ab8

08004c34 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <USART1_IRQHandler+0x8>)
 8004c36:	f004 baa1 	b.w	800917c <HAL_UART_IRQHandler>
 8004c3a:	bf00      	nop
 8004c3c:	20000c30 	.word	0x20000c30

08004c40 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <USART2_IRQHandler+0x8>)
 8004c42:	f004 ba9b 	b.w	800917c <HAL_UART_IRQHandler>
 8004c46:	bf00      	nop
 8004c48:	20000cc0 	.word	0x20000cc0

08004c4c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <DMA2_Channel1_IRQHandler+0x8>)
 8004c4e:	f001 bd10 	b.w	8006672 <HAL_DMA_IRQHandler>
 8004c52:	bf00      	nop
 8004c54:	20000f34 	.word	0x20000f34

08004c58 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004c58:	2001      	movs	r0, #1
 8004c5a:	4770      	bx	lr

08004c5c <_kill>:

int _kill(int pid, int sig)
{
 8004c5c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c5e:	f006 fda5 	bl	800b7ac <__errno>
 8004c62:	2316      	movs	r3, #22
 8004c64:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	bd08      	pop	{r3, pc}

08004c6c <_exit>:

void _exit (int status)
{
 8004c6c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004c6e:	f006 fd9d 	bl	800b7ac <__errno>
 8004c72:	2316      	movs	r3, #22
 8004c74:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004c76:	e7fe      	b.n	8004c76 <_exit+0xa>

08004c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c7e:	460e      	mov	r6, r1
 8004c80:	1b73      	subs	r3, r6, r5
 8004c82:	429c      	cmp	r4, r3
 8004c84:	dc01      	bgt.n	8004c8a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004c86:	4620      	mov	r0, r4
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004c8a:	f3af 8000 	nop.w
 8004c8e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c92:	e7f5      	b.n	8004c80 <_read+0x8>

08004c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8004c94:	3801      	subs	r0, #1
 8004c96:	2801      	cmp	r0, #1
{
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4614      	mov	r4, r2
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8004c9e:	d80f      	bhi.n	8004cc0 <_write+0x2c>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f006 fb34 	bl	800b310 <CDC_Transmit_FS>
 8004ca8:	b2c0      	uxtb	r0, r0
		        } while (result == USBD_BUSY);
 8004caa:	2801      	cmp	r0, #1
 8004cac:	d0f8      	beq.n	8004ca0 <_write+0xc>
		        if (result != USBD_OK)
 8004cae:	b128      	cbz	r0, 8004cbc <_write+0x28>
		        {
		            errno = EIO;
 8004cb0:	f006 fd7c 	bl	800b7ac <__errno>
 8004cb4:	2305      	movs	r3, #5
		            return -1;
		        }
		        return len;
		    }
		    errno = EBADF;
 8004cb6:	6003      	str	r3, [r0, #0]
		    return -1;
 8004cb8:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
		    errno = EBADF;
 8004cc0:	f006 fd74 	bl	800b7ac <__errno>
 8004cc4:	2309      	movs	r3, #9
 8004cc6:	e7f6      	b.n	8004cb6 <_write+0x22>

08004cc8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	4770      	bx	lr

08004cce <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cd2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	4770      	bx	lr

08004cd8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004cd8:	2001      	movs	r0, #1
 8004cda:	4770      	bx	lr

08004cdc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4770      	bx	lr

08004ce0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <_sbrk+0x30>)
 8004ce2:	6811      	ldr	r1, [r2, #0]
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004ce8:	b909      	cbnz	r1, 8004cee <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <_sbrk+0x34>)
 8004cec:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cee:	6810      	ldr	r0, [r2, #0]
 8004cf0:	4909      	ldr	r1, [pc, #36]	; (8004d18 <_sbrk+0x38>)
 8004cf2:	4c0a      	ldr	r4, [pc, #40]	; (8004d1c <_sbrk+0x3c>)
 8004cf4:	4403      	add	r3, r0
 8004cf6:	1b09      	subs	r1, r1, r4
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d906      	bls.n	8004d0a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004cfc:	f006 fd56 	bl	800b7ac <__errno>
 8004d00:	230c      	movs	r3, #12
 8004d02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004d08:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004d0a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004d0c:	e7fc      	b.n	8004d08 <_sbrk+0x28>
 8004d0e:	bf00      	nop
 8004d10:	20000ff4 	.word	0x20000ff4
 8004d14:	20002a38 	.word	0x20002a38
 8004d18:	20020000 	.word	0x20020000
 8004d1c:	00000400 	.word	0x00000400

08004d20 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d20:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <SystemInit+0x10>)
 8004d22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d2e:	4770      	bx	lr
 8004d30:	e000ed00 	.word	0xe000ed00

08004d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d34:	480d      	ldr	r0, [pc, #52]	; (8004d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d38:	480d      	ldr	r0, [pc, #52]	; (8004d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d3a:	490e      	ldr	r1, [pc, #56]	; (8004d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <LoopForever+0xe>)
  movs r3, #0
 8004d3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004d40:	e002      	b.n	8004d48 <LoopCopyDataInit>

08004d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d46:	3304      	adds	r3, #4

08004d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d4c:	d3f9      	bcc.n	8004d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d4e:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d50:	4c0b      	ldr	r4, [pc, #44]	; (8004d80 <LoopForever+0x16>)
  movs r3, #0
 8004d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d54:	e001      	b.n	8004d5a <LoopFillZerobss>

08004d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d58:	3204      	adds	r2, #4

08004d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d5c:	d3fb      	bcc.n	8004d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d5e:	f7ff ffdf 	bl	8004d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d62:	f006 fd29 	bl	800b7b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d66:	f7ff f9e3 	bl	8004130 <main>

08004d6a <LoopForever>:

LoopForever:
    b LoopForever
 8004d6a:	e7fe      	b.n	8004d6a <LoopForever>
  ldr   r0, =_estack
 8004d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d74:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004d78:	0800f974 	.word	0x0800f974
  ldr r2, =_sbss
 8004d7c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004d80:	20002a38 	.word	0x20002a38

08004d84 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d84:	e7fe      	b.n	8004d84 <ADC3_IRQHandler>
	...

08004d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d88:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_InitTick+0x40>)
{
 8004d8c:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	b908      	cbnz	r0, 8004d96 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <HAL_InitTick+0x44>)
 8004d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004da0:	6810      	ldr	r0, [r2, #0]
 8004da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004da6:	f001 f9f3 	bl	8006190 <HAL_SYSTICK_Config>
 8004daa:	4604      	mov	r4, r0
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004db0:	2d0f      	cmp	r5, #15
 8004db2:	d8ee      	bhi.n	8004d92 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004db4:	4602      	mov	r2, r0
 8004db6:	4629      	mov	r1, r5
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	f001 f9a8 	bl	8006110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_InitTick+0x48>)
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	601d      	str	r5, [r3, #0]
  return status;
 8004dc6:	e7e5      	b.n	8004d94 <HAL_InitTick+0xc>
 8004dc8:	20000004 	.word	0x20000004
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	20000008 	.word	0x20000008

08004dd4 <HAL_Init>:
{
 8004dd4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dd6:	2003      	movs	r0, #3
 8004dd8:	f001 f988 	bl	80060ec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ddc:	200f      	movs	r0, #15
 8004dde:	f7ff ffd3 	bl	8004d88 <HAL_InitTick>
 8004de2:	4604      	mov	r4, r0
 8004de4:	b918      	cbnz	r0, 8004dee <HAL_Init+0x1a>
    HAL_MspInit();
 8004de6:	f7ff fa3d 	bl	8004264 <HAL_MspInit>
}
 8004dea:	4620      	mov	r0, r4
 8004dec:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004dee:	2401      	movs	r4, #1
 8004df0:	e7fb      	b.n	8004dea <HAL_Init+0x16>
	...

08004df4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004df4:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <HAL_IncTick+0x10>)
 8004df6:	4904      	ldr	r1, [pc, #16]	; (8004e08 <HAL_IncTick+0x14>)
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	6809      	ldr	r1, [r1, #0]
 8004dfc:	440b      	add	r3, r1
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000ff8 	.word	0x20000ff8
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e0c:	4b01      	ldr	r3, [pc, #4]	; (8004e14 <HAL_GetTick+0x8>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000ff8 	.word	0x20000ff8

08004e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e1c:	f7ff fff6 	bl	8004e0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e20:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004e22:	bf1c      	itt	ne
 8004e24:	4b05      	ldrne	r3, [pc, #20]	; (8004e3c <HAL_Delay+0x24>)
 8004e26:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004e28:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004e2a:	bf18      	it	ne
 8004e2c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e2e:	f7ff ffed 	bl	8004e0c <HAL_GetTick>
 8004e32:	1b43      	subs	r3, r0, r5
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d3fa      	bcc.n	8004e2e <HAL_Delay+0x16>
  {
  }
}
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000004 	.word	0x20000004

08004e40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e40:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e42:	0dcc      	lsrs	r4, r1, #23
 8004e44:	f004 0404 	and.w	r4, r4, #4
 8004e48:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8004e4a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004e4e:	5823      	ldr	r3, [r4, r0]
 8004e50:	2507      	movs	r5, #7
 8004e52:	408d      	lsls	r5, r1
 8004e54:	ea23 0305 	bic.w	r3, r3, r5
 8004e58:	fa02 f101 	lsl.w	r1, r2, r1
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004e60:	bd30      	pop	{r4, r5, pc}

08004e62 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e62:	6880      	ldr	r0, [r0, #8]
}
 8004e64:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8004e68:	4770      	bx	lr
	...

08004e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e72:	4604      	mov	r4, r0
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f000 80fb 	beq.w	8005070 <HAL_ADC_Init+0x204>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e7a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004e7c:	b925      	cbnz	r5, 8004e88 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e7e:	f7ff fa09 	bl	8004294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e82:	6625      	str	r5, [r4, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e84:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e88:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e8a:	6883      	ldr	r3, [r0, #8]
 8004e8c:	0099      	lsls	r1, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e8e:	bf41      	itttt	mi
 8004e90:	6883      	ldrmi	r3, [r0, #8]
 8004e92:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8004e96:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8004e9a:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e9c:	6883      	ldr	r3, [r0, #8]
 8004e9e:	00da      	lsls	r2, r3, #3
 8004ea0:	f140 80a2 	bpl.w	8004fe8 <HAL_ADC_Init+0x17c>
 8004ea4:	6883      	ldr	r3, [r0, #8]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	f100 80b5 	bmi.w	8005016 <HAL_ADC_Init+0x1aa>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004eae:	f043 0310 	orr.w	r3, r3, #16
 8004eb2:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ebc:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ebe:	f7ff ffd0 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ec2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ecc:	f040 80cd 	bne.w	800506a <HAL_ADC_Init+0x1fe>
    ADC_STATE_CLR_SET(hadc->State,
 8004ed0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ed4:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed8:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8004eda:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004edc:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ede:	07de      	lsls	r6, r3, #31
 8004ee0:	d40e      	bmi.n	8004f00 <HAL_ADC_Init+0x94>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ee2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004ee6:	4a63      	ldr	r2, [pc, #396]	; (8005074 <HAL_ADC_Init+0x208>)
 8004ee8:	d002      	beq.n	8004ef0 <HAL_ADC_Init+0x84>
 8004eea:	4290      	cmp	r0, r2
 8004eec:	f040 8095 	bne.w	800501a <HAL_ADC_Init+0x1ae>
 8004ef0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ef4:	689d      	ldr	r5, [r3, #8]
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	432b      	orrs	r3, r5
 8004efa:	07dd      	lsls	r5, r3, #31
 8004efc:	f140 809b 	bpl.w	8005036 <HAL_ADC_Init+0x1ca>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004f00:	68e5      	ldr	r5, [r4, #12]
 8004f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f04:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004f08:	432b      	orrs	r3, r5
 8004f0a:	68a5      	ldr	r5, [r4, #8]
 8004f0c:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f0e:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f10:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8004f12:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f1a:	bf02      	ittt	eq
 8004f1c:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 8004f1e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004f22:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f28:	b122      	cbz	r2, 8004f34 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004f2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f2c:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f30:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f32:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f34:	68c5      	ldr	r5, [r0, #12]
 8004f36:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_ADC_Init+0x20c>)
 8004f38:	402a      	ands	r2, r5
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60c3      	str	r3, [r0, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f3e:	6903      	ldr	r3, [r0, #16]
 8004f40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004f42:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004f46:	4313      	orrs	r3, r2
 8004f48:	6103      	str	r3, [r0, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f4a:	f7ff ff8a 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f4e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	f002 0208 	and.w	r2, r2, #8
 8004f56:	4302      	orrs	r2, r0
 8004f58:	d12e      	bne.n	8004fb8 <HAL_ADC_Init+0x14c>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f5a:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f5c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f60:	7f25      	ldrb	r5, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 8004f62:	6926      	ldr	r6, [r4, #16]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f64:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f66:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f6a:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f6e:	f020 0002 	bic.w	r0, r0, #2
 8004f72:	4302      	orrs	r2, r0
 8004f74:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8004f76:	4d41      	ldr	r5, [pc, #260]	; (800507c <HAL_ADC_Init+0x210>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f78:	6918      	ldr	r0, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	d06a      	beq.n	8005054 <HAL_ADC_Init+0x1e8>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f7e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004f82:	6118      	str	r0, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f84:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f88:	402a      	ands	r2, r5
 8004f8a:	4332      	orrs	r2, r6
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f90:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004f94:	2a01      	cmp	r2, #1
 8004f96:	d164      	bne.n	8005062 <HAL_ADC_Init+0x1f6>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f98:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	; 0x44
 8004f9c:	6918      	ldr	r0, [r3, #16]
 8004f9e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004fa2:	f020 0004 	bic.w	r0, r0, #4
 8004fa6:	432a      	orrs	r2, r5
 8004fa8:	4302      	orrs	r2, r0
 8004faa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004fac:	4302      	orrs	r2, r0
 8004fae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004fb0:	4302      	orrs	r2, r0
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fb8:	6962      	ldr	r2, [r4, #20]
 8004fba:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fbc:	bf05      	ittet	eq
 8004fbe:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8004fc0:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fc2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fc4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004fc8:	bf06      	itte	eq
 8004fca:	f020 000f 	biceq.w	r0, r0, #15
 8004fce:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fd0:	f022 020f 	bicne.w	r2, r2, #15
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004fd8:	f023 0303 	bic.w	r3, r3, #3
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8004fe8:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fea:	4a25      	ldr	r2, [pc, #148]	; (8005080 <HAL_ADC_Init+0x214>)
 8004fec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6083      	str	r3, [r0, #8]
 8004ffa:	4b22      	ldr	r3, [pc, #136]	; (8005084 <HAL_ADC_Init+0x218>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005002:	3301      	adds	r3, #1
 8005004:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8005006:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f43f af4a 	beq.w	8004ea4 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	e7f7      	b.n	8005006 <HAL_ADC_Init+0x19a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005016:	2100      	movs	r1, #0
 8005018:	e751      	b.n	8004ebe <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <HAL_ADC_Init+0x21c>)
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_ADC_Init+0x220>)
 800501e:	689d      	ldr	r5, [r3, #8]
 8005020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005028:	432b      	orrs	r3, r5
 800502a:	4313      	orrs	r3, r2
 800502c:	07db      	lsls	r3, r3, #31
 800502e:	f53f af67 	bmi.w	8004f00 <HAL_ADC_Init+0x94>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <HAL_ADC_Init+0x224>)
 8005034:	e007      	b.n	8005046 <HAL_ADC_Init+0x1da>
 8005036:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_ADC_Init+0x228>)
 800503c:	d003      	beq.n	8005046 <HAL_ADC_Init+0x1da>
 800503e:	4d14      	ldr	r5, [pc, #80]	; (8005090 <HAL_ADC_Init+0x224>)
 8005040:	4290      	cmp	r0, r2
 8005042:	bf18      	it	ne
 8005044:	462b      	movne	r3, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	6865      	ldr	r5, [r4, #4]
 800504a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800504e:	432a      	orrs	r2, r5
 8005050:	609a      	str	r2, [r3, #8]
}
 8005052:	e755      	b.n	8004f00 <HAL_ADC_Init+0x94>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005054:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005058:	6118      	str	r0, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800505a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800505e:	402a      	ands	r2, r5
 8005060:	e794      	b.n	8004f8c <HAL_ADC_Init+0x120>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	e7a5      	b.n	8004fb6 <HAL_ADC_Init+0x14a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800506a:	f043 0310 	orr.w	r3, r3, #16
 800506e:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 8005070:	2101      	movs	r1, #1
 8005072:	e7b6      	b.n	8004fe2 <HAL_ADC_Init+0x176>
 8005074:	50000100 	.word	0x50000100
 8005078:	fff04007 	.word	0xfff04007
 800507c:	ffffc000 	.word	0xffffc000
 8005080:	00030d40 	.word	0x00030d40
 8005084:	20000000 	.word	0x20000000
 8005088:	50000400 	.word	0x50000400
 800508c:	50000600 	.word	0x50000600
 8005090:	50000700 	.word	0x50000700
 8005094:	50000300 	.word	0x50000300

08005098 <HAL_ADC_PollForConversion>:
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005098:	6803      	ldr	r3, [r0, #0]
 800509a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	460f      	mov	r7, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050a6:	d01d      	beq.n	80050e4 <HAL_ADC_PollForConversion+0x4c>
 80050a8:	4842      	ldr	r0, [pc, #264]	; (80051b4 <HAL_ADC_PollForConversion+0x11c>)
 80050aa:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <HAL_ADC_PollForConversion+0x120>)
 80050ac:	4943      	ldr	r1, [pc, #268]	; (80051bc <HAL_ADC_PollForConversion+0x124>)
 80050ae:	4283      	cmp	r3, r0
 80050b0:	bf08      	it	eq
 80050b2:	460a      	moveq	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80050b4:	69a5      	ldr	r5, [r4, #24]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050b6:	6896      	ldr	r6, [r2, #8]
 80050b8:	2d08      	cmp	r5, #8
 80050ba:	f006 061f 	and.w	r6, r6, #31
 80050be:	d023      	beq.n	8005108 <HAL_ADC_PollForConversion+0x70>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050c0:	2e09      	cmp	r6, #9
 80050c2:	d811      	bhi.n	80050e8 <HAL_ADC_PollForConversion+0x50>
 80050c4:	f240 2221 	movw	r2, #545	; 0x221
 80050c8:	40f2      	lsrs	r2, r6
 80050ca:	07d1      	lsls	r1, r2, #31
 80050cc:	d50c      	bpl.n	80050e8 <HAL_ADC_PollForConversion+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050d4:	d017      	beq.n	8005106 <HAL_ADC_PollForConversion+0x6e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050d8:	f043 0320 	orr.w	r3, r3, #32
 80050dc:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80050de:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80050e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050e4:	4a35      	ldr	r2, [pc, #212]	; (80051bc <HAL_ADC_PollForConversion+0x124>)
 80050e6:	e7e5      	b.n	80050b4 <HAL_ADC_PollForConversion+0x1c>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ec:	d009      	beq.n	8005102 <HAL_ADC_PollForConversion+0x6a>
 80050ee:	4831      	ldr	r0, [pc, #196]	; (80051b4 <HAL_ADC_PollForConversion+0x11c>)
 80050f0:	4a32      	ldr	r2, [pc, #200]	; (80051bc <HAL_ADC_PollForConversion+0x124>)
 80050f2:	4931      	ldr	r1, [pc, #196]	; (80051b8 <HAL_ADC_PollForConversion+0x120>)
 80050f4:	4283      	cmp	r3, r0
 80050f6:	bf18      	it	ne
 80050f8:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80050fa:	6893      	ldr	r3, [r2, #8]
 80050fc:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8005100:	e7e8      	b.n	80050d4 <HAL_ADC_PollForConversion+0x3c>
 8005102:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <HAL_ADC_PollForConversion+0x124>)
 8005104:	e7f9      	b.n	80050fa <HAL_ADC_PollForConversion+0x62>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005106:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8005108:	f7ff fe80 	bl	8004e0c <HAL_GetTick>
 800510c:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	422a      	tst	r2, r5
 8005114:	d02d      	beq.n	8005172 <HAL_ADC_PollForConversion+0xda>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005116:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511c:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005124:	d10f      	bne.n	8005146 <HAL_ADC_PollForConversion+0xae>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005126:	7f62      	ldrb	r2, [r4, #29]
 8005128:	b96a      	cbnz	r2, 8005146 <HAL_ADC_PollForConversion+0xae>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	0710      	lsls	r0, r2, #28
 800512e:	d50a      	bpl.n	8005146 <HAL_ADC_PollForConversion+0xae>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005130:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005136:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005138:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800513a:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800513c:	bf5e      	ittt	pl
 800513e:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 8005140:	f042 0201 	orrpl.w	r2, r2, #1
 8005144:	65e2      	strpl	r2, [r4, #92]	; 0x5c
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005146:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_ADC_PollForConversion+0x11c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d028      	beq.n	800519e <HAL_ADC_PollForConversion+0x106>
 800514c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_ADC_PollForConversion+0xce>
 8005154:	491a      	ldr	r1, [pc, #104]	; (80051c0 <HAL_ADC_PollForConversion+0x128>)
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005156:	2e09      	cmp	r6, #9
 8005158:	d824      	bhi.n	80051a4 <HAL_ADC_PollForConversion+0x10c>
 800515a:	f240 2221 	movw	r2, #545	; 0x221
 800515e:	fa22 f606 	lsr.w	r6, r2, r6
 8005162:	07f2      	lsls	r2, r6, #31
 8005164:	d51e      	bpl.n	80051a4 <HAL_ADC_PollForConversion+0x10c>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005166:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005168:	2d08      	cmp	r5, #8
 800516a:	d11d      	bne.n	80051a8 <HAL_ADC_PollForConversion+0x110>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800516c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800516e:	2000      	movs	r0, #0
 8005170:	e7b6      	b.n	80050e0 <HAL_ADC_PollForConversion+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005172:	1c7a      	adds	r2, r7, #1
 8005174:	d0cc      	beq.n	8005110 <HAL_ADC_PollForConversion+0x78>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005176:	f7ff fe49 	bl	8004e0c <HAL_GetTick>
 800517a:	eba0 0008 	sub.w	r0, r0, r8
 800517e:	42b8      	cmp	r0, r7
 8005180:	d801      	bhi.n	8005186 <HAL_ADC_PollForConversion+0xee>
 8005182:	2f00      	cmp	r7, #0
 8005184:	d1c3      	bne.n	800510e <HAL_ADC_PollForConversion+0x76>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	402b      	ands	r3, r5
 800518c:	d1bf      	bne.n	800510e <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800518e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
          __HAL_UNLOCK(hadc);
 8005190:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005194:	f042 0204 	orr.w	r2, r2, #4
 8005198:	65e2      	str	r2, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800519a:	2003      	movs	r0, #3
 800519c:	e7a0      	b.n	80050e0 <HAL_ADC_PollForConversion+0x48>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800519e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80051a2:	e7d8      	b.n	8005156 <HAL_ADC_PollForConversion+0xbe>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80051a4:	68c8      	ldr	r0, [r1, #12]
 80051a6:	e7df      	b.n	8005168 <HAL_ADC_PollForConversion+0xd0>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80051a8:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80051ac:	d1df      	bne.n	800516e <HAL_ADC_PollForConversion+0xd6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80051ae:	220c      	movs	r2, #12
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e795      	b.n	80050e0 <HAL_ADC_PollForConversion+0x48>
 80051b4:	50000100 	.word	0x50000100
 80051b8:	50000700 	.word	0x50000700
 80051bc:	50000300 	.word	0x50000300
 80051c0:	50000400 	.word	0x50000400

080051c4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80051c4:	6803      	ldr	r3, [r0, #0]
 80051c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80051c8:	4770      	bx	lr

080051ca <HAL_ADC_ConvCpltCallback>:
 80051ca:	4770      	bx	lr

080051cc <HAL_ADC_ConvHalfCpltCallback>:
 80051cc:	4770      	bx	lr

080051ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051ce:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80051d2:	f7ff fffb 	bl	80051cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051d6:	bd08      	pop	{r3, pc}

080051d8 <HAL_ADC_LevelOutOfWindowCallback>:
 80051d8:	4770      	bx	lr

080051da <HAL_ADC_ErrorCallback>:
 80051da:	4770      	bx	lr

080051dc <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80051dc:	6802      	ldr	r2, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051de:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 80051e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80051e4:	6816      	ldr	r6, [r2, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80051e6:	6855      	ldr	r5, [r2, #4]
{
 80051e8:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ea:	f000 8111 	beq.w	8005410 <HAL_ADC_IRQHandler+0x234>
 80051ee:	4893      	ldr	r0, [pc, #588]	; (800543c <HAL_ADC_IRQHandler+0x260>)
 80051f0:	4b93      	ldr	r3, [pc, #588]	; (8005440 <HAL_ADC_IRQHandler+0x264>)
 80051f2:	4994      	ldr	r1, [pc, #592]	; (8005444 <HAL_ADC_IRQHandler+0x268>)
 80051f4:	4282      	cmp	r2, r0
 80051f6:	bf18      	it	ne
 80051f8:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80051fa:	689f      	ldr	r7, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80051fc:	07b1      	lsls	r1, r6, #30
 80051fe:	f007 071f 	and.w	r7, r7, #31
 8005202:	d50e      	bpl.n	8005222 <HAL_ADC_IRQHandler+0x46>
 8005204:	07aa      	lsls	r2, r5, #30
 8005206:	d50c      	bpl.n	8005222 <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005208:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800520a:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800520c:	bf5e      	ittt	pl
 800520e:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
 8005210:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 8005214:	65e3      	strpl	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005216:	4620      	mov	r0, r4
 8005218:	f000 fdb4 	bl	8005d84 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	2202      	movs	r2, #2
 8005220:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005222:	0770      	lsls	r0, r6, #29
 8005224:	d501      	bpl.n	800522a <HAL_ADC_IRQHandler+0x4e>
 8005226:	0769      	lsls	r1, r5, #29
 8005228:	d403      	bmi.n	8005232 <HAL_ADC_IRQHandler+0x56>
 800522a:	0732      	lsls	r2, r6, #28
 800522c:	d541      	bpl.n	80052b2 <HAL_ADC_IRQHandler+0xd6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800522e:	072b      	lsls	r3, r5, #28
 8005230:	d53f      	bpl.n	80052b2 <HAL_ADC_IRQHandler+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005232:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005234:	06d8      	lsls	r0, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005236:	bf58      	it	pl
 8005238:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800523a:	6820      	ldr	r0, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800523c:	bf5c      	itt	pl
 800523e:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 8005242:	65e3      	strpl	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005244:	68c3      	ldr	r3, [r0, #12]
 8005246:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800524a:	d12c      	bne.n	80052a6 <HAL_ADC_IRQHandler+0xca>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800524c:	4b7b      	ldr	r3, [pc, #492]	; (800543c <HAL_ADC_IRQHandler+0x260>)
 800524e:	4298      	cmp	r0, r3
 8005250:	f000 80e0 	beq.w	8005414 <HAL_ADC_IRQHandler+0x238>
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	4298      	cmp	r0, r3
 800525a:	d109      	bne.n	8005270 <HAL_ADC_IRQHandler+0x94>
 800525c:	4a7a      	ldr	r2, [pc, #488]	; (8005448 <HAL_ADC_IRQHandler+0x26c>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800525e:	2f09      	cmp	r7, #9
 8005260:	f200 80db 	bhi.w	800541a <HAL_ADC_IRQHandler+0x23e>
 8005264:	f240 2321 	movw	r3, #545	; 0x221
 8005268:	40fb      	lsrs	r3, r7
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	f140 80d5 	bpl.w	800541a <HAL_ADC_IRQHandler+0x23e>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005270:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005272:	049b      	lsls	r3, r3, #18
 8005274:	d417      	bmi.n	80052a6 <HAL_ADC_IRQHandler+0xca>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	0719      	lsls	r1, r3, #28
 800527a:	d514      	bpl.n	80052a6 <HAL_ADC_IRQHandler+0xca>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800527c:	f7ff fdf1 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005280:	2800      	cmp	r0, #0
 8005282:	f040 80cc 	bne.w	800541e <HAL_ADC_IRQHandler+0x242>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	6853      	ldr	r3, [r2, #4]
 800528a:	f023 030c 	bic.w	r3, r3, #12
 800528e:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005290:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005296:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005298:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800529a:	04da      	lsls	r2, r3, #19
 800529c:	d403      	bmi.n	80052a6 <HAL_ADC_IRQHandler+0xca>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800529e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff ff8f 	bl	80051ca <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	220c      	movs	r2, #12
 80052b0:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80052b2:	06b3      	lsls	r3, r6, #26
 80052b4:	d501      	bpl.n	80052ba <HAL_ADC_IRQHandler+0xde>
 80052b6:	06a8      	lsls	r0, r5, #26
 80052b8:	d403      	bmi.n	80052c2 <HAL_ADC_IRQHandler+0xe6>
 80052ba:	0671      	lsls	r1, r6, #25
 80052bc:	d543      	bpl.n	8005346 <HAL_ADC_IRQHandler+0x16a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80052be:	066a      	lsls	r2, r5, #25
 80052c0:	d541      	bpl.n	8005346 <HAL_ADC_IRQHandler+0x16a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052c4:	4a5d      	ldr	r2, [pc, #372]	; (800543c <HAL_ADC_IRQHandler+0x260>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052c6:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052c8:	bf5e      	ittt	pl
 80052ca:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
 80052cc:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80052d0:	65e3      	strpl	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80052d2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80052d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052d6:	68d9      	ldr	r1, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052d8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80052da:	f400 70c0 	and.w	r0, r0, #384	; 0x180
 80052de:	f000 80a7 	beq.w	8005430 <HAL_ADC_IRQHandler+0x254>
 80052e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d108      	bne.n	80052fc <HAL_ADC_IRQHandler+0x120>
 80052ea:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052ee:	b12f      	cbz	r7, 80052fc <HAL_ADC_IRQHandler+0x120>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80052f0:	f1a7 0c06 	sub.w	ip, r7, #6
 80052f4:	f1bc 0f01 	cmp.w	ip, #1
 80052f8:	f200 809d 	bhi.w	8005436 <HAL_ADC_IRQHandler+0x25a>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052fc:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80052fe:	b9e0      	cbnz	r0, 800533a <HAL_ADC_IRQHandler+0x15e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005300:	0190      	lsls	r0, r2, #6
 8005302:	d505      	bpl.n	8005310 <HAL_ADC_IRQHandler+0x134>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005304:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005308:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800530c:	4301      	orrs	r1, r0
 800530e:	d114      	bne.n	800533a <HAL_ADC_IRQHandler+0x15e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005310:	6819      	ldr	r1, [r3, #0]
 8005312:	0649      	lsls	r1, r1, #25
 8005314:	d511      	bpl.n	800533a <HAL_ADC_IRQHandler+0x15e>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005316:	0292      	lsls	r2, r2, #10
 8005318:	d40f      	bmi.n	800533a <HAL_ADC_IRQHandler+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	0710      	lsls	r0, r2, #28
 800531e:	f100 8095 	bmi.w	800544c <HAL_ADC_IRQHandler+0x270>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005328:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800532a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800532c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005330:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005332:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005334:	05d9      	lsls	r1, r3, #23
 8005336:	f140 8092 	bpl.w	800545e <HAL_ADC_IRQHandler+0x282>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fd1e 	bl	8005d7c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	2260      	movs	r2, #96	; 0x60
 8005344:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005346:	0632      	lsls	r2, r6, #24
 8005348:	d50b      	bpl.n	8005362 <HAL_ADC_IRQHandler+0x186>
 800534a:	062b      	lsls	r3, r5, #24
 800534c:	d509      	bpl.n	8005362 <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800534e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff ff3e 	bl	80051d8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	2280      	movs	r2, #128	; 0x80
 8005360:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005362:	05f0      	lsls	r0, r6, #23
 8005364:	d50c      	bpl.n	8005380 <HAL_ADC_IRQHandler+0x1a4>
 8005366:	05e9      	lsls	r1, r5, #23
 8005368:	d50a      	bpl.n	8005380 <HAL_ADC_IRQHandler+0x1a4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800536a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800536c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005370:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fd04 	bl	8005d80 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005380:	05b2      	lsls	r2, r6, #22
 8005382:	d50c      	bpl.n	800539e <HAL_ADC_IRQHandler+0x1c2>
 8005384:	05ab      	lsls	r3, r5, #22
 8005386:	d50a      	bpl.n	800539e <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005388:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800538a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005390:	4620      	mov	r0, r4
 8005392:	f000 fcf6 	bl	8005d82 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800539e:	06f0      	lsls	r0, r6, #27
 80053a0:	d521      	bpl.n	80053e6 <HAL_ADC_IRQHandler+0x20a>
 80053a2:	06e9      	lsls	r1, r5, #27
 80053a4:	d51f      	bpl.n	80053e6 <HAL_ADC_IRQHandler+0x20a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053a8:	b17b      	cbz	r3, 80053ca <HAL_ADC_IRQHandler+0x1ee>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80053aa:	6822      	ldr	r2, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80053ac:	2f00      	cmp	r7, #0
 80053ae:	d05d      	beq.n	800546c <HAL_ADC_IRQHandler+0x290>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80053b0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80053b4:	d058      	beq.n	8005468 <HAL_ADC_IRQHandler+0x28c>
 80053b6:	4821      	ldr	r0, [pc, #132]	; (800543c <HAL_ADC_IRQHandler+0x260>)
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_ADC_IRQHandler+0x264>)
 80053ba:	4922      	ldr	r1, [pc, #136]	; (8005444 <HAL_ADC_IRQHandler+0x268>)
 80053bc:	4282      	cmp	r2, r0
 80053be:	bf18      	it	ne
 80053c0:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80053c8:	d00a      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x204>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80053cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053d0:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 80053da:	4620      	mov	r0, r4
 80053dc:	f7ff fefd 	bl	80051da <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	2210      	movs	r2, #16
 80053e4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80053e6:	0572      	lsls	r2, r6, #21
 80053e8:	d544      	bpl.n	8005474 <HAL_ADC_IRQHandler+0x298>
 80053ea:	056b      	lsls	r3, r5, #21
 80053ec:	d542      	bpl.n	8005474 <HAL_ADC_IRQHandler+0x298>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80053ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80053f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053f4:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80053f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80053f8:	f043 0308 	orr.w	r3, r3, #8
 80053fc:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005404:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005406:	4620      	mov	r0, r4
}
 8005408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800540c:	f000 bcb7 	b.w	8005d7e <HAL_ADCEx_InjectedQueueOverflowCallback>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_ADC_IRQHandler+0x264>)
 8005412:	e6f2      	b.n	80051fa <HAL_ADC_IRQHandler+0x1e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005418:	e721      	b.n	800525e <HAL_ADC_IRQHandler+0x82>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800541a:	68d3      	ldr	r3, [r2, #12]
 800541c:	e729      	b.n	8005272 <HAL_ADC_IRQHandler+0x96>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800541e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005426:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	6623      	str	r3, [r4, #96]	; 0x60
 800542e:	e73a      	b.n	80052a6 <HAL_ADC_IRQHandler+0xca>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005430:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005434:	e75b      	b.n	80052ee <HAL_ADC_IRQHandler+0x112>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005436:	68d2      	ldr	r2, [r2, #12]
 8005438:	e761      	b.n	80052fe <HAL_ADC_IRQHandler+0x122>
 800543a:	bf00      	nop
 800543c:	50000100 	.word	0x50000100
 8005440:	50000300 	.word	0x50000300
 8005444:	50000700 	.word	0x50000700
 8005448:	50000400 	.word	0x50000400
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800544c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800544e:	f043 0310 	orr.w	r3, r3, #16
 8005452:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005454:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6623      	str	r3, [r4, #96]	; 0x60
 800545c:	e76d      	b.n	800533a <HAL_ADC_IRQHandler+0x15e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800545e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005466:	e768      	b.n	800533a <HAL_ADC_IRQHandler+0x15e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_ADC_IRQHandler+0x29c>)
 800546a:	e7aa      	b.n	80053c2 <HAL_ADC_IRQHandler+0x1e6>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800546c:	68d3      	ldr	r3, [r2, #12]
 800546e:	f013 0f01 	tst.w	r3, #1
 8005472:	e7a9      	b.n	80053c8 <HAL_ADC_IRQHandler+0x1ec>
}
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005476:	bf00      	nop
 8005478:	50000300 	.word	0x50000300

0800547c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800547e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005480:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005484:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005488:	d121      	bne.n	80054ce <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	6811      	ldr	r1, [r2, #0]
 8005494:	0708      	lsls	r0, r1, #28
 8005496:	d516      	bpl.n	80054c6 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005498:	68d1      	ldr	r1, [r2, #12]
 800549a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800549e:	d10e      	bne.n	80054be <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80054a0:	68d2      	ldr	r2, [r2, #12]
 80054a2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054a6:	d10a      	bne.n	80054be <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ae:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054b2:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054b4:	bf5e      	ittt	pl
 80054b6:	6dda      	ldrpl	r2, [r3, #92]	; 0x5c
 80054b8:	f042 0201 	orrpl.w	r2, r2, #1
 80054bc:	65da      	strpl	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fe83 	bl	80051ca <HAL_ADC_ConvCpltCallback>
}
 80054c4:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054c6:	68d2      	ldr	r2, [r2, #12]
 80054c8:	f012 0f02 	tst.w	r2, #2
 80054cc:	e7eb      	b.n	80054a6 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054ce:	06d2      	lsls	r2, r2, #27
 80054d0:	d503      	bpl.n	80054da <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fe81 	bl	80051da <HAL_ADC_ErrorCallback>
 80054d8:	e7f4      	b.n	80054c4 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80054dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4718      	bx	r3

080054e4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80054e6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80054ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ee:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80054f2:	f043 0304 	orr.w	r3, r3, #4
 80054f6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054f8:	f7ff fe6f 	bl	80051da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054fc:	bd08      	pop	{r3, pc}
	...

08005500 <HAL_ADC_ConfigChannel>:
{
 8005500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8005502:	2300      	movs	r3, #0
 8005504:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005506:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800550a:	2b01      	cmp	r3, #1
{
 800550c:	4605      	mov	r5, r0
 800550e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8005510:	f000 81db 	beq.w	80058ca <HAL_ADC_ConfigChannel+0x3ca>
 8005514:	2301      	movs	r3, #1
 8005516:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	f7ff fca1 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005520:	2800      	cmp	r0, #0
 8005522:	f040 81cc 	bne.w	80058be <HAL_ADC_ConfigChannel+0x3be>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005526:	684a      	ldr	r2, [r1, #4]
 8005528:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 800552a:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800552c:	0991      	lsrs	r1, r2, #6
 800552e:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005532:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8005536:	f002 021f 	and.w	r2, r2, #31
 800553a:	59ce      	ldr	r6, [r1, r7]
 800553c:	f04f 0c1f 	mov.w	ip, #31
 8005540:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8005544:	4093      	lsls	r3, r2
 8005546:	fa0c f202 	lsl.w	r2, ip, r2
 800554a:	ea26 0202 	bic.w	r2, r6, r2
 800554e:	4313      	orrs	r3, r2
 8005550:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005552:	f7ff fc86 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005556:	4606      	mov	r6, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005558:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800555a:	6883      	ldr	r3, [r0, #8]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	431e      	orrs	r6, r3
 8005562:	d13c      	bne.n	80055de <HAL_ADC_ConfigChannel+0xde>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005564:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005566:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005568:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800556c:	d179      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x162>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800556e:	4632      	mov	r2, r6
 8005570:	f7ff fc66 	bl	8004e40 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005574:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005576:	6953      	ldr	r3, [r2, #20]
 8005578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800557c:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800557e:	6927      	ldr	r7, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005580:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005582:	6821      	ldr	r1, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005584:	68c2      	ldr	r2, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005586:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005588:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800558c:	d070      	beq.n	8005670 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800558e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005592:	0050      	lsls	r0, r2, #1
 8005594:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(*preg,
 8005596:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 800559a:	4082      	lsls	r2, r0
 800559c:	48ae      	ldr	r0, [pc, #696]	; (8005858 <HAL_ADC_ConfigChannel+0x358>)
 800559e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80055a2:	ea0c 0000 	and.w	r0, ip, r0
 80055a6:	4308      	orrs	r0, r1
 80055a8:	4302      	orrs	r2, r0
 80055aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80055ae:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055b2:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(*preg,
 80055b4:	69a0      	ldr	r0, [r4, #24]
 80055b6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80055ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80055be:	4302      	orrs	r2, r0
 80055c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	7f21      	ldrb	r1, [r4, #28]
  MODIFY_REG(*preg,
 80055c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80055cc:	2901      	cmp	r1, #1
 80055ce:	bf08      	it	eq
 80055d0:	f04f 7600 	moveq.w	r6, #33554432	; 0x2000000
 80055d4:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80055d8:	4306      	orrs	r6, r0
 80055da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055de:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055e0:	6883      	ldr	r3, [r0, #8]
 80055e2:	07de      	lsls	r6, r3, #31
 80055e4:	f100 809f 	bmi.w	8005726 <HAL_ADC_ConfigChannel+0x226>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80055e8:	68e1      	ldr	r1, [r4, #12]
 80055ea:	4a9c      	ldr	r2, [pc, #624]	; (800585c <HAL_ADC_ConfigChannel+0x35c>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	4291      	cmp	r1, r2
    SET_BIT(ADCx->DIFSEL,
 80055f0:	f3c3 0612 	ubfx	r6, r3, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80055f4:	f040 8091 	bne.w	800571a <HAL_ADC_ConfigChannel+0x21a>
    SET_BIT(ADCx->DIFSEL,
 80055f8:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80055fc:	4332      	orrs	r2, r6
 80055fe:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005602:	2e00      	cmp	r6, #0
 8005604:	f000 8099 	beq.w	800573a <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800560c:	b13a      	cbz	r2, 800561e <HAL_ADC_ConfigChannel+0x11e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800560e:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005612:	3201      	adds	r2, #1
 8005614:	f002 021f 	and.w	r2, r2, #31
 8005618:	2a09      	cmp	r2, #9
 800561a:	f200 80ae 	bhi.w	800577a <HAL_ADC_ConfigChannel+0x27a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8005622:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005626:	3201      	adds	r2, #1
 8005628:	0692      	lsls	r2, r2, #26
 800562a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8005632:	fab1 f181 	clz	r1, r1
 8005636:	3101      	adds	r1, #1
 8005638:	f001 071f 	and.w	r7, r1, #31
 800563c:	2101      	movs	r1, #1
 800563e:	40b9      	lsls	r1, r7
 8005640:	430a      	orrs	r2, r1
 8005642:	2e00      	cmp	r6, #0
 8005644:	f040 8094 	bne.w	8005770 <HAL_ADC_ConfigChannel+0x270>
 8005648:	0e9b      	lsrs	r3, r3, #26
 800564a:	3301      	adds	r3, #1
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005654:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005656:	ea42 0103 	orr.w	r1, r2, r3
 800565a:	68a2      	ldr	r2, [r4, #8]
 800565c:	f7ff fbf0 	bl	8004e40 <LL_ADC_SetChannelSamplingTime>
 8005660:	e061      	b.n	8005726 <HAL_ADC_ConfigChannel+0x226>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005662:	f7ff fbed 	bl	8004e40 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005666:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005668:	6953      	ldr	r3, [r2, #20]
 800566a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800566e:	e785      	b.n	800557c <HAL_ADC_ConfigChannel+0x7c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005670:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005672:	6e02      	ldr	r2, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005674:	f3c1 0612 	ubfx	r6, r1, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005678:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800567c:	2e00      	cmp	r6, #0
 800567e:	d138      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x1f2>
 8005680:	f3c1 6184 	ubfx	r1, r1, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005684:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8005686:	bf02      	ittt	eq
 8005688:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 800568a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800568e:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005690:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800569a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800569e:	bb68      	cbnz	r0, 80056fc <HAL_ADC_ConfigChannel+0x1fc>
 80056a0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056a4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80056a6:	bf02      	ittt	eq
 80056a8:	685a      	ldreq	r2, [r3, #4]
 80056aa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80056ae:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056b0:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056ba:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056be:	bb10      	cbnz	r0, 8005706 <HAL_ADC_ConfigChannel+0x206>
 80056c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056c4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80056c6:	bf02      	ittt	eq
 80056c8:	689a      	ldreq	r2, [r3, #8]
 80056ca:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80056ce:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056d0:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056da:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056de:	b9b8      	cbnz	r0, 8005710 <HAL_ADC_ConfigChannel+0x210>
 80056e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056e4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80056e6:	bf02      	ittt	eq
 80056e8:	68da      	ldreq	r2, [r3, #12]
 80056ea:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80056ee:	60da      	streq	r2, [r3, #12]
}
 80056f0:	e775      	b.n	80055de <HAL_ADC_ConfigChannel+0xde>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80056f6:	fab1 f181 	clz	r1, r1
 80056fa:	e7c3      	b.n	8005684 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005700:	fab2 f282 	clz	r2, r2
 8005704:	e7ce      	b.n	80056a4 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800570a:	fab2 f282 	clz	r2, r2
 800570e:	e7d9      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005714:	fab2 f282 	clz	r2, r2
 8005718:	e7e4      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x1e4>
    CLEAR_BIT(ADCx->DIFSEL,
 800571a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800571e:	ea23 0606 	bic.w	r6, r3, r6
 8005722:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	4b4d      	ldr	r3, [pc, #308]	; (8005860 <HAL_ADC_ConfigChannel+0x360>)
 800572a:	421a      	tst	r2, r3
 800572c:	d144      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x2b8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800572e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005730:	2300      	movs	r3, #0
 8005732:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
 8005736:	b003      	add	sp, #12
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800573a:	0e9a      	lsrs	r2, r3, #26
 800573c:	3201      	adds	r2, #1
 800573e:	f002 071f 	and.w	r7, r2, #31
 8005742:	2101      	movs	r1, #1
 8005744:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005746:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005748:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800574c:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005750:	f67f af76 	bls.w	8005640 <HAL_ADC_ConfigChannel+0x140>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005754:	430a      	orrs	r2, r1
 8005756:	bb16      	cbnz	r6, 800579e <HAL_ADC_ConfigChannel+0x29e>
 8005758:	0e9e      	lsrs	r6, r3, #26
 800575a:	3601      	adds	r6, #1
 800575c:	f006 061f 	and.w	r6, r6, #31
 8005760:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8005764:	391e      	subs	r1, #30
 8005766:	0509      	lsls	r1, r1, #20
 8005768:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800576c:	4311      	orrs	r1, r2
 800576e:	e774      	b.n	800565a <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8005774:	fab3 f383 	clz	r3, r3
 8005778:	e767      	b.n	800564a <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800577e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005782:	3201      	adds	r2, #1
 8005784:	0692      	lsls	r2, r2, #26
 8005786:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800578e:	fab1 f181 	clz	r1, r1
 8005792:	3101      	adds	r1, #1
 8005794:	f001 071f 	and.w	r7, r1, #31
 8005798:	2101      	movs	r1, #1
 800579a:	40b9      	lsls	r1, r7
 800579c:	e7da      	b.n	8005754 <HAL_ADC_ConfigChannel+0x254>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80057a2:	fab1 f181 	clz	r1, r1
 80057a6:	3101      	adds	r1, #1
 80057a8:	f001 031f 	and.w	r3, r1, #31
 80057ac:	f06f 061d 	mvn.w	r6, #29
 80057b0:	2103      	movs	r1, #3
 80057b2:	fb11 6103 	smlabb	r1, r1, r3, r6
 80057b6:	e7d6      	b.n	8005766 <HAL_ADC_ConfigChannel+0x266>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057be:	d02e      	beq.n	800581e <HAL_ADC_ConfigChannel+0x31e>
 80057c0:	4c28      	ldr	r4, [pc, #160]	; (8005864 <HAL_ADC_ConfigChannel+0x364>)
 80057c2:	4929      	ldr	r1, [pc, #164]	; (8005868 <HAL_ADC_ConfigChannel+0x368>)
 80057c4:	4829      	ldr	r0, [pc, #164]	; (800586c <HAL_ADC_ConfigChannel+0x36c>)
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	bf18      	it	ne
 80057ca:	4601      	movne	r1, r0
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80057cc:	4c28      	ldr	r4, [pc, #160]	; (8005870 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80057ce:	6888      	ldr	r0, [r1, #8]
 80057d0:	42a2      	cmp	r2, r4
 80057d2:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
 80057d6:	d002      	beq.n	80057de <HAL_ADC_ConfigChannel+0x2de>
 80057d8:	4c26      	ldr	r4, [pc, #152]	; (8005874 <HAL_ADC_ConfigChannel+0x374>)
 80057da:	42a2      	cmp	r2, r4
 80057dc:	d123      	bne.n	8005826 <HAL_ADC_ConfigChannel+0x326>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057de:	0204      	lsls	r4, r0, #8
 80057e0:	d421      	bmi.n	8005826 <HAL_ADC_ConfigChannel+0x326>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057e6:	d01c      	beq.n	8005822 <HAL_ADC_ConfigChannel+0x322>
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <HAL_ADC_ConfigChannel+0x378>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d19f      	bne.n	800572e <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057ee:	f502 7280 	add.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057f2:	6893      	ldr	r3, [r2, #8]
 80057f4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057fe:	6093      	str	r3, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005800:	4b1e      	ldr	r3, [pc, #120]	; (800587c <HAL_ADC_ConfigChannel+0x37c>)
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <HAL_ADC_ConfigChannel+0x380>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	fbb3 f2f2 	udiv	r2, r3, r2
 800580a:	230c      	movs	r3, #12
 800580c:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8005810:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d08a      	beq.n	800572e <HAL_ADC_ConfigChannel+0x22e>
            wait_loop_index--;
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	3b01      	subs	r3, #1
 800581c:	e7f8      	b.n	8005810 <HAL_ADC_ConfigChannel+0x310>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800581e:	4912      	ldr	r1, [pc, #72]	; (8005868 <HAL_ADC_ConfigChannel+0x368>)
 8005820:	e7d4      	b.n	80057cc <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005822:	4a11      	ldr	r2, [pc, #68]	; (8005868 <HAL_ADC_ConfigChannel+0x368>)
 8005824:	e7e5      	b.n	80057f2 <HAL_ADC_ConfigChannel+0x2f2>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005826:	4c17      	ldr	r4, [pc, #92]	; (8005884 <HAL_ADC_ConfigChannel+0x384>)
 8005828:	42a2      	cmp	r2, r4
 800582a:	d12d      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x388>
 800582c:	01c2      	lsls	r2, r0, #7
 800582e:	f53f af7e 	bmi.w	800572e <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005836:	d00d      	beq.n	8005854 <HAL_ADC_ConfigChannel+0x354>
 8005838:	4c0a      	ldr	r4, [pc, #40]	; (8005864 <HAL_ADC_ConfigChannel+0x364>)
 800583a:	4a0b      	ldr	r2, [pc, #44]	; (8005868 <HAL_ADC_ConfigChannel+0x368>)
 800583c:	480b      	ldr	r0, [pc, #44]	; (800586c <HAL_ADC_ConfigChannel+0x36c>)
 800583e:	42a3      	cmp	r3, r4
 8005840:	bf18      	it	ne
 8005842:	4602      	movne	r2, r0
 8005844:	6893      	ldr	r3, [r2, #8]
 8005846:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800584a:	430b      	orrs	r3, r1
 800584c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	e76c      	b.n	800572e <HAL_ADC_ConfigChannel+0x22e>
 8005854:	4a04      	ldr	r2, [pc, #16]	; (8005868 <HAL_ADC_ConfigChannel+0x368>)
 8005856:	e7f5      	b.n	8005844 <HAL_ADC_ConfigChannel+0x344>
 8005858:	03fff000 	.word	0x03fff000
 800585c:	407f0000 	.word	0x407f0000
 8005860:	80080000 	.word	0x80080000
 8005864:	50000100 	.word	0x50000100
 8005868:	50000300 	.word	0x50000300
 800586c:	50000700 	.word	0x50000700
 8005870:	c3210000 	.word	0xc3210000
 8005874:	90c00010 	.word	0x90c00010
 8005878:	50000600 	.word	0x50000600
 800587c:	20000000 	.word	0x20000000
 8005880:	00030d40 	.word	0x00030d40
 8005884:	c7520000 	.word	0xc7520000
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005888:	4c11      	ldr	r4, [pc, #68]	; (80058d0 <HAL_ADC_ConfigChannel+0x3d0>)
 800588a:	42a2      	cmp	r2, r4
 800588c:	f47f af4f 	bne.w	800572e <HAL_ADC_ConfigChannel+0x22e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005890:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005894:	f47f af4b 	bne.w	800572e <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005898:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <HAL_ADC_ConfigChannel+0x3d4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f43f af47 	beq.w	800572e <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058a0:	4c0d      	ldr	r4, [pc, #52]	; (80058d8 <HAL_ADC_ConfigChannel+0x3d8>)
 80058a2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80058a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058aa:	bf18      	it	ne
 80058ac:	4622      	movne	r2, r4
 80058ae:	6893      	ldr	r3, [r2, #8]
 80058b0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80058b4:	430b      	orrs	r3, r1
 80058b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058ba:	6093      	str	r3, [r2, #8]
}
 80058bc:	e738      	b.n	8005730 <HAL_ADC_ConfigChannel+0x230>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80058c0:	f042 0220 	orr.w	r2, r2, #32
 80058c4:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80058c6:	4618      	mov	r0, r3
 80058c8:	e732      	b.n	8005730 <HAL_ADC_ConfigChannel+0x230>
  __HAL_LOCK(hadc);
 80058ca:	2002      	movs	r0, #2
 80058cc:	e733      	b.n	8005736 <HAL_ADC_ConfigChannel+0x236>
 80058ce:	bf00      	nop
 80058d0:	cb840000 	.word	0xcb840000
 80058d4:	50000100 	.word	0x50000100
 80058d8:	50000700 	.word	0x50000700

080058dc <ADC_ConversionStop>:
{
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058e0:	6800      	ldr	r0, [r0, #0]
 80058e2:	f7ff fabe 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058e6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	f002 0208 	and.w	r2, r2, #8
 80058ee:	4302      	orrs	r2, r0
 80058f0:	d101      	bne.n	80058f6 <ADC_ConversionStop+0x1a>
  return HAL_OK;
 80058f2:	2000      	movs	r0, #0
}
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	0190      	lsls	r0, r2, #6
 80058fa:	d52b      	bpl.n	8005954 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80058fc:	8ba0      	ldrh	r0, [r4, #28]
 80058fe:	f240 1201 	movw	r2, #257	; 0x101
 8005902:	4290      	cmp	r0, r2
 8005904:	d126      	bne.n	8005954 <ADC_ConversionStop+0x78>
 8005906:	4a28      	ldr	r2, [pc, #160]	; (80059a8 <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	0649      	lsls	r1, r1, #25
 800590c:	d516      	bpl.n	800593c <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005912:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff faa4 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 800591a:	b158      	cbz	r0, 8005934 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800591c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800591e:	6893      	ldr	r3, [r2, #8]
 8005920:	079e      	lsls	r6, r3, #30
 8005922:	d407      	bmi.n	8005934 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8005924:	6893      	ldr	r3, [r2, #8]
 8005926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800592a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800592e:	f043 0310 	orr.w	r3, r3, #16
 8005932:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005934:	2901      	cmp	r1, #1
 8005936:	d10f      	bne.n	8005958 <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005938:	2504      	movs	r5, #4
 800593a:	e022      	b.n	8005982 <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800593c:	3a01      	subs	r2, #1
 800593e:	d1e3      	bne.n	8005908 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005940:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005942:	f043 0310 	orr.w	r3, r3, #16
 8005946:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005948:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005950:	2001      	movs	r0, #1
 8005952:	e7cf      	b.n	80058f4 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005954:	2902      	cmp	r1, #2
 8005956:	d1dd      	bne.n	8005914 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005958:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	0718      	lsls	r0, r3, #28
 800595e:	d50a      	bpl.n	8005976 <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005960:	6893      	ldr	r3, [r2, #8]
 8005962:	079b      	lsls	r3, r3, #30
 8005964:	d407      	bmi.n	8005976 <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 8005966:	6893      	ldr	r3, [r2, #8]
 8005968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800596c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8005976:	2902      	cmp	r1, #2
 8005978:	d014      	beq.n	80059a4 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800597a:	2903      	cmp	r1, #3
 800597c:	bf14      	ite	ne
 800597e:	2504      	movne	r5, #4
 8005980:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 8005982:	f7ff fa43 	bl	8004e0c <HAL_GetTick>
 8005986:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	422b      	tst	r3, r5
 800598e:	d0b0      	beq.n	80058f2 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005990:	f7ff fa3c 	bl	8004e0c <HAL_GetTick>
 8005994:	1b80      	subs	r0, r0, r6
 8005996:	2805      	cmp	r0, #5
 8005998:	d9f6      	bls.n	8005988 <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	422b      	tst	r3, r5
 80059a0:	d0f2      	beq.n	8005988 <ADC_ConversionStop+0xac>
 80059a2:	e7cd      	b.n	8005940 <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 80059a4:	2508      	movs	r5, #8
 80059a6:	e7ec      	b.n	8005982 <ADC_ConversionStop+0xa6>
 80059a8:	a3400001 	.word	0xa3400001

080059ac <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059ac:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059ae:	6893      	ldr	r3, [r2, #8]
{
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	d501      	bpl.n	80059bc <ADC_Enable+0x10>
  return HAL_OK;
 80059b8:	2000      	movs	r0, #0
}
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059bc:	6891      	ldr	r1, [r2, #8]
 80059be:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <ADC_Enable+0x6c>)
 80059c0:	4219      	tst	r1, r3
 80059c2:	d009      	beq.n	80059d8 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059c6:	f043 0310 	orr.w	r3, r3, #16
 80059ca:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80059d4:	2001      	movs	r0, #1
 80059d6:	e7f0      	b.n	80059ba <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80059d8:	6893      	ldr	r3, [r2, #8]
 80059da:	4d10      	ldr	r5, [pc, #64]	; (8005a1c <ADC_Enable+0x70>)
 80059dc:	402b      	ands	r3, r5
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80059e4:	f7ff fa12 	bl	8004e0c <HAL_GetTick>
 80059e8:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	07db      	lsls	r3, r3, #31
 80059f0:	d4e2      	bmi.n	80059b8 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059f2:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059f4:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80059f6:	bf5f      	itttt	pl
 80059f8:	6893      	ldrpl	r3, [r2, #8]
 80059fa:	402b      	andpl	r3, r5
 80059fc:	f043 0301 	orrpl.w	r3, r3, #1
 8005a00:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a02:	f7ff fa03 	bl	8004e0c <HAL_GetTick>
 8005a06:	1b80      	subs	r0, r0, r6
 8005a08:	2802      	cmp	r0, #2
 8005a0a:	d9ee      	bls.n	80059ea <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	07da      	lsls	r2, r3, #31
 8005a12:	d4ea      	bmi.n	80059ea <ADC_Enable+0x3e>
 8005a14:	e7d6      	b.n	80059c4 <ADC_Enable+0x18>
 8005a16:	bf00      	nop
 8005a18:	8000003f 	.word	0x8000003f
 8005a1c:	7fffffc0 	.word	0x7fffffc0

08005a20 <HAL_ADC_Start>:
{
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a24:	6800      	ldr	r0, [r0, #0]
 8005a26:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005a2a:	d05a      	beq.n	8005ae2 <HAL_ADC_Start+0xc2>
 8005a2c:	493a      	ldr	r1, [pc, #232]	; (8005b18 <HAL_ADC_Start+0xf8>)
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_ADC_Start+0xfc>)
 8005a30:	4a3b      	ldr	r2, [pc, #236]	; (8005b20 <HAL_ADC_Start+0x100>)
 8005a32:	4288      	cmp	r0, r1
 8005a34:	bf08      	it	eq
 8005a36:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a38:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a3a:	f7ff fa12 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d166      	bne.n	8005b12 <HAL_ADC_Start+0xf2>
    __HAL_LOCK(hadc);
 8005a44:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d062      	beq.n	8005b12 <HAL_ADC_Start+0xf2>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff ffaa 	bl	80059ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_ADC_Start+0xec>
      ADC_STATE_CLR_SET(hadc->State,
 8005a5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a5e:	492e      	ldr	r1, [pc, #184]	; (8005b18 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8005a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	428b      	cmp	r3, r1
 8005a72:	f006 021f 	and.w	r2, r6, #31
 8005a76:	d036      	beq.n	8005ae6 <HAL_ADC_Start+0xc6>
 8005a78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	d135      	bne.n	8005aec <HAL_ADC_Start+0xcc>
 8005a80:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a84:	b91a      	cbnz	r2, 8005a8e <HAL_ADC_Start+0x6e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a86:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8005a88:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8005a8c:	65e5      	str	r5, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a8e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8005a90:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a94:	bf1c      	itt	ne
 8005a96:	6e25      	ldrne	r5, [r4, #96]	; 0x60
 8005a98:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005a9c:	6625      	str	r5, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005a9e:	251c      	movs	r5, #28
 8005aa0:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aa2:	428b      	cmp	r3, r1
      __HAL_UNLOCK(hadc);
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aac:	d007      	beq.n	8005abe <HAL_ADC_Start+0x9e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aae:	2a09      	cmp	r2, #9
 8005ab0:	d81e      	bhi.n	8005af0 <HAL_ADC_Start+0xd0>
 8005ab2:	f240 2521 	movw	r5, #545	; 0x221
 8005ab6:	fa25 f202 	lsr.w	r2, r5, r2
 8005aba:	07d5      	lsls	r5, r2, #31
 8005abc:	d518      	bpl.n	8005af0 <HAL_ADC_Start+0xd0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ac2:	bf41      	itttt	mi
 8005ac4:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8005ac6:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8005aca:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8005ace:	65e2      	strmi	r2, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ad6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005ada:	f042 0204 	orr.w	r2, r2, #4
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_ADC_Start+0x100>)
 8005ae4:	e7a8      	b.n	8005a38 <HAL_ADC_Start+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ae6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005aea:	e7cb      	b.n	8005a84 <HAL_ADC_Start+0x64>
 8005aec:	4619      	mov	r1, r3
 8005aee:	e7ca      	b.n	8005a86 <HAL_ADC_Start+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005af0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005af8:	68cb      	ldr	r3, [r1, #12]
 8005afa:	019b      	lsls	r3, r3, #6
 8005afc:	d5f0      	bpl.n	8005ae0 <HAL_ADC_Start+0xc0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005afe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b08:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b0a:	e7e9      	b.n	8005ae0 <HAL_ADC_Start+0xc0>
      __HAL_UNLOCK(hadc);
 8005b0c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005b10:	e7e6      	b.n	8005ae0 <HAL_ADC_Start+0xc0>
    tmp_hal_status = HAL_BUSY;
 8005b12:	2002      	movs	r0, #2
 8005b14:	e7e4      	b.n	8005ae0 <HAL_ADC_Start+0xc0>
 8005b16:	bf00      	nop
 8005b18:	50000100 	.word	0x50000100
 8005b1c:	50000700 	.word	0x50000700
 8005b20:	50000300 	.word	0x50000300

08005b24 <HAL_ADC_Start_DMA>:
{
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b28:	6800      	ldr	r0, [r0, #0]
 8005b2a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8005b2e:	460e      	mov	r6, r1
 8005b30:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b32:	d063      	beq.n	8005bfc <HAL_ADC_Start_DMA+0xd8>
 8005b34:	4938      	ldr	r1, [pc, #224]	; (8005c18 <HAL_ADC_Start_DMA+0xf4>)
 8005b36:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <HAL_ADC_Start_DMA+0xf8>)
 8005b38:	4a39      	ldr	r2, [pc, #228]	; (8005c20 <HAL_ADC_Start_DMA+0xfc>)
 8005b3a:	4288      	cmp	r0, r1
 8005b3c:	bf08      	it	eq
 8005b3e:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b40:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b42:	f7ff f98e 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d163      	bne.n	8005c12 <HAL_ADC_Start_DMA+0xee>
    __HAL_LOCK(hadc);
 8005b4a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8005b4e:	2a01      	cmp	r2, #1
 8005b50:	d05f      	beq.n	8005c12 <HAL_ADC_Start_DMA+0xee>
 8005b52:	2301      	movs	r3, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b54:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hadc);
 8005b56:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b5a:	4b32      	ldr	r3, [pc, #200]	; (8005c24 <HAL_ADC_Start_DMA+0x100>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	f005 051f 	and.w	r5, r5, #31
 8005b62:	d006      	beq.n	8005b72 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b64:	2d09      	cmp	r5, #9
 8005b66:	d84f      	bhi.n	8005c08 <HAL_ADC_Start_DMA+0xe4>
 8005b68:	f240 2321 	movw	r3, #545	; 0x221
 8005b6c:	40eb      	lsrs	r3, r5
 8005b6e:	07db      	lsls	r3, r3, #31
 8005b70:	d54a      	bpl.n	8005c08 <HAL_ADC_Start_DMA+0xe4>
      tmp_hal_status = ADC_Enable(hadc);
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff ff1a 	bl	80059ac <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d141      	bne.n	8005c00 <HAL_ADC_Start_DMA+0xdc>
        ADC_STATE_CLR_SET(hadc->State,
 8005b7c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b7e:	6821      	ldr	r1, [r4, #0]
 8005b80:	4b25      	ldr	r3, [pc, #148]	; (8005c18 <HAL_ADC_Start_DMA+0xf4>)
        ADC_STATE_CLR_SET(hadc->State,
 8005b82:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8005b86:	f020 0001 	bic.w	r0, r0, #1
 8005b8a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b8e:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 8005b90:	65e0      	str	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b92:	d003      	beq.n	8005b9c <HAL_ADC_Start_DMA+0x78>
 8005b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d100      	bne.n	8005b9e <HAL_ADC_Start_DMA+0x7a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b9c:	b91d      	cbnz	r5, 8005ba6 <HAL_ADC_Start_DMA+0x82>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ba0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ba4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ba6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005baa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bae:	bf1c      	itt	ne
 8005bb0:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8005bb2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005bb6:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <HAL_ADC_Start_DMA+0x104>)
 8005bba:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <HAL_ADC_Start_DMA+0x108>)
 8005bbe:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <HAL_ADC_Start_DMA+0x10c>)
 8005bc2:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bc4:	231c      	movs	r3, #28
 8005bc6:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bce:	684b      	ldr	r3, [r1, #4]
 8005bd0:	f043 0310 	orr.w	r3, r3, #16
 8005bd4:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005bd6:	68cb      	ldr	r3, [r1, #12]
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005bde:	4632      	mov	r2, r6
 8005be0:	463b      	mov	r3, r7
 8005be2:	3140      	adds	r1, #64	; 0x40
 8005be4:	f000 fc94 	bl	8006510 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005be8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005bea:	6893      	ldr	r3, [r2, #8]
 8005bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6093      	str	r3, [r2, #8]
}
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <HAL_ADC_Start_DMA+0xfc>)
 8005bfe:	e79f      	b.n	8005b40 <HAL_ADC_Start_DMA+0x1c>
        __HAL_UNLOCK(hadc);
 8005c00:	2300      	movs	r3, #0
 8005c02:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8005c06:	e7f8      	b.n	8005bfa <HAL_ADC_Start_DMA+0xd6>
      __HAL_UNLOCK(hadc);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8005c0e:	2001      	movs	r0, #1
 8005c10:	e7f3      	b.n	8005bfa <HAL_ADC_Start_DMA+0xd6>
    tmp_hal_status = HAL_BUSY;
 8005c12:	2002      	movs	r0, #2
 8005c14:	e7f1      	b.n	8005bfa <HAL_ADC_Start_DMA+0xd6>
 8005c16:	bf00      	nop
 8005c18:	50000100 	.word	0x50000100
 8005c1c:	50000700 	.word	0x50000700
 8005c20:	50000300 	.word	0x50000300
 8005c24:	50000600 	.word	0x50000600
 8005c28:	0800547d 	.word	0x0800547d
 8005c2c:	080051cf 	.word	0x080051cf
 8005c30:	080054e5 	.word	0x080054e5

08005c34 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c34:	6802      	ldr	r2, [r0, #0]
{
 8005c36:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005c38:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c3a:	6891      	ldr	r1, [r2, #8]
 8005c3c:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c3e:	07c8      	lsls	r0, r1, #31
 8005c40:	d401      	bmi.n	8005c46 <ADC_Disable+0x12>
  return HAL_OK;
 8005c42:	2000      	movs	r0, #0
}
 8005c44:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c46:	0799      	lsls	r1, r3, #30
 8005c48:	d4fb      	bmi.n	8005c42 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c4a:	6893      	ldr	r3, [r2, #8]
 8005c4c:	f003 030d 	and.w	r3, r3, #13
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d119      	bne.n	8005c88 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8005c54:	6893      	ldr	r3, [r2, #8]
 8005c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c5e:	f043 0302 	orr.w	r3, r3, #2
 8005c62:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c64:	2303      	movs	r3, #3
 8005c66:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005c68:	f7ff f8d0 	bl	8004e0c <HAL_GetTick>
 8005c6c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	07db      	lsls	r3, r3, #31
 8005c74:	d5e5      	bpl.n	8005c42 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c76:	f7ff f8c9 	bl	8004e0c <HAL_GetTick>
 8005c7a:	1b40      	subs	r0, r0, r5
 8005c7c:	2802      	cmp	r0, #2
 8005c7e:	d9f6      	bls.n	8005c6e <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	07da      	lsls	r2, r3, #31
 8005c86:	d5f2      	bpl.n	8005c6e <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c8a:	f043 0310 	orr.w	r3, r3, #16
 8005c8e:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e7d3      	b.n	8005c44 <ADC_Disable+0x10>

08005c9c <HAL_ADC_Stop>:
{
 8005c9c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8005c9e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005ca2:	2b01      	cmp	r3, #1
{
 8005ca4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005ca6:	d016      	beq.n	8005cd6 <HAL_ADC_Stop+0x3a>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005cae:	2103      	movs	r1, #3
 8005cb0:	f7ff fe14 	bl	80058dc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005cb4:	b958      	cbnz	r0, 8005cce <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7ff ffbc 	bl	8005c34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005cbc:	b938      	cbnz	r0, 8005cce <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8005cbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005cc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005cd4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8005cd6:	2002      	movs	r0, #2
 8005cd8:	e7fc      	b.n	8005cd4 <HAL_ADC_Stop+0x38>

08005cda <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cda:	6880      	ldr	r0, [r0, #8]
}
 8005cdc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cea:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005cee:	2b01      	cmp	r3, #1
{
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8005cf4:	d03e      	beq.n	8005d74 <HAL_ADCEx_Calibration_Start+0x90>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cfc:	f7ff ff9a 	bl	8005c34 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d133      	bne.n	8005d6c <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d06:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8005d08:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005d0c:	f022 0202 	bic.w	r2, r2, #2
 8005d10:	f042 0202 	orr.w	r2, r2, #2
 8005d14:	65e2      	str	r2, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8005d16:	68b3      	ldr	r3, [r6, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_ADCEx_Calibration_Start+0x94>)
 8005d1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d22:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8005d26:	432b      	orrs	r3, r5
 8005d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d2e:	68b3      	ldr	r3, [r6, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da11      	bge.n	8005d58 <HAL_ADCEx_Calibration_Start+0x74>
      wait_loop_index++;
 8005d34:	9b01      	ldr	r3, [sp, #4]
 8005d36:	3301      	adds	r3, #1
 8005d38:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d9f6      	bls.n	8005d2e <HAL_ADCEx_Calibration_Start+0x4a>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d42:	f023 0312 	bic.w	r3, r3, #18
 8005d46:	f043 0310 	orr.w	r3, r3, #16
 8005d4a:	65e3      	str	r3, [r4, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

        return HAL_ERROR;
 8005d52:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005d54:	b002      	add	sp, #8
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005d58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d62:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8005d6a:	e7f3      	b.n	8005d54 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d6e:	f043 0310 	orr.w	r3, r3, #16
 8005d72:	e7f6      	b.n	8005d62 <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8005d74:	2002      	movs	r0, #2
 8005d76:	e7ed      	b.n	8005d54 <HAL_ADCEx_Calibration_Start+0x70>
 8005d78:	0004de01 	.word	0x0004de01

08005d7c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d7c:	4770      	bx	lr

08005d7e <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005d7e:	4770      	bx	lr

08005d80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8005d80:	4770      	bx	lr

08005d82 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8005d82:	4770      	bx	lr

08005d84 <HAL_ADCEx_EndOfSamplingCallback>:
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d8a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005d8e:	2b01      	cmp	r3, #1
{
 8005d90:	b09d      	sub	sp, #116	; 0x74
 8005d92:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8005d94:	f000 8090 	beq.w	8005eb8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005d9e:	6800      	ldr	r0, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005da0:	2300      	movs	r3, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005da2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005da6:	9318      	str	r3, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005da8:	9319      	str	r3, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005daa:	d10c      	bne.n	8005dc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005dac:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005dae:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8005db0:	9801      	ldr	r0, [sp, #4]
 8005db2:	b968      	cbnz	r0, 8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005db4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005db6:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dba:	f043 0320 	orr.w	r3, r3, #32
 8005dbe:	65d3      	str	r3, [r2, #92]	; 0x5c

    return HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005dc2:	b01d      	add	sp, #116	; 0x74
 8005dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005dc6:	4c3e      	ldr	r4, [pc, #248]	; (8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	bf08      	it	eq
 8005dcc:	4b3d      	ldreq	r3, [pc, #244]	; (8005ec4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005dce:	e7ee      	b.n	8005dae <HAL_ADCEx_MultiModeConfigChannel+0x26>
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005dd0:	f7ff ff83 	bl	8005cda <LL_ADC_REG_IsConversionOngoing>
 8005dd4:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dd6:	6810      	ldr	r0, [r2, #0]
 8005dd8:	f7ff ff7f 	bl	8005cda <LL_ADC_REG_IsConversionOngoing>
 8005ddc:	4303      	orrs	r3, r0
 8005dde:	d165      	bne.n	8005eac <HAL_ADCEx_MultiModeConfigChannel+0x124>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005de0:	6813      	ldr	r3, [r2, #0]
 8005de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de6:	d026      	beq.n	8005e36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005de8:	4d34      	ldr	r5, [pc, #208]	; (8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005dea:	4c37      	ldr	r4, [pc, #220]	; (8005ec8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005dec:	4837      	ldr	r0, [pc, #220]	; (8005ecc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005dee:	42ab      	cmp	r3, r5
 8005df0:	bf18      	it	ne
 8005df2:	4620      	movne	r0, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005df4:	680c      	ldr	r4, [r1, #0]
 8005df6:	2c00      	cmp	r4, #0
 8005df8:	d033      	beq.n	8005e62 <HAL_ADCEx_MultiModeConfigChannel+0xda>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005dfa:	6886      	ldr	r6, [r0, #8]
 8005dfc:	f892 7038 	ldrb.w	r7, [r2, #56]	; 0x38
 8005e00:	684d      	ldr	r5, [r1, #4]
 8005e02:	f426 4660 	bic.w	r6, r6, #57344	; 0xe000
 8005e06:	ea45 3547 	orr.w	r5, r5, r7, lsl #13
 8005e0a:	4335      	orrs	r5, r6
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e10:	6085      	str	r5, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e12:	4d2a      	ldr	r5, [pc, #168]	; (8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005e14:	d001      	beq.n	8005e1a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	d10f      	bne.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e1e:	689e      	ldr	r6, [r3, #8]
 8005e20:	68ab      	ldr	r3, [r5, #8]
 8005e22:	4333      	orrs	r3, r6
 8005e24:	43db      	mvns	r3, r3
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	b983      	cbnz	r3, 8005e4e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e2c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  return tmp_hal_status;
 8005e34:	e7c5      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e36:	4825      	ldr	r0, [pc, #148]	; (8005ecc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005e38:	e7dc      	b.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x6c>
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005e3c:	4d24      	ldr	r5, [pc, #144]	; (8005ed0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005e3e:	689e      	ldr	r6, [r3, #8]
 8005e40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	68ad      	ldr	r5, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e48:	4333      	orrs	r3, r6
 8005e4a:	432b      	orrs	r3, r5
 8005e4c:	e7ea      	b.n	8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8005e4e:	6883      	ldr	r3, [r0, #8]
 8005e50:	6889      	ldr	r1, [r1, #8]
 8005e52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e56:	430c      	orrs	r4, r1
 8005e58:	f023 030f 	bic.w	r3, r3, #15
 8005e5c:	431c      	orrs	r4, r3
 8005e5e:	6084      	str	r4, [r0, #8]
 8005e60:	e7e4      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e62:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e68:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005e6c:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e6e:	4913      	ldr	r1, [pc, #76]	; (8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005e70:	d001      	beq.n	8005e76 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005e72:	428b      	cmp	r3, r1
 8005e74:	d110      	bne.n	8005e98 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8005e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e7a:	689c      	ldr	r4, [r3, #8]
 8005e7c:	688b      	ldr	r3, [r1, #8]
 8005e7e:	4323      	orrs	r3, r4
 8005e80:	43db      	mvns	r3, r3
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0d0      	beq.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005e8a:	6883      	ldr	r3, [r0, #8]
 8005e8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e90:	f023 030f 	bic.w	r3, r3, #15
 8005e94:	6083      	str	r3, [r0, #8]
 8005e96:	e7c9      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005e9a:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005e9c:	689c      	ldr	r4, [r3, #8]
 8005e9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ea6:	4323      	orrs	r3, r4
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	e7e9      	b.n	8005e80 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005eac:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005eae:	f043 0320 	orr.w	r3, r3, #32
 8005eb2:	65d3      	str	r3, [r2, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e7ba      	b.n	8005e2e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 8005eb8:	2002      	movs	r0, #2
 8005eba:	e782      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005ebc:	50000100 	.word	0x50000100
 8005ec0:	50000400 	.word	0x50000400
 8005ec4:	50000500 	.word	0x50000500
 8005ec8:	50000700 	.word	0x50000700
 8005ecc:	50000300 	.word	0x50000300
 8005ed0:	50000600 	.word	0x50000600

08005ed4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005eda:	4604      	mov	r4, r0
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f000 80f0 	beq.w	80060c2 <HAL_COMP_Init+0x1ee>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f2c0 80eb 	blt.w	80060c2 <HAL_COMP_Init+0x1ee>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005eec:	7f42      	ldrb	r2, [r0, #29]
 8005eee:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8005ef2:	b91a      	cbnz	r2, 8005efc <HAL_COMP_Init+0x28>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005ef4:	7703      	strb	r3, [r0, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005ef6:	6203      	str	r3, [r0, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005ef8:	f7fe fada 	bl	80044b0 <HAL_COMP_MspInit>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8005efc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005f00:	4313      	orrs	r3, r2
               | hcomp->Init.BlankingSrce
 8005f02:	6962      	ldr	r2, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005f04:	6821      	ldr	r1, [r4, #0]
               | hcomp->Init.BlankingSrce
 8005f06:	4313      	orrs	r3, r2
               | hcomp->Init.Hysteresis
 8005f08:	68e2      	ldr	r2, [r4, #12]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005f0a:	6808      	ldr	r0, [r1, #0]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005f0c:	680d      	ldr	r5, [r1, #0]
               | hcomp->Init.Hysteresis
 8005f0e:	4313      	orrs	r3, r2
    tmp_csr = (  hcomp->Init.InputMinus
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	4313      	orrs	r3, r2
    MODIFY_REG(hcomp->Instance->CSR,
 8005f14:	4a6d      	ldr	r2, [pc, #436]	; (80060cc <HAL_COMP_Init+0x1f8>)
 8005f16:	402a      	ands	r2, r5
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005f1c:	680b      	ldr	r3, [r1, #0]
 8005f1e:	021a      	lsls	r2, r3, #8
 8005f20:	d43a      	bmi.n	8005f98 <HAL_COMP_Init+0xc4>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005f22:	4b6b      	ldr	r3, [pc, #428]	; (80060d0 <HAL_COMP_Init+0x1fc>)
 8005f24:	486b      	ldr	r0, [pc, #428]	; (80060d4 <HAL_COMP_Init+0x200>)
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d147      	bne.n	8005fba <HAL_COMP_Init+0xe6>
 8005f2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005f2e:	69a6      	ldr	r6, [r4, #24]
 8005f30:	4b69      	ldr	r3, [pc, #420]	; (80060d8 <HAL_COMP_Init+0x204>)
 8005f32:	f016 0f03 	tst.w	r6, #3
 8005f36:	f000 80aa 	beq.w	800608e <HAL_COMP_Init+0x1ba>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005f3a:	06f7      	lsls	r7, r6, #27
 8005f3c:	d55e      	bpl.n	8005ffc <HAL_COMP_Init+0x128>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f3e:	4281      	cmp	r1, r0
 8005f40:	d002      	beq.n	8005f48 <HAL_COMP_Init+0x74>
 8005f42:	4d66      	ldr	r5, [pc, #408]	; (80060dc <HAL_COMP_Init+0x208>)
 8005f44:	42a9      	cmp	r1, r5
 8005f46:	d155      	bne.n	8005ff4 <HAL_COMP_Init+0x120>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005f48:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005f4a:	4315      	orrs	r5, r2
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005f4c:	629d      	str	r5, [r3, #40]	; 0x28
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005f4e:	06b5      	lsls	r5, r6, #26
 8005f50:	d566      	bpl.n	8006020 <HAL_COMP_Init+0x14c>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f52:	4281      	cmp	r1, r0
 8005f54:	d002      	beq.n	8005f5c <HAL_COMP_Init+0x88>
 8005f56:	4d61      	ldr	r5, [pc, #388]	; (80060dc <HAL_COMP_Init+0x208>)
 8005f58:	42a9      	cmp	r1, r5
 8005f5a:	d15c      	bne.n	8006016 <HAL_COMP_Init+0x142>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005f5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005f5e:	4315      	orrs	r5, r2
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f60:	4281      	cmp	r1, r0
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005f62:	62dd      	str	r5, [r3, #44]	; 0x2c
 8005f64:	d002      	beq.n	8005f6c <HAL_COMP_Init+0x98>
 8005f66:	4d5d      	ldr	r5, [pc, #372]	; (80060dc <HAL_COMP_Init+0x208>)
 8005f68:	42a9      	cmp	r1, r5
 8005f6a:	d157      	bne.n	800601c <HAL_COMP_Init+0x148>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005f6c:	635a      	str	r2, [r3, #52]	; 0x34
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005f6e:	07b7      	lsls	r7, r6, #30
 8005f70:	d567      	bpl.n	8006042 <HAL_COMP_Init+0x16e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f72:	4281      	cmp	r1, r0
 8005f74:	d002      	beq.n	8005f7c <HAL_COMP_Init+0xa8>
 8005f76:	4d59      	ldr	r5, [pc, #356]	; (80060dc <HAL_COMP_Init+0x208>)
 8005f78:	42a9      	cmp	r1, r5
 8005f7a:	d15e      	bne.n	800603a <HAL_COMP_Init+0x166>
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005f7c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005f7e:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005f80:	625d      	str	r5, [r3, #36]	; 0x24
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005f82:	07f5      	lsls	r5, r6, #31
 8005f84:	d56e      	bpl.n	8006064 <HAL_COMP_Init+0x190>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f86:	4281      	cmp	r1, r0
 8005f88:	d002      	beq.n	8005f90 <HAL_COMP_Init+0xbc>
 8005f8a:	4854      	ldr	r0, [pc, #336]	; (80060dc <HAL_COMP_Init+0x208>)
 8005f8c:	4281      	cmp	r1, r0
 8005f8e:	d165      	bne.n	800605c <HAL_COMP_Init+0x188>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005f90:	6a19      	ldr	r1, [r3, #32]
 8005f92:	430a      	orrs	r2, r1
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	e06f      	b.n	8006078 <HAL_COMP_Init+0x1a4>
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005f98:	0203      	lsls	r3, r0, #8
 8005f9a:	d4c2      	bmi.n	8005f22 <HAL_COMP_Init+0x4e>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f9c:	4b50      	ldr	r3, [pc, #320]	; (80060e0 <HAL_COMP_Init+0x20c>)
 8005f9e:	4a51      	ldr	r2, [pc, #324]	; (80060e4 <HAL_COMP_Init+0x210>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa6:	2314      	movs	r3, #20
 8005fa8:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8005fac:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0b6      	beq.n	8005f22 <HAL_COMP_Init+0x4e>
        wait_loop_index--;
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	e7f8      	b.n	8005fac <HAL_COMP_Init+0xd8>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005fba:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <HAL_COMP_Init+0x214>)
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d00d      	beq.n	8005fdc <HAL_COMP_Init+0x108>
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_COMP_Init+0x10e>
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d00d      	beq.n	8005fe8 <HAL_COMP_Init+0x114>
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d00d      	beq.n	8005fee <HAL_COMP_Init+0x11a>
 8005fd2:	4281      	cmp	r1, r0
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2201      	moveq	r2, #1
 8005fd8:	2202      	movne	r2, #2
 8005fda:	e7a8      	b.n	8005f2e <HAL_COMP_Init+0x5a>
 8005fdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005fe0:	e7a5      	b.n	8005f2e <HAL_COMP_Init+0x5a>
 8005fe2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005fe6:	e7a2      	b.n	8005f2e <HAL_COMP_Init+0x5a>
 8005fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fec:	e79f      	b.n	8005f2e <HAL_COMP_Init+0x5a>
 8005fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ff2:	e79c      	b.n	8005f2e <HAL_COMP_Init+0x5a>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005ff4:	689d      	ldr	r5, [r3, #8]
 8005ff6:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005ff8:	609d      	str	r5, [r3, #8]
}
 8005ffa:	e7a8      	b.n	8005f4e <HAL_COMP_Init+0x7a>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ffc:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005ffe:	ea6f 0502 	mvn.w	r5, r2
 8006002:	d002      	beq.n	800600a <HAL_COMP_Init+0x136>
 8006004:	4f35      	ldr	r7, [pc, #212]	; (80060dc <HAL_COMP_Init+0x208>)
 8006006:	42b9      	cmp	r1, r7
 8006008:	d102      	bne.n	8006010 <HAL_COMP_Init+0x13c>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800600a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800600c:	403d      	ands	r5, r7
 800600e:	e79d      	b.n	8005f4c <HAL_COMP_Init+0x78>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006010:	689f      	ldr	r7, [r3, #8]
 8006012:	403d      	ands	r5, r7
 8006014:	e7f0      	b.n	8005ff8 <HAL_COMP_Init+0x124>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006016:	68dd      	ldr	r5, [r3, #12]
 8006018:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800601a:	60dd      	str	r5, [r3, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800601c:	615a      	str	r2, [r3, #20]
}
 800601e:	e7a6      	b.n	8005f6e <HAL_COMP_Init+0x9a>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006020:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006022:	ea6f 0502 	mvn.w	r5, r2
 8006026:	d002      	beq.n	800602e <HAL_COMP_Init+0x15a>
 8006028:	4f2c      	ldr	r7, [pc, #176]	; (80060dc <HAL_COMP_Init+0x208>)
 800602a:	42b9      	cmp	r1, r7
 800602c:	d102      	bne.n	8006034 <HAL_COMP_Init+0x160>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800602e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8006030:	403d      	ands	r5, r7
 8006032:	e795      	b.n	8005f60 <HAL_COMP_Init+0x8c>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006034:	68df      	ldr	r7, [r3, #12]
 8006036:	403d      	ands	r5, r7
 8006038:	e7ef      	b.n	800601a <HAL_COMP_Init+0x146>
  SET_BIT(EXTI->EMR1, ExtiLine);
 800603a:	685d      	ldr	r5, [r3, #4]
 800603c:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800603e:	605d      	str	r5, [r3, #4]
}
 8006040:	e79f      	b.n	8005f82 <HAL_COMP_Init+0xae>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006042:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006044:	ea6f 0702 	mvn.w	r7, r2
 8006048:	d002      	beq.n	8006050 <HAL_COMP_Init+0x17c>
 800604a:	4d24      	ldr	r5, [pc, #144]	; (80060dc <HAL_COMP_Init+0x208>)
 800604c:	42a9      	cmp	r1, r5
 800604e:	d102      	bne.n	8006056 <HAL_COMP_Init+0x182>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006050:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006052:	403d      	ands	r5, r7
 8006054:	e794      	b.n	8005f80 <HAL_COMP_Init+0xac>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006056:	685d      	ldr	r5, [r3, #4]
 8006058:	403d      	ands	r5, r7
 800605a:	e7f0      	b.n	800603e <HAL_COMP_Init+0x16a>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	430a      	orrs	r2, r1
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006060:	601a      	str	r2, [r3, #0]
}
 8006062:	e009      	b.n	8006078 <HAL_COMP_Init+0x1a4>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006064:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006066:	ea6f 0502 	mvn.w	r5, r2
 800606a:	d002      	beq.n	8006072 <HAL_COMP_Init+0x19e>
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_COMP_Init+0x208>)
 800606e:	4291      	cmp	r1, r2
 8006070:	d10a      	bne.n	8006088 <HAL_COMP_Init+0x1b4>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006072:	6a19      	ldr	r1, [r3, #32]
 8006074:	4029      	ands	r1, r5
 8006076:	6219      	str	r1, [r3, #32]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006078:	7f63      	ldrb	r3, [r4, #29]
 800607a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800607e:	bb13      	cbnz	r3, 80060c6 <HAL_COMP_Init+0x1f2>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006080:	2301      	movs	r3, #1
 8006082:	7763      	strb	r3, [r4, #29]
    }
  }

  return status;
}
 8006084:	b003      	add	sp, #12
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	402a      	ands	r2, r5
 800608c:	e7e8      	b.n	8006060 <HAL_COMP_Init+0x18c>
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800608e:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006090:	ea6f 0202 	mvn.w	r2, r2
 8006094:	d002      	beq.n	800609c <HAL_COMP_Init+0x1c8>
 8006096:	4d11      	ldr	r5, [pc, #68]	; (80060dc <HAL_COMP_Init+0x208>)
 8006098:	42a9      	cmp	r1, r5
 800609a:	d108      	bne.n	80060ae <HAL_COMP_Init+0x1da>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800609c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800609e:	4281      	cmp	r1, r0
 80060a0:	ea05 0502 	and.w	r5, r5, r2
 80060a4:	625d      	str	r5, [r3, #36]	; 0x24
 80060a6:	d108      	bne.n	80060ba <HAL_COMP_Init+0x1e6>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80060a8:	6a19      	ldr	r1, [r3, #32]
 80060aa:	400a      	ands	r2, r1
 80060ac:	e772      	b.n	8005f94 <HAL_COMP_Init+0xc0>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	4011      	ands	r1, r2
 80060b2:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	400a      	ands	r2, r1
 80060b8:	e7d2      	b.n	8006060 <HAL_COMP_Init+0x18c>
 80060ba:	4808      	ldr	r0, [pc, #32]	; (80060dc <HAL_COMP_Init+0x208>)
 80060bc:	4281      	cmp	r1, r0
 80060be:	d0f3      	beq.n	80060a8 <HAL_COMP_Init+0x1d4>
 80060c0:	e7f8      	b.n	80060b4 <HAL_COMP_Init+0x1e0>
    status = HAL_ERROR;
 80060c2:	2001      	movs	r0, #1
 80060c4:	e7de      	b.n	8006084 <HAL_COMP_Init+0x1b0>
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2000      	movs	r0, #0
  return status;
 80060c8:	e7dc      	b.n	8006084 <HAL_COMP_Init+0x1b0>
 80060ca:	bf00      	nop
 80060cc:	ff007e0f 	.word	0xff007e0f
 80060d0:	40010200 	.word	0x40010200
 80060d4:	40010214 	.word	0x40010214
 80060d8:	40010400 	.word	0x40010400
 80060dc:	40010218 	.word	0x40010218
 80060e0:	20000000 	.word	0x20000000
 80060e4:	00030d40 	.word	0x00030d40
 80060e8:	40010204 	.word	0x40010204

080060ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80060ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060f4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060f6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060fc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006108:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800610a:	4770      	bx	lr
 800610c:	e000ed00 	.word	0xe000ed00

08006110 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006112:	b530      	push	{r4, r5, lr}
 8006114:	68dc      	ldr	r4, [r3, #12]
 8006116:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800611a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800611e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006120:	2d04      	cmp	r5, #4
 8006122:	bf28      	it	cs
 8006124:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006126:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006128:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800612c:	bf8c      	ite	hi
 800612e:	3c03      	subhi	r4, #3
 8006130:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006132:	fa03 f505 	lsl.w	r5, r3, r5
 8006136:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800613a:	40a3      	lsls	r3, r4
 800613c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006140:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8006142:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006144:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006148:	bfac      	ite	ge
 800614a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800614e:	4a08      	ldrlt	r2, [pc, #32]	; (8006170 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006150:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006154:	bfb8      	it	lt
 8006156:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615a:	b2db      	uxtb	r3, r3
 800615c:	bfaa      	itet	ge
 800615e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006162:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006164:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006168:	bd30      	pop	{r4, r5, pc}
 800616a:	bf00      	nop
 800616c:	e000ed00 	.word	0xe000ed00
 8006170:	e000ed14 	.word	0xe000ed14

08006174 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006174:	2800      	cmp	r0, #0
 8006176:	db08      	blt.n	800618a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006178:	2301      	movs	r3, #1
 800617a:	0942      	lsrs	r2, r0, #5
 800617c:	f000 001f 	and.w	r0, r0, #31
 8006180:	fa03 f000 	lsl.w	r0, r3, r0
 8006184:	4b01      	ldr	r3, [pc, #4]	; (800618c <HAL_NVIC_EnableIRQ+0x18>)
 8006186:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800618a:	4770      	bx	lr
 800618c:	e000e100 	.word	0xe000e100

08006190 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006190:	3801      	subs	r0, #1
 8006192:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006196:	d20b      	bcs.n	80061b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006198:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	4a05      	ldr	r2, [pc, #20]	; (80061b4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800619e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a0:	21f0      	movs	r1, #240	; 0xf0
 80061a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061a6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061a8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061aa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80061b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80061b2:	4770      	bx	lr
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061b8:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 80061ba:	4604      	mov	r4, r0
 80061bc:	b168      	cbz	r0, 80061da <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80061be:	7903      	ldrb	r3, [r0, #4]
 80061c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061c4:	b913      	cbnz	r3, 80061cc <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061c6:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061c8:	f7fe f9d4 	bl	8004574 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061cc:	2302      	movs	r3, #2
 80061ce:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061d0:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061d2:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061d4:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80061d6:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80061d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80061da:	2001      	movs	r0, #1
 80061dc:	e7fc      	b.n	80061d8 <HAL_DAC_Init+0x20>
	...

080061e0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80061e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	4615      	mov	r5, r2
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80061e6:	7942      	ldrb	r2, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80061e8:	688b      	ldr	r3, [r1, #8]
  __HAL_LOCK(hdac);
 80061ea:	2a01      	cmp	r2, #1
{
 80061ec:	4604      	mov	r4, r0
 80061ee:	460e      	mov	r6, r1
 80061f0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 80061f4:	d01f      	beq.n	8006236 <HAL_DAC_ConfigChannel+0x56>
 80061f6:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80061f8:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 80061fa:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80061fc:	7120      	strb	r0, [r4, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80061fe:	d13c      	bne.n	800627a <HAL_DAC_ConfigChannel+0x9a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006200:	f7fe fe04 	bl	8004e0c <HAL_GetTick>
 8006204:	4607      	mov	r7, r0

    if (Channel == DAC_CHANNEL_1)
 8006206:	b1c5      	cbz	r5, 800623a <HAL_DAC_ConfigChannel+0x5a>
    }

    else /* Channel 2 */
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	f2c0 80b6 	blt.w	800637e <HAL_DAC_ConfigChannel+0x19e>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1U);
 8006212:	2001      	movs	r0, #1
 8006214:	f7fe fe00 	bl	8004e18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
 800621e:	e016      	b.n	800624e <HAL_DAC_ConfigChannel+0x6e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006220:	f7fe fdf4 	bl	8004e0c <HAL_GetTick>
 8006224:	1bc0      	subs	r0, r0, r7
 8006226:	2801      	cmp	r0, #1
 8006228:	d907      	bls.n	800623a <HAL_DAC_ConfigChannel+0x5a>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800622a:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800622c:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800622e:	f043 0308 	orr.w	r3, r3, #8
 8006232:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006234:	7120      	strb	r0, [r4, #4]
  /* Process unlocked */
  __HAL_UNLOCK(hdac);

  /* Return function status */
  return HAL_OK;
}
 8006236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	d4ee      	bmi.n	8006220 <HAL_DAC_ConfigChannel+0x40>
      HAL_Delay(1);
 8006242:	2001      	movs	r0, #1
 8006244:	f7fe fde8 	bl	8004e18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	f005 0010 	and.w	r0, r5, #16
 8006254:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006256:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800625a:	4083      	lsls	r3, r0
 800625c:	ea22 0203 	bic.w	r2, r2, r3
 8006260:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006262:	4083      	lsls	r3, r0
 8006264:	431a      	orrs	r2, r3
 8006266:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006268:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800626a:	22ff      	movs	r2, #255	; 0xff
 800626c:	4082      	lsls	r2, r0
 800626e:	ea23 0302 	bic.w	r3, r3, r2
 8006272:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006274:	4082      	lsls	r2, r0
 8006276:	4313      	orrs	r3, r2
 8006278:	64cb      	str	r3, [r1, #76]	; 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800627a:	69f3      	ldr	r3, [r6, #28]
    tmpreg1 = hdac->Instance->CCR;
 800627c:	6822      	ldr	r2, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800627e:	2b01      	cmp	r3, #1
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006280:	f005 0510 	and.w	r5, r5, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006284:	d108      	bne.n	8006298 <HAL_DAC_ConfigChannel+0xb8>
    tmpreg1 = hdac->Instance->CCR;
 8006286:	6b93      	ldr	r3, [r2, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006288:	211f      	movs	r1, #31
 800628a:	40a9      	lsls	r1, r5
 800628c:	ea23 0101 	bic.w	r1, r3, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006290:	6a33      	ldr	r3, [r6, #32]
 8006292:	40ab      	lsls	r3, r5
 8006294:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 8006296:	6393      	str	r3, [r2, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8006298:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800629a:	e9d6 2005 	ldrd	r2, r0, [r6, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800629e:	2707      	movs	r7, #7
 80062a0:	40af      	lsls	r7, r5
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062a2:	2801      	cmp	r0, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80062a4:	ea6f 0107 	mvn.w	r1, r7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062a8:	d070      	beq.n	800638c <HAL_DAC_ConfigChannel+0x1ac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80062aa:	2802      	cmp	r0, #2
 80062ac:	d071      	beq.n	8006392 <HAL_DAC_ConfigChannel+0x1b2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80062ae:	fab2 f882 	clz	r8, r2
 80062b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80062b6:	68b0      	ldr	r0, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80062b8:	f44f 7780 	mov.w	r7, #256	; 0x100
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80062bc:	4302      	orrs	r2, r0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80062be:	fa07 f005 	lsl.w	r0, r7, r5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80062c2:	7937      	ldrb	r7, [r6, #4]
 80062c4:	2f01      	cmp	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80062c6:	f44f 7700 	mov.w	r7, #512	; 0x200
 80062ca:	fa07 f705 	lsl.w	r7, r7, r5
 80062ce:	ea23 0707 	bic.w	r7, r3, r7
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80062d2:	7973      	ldrb	r3, [r6, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80062d4:	ea42 0208 	orr.w	r2, r2, r8
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80062d8:	bf0c      	ite	eq
 80062da:	f44f 7880 	moveq.w	r8, #256	; 0x100
 80062de:	f04f 0800 	movne.w	r8, #0
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80062e2:	2b01      	cmp	r3, #1
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	ea07 0701 	and.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80062ea:	ea48 0202 	orr.w	r2, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80062ee:	ea27 0700 	bic.w	r7, r7, r0
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80062f2:	bf0c      	ite	eq
 80062f4:	f44f 7800 	moveq.w	r8, #512	; 0x200
 80062f8:	f04f 0800 	movne.w	r8, #0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80062fc:	2b02      	cmp	r3, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80062fe:	ea48 0802 	orr.w	r8, r8, r2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006302:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006306:	d14d      	bne.n	80063a4 <HAL_DAC_ConfigChannel+0x1c4>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006308:	f001 ff00 	bl	800810c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <HAL_DAC_ConfigChannel+0x1c8>)
 800630e:	4298      	cmp	r0, r3
 8006310:	d942      	bls.n	8006398 <HAL_DAC_ConfigChannel+0x1b8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006312:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
  hdac->Instance->MCR = tmpreg1;
 8006316:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006318:	fa08 f805 	lsl.w	r8, r8, r5
 800631c:	ea48 0707 	orr.w	r7, r8, r7
  hdac->Instance->MCR = tmpreg1;
 8006320:	63cf      	str	r7, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006322:	680b      	ldr	r3, [r1, #0]
 8006324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006328:	40aa      	lsls	r2, r5
 800632a:	ea23 0302 	bic.w	r3, r3, r2
 800632e:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8006330:	680a      	ldr	r2, [r1, #0]
  tmpreg2 = sConfig->DAC_Trigger;
 8006332:	68f3      	ldr	r3, [r6, #12]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006334:	f640 70fe 	movw	r0, #4094	; 0xffe
 8006338:	40a8      	lsls	r0, r5
 800633a:	ea22 0000 	bic.w	r0, r2, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800633e:	fa03 f205 	lsl.w	r2, r3, r5
 8006342:	4302      	orrs	r2, r0
  hdac->Instance->CR = tmpreg1;
 8006344:	600a      	str	r2, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006346:	680a      	ldr	r2, [r1, #0]
 8006348:	20c0      	movs	r0, #192	; 0xc0
 800634a:	40a8      	lsls	r0, r5
 800634c:	ea22 0200 	bic.w	r2, r2, r0
 8006350:	600a      	str	r2, [r1, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006352:	f3c3 0283 	ubfx	r2, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006356:	6933      	ldr	r3, [r6, #16]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006358:	6e08      	ldr	r0, [r1, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800635a:	019b      	lsls	r3, r3, #6
 800635c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006360:	4313      	orrs	r3, r2
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006362:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006366:	40ab      	lsls	r3, r5
 8006368:	fa02 f505 	lsl.w	r5, r2, r5
 800636c:	ea20 0505 	bic.w	r5, r0, r5
 8006370:	431d      	orrs	r5, r3
  __HAL_UNLOCK(hdac);
 8006372:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006374:	2301      	movs	r3, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006376:	660d      	str	r5, [r1, #96]	; 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8006378:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 800637a:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 800637c:	e75b      	b.n	8006236 <HAL_DAC_ConfigChannel+0x56>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800637e:	f7fe fd45 	bl	8004e0c <HAL_GetTick>
 8006382:	1bc0      	subs	r0, r0, r7
 8006384:	2801      	cmp	r0, #1
 8006386:	f67f af3f 	bls.w	8006208 <HAL_DAC_ConfigChannel+0x28>
 800638a:	e74e      	b.n	800622a <HAL_DAC_ConfigChannel+0x4a>
    connectOnChip = 0x00000000UL;
 800638c:	f04f 0800 	mov.w	r8, #0
 8006390:	e791      	b.n	80062b6 <HAL_DAC_ConfigChannel+0xd6>
    connectOnChip = DAC_MCR_MODE1_0;
 8006392:	f04f 0801 	mov.w	r8, #1
 8006396:	e78e      	b.n	80062b6 <HAL_DAC_ConfigChannel+0xd6>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <HAL_DAC_ConfigChannel+0x1cc>)
 800639a:	4298      	cmp	r0, r3
 800639c:	d9bb      	bls.n	8006316 <HAL_DAC_ConfigChannel+0x136>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800639e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80063a2:	e7b8      	b.n	8006316 <HAL_DAC_ConfigChannel+0x136>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80063a4:	431f      	orrs	r7, r3
 80063a6:	e7b6      	b.n	8006316 <HAL_DAC_ConfigChannel+0x136>
 80063a8:	09896800 	.word	0x09896800
 80063ac:	04c4b400 	.word	0x04c4b400

080063b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063b0:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b2:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 80063b6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80063b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80063ba:	b114      	cbz	r4, 80063c2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063bc:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 80063c0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063c2:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 80063c6:	f004 061f 	and.w	r6, r4, #31
 80063ca:	2401      	movs	r4, #1
 80063cc:	40b4      	lsls	r4, r6
 80063ce:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063d0:	6804      	ldr	r4, [r0, #0]
 80063d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063d4:	6883      	ldr	r3, [r0, #8]
 80063d6:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063d8:	bf0b      	itete	eq
 80063da:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80063dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80063de:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80063e0:	60e2      	strne	r2, [r4, #12]
  }
}
 80063e2:	bd70      	pop	{r4, r5, r6, pc}

080063e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063e4:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80063e6:	490d      	ldr	r1, [pc, #52]	; (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 80063e8:	4a0d      	ldr	r2, [pc, #52]	; (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 80063ea:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80063ec:	4c0d      	ldr	r4, [pc, #52]	; (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	bf88      	it	hi
 80063f2:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063f4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80063f6:	f021 0103 	bic.w	r1, r1, #3
 80063fa:	440a      	add	r2, r1
 80063fc:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063fe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006400:	4a09      	ldr	r2, [pc, #36]	; (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8006402:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006404:	3b08      	subs	r3, #8
 8006406:	2214      	movs	r2, #20
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800640c:	2201      	movs	r2, #1
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	40020820 	.word	0x40020820
 8006420:	40020800 	.word	0x40020800
 8006424:	40020407 	.word	0x40020407
 8006428:	40020880 	.word	0x40020880

0800642c <HAL_DMA_Init>:
{
 800642c:	b510      	push	{r4, lr}
  if (hdma == NULL)
 800642e:	2800      	cmp	r0, #0
 8006430:	d05e      	beq.n	80064f0 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006432:	6801      	ldr	r1, [r0, #0]
 8006434:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <HAL_DMA_Init+0xc8>)
 8006436:	4299      	cmp	r1, r3
 8006438:	f04f 0414 	mov.w	r4, #20
 800643c:	d84b      	bhi.n	80064d6 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800643e:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <HAL_DMA_Init+0xcc>)
 8006440:	440a      	add	r2, r1
 8006442:	fbb2 f2f4 	udiv	r2, r2, r4
 8006446:	0092      	lsls	r2, r2, #2
 8006448:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800644a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 800644e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006450:	2302      	movs	r3, #2
 8006452:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8006456:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 800645a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645c:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 800645e:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006460:	4323      	orrs	r3, r4
 8006462:	6944      	ldr	r4, [r0, #20]
 8006464:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006466:	6984      	ldr	r4, [r0, #24]
 8006468:	4323      	orrs	r3, r4
 800646a:	69c4      	ldr	r4, [r0, #28]
 800646c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800646e:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006470:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006474:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006478:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800647a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800647c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800647e:	f7ff ffb1 	bl	80063e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006482:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006484:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800648a:	bf04      	itt	eq
 800648c:	2300      	moveq	r3, #0
 800648e:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006490:	6842      	ldr	r2, [r0, #4]
 8006492:	b2d3      	uxtb	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006496:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800649a:	3a01      	subs	r2, #1
 800649c:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800649e:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80064a0:	d821      	bhi.n	80064e6 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064a2:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064a4:	4916      	ldr	r1, [pc, #88]	; (8006500 <HAL_DMA_Init+0xd4>)
 80064a6:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064a8:	441a      	add	r2, r3

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064aa:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064ac:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064ae:	2101      	movs	r1, #1
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064b8:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064ba:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064bc:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064be:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064c0:	4a10      	ldr	r2, [pc, #64]	; (8006504 <HAL_DMA_Init+0xd8>)
 80064c2:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80064c6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80064ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80064ce:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80064d2:	4618      	mov	r0, r3
}
 80064d4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_DMA_Init+0xdc>)
 80064d8:	440b      	add	r3, r1
 80064da:	fbb3 f3f4 	udiv	r3, r3, r4
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <HAL_DMA_Init+0xe0>)
 80064e4:	e7b3      	b.n	800644e <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 80064e6:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80064e8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064ec:	65c3      	str	r3, [r0, #92]	; 0x5c
 80064ee:	e7e9      	b.n	80064c4 <HAL_DMA_Init+0x98>
    return HAL_ERROR;
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7ef      	b.n	80064d4 <HAL_DMA_Init+0xa8>
 80064f4:	40020407 	.word	0x40020407
 80064f8:	bffdfff8 	.word	0xbffdfff8
 80064fc:	1000823f 	.word	0x1000823f
 8006500:	40020940 	.word	0x40020940
 8006504:	40020900 	.word	0x40020900
 8006508:	bffdfbf8 	.word	0xbffdfbf8
 800650c:	40020400 	.word	0x40020400

08006510 <HAL_DMA_Start_IT>:
{
 8006510:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8006512:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8006516:	2d01      	cmp	r5, #1
{
 8006518:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800651a:	d039      	beq.n	8006590 <HAL_DMA_Start_IT+0x80>
 800651c:	2501      	movs	r5, #1
 800651e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006522:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8006526:	2d01      	cmp	r5, #1
 8006528:	f04f 0600 	mov.w	r6, #0
 800652c:	f04f 0502 	mov.w	r5, #2
 8006530:	d12c      	bne.n	800658c <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8006532:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006536:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006538:	6806      	ldr	r6, [r0, #0]
 800653a:	6835      	ldr	r5, [r6, #0]
 800653c:	f025 0501 	bic.w	r5, r5, #1
 8006540:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006542:	f7ff ff35 	bl	80063b0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006546:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006548:	6803      	ldr	r3, [r0, #0]
 800654a:	b1ba      	cbz	r2, 800657c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006552:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006554:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006556:	6811      	ldr	r1, [r2, #0]
 8006558:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800655a:	bf42      	ittt	mi
 800655c:	6811      	ldrmi	r1, [r2, #0]
 800655e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8006562:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006564:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006566:	b11a      	cbz	r2, 8006570 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006568:	6811      	ldr	r1, [r2, #0]
 800656a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800656e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	2000      	movs	r0, #0
}
 800657a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f022 0204 	bic.w	r2, r2, #4
 8006582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	f042 020a 	orr.w	r2, r2, #10
 800658a:	e7e2      	b.n	8006552 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 800658c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8006590:	2002      	movs	r0, #2
 8006592:	e7f2      	b.n	800657a <HAL_DMA_Start_IT+0x6a>

08006594 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006594:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006598:	2a02      	cmp	r2, #2
{
 800659a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800659c:	d009      	beq.n	80065b2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800659e:	2204      	movs	r2, #4
 80065a0:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80065a2:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80065b0:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b2:	6802      	ldr	r2, [r0, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b6:	6811      	ldr	r1, [r2, #0]
 80065b8:	f021 010e 	bic.w	r1, r1, #14
 80065bc:	6011      	str	r1, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065be:	6801      	ldr	r1, [r0, #0]
 80065c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80065c4:	6001      	str	r1, [r0, #0]
     __HAL_DMA_DISABLE(hdma);
 80065c6:	6811      	ldr	r1, [r2, #0]
 80065c8:	f021 0101 	bic.w	r1, r1, #1
 80065cc:	6011      	str	r1, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ce:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 80065d2:	f002 011f 	and.w	r1, r2, #31
 80065d6:	2201      	movs	r2, #1
 80065d8:	408a      	lsls	r2, r1
 80065da:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065dc:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
     if (hdma->DMAmuxRequestGen != 0U)
 80065e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e2:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d0dd      	beq.n	80065a4 <HAL_DMA_Abort+0x10>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065e8:	6802      	ldr	r2, [r0, #0]
 80065ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ee:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065f0:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065f6:	6051      	str	r1, [r2, #4]
 80065f8:	e7d4      	b.n	80065a4 <HAL_DMA_Abort+0x10>

080065fa <HAL_DMA_Abort_IT>:
{
 80065fa:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065fc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006600:	2b02      	cmp	r3, #2
 8006602:	d009      	beq.n	8006618 <HAL_DMA_Abort_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006604:	2304      	movs	r3, #4
 8006606:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006608:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 800660a:	2301      	movs	r3, #1
 800660c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006610:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	4618      	mov	r0, r3
 8006616:	e02b      	b.n	8006670 <HAL_DMA_Abort_IT+0x76>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006618:	6803      	ldr	r3, [r0, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f022 020e 	bic.w	r2, r2, #14
 8006620:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800662a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006632:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006634:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	2301      	movs	r3, #1
 800663e:	4093      	lsls	r3, r2
 8006640:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006642:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8006646:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006648:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800664a:	b133      	cbz	r3, 800665a <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006652:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006654:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8006658:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800665a:	2301      	movs	r3, #1
 800665c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8006660:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8006662:	2400      	movs	r4, #0
 8006664:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0d3      	beq.n	8006614 <HAL_DMA_Abort_IT+0x1a>
      hdma->XferAbortCallback(hdma);
 800666c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800666e:	4620      	mov	r0, r4
}
 8006670:	bd10      	pop	{r4, pc}

08006672 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006672:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006674:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8006676:	6803      	ldr	r3, [r0, #0]
{
 8006678:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800667a:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800667e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006680:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006682:	2404      	movs	r4, #4
 8006684:	4094      	lsls	r4, r2
 8006686:	4234      	tst	r4, r6
 8006688:	d00e      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x36>
 800668a:	f015 0f04 	tst.w	r5, #4
 800668e:	d00b      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006694:	bf5e      	ittt	pl
 8006696:	681a      	ldrpl	r2, [r3, #0]
 8006698:	f022 0204 	bicpl.w	r2, r2, #4
 800669c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800669e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066a0:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80066a2:	b373      	cbz	r3, 8006702 <HAL_DMA_IRQHandler+0x90>
}
 80066a4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80066a6:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066a8:	2402      	movs	r4, #2
 80066aa:	4094      	lsls	r4, r2
 80066ac:	4234      	tst	r4, r6
 80066ae:	d012      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 80066b0:	f015 0f02 	tst.w	r5, #2
 80066b4:	d00f      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	0695      	lsls	r5, r2, #26
 80066ba:	d406      	bmi.n	80066ca <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f022 020a 	bic.w	r2, r2, #10
 80066c2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80066ca:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80066cc:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80066ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80066d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80066d4:	e7e5      	b.n	80066a2 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066d6:	2408      	movs	r4, #8
 80066d8:	4094      	lsls	r4, r2
 80066da:	4234      	tst	r4, r6
 80066dc:	d011      	beq.n	8006702 <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 80066de:	072c      	lsls	r4, r5, #28
 80066e0:	d50f      	bpl.n	8006702 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066e2:	681c      	ldr	r4, [r3, #0]
 80066e4:	f024 040e 	bic.w	r4, r4, #14
 80066e8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066ea:	2301      	movs	r3, #1
 80066ec:	fa03 f202 	lsl.w	r2, r3, r2
 80066f0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80066f4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80066f8:	2300      	movs	r3, #0
 80066fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80066fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006700:	e7cf      	b.n	80066a2 <HAL_DMA_IRQHandler+0x30>
}
 8006702:	bc70      	pop	{r4, r5, r6}
 8006704:	4770      	bx	lr
	...

08006708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800689c <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006710:	4c60      	ldr	r4, [pc, #384]	; (8006894 <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 8006712:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006714:	680a      	ldr	r2, [r1, #0]
 8006716:	fa32 f503 	lsrs.w	r5, r2, r3
 800671a:	d102      	bne.n	8006722 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800671c:	b003      	add	sp, #12
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006722:	2501      	movs	r5, #1
 8006724:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8006728:	ea1e 0202 	ands.w	r2, lr, r2
 800672c:	f000 80a5 	beq.w	800687a <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006730:	684e      	ldr	r6, [r1, #4]
 8006732:	f006 0503 	and.w	r5, r6, #3
 8006736:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800673a:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800673e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006740:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006744:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006746:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800674a:	d834      	bhi.n	80067b6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800674c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800674e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006752:	68cf      	ldr	r7, [r1, #12]
 8006754:	fa07 f708 	lsl.w	r7, r7, r8
 8006758:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800675c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800675e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006760:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006764:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006768:	409f      	lsls	r7, r3
 800676a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800676e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006770:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006772:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006776:	688f      	ldr	r7, [r1, #8]
 8006778:	fa07 f708 	lsl.w	r7, r7, r8
 800677c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006780:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8006782:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006784:	d119      	bne.n	80067ba <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006786:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800678a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800678e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006792:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006796:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800679a:	f04f 0e0f 	mov.w	lr, #15
 800679e:	fa0e fe0b 	lsl.w	lr, lr, fp
 80067a2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067a6:	690f      	ldr	r7, [r1, #16]
 80067a8:	fa07 f70b 	lsl.w	r7, r7, fp
 80067ac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80067b0:	f8ca 7020 	str.w	r7, [sl, #32]
 80067b4:	e001      	b.n	80067ba <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067b6:	2d03      	cmp	r5, #3
 80067b8:	d1da      	bne.n	8006770 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80067ba:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067bc:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067c0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067c4:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067c6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80067ca:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067cc:	d055      	beq.n	800687a <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ce:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80067d2:	f045 0501 	orr.w	r5, r5, #1
 80067d6:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80067da:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80067de:	f023 0703 	bic.w	r7, r3, #3
 80067e2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80067e6:	f005 0501 	and.w	r5, r5, #1
 80067ea:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80067ee:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067f0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f4:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80067f6:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80067fc:	f04f 0c0f 	mov.w	ip, #15
 8006800:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006804:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006808:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800680c:	d037      	beq.n	800687e <HAL_GPIO_Init+0x176>
 800680e:	4d22      	ldr	r5, [pc, #136]	; (8006898 <HAL_GPIO_Init+0x190>)
 8006810:	42a8      	cmp	r0, r5
 8006812:	d036      	beq.n	8006882 <HAL_GPIO_Init+0x17a>
 8006814:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006818:	42a8      	cmp	r0, r5
 800681a:	d034      	beq.n	8006886 <HAL_GPIO_Init+0x17e>
 800681c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006820:	42a8      	cmp	r0, r5
 8006822:	d032      	beq.n	800688a <HAL_GPIO_Init+0x182>
 8006824:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006828:	42a8      	cmp	r0, r5
 800682a:	d030      	beq.n	800688e <HAL_GPIO_Init+0x186>
 800682c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006830:	42a8      	cmp	r0, r5
 8006832:	bf0c      	ite	eq
 8006834:	2505      	moveq	r5, #5
 8006836:	2506      	movne	r5, #6
 8006838:	fa05 f50e 	lsl.w	r5, r5, lr
 800683c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006840:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8006842:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006844:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006846:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800684a:	bf0c      	ite	eq
 800684c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800684e:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8006850:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8006852:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006854:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8006858:	bf0c      	ite	eq
 800685a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800685c:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800685e:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8006860:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006862:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8006866:	bf0c      	ite	eq
 8006868:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800686a:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 800686c:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 800686e:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006870:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8006872:	bf54      	ite	pl
 8006874:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006876:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8006878:	6025      	str	r5, [r4, #0]
    position++;
 800687a:	3301      	adds	r3, #1
 800687c:	e74a      	b.n	8006714 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800687e:	2500      	movs	r5, #0
 8006880:	e7da      	b.n	8006838 <HAL_GPIO_Init+0x130>
 8006882:	2501      	movs	r5, #1
 8006884:	e7d8      	b.n	8006838 <HAL_GPIO_Init+0x130>
 8006886:	2502      	movs	r5, #2
 8006888:	e7d6      	b.n	8006838 <HAL_GPIO_Init+0x130>
 800688a:	2503      	movs	r5, #3
 800688c:	e7d4      	b.n	8006838 <HAL_GPIO_Init+0x130>
 800688e:	2504      	movs	r5, #4
 8006890:	e7d2      	b.n	8006838 <HAL_GPIO_Init+0x130>
 8006892:	bf00      	nop
 8006894:	40010400 	.word	0x40010400
 8006898:	48000400 	.word	0x48000400
 800689c:	40021000 	.word	0x40021000

080068a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068a0:	6903      	ldr	r3, [r0, #16]
 80068a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80068a4:	bf14      	ite	ne
 80068a6:	2001      	movne	r0, #1
 80068a8:	2000      	moveq	r0, #0
 80068aa:	4770      	bx	lr

080068ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068ac:	b10a      	cbz	r2, 80068b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068ae:	6181      	str	r1, [r0, #24]
 80068b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068b2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80068b4:	4770      	bx	lr

080068b6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068b6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068b8:	ea01 0203 	and.w	r2, r1, r3
 80068bc:	ea21 0103 	bic.w	r1, r1, r3
 80068c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068c4:	6181      	str	r1, [r0, #24]
}
 80068c6:	4770      	bx	lr

080068c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068ca:	4604      	mov	r4, r0
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d04a      	beq.n	8006966 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80068d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80068d8:	b91b      	cbnz	r3, 80068e2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068da:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068de:	f7fd fe8f 	bl	8004600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068e2:	2324      	movs	r3, #36	; 0x24
 80068e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068f2:	6862      	ldr	r2, [r4, #4]
 80068f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006902:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006906:	2901      	cmp	r1, #1
 8006908:	d124      	bne.n	8006954 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800690a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800690e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800691a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006922:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006924:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006928:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800692a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800692c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006930:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006932:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006936:	430a      	orrs	r2, r1
 8006938:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006942:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8006944:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006946:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006948:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800694e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8006952:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006954:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006958:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800695a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800695c:	bf04      	itt	eq
 800695e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8006962:	605a      	streq	r2, [r3, #4]
 8006964:	e7d4      	b.n	8006910 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006966:	2001      	movs	r0, #1
 8006968:	e7f3      	b.n	8006952 <HAL_I2C_Init+0x8a>

0800696a <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800696a:	6802      	ldr	r2, [r0, #0]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800696c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800696e:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006970:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8006972:	b103      	cbz	r3, 8006976 <HAL_I2C_EV_IRQHandler+0xc>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006974:	4718      	bx	r3
  }
}
 8006976:	4770      	bx	lr

08006978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006978:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800697e:	2b20      	cmp	r3, #32
 8006980:	b2dc      	uxtb	r4, r3
 8006982:	d11d      	bne.n	80069c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006984:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006988:	2b01      	cmp	r3, #1
 800698a:	d019      	beq.n	80069c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800698c:	2324      	movs	r3, #36	; 0x24
 800698e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006992:	6803      	ldr	r3, [r0, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4311      	orrs	r1, r2
 80069a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80069b4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80069b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80069bc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80069be:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80069c0:	2002      	movs	r0, #2
 80069c2:	e7fc      	b.n	80069be <HAL_I2CEx_ConfigAnalogFilter+0x46>

080069c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	b2dc      	uxtb	r4, r3
 80069ce:	d11c      	bne.n	8006a0a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d018      	beq.n	8006a0a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069d8:	2324      	movs	r3, #36	; 0x24
 80069da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069de:	6803      	ldr	r3, [r0, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80069fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006a06:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	e7fc      	b.n	8006a08 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08006a10 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006a14:	4604      	mov	r4, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d073      	beq.n	8006b02 <HAL_OPAMP_Init+0xf2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006a1a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d06f      	beq.n	8006b02 <HAL_OPAMP_Init+0xf2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006a22:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d06b      	beq.n	8006b02 <HAL_OPAMP_Init+0xf2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a2a:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <HAL_OPAMP_Init+0xfc>)
 8006a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
 8006a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006a3e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006a42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a46:	b90b      	cbnz	r3, 8006a4c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006a48:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fd fe21 	bl	8004694 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006a56:	680e      	ldr	r6, [r1, #0]
 8006a58:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8006a5c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006a60:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006b10 <HAL_OPAMP_Init+0x100>
 8006a64:	f026 0610 	bic.w	r6, r6, #16
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006a68:	f023 0220 	bic.w	r2, r3, #32
      MODIFY_REG(hopamp->Instance->CSR,
 8006a6c:	ea46 0609 	orr.w	r6, r6, r9
 8006a70:	e9d4 c709 	ldrd	ip, r7, [r4, #36]	; 0x24
 8006a74:	e9d4 500c 	ldrd	r5, r0, [r4, #48]	; 0x30
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006a78:	2a40      	cmp	r2, #64	; 0x40
 8006a7a:	6862      	ldr	r2, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8006a7c:	600e      	str	r6, [r1, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006a7e:	680e      	ldr	r6, [r1, #0]
 8006a80:	ea42 0203 	orr.w	r2, r2, r3
 8006a84:	ea06 0608 	and.w	r6, r6, r8
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006a88:	d12c      	bne.n	8006ae4 <HAL_OPAMP_Init+0xd4>
      MODIFY_REG(hopamp->Instance->CSR,
 8006a8a:	7d23      	ldrb	r3, [r4, #20]
 8006a8c:	ea42 020e 	orr.w	r2, r2, lr
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	ea42 020c 	orr.w	r2, r2, ip
 8006a96:	bf0c      	ite	eq
 8006a98:	f44f 7e80 	moveq.w	lr, #256	; 0x100
 8006a9c:	f04f 0e00 	movne.w	lr, #0
 8006aa0:	ea42 0307 	orr.w	r3, r2, r7
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006aa4:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 8006aa8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006aac:	4333      	orrs	r3, r6
 8006aae:	ea43 030e 	orr.w	r3, r3, lr
 8006ab2:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006ab4:	698b      	ldr	r3, [r1, #24]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	db09      	blt.n	8006ace <HAL_OPAMP_Init+0xbe>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006aba:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8006abe:	698a      	ldr	r2, [r1, #24]
 8006ac0:	4303      	orrs	r3, r0
 8006ac2:	6a20      	ldr	r0, [r4, #32]
 8006ac4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006ac8:	4303      	orrs	r3, r0
 8006aca:	4313      	orrs	r3, r2
 8006acc:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006ace:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8006ad2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006ad6:	b9b3      	cbnz	r3, 8006b06 <HAL_OPAMP_Init+0xf6>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8006ade:	b003      	add	sp, #12
 8006ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8006ae4:	68e3      	ldr	r3, [r4, #12]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	7d23      	ldrb	r3, [r4, #20]
 8006aea:	ea42 020e 	orr.w	r2, r2, lr
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	ea42 030c 	orr.w	r3, r2, ip
 8006af4:	bf0c      	ite	eq
 8006af6:	f44f 7e80 	moveq.w	lr, #256	; 0x100
 8006afa:	f04f 0e00 	movne.w	lr, #0
 8006afe:	433b      	orrs	r3, r7
 8006b00:	e7d0      	b.n	8006aa4 <HAL_OPAMP_Init+0x94>
    return HAL_ERROR;
 8006b02:	2001      	movs	r0, #1
 8006b04:	e7eb      	b.n	8006ade <HAL_OPAMP_Init+0xce>
    return status;
 8006b06:	2000      	movs	r0, #0
 8006b08:	e7e9      	b.n	8006ade <HAL_OPAMP_Init+0xce>
 8006b0a:	bf00      	nop
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	e0003e11 	.word	0xe0003e11

08006b14 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006b14:	b188      	cbz	r0, 8006b3a <HAL_OPAMP_Start+0x26>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006b16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d00d      	beq.n	8006b3a <HAL_OPAMP_Start+0x26>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006b1e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d109      	bne.n	8006b3a <HAL_OPAMP_Start+0x26>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006b26:	6802      	ldr	r2, [r0, #0]
 8006b28:	6813      	ldr	r3, [r2, #0]
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	6013      	str	r3, [r2, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006b30:	2304      	movs	r3, #4
 8006b32:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2000      	movs	r0, #0
 8006b38:	4770      	bx	lr
    status = HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
    }


  }
  return status;
}
 8006b3c:	4770      	bx	lr

08006b3e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8006b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006b42:	4604      	mov	r4, r0
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f000 809c 	beq.w	8006c82 <HAL_OPAMP_SelfCalibrate+0x144>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006b4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	f000 8097 	beq.w	8006c82 <HAL_OPAMP_SelfCalibrate+0x144>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8006b54:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	f040 8092 	bne.w	8006c82 <HAL_OPAMP_SelfCalibrate+0x144>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006b5e:	6803      	ldr	r3, [r0, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	f042 0202 	orr.w	r2, r2, #2
 8006b66:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f042 0210 	orr.w	r2, r2, #16
 8006b6e:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	2704      	movs	r7, #4

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
      delta = 8UL;
 8006b8a:	2608      	movs	r6, #8
      trimmingvaluen = 16UL;
 8006b8c:	2510      	movs	r5, #16

      while (delta != 0UL)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	6813      	ldr	r3, [r2, #0]
 8006b92:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8006b96:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006b9a:	6013      	str	r3, [r2, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8006b9c:	2002      	movs	r0, #2
 8006b9e:	f7fe f93b 	bl	8004e18 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	6813      	ldr	r3, [r2, #0]
 8006ba6:	005b      	lsls	r3, r3, #1
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 8006ba8:	bf4c      	ite	mi
 8006baa:	19ad      	addmi	r5, r5, r6
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8006bac:	1bad      	subpl	r5, r5, r6
      while (delta != 0UL)
 8006bae:	3f01      	subs	r7, #1
        }

        delta >>= 1;
 8006bb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
      while (delta != 0UL)
 8006bb4:	d1eb      	bne.n	8006b8e <HAL_OPAMP_SelfCalibrate+0x50>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8006bbc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006bc0:	6013      	str	r3, [r2, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006bc2:	2002      	movs	r0, #2
 8006bc4:	f7fe f928 	bl	8004e18 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	0050      	lsls	r0, r2, #1
 8006bce:	d506      	bpl.n	8006bde <HAL_OPAMP_SelfCalibrate+0xa0>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006bd0:	681a      	ldr	r2, [r3, #0]
        trimmingvaluen++;
 8006bd2:	3501      	adds	r5, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006bd4:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8006bd8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8006bdc:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006be4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	f04f 0804 	mov.w	r8, #4

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
      delta = 8UL;
 8006bee:	2708      	movs	r7, #8
      trimmingvaluep = 16UL;
 8006bf0:	2610      	movs	r6, #16

      while (delta != 0UL)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	6813      	ldr	r3, [r2, #0]
 8006bf6:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8006bfa:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8006bfe:	6013      	str	r3, [r2, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8006c00:	2002      	movs	r0, #2
 8006c02:	f7fe f909 	bl	8004e18 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	0059      	lsls	r1, r3, #1
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8006c0c:	bf4c      	ite	mi
 8006c0e:	19f6      	addmi	r6, r6, r7
        }
        else
        {
          trimmingvaluep -= delta;
 8006c10:	1bf6      	subpl	r6, r6, r7
      while (delta != 0UL)
 8006c12:	f1b8 0801 	subs.w	r8, r8, #1
        }

        delta >>= 1;
 8006c16:	ea4f 0757 	mov.w	r7, r7, lsr #1
      while (delta != 0UL)
 8006c1a:	d1ea      	bne.n	8006bf2 <HAL_OPAMP_SelfCalibrate+0xb4>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8006c22:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8006c26:	6013      	str	r3, [r2, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006c28:	2002      	movs	r0, #2
 8006c2a:	f7fe f8f5 	bl	8004e18 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	0052      	lsls	r2, r2, #1
 8006c34:	d506      	bpl.n	8006c44 <HAL_OPAMP_SelfCalibrate+0x106>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006c36:	681a      	ldr	r2, [r3, #0]
        trimmingvaluep++;
 8006c38:	3601      	adds	r6, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006c3a:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8006c3e:	ea42 42c6 	orr.w	r2, r2, r6, lsl #19
 8006c42:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	f022 0202 	bic.w	r2, r2, #2
 8006c5a:	601a      	str	r2, [r3, #0]
      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8006c66:	e9c4 650c 	strd	r6, r5, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006c6a:	ea42 46c6 	orr.w	r6, r2, r6, lsl #19
 8006c6e:	601e      	str	r6, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8006c76:	ea42 6505 	orr.w	r5, r2, r5, lsl #24
 8006c7a:	601d      	str	r5, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c7c:	2000      	movs	r0, #0
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
    }
  }
  return status;
}
 8006c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_ERROR;
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7fb      	b.n	8006c7e <HAL_OPAMP_SelfCalibrate+0x140>

08006c86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c86:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c88:	4604      	mov	r4, r0
{
 8006c8a:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d055      	beq.n	8006d3c <HAL_PCD_Init+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c90:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8006c94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c98:	b91b      	cbnz	r3, 8006ca2 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c9a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c9e:	f004 fc13 	bl	800b4c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	f002 ffbf 	bl	8009c2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6865      	ldr	r5, [r4, #4]
 8006cb2:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cb4:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cba:	428d      	cmp	r5, r1
 8006cbc:	f103 0201 	add.w	r2, r3, #1
 8006cc0:	d821      	bhi.n	8006d06 <HAL_PCD_Init+0x80>
 8006cc2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cc4:	2628      	movs	r6, #40	; 0x28
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cca:	4285      	cmp	r5, r0
 8006ccc:	f103 0301 	add.w	r3, r3, #1
 8006cd0:	d827      	bhi.n	8006d22 <HAL_PCD_Init+0x9c>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006cd2:	f104 0610 	add.w	r6, r4, #16
 8006cd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006cd8:	466d      	mov	r5, sp
 8006cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	1d23      	adds	r3, r4, #4
 8006ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	f002 ffab 	bl	8009c40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006cea:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8006cec:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8006cee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006cf2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006cf6:	69e3      	ldr	r3, [r4, #28]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d102      	bne.n	8006d02 <HAL_PCD_Init+0x7c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fe5a 	bl	80079b6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d02:	4628      	mov	r0, r5
 8006d04:	e01b      	b.n	8006d3e <HAL_PCD_Init+0xb8>
    hpcd->IN_ep[i].is_in = 1U;
 8006d06:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d0a:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8006d0e:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8006d12:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d16:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d18:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d1c:	6418      	str	r0, [r3, #64]	; 0x40
 8006d1e:	4613      	mov	r3, r2
 8006d20:	e7ca      	b.n	8006cb8 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8006d22:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d26:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8006d2a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8006d2e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d32:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d36:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d3a:	e7c5      	b.n	8006cc8 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8006d3c:	2001      	movs	r0, #1
}
 8006d3e:	b007      	add	sp, #28
 8006d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d42:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006d44:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8006d48:	2b01      	cmp	r3, #1
{
 8006d4a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006d4c:	d00c      	beq.n	8006d68 <HAL_PCD_Start+0x26>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006d54:	6800      	ldr	r0, [r0, #0]
 8006d56:	f002 ff60 	bl	8009c1a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d5a:	6820      	ldr	r0, [r4, #0]
 8006d5c:	f003 fa1a 	bl	800a194 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d60:	2000      	movs	r0, #0
 8006d62:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8006d66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006d68:	2002      	movs	r0, #2
 8006d6a:	e7fc      	b.n	8006d66 <HAL_PCD_Start+0x24>

08006d6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d6c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006d6e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8006d72:	2a01      	cmp	r2, #1
{
 8006d74:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006d76:	d00b      	beq.n	8006d90 <HAL_PCD_SetAddress+0x24>
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006d7e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d82:	6800      	ldr	r0, [r0, #0]
 8006d84:	f003 fa00 	bl	800a188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8006d8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006d90:	2002      	movs	r0, #2
 8006d92:	e7fc      	b.n	8006d8e <HAL_PCD_SetAddress+0x22>

08006d94 <HAL_PCD_IRQHandler>:
{
 8006d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	f003 fa05 	bl	800a1aa <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006da0:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8006da4:	f000 842d 	beq.w	8007602 <HAL_PCD_IRQHandler+0x86e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006da8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80070b8 <HAL_PCD_IRQHandler+0x324>
 8006dac:	4fc1      	ldr	r7, [pc, #772]	; (80070b4 <HAL_PCD_IRQHandler+0x320>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006db4:	041a      	lsls	r2, r3, #16
 8006db6:	d402      	bmi.n	8006dbe <HAL_PCD_IRQHandler+0x2a>
}
 8006db8:	b003      	add	sp, #12
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8006dbe:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8006dc2:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8006dc4:	f015 050f 	ands.w	r5, r5, #15
 8006dc8:	f040 80b7 	bne.w	8006f3a <HAL_PCD_IRQHandler+0x1a6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006dcc:	f011 0110 	ands.w	r1, r1, #16
 8006dd0:	d12a      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006dd2:	8803      	ldrh	r3, [r0, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea03 0308 	and.w	r3, r3, r8
 8006dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dde:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006de0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006de4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006de8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8006dec:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006df0:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006df2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8006df6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dfc:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006dfe:	4413      	add	r3, r2
 8006e00:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006e02:	f004 fb9e 	bl	800b542 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006e06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0cf      	beq.n	8006dae <HAL_PCD_IRQHandler+0x1a>
 8006e0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	d1cc      	bne.n	8006dae <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006e14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006e18:	6821      	ldr	r1, [r4, #0]
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006e22:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8006e26:	e7c2      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006e28:	8805      	ldrh	r5, [r0, #0]
 8006e2a:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e2c:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8006e30:	d020      	beq.n	8006e74 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e32:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e36:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006e3a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8006e3e:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e42:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006e46:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8006e4a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e52:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e56:	f003 fbd9 	bl	800a60c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	8813      	ldrh	r3, [r2, #0]
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	0d1b      	lsrs	r3, r3, #20
 8006e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f004 fb59 	bl	800b524 <HAL_PCD_SetupStageCallback>
 8006e72:	e79c      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e74:	041a      	lsls	r2, r3, #16
 8006e76:	d59a      	bpl.n	8006dae <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e78:	8803      	ldrh	r3, [r0, #0]
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	051b      	lsls	r3, r3, #20
 8006e80:	0d1b      	lsrs	r3, r3, #20
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e88:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e8c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006e90:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8006e94:	fa11 f383 	uxtah	r3, r1, r3
 8006e98:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8006e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea0:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ea4:	b18b      	cbz	r3, 8006eca <HAL_PCD_IRQHandler+0x136>
 8006ea6:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8006eaa:	b171      	cbz	r1, 8006eca <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eac:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006eb0:	f003 fbac 	bl	800a60c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8006eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eb8:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f004 fb33 	bl	800b530 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006eca:	6821      	ldr	r1, [r4, #0]
 8006ecc:	880b      	ldrh	r3, [r1, #0]
 8006ece:	051b      	lsls	r3, r3, #20
 8006ed0:	f53f af6d 	bmi.w	8006dae <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ed4:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8006ed8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8006edc:	2d3e      	cmp	r5, #62	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f201 4006 	addw	r0, r1, #1030	; 0x406
 8006ee4:	d908      	bls.n	8006ef8 <HAL_PCD_IRQHandler+0x164>
 8006ee6:	096a      	lsrs	r2, r5, #5
 8006ee8:	06ee      	lsls	r6, r5, #27
 8006eea:	bf08      	it	eq
 8006eec:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006ef0:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	e00a      	b.n	8006f0e <HAL_PCD_IRQHandler+0x17a>
 8006ef8:	b9cd      	cbnz	r5, 8006f2e <HAL_PCD_IRQHandler+0x19a>
 8006efa:	5ac2      	ldrh	r2, [r0, r3]
 8006efc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006f00:	0412      	lsls	r2, r2, #16
 8006f02:	0c12      	lsrs	r2, r2, #16
 8006f04:	52c2      	strh	r2, [r0, r3]
 8006f06:	5ac2      	ldrh	r2, [r0, r3]
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f0e:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f10:	880b      	ldrh	r3, [r1, #0]
 8006f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	800b      	strh	r3, [r1, #0]
 8006f2c:	e73f      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006f2e:	086a      	lsrs	r2, r5, #1
 8006f30:	07ed      	lsls	r5, r5, #31
 8006f32:	bf48      	it	mi
 8006f34:	3201      	addmi	r2, #1
 8006f36:	0292      	lsls	r2, r2, #10
 8006f38:	e7dc      	b.n	8006ef4 <HAL_PCD_IRQHandler+0x160>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f3a:	fa0f f985 	sxth.w	r9, r5
 8006f3e:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f42:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f44:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f46:	f140 80f7 	bpl.w	8007138 <HAL_PCD_IRQHandler+0x3a4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f4a:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	051b      	lsls	r3, r3, #20
 8006f54:	0d1b      	lsrs	r3, r3, #20
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8006f5a:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f5c:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8006f60:	fb01 4105 	mla	r1, r1, r5, r4
 8006f64:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8006f68:	b9bb      	cbnz	r3, 8006f9a <HAL_PCD_IRQHandler+0x206>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006f6e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006f72:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8006f76:	fa1c f383 	uxtah	r3, ip, r3
 8006f7a:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8006f7e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8006f82:	f1ba 0f00 	cmp.w	sl, #0
 8006f86:	f000 80bb 	beq.w	8007100 <HAL_PCD_IRQHandler+0x36c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006f8a:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8006f8e:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006f90:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006f94:	f003 fb3a 	bl	800a60c <USB_ReadPMA>
 8006f98:	e0b2      	b.n	8007100 <HAL_PCD_IRQHandler+0x36c>
          if (ep->type == EP_TYPE_BULK)
 8006f9a:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8006fa4:	f040 808a 	bne.w	80070bc <HAL_PCD_IRQHandler+0x328>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fa8:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= count)
 8006fac:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fb0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fb4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8006fb8:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fbc:	d03d      	beq.n	800703a <HAL_PCD_IRQHandler+0x2a6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fbe:	fa1a fa8c 	uxtah	sl, sl, ip
 8006fc2:	4482      	add	sl, r0
 8006fc4:	f8ba a402 	ldrh.w	sl, [sl, #1026]	; 0x402
 8006fc8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8006fcc:	4592      	cmp	sl, r2
 8006fce:	d913      	bls.n	8006ff8 <HAL_PCD_IRQHandler+0x264>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006fd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006fe2:	0412      	lsls	r2, r2, #16
 8006fe4:	0c12      	lsrs	r2, r2, #16
 8006fe6:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8006fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ff2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8006ff6:	e005      	b.n	8007004 <HAL_PCD_IRQHandler+0x270>
      ep->xfer_len -= count;
 8006ff8:	eba2 020a 	sub.w	r2, r2, sl
 8006ffc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8007000:	2a00      	cmp	r2, #0
 8007002:	d0e8      	beq.n	8006fd6 <HAL_PCD_IRQHandler+0x242>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007004:	f1be 0f00 	cmp.w	lr, #0
 8007008:	d00d      	beq.n	8007026 <HAL_PCD_IRQHandler+0x292>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800700a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800700e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007016:	0412      	lsls	r2, r2, #16
 8007018:	0c12      	lsrs	r2, r2, #16
 800701a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800701e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007022:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8007026:	f1ba 0f00 	cmp.w	sl, #0
 800702a:	d069      	beq.n	8007100 <HAL_PCD_IRQHandler+0x36c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800702c:	2128      	movs	r1, #40	; 0x28
 800702e:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007032:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8007036:	4653      	mov	r3, sl
 8007038:	e7aa      	b.n	8006f90 <HAL_PCD_IRQHandler+0x1fc>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800703a:	fa1a fc8c 	uxtah	ip, sl, ip
 800703e:	4484      	add	ip, r0
 8007040:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 8007044:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8007048:	4592      	cmp	sl, r2
 800704a:	d912      	bls.n	8007072 <HAL_PCD_IRQHandler+0x2de>
 800704c:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007050:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007058:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800705c:	0412      	lsls	r2, r2, #16
 800705e:	0c12      	lsrs	r2, r2, #16
 8007060:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8007064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800706c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8007070:	e005      	b.n	800707e <HAL_PCD_IRQHandler+0x2ea>
      ep->xfer_len -= count;
 8007072:	eba2 020a 	sub.w	r2, r2, sl
 8007076:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800707a:	2a00      	cmp	r2, #0
 800707c:	d0e8      	beq.n	8007050 <HAL_PCD_IRQHandler+0x2bc>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800707e:	f1be 0f00 	cmp.w	lr, #0
 8007082:	d10d      	bne.n	80070a0 <HAL_PCD_IRQHandler+0x30c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007084:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007088:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800708c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007090:	0412      	lsls	r2, r2, #16
 8007092:	0c12      	lsrs	r2, r2, #16
 8007094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007098:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800709c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80070a0:	f1ba 0f00 	cmp.w	sl, #0
 80070a4:	d02c      	beq.n	8007100 <HAL_PCD_IRQHandler+0x36c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070a6:	2128      	movs	r1, #40	; 0x28
 80070a8:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070ac:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80070b0:	4653      	mov	r3, sl
 80070b2:	e76d      	b.n	8006f90 <HAL_PCD_IRQHandler+0x1fc>
 80070b4:	ffff8000 	.word	0xffff8000
 80070b8:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80070c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80070c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070c8:	0412      	lsls	r2, r2, #16
 80070ca:	0c12      	lsrs	r2, r2, #16
 80070cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80070d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80070d8:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80070dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80070e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80070e8:	d062      	beq.n	80071b0 <HAL_PCD_IRQHandler+0x41c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070ea:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80070ee:	fa1c f383 	uxtah	r3, ip, r3
 80070f2:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80070f6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80070fa:	f1ba 0f00 	cmp.w	sl, #0
 80070fe:	d198      	bne.n	8007032 <HAL_PCD_IRQHandler+0x29e>
        ep->xfer_count += count;
 8007100:	2128      	movs	r1, #40	; 0x28
 8007102:	fb01 4305 	mla	r3, r1, r5, r4
 8007106:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800710a:	4452      	add	r2, sl
 800710c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8007110:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007114:	4452      	add	r2, sl
 8007116:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800711a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800711e:	b11a      	cbz	r2, 8007128 <HAL_PCD_IRQHandler+0x394>
 8007120:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007124:	459a      	cmp	sl, r3
 8007126:	d24f      	bcs.n	80071c8 <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007128:	2328      	movs	r3, #40	; 0x28
 800712a:	fb03 4305 	mla	r3, r3, r5, r4
 800712e:	4620      	mov	r0, r4
 8007130:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8007134:	f004 f9fc 	bl	800b530 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007138:	0632      	lsls	r2, r6, #24
 800713a:	f57f ae38 	bpl.w	8006dae <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea03 0308 	and.w	r3, r3, r8
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8007152:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8007156:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800715a:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800715e:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8007162:	2b02      	cmp	r3, #2
 8007164:	d05b      	beq.n	800721e <HAL_PCD_IRQHandler+0x48a>
          ep->xfer_len = 0U;
 8007166:	fb0c 4c05 	mla	ip, ip, r5, r4
 800716a:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 800716c:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
          ep->xfer_len = 0U;
 8007170:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8007174:	2b00      	cmp	r3, #0
 8007176:	d03a      	beq.n	80071ee <HAL_PCD_IRQHandler+0x45a>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007178:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800717c:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8007180:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8007184:	d039      	beq.n	80071fa <HAL_PCD_IRQHandler+0x466>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007186:	bb3b      	cbnz	r3, 80071d8 <HAL_PCD_IRQHandler+0x444>
 8007188:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800718c:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007190:	fa10 f083 	uxtah	r0, r0, r3
 8007194:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8007198:	8803      	ldrh	r3, [r0, #0]
 800719a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	8003      	strh	r3, [r0, #0]
 80071a4:	8803      	ldrh	r3, [r0, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ac:	8003      	strh	r3, [r0, #0]
 80071ae:	e01e      	b.n	80071ee <HAL_PCD_IRQHandler+0x45a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80071b0:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 80071b4:	fa1c f383 	uxtah	r3, ip, r3
 80071b8:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80071bc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	d09c      	beq.n	8007100 <HAL_PCD_IRQHandler+0x36c>
 80071c6:	e771      	b.n	80070ac <HAL_PCD_IRQHandler+0x318>
        ep = &hpcd->OUT_ep[epindex];
 80071c8:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80071cc:	6820      	ldr	r0, [r4, #0]
 80071ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80071d2:	f002 fffd 	bl	800a1d0 <USB_EPStartXfer>
 80071d6:	e7af      	b.n	8007138 <HAL_PCD_IRQHandler+0x3a4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d108      	bne.n	80071ee <HAL_PCD_IRQHandler+0x45a>
 80071dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80071e0:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80071e4:	fa10 f082 	uxtah	r0, r0, r2
 80071e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80071ec:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071ee:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071f2:	4620      	mov	r0, r4
 80071f4:	f004 f9a5 	bl	800b542 <HAL_PCD_DataInStageCallback>
 80071f8:	e5d9      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071fa:	b923      	cbnz	r3, 8007206 <HAL_PCD_IRQHandler+0x472>
 80071fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007200:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8007204:	e7c4      	b.n	8007190 <HAL_PCD_IRQHandler+0x3fc>
 8007206:	2b01      	cmp	r3, #1
 8007208:	d1f1      	bne.n	80071ee <HAL_PCD_IRQHandler+0x45a>
 800720a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800720e:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8007212:	fa10 f383 	uxtah	r3, r0, r3
 8007216:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 800721a:	8006      	strh	r6, [r0, #0]
 800721c:	e7e7      	b.n	80071ee <HAL_PCD_IRQHandler+0x45a>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800721e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8007222:	fb0c 4c05 	mla	ip, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007226:	f416 7e80 	ands.w	lr, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 800722a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800722e:	460a      	mov	r2, r1
 8007230:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007234:	d122      	bne.n	800727c <HAL_PCD_IRQHandler+0x4e8>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007236:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800723a:	fa10 f282 	uxtah	r2, r0, r2
 800723e:	4452      	add	r2, sl
 8007240:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8007244:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <HAL_PCD_IRQHandler+0x4be>
 800724c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
 8007250:	e7cf      	b.n	80071f2 <HAL_PCD_IRQHandler+0x45e>
              ep->xfer_len -= TxPctSize;
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8007258:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 800725c:	4413      	add	r3, r2
 800725e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8007262:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8007266:	3501      	adds	r5, #1
              ep->xfer_count += TxPctSize;
 8007268:	4413      	add	r3, r2
        ep = &hpcd->IN_ep[epindex];
 800726a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
              ep->xfer_count += TxPctSize;
 800726e:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007272:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007276:	f002 ffab 	bl	800a1d0 <USB_EPStartXfer>
 800727a:	e598      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800727c:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007280:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8007284:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007288:	f000 80dc 	beq.w	8007444 <HAL_PCD_IRQHandler+0x6b0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800728c:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8007290:	fa1e fc8c 	uxtah	ip, lr, ip
 8007294:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8007298:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 800729c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80072a0:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 80072a2:	fb0a 4a05 	mla	sl, sl, r5, r4
 80072a6:	bf34      	ite	cc
 80072a8:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 80072ac:	2300      	movcs	r3, #0
 80072ae:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072b2:	b2b6      	uxth	r6, r6
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d154      	bne.n	8007362 <HAL_PCD_IRQHandler+0x5ce>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072b8:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 80072bc:	2d00      	cmp	r5, #0
 80072be:	d13f      	bne.n	8007340 <HAL_PCD_IRQHandler+0x5ac>
 80072c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80072c4:	fa1e fe83 	uxtah	lr, lr, r3
 80072c8:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 80072cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 80072d8:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e2:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80072ea:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80072ee:	fa10 f083 	uxtah	r0, r0, r3
 80072f2:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	0c1b      	lsrs	r3, r3, #16
 80072fe:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8007302:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730c:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007310:	4620      	mov	r0, r4
 8007312:	f004 f916 	bl	800b542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007316:	2e00      	cmp	r6, #0
 8007318:	f000 80dd 	beq.w	80074d6 <HAL_PCD_IRQHandler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800731c:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8007320:	6822      	ldr	r2, [r4, #0]
 8007322:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800733e:	e0ca      	b.n	80074d6 <HAL_PCD_IRQHandler+0x742>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007340:	2d01      	cmp	r5, #1
 8007342:	d1e5      	bne.n	8007310 <HAL_PCD_IRQHandler+0x57c>
 8007344:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007348:	fa1e fe85 	uxtah	lr, lr, r5
 800734c:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007350:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007354:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8007358:	fa10 f585 	uxtah	r5, r0, r5
 800735c:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8007360:	e7d6      	b.n	8007310 <HAL_PCD_IRQHandler+0x57c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007362:	b16e      	cbz	r6, 8007380 <HAL_PCD_IRQHandler+0x5ec>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007364:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007380:	2628      	movs	r6, #40	; 0x28
 8007382:	fb06 4605 	mla	r6, r6, r5, r4
 8007386:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 800738a:	2b01      	cmp	r3, #1
 800738c:	f040 80a3 	bne.w	80074d6 <HAL_PCD_IRQHandler+0x742>
        ep->xfer_count += TxPctSize;
 8007390:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8007392:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007394:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8007398:	4463      	add	r3, ip
 800739a:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800739c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 800739e:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80073a0:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 80073a2:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80073a4:	d31a      	bcc.n	80073dc <HAL_PCD_IRQHandler+0x648>
          ep->xfer_len_db -= len;
 80073a6:	ebaa 0a03 	sub.w	sl, sl, r3
 80073aa:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073ae:	f899 6029 	ldrb.w	r6, [r9, #41]	; 0x29
 80073b2:	fa1f fc83 	uxth.w	ip, r3
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	d13b      	bne.n	8007432 <HAL_PCD_IRQHandler+0x69e>
 80073ba:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80073be:	2b3e      	cmp	r3, #62	; 0x3e
 80073c0:	fa1e fe86 	uxtah	lr, lr, r6
 80073c4:	d917      	bls.n	80073f6 <HAL_PCD_IRQHandler+0x662>
 80073c6:	095e      	lsrs	r6, r3, #5
 80073c8:	06db      	lsls	r3, r3, #27
 80073ca:	bf08      	it	eq
 80073cc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80073d0:	ea47 2686 	orr.w	r6, r7, r6, lsl #10
 80073d4:	b2b6      	uxth	r6, r6
 80073d6:	f82e 6032 	strh.w	r6, [lr, r2, lsl #3]
 80073da:	e01c      	b.n	8007416 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 80073dc:	f1ba 0f00 	cmp.w	sl, #0
 80073e0:	d103      	bne.n	80073ea <HAL_PCD_IRQHandler+0x656>
          ep->xfer_fill_db = 0U;
 80073e2:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len > TxPctSize)
 80073e6:	4663      	mov	r3, ip
 80073e8:	e7e1      	b.n	80073ae <HAL_PCD_IRQHandler+0x61a>
          ep->xfer_fill_db = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80073f0:	64b3      	str	r3, [r6, #72]	; 0x48
 80073f2:	4653      	mov	r3, sl
 80073f4:	e7db      	b.n	80073ae <HAL_PCD_IRQHandler+0x61a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073f6:	b9b3      	cbnz	r3, 8007426 <HAL_PCD_IRQHandler+0x692>
 80073f8:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80073fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	0c1b      	lsrs	r3, r3, #16
 8007404:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8007408:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007412:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007416:	2328      	movs	r3, #40	; 0x28
 8007418:	fb03 4505 	mla	r5, r3, r5, r4
 800741c:	4663      	mov	r3, ip
 800741e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007420:	f002 fec7 	bl	800a1b2 <USB_WritePMA>
 8007424:	e057      	b.n	80074d6 <HAL_PCD_IRQHandler+0x742>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007426:	085e      	lsrs	r6, r3, #1
 8007428:	07db      	lsls	r3, r3, #31
 800742a:	bf48      	it	mi
 800742c:	3601      	addmi	r6, #1
 800742e:	02b6      	lsls	r6, r6, #10
 8007430:	e7d0      	b.n	80073d4 <HAL_PCD_IRQHandler+0x640>
 8007432:	2e01      	cmp	r6, #1
 8007434:	bf02      	ittt	eq
 8007436:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 800743a:	fa1e fe83 	uxtaheq	lr, lr, r3
 800743e:	f82e c032 	strheq.w	ip, [lr, r2, lsl #3]
 8007442:	e7e8      	b.n	8007416 <HAL_PCD_IRQHandler+0x682>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007444:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8007448:	fa1e fc8c 	uxtah	ip, lr, ip
 800744c:	b2b6      	uxth	r6, r6
 800744e:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8007452:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007456:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8007458:	bf88      	it	hi
 800745a:	4653      	movhi	r3, sl
 800745c:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8007460:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8007464:	bf98      	it	ls
 8007466:	eba3 030c 	subls.w	r3, r3, ip
 800746a:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800746e:	2b00      	cmp	r3, #0
 8007470:	d153      	bne.n	800751a <HAL_PCD_IRQHandler+0x786>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007472:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8007476:	2d00      	cmp	r5, #0
 8007478:	d140      	bne.n	80074fc <HAL_PCD_IRQHandler+0x768>
 800747a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800747e:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8007482:	fa13 f585 	uxtah	r5, r3, r5
 8007486:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 800748a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8007496:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 800749a:	b29b      	uxth	r3, r3
 800749c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a0:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80074a8:	fa1e fe83 	uxtah	lr, lr, r3
 80074ac:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 80074b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 80074bc:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c6:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074ca:	4620      	mov	r0, r4
 80074cc:	f004 f839 	bl	800b542 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	f43f af23 	beq.w	800731c <HAL_PCD_IRQHandler+0x588>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80074d6:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80074fa:	e458      	b.n	8006dae <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074fc:	2d01      	cmp	r5, #1
 80074fe:	d1e4      	bne.n	80074ca <HAL_PCD_IRQHandler+0x736>
 8007500:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007504:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8007508:	fa1c f585 	uxtah	r5, ip, r5
 800750c:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007510:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8007514:	fa1e fe80 	uxtah	lr, lr, r0
 8007518:	e7d5      	b.n	80074c6 <HAL_PCD_IRQHandler+0x732>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800751a:	b96e      	cbnz	r6, 8007538 <HAL_PCD_IRQHandler+0x7a4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800751c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007538:	2628      	movs	r6, #40	; 0x28
 800753a:	fb06 4605 	mla	r6, r6, r5, r4
 800753e:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d1c7      	bne.n	80074d6 <HAL_PCD_IRQHandler+0x742>
        ep->xfer_count += TxPctSize;
 8007546:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8007548:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800754a:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 800754e:	4463      	add	r3, ip
 8007550:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8007552:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8007554:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8007556:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8007558:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800755a:	d31c      	bcc.n	8007596 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 800755c:	ebaa 0a03 	sub.w	sl, sl, r3
 8007560:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007564:	f899 c029 	ldrb.w	ip, [r9, #41]	; 0x29
 8007568:	b29e      	uxth	r6, r3
 800756a:	f1bc 0f00 	cmp.w	ip, #0
 800756e:	d13e      	bne.n	80075ee <HAL_PCD_IRQHandler+0x85a>
 8007570:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8007574:	2b3e      	cmp	r3, #62	; 0x3e
 8007576:	fa1e fe8c 	uxtah	lr, lr, ip
 800757a:	d919      	bls.n	80075b0 <HAL_PCD_IRQHandler+0x81c>
 800757c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8007580:	06db      	lsls	r3, r3, #27
 8007582:	bf08      	it	eq
 8007584:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007588:	ea47 2c8c 	orr.w	ip, r7, ip, lsl #10
 800758c:	fa1f fc8c 	uxth.w	ip, ip
 8007590:	f82e c032 	strh.w	ip, [lr, r2, lsl #3]
 8007594:	e01c      	b.n	80075d0 <HAL_PCD_IRQHandler+0x83c>
        else if (ep->xfer_len_db == 0U)
 8007596:	f1ba 0f00 	cmp.w	sl, #0
 800759a:	d103      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x810>
          ep->xfer_fill_db = 0U;
 800759c:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len >= TxPctSize)
 80075a0:	4663      	mov	r3, ip
 80075a2:	e7df      	b.n	8007564 <HAL_PCD_IRQHandler+0x7d0>
          ep->xfer_len_db = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	64b3      	str	r3, [r6, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80075a8:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 80075ac:	4653      	mov	r3, sl
 80075ae:	e7d9      	b.n	8007564 <HAL_PCD_IRQHandler+0x7d0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075b0:	b9a3      	cbnz	r3, 80075dc <HAL_PCD_IRQHandler+0x848>
 80075b2:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80075b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 80075c2:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075cc:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075d0:	2328      	movs	r3, #40	; 0x28
 80075d2:	fb03 4505 	mla	r5, r3, r5, r4
 80075d6:	4633      	mov	r3, r6
 80075d8:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 80075da:	e721      	b.n	8007420 <HAL_PCD_IRQHandler+0x68c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075dc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80075e0:	07db      	lsls	r3, r3, #31
 80075e2:	bf48      	it	mi
 80075e4:	f10c 0c01 	addmi.w	ip, ip, #1
 80075e8:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80075ec:	e7ce      	b.n	800758c <HAL_PCD_IRQHandler+0x7f8>
 80075ee:	f1bc 0f01 	cmp.w	ip, #1
 80075f2:	bf02      	ittt	eq
 80075f4:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80075f8:	fa1e fe83 	uxtaheq	lr, lr, r3
 80075fc:	f82e 6032 	strheq.w	r6, [lr, r2, lsl #3]
 8007600:	e7e6      	b.n	80075d0 <HAL_PCD_IRQHandler+0x83c>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007602:	0543      	lsls	r3, r0, #21
 8007604:	d513      	bpl.n	800762e <HAL_PCD_IRQHandler+0x89a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	9101      	str	r1, [sp, #4]
 800760a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800760e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8007616:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007618:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800761c:	f003 ff9d 	bl	800b55a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007620:	9901      	ldr	r1, [sp, #4]
 8007622:	4620      	mov	r0, r4
}
 8007624:	b003      	add	sp, #12
 8007626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800762a:	f7ff bb9f 	b.w	8006d6c <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800762e:	0447      	lsls	r7, r0, #17
 8007630:	d50a      	bpl.n	8007648 <HAL_PCD_IRQHandler+0x8b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8007644:	f7ff bbb8 	b.w	8006db8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007648:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 800764c:	d005      	beq.n	800765a <HAL_PCD_IRQHandler+0x8c6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007658:	e7f0      	b.n	800763c <HAL_PCD_IRQHandler+0x8a8>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800765a:	04c6      	lsls	r6, r0, #19
 800765c:	d522      	bpl.n	80076a4 <HAL_PCD_IRQHandler+0x910>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007664:	f023 0304 	bic.w	r3, r3, #4
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007670:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007674:	f023 0308 	bic.w	r3, r3, #8
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8007680:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d104      	bne.n	8007692 <HAL_PCD_IRQHandler+0x8fe>
      hpcd->LPM_State = LPM_L0;
 8007688:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800768c:	4620      	mov	r0, r4
 800768e:	f004 f841 	bl	800b714 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8007692:	4620      	mov	r0, r4
 8007694:	f003 ff84 	bl	800b5a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007698:	6822      	ldr	r2, [r4, #0]
 800769a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800769e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076a2:	e7cb      	b.n	800763c <HAL_PCD_IRQHandler+0x8a8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80076a4:	0505      	lsls	r5, r0, #20
 80076a6:	d51b      	bpl.n	80076e0 <HAL_PCD_IRQHandler+0x94c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f043 0308 	orr.w	r3, r3, #8
 80076b4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80076b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80076bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f043 0304 	orr.w	r3, r3, #4
 80076d2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 80076d6:	4620      	mov	r0, r4
 80076d8:	f003 ff52 	bl	800b580 <HAL_PCD_SuspendCallback>
 80076dc:	f7ff bb6c 	b.w	8006db8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80076e0:	0601      	lsls	r1, r0, #24
 80076e2:	d52b      	bpl.n	800773c <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80076ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ee:	0412      	lsls	r2, r2, #16
 80076f0:	0c12      	lsrs	r2, r2, #16
 80076f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80076f6:	f894 22e0 	ldrb.w	r2, [r4, #736]	; 0x2e0
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	d1eb      	bne.n	80076d6 <HAL_PCD_IRQHandler+0x942>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076fe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007702:	b292      	uxth	r2, r2
 8007704:	f042 0204 	orr.w	r2, r2, #4
 8007708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800770c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007710:	b292      	uxth	r2, r2
 8007712:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8007716:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 800771c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007720:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007724:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8007728:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800772c:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800772e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 8007732:	b003      	add	sp, #12
 8007734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007738:	f003 bfec 	b.w	800b714 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800773c:	0582      	lsls	r2, r0, #22
 800773e:	d50d      	bpl.n	800775c <HAL_PCD_IRQHandler+0x9c8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007746:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007752:	4620      	mov	r0, r4
 8007754:	f003 fefd 	bl	800b552 <HAL_PCD_SOFCallback>
    return;
 8007758:	f7ff bb2e 	b.w	8006db8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800775c:	05c3      	lsls	r3, r0, #23
 800775e:	f57f ab2b 	bpl.w	8006db8 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776c:	e766      	b.n	800763c <HAL_PCD_IRQHandler+0x8a8>
 800776e:	bf00      	nop

08007770 <HAL_PCD_EP_Open>:
{
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8007776:	0609      	lsls	r1, r1, #24
{
 8007778:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800777a:	d522      	bpl.n	80077c2 <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777c:	1c69      	adds	r1, r5, #1
 800777e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007782:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8007786:	2028      	movs	r0, #40	; 0x28
 8007788:	fb05 0000 	mla	r0, r5, r0, r0
 800778c:	4420      	add	r0, r4
 800778e:	2601      	movs	r6, #1
 8007790:	7046      	strb	r6, [r0, #1]
  ep->maxpacket = ep_mps;
 8007792:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8007794:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007796:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8007798:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800779a:	b102      	cbz	r2, 800779e <HAL_PCD_EP_Open+0x2e>
    ep->tx_fifo_num = ep->num;
 800779c:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800779e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80077a0:	bf04      	itt	eq
 80077a2:	2300      	moveq	r3, #0
 80077a4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80077a6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d014      	beq.n	80077d8 <HAL_PCD_EP_Open+0x68>
 80077ae:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80077b2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077b6:	f002 fa57 	bl	8009c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077ba:	2000      	movs	r0, #0
 80077bc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077c2:	2028      	movs	r0, #40	; 0x28
 80077c4:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 80077c8:	fb00 4005 	mla	r0, r0, r5, r4
 80077cc:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80077d2:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 80077d6:	e7dc      	b.n	8007792 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 80077d8:	2002      	movs	r0, #2
 80077da:	e7f1      	b.n	80077c0 <HAL_PCD_EP_Open+0x50>

080077dc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80077dc:	060b      	lsls	r3, r1, #24
{
 80077de:	b510      	push	{r4, lr}
 80077e0:	f001 0207 	and.w	r2, r1, #7
 80077e4:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80077e6:	d519      	bpl.n	800781c <HAL_PCD_EP_Close+0x40>
    ep->is_in = 1U;
 80077e8:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077ea:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 80077ec:	fb02 3303 	mla	r3, r2, r3, r3
 80077f0:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80077f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80077fa:	2001      	movs	r0, #1
 80077fc:	7058      	strb	r0, [r3, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80077fe:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007800:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007804:	2b01      	cmp	r3, #1
 8007806:	d014      	beq.n	8007832 <HAL_PCD_EP_Close+0x56>
 8007808:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800780a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800780c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007810:	f002 fb80 	bl	8009f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007814:	2000      	movs	r0, #0
 8007816:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800781a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800781c:	2328      	movs	r3, #40	; 0x28
 800781e:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8007822:	fb03 0302 	mla	r3, r3, r2, r0
 8007826:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007828:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800782c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8007830:	e7e5      	b.n	80077fe <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 8007832:	2002      	movs	r0, #2
 8007834:	e7f1      	b.n	800781a <HAL_PCD_EP_Close+0x3e>

08007836 <HAL_PCD_EP_Receive>:
{
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800783c:	2628      	movs	r6, #40	; 0x28
 800783e:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8007842:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8007844:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 8007848:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800784c:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8007850:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007854:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f002 fcb9 	bl	800a1d0 <USB_EPStartXfer>
}
 800785e:	4628      	mov	r0, r5
 8007860:	bd70      	pop	{r4, r5, r6, pc}

08007862 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007862:	f001 0107 	and.w	r1, r1, #7
 8007866:	2328      	movs	r3, #40	; 0x28
 8007868:	fb03 0001 	mla	r0, r3, r1, r0
}
 800786c:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8007870:	4770      	bx	lr

08007872 <HAL_PCD_EP_Transmit>:
{
 8007872:	b538      	push	{r3, r4, r5, lr}
 8007874:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8007878:	2428      	movs	r4, #40	; 0x28
 800787a:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 800787e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 8007882:	64a3      	str	r3, [r4, #72]	; 0x48
 8007884:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007888:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 800788c:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800788e:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 8007890:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8007894:	6465      	str	r5, [r4, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 8007896:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800789a:	4411      	add	r1, r2
 800789c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->is_in = 1U;
 80078a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078a8:	6800      	ldr	r0, [r0, #0]
 80078aa:	f002 fc91 	bl	800a1d0 <USB_EPStartXfer>
}
 80078ae:	4628      	mov	r0, r5
 80078b0:	bd38      	pop	{r3, r4, r5, pc}

080078b2 <HAL_PCD_EP_SetStall>:
{
 80078b2:	b538      	push	{r3, r4, r5, lr}
 80078b4:	4604      	mov	r4, r0
 80078b6:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	4298      	cmp	r0, r3
 80078be:	d826      	bhi.n	800790e <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80078c0:	060b      	lsls	r3, r1, #24
 80078c2:	d51a      	bpl.n	80078fa <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 1U;
 80078c4:	2328      	movs	r3, #40	; 0x28
 80078c6:	fb00 3303 	mla	r3, r0, r3, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ca:	1c41      	adds	r1, r0, #1
    ep->is_in = 1U;
 80078cc:	4423      	add	r3, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ep->is_in = 1U;
 80078d2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078d4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80078d8:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1U;
 80078da:	2301      	movs	r3, #1
 80078dc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078de:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80078e0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d014      	beq.n	8007912 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80078e8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80078ea:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80078ee:	f002 fbe2 	bl	800a0b6 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80078f2:	2000      	movs	r0, #0
 80078f4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80078fa:	2528      	movs	r5, #40	; 0x28
 80078fc:	fb05 4301 	mla	r3, r5, r1, r4
    ep->is_in = 0U;
 8007900:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8007902:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
 800790c:	e7e5      	b.n	80078da <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800790e:	2001      	movs	r0, #1
 8007910:	e7f2      	b.n	80078f8 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 8007912:	2002      	movs	r0, #2
 8007914:	e7f0      	b.n	80078f8 <HAL_PCD_EP_SetStall+0x46>

08007916 <HAL_PCD_EP_ClrStall>:
{
 8007916:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007918:	6843      	ldr	r3, [r0, #4]
 800791a:	f001 020f 	and.w	r2, r1, #15
 800791e:	429a      	cmp	r2, r3
{
 8007920:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007922:	d82a      	bhi.n	800797a <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8007924:	060b      	lsls	r3, r1, #24
 8007926:	f001 0207 	and.w	r2, r1, #7
 800792a:	d51b      	bpl.n	8007964 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 1U;
 800792c:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800792e:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 8007930:	fb02 3303 	mla	r3, r2, r3, r3
 8007934:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007936:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800793a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800793e:	2001      	movs	r0, #1
 8007940:	7058      	strb	r0, [r3, #1]
  ep->is_stall = 0U;
 8007942:	2500      	movs	r5, #0
 8007944:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007946:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007948:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800794c:	2b01      	cmp	r3, #1
 800794e:	d016      	beq.n	800797e <HAL_PCD_EP_ClrStall+0x68>
 8007950:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007952:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007954:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007958:	f002 fbcd 	bl	800a0f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800795c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007960:	4628      	mov	r0, r5
}
 8007962:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007964:	2328      	movs	r3, #40	; 0x28
 8007966:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800796a:	fb03 0302 	mla	r3, r3, r2, r0
 800796e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007970:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8007974:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8007978:	e7e3      	b.n	8007942 <HAL_PCD_EP_ClrStall+0x2c>
    return HAL_ERROR;
 800797a:	2001      	movs	r0, #1
 800797c:	e7f1      	b.n	8007962 <HAL_PCD_EP_ClrStall+0x4c>
  __HAL_LOCK(hpcd);
 800797e:	2002      	movs	r0, #2
 8007980:	e7ef      	b.n	8007962 <HAL_PCD_EP_ClrStall+0x4c>

08007982 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007982:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007986:	bf18      	it	ne
 8007988:	f001 0107 	andne.w	r1, r1, #7
{
 800798c:	b510      	push	{r4, lr}
 800798e:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007992:	bf15      	itete	ne
 8007994:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007998:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800799c:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800799e:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80079a2:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80079a4:	b91a      	cbnz	r2, 80079ae <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 80079a6:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80079a8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80079aa:	2000      	movs	r0, #0
 80079ac:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80079ae:	2201      	movs	r2, #1
 80079b0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80079b2:	6083      	str	r3, [r0, #8]
 80079b4:	e7f9      	b.n	80079aa <HAL_PCDEx_PMAConfig+0x28>

080079b6 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80079b6:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80079b8:	2100      	movs	r1, #0
 80079ba:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0
  hpcd->lpm_active = 1U;
 80079be:	2301      	movs	r3, #1
 80079c0:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80079c4:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80079d2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f043 0302 	orr.w	r3, r3, #2
 80079dc:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80079e0:	4608      	mov	r0, r1
 80079e2:	4770      	bx	lr

080079e4 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80079e4:	4b29      	ldr	r3, [pc, #164]	; (8007a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079e6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80079e8:	bb30      	cbnz	r0, 8007a38 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079ea:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80079ee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80079f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079fe:	d11a      	bne.n	8007a36 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a0c:	4a20      	ldr	r2, [pc, #128]	; (8007a90 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	2132      	movs	r1, #50	; 0x32
 8007a12:	434a      	muls	r2, r1
 8007a14:	491f      	ldr	r1, [pc, #124]	; (8007a94 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007a16:	fbb2 f2f1 	udiv	r2, r2, r1
 8007a1a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a1c:	6959      	ldr	r1, [r3, #20]
 8007a1e:	0549      	lsls	r1, r1, #21
 8007a20:	d500      	bpl.n	8007a24 <HAL_PWREx_ControlVoltageScaling+0x40>
 8007a22:	b922      	cbnz	r2, 8007a2e <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	0558      	lsls	r0, r3, #21
 8007a28:	d403      	bmi.n	8007a32 <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007a2a:	2000      	movs	r0, #0
}
 8007a2c:	4770      	bx	lr
        wait_loop_index--;
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	e7f4      	b.n	8007a1c <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8007a32:	2003      	movs	r0, #3
 8007a34:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a36:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007a3c:	d11f      	bne.n	8007a7e <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a3e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8007a42:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a52:	d1ea      	bne.n	8007a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5e:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a60:	4a0b      	ldr	r2, [pc, #44]	; (8007a90 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	2132      	movs	r1, #50	; 0x32
 8007a66:	434a      	muls	r2, r1
 8007a68:	490a      	ldr	r1, [pc, #40]	; (8007a94 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007a6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8007a6e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a70:	6959      	ldr	r1, [r3, #20]
 8007a72:	0549      	lsls	r1, r1, #21
 8007a74:	d5d6      	bpl.n	8007a24 <HAL_PWREx_ControlVoltageScaling+0x40>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d0d4      	beq.n	8007a24 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8007a7a:	3a01      	subs	r2, #1
 8007a7c:	e7f8      	b.n	8007a70 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a7e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e7cf      	b.n	8007a2a <HAL_PWREx_ControlVoltageScaling+0x46>
 8007a8a:	bf00      	nop
 8007a8c:	40007000 	.word	0x40007000
 8007a90:	20000000 	.word	0x20000000
 8007a94:	000f4240 	.word	0x000f4240

08007a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	b340      	cbz	r0, 8007af2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aa0:	6803      	ldr	r3, [r0, #0]
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	d414      	bmi.n	8007ad0 <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	079e      	lsls	r6, r3, #30
 8007aaa:	d45b      	bmi.n	8007b64 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	071e      	lsls	r6, r3, #28
 8007ab0:	f100 80a4 	bmi.w	8007bfc <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	075d      	lsls	r5, r3, #29
 8007ab8:	f100 80cb 	bmi.w	8007c52 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	069b      	lsls	r3, r3, #26
 8007ac0:	f100 8132 	bmi.w	8007d28 <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ac4:	69e0      	ldr	r0, [r4, #28]
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f040 8160 	bne.w	8007d8c <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 8007acc:	2000      	movs	r0, #0
 8007ace:	e028      	b.n	8007b22 <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ad0:	4da1      	ldr	r5, [pc, #644]	; (8007d58 <HAL_RCC_OscConfig+0x2c0>)
 8007ad2:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad4:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ad6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ade:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d109      	bne.n	8007afa <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	039d      	lsls	r5, r3, #14
 8007aea:	d5dc      	bpl.n	8007aa6 <HAL_RCC_OscConfig+0xe>
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1d9      	bne.n	8007aa6 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8007af2:	2001      	movs	r0, #1
 8007af4:	e015      	b.n	8007b22 <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	e7f4      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b00:	d112      	bne.n	8007b28 <HAL_RCC_OscConfig+0x90>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b0a:	f7fd f97f 	bl	8004e0c <HAL_GetTick>
 8007b0e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	0398      	lsls	r0, r3, #14
 8007b14:	d4c7      	bmi.n	8007aa6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b16:	f7fd f979 	bl	8004e0c <HAL_GetTick>
 8007b1a:	1b80      	subs	r0, r0, r6
 8007b1c:	2864      	cmp	r0, #100	; 0x64
 8007b1e:	d9f7      	bls.n	8007b10 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8007b20:	2003      	movs	r0, #3
}
 8007b22:	b002      	add	sp, #8
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b2c:	d104      	bne.n	8007b38 <HAL_RCC_OscConfig+0xa0>
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	e7e4      	b.n	8007b02 <HAL_RCC_OscConfig+0x6a>
 8007b38:	682a      	ldr	r2, [r5, #0]
 8007b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b3e:	602a      	str	r2, [r5, #0]
 8007b40:	682a      	ldr	r2, [r5, #0]
 8007b42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b46:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1de      	bne.n	8007b0a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8007b4c:	f7fd f95e 	bl	8004e0c <HAL_GetTick>
 8007b50:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	0399      	lsls	r1, r3, #14
 8007b56:	d5a6      	bpl.n	8007aa6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b58:	f7fd f958 	bl	8004e0c <HAL_GetTick>
 8007b5c:	1b80      	subs	r0, r0, r6
 8007b5e:	2864      	cmp	r0, #100	; 0x64
 8007b60:	d9f7      	bls.n	8007b52 <HAL_RCC_OscConfig+0xba>
 8007b62:	e7dd      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b64:	4d7c      	ldr	r5, [pc, #496]	; (8007d58 <HAL_RCC_OscConfig+0x2c0>)
 8007b66:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b68:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b6a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d117      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b72:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d115      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b7a:	682b      	ldr	r3, [r5, #0]
 8007b7c:	055a      	lsls	r2, r3, #21
 8007b7e:	d502      	bpl.n	8007b86 <HAL_RCC_OscConfig+0xee>
 8007b80:	68e3      	ldr	r3, [r4, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0b5      	beq.n	8007af2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b86:	686b      	ldr	r3, [r5, #4]
 8007b88:	6922      	ldr	r2, [r4, #16]
 8007b8a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007b92:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b94:	4b71      	ldr	r3, [pc, #452]	; (8007d5c <HAL_RCC_OscConfig+0x2c4>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	f7fd f8f6 	bl	8004d88 <HAL_InitTick>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d085      	beq.n	8007aac <HAL_RCC_OscConfig+0x14>
 8007ba0:	e7a7      	b.n	8007af2 <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	e7e8      	b.n	8007b78 <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	b1bb      	cbz	r3, 8007bda <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007bb2:	f7fd f92b 	bl	8004e0c <HAL_GetTick>
 8007bb6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	055b      	lsls	r3, r3, #21
 8007bbc:	d507      	bpl.n	8007bce <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bbe:	686b      	ldr	r3, [r5, #4]
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007bc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bca:	606b      	str	r3, [r5, #4]
 8007bcc:	e76e      	b.n	8007aac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bce:	f7fd f91d 	bl	8004e0c <HAL_GetTick>
 8007bd2:	1b80      	subs	r0, r0, r6
 8007bd4:	2802      	cmp	r0, #2
 8007bd6:	d9ef      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x120>
 8007bd8:	e7a2      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007be2:	f7fd f913 	bl	8004e0c <HAL_GetTick>
 8007be6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	055f      	lsls	r7, r3, #21
 8007bec:	f57f af5e 	bpl.w	8007aac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bf0:	f7fd f90c 	bl	8004e0c <HAL_GetTick>
 8007bf4:	1b80      	subs	r0, r0, r6
 8007bf6:	2802      	cmp	r0, #2
 8007bf8:	d9f6      	bls.n	8007be8 <HAL_RCC_OscConfig+0x150>
 8007bfa:	e791      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bfc:	6963      	ldr	r3, [r4, #20]
 8007bfe:	4d56      	ldr	r5, [pc, #344]	; (8007d58 <HAL_RCC_OscConfig+0x2c0>)
 8007c00:	b19b      	cbz	r3, 8007c2a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8007c02:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007c0e:	f7fd f8fd 	bl	8004e0c <HAL_GetTick>
 8007c12:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007c18:	0798      	lsls	r0, r3, #30
 8007c1a:	f53f af4b 	bmi.w	8007ab4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c1e:	f7fd f8f5 	bl	8004e0c <HAL_GetTick>
 8007c22:	1b80      	subs	r0, r0, r6
 8007c24:	2802      	cmp	r0, #2
 8007c26:	d9f5      	bls.n	8007c14 <HAL_RCC_OscConfig+0x17c>
 8007c28:	e77a      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8007c2a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007c2e:	f023 0301 	bic.w	r3, r3, #1
 8007c32:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007c36:	f7fd f8e9 	bl	8004e0c <HAL_GetTick>
 8007c3a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c3c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007c40:	0799      	lsls	r1, r3, #30
 8007c42:	f57f af37 	bpl.w	8007ab4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c46:	f7fd f8e1 	bl	8004e0c <HAL_GetTick>
 8007c4a:	1b80      	subs	r0, r0, r6
 8007c4c:	2802      	cmp	r0, #2
 8007c4e:	d9f5      	bls.n	8007c3c <HAL_RCC_OscConfig+0x1a4>
 8007c50:	e766      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c52:	4d41      	ldr	r5, [pc, #260]	; (8007d58 <HAL_RCC_OscConfig+0x2c0>)
 8007c54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007c56:	00da      	lsls	r2, r3, #3
 8007c58:	d427      	bmi.n	8007caa <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c60:	65ab      	str	r3, [r5, #88]	; 0x58
 8007c62:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c6c:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c6e:	4e3c      	ldr	r6, [pc, #240]	; (8007d60 <HAL_RCC_OscConfig+0x2c8>)
 8007c70:	6833      	ldr	r3, [r6, #0]
 8007c72:	05db      	lsls	r3, r3, #23
 8007c74:	d51b      	bpl.n	8007cae <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d129      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x238>
 8007c7c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8007c88:	f7fd f8c0 	bl	8004e0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007c90:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c92:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007c96:	0799      	lsls	r1, r3, #30
 8007c98:	d540      	bpl.n	8007d1c <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 8007c9a:	2f00      	cmp	r7, #0
 8007c9c:	f43f af0e 	beq.w	8007abc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	65ab      	str	r3, [r5, #88]	; 0x58
 8007ca8:	e708      	b.n	8007abc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8007caa:	2700      	movs	r7, #0
 8007cac:	e7df      	b.n	8007c6e <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cae:	6833      	ldr	r3, [r6, #0]
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007cb6:	f7fd f8a9 	bl	8004e0c <HAL_GetTick>
 8007cba:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	05d8      	lsls	r0, r3, #23
 8007cc0:	d4d9      	bmi.n	8007c76 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc2:	f7fd f8a3 	bl	8004e0c <HAL_GetTick>
 8007cc6:	eba0 0008 	sub.w	r0, r0, r8
 8007cca:	2802      	cmp	r0, #2
 8007ccc:	d9f6      	bls.n	8007cbc <HAL_RCC_OscConfig+0x224>
 8007cce:	e727      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cd0:	2b05      	cmp	r3, #5
 8007cd2:	d106      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x24a>
 8007cd4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8007ce0:	e7cc      	b.n	8007c7c <HAL_RCC_OscConfig+0x1e4>
 8007ce2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8007cee:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8007cf2:	f022 0204 	bic.w	r2, r2, #4
 8007cf6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1c4      	bne.n	8007c88 <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 8007cfe:	f7fd f885 	bl	8004e0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007d06:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d08:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007d0c:	079a      	lsls	r2, r3, #30
 8007d0e:	d5c4      	bpl.n	8007c9a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d10:	f7fd f87c 	bl	8004e0c <HAL_GetTick>
 8007d14:	1b80      	subs	r0, r0, r6
 8007d16:	4540      	cmp	r0, r8
 8007d18:	d9f6      	bls.n	8007d08 <HAL_RCC_OscConfig+0x270>
 8007d1a:	e701      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d1c:	f7fd f876 	bl	8004e0c <HAL_GetTick>
 8007d20:	1b80      	subs	r0, r0, r6
 8007d22:	4540      	cmp	r0, r8
 8007d24:	d9b5      	bls.n	8007c92 <HAL_RCC_OscConfig+0x1fa>
 8007d26:	e6fb      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d28:	69a3      	ldr	r3, [r4, #24]
 8007d2a:	4d0b      	ldr	r5, [pc, #44]	; (8007d58 <HAL_RCC_OscConfig+0x2c0>)
 8007d2c:	b1d3      	cbz	r3, 8007d64 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8007d2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007d3a:	f7fd f867 	bl	8004e0c <HAL_GetTick>
 8007d3e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d40:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007d44:	079f      	lsls	r7, r3, #30
 8007d46:	f53f aebd 	bmi.w	8007ac4 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d4a:	f7fd f85f 	bl	8004e0c <HAL_GetTick>
 8007d4e:	1b80      	subs	r0, r0, r6
 8007d50:	2802      	cmp	r0, #2
 8007d52:	d9f5      	bls.n	8007d40 <HAL_RCC_OscConfig+0x2a8>
 8007d54:	e6e4      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
 8007d56:	bf00      	nop
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	20000008 	.word	0x20000008
 8007d60:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8007d64:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007d70:	f7fd f84c 	bl	8004e0c <HAL_GetTick>
 8007d74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d76:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007d7a:	0798      	lsls	r0, r3, #30
 8007d7c:	f57f aea2 	bpl.w	8007ac4 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d80:	f7fd f844 	bl	8004e0c <HAL_GetTick>
 8007d84:	1b80      	subs	r0, r0, r6
 8007d86:	2802      	cmp	r0, #2
 8007d88:	d9f5      	bls.n	8007d76 <HAL_RCC_OscConfig+0x2de>
 8007d8a:	e6c9      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d8c:	4d48      	ldr	r5, [pc, #288]	; (8007eb0 <HAL_RCC_OscConfig+0x418>)
 8007d8e:	68ab      	ldr	r3, [r5, #8]
 8007d90:	f003 030c 	and.w	r3, r3, #12
 8007d94:	2b0c      	cmp	r3, #12
 8007d96:	d057      	beq.n	8007e48 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 8007d98:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d9a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007da0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007da2:	d13a      	bne.n	8007e1a <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8007da4:	f7fd f832 	bl	8004e0c <HAL_GetTick>
 8007da8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	0199      	lsls	r1, r3, #6
 8007dae:	d42e      	bmi.n	8007e0e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007db0:	68ea      	ldr	r2, [r5, #12]
 8007db2:	4b40      	ldr	r3, [pc, #256]	; (8007eb4 <HAL_RCC_OscConfig+0x41c>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	6a22      	ldr	r2, [r4, #32]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007dc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007dc2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8007dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007dc8:	3a01      	subs	r2, #1
 8007dca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007dce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007dd0:	0852      	lsrs	r2, r2, #1
 8007dd2:	3a01      	subs	r2, #1
 8007dd4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8007dd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007dda:	0852      	lsrs	r2, r2, #1
 8007ddc:	3a01      	subs	r2, #1
 8007dde:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007de2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dea:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007dec:	68eb      	ldr	r3, [r5, #12]
 8007dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007df2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007df4:	f7fd f80a 	bl	8004e0c <HAL_GetTick>
 8007df8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	019a      	lsls	r2, r3, #6
 8007dfe:	f53f ae65 	bmi.w	8007acc <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e02:	f7fd f803 	bl	8004e0c <HAL_GetTick>
 8007e06:	1b00      	subs	r0, r0, r4
 8007e08:	2802      	cmp	r0, #2
 8007e0a:	d9f6      	bls.n	8007dfa <HAL_RCC_OscConfig+0x362>
 8007e0c:	e688      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e0e:	f7fc fffd 	bl	8004e0c <HAL_GetTick>
 8007e12:	1b80      	subs	r0, r0, r6
 8007e14:	2802      	cmp	r0, #2
 8007e16:	d9c8      	bls.n	8007daa <HAL_RCC_OscConfig+0x312>
 8007e18:	e682      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007e1a:	68eb      	ldr	r3, [r5, #12]
 8007e1c:	f023 0303 	bic.w	r3, r3, #3
 8007e20:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007e22:	68eb      	ldr	r3, [r5, #12]
 8007e24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007e2e:	f7fc ffed 	bl	8004e0c <HAL_GetTick>
 8007e32:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	019b      	lsls	r3, r3, #6
 8007e38:	f57f ae48 	bpl.w	8007acc <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fc ffe6 	bl	8004e0c <HAL_GetTick>
 8007e40:	1b00      	subs	r0, r0, r4
 8007e42:	2802      	cmp	r0, #2
 8007e44:	d9f6      	bls.n	8007e34 <HAL_RCC_OscConfig+0x39c>
 8007e46:	e66b      	b.n	8007b20 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e48:	2801      	cmp	r0, #1
 8007e4a:	f43f ae6a 	beq.w	8007b22 <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007e4e:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e50:	6a22      	ldr	r2, [r4, #32]
 8007e52:	f003 0103 	and.w	r1, r3, #3
 8007e56:	4291      	cmp	r1, r2
 8007e58:	f47f ae4b 	bne.w	8007af2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e62:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e64:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007e68:	f47f ae43 	bne.w	8007af2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007e6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e72:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007e76:	f47f ae3c 	bne.w	8007af2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e80:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007e84:	f47f ae35 	bne.w	8007af2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007e8a:	0852      	lsrs	r2, r2, #1
 8007e8c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007e90:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e92:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007e96:	f47f ae2c 	bne.w	8007af2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007e9c:	0852      	lsrs	r2, r2, #1
 8007e9e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007ea2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ea4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007ea8:	f43f ae10 	beq.w	8007acc <HAL_RCC_OscConfig+0x34>
 8007eac:	e621      	b.n	8007af2 <HAL_RCC_OscConfig+0x5a>
 8007eae:	bf00      	nop
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	019f800c 	.word	0x019f800c

08007eb8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x60>)
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	f002 020c 	and.w	r2, r2, #12
 8007ec0:	2a04      	cmp	r2, #4
 8007ec2:	d023      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	f002 020c 	and.w	r2, r2, #12
 8007eca:	2a08      	cmp	r2, #8
 8007ecc:	d020      	beq.n	8007f10 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	f002 020c 	and.w	r2, r2, #12
 8007ed4:	2a0c      	cmp	r2, #12
 8007ed6:	d11d      	bne.n	8007f14 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ed8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007eda:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007edc:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ede:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ee0:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ee4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8007ee8:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007eea:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007eee:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ef2:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ef6:	bf0c      	ite	eq
 8007ef8:	4908      	ldreq	r1, [pc, #32]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007efa:	4909      	ldrne	r1, [pc, #36]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007efc:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007efe:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f00:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f04:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 8007f06:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8007f0a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007f0c:	4804      	ldr	r0, [pc, #16]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x68>)
 8007f0e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007f10:	4802      	ldr	r0, [pc, #8]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x64>)
 8007f12:	4770      	bx	lr
    sysclockfreq = 0U;
 8007f14:	2000      	movs	r0, #0
}
 8007f16:	4770      	bx	lr
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	007a1200 	.word	0x007a1200
 8007f20:	00f42400 	.word	0x00f42400

08007f24 <HAL_RCC_ClockConfig>:
{
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f28:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	b910      	cbnz	r0, 8007f34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007f2e:	2001      	movs	r0, #1
}
 8007f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f34:	4a6d      	ldr	r2, [pc, #436]	; (80080ec <HAL_RCC_ClockConfig+0x1c8>)
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	428b      	cmp	r3, r1
 8007f3e:	d345      	bcc.n	8007fcc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f40:	6829      	ldr	r1, [r5, #0]
 8007f42:	f011 0701 	ands.w	r7, r1, #1
 8007f46:	d14c      	bne.n	8007fe2 <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f48:	682a      	ldr	r2, [r5, #0]
 8007f4a:	0791      	lsls	r1, r2, #30
 8007f4c:	f140 80a8 	bpl.w	80080a0 <HAL_RCC_ClockConfig+0x17c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f50:	4b67      	ldr	r3, [pc, #412]	; (80080f0 <HAL_RCC_ClockConfig+0x1cc>)
 8007f52:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f56:	bf1e      	ittt	ne
 8007f58:	6899      	ldrne	r1, [r3, #8]
 8007f5a:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 8007f5e:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f60:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f62:	bf41      	itttt	mi
 8007f64:	689a      	ldrmi	r2, [r3, #8]
 8007f66:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8007f6a:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 8007f6e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	68a9      	ldr	r1, [r5, #8]
 8007f74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f7c:	4c5b      	ldr	r4, [pc, #364]	; (80080ec <HAL_RCC_ClockConfig+0x1c8>)
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	42b3      	cmp	r3, r6
 8007f86:	f200 8093 	bhi.w	80080b0 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f8a:	682a      	ldr	r2, [r5, #0]
 8007f8c:	4c58      	ldr	r4, [pc, #352]	; (80080f0 <HAL_RCC_ClockConfig+0x1cc>)
 8007f8e:	f012 0f04 	tst.w	r2, #4
 8007f92:	f040 80a3 	bne.w	80080dc <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f96:	0713      	lsls	r3, r2, #28
 8007f98:	d506      	bpl.n	8007fa8 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f9a:	68a3      	ldr	r3, [r4, #8]
 8007f9c:	692a      	ldr	r2, [r5, #16]
 8007f9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007fa2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007fa6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fa8:	f7ff ff86 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	4a51      	ldr	r2, [pc, #324]	; (80080f4 <HAL_RCC_ClockConfig+0x1d0>)
 8007fb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007fb4:	5cd3      	ldrb	r3, [r2, r3]
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	40d8      	lsrs	r0, r3
 8007fbc:	4b4e      	ldr	r3, [pc, #312]	; (80080f8 <HAL_RCC_ClockConfig+0x1d4>)
 8007fbe:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007fc0:	4b4e      	ldr	r3, [pc, #312]	; (80080fc <HAL_RCC_ClockConfig+0x1d8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
}
 8007fc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007fc8:	f7fc bede 	b.w	8004d88 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fcc:	6813      	ldr	r3, [r2, #0]
 8007fce:	f023 030f 	bic.w	r3, r3, #15
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	d1a6      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xa>
 8007fe0:	e7ae      	b.n	8007f40 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fe2:	686b      	ldr	r3, [r5, #4]
 8007fe4:	4c42      	ldr	r4, [pc, #264]	; (80080f0 <HAL_RCC_ClockConfig+0x1cc>)
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d14a      	bne.n	8008080 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	019f      	lsls	r7, r3, #6
 8007fee:	d59e      	bpl.n	8007f2e <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ff0:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ff2:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ff4:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8007ff8:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ffa:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ffc:	bf0c      	ite	eq
 8007ffe:	4840      	ldreq	r0, [pc, #256]	; (8008100 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008000:	4840      	ldrne	r0, [pc, #256]	; (8008104 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008002:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008006:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800800a:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800800c:	fbb0 f2f2 	udiv	r2, r0, r2
 8008010:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008012:	68e2      	ldr	r2, [r4, #12]
 8008014:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8008018:	3201      	adds	r2, #1
 800801a:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800801c:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8008020:	4a39      	ldr	r2, [pc, #228]	; (8008108 <HAL_RCC_ClockConfig+0x1e4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d81b      	bhi.n	800805e <HAL_RCC_ClockConfig+0x13a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008026:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	686a      	ldr	r2, [r5, #4]
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	4313      	orrs	r3, r2
 8008032:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8008034:	f7fc feea 	bl	8004e0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008038:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800803c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	686a      	ldr	r2, [r5, #4]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800804a:	f43f af7d 	beq.w	8007f48 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800804e:	f7fc fedd 	bl	8004e0c <HAL_GetTick>
 8008052:	eba0 0008 	sub.w	r0, r0, r8
 8008056:	4548      	cmp	r0, r9
 8008058:	d9f1      	bls.n	800803e <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 800805a:	2003      	movs	r0, #3
 800805c:	e768      	b.n	8007f30 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008064:	d004      	beq.n	8008070 <HAL_RCC_ClockConfig+0x14c>
 8008066:	0788      	lsls	r0, r1, #30
 8008068:	d5dd      	bpl.n	8008026 <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800806a:	68ab      	ldr	r3, [r5, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1da      	bne.n	8008026 <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800807c:	2780      	movs	r7, #128	; 0x80
 800807e:	e7d3      	b.n	8008028 <HAL_RCC_ClockConfig+0x104>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008080:	2b02      	cmp	r3, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008082:	6823      	ldr	r3, [r4, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008084:	d109      	bne.n	800809a <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008086:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800808a:	f43f af50 	beq.w	8007f2e <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800808e:	f7ff ff13 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008092:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <HAL_RCC_ClockConfig+0x1e4>)
 8008094:	4298      	cmp	r0, r3
 8008096:	d9c6      	bls.n	8008026 <HAL_RCC_ClockConfig+0x102>
 8008098:	e7ea      	b.n	8008070 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800809a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800809e:	e7f4      	b.n	800808a <HAL_RCC_ClockConfig+0x166>
    if(hpre == RCC_SYSCLK_DIV2)
 80080a0:	2f80      	cmp	r7, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80080a2:	bf01      	itttt	eq
 80080a4:	4a12      	ldreq	r2, [pc, #72]	; (80080f0 <HAL_RCC_ClockConfig+0x1cc>)
 80080a6:	6893      	ldreq	r3, [r2, #8]
 80080a8:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 80080ac:	6093      	streq	r3, [r2, #8]
 80080ae:	e765      	b.n	8007f7c <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	f023 030f 	bic.w	r3, r3, #15
 80080b6:	4333      	orrs	r3, r6
 80080b8:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80080ba:	f7fc fea7 	bl	8004e0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080be:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80080c2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	42b3      	cmp	r3, r6
 80080cc:	f43f af5d 	beq.w	8007f8a <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d0:	f7fc fe9c 	bl	8004e0c <HAL_GetTick>
 80080d4:	1bc0      	subs	r0, r0, r7
 80080d6:	4540      	cmp	r0, r8
 80080d8:	d9f4      	bls.n	80080c4 <HAL_RCC_ClockConfig+0x1a0>
 80080da:	e7be      	b.n	800805a <HAL_RCC_ClockConfig+0x136>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	68e9      	ldr	r1, [r5, #12]
 80080e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80080e4:	430b      	orrs	r3, r1
 80080e6:	60a3      	str	r3, [r4, #8]
 80080e8:	e755      	b.n	8007f96 <HAL_RCC_ClockConfig+0x72>
 80080ea:	bf00      	nop
 80080ec:	40022000 	.word	0x40022000
 80080f0:	40021000 	.word	0x40021000
 80080f4:	0800f4f0 	.word	0x0800f4f0
 80080f8:	20000000 	.word	0x20000000
 80080fc:	20000008 	.word	0x20000008
 8008100:	007a1200 	.word	0x007a1200
 8008104:	00f42400 	.word	0x00f42400
 8008108:	04c4b400 	.word	0x04c4b400

0800810c <HAL_RCC_GetHCLKFreq>:
}
 800810c:	4b01      	ldr	r3, [pc, #4]	; (8008114 <HAL_RCC_GetHCLKFreq+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000000 	.word	0x20000000

08008118 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <HAL_RCC_GetPCLK1Freq+0x18>)
 800811a:	4a06      	ldr	r2, [pc, #24]	; (8008134 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008122:	5cd3      	ldrb	r3, [r2, r3]
 8008124:	4a04      	ldr	r2, [pc, #16]	; (8008138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008126:	6810      	ldr	r0, [r2, #0]
 8008128:	f003 031f 	and.w	r3, r3, #31
}
 800812c:	40d8      	lsrs	r0, r3
 800812e:	4770      	bx	lr
 8008130:	40021000 	.word	0x40021000
 8008134:	0800f500 	.word	0x0800f500
 8008138:	20000000 	.word	0x20000000

0800813c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_GetPCLK2Freq+0x18>)
 800813e:	4a06      	ldr	r2, [pc, #24]	; (8008158 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008146:	5cd3      	ldrb	r3, [r2, r3]
 8008148:	4a04      	ldr	r2, [pc, #16]	; (800815c <HAL_RCC_GetPCLK2Freq+0x20>)
 800814a:	6810      	ldr	r0, [r2, #0]
 800814c:	f003 031f 	and.w	r3, r3, #31
}
 8008150:	40d8      	lsrs	r0, r3
 8008152:	4770      	bx	lr
 8008154:	40021000 	.word	0x40021000
 8008158:	0800f500 	.word	0x0800f500
 800815c:	20000000 	.word	0x20000000

08008160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008164:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 800816c:	d039      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800816e:	4da3      	ldr	r5, [pc, #652]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008170:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008172:	00d8      	lsls	r0, r3, #3
 8008174:	d427      	bmi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008176:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817c:	65ab      	str	r3, [r5, #88]	; 0x58
 800817e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008188:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800818a:	4f9d      	ldr	r7, [pc, #628]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008192:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008194:	f7fc fe3a 	bl	8004e0c <HAL_GetTick>
 8008198:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	05d9      	lsls	r1, r3, #23
 800819e:	d514      	bpl.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80081a8:	d003      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80081aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80081ac:	4293      	cmp	r3, r2
 80081ae:	f040 8129 	bne.w	8008404 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80081b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80081b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081bc:	4313      	orrs	r3, r2
 80081be:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081c2:	2000      	movs	r0, #0
 80081c4:	e008      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 80081c6:	2600      	movs	r6, #0
 80081c8:	e7df      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ca:	f7fc fe1f 	bl	8004e0c <HAL_GetTick>
 80081ce:	eba0 0008 	sub.w	r0, r0, r8
 80081d2:	2802      	cmp	r0, #2
 80081d4:	d9e1      	bls.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 80081d6:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081d8:	b11e      	cbz	r6, 80081e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081da:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80081dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081e0:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	07dd      	lsls	r5, r3, #31
 80081e6:	d508      	bpl.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081e8:	4984      	ldr	r1, [pc, #528]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081ea:	6865      	ldr	r5, [r4, #4]
 80081ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081f0:	f022 0203 	bic.w	r2, r2, #3
 80081f4:	432a      	orrs	r2, r5
 80081f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081fa:	0799      	lsls	r1, r3, #30
 80081fc:	d508      	bpl.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081fe:	497f      	ldr	r1, [pc, #508]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008200:	68a5      	ldr	r5, [r4, #8]
 8008202:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008206:	f022 020c 	bic.w	r2, r2, #12
 800820a:	432a      	orrs	r2, r5
 800820c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008210:	075a      	lsls	r2, r3, #29
 8008212:	d508      	bpl.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008214:	4979      	ldr	r1, [pc, #484]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008216:	68e5      	ldr	r5, [r4, #12]
 8008218:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800821c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008220:	432a      	orrs	r2, r5
 8008222:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008226:	071f      	lsls	r7, r3, #28
 8008228:	d508      	bpl.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800822a:	4974      	ldr	r1, [pc, #464]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800822c:	6925      	ldr	r5, [r4, #16]
 800822e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008232:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008236:	432a      	orrs	r2, r5
 8008238:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800823c:	06de      	lsls	r6, r3, #27
 800823e:	d508      	bpl.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008240:	496e      	ldr	r1, [pc, #440]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008242:	6965      	ldr	r5, [r4, #20]
 8008244:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800824c:	432a      	orrs	r2, r5
 800824e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008252:	069d      	lsls	r5, r3, #26
 8008254:	d508      	bpl.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008256:	4969      	ldr	r1, [pc, #420]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008258:	69a5      	ldr	r5, [r4, #24]
 800825a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800825e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008262:	432a      	orrs	r2, r5
 8008264:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008268:	0659      	lsls	r1, r3, #25
 800826a:	d508      	bpl.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800826c:	4963      	ldr	r1, [pc, #396]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800826e:	69e5      	ldr	r5, [r4, #28]
 8008270:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008274:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008278:	432a      	orrs	r2, r5
 800827a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800827e:	061a      	lsls	r2, r3, #24
 8008280:	d508      	bpl.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008282:	495e      	ldr	r1, [pc, #376]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008284:	6a25      	ldr	r5, [r4, #32]
 8008286:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800828a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800828e:	432a      	orrs	r2, r5
 8008290:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008294:	05df      	lsls	r7, r3, #23
 8008296:	d508      	bpl.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008298:	4958      	ldr	r1, [pc, #352]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800829a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800829c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80082a4:	432a      	orrs	r2, r5
 80082a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082aa:	039e      	lsls	r6, r3, #14
 80082ac:	d508      	bpl.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082ae:	4953      	ldr	r1, [pc, #332]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082b0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80082b2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80082b6:	f022 0203 	bic.w	r2, r2, #3
 80082ba:	432a      	orrs	r2, r5
 80082bc:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c0:	059d      	lsls	r5, r3, #22
 80082c2:	d508      	bpl.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082c4:	494d      	ldr	r1, [pc, #308]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082c6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80082c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082cc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80082d0:	432a      	orrs	r2, r5
 80082d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082d6:	0559      	lsls	r1, r3, #21
 80082d8:	d50f      	bpl.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082da:	4948      	ldr	r1, [pc, #288]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80082de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082e2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80082e6:	432a      	orrs	r2, r5
 80082e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80082ec:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f0:	bf02      	ittt	eq
 80082f2:	68ca      	ldreq	r2, [r1, #12]
 80082f4:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80082f8:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80082fa:	051a      	lsls	r2, r3, #20
 80082fc:	d50f      	bpl.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082fe:	493f      	ldr	r1, [pc, #252]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008300:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008302:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008306:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800830a:	432a      	orrs	r2, r5
 800830c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008310:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008314:	bf02      	ittt	eq
 8008316:	68ca      	ldreq	r2, [r1, #12]
 8008318:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 800831c:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800831e:	04df      	lsls	r7, r3, #19
 8008320:	d50f      	bpl.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008322:	4936      	ldr	r1, [pc, #216]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008324:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008326:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800832a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800832e:	432a      	orrs	r2, r5
 8008330:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008334:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008338:	bf02      	ittt	eq
 800833a:	68ca      	ldreq	r2, [r1, #12]
 800833c:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8008340:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008342:	049e      	lsls	r6, r3, #18
 8008344:	d50f      	bpl.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008346:	492d      	ldr	r1, [pc, #180]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008348:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800834a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800834e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008352:	432a      	orrs	r2, r5
 8008354:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008358:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800835c:	bf02      	ittt	eq
 800835e:	68ca      	ldreq	r2, [r1, #12]
 8008360:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8008364:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008366:	045d      	lsls	r5, r3, #17
 8008368:	d50f      	bpl.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800836a:	4924      	ldr	r1, [pc, #144]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800836c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800836e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008372:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008376:	432a      	orrs	r2, r5
 8008378:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800837c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008380:	bf02      	ittt	eq
 8008382:	68ca      	ldreq	r2, [r1, #12]
 8008384:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8008388:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800838a:	0419      	lsls	r1, r3, #16
 800838c:	d50f      	bpl.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800838e:	491b      	ldr	r1, [pc, #108]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008390:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008392:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008396:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800839a:	432a      	orrs	r2, r5
 800839c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80083a0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083a4:	bf02      	ittt	eq
 80083a6:	68ca      	ldreq	r2, [r1, #12]
 80083a8:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 80083ac:	60ca      	streq	r2, [r1, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80083ae:	03da      	lsls	r2, r3, #15
 80083b0:	d50f      	bpl.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80083b2:	4912      	ldr	r1, [pc, #72]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083b4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80083b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80083ba:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80083be:	432a      	orrs	r2, r5
 80083c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80083c4:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083c8:	bf02      	ittt	eq
 80083ca:	68ca      	ldreq	r2, [r1, #12]
 80083cc:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 80083d0:	60ca      	streq	r2, [r1, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083d2:	035b      	lsls	r3, r3, #13
 80083d4:	d50f      	bpl.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083d6:	4a09      	ldr	r2, [pc, #36]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80083da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80083de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083e2:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80083e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80083ec:	d103      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ee:	68d3      	ldr	r3, [r2, #12]
 80083f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f4:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 80083f6:	b002      	add	sp, #8
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fc:	40021000 	.word	0x40021000
 8008400:	40007000 	.word	0x40007000
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008404:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8008408:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800840c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008410:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008414:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008418:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800841c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008420:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008422:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008426:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800842a:	f57f aec2 	bpl.w	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 800842e:	f7fc fced 	bl	8004e0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008432:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008436:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008438:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800843c:	079b      	lsls	r3, r3, #30
 800843e:	f53f aeb8 	bmi.w	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008442:	f7fc fce3 	bl	8004e0c <HAL_GetTick>
 8008446:	1bc0      	subs	r0, r0, r7
 8008448:	4540      	cmp	r0, r8
 800844a:	d9f5      	bls.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800844c:	e6c3      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800844e:	bf00      	nop

08008450 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008450:	6a03      	ldr	r3, [r0, #32]
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008458:	6a03      	ldr	r3, [r0, #32]
{
 800845a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008460:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008466:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800846a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800846c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800846e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008472:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008474:	4d1f      	ldr	r5, [pc, #124]	; (80084f4 <TIM_OC1_SetConfig+0xa4>)
 8008476:	42a8      	cmp	r0, r5
 8008478:	d013      	beq.n	80084a2 <TIM_OC1_SetConfig+0x52>
 800847a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800847e:	42a8      	cmp	r0, r5
 8008480:	d00f      	beq.n	80084a2 <TIM_OC1_SetConfig+0x52>
 8008482:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008486:	42a8      	cmp	r0, r5
 8008488:	d00b      	beq.n	80084a2 <TIM_OC1_SetConfig+0x52>
 800848a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800848e:	42a8      	cmp	r0, r5
 8008490:	d007      	beq.n	80084a2 <TIM_OC1_SetConfig+0x52>
 8008492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008496:	42a8      	cmp	r0, r5
 8008498:	d003      	beq.n	80084a2 <TIM_OC1_SetConfig+0x52>
 800849a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800849e:	42a8      	cmp	r0, r5
 80084a0:	d122      	bne.n	80084e8 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80084a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80084a8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084aa:	4d12      	ldr	r5, [pc, #72]	; (80084f4 <TIM_OC1_SetConfig+0xa4>)
 80084ac:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ae:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	d013      	beq.n	80084dc <TIM_OC1_SetConfig+0x8c>
 80084b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084b8:	42a8      	cmp	r0, r5
 80084ba:	d00f      	beq.n	80084dc <TIM_OC1_SetConfig+0x8c>
 80084bc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80084c0:	42a8      	cmp	r0, r5
 80084c2:	d00b      	beq.n	80084dc <TIM_OC1_SetConfig+0x8c>
 80084c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084c8:	42a8      	cmp	r0, r5
 80084ca:	d007      	beq.n	80084dc <TIM_OC1_SetConfig+0x8c>
 80084cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084d0:	42a8      	cmp	r0, r5
 80084d2:	d003      	beq.n	80084dc <TIM_OC1_SetConfig+0x8c>
 80084d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084d8:	42a8      	cmp	r0, r5
 80084da:	d105      	bne.n	80084e8 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084dc:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084e0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80084e4:	4334      	orrs	r4, r6
 80084e6:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ea:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084ec:	684a      	ldr	r2, [r1, #4]
 80084ee:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f0:	6203      	str	r3, [r0, #32]
}
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	40012c00 	.word	0x40012c00

080084f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f8:	6a03      	ldr	r3, [r0, #32]
 80084fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008500:	6a03      	ldr	r3, [r0, #32]
{
 8008502:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008504:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008506:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008508:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800850a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800850e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008512:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008514:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008516:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800851a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800851e:	4d1a      	ldr	r5, [pc, #104]	; (8008588 <TIM_OC3_SetConfig+0x90>)
 8008520:	42a8      	cmp	r0, r5
 8008522:	d007      	beq.n	8008534 <TIM_OC3_SetConfig+0x3c>
 8008524:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008528:	42a8      	cmp	r0, r5
 800852a:	d003      	beq.n	8008534 <TIM_OC3_SetConfig+0x3c>
 800852c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008530:	42a8      	cmp	r0, r5
 8008532:	d10d      	bne.n	8008550 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008534:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800853a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853e:	4d12      	ldr	r5, [pc, #72]	; (8008588 <TIM_OC3_SetConfig+0x90>)
 8008540:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8008542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008546:	d012      	beq.n	800856e <TIM_OC3_SetConfig+0x76>
 8008548:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800854c:	42a8      	cmp	r0, r5
 800854e:	d00e      	beq.n	800856e <TIM_OC3_SetConfig+0x76>
 8008550:	4d0e      	ldr	r5, [pc, #56]	; (800858c <TIM_OC3_SetConfig+0x94>)
 8008552:	42a8      	cmp	r0, r5
 8008554:	d00b      	beq.n	800856e <TIM_OC3_SetConfig+0x76>
 8008556:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800855a:	42a8      	cmp	r0, r5
 800855c:	d007      	beq.n	800856e <TIM_OC3_SetConfig+0x76>
 800855e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008562:	42a8      	cmp	r0, r5
 8008564:	d003      	beq.n	800856e <TIM_OC3_SetConfig+0x76>
 8008566:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800856a:	42a8      	cmp	r0, r5
 800856c:	d106      	bne.n	800857c <TIM_OC3_SetConfig+0x84>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800856e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008572:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008576:	4334      	orrs	r4, r6
 8008578:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800857e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008580:	684a      	ldr	r2, [r1, #4]
 8008582:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008584:	6203      	str	r3, [r0, #32]
}
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40014000 	.word	0x40014000

08008590 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008590:	6a03      	ldr	r3, [r0, #32]
 8008592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008596:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008598:	6a03      	ldr	r3, [r0, #32]
{
 800859a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800859e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085a2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80085a6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085ae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80085b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085b4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80085b8:	4d1a      	ldr	r5, [pc, #104]	; (8008624 <TIM_OC4_SetConfig+0x94>)
 80085ba:	42a8      	cmp	r0, r5
 80085bc:	d007      	beq.n	80085ce <TIM_OC4_SetConfig+0x3e>
 80085be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085c2:	42a8      	cmp	r0, r5
 80085c4:	d003      	beq.n	80085ce <TIM_OC4_SetConfig+0x3e>
 80085c6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80085ca:	42a8      	cmp	r0, r5
 80085cc:	d10d      	bne.n	80085ea <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80085d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d8:	4d12      	ldr	r5, [pc, #72]	; (8008624 <TIM_OC4_SetConfig+0x94>)
 80085da:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC4NE;
 80085dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	d012      	beq.n	8008608 <TIM_OC4_SetConfig+0x78>
 80085e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085e6:	42a8      	cmp	r0, r5
 80085e8:	d00e      	beq.n	8008608 <TIM_OC4_SetConfig+0x78>
 80085ea:	4d0f      	ldr	r5, [pc, #60]	; (8008628 <TIM_OC4_SetConfig+0x98>)
 80085ec:	42a8      	cmp	r0, r5
 80085ee:	d00b      	beq.n	8008608 <TIM_OC4_SetConfig+0x78>
 80085f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085f4:	42a8      	cmp	r0, r5
 80085f6:	d007      	beq.n	8008608 <TIM_OC4_SetConfig+0x78>
 80085f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085fc:	42a8      	cmp	r0, r5
 80085fe:	d003      	beq.n	8008608 <TIM_OC4_SetConfig+0x78>
 8008600:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008604:	42a8      	cmp	r0, r5
 8008606:	d106      	bne.n	8008616 <TIM_OC4_SetConfig+0x86>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008608:	f424 4540 	bic.w	r5, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800860c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008610:	4334      	orrs	r4, r6
 8008612:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008616:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008618:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800861a:	684a      	ldr	r2, [r1, #4]
 800861c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800861e:	6203      	str	r3, [r0, #32]
}
 8008620:	bd70      	pop	{r4, r5, r6, pc}
 8008622:	bf00      	nop
 8008624:	40012c00 	.word	0x40012c00
 8008628:	40014000 	.word	0x40014000

0800862c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800862c:	6a03      	ldr	r3, [r0, #32]
 800862e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008632:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008634:	6a03      	ldr	r3, [r0, #32]
{
 8008636:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800863c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800863e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008646:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008648:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800864a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800864e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008652:	4d11      	ldr	r5, [pc, #68]	; (8008698 <TIM_OC5_SetConfig+0x6c>)
 8008654:	42a8      	cmp	r0, r5
 8008656:	d013      	beq.n	8008680 <TIM_OC5_SetConfig+0x54>
 8008658:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800865c:	42a8      	cmp	r0, r5
 800865e:	d00f      	beq.n	8008680 <TIM_OC5_SetConfig+0x54>
 8008660:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008664:	42a8      	cmp	r0, r5
 8008666:	d00b      	beq.n	8008680 <TIM_OC5_SetConfig+0x54>
 8008668:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800866c:	42a8      	cmp	r0, r5
 800866e:	d007      	beq.n	8008680 <TIM_OC5_SetConfig+0x54>
 8008670:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008674:	42a8      	cmp	r0, r5
 8008676:	d003      	beq.n	8008680 <TIM_OC5_SetConfig+0x54>
 8008678:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800867c:	42a8      	cmp	r0, r5
 800867e:	d104      	bne.n	800868a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008680:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008682:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008686:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800868c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800868e:	684a      	ldr	r2, [r1, #4]
 8008690:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008692:	6203      	str	r3, [r0, #32]
}
 8008694:	bd30      	pop	{r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	40012c00 	.word	0x40012c00

0800869c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800869c:	6a03      	ldr	r3, [r0, #32]
 800869e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a4:	6a03      	ldr	r3, [r0, #32]
{
 80086a6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086aa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80086b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086c0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c4:	4d10      	ldr	r5, [pc, #64]	; (8008708 <TIM_OC6_SetConfig+0x6c>)
 80086c6:	42a8      	cmp	r0, r5
 80086c8:	d013      	beq.n	80086f2 <TIM_OC6_SetConfig+0x56>
 80086ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80086ce:	42a8      	cmp	r0, r5
 80086d0:	d00f      	beq.n	80086f2 <TIM_OC6_SetConfig+0x56>
 80086d2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80086d6:	42a8      	cmp	r0, r5
 80086d8:	d00b      	beq.n	80086f2 <TIM_OC6_SetConfig+0x56>
 80086da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086de:	42a8      	cmp	r0, r5
 80086e0:	d007      	beq.n	80086f2 <TIM_OC6_SetConfig+0x56>
 80086e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086e6:	42a8      	cmp	r0, r5
 80086e8:	d003      	beq.n	80086f2 <TIM_OC6_SetConfig+0x56>
 80086ea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80086ee:	42a8      	cmp	r0, r5
 80086f0:	d104      	bne.n	80086fc <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086f2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086f8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086fe:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008700:	684a      	ldr	r2, [r1, #4]
 8008702:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008704:	6203      	str	r3, [r0, #32]
}
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	40012c00 	.word	0x40012c00

0800870c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800870c:	4a36      	ldr	r2, [pc, #216]	; (80087e8 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 800870e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008710:	4290      	cmp	r0, r2
 8008712:	d016      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 8008714:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008718:	d013      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 800871a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800871e:	4290      	cmp	r0, r2
 8008720:	d00f      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 8008722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008726:	4290      	cmp	r0, r2
 8008728:	d00b      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 800872a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800872e:	4290      	cmp	r0, r2
 8008730:	d007      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 8008732:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008736:	4290      	cmp	r0, r2
 8008738:	d003      	beq.n	8008742 <TIM_Base_SetConfig+0x36>
 800873a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800873e:	4290      	cmp	r0, r2
 8008740:	d119      	bne.n	8008776 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8008742:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008748:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800874a:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <TIM_Base_SetConfig+0xdc>)
 800874c:	4290      	cmp	r0, r2
 800874e:	d021      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 8008750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008754:	d01e      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 8008756:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800875a:	4290      	cmp	r0, r2
 800875c:	d01a      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 800875e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008762:	4290      	cmp	r0, r2
 8008764:	d016      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 8008766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800876a:	4290      	cmp	r0, r2
 800876c:	d012      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 800876e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008772:	4290      	cmp	r0, r2
 8008774:	d00e      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 8008776:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <TIM_Base_SetConfig+0xe0>)
 8008778:	4290      	cmp	r0, r2
 800877a:	d00b      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 800877c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008780:	4290      	cmp	r0, r2
 8008782:	d007      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 8008784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008788:	4290      	cmp	r0, r2
 800878a:	d003      	beq.n	8008794 <TIM_Base_SetConfig+0x88>
 800878c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008790:	4290      	cmp	r0, r2
 8008792:	d103      	bne.n	800879c <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008794:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800879c:	694a      	ldr	r2, [r1, #20]
 800879e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80087a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087a6:	688b      	ldr	r3, [r1, #8]
 80087a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80087aa:	680b      	ldr	r3, [r1, #0]
 80087ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <TIM_Base_SetConfig+0xdc>)
 80087b0:	4298      	cmp	r0, r3
 80087b2:	d013      	beq.n	80087dc <TIM_Base_SetConfig+0xd0>
 80087b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b8:	4298      	cmp	r0, r3
 80087ba:	d00f      	beq.n	80087dc <TIM_Base_SetConfig+0xd0>
 80087bc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80087c0:	4298      	cmp	r0, r3
 80087c2:	d00b      	beq.n	80087dc <TIM_Base_SetConfig+0xd0>
 80087c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c8:	4298      	cmp	r0, r3
 80087ca:	d007      	beq.n	80087dc <TIM_Base_SetConfig+0xd0>
 80087cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087d0:	4298      	cmp	r0, r3
 80087d2:	d003      	beq.n	80087dc <TIM_Base_SetConfig+0xd0>
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	4298      	cmp	r0, r3
 80087da:	d101      	bne.n	80087e0 <TIM_Base_SetConfig+0xd4>
    TIMx->RCR = Structure->RepetitionCounter;
 80087dc:	690b      	ldr	r3, [r1, #16]
 80087de:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80087e0:	2301      	movs	r3, #1
 80087e2:	6143      	str	r3, [r0, #20]
}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40014000 	.word	0x40014000

080087f0 <HAL_TIM_Base_Init>:
{
 80087f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80087f2:	4604      	mov	r4, r0
 80087f4:	b350      	cbz	r0, 800884c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80087f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80087fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80087fe:	b91b      	cbnz	r3, 8008808 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008804:	f7fb ffba 	bl	800477c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008808:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800880a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800880c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008810:	1d21      	adds	r1, r4, #4
 8008812:	f7ff ff7b 	bl	800870c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008816:	2301      	movs	r3, #1
 8008818:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800881c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800882a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800882e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008836:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800883a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800883e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008842:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800884a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800884c:	2001      	movs	r0, #1
 800884e:	e7fc      	b.n	800884a <HAL_TIM_Base_Init+0x5a>

08008850 <HAL_TIM_PWM_Init>:
{
 8008850:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008852:	4604      	mov	r4, r0
 8008854:	b350      	cbz	r0, 80088ac <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800885a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800885e:	b91b      	cbnz	r3, 8008868 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008860:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008864:	f7fb ffee 	bl	8004844 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008868:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008870:	1d21      	adds	r1, r4, #4
 8008872:	f7ff ff4b 	bl	800870c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008876:	2301      	movs	r3, #1
 8008878:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800887c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008882:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008886:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800888a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800888e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008896:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800889a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800889e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80088a2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80088a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80088aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7fc      	b.n	80088aa <HAL_TIM_PWM_Init+0x5a>

080088b0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b0:	6a03      	ldr	r3, [r0, #32]
 80088b2:	f023 0310 	bic.w	r3, r3, #16
 80088b6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80088b8:	6a03      	ldr	r3, [r0, #32]
{
 80088ba:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80088bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80088be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80088c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80088d0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088d8:	4d1a      	ldr	r5, [pc, #104]	; (8008944 <TIM_OC2_SetConfig+0x94>)
 80088da:	42a8      	cmp	r0, r5
 80088dc:	d007      	beq.n	80088ee <TIM_OC2_SetConfig+0x3e>
 80088de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80088e2:	42a8      	cmp	r0, r5
 80088e4:	d003      	beq.n	80088ee <TIM_OC2_SetConfig+0x3e>
 80088e6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80088ea:	42a8      	cmp	r0, r5
 80088ec:	d10d      	bne.n	800890a <TIM_OC2_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80088f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f8:	4d12      	ldr	r5, [pc, #72]	; (8008944 <TIM_OC2_SetConfig+0x94>)
 80088fa:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80088fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	d012      	beq.n	8008928 <TIM_OC2_SetConfig+0x78>
 8008902:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008906:	42a8      	cmp	r0, r5
 8008908:	d00e      	beq.n	8008928 <TIM_OC2_SetConfig+0x78>
 800890a:	4d0f      	ldr	r5, [pc, #60]	; (8008948 <TIM_OC2_SetConfig+0x98>)
 800890c:	42a8      	cmp	r0, r5
 800890e:	d00b      	beq.n	8008928 <TIM_OC2_SetConfig+0x78>
 8008910:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008914:	42a8      	cmp	r0, r5
 8008916:	d007      	beq.n	8008928 <TIM_OC2_SetConfig+0x78>
 8008918:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800891c:	42a8      	cmp	r0, r5
 800891e:	d003      	beq.n	8008928 <TIM_OC2_SetConfig+0x78>
 8008920:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008924:	42a8      	cmp	r0, r5
 8008926:	d106      	bne.n	8008936 <TIM_OC2_SetConfig+0x86>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008928:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800892c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008930:	4334      	orrs	r4, r6
 8008932:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008936:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008938:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800893a:	684a      	ldr	r2, [r1, #4]
 800893c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800893e:	6203      	str	r3, [r0, #32]
}
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40014000 	.word	0x40014000

0800894c <HAL_TIM_PWM_ConfigChannel>:
{
 800894c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800894e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008952:	2b01      	cmp	r3, #1
{
 8008954:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8008956:	d079      	beq.n	8008a4c <HAL_TIM_PWM_ConfigChannel+0x100>
 8008958:	2001      	movs	r0, #1
  switch (Channel)
 800895a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800895c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8008960:	d052      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8008962:	d808      	bhi.n	8008976 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008964:	2a04      	cmp	r2, #4
 8008966:	d02d      	beq.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x78>
 8008968:	2a08      	cmp	r2, #8
 800896a:	d03c      	beq.n	80089e6 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800896c:	b1c2      	cbz	r2, 80089a0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 800896e:	2300      	movs	r3, #0
 8008970:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008974:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8008976:	2a10      	cmp	r2, #16
 8008978:	d057      	beq.n	8008a2a <HAL_TIM_PWM_ConfigChannel+0xde>
 800897a:	2a14      	cmp	r2, #20
 800897c:	d1f7      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800897e:	6828      	ldr	r0, [r5, #0]
 8008980:	f7ff fe8c 	bl	800869c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008984:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008986:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800898a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800898e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008996:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800899a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800899e:	e053      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089a0:	6828      	ldr	r0, [r5, #0]
 80089a2:	f7ff fd55 	bl	8008450 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089a6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089aa:	699a      	ldr	r2, [r3, #24]
 80089ac:	f042 0208 	orr.w	r2, r2, #8
 80089b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089b2:	699a      	ldr	r2, [r3, #24]
 80089b4:	f022 0204 	bic.w	r2, r2, #4
 80089b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089be:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80089c0:	2000      	movs	r0, #0
      break;
 80089c2:	e7d4      	b.n	800896e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089c4:	6828      	ldr	r0, [r5, #0]
 80089c6:	f7ff ff73 	bl	80088b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089ca:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089cc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80089e4:	e7eb      	b.n	80089be <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089e6:	6828      	ldr	r0, [r5, #0]
 80089e8:	f7ff fd86 	bl	80084f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ec:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089f0:	69da      	ldr	r2, [r3, #28]
 80089f2:	f042 0208 	orr.w	r2, r2, #8
 80089f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	f022 0204 	bic.w	r2, r2, #4
 80089fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a00:	69da      	ldr	r2, [r3, #28]
 8008a02:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a04:	61da      	str	r2, [r3, #28]
      break;
 8008a06:	e7db      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a08:	6828      	ldr	r0, [r5, #0]
 8008a0a:	f7ff fdc1 	bl	8008590 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a0e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a12:	69da      	ldr	r2, [r3, #28]
 8008a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a28:	e7ec      	b.n	8008a04 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a2a:	6828      	ldr	r0, [r5, #0]
 8008a2c:	f7ff fdfe 	bl	800862c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a30:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a36:	f042 0208 	orr.w	r2, r2, #8
 8008a3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a3e:	f022 0204 	bic.w	r2, r2, #4
 8008a42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a46:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a48:	651a      	str	r2, [r3, #80]	; 0x50
 8008a4a:	e7b9      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8008a4c:	2002      	movs	r0, #2
 8008a4e:	e791      	b.n	8008974 <HAL_TIM_PWM_ConfigChannel+0x28>

08008a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a50:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a52:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a54:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a56:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a5a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8008a5e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a60:	6083      	str	r3, [r0, #8]
}
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <HAL_TIM_ConfigClockSource>:
{
 8008a64:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8008a66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a6a:	2b01      	cmp	r3, #1
{
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8008a72:	f000 80b8 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x182>
 8008a76:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008a78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8008a7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008a80:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a82:	4b5a      	ldr	r3, [pc, #360]	; (8008bec <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8008a84:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a86:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8008a88:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8008a8a:	680b      	ldr	r3, [r1, #0]
 8008a8c:	2b70      	cmp	r3, #112	; 0x70
 8008a8e:	d047      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0xbc>
 8008a90:	d824      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x78>
 8008a92:	2b50      	cmp	r3, #80	; 0x50
 8008a94:	d05a      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0xe8>
 8008a96:	d817      	bhi.n	8008ac8 <HAL_TIM_ConfigClockSource+0x64>
 8008a98:	2b40      	cmp	r3, #64	; 0x40
 8008a9a:	f000 808b 	beq.w	8008bb4 <HAL_TIM_ConfigClockSource+0x150>
 8008a9e:	d815      	bhi.n	8008acc <HAL_TIM_ConfigClockSource+0x68>
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d007      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008aa4:	d804      	bhi.n	8008ab0 <HAL_TIM_ConfigClockSource+0x4c>
 8008aa6:	f033 0210 	bics.w	r2, r3, #16
 8008aaa:	d003      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008aac:	2201      	movs	r2, #1
 8008aae:	e00d      	b.n	8008acc <HAL_TIM_ConfigClockSource+0x68>
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	d1fb      	bne.n	8008aac <HAL_TIM_ConfigClockSource+0x48>
  tmpsmcr = TIMx->SMCR;
 8008ab4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ab6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008aba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8008ac4:	6082      	str	r2, [r0, #8]
 8008ac6:	e035      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8008ac8:	2b60      	cmp	r3, #96	; 0x60
 8008aca:	d059      	beq.n	8008b80 <HAL_TIM_ConfigClockSource+0x11c>
  htim->State = HAL_TIM_STATE_READY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ad8:	4610      	mov	r0, r2
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8008adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ae0:	d02a      	beq.n	8008b38 <HAL_TIM_ConfigClockSource+0xd4>
 8008ae2:	d804      	bhi.n	8008aee <HAL_TIM_ConfigClockSource+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8008ae4:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8008ae8:	bf18      	it	ne
 8008aea:	2201      	movne	r2, #1
 8008aec:	e7ee      	b.n	8008acc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8008aee:	4940      	ldr	r1, [pc, #256]	; (8008bf0 <HAL_TIM_ConfigClockSource+0x18c>)
 8008af0:	428b      	cmp	r3, r1
 8008af2:	d0df      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008af4:	d80b      	bhi.n	8008b0e <HAL_TIM_ConfigClockSource+0xaa>
 8008af6:	4a3f      	ldr	r2, [pc, #252]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x190>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d0db      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008afc:	d804      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0xa4>
 8008afe:	f023 0210 	bic.w	r2, r3, #16
 8008b02:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008b06:	e7d4      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x4e>
 8008b08:	4a3b      	ldr	r2, [pc, #236]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x194>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	e7d1      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x4e>
 8008b0e:	493b      	ldr	r1, [pc, #236]	; (8008bfc <HAL_TIM_ConfigClockSource+0x198>)
 8008b10:	428b      	cmp	r3, r1
 8008b12:	d0cf      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008b14:	f023 0520 	bic.w	r5, r3, #32
 8008b18:	3910      	subs	r1, #16
 8008b1a:	428d      	cmp	r5, r1
 8008b1c:	d0ca      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x50>
 8008b1e:	e7d5      	b.n	8008acc <HAL_TIM_ConfigClockSource+0x68>
      TIM_ETR_SetConfig(htim->Instance,
 8008b20:	68cb      	ldr	r3, [r1, #12]
 8008b22:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008b26:	f7ff ff93 	bl	8008a50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b32:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b34:	2200      	movs	r2, #0
}
 8008b36:	e7c9      	b.n	8008acc <HAL_TIM_ConfigClockSource+0x68>
      TIM_ETR_SetConfig(htim->Instance,
 8008b38:	68cb      	ldr	r3, [r1, #12]
 8008b3a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008b3e:	f7ff ff87 	bl	8008a50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	6893      	ldr	r3, [r2, #8]
 8008b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b4a:	e7f2      	b.n	8008b32 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b4c:	684a      	ldr	r2, [r1, #4]
 8008b4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008b50:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b52:	6a05      	ldr	r5, [r0, #32]
 8008b54:	f025 0501 	bic.w	r5, r5, #1
 8008b58:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b5c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b64:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008b68:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8008b6a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008b6c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008b6e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b78:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8008b7c:	6083      	str	r3, [r0, #8]
 8008b7e:	e7d9      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b80:	684d      	ldr	r5, [r1, #4]
 8008b82:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b84:	6a01      	ldr	r1, [r0, #32]
 8008b86:	f021 0110 	bic.w	r1, r1, #16
 8008b8a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8008b8e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b9c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008ba2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008ba4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ba6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bae:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8008bb2:	e7e3      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x118>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb4:	684a      	ldr	r2, [r1, #4]
 8008bb6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008bb8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bba:	6a05      	ldr	r5, [r0, #32]
 8008bbc:	f025 0501 	bic.w	r5, r5, #1
 8008bc0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bcc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008bd0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8008bd2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008bd4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008bd6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008be0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8008be4:	e7ca      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x118>
  __HAL_LOCK(htim);
 8008be6:	461a      	mov	r2, r3
 8008be8:	e776      	b.n	8008ad8 <HAL_TIM_ConfigClockSource+0x74>
 8008bea:	bf00      	nop
 8008bec:	ffce0088 	.word	0xffce0088
 8008bf0:	00100040 	.word	0x00100040
 8008bf4:	00100020 	.word	0x00100020
 8008bf8:	00100030 	.word	0x00100030
 8008bfc:	00100060 	.word	0x00100060

08008c00 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c00:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c02:	f001 011f 	and.w	r1, r1, #31
{
 8008c06:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c08:	2401      	movs	r4, #1
 8008c0a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8008c0c:	ea23 0304 	bic.w	r3, r3, r4
 8008c10:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c12:	6a03      	ldr	r3, [r0, #32]
 8008c14:	408a      	lsls	r2, r1
 8008c16:	431a      	orrs	r2, r3
 8008c18:	6202      	str	r2, [r0, #32]
}
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <HAL_TIM_OC_Start>:
{
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c20:	b929      	cbnz	r1, 8008c2e <HAL_TIM_OC_Start+0x12>
 8008c22:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d027      	beq.n	8008c7a <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e04d      	b.n	8008cca <HAL_TIM_OC_Start+0xae>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c2e:	2904      	cmp	r1, #4
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_OC_Start+0x26>
 8008c32:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d1f7      	bne.n	8008c2a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008c40:	e01e      	b.n	8008c80 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c42:	2908      	cmp	r1, #8
 8008c44:	d10d      	bne.n	8008c62 <HAL_TIM_OC_Start+0x46>
 8008c46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	bf18      	it	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1ea      	bne.n	8008c2a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c54:	2908      	cmp	r1, #8
 8008c56:	f04f 0302 	mov.w	r3, #2
 8008c5a:	d137      	bne.n	8008ccc <HAL_TIM_OC_Start+0xb0>
 8008c5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008c60:	e00e      	b.n	8008c80 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c62:	290c      	cmp	r1, #12
 8008c64:	d102      	bne.n	8008c6c <HAL_TIM_OC_Start+0x50>
 8008c66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008c6a:	e7ee      	b.n	8008c4a <HAL_TIM_OC_Start+0x2e>
 8008c6c:	2910      	cmp	r1, #16
 8008c6e:	bf0c      	ite	eq
 8008c70:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8008c74:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8008c78:	e7e7      	b.n	8008c4a <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c80:	2201      	movs	r2, #1
 8008c82:	6820      	ldr	r0, [r4, #0]
 8008c84:	f7ff ffbc 	bl	8008c00 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	4a2a      	ldr	r2, [pc, #168]	; (8008d34 <HAL_TIM_OC_Start+0x118>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d029      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
 8008c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d025      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
 8008c98:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d021      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
 8008ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d01d      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
 8008ca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d019      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
 8008cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d015      	beq.n	8008ce4 <HAL_TIM_OC_Start+0xc8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbc:	d11a      	bne.n	8008cf4 <HAL_TIM_OC_Start+0xd8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cbe:	6899      	ldr	r1, [r3, #8]
 8008cc0:	4a1d      	ldr	r2, [pc, #116]	; (8008d38 <HAL_TIM_OC_Start+0x11c>)
 8008cc2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc4:	2a06      	cmp	r2, #6
 8008cc6:	d131      	bne.n	8008d2c <HAL_TIM_OC_Start+0x110>
  return HAL_OK;
 8008cc8:	2000      	movs	r0, #0
}
 8008cca:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ccc:	290c      	cmp	r1, #12
 8008cce:	d102      	bne.n	8008cd6 <HAL_TIM_OC_Start+0xba>
 8008cd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008cd4:	e7d4      	b.n	8008c80 <HAL_TIM_OC_Start+0x64>
 8008cd6:	2910      	cmp	r1, #16
 8008cd8:	bf0c      	ite	eq
 8008cda:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8008cde:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8008ce2:	e7cd      	b.n	8008c80 <HAL_TIM_OC_Start+0x64>
    __HAL_TIM_MOE_ENABLE(htim);
 8008ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cea:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cec:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <HAL_TIM_OC_Start+0x118>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d1e2      	bne.n	8008cb8 <HAL_TIM_OC_Start+0x9c>
 8008cf2:	e7e4      	b.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008cf4:	4a11      	ldr	r2, [pc, #68]	; (8008d3c <HAL_TIM_OC_Start+0x120>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d0e1      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d0dd      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d0d9      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008d0a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d0d5      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008d12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d0d1      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
 8008d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d0cd      	beq.n	8008cbe <HAL_TIM_OC_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	f042 0201 	orr.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	e7cd      	b.n	8008cc8 <HAL_TIM_OC_Start+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008d30:	d1f7      	bne.n	8008d22 <HAL_TIM_OC_Start+0x106>
 8008d32:	e7c9      	b.n	8008cc8 <HAL_TIM_OC_Start+0xac>
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	00010007 	.word	0x00010007
 8008d3c:	40000400 	.word	0x40000400

08008d40 <HAL_TIM_PWM_Start>:
 8008d40:	f7ff bf6c 	b.w	8008c1c <HAL_TIM_OC_Start>

08008d44 <TIM_CCxNChannelCmd>:
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008d44:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d46:	f001 011f 	and.w	r1, r1, #31
{
 8008d4a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d4c:	2404      	movs	r4, #4
 8008d4e:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8008d50:	ea23 0304 	bic.w	r3, r3, r4
 8008d54:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d56:	6a03      	ldr	r3, [r0, #32]
 8008d58:	408a      	lsls	r2, r1
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	6202      	str	r2, [r0, #32]
}
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <HAL_TIMEx_OCN_Start>:
{
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d64:	b929      	cbnz	r1, 8008d72 <HAL_TIMEx_OCN_Start+0x12>
 8008d66:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d01d      	beq.n	8008daa <HAL_TIMEx_OCN_Start+0x4a>
    return HAL_ERROR;
 8008d6e:	2001      	movs	r0, #1
}
 8008d70:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d72:	2904      	cmp	r1, #4
 8008d74:	d107      	bne.n	8008d86 <HAL_TIMEx_OCN_Start+0x26>
 8008d76:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d1f7      	bne.n	8008d6e <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d7e:	2302      	movs	r3, #2
 8008d80:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008d84:	e014      	b.n	8008db0 <HAL_TIMEx_OCN_Start+0x50>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d86:	2908      	cmp	r1, #8
 8008d88:	d107      	bne.n	8008d9a <HAL_TIMEx_OCN_Start+0x3a>
 8008d8a:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d1ed      	bne.n	8008d6e <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d92:	2302      	movs	r3, #2
 8008d94:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8008d98:	e00a      	b.n	8008db0 <HAL_TIMEx_OCN_Start+0x50>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d9a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d1e5      	bne.n	8008d6e <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da2:	2302      	movs	r3, #2
 8008da4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8008da8:	e002      	b.n	8008db0 <HAL_TIMEx_OCN_Start+0x50>
 8008daa:	2302      	movs	r3, #2
 8008dac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008db0:	2204      	movs	r2, #4
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	f7ff ffc6 	bl	8008d44 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dc0:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc2:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <HAL_TIMEx_OCN_Start+0xbc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d01a      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dcc:	d017      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008dce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008de6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008dee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <HAL_TIMEx_OCN_Start+0x9e>
 8008df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d107      	bne.n	8008e0e <HAL_TIMEx_OCN_Start+0xae>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dfe:	6899      	ldr	r1, [r3, #8]
 8008e00:	4a07      	ldr	r2, [pc, #28]	; (8008e20 <HAL_TIMEx_OCN_Start+0xc0>)
 8008e02:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e04:	2a06      	cmp	r2, #6
 8008e06:	d006      	beq.n	8008e16 <HAL_TIMEx_OCN_Start+0xb6>
 8008e08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIMEx_OCN_Start+0xb6>
    __HAL_TIM_ENABLE(htim);
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	f042 0201 	orr.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008e16:	2000      	movs	r0, #0
 8008e18:	e7aa      	b.n	8008d70 <HAL_TIMEx_OCN_Start+0x10>
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	00010007 	.word	0x00010007

08008e24 <HAL_TIMEx_PWMN_Start>:
 8008e24:	f7ff bf9c 	b.w	8008d60 <HAL_TIMEx_OCN_Start>

08008e28 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8008e28:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008e2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	f04f 0302 	mov.w	r3, #2
 8008e34:	d043      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 8008e36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e3a:	4d22      	ldr	r5, [pc, #136]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008e3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e3e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008e40:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008e42:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e44:	d007      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8008e46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008e4a:	42ab      	cmp	r3, r5
 8008e4c:	d003      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8008e4e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008e52:	42ab      	cmp	r3, r5
 8008e54:	d103      	bne.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e56:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e58:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e5c:	432a      	orrs	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e60:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008e64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e68:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8008e6a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	4a15      	ldr	r2, [pc, #84]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01a      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e76:	d017      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d013      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00f      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00b      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e90:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d007      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008e98:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eaa:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eae:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 8008eb0:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008ebe:	4618      	mov	r0, r3
}
 8008ec0:	bd30      	pop	{r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40012c00 	.word	0x40012c00

08008ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8008ec8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008eca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d058      	beq.n	8008f84 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ed2:	68cb      	ldr	r3, [r1, #12]
 8008ed4:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ed6:	4c2c      	ldr	r4, [pc, #176]	; (8008f88 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008edc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ede:	684a      	ldr	r2, [r1, #4]
 8008ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ee4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ee6:	680a      	ldr	r2, [r1, #0]
 8008ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008eee:	690a      	ldr	r2, [r1, #16]
 8008ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ef4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef6:	694a      	ldr	r2, [r1, #20]
 8008ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008efc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008efe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f06:	698a      	ldr	r2, [r1, #24]
 8008f08:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f10:	6802      	ldr	r2, [r0, #0]
 8008f12:	42a2      	cmp	r2, r4
 8008f14:	d006      	beq.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008f16:	4d1d      	ldr	r5, [pc, #116]	; (8008f8c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8008f18:	42aa      	cmp	r2, r5
 8008f1a:	d003      	beq.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008f1c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008f20:	42aa      	cmp	r2, r5
 8008f22:	d129      	bne.n	8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f24:	69cd      	ldr	r5, [r1, #28]
 8008f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f2a:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f2c:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f30:	d006      	beq.n	8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 8008f32:	4c16      	ldr	r4, [pc, #88]	; (8008f8c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8008f34:	42a2      	cmp	r2, r4
 8008f36:	d003      	beq.n	8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 8008f38:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008f3c:	42a2      	cmp	r2, r4
 8008f3e:	d11b      	bne.n	8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f40:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008f42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f46:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f4a:	6a0c      	ldr	r4, [r1, #32]
 8008f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f50:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f52:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008f54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008f58:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f5a:	4c0b      	ldr	r4, [pc, #44]	; (8008f88 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8008f5c:	42a2      	cmp	r2, r4
 8008f5e:	d007      	beq.n	8008f70 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8008f60:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008f64:	42a2      	cmp	r2, r4
 8008f66:	d003      	beq.n	8008f70 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8008f68:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008f6c:	42a2      	cmp	r2, r4
 8008f6e:	d103      	bne.n	8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f70:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008f72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f76:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8008f78:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8008f80:	4618      	mov	r0, r3
}
 8008f82:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8008f84:	2002      	movs	r0, #2
 8008f86:	e7fc      	b.n	8008f82 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
 8008f88:	40012c00 	.word	0x40012c00
 8008f8c:	40013400 	.word	0x40013400

08008f90 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f90:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	e852 3f00 	ldrex	r3, [r2]
 8008f96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008f9e:	6802      	ldr	r2, [r0, #0]
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	d1f5      	bne.n	8008f90 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	f102 0308 	add.w	r3, r2, #8
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008fac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	f102 0c08 	add.w	ip, r2, #8
 8008fb4:	e84c 3100 	strex	r1, r3, [ip]
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d1f3      	bne.n	8008fa4 <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8008fc2:	4770      	bx	lr

08008fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fc4:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	e852 3f00 	ldrex	r3, [r2]
 8008fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008fd4:	6802      	ldr	r2, [r0, #0]
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d1f5      	bne.n	8008fc6 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fda:	4c0f      	ldr	r4, [pc, #60]	; (8009018 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	f102 0308 	add.w	r3, r2, #8
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	f102 0c08 	add.w	ip, r2, #8
 8008fea:	e84c 3100 	strex	r1, r3, [ip]
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	d1f4      	bne.n	8008fdc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d107      	bne.n	8009008 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	e842 3100 	strex	r1, r3, [r2]
 8009004:	2900      	cmp	r1, #0
 8009006:	d1f7      	bne.n	8008ff8 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009008:	2320      	movs	r3, #32
 800900a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900e:	2300      	movs	r3, #0
 8009010:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009012:	6703      	str	r3, [r0, #112]	; 0x70
}
 8009014:	bd10      	pop	{r4, pc}
 8009016:	bf00      	nop
 8009018:	effffffe 	.word	0xeffffffe

0800901c <HAL_UART_Transmit_DMA>:
{
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009022:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8009026:	2f20      	cmp	r7, #32
 8009028:	d143      	bne.n	80090b2 <HAL_UART_Transmit_DMA+0x96>
    if ((pData == NULL) || (Size == 0U))
 800902a:	b361      	cbz	r1, 8009086 <HAL_UART_Transmit_DMA+0x6a>
 800902c:	b35a      	cbz	r2, 8009086 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 800902e:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 8009032:	2a01      	cmp	r2, #1
 8009034:	d03d      	beq.n	80090b2 <HAL_UART_Transmit_DMA+0x96>
    if (huart->hdmatx != NULL)
 8009036:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8009038:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 800903c:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903e:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009040:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009042:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8009046:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800904a:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800904c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009050:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009054:	b1c8      	cbz	r0, 800908a <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009056:	f8df c060 	ldr.w	ip, [pc, #96]	; 80090b8 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800905a:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800905c:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009060:	f8df c058 	ldr.w	ip, [pc, #88]	; 80090bc <HAL_UART_Transmit_DMA+0xa0>
 8009064:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009068:	f8df c054 	ldr.w	ip, [pc, #84]	; 80090c0 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800906c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 800906e:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009072:	f7fd fa4d 	bl	8006510 <HAL_DMA_Start_IT>
 8009076:	b140      	cbz	r0, 800908a <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009078:	2310      	movs	r3, #16
 800907a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800907e:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009082:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
      return HAL_ERROR;
 8009086:	2001      	movs	r0, #1
 8009088:	e012      	b.n	80090b0 <HAL_UART_Transmit_DMA+0x94>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	2240      	movs	r2, #64	; 0x40
 800908e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8009090:	2300      	movs	r3, #0
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	f102 0308 	add.w	r3, r2, #8
 800909c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	f102 0108 	add.w	r1, r2, #8
 80090a8:	e841 3000 	strex	r0, r3, [r1]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1f3      	bne.n	8009098 <HAL_UART_Transmit_DMA+0x7c>
}
 80090b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80090b2:	2002      	movs	r0, #2
 80090b4:	e7fc      	b.n	80090b0 <HAL_UART_Transmit_DMA+0x94>
 80090b6:	bf00      	nop
 80090b8:	080090c7 	.word	0x080090c7
 80090bc:	0800910f 	.word	0x0800910f
 80090c0:	0800911f 	.word	0x0800911f

080090c4 <HAL_UART_TxCpltCallback>:
 80090c4:	4770      	bx	lr

080090c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090c6:	b508      	push	{r3, lr}
 80090c8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ca:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f013 0320 	ands.w	r3, r3, #32
 80090d4:	d117      	bne.n	8009106 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80090d6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	f102 0308 	add.w	r3, r2, #8
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	3208      	adds	r2, #8
 80090ea:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80090ee:	6802      	ldr	r2, [r0, #0]
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d1f2      	bne.n	80090da <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	e842 3100 	strex	r1, r3, [r2]
 8009100:	2900      	cmp	r1, #0
 8009102:	d1f7      	bne.n	80090f4 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009104:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009106:	f7ff ffdd 	bl	80090c4 <HAL_UART_TxCpltCallback>
}
 800910a:	e7fb      	b.n	8009104 <UART_DMATransmitCplt+0x3e>

0800910c <HAL_UART_TxHalfCpltCallback>:
 800910c:	4770      	bx	lr

0800910e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800910e:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009110:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009112:	f7ff fffb 	bl	800910c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009116:	bd08      	pop	{r3, pc}

08009118 <HAL_UART_RxCpltCallback>:
 8009118:	4770      	bx	lr

0800911a <HAL_UART_RxHalfCpltCallback>:
 800911a:	4770      	bx	lr

0800911c <HAL_UART_ErrorCallback>:
 800911c:	4770      	bx	lr

0800911e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800911e:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009120:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009122:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009126:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009128:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800912c:	6892      	ldr	r2, [r2, #8]
 800912e:	0612      	lsls	r2, r2, #24
 8009130:	d506      	bpl.n	8009140 <UART_DMAError+0x22>
 8009132:	2b21      	cmp	r3, #33	; 0x21
 8009134:	d104      	bne.n	8009140 <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800913c:	f7ff ff28 	bl	8008f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009140:	6803      	ldr	r3, [r0, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	065b      	lsls	r3, r3, #25
 8009146:	d506      	bpl.n	8009156 <UART_DMAError+0x38>
 8009148:	2c22      	cmp	r4, #34	; 0x22
 800914a:	d104      	bne.n	8009156 <UART_DMAError+0x38>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009152:	f7ff ff37 	bl	8008fc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009156:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800915a:	f043 0310 	orr.w	r3, r3, #16
 800915e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009162:	f7ff ffdb 	bl	800911c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009166:	bd10      	pop	{r4, pc}

08009168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009168:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800916a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009172:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009176:	f7ff ffd1 	bl	800911c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917a:	bd08      	pop	{r3, pc}

0800917c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800917c:	6803      	ldr	r3, [r0, #0]
 800917e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009180:	6819      	ldr	r1, [r3, #0]
{
 8009182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 8009186:	f640 060f 	movw	r6, #2063	; 0x80f
 800918a:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800918c:	689d      	ldr	r5, [r3, #8]
{
 800918e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8009190:	d110      	bne.n	80091b4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009192:	0696      	lsls	r6, r2, #26
 8009194:	f140 8096 	bpl.w	80092c4 <HAL_UART_IRQHandler+0x148>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009198:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800919c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 80091a0:	433e      	orrs	r6, r7
 80091a2:	f000 808f 	beq.w	80092c4 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 80091a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8084 	beq.w	80092b6 <HAL_UART_IRQHandler+0x13a>
}
 80091ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091b2:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091b4:	4ea7      	ldr	r6, [pc, #668]	; (8009454 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091b6:	48a8      	ldr	r0, [pc, #672]	; (8009458 <HAL_UART_IRQHandler+0x2dc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091b8:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091ba:	4008      	ands	r0, r1
 80091bc:	4330      	orrs	r0, r6
 80091be:	f000 8081 	beq.w	80092c4 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091c2:	07d7      	lsls	r7, r2, #31
 80091c4:	d509      	bpl.n	80091da <HAL_UART_IRQHandler+0x5e>
 80091c6:	05c8      	lsls	r0, r1, #23
 80091c8:	d507      	bpl.n	80091da <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ca:	2001      	movs	r0, #1
 80091cc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80091d2:	f040 0001 	orr.w	r0, r0, #1
 80091d6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091da:	0797      	lsls	r7, r2, #30
 80091dc:	d509      	bpl.n	80091f2 <HAL_UART_IRQHandler+0x76>
 80091de:	07e8      	lsls	r0, r5, #31
 80091e0:	d507      	bpl.n	80091f2 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091e2:	2002      	movs	r0, #2
 80091e4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80091ea:	f040 0004 	orr.w	r0, r0, #4
 80091ee:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091f2:	0757      	lsls	r7, r2, #29
 80091f4:	d509      	bpl.n	800920a <HAL_UART_IRQHandler+0x8e>
 80091f6:	07e8      	lsls	r0, r5, #31
 80091f8:	d507      	bpl.n	800920a <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091fa:	2004      	movs	r0, #4
 80091fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009202:	f040 0002 	orr.w	r0, r0, #2
 8009206:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800920a:	0717      	lsls	r7, r2, #28
 800920c:	d50b      	bpl.n	8009226 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800920e:	f001 0020 	and.w	r0, r1, #32
 8009212:	4330      	orrs	r0, r6
 8009214:	d007      	beq.n	8009226 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009216:	2008      	movs	r0, #8
 8009218:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800921a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800921e:	f040 0008 	orr.w	r0, r0, #8
 8009222:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009226:	0516      	lsls	r6, r2, #20
 8009228:	d50a      	bpl.n	8009240 <HAL_UART_IRQHandler+0xc4>
 800922a:	0148      	lsls	r0, r1, #5
 800922c:	d508      	bpl.n	8009240 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800922e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009232:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009234:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009238:	f043 0320 	orr.w	r3, r3, #32
 800923c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009240:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d036      	beq.n	80092b6 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009248:	0693      	lsls	r3, r2, #26
 800924a:	d50a      	bpl.n	8009262 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800924c:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009250:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8009254:	ea51 0305 	orrs.w	r3, r1, r5
 8009258:	d003      	beq.n	8009262 <HAL_UART_IRQHandler+0xe6>
        if (huart->RxISR != NULL)
 800925a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800925c:	b10b      	cbz	r3, 8009262 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 800925e:	4620      	mov	r0, r4
 8009260:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009262:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8009264:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009268:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800926a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8009274:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009276:	d020      	beq.n	80092ba <HAL_UART_IRQHandler+0x13e>
        UART_EndRxTransfer(huart);
 8009278:	f7ff fea4 	bl	8008fc4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	6893      	ldr	r3, [r2, #8]
 8009280:	065f      	lsls	r7, r3, #25
 8009282:	d515      	bpl.n	80092b0 <HAL_UART_IRQHandler+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	f102 0308 	add.w	r3, r2, #8
 8009288:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800928c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	f102 0008 	add.w	r0, r2, #8
 8009294:	e840 3100 	strex	r1, r3, [r0]
 8009298:	2900      	cmp	r1, #0
 800929a:	d1f3      	bne.n	8009284 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 800929c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800929e:	b138      	cbz	r0, 80092b0 <HAL_UART_IRQHandler+0x134>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092a0:	4b6e      	ldr	r3, [pc, #440]	; (800945c <HAL_UART_IRQHandler+0x2e0>)
 80092a2:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a4:	f7fd f9a9 	bl	80065fa <HAL_DMA_Abort_IT>
 80092a8:	b128      	cbz	r0, 80092b6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80092ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80092ae:	e77e      	b.n	80091ae <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff ff33 	bl	800911c <HAL_UART_ErrorCallback>
}
 80092b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 80092ba:	f7ff ff2f 	bl	800911c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092be:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80092c2:	e7f8      	b.n	80092b6 <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80092c6:	2801      	cmp	r0, #1
 80092c8:	f040 8081 	bne.w	80093ce <HAL_UART_IRQHandler+0x252>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092cc:	06d6      	lsls	r6, r2, #27
 80092ce:	d57e      	bpl.n	80093ce <HAL_UART_IRQHandler+0x252>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092d0:	06c8      	lsls	r0, r1, #27
 80092d2:	d57c      	bpl.n	80093ce <HAL_UART_IRQHandler+0x252>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d4:	2210      	movs	r2, #16
 80092d6:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	0651      	lsls	r1, r2, #25
 80092dc:	d547      	bpl.n	800936e <HAL_UART_IRQHandler+0x1f2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092de:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80092e0:	6811      	ldr	r1, [r2, #0]
 80092e2:	684a      	ldr	r2, [r1, #4]
 80092e4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d0e5      	beq.n	80092b6 <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ea:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80092ee:	4290      	cmp	r0, r2
 80092f0:	d9e1      	bls.n	80092b6 <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 80092f2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092f6:	680a      	ldr	r2, [r1, #0]
 80092f8:	0692      	lsls	r2, r2, #26
 80092fa:	d42e      	bmi.n	800935a <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	e843 2100 	strex	r1, r2, [r3]
 8009308:	2900      	cmp	r1, #0
 800930a:	d1f7      	bne.n	80092fc <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	f103 0208 	add.w	r2, r3, #8
 8009310:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009314:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	f103 0008 	add.w	r0, r3, #8
 800931c:	e840 2100 	strex	r1, r2, [r0]
 8009320:	2900      	cmp	r1, #0
 8009322:	d1f3      	bne.n	800930c <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	f103 0208 	add.w	r2, r3, #8
 8009328:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800932c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009330:	f103 0008 	add.w	r0, r3, #8
 8009334:	e840 2100 	strex	r1, r2, [r0]
 8009338:	2900      	cmp	r1, #0
 800933a:	d1f3      	bne.n	8009324 <HAL_UART_IRQHandler+0x1a8>
          huart->RxState = HAL_UART_STATE_READY;
 800933c:	2220      	movs	r2, #32
 800933e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009342:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009348:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	e843 2100 	strex	r1, r2, [r3]
 8009350:	2900      	cmp	r1, #0
 8009352:	d1f7      	bne.n	8009344 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009354:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009356:	f7fd f91d 	bl	8006594 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800935a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800935e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009362:	1ac9      	subs	r1, r1, r3
 8009364:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009366:	4620      	mov	r0, r4
 8009368:	f7f8 fed2 	bl	8002110 <HAL_UARTEx_RxEventCallback>
 800936c:	e7a3      	b.n	80092b6 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800936e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8009372:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8009374:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8009378:	b289      	uxth	r1, r1
 800937a:	2900      	cmp	r1, #0
 800937c:	d09b      	beq.n	80092b6 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800937e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009382:	1a89      	subs	r1, r1, r2
 8009384:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009386:	2900      	cmp	r1, #0
 8009388:	d095      	beq.n	80092b6 <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800938e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	e843 2000 	strex	r0, r2, [r3]
 8009396:	2800      	cmp	r0, #0
 8009398:	d1f7      	bne.n	800938a <HAL_UART_IRQHandler+0x20e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800939a:	4d31      	ldr	r5, [pc, #196]	; (8009460 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	f103 0208 	add.w	r2, r3, #8
 80093a0:	e852 2f00 	ldrex	r2, [r2]
 80093a4:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	f103 0608 	add.w	r6, r3, #8
 80093aa:	e846 2000 	strex	r0, r2, [r6]
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d1f4      	bne.n	800939c <HAL_UART_IRQHandler+0x220>
        huart->RxState = HAL_UART_STATE_READY;
 80093b2:	2220      	movs	r2, #32
 80093b4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80093b8:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ba:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	e843 2000 	strex	r0, r2, [r3]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d1f7      	bne.n	80093bc <HAL_UART_IRQHandler+0x240>
 80093cc:	e7cb      	b.n	8009366 <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093ce:	02d7      	lsls	r7, r2, #11
 80093d0:	d509      	bpl.n	80093e6 <HAL_UART_IRQHandler+0x26a>
 80093d2:	026e      	lsls	r6, r5, #9
 80093d4:	d507      	bpl.n	80093e6 <HAL_UART_IRQHandler+0x26a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80093da:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80093e2:	f000 bb8b 	b.w	8009afc <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093e6:	0610      	lsls	r0, r2, #24
 80093e8:	d50b      	bpl.n	8009402 <HAL_UART_IRQHandler+0x286>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093ea:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093ee:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 80093f2:	4328      	orrs	r0, r5
 80093f4:	d005      	beq.n	8009402 <HAL_UART_IRQHandler+0x286>
    if (huart->TxISR != NULL)
 80093f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f43f af5c 	beq.w	80092b6 <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 80093fe:	4620      	mov	r0, r4
 8009400:	e6d5      	b.n	80091ae <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009402:	0657      	lsls	r7, r2, #25
 8009404:	d511      	bpl.n	800942a <HAL_UART_IRQHandler+0x2ae>
 8009406:	064e      	lsls	r6, r1, #25
 8009408:	d50f      	bpl.n	800942a <HAL_UART_IRQHandler+0x2ae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800940e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	e843 2100 	strex	r1, r2, [r3]
 8009416:	2900      	cmp	r1, #0
 8009418:	d1f7      	bne.n	800940a <HAL_UART_IRQHandler+0x28e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941a:	2320      	movs	r3, #32
 800941c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009420:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff fe4e 	bl	80090c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009428:	e745      	b.n	80092b6 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800942a:	0215      	lsls	r5, r2, #8
 800942c:	d506      	bpl.n	800943c <HAL_UART_IRQHandler+0x2c0>
 800942e:	0048      	lsls	r0, r1, #1
 8009430:	d504      	bpl.n	800943c <HAL_UART_IRQHandler+0x2c0>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009432:	4620      	mov	r0, r4
}
 8009434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009438:	f000 bb62 	b.w	8009b00 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800943c:	01d3      	lsls	r3, r2, #7
 800943e:	f57f af3a 	bpl.w	80092b6 <HAL_UART_IRQHandler+0x13a>
 8009442:	2900      	cmp	r1, #0
 8009444:	f6bf af37 	bge.w	80092b6 <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009448:	4620      	mov	r0, r4
}
 800944a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800944e:	f000 bb56 	b.w	8009afe <HAL_UARTEx_RxFifoFullCallback>
 8009452:	bf00      	nop
 8009454:	10000001 	.word	0x10000001
 8009458:	04000120 	.word	0x04000120
 800945c:	08009169 	.word	0x08009169
 8009460:	effffffe 	.word	0xeffffffe

08009464 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009464:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8009466:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009468:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d105      	bne.n	800947a <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800946e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009472:	0849      	lsrs	r1, r1, #1
 8009474:	f7f8 fe4c 	bl	8002110 <HAL_UARTEx_RxEventCallback>
}
 8009478:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800947a:	f7ff fe4e 	bl	800911a <HAL_UART_RxHalfCpltCallback>
}
 800947e:	e7fb      	b.n	8009478 <UART_DMARxHalfCplt+0x14>

08009480 <UART_DMAReceiveCplt>:
{
 8009480:	b508      	push	{r3, lr}
 8009482:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009484:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f013 0320 	ands.w	r3, r3, #32
 800948e:	d131      	bne.n	80094f4 <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 8009490:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009494:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	e852 3f00 	ldrex	r3, [r2]
 800949a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80094a2:	6803      	ldr	r3, [r0, #0]
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d1f5      	bne.n	8009494 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	f103 0208 	add.w	r2, r3, #8
 80094ac:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	f103 0c08 	add.w	ip, r3, #8
 80094b8:	e84c 2100 	strex	r1, r2, [ip]
 80094bc:	2900      	cmp	r1, #0
 80094be:	d1f3      	bne.n	80094a8 <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	f103 0208 	add.w	r2, r3, #8
 80094c4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	f103 0c08 	add.w	ip, r3, #8
 80094d0:	e84c 2100 	strex	r1, r2, [ip]
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d1f3      	bne.n	80094c0 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094de:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80094e0:	2a01      	cmp	r2, #1
 80094e2:	d107      	bne.n	80094f4 <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	e843 2100 	strex	r1, r2, [r3]
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d1f7      	bne.n	80094e4 <UART_DMAReceiveCplt+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d104      	bne.n	8009504 <UART_DMAReceiveCplt+0x84>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094fa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80094fe:	f7f8 fe07 	bl	8002110 <HAL_UARTEx_RxEventCallback>
}
 8009502:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8009504:	f7ff fe08 	bl	8009118 <HAL_UART_RxCpltCallback>
}
 8009508:	e7fb      	b.n	8009502 <UART_DMAReceiveCplt+0x82>
	...

0800950c <UART_SetConfig>:
{
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009510:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009512:	6921      	ldr	r1, [r4, #16]
 8009514:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009516:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009518:	69c0      	ldr	r0, [r0, #28]
 800951a:	430a      	orrs	r2, r1
 800951c:	6961      	ldr	r1, [r4, #20]
 800951e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009520:	49a0      	ldr	r1, [pc, #640]	; (80097a4 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009522:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009524:	4029      	ands	r1, r5
 8009526:	430a      	orrs	r2, r1
 8009528:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68e1      	ldr	r1, [r4, #12]
 800952e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009536:	4a9c      	ldr	r2, [pc, #624]	; (80097a8 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009538:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800953a:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800953c:	bf1c      	itt	ne
 800953e:	6a22      	ldrne	r2, [r4, #32]
 8009540:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8009548:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800954c:	430a      	orrs	r2, r1
 800954e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009554:	f022 020f 	bic.w	r2, r2, #15
 8009558:	430a      	orrs	r2, r1
 800955a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800955c:	4a93      	ldr	r2, [pc, #588]	; (80097ac <UART_SetConfig+0x2a0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d11b      	bne.n	800959a <UART_SetConfig+0x8e>
 8009562:	4b93      	ldr	r3, [pc, #588]	; (80097b0 <UART_SetConfig+0x2a4>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	3b01      	subs	r3, #1
 800956e:	2b02      	cmp	r3, #2
 8009570:	f200 80e4 	bhi.w	800973c <UART_SetConfig+0x230>
 8009574:	4a8f      	ldr	r2, [pc, #572]	; (80097b4 <UART_SetConfig+0x2a8>)
 8009576:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009578:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800957c:	f040 80ab 	bne.w	80096d6 <UART_SetConfig+0x1ca>
    switch (clocksource)
 8009580:	2b08      	cmp	r3, #8
 8009582:	d826      	bhi.n	80095d2 <UART_SetConfig+0xc6>
 8009584:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009588:	00dd00ee 	.word	0x00dd00ee
 800958c:	002500a5 	.word	0x002500a5
 8009590:	002500e3 	.word	0x002500e3
 8009594:	00250025 	.word	0x00250025
 8009598:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959a:	4a87      	ldr	r2, [pc, #540]	; (80097b8 <UART_SetConfig+0x2ac>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d106      	bne.n	80095ae <UART_SetConfig+0xa2>
 80095a0:	4b83      	ldr	r3, [pc, #524]	; (80097b0 <UART_SetConfig+0x2a4>)
 80095a2:	4a86      	ldr	r2, [pc, #536]	; (80097bc <UART_SetConfig+0x2b0>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a8:	f003 030c 	and.w	r3, r3, #12
 80095ac:	e7e3      	b.n	8009576 <UART_SetConfig+0x6a>
 80095ae:	4a84      	ldr	r2, [pc, #528]	; (80097c0 <UART_SetConfig+0x2b4>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d119      	bne.n	80095e8 <UART_SetConfig+0xdc>
 80095b4:	4b7e      	ldr	r3, [pc, #504]	; (80097b0 <UART_SetConfig+0x2a4>)
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095be:	2b20      	cmp	r3, #32
 80095c0:	f000 80c8 	beq.w	8009754 <UART_SetConfig+0x248>
 80095c4:	d807      	bhi.n	80095d6 <UART_SetConfig+0xca>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 80c9 	beq.w	800975e <UART_SetConfig+0x252>
 80095cc:	2b10      	cmp	r3, #16
 80095ce:	f000 80bb 	beq.w	8009748 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d2:	2001      	movs	r0, #1
 80095d4:	e04e      	b.n	8009674 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095d6:	2b30      	cmp	r3, #48	; 0x30
 80095d8:	d1fb      	bne.n	80095d2 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80095de:	f000 80c5 	beq.w	800976c <UART_SetConfig+0x260>
 80095e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80095e6:	e093      	b.n	8009710 <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e8:	4a76      	ldr	r2, [pc, #472]	; (80097c4 <UART_SetConfig+0x2b8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d10f      	bne.n	800960e <UART_SetConfig+0x102>
 80095ee:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <UART_SetConfig+0x2a4>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095f8:	2b80      	cmp	r3, #128	; 0x80
 80095fa:	f000 80ab 	beq.w	8009754 <UART_SetConfig+0x248>
 80095fe:	d804      	bhi.n	800960a <UART_SetConfig+0xfe>
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 80ac 	beq.w	800975e <UART_SetConfig+0x252>
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	e7e1      	b.n	80095ce <UART_SetConfig+0xc2>
 800960a:	2bc0      	cmp	r3, #192	; 0xc0
 800960c:	e7e4      	b.n	80095d8 <UART_SetConfig+0xcc>
 800960e:	4a6e      	ldr	r2, [pc, #440]	; (80097c8 <UART_SetConfig+0x2bc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d112      	bne.n	800963a <UART_SetConfig+0x12e>
 8009614:	4b66      	ldr	r3, [pc, #408]	; (80097b0 <UART_SetConfig+0x2a4>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800961a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800961e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009622:	f000 8097 	beq.w	8009754 <UART_SetConfig+0x248>
 8009626:	d805      	bhi.n	8009634 <UART_SetConfig+0x128>
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8098 	beq.w	800975e <UART_SetConfig+0x252>
 800962e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009632:	e7cc      	b.n	80095ce <UART_SetConfig+0xc2>
 8009634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009638:	e7ce      	b.n	80095d8 <UART_SetConfig+0xcc>
 800963a:	4a5b      	ldr	r2, [pc, #364]	; (80097a8 <UART_SetConfig+0x29c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d1c8      	bne.n	80095d2 <UART_SetConfig+0xc6>
 8009640:	4b5b      	ldr	r3, [pc, #364]	; (80097b0 <UART_SetConfig+0x2a4>)
 8009642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009646:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800964a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800964e:	d018      	beq.n	8009682 <UART_SetConfig+0x176>
 8009650:	d806      	bhi.n	8009660 <UART_SetConfig+0x154>
 8009652:	b15b      	cbz	r3, 800966c <UART_SetConfig+0x160>
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009658:	d1bb      	bne.n	80095d2 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 800965a:	f7fe fc2d 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
        break;
 800965e:	e007      	b.n	8009670 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009664:	d1b5      	bne.n	80095d2 <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8009666:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800966a:	e00b      	b.n	8009684 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 800966c:	f7fe fd54 	bl	8008118 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009670:	b940      	cbnz	r0, 8009684 <UART_SetConfig+0x178>
 8009672:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8009674:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009678:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800967a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800967c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8009680:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8009682:	4852      	ldr	r0, [pc, #328]	; (80097cc <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009684:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009686:	4b52      	ldr	r3, [pc, #328]	; (80097d0 <UART_SetConfig+0x2c4>)
 8009688:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800968a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800968e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009692:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009696:	4299      	cmp	r1, r3
 8009698:	d89b      	bhi.n	80095d2 <UART_SetConfig+0xc6>
 800969a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800969e:	d898      	bhi.n	80095d2 <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a0:	2300      	movs	r3, #0
 80096a2:	4619      	mov	r1, r3
 80096a4:	f7f7 fb18 	bl	8000cd8 <__aeabi_uldivmod>
 80096a8:	0209      	lsls	r1, r1, #8
 80096aa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80096ae:	086b      	lsrs	r3, r5, #1
 80096b0:	0200      	lsls	r0, r0, #8
 80096b2:	18c0      	adds	r0, r0, r3
 80096b4:	462a      	mov	r2, r5
 80096b6:	f04f 0300 	mov.w	r3, #0
 80096ba:	f141 0100 	adc.w	r1, r1, #0
 80096be:	f7f7 fb0b 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096c2:	4b44      	ldr	r3, [pc, #272]	; (80097d4 <UART_SetConfig+0x2c8>)
 80096c4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d882      	bhi.n	80095d2 <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	60d8      	str	r0, [r3, #12]
 80096d0:	e7cf      	b.n	8009672 <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 80096d2:	483e      	ldr	r0, [pc, #248]	; (80097cc <UART_SetConfig+0x2c0>)
 80096d4:	e04a      	b.n	800976c <UART_SetConfig+0x260>
    switch (clocksource)
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	f63f af7b 	bhi.w	80095d2 <UART_SetConfig+0xc6>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <UART_SetConfig+0x1d8>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	08009709 	.word	0x08009709
 80096e8:	08009731 	.word	0x08009731
 80096ec:	0800975b 	.word	0x0800975b
 80096f0:	080095d3 	.word	0x080095d3
 80096f4:	08009737 	.word	0x08009737
 80096f8:	080095d3 	.word	0x080095d3
 80096fc:	080095d3 	.word	0x080095d3
 8009700:	080095d3 	.word	0x080095d3
 8009704:	080095e3 	.word	0x080095e3
        pclk = HAL_RCC_GetPCLK1Freq();
 8009708:	f7fe fd06 	bl	8008118 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800970c:	2800      	cmp	r0, #0
 800970e:	d0b0      	beq.n	8009672 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009714:	4a2e      	ldr	r2, [pc, #184]	; (80097d0 <UART_SetConfig+0x2c4>)
 8009716:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800971a:	fbb0 f0f2 	udiv	r0, r0, r2
 800971e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009722:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009726:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800972a:	f1a0 0210 	sub.w	r2, r0, #16
 800972e:	e7cb      	b.n	80096c8 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009730:	f7fe fd04 	bl	800813c <HAL_RCC_GetPCLK2Freq>
        break;
 8009734:	e7ea      	b.n	800970c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 8009736:	f7fe fbbf 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
        break;
 800973a:	e7e7      	b.n	800970c <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800973c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009740:	d1f6      	bne.n	8009730 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009742:	f7fe fcfb 	bl	800813c <HAL_RCC_GetPCLK2Freq>
        break;
 8009746:	e00f      	b.n	8009768 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009748:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800974c:	d1f3      	bne.n	8009736 <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 800974e:	f7fe fbb3 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
        break;
 8009752:	e009      	b.n	8009768 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009754:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009758:	d0bb      	beq.n	80096d2 <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 800975a:	481c      	ldr	r0, [pc, #112]	; (80097cc <UART_SetConfig+0x2c0>)
 800975c:	e7d8      	b.n	8009710 <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800975e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009762:	d1d1      	bne.n	8009708 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009764:	f7fe fcd8 	bl	8008118 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009768:	2800      	cmp	r0, #0
 800976a:	d082      	beq.n	8009672 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976c:	6862      	ldr	r2, [r4, #4]
 800976e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009770:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <UART_SetConfig+0x2c4>)
 8009772:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009776:	fbb0 f3f3 	udiv	r3, r0, r3
 800977a:	0850      	lsrs	r0, r2, #1
 800977c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009780:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009784:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009788:	f1a0 0210 	sub.w	r2, r0, #16
 800978c:	429a      	cmp	r2, r3
 800978e:	f63f af20 	bhi.w	80095d2 <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009792:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8009796:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009798:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800979a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800979e:	4318      	orrs	r0, r3
 80097a0:	60d0      	str	r0, [r2, #12]
 80097a2:	e766      	b.n	8009672 <UART_SetConfig+0x166>
 80097a4:	cfff69f3 	.word	0xcfff69f3
 80097a8:	40008000 	.word	0x40008000
 80097ac:	40013800 	.word	0x40013800
 80097b0:	40021000 	.word	0x40021000
 80097b4:	0800f508 	.word	0x0800f508
 80097b8:	40004400 	.word	0x40004400
 80097bc:	0800f50b 	.word	0x0800f50b
 80097c0:	40004800 	.word	0x40004800
 80097c4:	40004c00 	.word	0x40004c00
 80097c8:	40005000 	.word	0x40005000
 80097cc:	00f42400 	.word	0x00f42400
 80097d0:	0800f518 	.word	0x0800f518
 80097d4:	000ffcff 	.word	0x000ffcff

080097d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80097da:	07da      	lsls	r2, r3, #31
{
 80097dc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097de:	d506      	bpl.n	80097ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097e0:	6801      	ldr	r1, [r0, #0]
 80097e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80097e4:	684a      	ldr	r2, [r1, #4]
 80097e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80097ea:	4322      	orrs	r2, r4
 80097ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097ee:	079c      	lsls	r4, r3, #30
 80097f0:	d506      	bpl.n	8009800 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097f2:	6801      	ldr	r1, [r0, #0]
 80097f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80097f6:	684a      	ldr	r2, [r1, #4]
 80097f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80097fc:	4322      	orrs	r2, r4
 80097fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009800:	0759      	lsls	r1, r3, #29
 8009802:	d506      	bpl.n	8009812 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009804:	6801      	ldr	r1, [r0, #0]
 8009806:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009808:	684a      	ldr	r2, [r1, #4]
 800980a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800980e:	4322      	orrs	r2, r4
 8009810:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009812:	071a      	lsls	r2, r3, #28
 8009814:	d506      	bpl.n	8009824 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009816:	6801      	ldr	r1, [r0, #0]
 8009818:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800981a:	684a      	ldr	r2, [r1, #4]
 800981c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009820:	4322      	orrs	r2, r4
 8009822:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009824:	06dc      	lsls	r4, r3, #27
 8009826:	d506      	bpl.n	8009836 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009828:	6801      	ldr	r1, [r0, #0]
 800982a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800982c:	688a      	ldr	r2, [r1, #8]
 800982e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009832:	4322      	orrs	r2, r4
 8009834:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009836:	0699      	lsls	r1, r3, #26
 8009838:	d506      	bpl.n	8009848 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800983a:	6801      	ldr	r1, [r0, #0]
 800983c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800983e:	688a      	ldr	r2, [r1, #8]
 8009840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009844:	4322      	orrs	r2, r4
 8009846:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009848:	065a      	lsls	r2, r3, #25
 800984a:	d50f      	bpl.n	800986c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800984c:	6801      	ldr	r1, [r0, #0]
 800984e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009850:	684a      	ldr	r2, [r1, #4]
 8009852:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009856:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009858:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800985c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800985e:	d105      	bne.n	800986c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009860:	684a      	ldr	r2, [r1, #4]
 8009862:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009864:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009868:	4322      	orrs	r2, r4
 800986a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800986c:	061b      	lsls	r3, r3, #24
 800986e:	d506      	bpl.n	800987e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009870:	6802      	ldr	r2, [r0, #0]
 8009872:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009874:	6853      	ldr	r3, [r2, #4]
 8009876:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800987a:	430b      	orrs	r3, r1
 800987c:	6053      	str	r3, [r2, #4]
}
 800987e:	bd10      	pop	{r4, pc}

08009880 <UART_WaitOnFlagUntilTimeout>:
{
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009888:	4604      	mov	r4, r0
 800988a:	460e      	mov	r6, r1
 800988c:	4615      	mov	r5, r2
 800988e:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	69d3      	ldr	r3, [r2, #28]
 8009894:	ea36 0303 	bics.w	r3, r6, r3
 8009898:	bf0c      	ite	eq
 800989a:	2301      	moveq	r3, #1
 800989c:	2300      	movne	r3, #0
 800989e:	42ab      	cmp	r3, r5
 80098a0:	d001      	beq.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80098a2:	2000      	movs	r0, #0
 80098a4:	e027      	b.n	80098f6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80098a6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80098aa:	d0f2      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ac:	f7fb faae 	bl	8004e0c <HAL_GetTick>
 80098b0:	1bc0      	subs	r0, r0, r7
 80098b2:	4540      	cmp	r0, r8
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	d802      	bhi.n	80098be <UART_WaitOnFlagUntilTimeout+0x3e>
 80098b8:	f1b8 0f00 	cmp.w	r8, #0
 80098bc:	d11d      	bne.n	80098fa <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80098c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	e840 3200 	strex	r2, r3, [r0]
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	d1f7      	bne.n	80098be <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	f100 0308 	add.w	r3, r0, #8
 80098d2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	f100 0108 	add.w	r1, r0, #8
 80098de:	e841 3200 	strex	r2, r3, [r1]
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d1f3      	bne.n	80098ce <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80098e6:	2320      	movs	r3, #32
 80098e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80098ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 80098f0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 80098f4:	2003      	movs	r0, #3
}
 80098f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098fa:	6803      	ldr	r3, [r0, #0]
 80098fc:	075a      	lsls	r2, r3, #29
 80098fe:	d5c7      	bpl.n	8009890 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009900:	69c3      	ldr	r3, [r0, #28]
 8009902:	051b      	lsls	r3, r3, #20
 8009904:	d5c4      	bpl.n	8009890 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800990a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	e840 3200 	strex	r2, r3, [r0]
 8009918:	2a00      	cmp	r2, #0
 800991a:	d1f7      	bne.n	800990c <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	f100 0308 	add.w	r3, r0, #8
 8009920:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009924:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	f100 0108 	add.w	r1, r0, #8
 800992c:	e841 3200 	strex	r2, r3, [r1]
 8009930:	2a00      	cmp	r2, #0
 8009932:	d1f3      	bne.n	800991c <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8009934:	2320      	movs	r3, #32
 8009936:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800993a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800993e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009942:	e7d5      	b.n	80098f0 <UART_WaitOnFlagUntilTimeout+0x70>

08009944 <UART_CheckIdleState>:
{
 8009944:	b530      	push	{r4, r5, lr}
 8009946:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	2500      	movs	r5, #0
{
 800994a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009950:	f7fb fa5c 	bl	8004e0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800995a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800995c:	d417      	bmi.n	800998e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	6812      	ldr	r2, [r2, #0]
 8009962:	0752      	lsls	r2, r2, #29
 8009964:	d509      	bpl.n	800997a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009966:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800996a:	9200      	str	r2, [sp, #0]
 800996c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009970:	2200      	movs	r2, #0
 8009972:	4620      	mov	r0, r4
 8009974:	f7ff ff84 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8009978:	b9b0      	cbnz	r0, 80099a8 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800997a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800997e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009982:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009986:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998a:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 800998c:	e00d      	b.n	80099aa <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800998e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8009992:	9200      	str	r2, [sp, #0]
 8009994:	9003      	str	r0, [sp, #12]
 8009996:	462a      	mov	r2, r5
 8009998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800999c:	4620      	mov	r0, r4
 800999e:	f7ff ff6f 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d0da      	beq.n	800995e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80099a8:	2003      	movs	r0, #3
}
 80099aa:	b005      	add	sp, #20
 80099ac:	bd30      	pop	{r4, r5, pc}

080099ae <HAL_UART_Init>:
{
 80099ae:	b510      	push	{r4, lr}
  if (huart == NULL)
 80099b0:	4604      	mov	r4, r0
 80099b2:	b350      	cbz	r0, 8009a0a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80099b4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80099b8:	b91b      	cbnz	r3, 80099c2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80099ba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80099be:	f7fa ffef 	bl	80049a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80099c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80099c4:	2324      	movs	r3, #36	; 0x24
 80099c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	f023 0301 	bic.w	r3, r3, #1
 80099d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff fd9a 	bl	800950c <UART_SetConfig>
 80099d8:	2801      	cmp	r0, #1
 80099da:	d016      	beq.n	8009a0a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099de:	b113      	cbz	r3, 80099e6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80099e0:	4620      	mov	r0, r4
 80099e2:	f7ff fef9 	bl	80097d8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80099fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8009a00:	601a      	str	r2, [r3, #0]
}
 8009a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8009a06:	f7ff bf9d 	b.w	8009944 <UART_CheckIdleState>
}
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	bd10      	pop	{r4, pc}
	...

08009a10 <UART_Start_Receive_DMA>:
{
 8009a10:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a12:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a14:	2500      	movs	r5, #0
 8009a16:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 8009a1a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009a1c:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009a1e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a22:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009a26:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009a28:	b1c0      	cbz	r0, 8009a5c <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a2a:	4b20      	ldr	r3, [pc, #128]	; (8009aac <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a2c:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a2e:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a30:	4b1f      	ldr	r3, [pc, #124]	; (8009ab0 <UART_Start_Receive_DMA+0xa0>)
 8009a32:	6303      	str	r3, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a34:	4b1f      	ldr	r3, [pc, #124]	; (8009ab4 <UART_Start_Receive_DMA+0xa4>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009a36:	e9c0 350d 	strd	r3, r5, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	460a      	mov	r2, r1
 8009a3e:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8009a42:	f7fc fd65 	bl	8006510 <HAL_DMA_Start_IT>
 8009a46:	b148      	cbz	r0, 8009a5c <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009a50:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8009a54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8009a58:	2001      	movs	r0, #1
}
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a5c:	6922      	ldr	r2, [r4, #16]
  __HAL_UNLOCK(huart);
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	b13a      	cbz	r2, 8009a78 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	e843 2100 	strex	r1, r2, [r3]
 8009a74:	2900      	cmp	r1, #0
 8009a76:	d1f7      	bne.n	8009a68 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	f103 0208 	add.w	r2, r3, #8
 8009a7c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a80:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	f103 0008 	add.w	r0, r3, #8
 8009a88:	e840 2100 	strex	r1, r2, [r0]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d1f3      	bne.n	8009a78 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	f103 0208 	add.w	r2, r3, #8
 8009a94:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	f103 0108 	add.w	r1, r3, #8
 8009aa0:	e841 2000 	strex	r0, r2, [r1]
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1f3      	bne.n	8009a90 <UART_Start_Receive_DMA+0x80>
 8009aa8:	e7d7      	b.n	8009a5a <UART_Start_Receive_DMA+0x4a>
 8009aaa:	bf00      	nop
 8009aac:	08009481 	.word	0x08009481
 8009ab0:	08009465 	.word	0x08009465
 8009ab4:	0800911f 	.word	0x0800911f

08009ab8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ab8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8009aba:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009abc:	b91b      	cbnz	r3, 8009ac6 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8009abe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009ac2:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ac4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ac6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ac8:	4d0a      	ldr	r5, [pc, #40]	; (8009af4 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aca:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009acc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ace:	4c0a      	ldr	r4, [pc, #40]	; (8009af8 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ad0:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ad2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ad6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ad8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ae0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ae4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ae6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aee:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8009af2:	e7e7      	b.n	8009ac4 <UARTEx_SetNbDataToProcess+0xc>
 8009af4:	0800f538 	.word	0x0800f538
 8009af8:	0800f530 	.word	0x0800f530

08009afc <HAL_UARTEx_WakeupCallback>:
}
 8009afc:	4770      	bx	lr

08009afe <HAL_UARTEx_RxFifoFullCallback>:
 8009afe:	4770      	bx	lr

08009b00 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009b00:	4770      	bx	lr

08009b02 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009b02:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d014      	beq.n	8009b34 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b0a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009b0c:	2324      	movs	r3, #36	; 0x24
 8009b0e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b12:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009b14:	6813      	ldr	r3, [r2, #0]
 8009b16:	f023 0301 	bic.w	r3, r3, #1
 8009b1a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b1c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b24:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009b26:	2220      	movs	r2, #32
 8009b28:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009b2c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8009b30:	4618      	mov	r0, r3
 8009b32:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009b34:	2002      	movs	r0, #2
}
 8009b36:	4770      	bx	lr

08009b38 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009b38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b3a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b3e:	2b01      	cmp	r3, #1
{
 8009b40:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009b42:	d01b      	beq.n	8009b7c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8009b44:	2301      	movs	r3, #1
 8009b46:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009b4a:	2324      	movs	r3, #36	; 0x24
 8009b4c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b50:	6803      	ldr	r3, [r0, #0]
 8009b52:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	f022 0201 	bic.w	r2, r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009b62:	4311      	orrs	r1, r2
 8009b64:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009b66:	f7ff ffa7 	bl	8009ab8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b6a:	6803      	ldr	r3, [r0, #0]
 8009b6c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009b6e:	2320      	movs	r3, #32
 8009b70:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009b74:	2000      	movs	r0, #0
 8009b76:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009b7c:	2002      	movs	r0, #2
 8009b7e:	e7fc      	b.n	8009b7a <HAL_UARTEx_SetTxFifoThreshold+0x42>

08009b80 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009b80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b82:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b86:	2b01      	cmp	r3, #1
{
 8009b88:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009b8a:	d01b      	beq.n	8009bc4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009b92:	2324      	movs	r3, #36	; 0x24
 8009b94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b98:	6803      	ldr	r3, [r0, #0]
 8009b9a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	f022 0201 	bic.w	r2, r2, #1
 8009ba2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8009baa:	4311      	orrs	r1, r2
 8009bac:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009bae:	f7ff ff83 	bl	8009ab8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb2:	6803      	ldr	r3, [r0, #0]
 8009bb4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009bb6:	2320      	movs	r3, #32
 8009bb8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009bc4:	2002      	movs	r0, #2
 8009bc6:	e7fc      	b.n	8009bc2 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08009bc8 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8009bc8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bca:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8009bce:	2e20      	cmp	r6, #32
{
 8009bd0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bd2:	d120      	bne.n	8009c16 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8009bd4:	b909      	cbnz	r1, 8009bda <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      return HAL_ERROR;
 8009bd6:	2001      	movs	r0, #1
}
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	d0fb      	beq.n	8009bd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    __HAL_LOCK(huart);
 8009bde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d017      	beq.n	8009c16 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 8009be6:	2301      	movs	r3, #1
 8009be8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009bec:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009bee:	f7ff ff0f 	bl	8009a10 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d1f0      	bne.n	8009bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d1ec      	bne.n	8009bd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	2210      	movs	r2, #16
 8009c00:	621a      	str	r2, [r3, #32]
 8009c02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c08:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	e842 3100 	strex	r1, r3, [r2]
 8009c10:	2900      	cmp	r1, #0
 8009c12:	d1f7      	bne.n	8009c04 <HAL_UARTEx_ReceiveToIdle_DMA+0x3c>
 8009c14:	e7e0      	b.n	8009bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 8009c16:	2002      	movs	r0, #2
 8009c18:	e7de      	b.n	8009bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

08009c1a <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c1a:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009c1c:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8009c20:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009c24:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	4770      	bx	lr

08009c2c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009c2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8009c30:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8009c34:	045b      	lsls	r3, r3, #17
 8009c36:	0c5b      	lsrs	r3, r3, #17
 8009c38:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	4770      	bx	lr

08009c40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009c40:	b084      	sub	sp, #16
 8009c42:	b510      	push	{r4, lr}
 8009c44:	ac03      	add	r4, sp, #12
 8009c46:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8009c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8009c5a:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8009c5c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c60:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	4770      	bx	lr

08009c68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c68:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c6a:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 8009c6e:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c70:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8009c74:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8009c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c7c:	0412      	lsls	r2, r2, #16
 8009c7e:	4673      	mov	r3, lr
 8009c80:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8009c82:	2d03      	cmp	r5, #3
 8009c84:	d84c      	bhi.n	8009d20 <USB_ActivateEndpoint+0xb8>
 8009c86:	e8df f005 	tbb	[pc, r5]
 8009c8a:	4802      	.short	0x4802
 8009c8c:	4446      	.short	0x4446
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8009c92:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009c94:	f248 0780 	movw	r7, #32896	; 0x8080
 8009c98:	433a      	orrs	r2, r7
 8009c9a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009c9e:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8009ca2:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8009f10 <USB_ActivateEndpoint+0x2a8>
 8009ca6:	b2b6      	uxth	r6, r6
 8009ca8:	ea06 060c 	and.w	r6, r6, ip
 8009cac:	ea46 060e 	orr.w	r6, r6, lr
 8009cb0:	433e      	orrs	r6, r7
 8009cb2:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 8009cb6:	7b0a      	ldrb	r2, [r1, #12]
 8009cb8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	d17c      	bne.n	8009dba <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009cc0:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 8009cc2:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009cc4:	0852      	lsrs	r2, r2, #1
 8009cc6:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 8009cc8:	b366      	cbz	r6, 8009d24 <USB_ActivateEndpoint+0xbc>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009cca:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8009cce:	fa1e fe81 	uxtah	lr, lr, r1
 8009cd2:	f8ae 2400 	strh.w	r2, [lr, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cda:	0657      	lsls	r7, r2, #25
 8009cdc:	d50a      	bpl.n	8009cf4 <USB_ActivateEndpoint+0x8c>
 8009cde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ce2:	b292      	uxth	r2, r2
 8009ce4:	ea02 020c 	and.w	r2, r2, ip
 8009ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009cf0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cf4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cf8:	4983      	ldr	r1, [pc, #524]	; (8009f08 <USB_ActivateEndpoint+0x2a0>)
 8009cfa:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 8009cfc:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cfe:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8009d02:	d001      	beq.n	8009d08 <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d04:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d10:	e0b1      	b.n	8009e76 <USB_ActivateEndpoint+0x20e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8009d12:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8009d16:	2400      	movs	r4, #0
      break;
 8009d18:	e7bc      	b.n	8009c94 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8009d1e:	e7fa      	b.n	8009d16 <USB_ActivateEndpoint+0xae>
  switch (ep->type)
 8009d20:	2401      	movs	r4, #1
 8009d22:	e7b7      	b.n	8009c94 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d24:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d28:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d2a:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d2e:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d30:	f8a5 2404 	strh.w	r2, [r5, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009d38:	fa1e fe82 	uxtah	lr, lr, r2
 8009d3c:	d927      	bls.n	8009d8e <USB_ActivateEndpoint+0x126>
 8009d3e:	094d      	lsrs	r5, r1, #5
 8009d40:	4a72      	ldr	r2, [pc, #456]	; (8009f0c <USB_ActivateEndpoint+0x2a4>)
 8009d42:	06ce      	lsls	r6, r1, #27
 8009d44:	bf08      	it	eq
 8009d46:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8009d4a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8009d4e:	b292      	uxth	r2, r2
 8009d50:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d58:	0457      	lsls	r7, r2, #17
 8009d5a:	d50d      	bpl.n	8009d78 <USB_ActivateEndpoint+0x110>
 8009d5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d60:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d68:	0412      	lsls	r2, r2, #16
 8009d6a:	0c12      	lsrs	r2, r2, #16
 8009d6c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d74:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d84:	0412      	lsls	r2, r2, #16
 8009d86:	0c12      	lsrs	r2, r2, #16
 8009d88:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009d8c:	e7bc      	b.n	8009d08 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d8e:	b971      	cbnz	r1, 8009dae <USB_ActivateEndpoint+0x146>
 8009d90:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 8009d94:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009d98:	0412      	lsls	r2, r2, #16
 8009d9a:	0c12      	lsrs	r2, r2, #16
 8009d9c:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
 8009da0:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 8009da4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009da8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009dac:	e7cf      	b.n	8009d4e <USB_ActivateEndpoint+0xe6>
 8009dae:	084a      	lsrs	r2, r1, #1
 8009db0:	07c9      	lsls	r1, r1, #31
 8009db2:	bf48      	it	mi
 8009db4:	3201      	addmi	r2, #1
 8009db6:	0292      	lsls	r2, r2, #10
 8009db8:	e7c9      	b.n	8009d4e <USB_ActivateEndpoint+0xe6>
    if (ep->type == EP_TYPE_BULK)
 8009dba:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009dbc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8009dc0:	d15d      	bne.n	8009e7e <USB_ActivateEndpoint+0x216>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009dc2:	b292      	uxth	r2, r2
 8009dc4:	ea02 020c 	and.w	r2, r2, ip
 8009dc8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8009dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009dd0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009dd4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8009dd8:	890a      	ldrh	r2, [r1, #8]
 8009dda:	fa1e f686 	uxtah	r6, lr, r6
 8009dde:	0852      	lsrs	r2, r2, #1
 8009de0:	0052      	lsls	r2, r2, #1
 8009de2:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 8009de6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009dea:	fa1e fe82 	uxtah	lr, lr, r2
 8009dee:	894a      	ldrh	r2, [r1, #10]
 8009df0:	0852      	lsrs	r2, r2, #1
 8009df2:	0052      	lsls	r2, r2, #1
 8009df4:	f8ae 2404 	strh.w	r2, [lr, #1028]	; 0x404
    if (ep->is_in == 0U)
 8009df8:	784a      	ldrb	r2, [r1, #1]
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d147      	bne.n	8009e8e <USB_ActivateEndpoint+0x226>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dfe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e02:	0456      	lsls	r6, r2, #17
 8009e04:	d50d      	bpl.n	8009e22 <USB_ActivateEndpoint+0x1ba>
 8009e06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e12:	0412      	lsls	r2, r2, #16
 8009e14:	0c12      	lsrs	r2, r2, #16
 8009e16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e26:	0655      	lsls	r5, r2, #25
 8009e28:	d50d      	bpl.n	8009e46 <USB_ActivateEndpoint+0x1de>
 8009e2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e36:	0412      	lsls	r2, r2, #16
 8009e38:	0c12      	lsrs	r2, r2, #16
 8009e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e3e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009e42:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e52:	0412      	lsls	r2, r2, #16
 8009e54:	0c12      	lsrs	r2, r2, #16
 8009e56:	f248 0180 	movw	r1, #32896	; 0x8080
 8009e5a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e70:	0412      	lsls	r2, r2, #16
 8009e72:	0c12      	lsrs	r2, r2, #16
 8009e74:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e76:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009e7e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8009e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e86:	0412      	lsls	r2, r2, #16
 8009e88:	0c12      	lsrs	r2, r2, #16
 8009e8a:	433a      	orrs	r2, r7
 8009e8c:	e7a0      	b.n	8009dd0 <USB_ActivateEndpoint+0x168>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e92:	0451      	lsls	r1, r2, #17
 8009e94:	d50d      	bpl.n	8009eb2 <USB_ActivateEndpoint+0x24a>
 8009e96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ea2:	0412      	lsls	r2, r2, #16
 8009ea4:	0c12      	lsrs	r2, r2, #16
 8009ea6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009eae:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009eb6:	0652      	lsls	r2, r2, #25
 8009eb8:	d50d      	bpl.n	8009ed6 <USB_ActivateEndpoint+0x26e>
 8009eba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ebe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ec6:	0412      	lsls	r2, r2, #16
 8009ec8:	0c12      	lsrs	r2, r2, #16
 8009eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ece:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009ed2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ed6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009eda:	490b      	ldr	r1, [pc, #44]	; (8009f08 <USB_ActivateEndpoint+0x2a0>)
 8009edc:	b292      	uxth	r2, r2
 8009ede:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8009ee0:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ee2:	bf18      	it	ne
 8009ee4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ef0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ef4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f00:	0412      	lsls	r2, r2, #16
 8009f02:	0c12      	lsrs	r2, r2, #16
 8009f04:	e700      	b.n	8009d08 <USB_ActivateEndpoint+0xa0>
 8009f06:	bf00      	nop
 8009f08:	ffff8fbf 	.word	0xffff8fbf
 8009f0c:	ffff8000 	.word	0xffff8000
 8009f10:	ffff8f8f 	.word	0xffff8f8f

08009f14 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009f14:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f16:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8009f18:	7b09      	ldrb	r1, [r1, #12]
 8009f1a:	bbd9      	cbnz	r1, 8009f94 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009f1c:	b30a      	cbz	r2, 8009f62 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f22:	0651      	lsls	r1, r2, #25
 8009f24:	d50d      	bpl.n	8009f42 <USB_DeactivateEndpoint+0x2e>
 8009f26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f32:	0412      	lsls	r2, r2, #16
 8009f34:	0c12      	lsrs	r2, r2, #16
 8009f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f3a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009f3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f46:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f4e:	0412      	lsls	r2, r2, #16
 8009f50:	0c12      	lsrs	r2, r2, #16
 8009f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f5a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8009f5e:	2000      	movs	r0, #0
 8009f60:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f66:	0452      	lsls	r2, r2, #17
 8009f68:	d50d      	bpl.n	8009f86 <USB_DeactivateEndpoint+0x72>
 8009f6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f76:	0412      	lsls	r2, r2, #16
 8009f78:	0c12      	lsrs	r2, r2, #16
 8009f7a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f82:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f92:	e7dc      	b.n	8009f4e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	d148      	bne.n	800a02a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f98:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009f9c:	0451      	lsls	r1, r2, #17
 8009f9e:	d50d      	bpl.n	8009fbc <USB_DeactivateEndpoint+0xa8>
 8009fa0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009fa4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009fac:	0412      	lsls	r2, r2, #16
 8009fae:	0c12      	lsrs	r2, r2, #16
 8009fb0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fb8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fbc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009fc0:	0652      	lsls	r2, r2, #25
 8009fc2:	d50d      	bpl.n	8009fe0 <USB_DeactivateEndpoint+0xcc>
 8009fc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009fc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009fd0:	0412      	lsls	r2, r2, #16
 8009fd2:	0c12      	lsrs	r2, r2, #16
 8009fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fd8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009fdc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8009fe0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009fe4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fe8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009fec:	0412      	lsls	r2, r2, #16
 8009fee:	0c12      	lsrs	r2, r2, #16
 8009ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ff4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009ff8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ffc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a000:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a004:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a008:	0412      	lsls	r2, r2, #16
 800a00a:	0c12      	lsrs	r2, r2, #16
 800a00c:	f248 0180 	movw	r1, #32896	; 0x8080
 800a010:	430a      	orrs	r2, r1
 800a012:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a016:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a01a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a01e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a022:	0412      	lsls	r2, r2, #16
 800a024:	0c12      	lsrs	r2, r2, #16
 800a026:	430a      	orrs	r2, r1
 800a028:	e797      	b.n	8009f5a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a02a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a02e:	0451      	lsls	r1, r2, #17
 800a030:	d50d      	bpl.n	800a04e <USB_DeactivateEndpoint+0x13a>
 800a032:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a036:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a03a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a03e:	0412      	lsls	r2, r2, #16
 800a040:	0c12      	lsrs	r2, r2, #16
 800a042:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a04a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a04e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a052:	0652      	lsls	r2, r2, #25
 800a054:	d50d      	bpl.n	800a072 <USB_DeactivateEndpoint+0x15e>
 800a056:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a05a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a05e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a062:	0412      	lsls	r2, r2, #16
 800a064:	0c12      	lsrs	r2, r2, #16
 800a066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a06a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a06e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800a072:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a076:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a07a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a07e:	0412      	lsls	r2, r2, #16
 800a080:	0c12      	lsrs	r2, r2, #16
 800a082:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a08a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a08e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a092:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a09a:	0412      	lsls	r2, r2, #16
 800a09c:	0c12      	lsrs	r2, r2, #16
 800a09e:	f248 0180 	movw	r1, #32896	; 0x8080
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a0ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0b4:	e7b5      	b.n	800a022 <USB_DeactivateEndpoint+0x10e>

0800a0b6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800a0b6:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0b8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800a0ba:	b18b      	cbz	r3, 800a0e0 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a0c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	0c1b      	lsrs	r3, r3, #16
 800a0cc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800a0dc:	2000      	movs	r0, #0
 800a0de:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a0e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	0c1b      	lsrs	r3, r3, #16
 800a0f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0f4:	e7ec      	b.n	800a0d0 <USB_EPSetStall+0x1a>

0800a0f6 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a0f6:	7b0b      	ldrb	r3, [r1, #12]
 800a0f8:	bb3b      	cbnz	r3, 800a14a <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800a0fa:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0fc:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800a0fe:	b333      	cbz	r3, 800a14e <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a104:	065b      	lsls	r3, r3, #25
 800a106:	d50d      	bpl.n	800a124 <USB_EPClearStall+0x2e>
 800a108:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a114:	041b      	lsls	r3, r3, #16
 800a116:	0c1b      	lsrs	r3, r3, #16
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a120:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800a124:	78cb      	ldrb	r3, [r1, #3]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d00f      	beq.n	800a14a <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a12a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a12e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a136:	041b      	lsls	r3, r3, #16
 800a138:	0c1b      	lsrs	r3, r3, #16
 800a13a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a13e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a146:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800a14a:	2000      	movs	r0, #0
 800a14c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a14e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a152:	045b      	lsls	r3, r3, #17
 800a154:	d50d      	bpl.n	800a172 <USB_EPClearStall+0x7c>
 800a156:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	0c1b      	lsrs	r3, r3, #16
 800a166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a172:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	041b      	lsls	r3, r3, #16
 800a180:	0c1b      	lsrs	r3, r3, #16
 800a182:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a186:	e7da      	b.n	800a13e <USB_EPClearStall+0x48>

0800a188 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800a188:	b911      	cbnz	r1, 800a190 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a18a:	2380      	movs	r3, #128	; 0x80
 800a18c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800a190:	2000      	movs	r0, #0
 800a192:	4770      	bx	lr

0800a194 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a194:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800a198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	4770      	bx	lr

0800a1aa <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a1aa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800a1ae:	b280      	uxth	r0, r0
 800a1b0:	4770      	bx	lr

0800a1b2 <USB_WritePMA>:
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a1b6:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1b8:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a1c0:	1a40      	subs	r0, r0, r1

  for (i = n; i != 0U; i--)
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	d100      	bne.n	800a1c8 <USB_WritePMA+0x16>
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
  }
}
 800a1c6:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a1c8:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 800a1ca:	5242      	strh	r2, [r0, r1]
    pBuf++;
 800a1cc:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800a1ce:	e7f8      	b.n	800a1c2 <USB_WritePMA+0x10>

0800a1d0 <USB_EPStartXfer>:
{
 800a1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d4:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800a1d6:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 800a1d8:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800a1da:	2901      	cmp	r1, #1
{
 800a1dc:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800a1de:	f040 811f 	bne.w	800a420 <USB_EPStartXfer+0x250>
    if (ep->xfer_len > ep->maxpacket)
 800a1e2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a1e6:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1e8:	6961      	ldr	r1, [r4, #20]
 800a1ea:	4566      	cmp	r6, ip
 800a1ec:	bf28      	it	cs
 800a1ee:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 800a1f0:	bb12      	cbnz	r2, 800a238 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1f2:	b2b6      	uxth	r6, r6
 800a1f4:	88e2      	ldrh	r2, [r4, #6]
 800a1f6:	4633      	mov	r3, r6
 800a1f8:	f7ff ffdb 	bl	800a1b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1fc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a200:	7823      	ldrb	r3, [r4, #0]
 800a202:	f205 4102 	addw	r1, r5, #1026	; 0x402
 800a206:	fa11 f282 	uxtah	r2, r1, r2
 800a20a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a20e:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a210:	7822      	ldrb	r2, [r4, #0]
 800a212:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	0c1b      	lsrs	r3, r3, #16
 800a222:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800a232:	2000      	movs	r0, #0
}
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 800a238:	78e2      	ldrb	r2, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 800a23a:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a23c:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 800a23e:	2a02      	cmp	r2, #2
 800a240:	f040 80d7 	bne.w	800a3f2 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800a244:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a246:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800a24a:	f080 80bb 	bcs.w	800a3c4 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a24e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a252:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a256:	0412      	lsls	r2, r2, #16
 800a258:	0c12      	lsrs	r2, r2, #16
 800a25a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800a25e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a262:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a266:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a26a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a26e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a270:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800a274:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a276:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a278:	d053      	beq.n	800a322 <USB_EPStartXfer+0x152>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a27a:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800a27e:	fa1c f282 	uxtah	r2, ip, r2
 800a282:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a286:	8962      	ldrh	r2, [r4, #10]
 800a288:	f7ff ff93 	bl	800a1b2 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a28c:	6a22      	ldr	r2, [r4, #32]
 800a28e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800a290:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a292:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800a294:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800a296:	bf8c      	ite	hi
 800a298:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800a29a:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800a29c:	4431      	add	r1, r6
 800a29e:	bf88      	it	hi
 800a2a0:	4632      	movhi	r2, r6
 800a2a2:	6223      	str	r3, [r4, #32]
 800a2a4:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2a6:	b293      	uxth	r3, r2
 800a2a8:	bb70      	cbnz	r0, 800a308 <USB_EPStartXfer+0x138>
 800a2aa:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800a2ae:	7820      	ldrb	r0, [r4, #0]
 800a2b0:	f205 4702 	addw	r7, r5, #1026	; 0x402
 800a2b4:	fa17 f686 	uxtah	r6, r7, r6
 800a2b8:	2a3e      	cmp	r2, #62	; 0x3e
 800a2ba:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800a2be:	d90e      	bls.n	800a2de <USB_EPStartXfer+0x10e>
 800a2c0:	0950      	lsrs	r0, r2, #5
 800a2c2:	06d7      	lsls	r7, r2, #27
 800a2c4:	4aaa      	ldr	r2, [pc, #680]	; (800a570 <USB_EPStartXfer+0x3a0>)
 800a2c6:	bf08      	it	eq
 800a2c8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a2cc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a2d0:	b292      	uxth	r2, r2
 800a2d2:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2d4:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2d6:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2d8:	f7ff ff6b 	bl	800a1b2 <USB_WritePMA>
 800a2dc:	e798      	b.n	800a210 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2de:	b95a      	cbnz	r2, 800a2f8 <USB_EPStartXfer+0x128>
 800a2e0:	8832      	ldrh	r2, [r6, #0]
 800a2e2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a2e6:	0412      	lsls	r2, r2, #16
 800a2e8:	0c12      	lsrs	r2, r2, #16
 800a2ea:	8032      	strh	r2, [r6, #0]
 800a2ec:	8832      	ldrh	r2, [r6, #0]
 800a2ee:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a2f2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a2f6:	e7eb      	b.n	800a2d0 <USB_EPStartXfer+0x100>
 800a2f8:	0850      	lsrs	r0, r2, #1
 800a2fa:	07d2      	lsls	r2, r2, #31
 800a2fc:	bf48      	it	mi
 800a2fe:	3001      	addmi	r0, #1
 800a300:	0280      	lsls	r0, r0, #10
 800a302:	b280      	uxth	r0, r0
 800a304:	8030      	strh	r0, [r6, #0]
 800a306:	e7e5      	b.n	800a2d4 <USB_EPStartXfer+0x104>
 800a308:	2801      	cmp	r0, #1
 800a30a:	d1e3      	bne.n	800a2d4 <USB_EPStartXfer+0x104>
 800a30c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a310:	7820      	ldrb	r0, [r4, #0]
 800a312:	f205 4602 	addw	r6, r5, #1026	; 0x402
 800a316:	fa16 f282 	uxtah	r2, r6, r2
 800a31a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a31e:	8013      	strh	r3, [r2, #0]
 800a320:	e7d8      	b.n	800a2d4 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a322:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 800a326:	fa1c f282 	uxtah	r2, ip, r2
 800a32a:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a32e:	8922      	ldrh	r2, [r4, #8]
 800a330:	f7ff ff3f 	bl	800a1b2 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a334:	6a22      	ldr	r2, [r4, #32]
 800a336:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800a338:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a33a:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800a33c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800a33e:	bf8c      	ite	hi
 800a340:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800a342:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 800a344:	4431      	add	r1, r6
 800a346:	bf88      	it	hi
 800a348:	4632      	movhi	r2, r6
 800a34a:	6223      	str	r3, [r4, #32]
 800a34c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a34e:	b293      	uxth	r3, r2
 800a350:	bb58      	cbnz	r0, 800a3aa <USB_EPStartXfer+0x1da>
 800a352:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800a356:	7820      	ldrb	r0, [r4, #0]
 800a358:	f205 4706 	addw	r7, r5, #1030	; 0x406
 800a35c:	fa17 f686 	uxtah	r6, r7, r6
 800a360:	2a3e      	cmp	r2, #62	; 0x3e
 800a362:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800a366:	d90b      	bls.n	800a380 <USB_EPStartXfer+0x1b0>
 800a368:	0950      	lsrs	r0, r2, #5
 800a36a:	06d7      	lsls	r7, r2, #27
 800a36c:	4a80      	ldr	r2, [pc, #512]	; (800a570 <USB_EPStartXfer+0x3a0>)
 800a36e:	bf08      	it	eq
 800a370:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a374:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a378:	b292      	uxth	r2, r2
 800a37a:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a37c:	8962      	ldrh	r2, [r4, #10]
 800a37e:	e7aa      	b.n	800a2d6 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a380:	b95a      	cbnz	r2, 800a39a <USB_EPStartXfer+0x1ca>
 800a382:	8832      	ldrh	r2, [r6, #0]
 800a384:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a388:	0412      	lsls	r2, r2, #16
 800a38a:	0c12      	lsrs	r2, r2, #16
 800a38c:	8032      	strh	r2, [r6, #0]
 800a38e:	8832      	ldrh	r2, [r6, #0]
 800a390:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a394:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a398:	e7ee      	b.n	800a378 <USB_EPStartXfer+0x1a8>
 800a39a:	0850      	lsrs	r0, r2, #1
 800a39c:	07d2      	lsls	r2, r2, #31
 800a39e:	bf48      	it	mi
 800a3a0:	3001      	addmi	r0, #1
 800a3a2:	0280      	lsls	r0, r0, #10
 800a3a4:	b280      	uxth	r0, r0
 800a3a6:	8030      	strh	r0, [r6, #0]
 800a3a8:	e7e8      	b.n	800a37c <USB_EPStartXfer+0x1ac>
 800a3aa:	2801      	cmp	r0, #1
 800a3ac:	d1e6      	bne.n	800a37c <USB_EPStartXfer+0x1ac>
 800a3ae:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a3b2:	7820      	ldrb	r0, [r4, #0]
 800a3b4:	f205 4606 	addw	r6, r5, #1030	; 0x406
 800a3b8:	fa16 f282 	uxtah	r2, r6, r2
 800a3bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a3c0:	8013      	strh	r3, [r2, #0]
 800a3c2:	e7db      	b.n	800a37c <USB_EPStartXfer+0x1ac>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a3c4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800a3c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a3cc:	0412      	lsls	r2, r2, #16
 800a3ce:	0c12      	lsrs	r2, r2, #16
 800a3d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3d8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a3e0:	f200 4602 	addw	r6, r0, #1026	; 0x402
 800a3e4:	fa16 f282 	uxtah	r2, r6, r2
 800a3e8:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3ea:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3ee:	8922      	ldrh	r2, [r4, #8]
 800a3f0:	e772      	b.n	800a2d8 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3f2:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800a3f6:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3f8:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800a3fc:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3fe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a402:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a404:	d007      	beq.n	800a416 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a406:	f200 4606 	addw	r6, r0, #1030	; 0x406
 800a40a:	fa16 f282 	uxtah	r2, r6, r2
 800a40e:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a412:	8962      	ldrh	r2, [r4, #10]
 800a414:	e760      	b.n	800a2d8 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a416:	f200 4602 	addw	r6, r0, #1026	; 0x402
 800a41a:	fa16 f282 	uxtah	r2, r6, r2
 800a41e:	e7e4      	b.n	800a3ea <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 800a420:	bb7a      	cbnz	r2, 800a482 <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 800a422:	69a3      	ldr	r3, [r4, #24]
 800a424:	6921      	ldr	r1, [r4, #16]
 800a426:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800a428:	bf88      	it	hi
 800a42a:	1a5a      	subhi	r2, r3, r1
 800a42c:	61a2      	str	r2, [r4, #24]
 800a42e:	bf88      	it	hi
 800a430:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a432:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a436:	7822      	ldrb	r2, [r4, #0]
 800a438:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800a43c:	fa10 f181 	uxtah	r1, r0, r1
 800a440:	2b3e      	cmp	r3, #62	; 0x3e
 800a442:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a446:	f200 80cb 	bhi.w	800a5e0 <USB_EPStartXfer+0x410>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 80d1 	bne.w	800a5f2 <USB_EPStartXfer+0x422>
 800a450:	880b      	ldrh	r3, [r1, #0]
 800a452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a456:	041b      	lsls	r3, r3, #16
 800a458:	0c1b      	lsrs	r3, r3, #16
 800a45a:	800b      	strh	r3, [r1, #0]
 800a45c:	880b      	ldrh	r3, [r1, #0]
 800a45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a466:	b29b      	uxth	r3, r3
 800a468:	800b      	strh	r3, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a46a:	7822      	ldrb	r2, [r4, #0]
 800a46c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a478:	041b      	lsls	r3, r3, #16
 800a47a:	0c1b      	lsrs	r3, r3, #16
 800a47c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a480:	e6d1      	b.n	800a226 <USB_EPStartXfer+0x56>
      if (ep->type == EP_TYPE_BULK)
 800a482:	78e3      	ldrb	r3, [r4, #3]
 800a484:	2b02      	cmp	r3, #2
 800a486:	d175      	bne.n	800a574 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a488:	2900      	cmp	r1, #0
 800a48a:	d14b      	bne.n	800a524 <USB_EPStartXfer+0x354>
 800a48c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a490:	7823      	ldrb	r3, [r4, #0]
 800a492:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800a496:	fa12 f181 	uxtah	r1, r2, r1
 800a49a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a4a2:	d922      	bls.n	800a4ea <USB_EPStartXfer+0x31a>
 800a4a4:	0958      	lsrs	r0, r3, #5
 800a4a6:	4a32      	ldr	r2, [pc, #200]	; (800a570 <USB_EPStartXfer+0x3a0>)
 800a4a8:	06df      	lsls	r7, r3, #27
 800a4aa:	bf08      	it	eq
 800a4ac:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a4b0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	800a      	strh	r2, [r1, #0]
 800a4b8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a4bc:	7822      	ldrb	r2, [r4, #0]
 800a4be:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800a4c2:	fa10 f181 	uxtah	r1, r0, r1
 800a4c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a4c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a4cc:	d820      	bhi.n	800a510 <USB_EPStartXfer+0x340>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d145      	bne.n	800a55e <USB_EPStartXfer+0x38e>
 800a4d2:	880b      	ldrh	r3, [r1, #0]
 800a4d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4d8:	041b      	lsls	r3, r3, #16
 800a4da:	0c1b      	lsrs	r3, r3, #16
 800a4dc:	800b      	strh	r3, [r1, #0]
 800a4de:	880b      	ldrh	r3, [r1, #0]
 800a4e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e8:	e01a      	b.n	800a520 <USB_EPStartXfer+0x350>
 800a4ea:	b95b      	cbnz	r3, 800a504 <USB_EPStartXfer+0x334>
 800a4ec:	880a      	ldrh	r2, [r1, #0]
 800a4ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a4f2:	0412      	lsls	r2, r2, #16
 800a4f4:	0c12      	lsrs	r2, r2, #16
 800a4f6:	800a      	strh	r2, [r1, #0]
 800a4f8:	880a      	ldrh	r2, [r1, #0]
 800a4fa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a4fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a502:	e7d7      	b.n	800a4b4 <USB_EPStartXfer+0x2e4>
 800a504:	085a      	lsrs	r2, r3, #1
 800a506:	07de      	lsls	r6, r3, #31
 800a508:	bf48      	it	mi
 800a50a:	3201      	addmi	r2, #1
 800a50c:	0292      	lsls	r2, r2, #10
 800a50e:	e7d1      	b.n	800a4b4 <USB_EPStartXfer+0x2e4>
 800a510:	095a      	lsrs	r2, r3, #5
 800a512:	06d8      	lsls	r0, r3, #27
 800a514:	4b16      	ldr	r3, [pc, #88]	; (800a570 <USB_EPStartXfer+0x3a0>)
 800a516:	bf08      	it	eq
 800a518:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a51c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a520:	b29b      	uxth	r3, r3
 800a522:	800b      	strh	r3, [r1, #0]
        if (ep->xfer_count != 0U)
 800a524:	69e3      	ldr	r3, [r4, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d09f      	beq.n	800a46a <USB_EPStartXfer+0x29a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a52a:	7822      	ldrb	r2, [r4, #0]
 800a52c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a530:	f244 0340 	movw	r3, #16448	; 0x4040
 800a534:	ea03 0001 	and.w	r0, r3, r1
 800a538:	438b      	bics	r3, r1
 800a53a:	d001      	beq.n	800a540 <USB_EPStartXfer+0x370>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d194      	bne.n	800a46a <USB_EPStartXfer+0x29a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a540:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54c:	041b      	lsls	r3, r3, #16
 800a54e:	0c1b      	lsrs	r3, r3, #16
 800a550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a558:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800a55c:	e785      	b.n	800a46a <USB_EPStartXfer+0x29a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a55e:	085a      	lsrs	r2, r3, #1
 800a560:	07db      	lsls	r3, r3, #31
 800a562:	bf48      	it	mi
 800a564:	3201      	addmi	r2, #1
 800a566:	0292      	lsls	r2, r2, #10
 800a568:	b292      	uxth	r2, r2
 800a56a:	800a      	strh	r2, [r1, #0]
 800a56c:	e7da      	b.n	800a524 <USB_EPStartXfer+0x354>
 800a56e:	bf00      	nop
 800a570:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 800a574:	2b01      	cmp	r3, #1
 800a576:	d144      	bne.n	800a602 <USB_EPStartXfer+0x432>
        if (ep->xfer_len > ep->maxpacket)
 800a578:	69a3      	ldr	r3, [r4, #24]
 800a57a:	6922      	ldr	r2, [r4, #16]
 800a57c:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800a57e:	bf8a      	itet	hi
 800a580:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800a582:	2000      	movls	r0, #0
 800a584:	4613      	movhi	r3, r2
 800a586:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a588:	2900      	cmp	r1, #0
 800a58a:	f47f af6e 	bne.w	800a46a <USB_EPStartXfer+0x29a>
 800a58e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a592:	7822      	ldrb	r2, [r4, #0]
 800a594:	f205 4002 	addw	r0, r5, #1026	; 0x402
 800a598:	fa10 f181 	uxtah	r1, r0, r1
 800a59c:	2b3e      	cmp	r3, #62	; 0x3e
 800a59e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a5a2:	d90a      	bls.n	800a5ba <USB_EPStartXfer+0x3ea>
 800a5a4:	0958      	lsrs	r0, r3, #5
 800a5a6:	4a18      	ldr	r2, [pc, #96]	; (800a608 <USB_EPStartXfer+0x438>)
 800a5a8:	06df      	lsls	r7, r3, #27
 800a5aa:	bf08      	it	eq
 800a5ac:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a5b0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a5b4:	b292      	uxth	r2, r2
 800a5b6:	800a      	strh	r2, [r1, #0]
 800a5b8:	e73b      	b.n	800a432 <USB_EPStartXfer+0x262>
 800a5ba:	b95b      	cbnz	r3, 800a5d4 <USB_EPStartXfer+0x404>
 800a5bc:	880a      	ldrh	r2, [r1, #0]
 800a5be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a5c2:	0412      	lsls	r2, r2, #16
 800a5c4:	0c12      	lsrs	r2, r2, #16
 800a5c6:	800a      	strh	r2, [r1, #0]
 800a5c8:	880a      	ldrh	r2, [r1, #0]
 800a5ca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a5ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a5d2:	e7ef      	b.n	800a5b4 <USB_EPStartXfer+0x3e4>
 800a5d4:	085a      	lsrs	r2, r3, #1
 800a5d6:	07de      	lsls	r6, r3, #31
 800a5d8:	bf48      	it	mi
 800a5da:	3201      	addmi	r2, #1
 800a5dc:	0292      	lsls	r2, r2, #10
 800a5de:	e7e9      	b.n	800a5b4 <USB_EPStartXfer+0x3e4>
 800a5e0:	095a      	lsrs	r2, r3, #5
 800a5e2:	06d8      	lsls	r0, r3, #27
 800a5e4:	4b08      	ldr	r3, [pc, #32]	; (800a608 <USB_EPStartXfer+0x438>)
 800a5e6:	bf08      	it	eq
 800a5e8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a5ec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a5f0:	e739      	b.n	800a466 <USB_EPStartXfer+0x296>
 800a5f2:	085a      	lsrs	r2, r3, #1
 800a5f4:	07db      	lsls	r3, r3, #31
 800a5f6:	bf48      	it	mi
 800a5f8:	3201      	addmi	r2, #1
 800a5fa:	0292      	lsls	r2, r2, #10
 800a5fc:	b292      	uxth	r2, r2
 800a5fe:	800a      	strh	r2, [r1, #0]
 800a600:	e733      	b.n	800a46a <USB_EPStartXfer+0x29a>
        return HAL_ERROR;
 800a602:	2001      	movs	r0, #1
 800a604:	e616      	b.n	800a234 <USB_EPStartXfer+0x64>
 800a606:	bf00      	nop
 800a608:	ffff8000 	.word	0xffff8000

0800a60c <USB_ReadPMA>:
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a60c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a612:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a614:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800a616:	460c      	mov	r4, r1
 800a618:	462e      	mov	r6, r5
 800a61a:	1a47      	subs	r7, r0, r1
 800a61c:	193a      	adds	r2, r7, r4
 800a61e:	3402      	adds	r4, #2
 800a620:	b936      	cbnz	r6, 800a630 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a622:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800a624:	bf44      	itt	mi
 800a626:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a62a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a634:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a638:	0a12      	lsrs	r2, r2, #8
 800a63a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (i = n; i != 0U; i--)
 800a63e:	3e01      	subs	r6, #1
 800a640:	e7ec      	b.n	800a61c <USB_ReadPMA+0x10>

0800a642 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a642:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a644:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a648:	b184      	cbz	r4, 800a66c <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a64a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a64e:	b15b      	cbz	r3, 800a668 <USBD_CDC_EP0_RxReady+0x26>
 800a650:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a654:	28ff      	cmp	r0, #255	; 0xff
 800a656:	d007      	beq.n	800a668 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a65e:	4621      	mov	r1, r4
 800a660:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a662:	23ff      	movs	r3, #255	; 0xff
 800a664:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a668:	2000      	movs	r0, #0
 800a66a:	e000      	b.n	800a66e <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 800a66c:	2003      	movs	r0, #3
}
 800a66e:	bd10      	pop	{r4, pc}

0800a670 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a670:	2343      	movs	r3, #67	; 0x43
 800a672:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a674:	4800      	ldr	r0, [pc, #0]	; (800a678 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a676:	4770      	bx	lr
 800a678:	20000044 	.word	0x20000044

0800a67c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a67c:	2343      	movs	r3, #67	; 0x43
 800a67e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a680:	4800      	ldr	r0, [pc, #0]	; (800a684 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a682:	4770      	bx	lr
 800a684:	20000088 	.word	0x20000088

0800a688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a688:	2343      	movs	r3, #67	; 0x43
 800a68a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a68c:	4800      	ldr	r0, [pc, #0]	; (800a690 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a68e:	4770      	bx	lr
 800a690:	200000d8 	.word	0x200000d8

0800a694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a694:	230a      	movs	r3, #10
 800a696:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a698:	4800      	ldr	r0, [pc, #0]	; (800a69c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a69a:	4770      	bx	lr
 800a69c:	200000cc 	.word	0x200000cc

0800a6a0 <USBD_CDC_DataOut>:
{
 800a6a0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6a2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800a6a6:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800a6a8:	b16c      	cbz	r4, 800a6c6 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6aa:	f001 f82f 	bl	800b70c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6ae:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6b2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800a6bc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800a6c0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a6c2:	2000      	movs	r0, #0
}
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a6c6:	2003      	movs	r0, #3
 800a6c8:	e7fc      	b.n	800a6c4 <USBD_CDC_DataOut+0x24>

0800a6ca <USBD_CDC_DataIn>:
{
 800a6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800a6cc:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
{
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800a6d4:	b336      	cbz	r6, 800a724 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6d6:	2314      	movs	r3, #20
 800a6d8:	fb03 0301 	mla	r3, r3, r1, r0
 800a6dc:	699c      	ldr	r4, [r3, #24]
 800a6de:	b194      	cbz	r4, 800a706 <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6e0:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
 800a6e4:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800a6e8:	fb0c 7701 	mla	r7, ip, r1, r7
 800a6ec:	6bbf      	ldr	r7, [r7, #56]	; 0x38
 800a6ee:	fbb4 fcf7 	udiv	ip, r4, r7
 800a6f2:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6f6:	b934      	cbnz	r4, 800a706 <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 800a6f8:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	4623      	mov	r3, r4
 800a6fe:	f000 fff3 	bl	800b6e8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a702:	4620      	mov	r0, r4
 800a704:	e00d      	b.n	800a722 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a706:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 800a70a:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 800a70c:	2700      	movs	r7, #0
 800a70e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a712:	2c00      	cmp	r4, #0
 800a714:	d0f5      	beq.n	800a702 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a716:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 800a71a:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800a71e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800a720:	4638      	mov	r0, r7
}
 800a722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a724:	2003      	movs	r0, #3
 800a726:	e7fc      	b.n	800a722 <USBD_CDC_DataIn+0x58>

0800a728 <USBD_CDC_Setup>:
{
 800a728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a72c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a730:	f04f 0800 	mov.w	r8, #0
{
 800a734:	4605      	mov	r5, r0
 800a736:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800a738:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800a73c:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 800a740:	2f00      	cmp	r7, #0
 800a742:	d06a      	beq.n	800a81a <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a744:	780a      	ldrb	r2, [r1, #0]
 800a746:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 800a74a:	d02b      	beq.n	800a7a4 <USBD_CDC_Setup+0x7c>
 800a74c:	2c20      	cmp	r4, #32
 800a74e:	d160      	bne.n	800a812 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 800a750:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a752:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 800a754:	b1fc      	cbz	r4, 800a796 <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 800a756:	0612      	lsls	r2, r2, #24
 800a758:	d514      	bpl.n	800a784 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a75a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a75e:	4639      	mov	r1, r7
 800a760:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800a764:	4618      	mov	r0, r3
 800a766:	4622      	mov	r2, r4
 800a768:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a76a:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a76c:	2a07      	cmp	r2, #7
 800a76e:	bf28      	it	cs
 800a770:	2207      	movcs	r2, #7
 800a772:	4639      	mov	r1, r7
 800a774:	4628      	mov	r0, r5
 800a776:	f000 fc91 	bl	800b09c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a77a:	4644      	mov	r4, r8
}
 800a77c:	4620      	mov	r0, r4
 800a77e:	b003      	add	sp, #12
 800a780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800a784:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a788:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a78c:	4622      	mov	r2, r4
 800a78e:	4639      	mov	r1, r7
 800a790:	f000 fc99 	bl	800b0c6 <USBD_CtlPrepareRx>
 800a794:	e7f1      	b.n	800a77a <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a796:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a79a:	4618      	mov	r0, r3
 800a79c:	6895      	ldr	r5, [r2, #8]
 800a79e:	4622      	mov	r2, r4
 800a7a0:	47a8      	blx	r5
 800a7a2:	e7eb      	b.n	800a77c <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 800a7a4:	784f      	ldrb	r7, [r1, #1]
 800a7a6:	2f0b      	cmp	r7, #11
 800a7a8:	d833      	bhi.n	800a812 <USBD_CDC_Setup+0xea>
 800a7aa:	a301      	add	r3, pc, #4	; (adr r3, 800a7b0 <USBD_CDC_Setup+0x88>)
 800a7ac:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800a7b0:	0800a7e1 	.word	0x0800a7e1
 800a7b4:	0800a77d 	.word	0x0800a77d
 800a7b8:	0800a813 	.word	0x0800a813
 800a7bc:	0800a813 	.word	0x0800a813
 800a7c0:	0800a813 	.word	0x0800a813
 800a7c4:	0800a813 	.word	0x0800a813
 800a7c8:	0800a813 	.word	0x0800a813
 800a7cc:	0800a813 	.word	0x0800a813
 800a7d0:	0800a813 	.word	0x0800a813
 800a7d4:	0800a813 	.word	0x0800a813
 800a7d8:	0800a7f7 	.word	0x0800a7f7
 800a7dc:	0800a80b 	.word	0x0800a80b
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d114      	bne.n	800a812 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	f10d 0106 	add.w	r1, sp, #6
 800a7ee:	f000 fc55 	bl	800b09c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f2:	463c      	mov	r4, r7
 800a7f4:	e7c2      	b.n	800a77c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d109      	bne.n	800a812 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7fe:	2201      	movs	r2, #1
 800a800:	f10d 0105 	add.w	r1, sp, #5
 800a804:	f000 fc4a 	bl	800b09c <USBD_CtlSendData>
 800a808:	e7b8      	b.n	800a77c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a80a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d0b4      	beq.n	800a77c <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 800a812:	4631      	mov	r1, r6
 800a814:	4628      	mov	r0, r5
 800a816:	f000 fc1a 	bl	800b04e <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800a81a:	2403      	movs	r4, #3
 800a81c:	e7ae      	b.n	800a77c <USBD_CDC_Setup+0x54>
 800a81e:	bf00      	nop

0800a820 <USBD_CDC_DeInit>:
{
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a824:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a826:	2181      	movs	r1, #129	; 0x81
 800a828:	f000 ff27 	bl	800b67a <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a82c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a82e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a830:	4620      	mov	r0, r4
 800a832:	f000 ff22 	bl	800b67a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a836:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a83a:	2182      	movs	r1, #130	; 0x82
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 ff1c 	bl	800b67a <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a842:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a846:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800a848:	b14b      	cbz	r3, 800a85e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a84a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a852:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a856:	f000 ff85 	bl	800b764 <USBD_static_free>
    pdev->pClassData = NULL;
 800a85a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a85e:	2000      	movs	r0, #0
 800a860:	bd38      	pop	{r3, r4, r5, pc}

0800a862 <USBD_CDC_Init>:
{
 800a862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a864:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a866:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a86a:	f000 ff77 	bl	800b75c <USBD_static_malloc>
  if (hcdc == NULL)
 800a86e:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 800a870:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800a874:	b910      	cbnz	r0, 800a87c <USBD_CDC_Init+0x1a>
    return (uint8_t)USBD_EMEM;
 800a876:	2602      	movs	r6, #2
}
 800a878:	4630      	mov	r0, r6
 800a87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87c:	7c23      	ldrb	r3, [r4, #16]
 800a87e:	bb8b      	cbnz	r3, 800a8e4 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a884:	2202      	movs	r2, #2
 800a886:	2181      	movs	r1, #129	; 0x81
 800a888:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a88a:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a88c:	f000 fee9 	bl	800b662 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a890:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a892:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a896:	4631      	mov	r1, r6
 800a898:	2202      	movs	r2, #2
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fee1 	bl	800b662 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a8a0:	2310      	movs	r3, #16
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8a2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a8a6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	2182      	movs	r1, #130	; 0x82
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fed6 	bl	800b662 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a8b6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800a8c0:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4798      	blx	r3
  hcdc->TxState = 0U;
 800a8c6:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800a8ca:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ce:	7c26      	ldrb	r6, [r4, #16]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	b98e      	cbnz	r6, 800a8f8 <USBD_CDC_Init+0x96>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800a8d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 ff0c 	bl	800b6fa <USBD_LL_PrepareReceive>
 800a8e2:	e7c9      	b.n	800a878 <USBD_CDC_Init+0x16>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8e4:	2340      	movs	r3, #64	; 0x40
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	2181      	movs	r1, #129	; 0x81
 800a8ea:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8ec:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8ee:	f000 feb8 	bl	800b662 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8f2:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	e7ce      	b.n	800a896 <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8f8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 fefb 	bl	800b6fa <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a904:	463e      	mov	r6, r7
 800a906:	e7b7      	b.n	800a878 <USBD_CDC_Init+0x16>

0800a908 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a908:	b119      	cbz	r1, 800a912 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a90a:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a90e:	2000      	movs	r0, #0
 800a910:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a912:	2003      	movs	r0, #3
}
 800a914:	4770      	bx	lr

0800a916 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a916:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a91a:	b12b      	cbz	r3, 800a928 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800a91c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a920:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a924:	2000      	movs	r0, #0
 800a926:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a928:	2003      	movs	r0, #3
}
 800a92a:	4770      	bx	lr

0800a92c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a92c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a930:	b11b      	cbz	r3, 800a93a <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800a932:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a936:	2000      	movs	r0, #0
 800a938:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a93a:	2003      	movs	r0, #3
}
 800a93c:	4770      	bx	lr

0800a93e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a93e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800a942:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800a944:	b17a      	cbz	r2, 800a966 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800a946:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800a94a:	2301      	movs	r3, #1
 800a94c:	b96c      	cbnz	r4, 800a96a <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a94e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a952:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800a956:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a958:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800a95c:	2181      	movs	r1, #129	; 0x81
 800a95e:	f000 fec3 	bl	800b6e8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a962:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800a964:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800a966:	2003      	movs	r0, #3
 800a968:	e7fc      	b.n	800a964 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a96a:	4618      	mov	r0, r3
 800a96c:	e7fa      	b.n	800a964 <USBD_CDC_TransmitPacket+0x26>

0800a96e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a96e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800a972:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800a974:	b182      	cbz	r2, 800a998 <USBD_CDC_ReceivePacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a976:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a978:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a97c:	b934      	cbnz	r4, 800a98c <USBD_CDC_ReceivePacket+0x1e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a97e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a982:	2101      	movs	r1, #1
 800a984:	f000 feb9 	bl	800b6fa <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800a988:	4620      	mov	r0, r4
 800a98a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	2101      	movs	r1, #1
 800a990:	f000 feb3 	bl	800b6fa <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a994:	2400      	movs	r4, #0
 800a996:	e7f7      	b.n	800a988 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800a998:	2403      	movs	r4, #3
 800a99a:	e7f5      	b.n	800a988 <USBD_CDC_ReceivePacket+0x1a>

0800a99c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a99c:	b178      	cbz	r0, 800a9be <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a9a4:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a9a8:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9ac:	b109      	cbz	r1, 800a9b2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800a9ae:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800a9b8:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9ba:	f000 be05 	b.w	800b5c8 <USBD_LL_Init>

  return ret;
}
 800a9be:	2003      	movs	r0, #3
 800a9c0:	4770      	bx	lr

0800a9c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800a9c4:	2500      	movs	r5, #0
{
 800a9c6:	4604      	mov	r4, r0
  uint16_t len = 0U;
 800a9c8:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 800a9cc:	b159      	cbz	r1, 800a9e6 <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a9ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 800a9d0:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a9d4:	b14b      	cbz	r3, 800a9ea <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a9d6:	f10d 0006 	add.w	r0, sp, #6
 800a9da:	4798      	blx	r3
 800a9dc:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a9e0:	4628      	mov	r0, r5
}
 800a9e2:	b003      	add	sp, #12
 800a9e4:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800a9e6:	2003      	movs	r0, #3
 800a9e8:	e7fb      	b.n	800a9e2 <USBD_RegisterClass+0x20>
  return USBD_OK;
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	e7f9      	b.n	800a9e2 <USBD_RegisterClass+0x20>

0800a9ee <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a9ee:	f000 be2f 	b.w	800b650 <USBD_LL_Start>

0800a9f2 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a9f2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a9f6:	b10b      	cbz	r3, 800a9fc <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4718      	bx	r3
  }

  return ret;
}
 800a9fc:	2003      	movs	r0, #3
 800a9fe:	4770      	bx	lr

0800aa00 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa00:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aa06:	b10b      	cbz	r3, 800aa0c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	bd08      	pop	{r3, pc}

0800aa10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa14:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 fb0d 	bl	800b038 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa1e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800aa20:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800aa24:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800aa28:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800aa2c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800aa30:	f001 031f 	and.w	r3, r1, #31
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d008      	beq.n	800aa4a <USBD_LL_SetupStage+0x3a>
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d00c      	beq.n	800aa56 <USBD_LL_SetupStage+0x46>
 800aa3c:	b98b      	cbnz	r3, 800aa62 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800aa42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa46:	f000 b8f5 	b.w	800ac34 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4620      	mov	r0, r4
}
 800aa4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa52:	f000 ba3b 	b.w	800aecc <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa56:	4629      	mov	r1, r5
 800aa58:	4620      	mov	r0, r4
}
 800aa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa5e:	f000 ba5b 	b.w	800af18 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa62:	4620      	mov	r0, r4
 800aa64:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800aa68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa6c:	f000 be0e 	b.w	800b68c <USBD_LL_StallEP>

0800aa70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	4604      	mov	r4, r0
 800aa74:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa76:	b9f9      	cbnz	r1, 800aab8 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa78:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d10c      	bne.n	800aa9a <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa80:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d90a      	bls.n	800aa9e <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800aa88:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa8a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800aa8c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa90:	bf28      	it	cs
 800aa92:	461a      	movcs	r2, r3
 800aa94:	4629      	mov	r1, r5
 800aa96:	f000 fb23 	bl	800b0e0 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d104      	bne.n	800aab0 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 800aaa6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	b103      	cbz	r3, 800aab0 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 800aaae:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fb1d 	bl	800b0f0 <USBD_CtlSendStatus>
 800aab6:	e7f0      	b.n	800aa9a <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d1ec      	bne.n	800aa9a <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 800aac0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0e7      	beq.n	800aa9a <USBD_LL_DataOutStage+0x2a>
}
 800aaca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aace:	4718      	bx	r3

0800aad0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aad2:	4604      	mov	r4, r0
 800aad4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aad6:	2900      	cmp	r1, #0
 800aad8:	d13f      	bne.n	800ab5a <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aada:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800aade:	2a02      	cmp	r2, #2
 800aae0:	d10f      	bne.n	800ab02 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 800aae2:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 800aae6:	4295      	cmp	r5, r2
 800aae8:	d915      	bls.n	800ab16 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800aaea:	1aaa      	subs	r2, r5, r2
 800aaec:	9101      	str	r1, [sp, #4]
 800aaee:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	f000 fae0 	bl	800b0b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaf6:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4619      	mov	r1, r3
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fdfc 	bl	800b6fa <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab02:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d102      	bne.n	800ab10 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800ab10:	2000      	movs	r0, #0
 800ab12:	b002      	add	sp, #8
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800ab16:	d10e      	bne.n	800ab36 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800ab18:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab1a:	4295      	cmp	r5, r2
 800ab1c:	d80b      	bhi.n	800ab36 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800ab1e:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800ab22:	42aa      	cmp	r2, r5
 800ab24:	d207      	bcs.n	800ab36 <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab26:	460a      	mov	r2, r1
 800ab28:	9101      	str	r1, [sp, #4]
 800ab2a:	f000 fac4 	bl	800b0b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800ab34:	e7e0      	b.n	800aaf8 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab36:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d105      	bne.n	800ab4a <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 800ab3e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	b10b      	cbz	r3, 800ab4a <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 800ab46:	4620      	mov	r0, r4
 800ab48:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab4a:	2180      	movs	r1, #128	; 0x80
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fd9d 	bl	800b68c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fad7 	bl	800b106 <USBD_CtlReceiveStatus>
 800ab58:	e7d3      	b.n	800ab02 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d1d6      	bne.n	800ab10 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 800ab62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0d1      	beq.n	800ab10 <USBD_LL_DataInStage+0x40>
}
 800ab6c:	b002      	add	sp, #8
 800ab6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab72:	4718      	bx	r3

0800ab74 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab74:	2301      	movs	r3, #1
{
 800ab76:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab78:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800ab7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab80:	2100      	movs	r1, #0
{
 800ab82:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab84:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab88:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab8a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800ab8e:	b1db      	cbz	r3, 800abc8 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800ab90:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800ab94:	b112      	cbz	r2, 800ab9c <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	b103      	cbz	r3, 800ab9c <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab9a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aba0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aba2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aba4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fd5b 	bl	800b662 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abac:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abb0:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abb4:	462b      	mov	r3, r5
 800abb6:	2200      	movs	r2, #0
 800abb8:	2180      	movs	r1, #128	; 0x80
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 fd51 	bl	800b662 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abc0:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abc2:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800abc4:	2000      	movs	r0, #0
}
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800abc8:	2003      	movs	r0, #3
 800abca:	e7fc      	b.n	800abc6 <USBD_LL_Reset+0x52>

0800abcc <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800abcc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800abce:	2000      	movs	r0, #0
 800abd0:	4770      	bx	lr

0800abd2 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800abd2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800abdc:	2304      	movs	r3, #4
 800abde:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800abe2:	2000      	movs	r0, #0
 800abe4:	4770      	bx	lr

0800abe6 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abe6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800abea:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800abec:	bf02      	ittt	eq
 800abee:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800abf2:	b2db      	uxtbeq	r3, r3
 800abf4:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr

0800abfc <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800abfc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800ac00:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800ac02:	b142      	cbz	r2, 800ac16 <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d102      	bne.n	800ac12 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 800ac0c:	69d3      	ldr	r3, [r2, #28]
 800ac0e:	b123      	cbz	r3, 800ac1a <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 800ac10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac12:	2000      	movs	r0, #0
 800ac14:	e000      	b.n	800ac18 <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 800ac16:	2003      	movs	r0, #3
}
 800ac18:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	e7fc      	b.n	800ac18 <USBD_LL_SOF+0x1c>

0800ac1e <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800ac1e:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac20:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800ac22:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac24:	f000 fd32 	bl	800b68c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac28:	4620      	mov	r0, r4
 800ac2a:	2100      	movs	r1, #0
}
 800ac2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac30:	f000 bd2c 	b.w	800b68c <USBD_LL_StallEP>

0800ac34 <USBD_StdDevReq>:
{
 800ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac36:	780d      	ldrb	r5, [r1, #0]
 800ac38:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3c:	2d20      	cmp	r5, #32
{
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac42:	d014      	beq.n	800ac6e <USBD_StdDevReq+0x3a>
 800ac44:	2d40      	cmp	r5, #64	; 0x40
 800ac46:	d012      	beq.n	800ac6e <USBD_StdDevReq+0x3a>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	f040 8109 	bne.w	800ae60 <USBD_StdDevReq+0x22c>
      switch (req->bRequest)
 800ac4e:	784f      	ldrb	r7, [r1, #1]
 800ac50:	2f09      	cmp	r7, #9
 800ac52:	f200 8105 	bhi.w	800ae60 <USBD_StdDevReq+0x22c>
 800ac56:	e8df f017 	tbh	[pc, r7, lsl #1]
 800ac5a:	010a      	.short	0x010a
 800ac5c:	0103012c 	.word	0x0103012c
 800ac60:	01030122 	.word	0x01030122
 800ac64:	0013008a 	.word	0x0013008a
 800ac68:	00f20103 	.word	0x00f20103
 800ac6c:	00a6      	.short	0x00a6
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac6e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	4631      	mov	r1, r6
 800ac76:	4620      	mov	r0, r4
}
 800ac78:	b003      	add	sp, #12
 800ac7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac7e:	4718      	bx	r3
  uint16_t len = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800ac86:	884b      	ldrh	r3, [r1, #2]
 800ac88:	0a1a      	lsrs	r2, r3, #8
 800ac8a:	3a01      	subs	r2, #1
 800ac8c:	2a0e      	cmp	r2, #14
 800ac8e:	d80d      	bhi.n	800acac <USBD_StdDevReq+0x78>
 800ac90:	e8df f002 	tbb	[pc, r2]
 800ac94:	0c382b12 	.word	0x0c382b12
 800ac98:	0c62580c 	.word	0x0c62580c
 800ac9c:	0c0c0c0c 	.word	0x0c0c0c0c
 800aca0:	0c0c      	.short	0x0c0c
 800aca2:	08          	.byte	0x08
 800aca3:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aca4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800aca8:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acaa:	b943      	cbnz	r3, 800acbe <USBD_StdDevReq+0x8a>
      USBD_CtlError(pdev, req);
 800acac:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 800acae:	f7ff ffb6 	bl	800ac1e <USBD_CtlError.constprop.0>
}
 800acb2:	4628      	mov	r0, r5
 800acb4:	b003      	add	sp, #12
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acb8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	7c20      	ldrb	r0, [r4, #16]
 800acc0:	f10d 0106 	add.w	r1, sp, #6
 800acc4:	4798      	blx	r3
  if (req->wLength != 0U)
 800acc6:	88f2      	ldrh	r2, [r6, #6]
 800acc8:	2a00      	cmp	r2, #0
 800acca:	f000 80ee 	beq.w	800aeaa <USBD_StdDevReq+0x276>
    if (len != 0U)
 800acce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0ea      	beq.n	800acac <USBD_StdDevReq+0x78>
      len = MIN(len, req->wLength);
 800acd6:	429a      	cmp	r2, r3
 800acd8:	bf28      	it	cs
 800acda:	461a      	movcs	r2, r3
 800acdc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ace0:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f9da 	bl	800b09c <USBD_CtlSendData>
        break;
 800ace8:	e7e3      	b.n	800acb2 <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acea:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf0:	b932      	cbnz	r2, 800ad00 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800acf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acf4:	f10d 0006 	add.w	r0, sp, #6
 800acf8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acfa:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acfc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800acfe:	e7e2      	b.n	800acc6 <USBD_StdDevReq+0x92>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	e7f7      	b.n	800acf4 <USBD_StdDevReq+0xc0>
      switch ((uint8_t)(req->wValue))
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b05      	cmp	r3, #5
 800ad08:	d8d0      	bhi.n	800acac <USBD_StdDevReq+0x78>
 800ad0a:	e8df f003 	tbb	[pc, r3]
 800ad0e:	0703      	.short	0x0703
 800ad10:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	e7c6      	b.n	800acaa <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad1c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	e7c2      	b.n	800acaa <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	e7be      	b.n	800acaa <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	e7ba      	b.n	800acaa <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	e7b6      	b.n	800acaa <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	e7b2      	b.n	800acaa <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad44:	7c03      	ldrb	r3, [r0, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1b0      	bne.n	800acac <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad4e:	f10d 0006 	add.w	r0, sp, #6
 800ad52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad54:	4798      	blx	r3
  if (err != 0U)
 800ad56:	e7b6      	b.n	800acc6 <USBD_StdDevReq+0x92>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad58:	7c03      	ldrb	r3, [r0, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1a6      	bne.n	800acac <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad5e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad62:	f10d 0006 	add.w	r0, sp, #6
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad6a:	2307      	movs	r3, #7
 800ad6c:	e7c6      	b.n	800acfc <USBD_StdDevReq+0xc8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad6e:	888b      	ldrh	r3, [r1, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d19b      	bne.n	800acac <USBD_StdDevReq+0x78>
 800ad74:	88cb      	ldrh	r3, [r1, #6]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d198      	bne.n	800acac <USBD_StdDevReq+0x78>
 800ad7a:	884e      	ldrh	r6, [r1, #2]
 800ad7c:	2e7f      	cmp	r6, #127	; 0x7f
 800ad7e:	d895      	bhi.n	800acac <USBD_StdDevReq+0x78>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad80:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d091      	beq.n	800acac <USBD_StdDevReq+0x78>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad88:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800ad8a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad8e:	f000 fca2 	bl	800b6d6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 f9ac 	bl	800b0f0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800ad98:	b11e      	cbz	r6, 800ada2 <USBD_StdDevReq+0x16e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9a:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad9c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ada0:	e787      	b.n	800acb2 <USBD_StdDevReq+0x7e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7fa      	b.n	800ad9c <USBD_StdDevReq+0x168>
  cfgidx = (uint8_t)(req->wValue);
 800ada6:	788e      	ldrb	r6, [r1, #2]
 800ada8:	4f47      	ldr	r7, [pc, #284]	; (800aec8 <USBD_StdDevReq+0x294>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adaa:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800adac:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adae:	d903      	bls.n	800adb8 <USBD_StdDevReq+0x184>
    USBD_CtlError(pdev, req);
 800adb0:	f7ff ff35 	bl	800ac1e <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 800adb4:	2503      	movs	r5, #3
      break;
 800adb6:	e77c      	b.n	800acb2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800adb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	d008      	beq.n	800add4 <USBD_StdDevReq+0x1a0>
 800adc2:	2a03      	cmp	r2, #3
 800adc4:	d015      	beq.n	800adf2 <USBD_StdDevReq+0x1be>
      USBD_CtlError(pdev, req);
 800adc6:	f7ff ff2a 	bl	800ac1e <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adca:	7839      	ldrb	r1, [r7, #0]
 800adcc:	4620      	mov	r0, r4
 800adce:	f7ff fe17 	bl	800aa00 <USBD_ClrClassConfig>
 800add2:	e7ef      	b.n	800adb4 <USBD_StdDevReq+0x180>
      if (cfgidx != 0U)
 800add4:	2e00      	cmp	r6, #0
 800add6:	d068      	beq.n	800aeaa <USBD_StdDevReq+0x276>
        pdev->dev_config = cfgidx;
 800add8:	2101      	movs	r1, #1
 800adda:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800addc:	f7ff fe09 	bl	800a9f2 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ade0:	4605      	mov	r5, r0
 800ade2:	4620      	mov	r0, r4
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	f47f af62 	bne.w	800acae <USBD_StdDevReq+0x7a>
          (void)USBD_CtlSendStatus(pdev);
 800adea:	f000 f981 	bl	800b0f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adee:	2303      	movs	r3, #3
 800adf0:	e7d4      	b.n	800ad9c <USBD_StdDevReq+0x168>
      if (cfgidx == 0U)
 800adf2:	b95e      	cbnz	r6, 800ae0c <USBD_StdDevReq+0x1d8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf4:	2302      	movs	r3, #2
 800adf6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800adfa:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adfc:	4631      	mov	r1, r6
 800adfe:	f7ff fdff 	bl	800aa00 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f974 	bl	800b0f0 <USBD_CtlSendStatus>
 800ae08:	4635      	mov	r5, r6
 800ae0a:	e752      	b.n	800acb2 <USBD_StdDevReq+0x7e>
      else if (cfgidx != pdev->dev_config)
 800ae0c:	6841      	ldr	r1, [r0, #4]
 800ae0e:	2901      	cmp	r1, #1
 800ae10:	d04b      	beq.n	800aeaa <USBD_StdDevReq+0x276>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae12:	b2c9      	uxtb	r1, r1
 800ae14:	f7ff fdf4 	bl	800aa00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae18:	7839      	ldrb	r1, [r7, #0]
 800ae1a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7ff fde8 	bl	800a9f2 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ae22:	4606      	mov	r6, r0
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d040      	beq.n	800aeaa <USBD_StdDevReq+0x276>
          USBD_CtlError(pdev, req);
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f7ff fef8 	bl	800ac1e <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae2e:	7921      	ldrb	r1, [r4, #4]
 800ae30:	4620      	mov	r0, r4
 800ae32:	f7ff fde5 	bl	800aa00 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae36:	2302      	movs	r3, #2
 800ae38:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ae3c:	e7e4      	b.n	800ae08 <USBD_StdDevReq+0x1d4>
  if (req->wLength != 1U)
 800ae3e:	88ca      	ldrh	r2, [r1, #6]
 800ae40:	2a01      	cmp	r2, #1
 800ae42:	f47f af33 	bne.w	800acac <USBD_StdDevReq+0x78>
    switch (pdev->dev_state)
 800ae46:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800ae4a:	2902      	cmp	r1, #2
 800ae4c:	b2cb      	uxtb	r3, r1
 800ae4e:	d805      	bhi.n	800ae5c <USBD_StdDevReq+0x228>
 800ae50:	b133      	cbz	r3, 800ae60 <USBD_StdDevReq+0x22c>
        pdev->dev_default_config = 0U;
 800ae52:	4601      	mov	r1, r0
 800ae54:	2300      	movs	r3, #0
 800ae56:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae5a:	e742      	b.n	800ace2 <USBD_StdDevReq+0xae>
    switch (pdev->dev_state)
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d004      	beq.n	800ae6a <USBD_StdDevReq+0x236>
        USBD_CtlError(pdev, req);
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fedc 	bl	800ac1e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae66:	2500      	movs	r5, #0
        break;
 800ae68:	e723      	b.n	800acb2 <USBD_StdDevReq+0x7e>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae6a:	1d01      	adds	r1, r0, #4
 800ae6c:	e739      	b.n	800ace2 <USBD_StdDevReq+0xae>
  switch (pdev->dev_state)
 800ae6e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ae72:	3b01      	subs	r3, #1
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d8f3      	bhi.n	800ae60 <USBD_StdDevReq+0x22c>
      if (req->wLength != 0x2U)
 800ae78:	88cb      	ldrh	r3, [r1, #6]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	f47f af16 	bne.w	800acac <USBD_StdDevReq+0x78>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae80:	2301      	movs	r3, #1
 800ae82:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ae84:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800ae88:	b10b      	cbz	r3, 800ae8e <USBD_StdDevReq+0x25a>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f104 010c 	add.w	r1, r4, #12
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 f901 	bl	800b09c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae9a:	463d      	mov	r5, r7
      break;
 800ae9c:	e709      	b.n	800acb2 <USBD_StdDevReq+0x7e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae9e:	884b      	ldrh	r3, [r1, #2]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	f47f af06 	bne.w	800acb2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 800aea6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 f920 	bl	800b0f0 <USBD_CtlSendStatus>
 800aeb0:	e6ff      	b.n	800acb2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800aeb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d8d1      	bhi.n	800ae60 <USBD_StdDevReq+0x22c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aebc:	884b      	ldrh	r3, [r1, #2]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	f47f aef7 	bne.w	800acb2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e7ee      	b.n	800aea6 <USBD_StdDevReq+0x272>
 800aec8:	20000ffc 	.word	0x20000ffc

0800aecc <USBD_StdItfReq>:
{
 800aecc:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aece:	780b      	ldrb	r3, [r1, #0]
 800aed0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800aed4:	2a40      	cmp	r2, #64	; 0x40
{
 800aed6:	4604      	mov	r4, r0
 800aed8:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeda:	d001      	beq.n	800aee0 <USBD_StdItfReq+0x14>
 800aedc:	065b      	lsls	r3, r3, #25
 800aede:	d416      	bmi.n	800af0e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 800aee0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800aee4:	3b01      	subs	r3, #1
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d811      	bhi.n	800af0e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aeea:	7933      	ldrb	r3, [r6, #4]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d80e      	bhi.n	800af0e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aef0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800aef4:	4631      	mov	r1, r6
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	4620      	mov	r0, r4
 800aefa:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aefc:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aefe:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af00:	b91b      	cbnz	r3, 800af0a <USBD_StdItfReq+0x3e>
 800af02:	b910      	cbnz	r0, 800af0a <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 800af04:	4620      	mov	r0, r4
 800af06:	f000 f8f3 	bl	800b0f0 <USBD_CtlSendStatus>
}
 800af0a:	4628      	mov	r0, r5
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 800af0e:	4620      	mov	r0, r4
 800af10:	f7ff fe85 	bl	800ac1e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800af14:	2500      	movs	r5, #0
          break;
 800af16:	e7f8      	b.n	800af0a <USBD_StdItfReq+0x3e>

0800af18 <USBD_StdEPReq>:
{
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	780b      	ldrb	r3, [r1, #0]
 800af1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af20:	2b20      	cmp	r3, #32
{
 800af22:	4604      	mov	r4, r0
 800af24:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af26:	d053      	beq.n	800afd0 <USBD_StdEPReq+0xb8>
 800af28:	2b40      	cmp	r3, #64	; 0x40
 800af2a:	d051      	beq.n	800afd0 <USBD_StdEPReq+0xb8>
 800af2c:	bb73      	cbnz	r3, 800af8c <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 800af2e:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800af30:	888a      	ldrh	r2, [r1, #4]
 800af32:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800af34:	2b01      	cmp	r3, #1
 800af36:	d03a      	beq.n	800afae <USBD_StdEPReq+0x96>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d020      	beq.n	800af7e <USBD_StdEPReq+0x66>
 800af3c:	bb33      	cbnz	r3, 800af8c <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 800af3e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af42:	2b02      	cmp	r3, #2
 800af44:	b2d8      	uxtb	r0, r3
 800af46:	d054      	beq.n	800aff2 <USBD_StdEPReq+0xda>
 800af48:	2803      	cmp	r0, #3
 800af4a:	d11f      	bne.n	800af8c <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af4c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800af50:	f012 0f80 	tst.w	r2, #128	; 0x80
 800af54:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af58:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 800af5c:	d058      	beq.n	800b010 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af60:	b1a3      	cbz	r3, 800af8c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af62:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800af66:	3501      	adds	r5, #1
 800af68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800af6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af70:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800af74:	d158      	bne.n	800b028 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 800af76:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af78:	2202      	movs	r2, #2
 800af7a:	4629      	mov	r1, r5
 800af7c:	e044      	b.n	800b008 <USBD_StdEPReq+0xf0>
          switch (pdev->dev_state)
 800af7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af82:	2b02      	cmp	r3, #2
 800af84:	b2da      	uxtb	r2, r3
 800af86:	d02b      	beq.n	800afe0 <USBD_StdEPReq+0xc8>
 800af88:	2a03      	cmp	r2, #3
 800af8a:	d003      	beq.n	800af94 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7ff fe46 	bl	800ac1e <USBD_CtlError.constprop.0>
              break;
 800af92:	e00a      	b.n	800afaa <USBD_StdEPReq+0x92>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af94:	886b      	ldrh	r3, [r5, #2]
 800af96:	b92b      	cbnz	r3, 800afa4 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af98:	064a      	lsls	r2, r1, #25
 800af9a:	d003      	beq.n	800afa4 <USBD_StdEPReq+0x8c>
 800af9c:	88eb      	ldrh	r3, [r5, #6]
 800af9e:	b90b      	cbnz	r3, 800afa4 <USBD_StdEPReq+0x8c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa0:	f000 fb74 	bl	800b68c <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 800afa4:	4620      	mov	r0, r4
 800afa6:	f000 f8a3 	bl	800b0f0 <USBD_CtlSendStatus>
}
 800afaa:	2000      	movs	r0, #0
 800afac:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800afae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	d013      	beq.n	800afe0 <USBD_StdEPReq+0xc8>
 800afb8:	2a03      	cmp	r2, #3
 800afba:	d1e7      	bne.n	800af8c <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afbc:	886b      	ldrh	r3, [r5, #2]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1f3      	bne.n	800afaa <USBD_StdEPReq+0x92>
                if ((ep_addr & 0x7FU) != 0x00U)
 800afc2:	064e      	lsls	r6, r1, #25
 800afc4:	d001      	beq.n	800afca <USBD_StdEPReq+0xb2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afc6:	f000 fb6a 	bl	800b69e <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f890 	bl	800b0f0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afd0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	689b      	ldr	r3, [r3, #8]
}
 800afda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afde:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe0:	064b      	lsls	r3, r1, #25
 800afe2:	d0d3      	beq.n	800af8c <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afe4:	f000 fb52 	bl	800b68c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afe8:	2180      	movs	r1, #128	; 0x80
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fb4e 	bl	800b68c <USBD_LL_StallEP>
 800aff0:	e7db      	b.n	800afaa <USBD_StdEPReq+0x92>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff2:	0649      	lsls	r1, r1, #25
 800aff4:	d1ca      	bne.n	800af8c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff6:	0613      	lsls	r3, r2, #24
 800aff8:	bf4c      	ite	mi
 800affa:	f104 0114 	addmi.w	r1, r4, #20
 800affe:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800b002:	2300      	movs	r3, #0
 800b004:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b006:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 f847 	bl	800b09c <USBD_CtlSendData>
              break;
 800b00e:	e7cc      	b.n	800afaa <USBD_StdEPReq+0x92>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b010:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0b9      	beq.n	800af8c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b018:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800b01c:	2314      	movs	r3, #20
 800b01e:	fb03 4505 	mla	r5, r3, r5, r4
 800b022:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800b026:	e7a3      	b.n	800af70 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fb41 	bl	800b6b0 <USBD_LL_IsStallEP>
 800b02e:	b108      	cbz	r0, 800b034 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800b030:	2301      	movs	r3, #1
 800b032:	e7a0      	b.n	800af76 <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 800b034:	6028      	str	r0, [r5, #0]
 800b036:	e79f      	b.n	800af78 <USBD_StdEPReq+0x60>

0800b038 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800b038:	780b      	ldrb	r3, [r1, #0]
 800b03a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800b03c:	784b      	ldrb	r3, [r1, #1]
 800b03e:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800b040:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800b042:	8043      	strh	r3, [r0, #2]
 800b044:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800b046:	8083      	strh	r3, [r0, #4]
 800b048:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800b04a:	80c3      	strh	r3, [r0, #6]
}
 800b04c:	4770      	bx	lr

0800b04e <USBD_CtlError>:
{
 800b04e:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b050:	2180      	movs	r1, #128	; 0x80
{
 800b052:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b054:	f000 fb1a 	bl	800b68c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b058:	4620      	mov	r0, r4
 800b05a:	2100      	movs	r1, #0
}
 800b05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800b060:	f000 bb14 	b.w	800b68c <USBD_LL_StallEP>

0800b064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b064:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800b066:	b188      	cbz	r0, 800b08c <USBD_GetString+0x28>
 800b068:	2400      	movs	r4, #0
 800b06a:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800b06c:	4623      	mov	r3, r4
 800b06e:	3401      	adds	r4, #1
 800b070:	5d05      	ldrb	r5, [r0, r4]
 800b072:	2d00      	cmp	r5, #0
 800b074:	d1fa      	bne.n	800b06c <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b076:	b2db      	uxtb	r3, r3
 800b078:	3301      	adds	r3, #1
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800b07e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b080:	2303      	movs	r3, #3
 800b082:	704b      	strb	r3, [r1, #1]
  idx++;
 800b084:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800b086:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b08a:	b902      	cbnz	r2, 800b08e <USBD_GetString+0x2a>
}
 800b08c:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800b08e:	54ca      	strb	r2, [r1, r3]
    idx++;
 800b090:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800b092:	b2d2      	uxtb	r2, r2
    idx++;
 800b094:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800b096:	548d      	strb	r5, [r1, r2]
    idx++;
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	e7f4      	b.n	800b086 <USBD_GetString+0x22>

0800b09c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b09c:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b09e:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0a0:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 800b0a2:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0a6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0aa:	460a      	mov	r2, r1
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	f000 fb1b 	bl	800b6e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bd10      	pop	{r4, pc}

0800b0b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0b6:	b508      	push	{r3, lr}
 800b0b8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	2100      	movs	r1, #0
 800b0be:	f000 fb13 	bl	800b6e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	bd08      	pop	{r3, pc}

0800b0c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0c6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0c8:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0ca:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 800b0cc:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0d0:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0d4:	460a      	mov	r2, r1
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f000 fb0f 	bl	800b6fa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b0dc:	2000      	movs	r0, #0
 800b0de:	bd10      	pop	{r4, pc}

0800b0e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0e0:	b508      	push	{r3, lr}
 800b0e2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0e4:	460a      	mov	r2, r1
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	f000 fb07 	bl	800b6fa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	bd08      	pop	{r3, pc}

0800b0f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0f2:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0f4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	f000 faf3 	bl	800b6e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800b102:	2000      	movs	r0, #0
 800b104:	bd08      	pop	{r3, pc}

0800b106 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b106:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b108:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b10a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b10c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b110:	4619      	mov	r1, r3
 800b112:	461a      	mov	r2, r3
 800b114:	f000 faf1 	bl	800b6fa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b118:	2000      	movs	r0, #0
 800b11a:	bd08      	pop	{r3, pc}

0800b11c <PIDControllerInit>:
#include "pid_controller.h"

void PIDControllerInit(PIDController *pid) {

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800b11c:	2300      	movs	r3, #0
 800b11e:	6283      	str	r3, [r0, #40]	; 0x28
	pid->prevError = 0.0f;
 800b120:	62c3      	str	r3, [r0, #44]	; 0x2c

	pid->differentiator = 0.0f;
 800b122:	6303      	str	r3, [r0, #48]	; 0x30
	pid->prevMeasurement = 0.0f;
 800b124:	6343      	str	r3, [r0, #52]	; 0x34

	pid->out = 0.0f;
 800b126:	6403      	str	r3, [r0, #64]	; 0x40

}
 800b128:	4770      	bx	lr

0800b12a <PIDControllerUpdate>:

float PIDControllerUpdate(PIDController *pid) {
 800b12a:	b510      	push	{r4, lr}
	//Accuracy of the position. Devides the 4096 int from adc to smaller value to have less noise
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800b12c:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
float PIDControllerUpdate(PIDController *pid) {
 800b130:	ed2d 8b02 	vpush	{d8}
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800b134:	edd0 8a09 	vldr	s17, [r0, #36]	; 0x24
 800b138:	ee80 0a28 	vdiv.f32	s0, s0, s17
float PIDControllerUpdate(PIDController *pid) {
 800b13c:	4604      	mov	r4, r0
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800b13e:	f000 fb13 	bl	800b768 <truncf>
 800b142:	eeb0 8a40 	vmov.f32	s16, s0
 800b146:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
	pid->measurement = truncf(pid->measurement / pid->accuracy);
 800b14a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800b14e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800b152:	f000 fb09 	bl	800b768 <truncf>

	/*
	 * Integral
	 */
	pid->integrator = pid->integrator
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800b156:	edd4 5a01 	vldr	s11, [r4, #4]
 800b15a:	ed94 6a08 	vldr	s12, [r4, #32]
 800b15e:	ed94 5a0b 	vldr	s10, [r4, #44]	; 0x2c
	float proportional = pid->Kp * error;
 800b162:	edd4 7a00 	vldr	s15, [r4]
	pid->measurement = truncf(pid->measurement / pid->accuracy);
 800b166:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800b16a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	float error = pid->setPoint - pid->measurement;
 800b16e:	ee38 7a40 	vsub.f32	s14, s16, s0
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800b172:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800b176:	ee37 5a05 	vadd.f32	s10, s14, s10
 800b17a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800b17e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800b182:	eee5 6a85 	vfma.f32	s13, s11, s10

	/* Anti-wind-up via integrator clamping */
	if (pid->integrator > pid->limMaxInt) {
 800b186:	edd4 5a07 	vldr	s11, [r4, #28]
	pid->integrator = pid->integrator
 800b18a:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
	if (pid->integrator > pid->limMaxInt) {
 800b18e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float proportional = pid->Kp * error;
 800b196:	ee67 7a27 	vmul.f32	s15, s14, s15
	if (pid->integrator > pid->limMaxInt) {
 800b19a:	dd02      	ble.n	800b1a2 <PIDControllerUpdate+0x78>

		pid->integrator = pid->limMaxInt;

	} else if (pid->integrator < pid->limMinInt) {

		pid->integrator = pid->limMinInt;
 800b19c:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
 800b1a0:	e006      	b.n	800b1b0 <PIDControllerUpdate+0x86>
	} else if (pid->integrator < pid->limMinInt) {
 800b1a2:	edd4 5a06 	vldr	s11, [r4, #24]
 800b1a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	d4f5      	bmi.n	800b19c <PIDControllerUpdate+0x72>
	 * Derivative (band-limited differentiator)
	 */

	pid->differentiator = -(2.0f * pid->Kd
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800b1b0:	ed94 4a03 	vldr	s8, [r4, #12]
 800b1b4:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 800b1b8:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34
	pid->differentiator = -(2.0f * pid->Kd
 800b1bc:	edd4 5a02 	vldr	s11, [r4, #8]
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800b1c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1c4:	eef0 6a46 	vmov.f32	s13, s12
 800b1c8:	eed4 6a24 	vfnms.f32	s13, s8, s9
	pid->differentiator = -(2.0f * pid->Kd
 800b1cc:	ee75 5aa5 	vadd.f32	s11, s11, s11
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 800b1d0:	ee30 5a45 	vsub.f32	s10, s0, s10
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800b1d4:	ee66 6aa3 	vmul.f32	s13, s13, s7
			/ (2.0f * pid->tau + pid->T);
 800b1d8:	eea4 6a24 	vfma.f32	s12, s8, s9
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800b1dc:	eee5 6a85 	vfma.f32	s13, s11, s10
	pid->differentiator = -(2.0f * pid->Kd
 800b1e0:	eef1 6a66 	vneg.f32	s13, s13
			/ (2.0f * pid->tau + pid->T);
 800b1e4:	eec6 5a86 	vdiv.f32	s11, s13, s12

	/*
	 * Compute output and apply limits
	 */
	pid->out = proportional + pid->integrator + pid->differentiator;
 800b1e8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
	pid->differentiator = -(2.0f * pid->Kd
 800b1ec:	edc4 5a0c 	vstr	s11, [r4, #48]	; 0x30
	pid->out = proportional + pid->integrator + pid->differentiator;
 800b1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13

	if (pid->out > pid->limMax) {
 800b1f4:	edd4 6a05 	vldr	s13, [r4, #20]
	pid->out = proportional + pid->integrator + pid->differentiator;
 800b1f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
	if (pid->out > pid->limMax) {
 800b1fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->out = proportional + pid->integrator + pid->differentiator;
 800b204:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	if (pid->out > pid->limMax) {
 800b208:	dd02      	ble.n	800b210 <PIDControllerUpdate+0xe6>

		pid->out = pid->limMax;

	} else if (pid->out < pid->limMin) {

		pid->out = pid->limMin;
 800b20a:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
 800b20e:	e006      	b.n	800b21e <PIDControllerUpdate+0xf4>
	} else if (pid->out < pid->limMin) {
 800b210:	edd4 6a04 	vldr	s13, [r4, #16]
 800b214:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21c:	d4f5      	bmi.n	800b20a <PIDControllerUpdate+0xe0>
	pid->prevMeasurement = pid->measurement;

	/* Return controller output */
	return pid->out;

}
 800b21e:	ecbd 8b02 	vpop	{d8}
	pid->prevMeasurement = pid->measurement;
 800b222:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
	pid->prevError = error;
 800b226:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
 800b22a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 800b22e:	bd10      	pop	{r4, pc}

0800b230 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b232:	490f      	ldr	r1, [pc, #60]	; (800b270 <MX_USB_Device_Init+0x40>)
 800b234:	480f      	ldr	r0, [pc, #60]	; (800b274 <MX_USB_Device_Init+0x44>)
 800b236:	2200      	movs	r2, #0
 800b238:	f7ff fbb0 	bl	800a99c <USBD_Init>
 800b23c:	b108      	cbz	r0, 800b242 <MX_USB_Device_Init+0x12>
    Error_Handler();
 800b23e:	f7f8 fff7 	bl	8004230 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b242:	490d      	ldr	r1, [pc, #52]	; (800b278 <MX_USB_Device_Init+0x48>)
 800b244:	480b      	ldr	r0, [pc, #44]	; (800b274 <MX_USB_Device_Init+0x44>)
 800b246:	f7ff fbbc 	bl	800a9c2 <USBD_RegisterClass>
 800b24a:	b108      	cbz	r0, 800b250 <MX_USB_Device_Init+0x20>
    Error_Handler();
 800b24c:	f7f8 fff0 	bl	8004230 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b250:	490a      	ldr	r1, [pc, #40]	; (800b27c <MX_USB_Device_Init+0x4c>)
 800b252:	4808      	ldr	r0, [pc, #32]	; (800b274 <MX_USB_Device_Init+0x44>)
 800b254:	f7ff fb58 	bl	800a908 <USBD_CDC_RegisterInterface>
 800b258:	b108      	cbz	r0, 800b25e <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800b25a:	f7f8 ffe9 	bl	8004230 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b25e:	4805      	ldr	r0, [pc, #20]	; (800b274 <MX_USB_Device_Init+0x44>)
 800b260:	f7ff fbc5 	bl	800a9ee <USBD_Start>
 800b264:	b118      	cbz	r0, 800b26e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b26a:	f7f8 bfe1 	b.w	8004230 <Error_Handler>
}
 800b26e:	bd08      	pop	{r3, pc}
 800b270:	20000130 	.word	0x20000130
 800b274:	20001000 	.word	0x20001000
 800b278:	2000000c 	.word	0x2000000c
 800b27c:	2000011c 	.word	0x2000011c

0800b280 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 800b280:	2000      	movs	r0, #0
 800b282:	4770      	bx	lr

0800b284 <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b284:	2000      	movs	r0, #0
 800b286:	4770      	bx	lr

0800b288 <CDC_Receive_FS>:
{
 800b288:	b573      	push	{r0, r1, r4, r5, r6, lr}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b28a:	4e0e      	ldr	r6, [pc, #56]	; (800b2c4 <CDC_Receive_FS+0x3c>)
{
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b290:	4601      	mov	r1, r0
 800b292:	4630      	mov	r0, r6
 800b294:	f7ff fb4a 	bl	800a92c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff fb68 	bl	800a96e <USBD_CDC_ReceivePacket>
	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 800b29e:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <CDC_Receive_FS+0x40>)
 800b2a0:	2240      	movs	r2, #64	; 0x40
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	f000 fad1 	bl	800b84c <memset>
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 800b2aa:	782a      	ldrb	r2, [r5, #0]
 800b2ac:	9201      	str	r2, [sp, #4]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	f000 fabe 	bl	800b830 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800b2b4:	9a01      	ldr	r2, [sp, #4]
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fac7 	bl	800b84c <memset>
}
 800b2be:	2000      	movs	r0, #0
 800b2c0:	b002      	add	sp, #8
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	20001000 	.word	0x20001000
 800b2c8:	200022d0 	.word	0x200022d0

0800b2cc <CDC_Init_FS>:
{
 800b2cc:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2ce:	4c06      	ldr	r4, [pc, #24]	; (800b2e8 <CDC_Init_FS+0x1c>)
 800b2d0:	4906      	ldr	r1, [pc, #24]	; (800b2ec <CDC_Init_FS+0x20>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f7ff fb1e 	bl	800a916 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2da:	4905      	ldr	r1, [pc, #20]	; (800b2f0 <CDC_Init_FS+0x24>)
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f7ff fb25 	bl	800a92c <USBD_CDC_SetRxBuffer>
}
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	bd10      	pop	{r4, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20001000 	.word	0x20001000
 800b2ec:	20001ad0 	.word	0x20001ad0
 800b2f0:	200012d0 	.word	0x200012d0

0800b2f4 <CDC_Control_FS>:
	switch (cmd) {
 800b2f4:	2822      	cmp	r0, #34	; 0x22
 800b2f6:	d106      	bne.n	800b306 <CDC_Control_FS+0x12>
		if (req->wValue & 0x0001 != 0)
 800b2f8:	884b      	ldrh	r3, [r1, #2]
 800b2fa:	4a04      	ldr	r2, [pc, #16]	; (800b30c <CDC_Control_FS+0x18>)
 800b2fc:	f013 0301 	ands.w	r3, r3, #1
			host_com_port_open = 1;
 800b300:	bf18      	it	ne
 800b302:	2301      	movne	r3, #1
			host_com_port_open = 0;
 800b304:	7013      	strb	r3, [r2, #0]
}
 800b306:	2000      	movs	r0, #0
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20002310 	.word	0x20002310

0800b310 <CDC_Transmit_FS>:
{
 800b310:	b510      	push	{r4, lr}
 800b312:	460a      	mov	r2, r1
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 800b314:	490d      	ldr	r1, [pc, #52]	; (800b34c <CDC_Transmit_FS+0x3c>)
{
 800b316:	4603      	mov	r3, r0
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 800b318:	7808      	ldrb	r0, [r1, #0]
 800b31a:	b198      	cbz	r0, 800b344 <CDC_Transmit_FS+0x34>
 800b31c:	4c0c      	ldr	r4, [pc, #48]	; (800b350 <CDC_Transmit_FS+0x40>)
 800b31e:	f894 129c 	ldrb.w	r1, [r4, #668]	; 0x29c
 800b322:	2903      	cmp	r1, #3
 800b324:	d10d      	bne.n	800b342 <CDC_Transmit_FS+0x32>
		USBD_CDC_HandleTypeDef *hcdc =
 800b326:	f8d4 12bc 	ldr.w	r1, [r4, #700]	; 0x2bc
		if (hcdc->TxState != 0) {
 800b32a:	f8d1 1214 	ldr.w	r1, [r1, #532]	; 0x214
 800b32e:	b951      	cbnz	r1, 800b346 <CDC_Transmit_FS+0x36>
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b330:	4620      	mov	r0, r4
 800b332:	4619      	mov	r1, r3
 800b334:	f7ff faef 	bl	800a916 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b338:	4620      	mov	r0, r4
}
 800b33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b33e:	f7ff bafe 	b.w	800a93e <USBD_CDC_TransmitPacket>
  uint8_t result = USBD_OK;
 800b342:	2000      	movs	r0, #0
}
 800b344:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
 800b346:	2001      	movs	r0, #1
 800b348:	e7fc      	b.n	800b344 <CDC_Transmit_FS+0x34>
 800b34a:	bf00      	nop
 800b34c:	20002310 	.word	0x20002310
 800b350:	20001000 	.word	0x20001000

0800b354 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b354:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800b356:	4801      	ldr	r0, [pc, #4]	; (800b35c <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b358:	800b      	strh	r3, [r1, #0]
}
 800b35a:	4770      	bx	lr
 800b35c:	20000150 	.word	0x20000150

0800b360 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b360:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800b362:	4801      	ldr	r0, [pc, #4]	; (800b368 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800b364:	800b      	strh	r3, [r1, #0]
}
 800b366:	4770      	bx	lr
 800b368:	20000164 	.word	0x20000164

0800b36c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b36c:	2300      	movs	r3, #0
 800b36e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b370:	1c4d      	adds	r5, r1, #1
 800b372:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 800b374:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800b376:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800b37a:	bf34      	ite	cc
 800b37c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b37e:	3437      	addcs	r4, #55	; 0x37
 800b380:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800b384:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800b388:	3301      	adds	r3, #1
 800b38a:	b2dc      	uxtb	r4, r3
 800b38c:	42a2      	cmp	r2, r4
    value = value << 4;
 800b38e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800b392:	d8ef      	bhi.n	800b374 <IntToUnicode+0x8>
  }
}
 800b394:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b398 <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b398:	231a      	movs	r3, #26
{
 800b39a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b39c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b39e:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <USBD_CDC_SerialStrDescriptor+0x30>)
 800b3a0:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial0 += deviceserial2;
 800b3a4:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800b3a8:	1880      	adds	r0, r0, r2
 800b3aa:	d00a      	beq.n	800b3c2 <USBD_CDC_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3ac:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3b0:	4906      	ldr	r1, [pc, #24]	; (800b3cc <USBD_CDC_SerialStrDescriptor+0x34>)
 800b3b2:	2208      	movs	r2, #8
 800b3b4:	f7ff ffda 	bl	800b36c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	3110      	adds	r1, #16
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f7ff ffd5 	bl	800b36c <IntToUnicode>
}
 800b3c2:	4803      	ldr	r0, [pc, #12]	; (800b3d0 <USBD_CDC_SerialStrDescriptor+0x38>)
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	1fff7000 	.word	0x1fff7000
 800b3cc:	2000016a 	.word	0x2000016a
 800b3d0:	20000168 	.word	0x20000168

0800b3d4 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800b3d4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3d6:	4c04      	ldr	r4, [pc, #16]	; (800b3e8 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800b3d8:	4804      	ldr	r0, [pc, #16]	; (800b3ec <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 800b3da:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7ff fe41 	bl	800b064 <USBD_GetString>
}
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20002314 	.word	0x20002314
 800b3ec:	0800f540 	.word	0x0800f540

0800b3f0 <USBD_CDC_ProductStrDescriptor>:
{
 800b3f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b3f2:	4c04      	ldr	r4, [pc, #16]	; (800b404 <USBD_CDC_ProductStrDescriptor+0x14>)
 800b3f4:	4804      	ldr	r0, [pc, #16]	; (800b408 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 800b3f6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	f7ff fe33 	bl	800b064 <USBD_GetString>
}
 800b3fe:	4620      	mov	r0, r4
 800b400:	bd10      	pop	{r4, pc}
 800b402:	bf00      	nop
 800b404:	20002314 	.word	0x20002314
 800b408:	0800f553 	.word	0x0800f553

0800b40c <USBD_CDC_ConfigStrDescriptor>:
{
 800b40c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b40e:	4c04      	ldr	r4, [pc, #16]	; (800b420 <USBD_CDC_ConfigStrDescriptor+0x14>)
 800b410:	4804      	ldr	r0, [pc, #16]	; (800b424 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 800b412:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b414:	4621      	mov	r1, r4
 800b416:	f7ff fe25 	bl	800b064 <USBD_GetString>
}
 800b41a:	4620      	mov	r0, r4
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	bf00      	nop
 800b420:	20002314 	.word	0x20002314
 800b424:	0800f569 	.word	0x0800f569

0800b428 <USBD_CDC_InterfaceStrDescriptor>:
{
 800b428:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b42a:	4c04      	ldr	r4, [pc, #16]	; (800b43c <USBD_CDC_InterfaceStrDescriptor+0x14>)
 800b42c:	4804      	ldr	r0, [pc, #16]	; (800b440 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800b42e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b430:	4621      	mov	r1, r4
 800b432:	f7ff fe17 	bl	800b064 <USBD_GetString>
}
 800b436:	4620      	mov	r0, r4
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	20002314 	.word	0x20002314
 800b440:	0800f574 	.word	0x0800f574

0800b444 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b444:	2803      	cmp	r0, #3
 800b446:	bf9a      	itte	ls
 800b448:	4b01      	ldrls	r3, [pc, #4]	; (800b450 <USBD_Get_USB_Status+0xc>)
 800b44a:	5c18      	ldrbls	r0, [r3, r0]
{
 800b44c:	2003      	movhi	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b44e:	4770      	bx	lr
 800b450:	0800f582 	.word	0x0800f582

0800b454 <SystemClockConfig_Resume>:
{
 800b454:	b500      	push	{lr}
 800b456:	b095      	sub	sp, #84	; 0x54
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b458:	2238      	movs	r2, #56	; 0x38
 800b45a:	2100      	movs	r1, #0
 800b45c:	a806      	add	r0, sp, #24
 800b45e:	f000 f9f5 	bl	800b84c <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b462:	2214      	movs	r2, #20
 800b464:	2100      	movs	r1, #0
 800b466:	a801      	add	r0, sp, #4
 800b468:	f000 f9f0 	bl	800b84c <memset>
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b46c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b470:	f7fc fab8 	bl	80079e4 <HAL_PWREx_ControlVoltageScaling>
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800b474:	2322      	movs	r3, #34	; 0x22
 800b476:	9306      	str	r3, [sp, #24]
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b47c:	2340      	movs	r3, #64	; 0x40
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b47e:	2201      	movs	r2, #1
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b480:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b484:	2302      	movs	r3, #2
 800b486:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800b48a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b48e:	a806      	add	r0, sp, #24
		  RCC_OscInitStruct.PLL.PLLN = 16;
 800b490:	2210      	movs	r2, #16
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b492:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b496:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b49a:	f7fc fafd 	bl	8007a98 <HAL_RCC_OscConfig>
 800b49e:	b108      	cbz	r0, 800b4a4 <SystemClockConfig_Resume+0x50>
		    Error_Handler();
 800b4a0:	f7f8 fec6 	bl	8004230 <Error_Handler>
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b4a4:	230f      	movs	r3, #15
 800b4a6:	2103      	movs	r1, #3
 800b4a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b4ac:	a801      	add	r0, sp, #4
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b4ae:	2300      	movs	r3, #0
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b4b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b4b4:	9305      	str	r3, [sp, #20]
		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b4b6:	f7fc fd35 	bl	8007f24 <HAL_RCC_ClockConfig>
 800b4ba:	b108      	cbz	r0, 800b4c0 <SystemClockConfig_Resume+0x6c>
		    Error_Handler();
 800b4bc:	f7f8 feb8 	bl	8004230 <Error_Handler>
}
 800b4c0:	b015      	add	sp, #84	; 0x54
 800b4c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b4c8 <HAL_PCD_MspInit>:
{
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b4ce:	2254      	movs	r2, #84	; 0x54
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	a801      	add	r0, sp, #4
 800b4d4:	f000 f9ba 	bl	800b84c <memset>
  if(pcdHandle->Instance==USB)
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	4b10      	ldr	r3, [pc, #64]	; (800b51c <HAL_PCD_MspInit+0x54>)
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d11a      	bne.n	800b516 <HAL_PCD_MspInit+0x4e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b4e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b4e4:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b4e6:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b4e8:	f7fc fe3a 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 800b4ec:	b108      	cbz	r0, 800b4f2 <HAL_PCD_MspInit+0x2a>
      Error_Handler();
 800b4ee:	f7f8 fe9f 	bl	8004230 <Error_Handler>
    __HAL_RCC_USB_CLK_ENABLE();
 800b4f2:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <HAL_PCD_MspInit+0x58>)
 800b4f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b4fa:	659a      	str	r2, [r3, #88]	; 0x58
 800b4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b4fe:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800b500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b504:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b506:	2014      	movs	r0, #20
 800b508:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800b50a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b50c:	f7fa fe00 	bl	8006110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b510:	2014      	movs	r0, #20
 800b512:	f7fa fe2f 	bl	8006174 <HAL_NVIC_EnableIRQ>
}
 800b516:	b016      	add	sp, #88	; 0x58
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	bf00      	nop
 800b51c:	40005c00 	.word	0x40005c00
 800b520:	40021000 	.word	0x40021000

0800b524 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b524:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800b528:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b52c:	f7ff ba70 	b.w	800aa10 <USBD_LL_SetupStage>

0800b530 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b530:	2328      	movs	r3, #40	; 0x28
 800b532:	fb03 0301 	mla	r3, r3, r1, r0
 800b536:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b53a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b53e:	f7ff ba97 	b.w	800aa70 <USBD_LL_DataOutStage>

0800b542 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b542:	2328      	movs	r3, #40	; 0x28
 800b544:	fb03 0301 	mla	r3, r3, r1, r0
 800b548:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b54c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b54e:	f7ff babf 	b.w	800aad0 <USBD_LL_DataInStage>

0800b552 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b552:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b556:	f7ff bb51 	b.w	800abfc <USBD_LL_SOF>

0800b55a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b55a:	6883      	ldr	r3, [r0, #8]
 800b55c:	2b02      	cmp	r3, #2
{
 800b55e:	b510      	push	{r4, lr}
 800b560:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b562:	d001      	beq.n	800b568 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800b564:	f7f8 fe64 	bl	8004230 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b568:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b56c:	2101      	movs	r1, #1
 800b56e:	f7ff fb2d 	bl	800abcc <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b572:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b57a:	f7ff bafb 	b.w	800ab74 <USBD_LL_Reset>
	...

0800b580 <HAL_PCD_SuspendCallback>:
{
 800b580:	b510      	push	{r4, lr}
 800b582:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b584:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b588:	f7ff fb23 	bl	800abd2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800b58c:	69a3      	ldr	r3, [r4, #24]
 800b58e:	b123      	cbz	r3, 800b59a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b590:	4a02      	ldr	r2, [pc, #8]	; (800b59c <HAL_PCD_SuspendCallback+0x1c>)
 800b592:	6913      	ldr	r3, [r2, #16]
 800b594:	f043 0306 	orr.w	r3, r3, #6
 800b598:	6113      	str	r3, [r2, #16]
}
 800b59a:	bd10      	pop	{r4, pc}
 800b59c:	e000ed00 	.word	0xe000ed00

0800b5a0 <HAL_PCD_ResumeCallback>:
  if (hpcd->Init.low_power_enable)
 800b5a0:	6983      	ldr	r3, [r0, #24]
{
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800b5a6:	b133      	cbz	r3, 800b5b6 <HAL_PCD_ResumeCallback+0x16>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5a8:	4a06      	ldr	r2, [pc, #24]	; (800b5c4 <HAL_PCD_ResumeCallback+0x24>)
 800b5aa:	6913      	ldr	r3, [r2, #16]
 800b5ac:	f023 0306 	bic.w	r3, r3, #6
 800b5b0:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5b2:	f7ff ff4f 	bl	800b454 <SystemClockConfig_Resume>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5b6:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5be:	f7ff bb12 	b.w	800abe6 <USBD_LL_Resume>
 800b5c2:	bf00      	nop
 800b5c4:	e000ed00 	.word	0xe000ed00

0800b5c8 <USBD_LL_Init>:
{
 800b5c8:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b5ca:	4a1f      	ldr	r2, [pc, #124]	; (800b648 <USBD_LL_Init+0x80>)
{
 800b5cc:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800b5ce:	481f      	ldr	r0, [pc, #124]	; (800b64c <USBD_LL_Init+0x84>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b5d6:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 800b5d8:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b5dc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5de:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 800b5e0:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b5e4:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b5e6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5ea:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b5ee:	f7fb fb4a 	bl	8006c86 <HAL_PCD_Init>
 800b5f2:	b108      	cbz	r0, 800b5f8 <USBD_LL_Init+0x30>
    Error_Handler( );
 800b5f4:	f7f8 fe1c 	bl	8004230 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b600:	2318      	movs	r3, #24
 800b602:	f7fc f9be 	bl	8007982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b606:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b60a:	2358      	movs	r3, #88	; 0x58
 800b60c:	2200      	movs	r2, #0
 800b60e:	2180      	movs	r1, #128	; 0x80
 800b610:	f7fc f9b7 	bl	8007982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b614:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b618:	23c0      	movs	r3, #192	; 0xc0
 800b61a:	2200      	movs	r2, #0
 800b61c:	2181      	movs	r1, #129	; 0x81
 800b61e:	f7fc f9b0 	bl	8007982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b622:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b626:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b62a:	2200      	movs	r2, #0
 800b62c:	2101      	movs	r1, #1
 800b62e:	f7fc f9a8 	bl	8007982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b632:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b63a:	2200      	movs	r2, #0
 800b63c:	2182      	movs	r1, #130	; 0x82
 800b63e:	f7fc f9a0 	bl	8007982 <HAL_PCDEx_PMAConfig>
}
 800b642:	2000      	movs	r0, #0
 800b644:	bd10      	pop	{r4, pc}
 800b646:	bf00      	nop
 800b648:	40005c00 	.word	0x40005c00
 800b64c:	20002514 	.word	0x20002514

0800b650 <USBD_LL_Start>:
{
 800b650:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b652:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b656:	f7fb fb74 	bl	8006d42 <HAL_PCD_Start>
}
 800b65a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65e:	f7ff bef1 	b.w	800b444 <USBD_Get_USB_Status>

0800b662 <USBD_LL_OpenEP>:
{
 800b662:	b510      	push	{r4, lr}
 800b664:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b666:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800b66a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b66c:	4623      	mov	r3, r4
 800b66e:	f7fc f87f 	bl	8007770 <HAL_PCD_EP_Open>
}
 800b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b676:	f7ff bee5 	b.w	800b444 <USBD_Get_USB_Status>

0800b67a <USBD_LL_CloseEP>:
{
 800b67a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b67c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b680:	f7fc f8ac 	bl	80077dc <HAL_PCD_EP_Close>
}
 800b684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b688:	f7ff bedc 	b.w	800b444 <USBD_Get_USB_Status>

0800b68c <USBD_LL_StallEP>:
{
 800b68c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b68e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b692:	f7fc f90e 	bl	80078b2 <HAL_PCD_EP_SetStall>
}
 800b696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b69a:	f7ff bed3 	b.w	800b444 <USBD_Get_USB_Status>

0800b69e <USBD_LL_ClearStallEP>:
{
 800b69e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6a4:	f7fc f937 	bl	8007916 <HAL_PCD_EP_ClrStall>
}
 800b6a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6ac:	f7ff beca 	b.w	800b444 <USBD_Get_USB_Status>

0800b6b0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b6b0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6b4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b6b8:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6bc:	bf1d      	ittte	ne
 800b6be:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b6c2:	fb01 2102 	mlane	r1, r1, r2, r2
 800b6c6:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6c8:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6cc:	bf14      	ite	ne
 800b6ce:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6d0:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800b6d4:	4770      	bx	lr

0800b6d6 <USBD_LL_SetUSBAddress>:
{
 800b6d6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6dc:	f7fb fb46 	bl	8006d6c <HAL_PCD_SetAddress>
}
 800b6e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e4:	f7ff beae 	b.w	800b444 <USBD_Get_USB_Status>

0800b6e8 <USBD_LL_Transmit>:
{
 800b6e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6ea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6ee:	f7fc f8c0 	bl	8007872 <HAL_PCD_EP_Transmit>
}
 800b6f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6f6:	f7ff bea5 	b.w	800b444 <USBD_Get_USB_Status>

0800b6fa <USBD_LL_PrepareReceive>:
{
 800b6fa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6fc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b700:	f7fc f899 	bl	8007836 <HAL_PCD_EP_Receive>
}
 800b704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b708:	f7ff be9c 	b.w	800b444 <USBD_Get_USB_Status>

0800b70c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b70c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b710:	f7fc b8a7 	b.w	8007862 <HAL_PCD_EP_GetRxCount>

0800b714 <HAL_PCDEx_LPM_Callback>:
{
 800b714:	b510      	push	{r4, lr}
 800b716:	4604      	mov	r4, r0
  switch (msg)
 800b718:	b111      	cbz	r1, 800b720 <HAL_PCDEx_LPM_Callback+0xc>
 800b71a:	2901      	cmp	r1, #1
 800b71c:	d00f      	beq.n	800b73e <HAL_PCDEx_LPM_Callback+0x2a>
}
 800b71e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800b720:	6983      	ldr	r3, [r0, #24]
 800b722:	b133      	cbz	r3, 800b732 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClockConfig_Resume();
 800b724:	f7ff fe96 	bl	800b454 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b728:	4a0b      	ldr	r2, [pc, #44]	; (800b758 <HAL_PCDEx_LPM_Callback+0x44>)
 800b72a:	6913      	ldr	r3, [r2, #16]
 800b72c:	f023 0306 	bic.w	r3, r3, #6
 800b730:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b732:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800b73a:	f7ff ba54 	b.w	800abe6 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 800b73e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b742:	f7ff fa46 	bl	800abd2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b746:	69a3      	ldr	r3, [r4, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0e8      	beq.n	800b71e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b74c:	4a02      	ldr	r2, [pc, #8]	; (800b758 <HAL_PCDEx_LPM_Callback+0x44>)
 800b74e:	6913      	ldr	r3, [r2, #16]
 800b750:	f043 0306 	orr.w	r3, r3, #6
 800b754:	6113      	str	r3, [r2, #16]
}
 800b756:	e7e2      	b.n	800b71e <HAL_PCDEx_LPM_Callback+0xa>
 800b758:	e000ed00 	.word	0xe000ed00

0800b75c <USBD_static_malloc>:
}
 800b75c:	4800      	ldr	r0, [pc, #0]	; (800b760 <USBD_static_malloc+0x4>)
 800b75e:	4770      	bx	lr
 800b760:	20002808 	.word	0x20002808

0800b764 <USBD_static_free>:
}
 800b764:	4770      	bx	lr
	...

0800b768 <truncf>:
 800b768:	ee10 1a10 	vmov	r1, s0
 800b76c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800b770:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b774:	2a16      	cmp	r2, #22
 800b776:	dc0a      	bgt.n	800b78e <truncf+0x26>
 800b778:	2a00      	cmp	r2, #0
 800b77a:	bfa5      	ittet	ge
 800b77c:	4b06      	ldrge	r3, [pc, #24]	; (800b798 <truncf+0x30>)
 800b77e:	4113      	asrge	r3, r2
 800b780:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 800b784:	ea21 0303 	bicge.w	r3, r1, r3
 800b788:	ee00 3a10 	vmov	s0, r3
 800b78c:	4770      	bx	lr
 800b78e:	2a80      	cmp	r2, #128	; 0x80
 800b790:	bf08      	it	eq
 800b792:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 800b796:	4770      	bx	lr
 800b798:	007fffff 	.word	0x007fffff

0800b79c <abort>:
 800b79c:	b508      	push	{r3, lr}
 800b79e:	2006      	movs	r0, #6
 800b7a0:	f000 fe6c 	bl	800c47c <raise>
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	f7f9 fa61 	bl	8004c6c <_exit>
	...

0800b7ac <__errno>:
 800b7ac:	4b01      	ldr	r3, [pc, #4]	; (800b7b4 <__errno+0x8>)
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	20000184 	.word	0x20000184

0800b7b8 <__libc_init_array>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	4d0d      	ldr	r5, [pc, #52]	; (800b7f0 <__libc_init_array+0x38>)
 800b7bc:	4c0d      	ldr	r4, [pc, #52]	; (800b7f4 <__libc_init_array+0x3c>)
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	d109      	bne.n	800b7dc <__libc_init_array+0x24>
 800b7c8:	4d0b      	ldr	r5, [pc, #44]	; (800b7f8 <__libc_init_array+0x40>)
 800b7ca:	4c0c      	ldr	r4, [pc, #48]	; (800b7fc <__libc_init_array+0x44>)
 800b7cc:	f002 fdce 	bl	800e36c <_init>
 800b7d0:	1b64      	subs	r4, r4, r5
 800b7d2:	10a4      	asrs	r4, r4, #2
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	d105      	bne.n	800b7e6 <__libc_init_array+0x2e>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e0:	4798      	blx	r3
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7ee      	b.n	800b7c4 <__libc_init_array+0xc>
 800b7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ea:	4798      	blx	r3
 800b7ec:	3601      	adds	r6, #1
 800b7ee:	e7f2      	b.n	800b7d6 <__libc_init_array+0x1e>
 800b7f0:	0800f96c 	.word	0x0800f96c
 800b7f4:	0800f96c 	.word	0x0800f96c
 800b7f8:	0800f96c 	.word	0x0800f96c
 800b7fc:	0800f970 	.word	0x0800f970

0800b800 <malloc>:
 800b800:	4b02      	ldr	r3, [pc, #8]	; (800b80c <malloc+0xc>)
 800b802:	4601      	mov	r1, r0
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	f000 b895 	b.w	800b934 <_malloc_r>
 800b80a:	bf00      	nop
 800b80c:	20000184 	.word	0x20000184

0800b810 <memcmp>:
 800b810:	b510      	push	{r4, lr}
 800b812:	3901      	subs	r1, #1
 800b814:	4402      	add	r2, r0
 800b816:	4290      	cmp	r0, r2
 800b818:	d101      	bne.n	800b81e <memcmp+0xe>
 800b81a:	2000      	movs	r0, #0
 800b81c:	e005      	b.n	800b82a <memcmp+0x1a>
 800b81e:	7803      	ldrb	r3, [r0, #0]
 800b820:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b824:	42a3      	cmp	r3, r4
 800b826:	d001      	beq.n	800b82c <memcmp+0x1c>
 800b828:	1b18      	subs	r0, r3, r4
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	3001      	adds	r0, #1
 800b82e:	e7f2      	b.n	800b816 <memcmp+0x6>

0800b830 <memcpy>:
 800b830:	440a      	add	r2, r1
 800b832:	4291      	cmp	r1, r2
 800b834:	f100 33ff 	add.w	r3, r0, #4294967295
 800b838:	d100      	bne.n	800b83c <memcpy+0xc>
 800b83a:	4770      	bx	lr
 800b83c:	b510      	push	{r4, lr}
 800b83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b846:	4291      	cmp	r1, r2
 800b848:	d1f9      	bne.n	800b83e <memcpy+0xe>
 800b84a:	bd10      	pop	{r4, pc}

0800b84c <memset>:
 800b84c:	4402      	add	r2, r0
 800b84e:	4603      	mov	r3, r0
 800b850:	4293      	cmp	r3, r2
 800b852:	d100      	bne.n	800b856 <memset+0xa>
 800b854:	4770      	bx	lr
 800b856:	f803 1b01 	strb.w	r1, [r3], #1
 800b85a:	e7f9      	b.n	800b850 <memset+0x4>

0800b85c <_free_r>:
 800b85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b85e:	2900      	cmp	r1, #0
 800b860:	d044      	beq.n	800b8ec <_free_r+0x90>
 800b862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b866:	9001      	str	r0, [sp, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f1a1 0404 	sub.w	r4, r1, #4
 800b86e:	bfb8      	it	lt
 800b870:	18e4      	addlt	r4, r4, r3
 800b872:	f001 ff7f 	bl	800d774 <__malloc_lock>
 800b876:	4a1e      	ldr	r2, [pc, #120]	; (800b8f0 <_free_r+0x94>)
 800b878:	9801      	ldr	r0, [sp, #4]
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	b933      	cbnz	r3, 800b88c <_free_r+0x30>
 800b87e:	6063      	str	r3, [r4, #4]
 800b880:	6014      	str	r4, [r2, #0]
 800b882:	b003      	add	sp, #12
 800b884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b888:	f001 bf7a 	b.w	800d780 <__malloc_unlock>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d908      	bls.n	800b8a2 <_free_r+0x46>
 800b890:	6825      	ldr	r5, [r4, #0]
 800b892:	1961      	adds	r1, r4, r5
 800b894:	428b      	cmp	r3, r1
 800b896:	bf01      	itttt	eq
 800b898:	6819      	ldreq	r1, [r3, #0]
 800b89a:	685b      	ldreq	r3, [r3, #4]
 800b89c:	1949      	addeq	r1, r1, r5
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	e7ed      	b.n	800b87e <_free_r+0x22>
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b10b      	cbz	r3, 800b8ac <_free_r+0x50>
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	d9fa      	bls.n	800b8a2 <_free_r+0x46>
 800b8ac:	6811      	ldr	r1, [r2, #0]
 800b8ae:	1855      	adds	r5, r2, r1
 800b8b0:	42a5      	cmp	r5, r4
 800b8b2:	d10b      	bne.n	800b8cc <_free_r+0x70>
 800b8b4:	6824      	ldr	r4, [r4, #0]
 800b8b6:	4421      	add	r1, r4
 800b8b8:	1854      	adds	r4, r2, r1
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	d1e0      	bne.n	800b882 <_free_r+0x26>
 800b8c0:	681c      	ldr	r4, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	6053      	str	r3, [r2, #4]
 800b8c6:	4421      	add	r1, r4
 800b8c8:	6011      	str	r1, [r2, #0]
 800b8ca:	e7da      	b.n	800b882 <_free_r+0x26>
 800b8cc:	d902      	bls.n	800b8d4 <_free_r+0x78>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	e7d6      	b.n	800b882 <_free_r+0x26>
 800b8d4:	6825      	ldr	r5, [r4, #0]
 800b8d6:	1961      	adds	r1, r4, r5
 800b8d8:	428b      	cmp	r3, r1
 800b8da:	bf04      	itt	eq
 800b8dc:	6819      	ldreq	r1, [r3, #0]
 800b8de:	685b      	ldreq	r3, [r3, #4]
 800b8e0:	6063      	str	r3, [r4, #4]
 800b8e2:	bf04      	itt	eq
 800b8e4:	1949      	addeq	r1, r1, r5
 800b8e6:	6021      	streq	r1, [r4, #0]
 800b8e8:	6054      	str	r4, [r2, #4]
 800b8ea:	e7ca      	b.n	800b882 <_free_r+0x26>
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bd30      	pop	{r4, r5, pc}
 800b8f0:	20002a28 	.word	0x20002a28

0800b8f4 <sbrk_aligned>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	4e0e      	ldr	r6, [pc, #56]	; (800b930 <sbrk_aligned+0x3c>)
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	6831      	ldr	r1, [r6, #0]
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	b911      	cbnz	r1, 800b906 <sbrk_aligned+0x12>
 800b900:	f000 fd84 	bl	800c40c <_sbrk_r>
 800b904:	6030      	str	r0, [r6, #0]
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 fd7f 	bl	800c40c <_sbrk_r>
 800b90e:	1c43      	adds	r3, r0, #1
 800b910:	d00a      	beq.n	800b928 <sbrk_aligned+0x34>
 800b912:	1cc4      	adds	r4, r0, #3
 800b914:	f024 0403 	bic.w	r4, r4, #3
 800b918:	42a0      	cmp	r0, r4
 800b91a:	d007      	beq.n	800b92c <sbrk_aligned+0x38>
 800b91c:	1a21      	subs	r1, r4, r0
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 fd74 	bl	800c40c <_sbrk_r>
 800b924:	3001      	adds	r0, #1
 800b926:	d101      	bne.n	800b92c <sbrk_aligned+0x38>
 800b928:	f04f 34ff 	mov.w	r4, #4294967295
 800b92c:	4620      	mov	r0, r4
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	20002a2c 	.word	0x20002a2c

0800b934 <_malloc_r>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	1ccd      	adds	r5, r1, #3
 800b93a:	f025 0503 	bic.w	r5, r5, #3
 800b93e:	3508      	adds	r5, #8
 800b940:	2d0c      	cmp	r5, #12
 800b942:	bf38      	it	cc
 800b944:	250c      	movcc	r5, #12
 800b946:	2d00      	cmp	r5, #0
 800b948:	4607      	mov	r7, r0
 800b94a:	db01      	blt.n	800b950 <_malloc_r+0x1c>
 800b94c:	42a9      	cmp	r1, r5
 800b94e:	d905      	bls.n	800b95c <_malloc_r+0x28>
 800b950:	230c      	movs	r3, #12
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	2600      	movs	r6, #0
 800b956:	4630      	mov	r0, r6
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95c:	4e2e      	ldr	r6, [pc, #184]	; (800ba18 <_malloc_r+0xe4>)
 800b95e:	f001 ff09 	bl	800d774 <__malloc_lock>
 800b962:	6833      	ldr	r3, [r6, #0]
 800b964:	461c      	mov	r4, r3
 800b966:	bb34      	cbnz	r4, 800b9b6 <_malloc_r+0x82>
 800b968:	4629      	mov	r1, r5
 800b96a:	4638      	mov	r0, r7
 800b96c:	f7ff ffc2 	bl	800b8f4 <sbrk_aligned>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	4604      	mov	r4, r0
 800b974:	d14d      	bne.n	800ba12 <_malloc_r+0xde>
 800b976:	6834      	ldr	r4, [r6, #0]
 800b978:	4626      	mov	r6, r4
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	d140      	bne.n	800ba00 <_malloc_r+0xcc>
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	4631      	mov	r1, r6
 800b982:	4638      	mov	r0, r7
 800b984:	eb04 0803 	add.w	r8, r4, r3
 800b988:	f000 fd40 	bl	800c40c <_sbrk_r>
 800b98c:	4580      	cmp	r8, r0
 800b98e:	d13a      	bne.n	800ba06 <_malloc_r+0xd2>
 800b990:	6821      	ldr	r1, [r4, #0]
 800b992:	3503      	adds	r5, #3
 800b994:	1a6d      	subs	r5, r5, r1
 800b996:	f025 0503 	bic.w	r5, r5, #3
 800b99a:	3508      	adds	r5, #8
 800b99c:	2d0c      	cmp	r5, #12
 800b99e:	bf38      	it	cc
 800b9a0:	250c      	movcc	r5, #12
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7ff ffa5 	bl	800b8f4 <sbrk_aligned>
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	d02b      	beq.n	800ba06 <_malloc_r+0xd2>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	442b      	add	r3, r5
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	e00e      	b.n	800b9d4 <_malloc_r+0xa0>
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	1b52      	subs	r2, r2, r5
 800b9ba:	d41e      	bmi.n	800b9fa <_malloc_r+0xc6>
 800b9bc:	2a0b      	cmp	r2, #11
 800b9be:	d916      	bls.n	800b9ee <_malloc_r+0xba>
 800b9c0:	1961      	adds	r1, r4, r5
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	6025      	str	r5, [r4, #0]
 800b9c6:	bf18      	it	ne
 800b9c8:	6059      	strne	r1, [r3, #4]
 800b9ca:	6863      	ldr	r3, [r4, #4]
 800b9cc:	bf08      	it	eq
 800b9ce:	6031      	streq	r1, [r6, #0]
 800b9d0:	5162      	str	r2, [r4, r5]
 800b9d2:	604b      	str	r3, [r1, #4]
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f104 060b 	add.w	r6, r4, #11
 800b9da:	f001 fed1 	bl	800d780 <__malloc_unlock>
 800b9de:	f026 0607 	bic.w	r6, r6, #7
 800b9e2:	1d23      	adds	r3, r4, #4
 800b9e4:	1af2      	subs	r2, r6, r3
 800b9e6:	d0b6      	beq.n	800b956 <_malloc_r+0x22>
 800b9e8:	1b9b      	subs	r3, r3, r6
 800b9ea:	50a3      	str	r3, [r4, r2]
 800b9ec:	e7b3      	b.n	800b956 <_malloc_r+0x22>
 800b9ee:	6862      	ldr	r2, [r4, #4]
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	bf0c      	ite	eq
 800b9f4:	6032      	streq	r2, [r6, #0]
 800b9f6:	605a      	strne	r2, [r3, #4]
 800b9f8:	e7ec      	b.n	800b9d4 <_malloc_r+0xa0>
 800b9fa:	4623      	mov	r3, r4
 800b9fc:	6864      	ldr	r4, [r4, #4]
 800b9fe:	e7b2      	b.n	800b966 <_malloc_r+0x32>
 800ba00:	4634      	mov	r4, r6
 800ba02:	6876      	ldr	r6, [r6, #4]
 800ba04:	e7b9      	b.n	800b97a <_malloc_r+0x46>
 800ba06:	230c      	movs	r3, #12
 800ba08:	603b      	str	r3, [r7, #0]
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f001 feb8 	bl	800d780 <__malloc_unlock>
 800ba10:	e7a1      	b.n	800b956 <_malloc_r+0x22>
 800ba12:	6025      	str	r5, [r4, #0]
 800ba14:	e7de      	b.n	800b9d4 <_malloc_r+0xa0>
 800ba16:	bf00      	nop
 800ba18:	20002a28 	.word	0x20002a28

0800ba1c <__cvt>:
 800ba1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	ec55 4b10 	vmov	r4, r5, d0
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	460e      	mov	r6, r1
 800ba28:	4619      	mov	r1, r3
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	bfbb      	ittet	lt
 800ba2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba32:	461d      	movlt	r5, r3
 800ba34:	2300      	movge	r3, #0
 800ba36:	232d      	movlt	r3, #45	; 0x2d
 800ba38:	700b      	strb	r3, [r1, #0]
 800ba3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba40:	4691      	mov	r9, r2
 800ba42:	f023 0820 	bic.w	r8, r3, #32
 800ba46:	bfbc      	itt	lt
 800ba48:	4622      	movlt	r2, r4
 800ba4a:	4614      	movlt	r4, r2
 800ba4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba50:	d005      	beq.n	800ba5e <__cvt+0x42>
 800ba52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba56:	d100      	bne.n	800ba5a <__cvt+0x3e>
 800ba58:	3601      	adds	r6, #1
 800ba5a:	2102      	movs	r1, #2
 800ba5c:	e000      	b.n	800ba60 <__cvt+0x44>
 800ba5e:	2103      	movs	r1, #3
 800ba60:	ab03      	add	r3, sp, #12
 800ba62:	9301      	str	r3, [sp, #4]
 800ba64:	ab02      	add	r3, sp, #8
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	ec45 4b10 	vmov	d0, r4, r5
 800ba6c:	4653      	mov	r3, sl
 800ba6e:	4632      	mov	r2, r6
 800ba70:	f000 fe6e 	bl	800c750 <_dtoa_r>
 800ba74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba78:	4607      	mov	r7, r0
 800ba7a:	d102      	bne.n	800ba82 <__cvt+0x66>
 800ba7c:	f019 0f01 	tst.w	r9, #1
 800ba80:	d022      	beq.n	800bac8 <__cvt+0xac>
 800ba82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba86:	eb07 0906 	add.w	r9, r7, r6
 800ba8a:	d110      	bne.n	800baae <__cvt+0x92>
 800ba8c:	783b      	ldrb	r3, [r7, #0]
 800ba8e:	2b30      	cmp	r3, #48	; 0x30
 800ba90:	d10a      	bne.n	800baa8 <__cvt+0x8c>
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f5 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 800ba9e:	b918      	cbnz	r0, 800baa8 <__cvt+0x8c>
 800baa0:	f1c6 0601 	rsb	r6, r6, #1
 800baa4:	f8ca 6000 	str.w	r6, [sl]
 800baa8:	f8da 3000 	ldr.w	r3, [sl]
 800baac:	4499      	add	r9, r3
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	4620      	mov	r0, r4
 800bab4:	4629      	mov	r1, r5
 800bab6:	f7f5 f82f 	bl	8000b18 <__aeabi_dcmpeq>
 800baba:	b108      	cbz	r0, 800bac0 <__cvt+0xa4>
 800babc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bac0:	2230      	movs	r2, #48	; 0x30
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	454b      	cmp	r3, r9
 800bac6:	d307      	bcc.n	800bad8 <__cvt+0xbc>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bacc:	1bdb      	subs	r3, r3, r7
 800bace:	4638      	mov	r0, r7
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	b004      	add	sp, #16
 800bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad8:	1c59      	adds	r1, r3, #1
 800bada:	9103      	str	r1, [sp, #12]
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	e7f0      	b.n	800bac2 <__cvt+0xa6>

0800bae0 <__exponent>:
 800bae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bae2:	4603      	mov	r3, r0
 800bae4:	2900      	cmp	r1, #0
 800bae6:	bfb8      	it	lt
 800bae8:	4249      	neglt	r1, r1
 800baea:	f803 2b02 	strb.w	r2, [r3], #2
 800baee:	bfb4      	ite	lt
 800baf0:	222d      	movlt	r2, #45	; 0x2d
 800baf2:	222b      	movge	r2, #43	; 0x2b
 800baf4:	2909      	cmp	r1, #9
 800baf6:	7042      	strb	r2, [r0, #1]
 800baf8:	dd2a      	ble.n	800bb50 <__exponent+0x70>
 800bafa:	f10d 0407 	add.w	r4, sp, #7
 800bafe:	46a4      	mov	ip, r4
 800bb00:	270a      	movs	r7, #10
 800bb02:	46a6      	mov	lr, r4
 800bb04:	460a      	mov	r2, r1
 800bb06:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb0a:	fb07 1516 	mls	r5, r7, r6, r1
 800bb0e:	3530      	adds	r5, #48	; 0x30
 800bb10:	2a63      	cmp	r2, #99	; 0x63
 800bb12:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	dcf1      	bgt.n	800bb02 <__exponent+0x22>
 800bb1e:	3130      	adds	r1, #48	; 0x30
 800bb20:	f1ae 0502 	sub.w	r5, lr, #2
 800bb24:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb28:	1c44      	adds	r4, r0, #1
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	4561      	cmp	r1, ip
 800bb2e:	d30a      	bcc.n	800bb46 <__exponent+0x66>
 800bb30:	f10d 0209 	add.w	r2, sp, #9
 800bb34:	eba2 020e 	sub.w	r2, r2, lr
 800bb38:	4565      	cmp	r5, ip
 800bb3a:	bf88      	it	hi
 800bb3c:	2200      	movhi	r2, #0
 800bb3e:	4413      	add	r3, r2
 800bb40:	1a18      	subs	r0, r3, r0
 800bb42:	b003      	add	sp, #12
 800bb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb4e:	e7ed      	b.n	800bb2c <__exponent+0x4c>
 800bb50:	2330      	movs	r3, #48	; 0x30
 800bb52:	3130      	adds	r1, #48	; 0x30
 800bb54:	7083      	strb	r3, [r0, #2]
 800bb56:	70c1      	strb	r1, [r0, #3]
 800bb58:	1d03      	adds	r3, r0, #4
 800bb5a:	e7f1      	b.n	800bb40 <__exponent+0x60>

0800bb5c <_printf_float>:
 800bb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	ed2d 8b02 	vpush	{d8}
 800bb64:	b08d      	sub	sp, #52	; 0x34
 800bb66:	460c      	mov	r4, r1
 800bb68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb6c:	4616      	mov	r6, r2
 800bb6e:	461f      	mov	r7, r3
 800bb70:	4605      	mov	r5, r0
 800bb72:	f001 fd93 	bl	800d69c <_localeconv_r>
 800bb76:	f8d0 a000 	ldr.w	sl, [r0]
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f7f4 fba0 	bl	80002c0 <strlen>
 800bb80:	2300      	movs	r3, #0
 800bb82:	930a      	str	r3, [sp, #40]	; 0x28
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	9305      	str	r3, [sp, #20]
 800bb88:	f8d8 3000 	ldr.w	r3, [r8]
 800bb8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb90:	3307      	adds	r3, #7
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	f103 0208 	add.w	r2, r3, #8
 800bb9a:	f8c8 2000 	str.w	r2, [r8]
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bba6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bbaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bbae:	9307      	str	r3, [sp, #28]
 800bbb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800bbb4:	ee08 0a10 	vmov	s16, r0
 800bbb8:	4b9f      	ldr	r3, [pc, #636]	; (800be38 <_printf_float+0x2dc>)
 800bbba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc2:	f7f4 ffdb 	bl	8000b7c <__aeabi_dcmpun>
 800bbc6:	bb88      	cbnz	r0, 800bc2c <_printf_float+0xd0>
 800bbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbcc:	4b9a      	ldr	r3, [pc, #616]	; (800be38 <_printf_float+0x2dc>)
 800bbce:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd2:	f7f4 ffb5 	bl	8000b40 <__aeabi_dcmple>
 800bbd6:	bb48      	cbnz	r0, 800bc2c <_printf_float+0xd0>
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 800bbe4:	b110      	cbz	r0, 800bbec <_printf_float+0x90>
 800bbe6:	232d      	movs	r3, #45	; 0x2d
 800bbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbec:	4b93      	ldr	r3, [pc, #588]	; (800be3c <_printf_float+0x2e0>)
 800bbee:	4894      	ldr	r0, [pc, #592]	; (800be40 <_printf_float+0x2e4>)
 800bbf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbf4:	bf94      	ite	ls
 800bbf6:	4698      	movls	r8, r3
 800bbf8:	4680      	movhi	r8, r0
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	9b05      	ldr	r3, [sp, #20]
 800bc00:	f023 0204 	bic.w	r2, r3, #4
 800bc04:	6022      	str	r2, [r4, #0]
 800bc06:	f04f 0900 	mov.w	r9, #0
 800bc0a:	9700      	str	r7, [sp, #0]
 800bc0c:	4633      	mov	r3, r6
 800bc0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc10:	4621      	mov	r1, r4
 800bc12:	4628      	mov	r0, r5
 800bc14:	f000 f9d8 	bl	800bfc8 <_printf_common>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f040 8090 	bne.w	800bd3e <_printf_float+0x1e2>
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	b00d      	add	sp, #52	; 0x34
 800bc24:	ecbd 8b02 	vpop	{d8}
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	464b      	mov	r3, r9
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 ffa2 	bl	8000b7c <__aeabi_dcmpun>
 800bc38:	b140      	cbz	r0, 800bc4c <_printf_float+0xf0>
 800bc3a:	464b      	mov	r3, r9
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bfbc      	itt	lt
 800bc40:	232d      	movlt	r3, #45	; 0x2d
 800bc42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc46:	487f      	ldr	r0, [pc, #508]	; (800be44 <_printf_float+0x2e8>)
 800bc48:	4b7f      	ldr	r3, [pc, #508]	; (800be48 <_printf_float+0x2ec>)
 800bc4a:	e7d1      	b.n	800bbf0 <_printf_float+0x94>
 800bc4c:	6863      	ldr	r3, [r4, #4]
 800bc4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc52:	9206      	str	r2, [sp, #24]
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	d13f      	bne.n	800bcd8 <_printf_float+0x17c>
 800bc58:	2306      	movs	r3, #6
 800bc5a:	6063      	str	r3, [r4, #4]
 800bc5c:	9b05      	ldr	r3, [sp, #20]
 800bc5e:	6861      	ldr	r1, [r4, #4]
 800bc60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc64:	2300      	movs	r3, #0
 800bc66:	9303      	str	r3, [sp, #12]
 800bc68:	ab0a      	add	r3, sp, #40	; 0x28
 800bc6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc6e:	ab09      	add	r3, sp, #36	; 0x24
 800bc70:	ec49 8b10 	vmov	d0, r8, r9
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f7ff fecd 	bl	800ba1c <__cvt>
 800bc82:	9b06      	ldr	r3, [sp, #24]
 800bc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc86:	2b47      	cmp	r3, #71	; 0x47
 800bc88:	4680      	mov	r8, r0
 800bc8a:	d108      	bne.n	800bc9e <_printf_float+0x142>
 800bc8c:	1cc8      	adds	r0, r1, #3
 800bc8e:	db02      	blt.n	800bc96 <_printf_float+0x13a>
 800bc90:	6863      	ldr	r3, [r4, #4]
 800bc92:	4299      	cmp	r1, r3
 800bc94:	dd41      	ble.n	800bd1a <_printf_float+0x1be>
 800bc96:	f1ab 0b02 	sub.w	fp, fp, #2
 800bc9a:	fa5f fb8b 	uxtb.w	fp, fp
 800bc9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bca2:	d820      	bhi.n	800bce6 <_printf_float+0x18a>
 800bca4:	3901      	subs	r1, #1
 800bca6:	465a      	mov	r2, fp
 800bca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bcac:	9109      	str	r1, [sp, #36]	; 0x24
 800bcae:	f7ff ff17 	bl	800bae0 <__exponent>
 800bcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcb4:	1813      	adds	r3, r2, r0
 800bcb6:	2a01      	cmp	r2, #1
 800bcb8:	4681      	mov	r9, r0
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	dc02      	bgt.n	800bcc4 <_printf_float+0x168>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	07d2      	lsls	r2, r2, #31
 800bcc2:	d501      	bpl.n	800bcc8 <_printf_float+0x16c>
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d09c      	beq.n	800bc0a <_printf_float+0xae>
 800bcd0:	232d      	movs	r3, #45	; 0x2d
 800bcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd6:	e798      	b.n	800bc0a <_printf_float+0xae>
 800bcd8:	9a06      	ldr	r2, [sp, #24]
 800bcda:	2a47      	cmp	r2, #71	; 0x47
 800bcdc:	d1be      	bne.n	800bc5c <_printf_float+0x100>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1bc      	bne.n	800bc5c <_printf_float+0x100>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e7b9      	b.n	800bc5a <_printf_float+0xfe>
 800bce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcea:	d118      	bne.n	800bd1e <_printf_float+0x1c2>
 800bcec:	2900      	cmp	r1, #0
 800bcee:	6863      	ldr	r3, [r4, #4]
 800bcf0:	dd0b      	ble.n	800bd0a <_printf_float+0x1ae>
 800bcf2:	6121      	str	r1, [r4, #16]
 800bcf4:	b913      	cbnz	r3, 800bcfc <_printf_float+0x1a0>
 800bcf6:	6822      	ldr	r2, [r4, #0]
 800bcf8:	07d0      	lsls	r0, r2, #31
 800bcfa:	d502      	bpl.n	800bd02 <_printf_float+0x1a6>
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	440b      	add	r3, r1
 800bd00:	6123      	str	r3, [r4, #16]
 800bd02:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd04:	f04f 0900 	mov.w	r9, #0
 800bd08:	e7de      	b.n	800bcc8 <_printf_float+0x16c>
 800bd0a:	b913      	cbnz	r3, 800bd12 <_printf_float+0x1b6>
 800bd0c:	6822      	ldr	r2, [r4, #0]
 800bd0e:	07d2      	lsls	r2, r2, #31
 800bd10:	d501      	bpl.n	800bd16 <_printf_float+0x1ba>
 800bd12:	3302      	adds	r3, #2
 800bd14:	e7f4      	b.n	800bd00 <_printf_float+0x1a4>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e7f2      	b.n	800bd00 <_printf_float+0x1a4>
 800bd1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	4299      	cmp	r1, r3
 800bd22:	db05      	blt.n	800bd30 <_printf_float+0x1d4>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	6121      	str	r1, [r4, #16]
 800bd28:	07d8      	lsls	r0, r3, #31
 800bd2a:	d5ea      	bpl.n	800bd02 <_printf_float+0x1a6>
 800bd2c:	1c4b      	adds	r3, r1, #1
 800bd2e:	e7e7      	b.n	800bd00 <_printf_float+0x1a4>
 800bd30:	2900      	cmp	r1, #0
 800bd32:	bfd4      	ite	le
 800bd34:	f1c1 0202 	rsble	r2, r1, #2
 800bd38:	2201      	movgt	r2, #1
 800bd3a:	4413      	add	r3, r2
 800bd3c:	e7e0      	b.n	800bd00 <_printf_float+0x1a4>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	055a      	lsls	r2, r3, #21
 800bd42:	d407      	bmi.n	800bd54 <_printf_float+0x1f8>
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	4642      	mov	r2, r8
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d12c      	bne.n	800bdac <_printf_float+0x250>
 800bd52:	e764      	b.n	800bc1e <_printf_float+0xc2>
 800bd54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd58:	f240 80e0 	bls.w	800bf1c <_printf_float+0x3c0>
 800bd5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd60:	2200      	movs	r2, #0
 800bd62:	2300      	movs	r3, #0
 800bd64:	f7f4 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d034      	beq.n	800bdd6 <_printf_float+0x27a>
 800bd6c:	4a37      	ldr	r2, [pc, #220]	; (800be4c <_printf_float+0x2f0>)
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	47b8      	blx	r7
 800bd76:	3001      	adds	r0, #1
 800bd78:	f43f af51 	beq.w	800bc1e <_printf_float+0xc2>
 800bd7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd80:	429a      	cmp	r2, r3
 800bd82:	db02      	blt.n	800bd8a <_printf_float+0x22e>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	07d8      	lsls	r0, r3, #31
 800bd88:	d510      	bpl.n	800bdac <_printf_float+0x250>
 800bd8a:	ee18 3a10 	vmov	r3, s16
 800bd8e:	4652      	mov	r2, sl
 800bd90:	4631      	mov	r1, r6
 800bd92:	4628      	mov	r0, r5
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	f43f af41 	beq.w	800bc1e <_printf_float+0xc2>
 800bd9c:	f04f 0800 	mov.w	r8, #0
 800bda0:	f104 091a 	add.w	r9, r4, #26
 800bda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda6:	3b01      	subs	r3, #1
 800bda8:	4543      	cmp	r3, r8
 800bdaa:	dc09      	bgt.n	800bdc0 <_printf_float+0x264>
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	079b      	lsls	r3, r3, #30
 800bdb0:	f100 8105 	bmi.w	800bfbe <_printf_float+0x462>
 800bdb4:	68e0      	ldr	r0, [r4, #12]
 800bdb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdb8:	4298      	cmp	r0, r3
 800bdba:	bfb8      	it	lt
 800bdbc:	4618      	movlt	r0, r3
 800bdbe:	e730      	b.n	800bc22 <_printf_float+0xc6>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	464a      	mov	r2, r9
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	47b8      	blx	r7
 800bdca:	3001      	adds	r0, #1
 800bdcc:	f43f af27 	beq.w	800bc1e <_printf_float+0xc2>
 800bdd0:	f108 0801 	add.w	r8, r8, #1
 800bdd4:	e7e6      	b.n	800bda4 <_printf_float+0x248>
 800bdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dc39      	bgt.n	800be50 <_printf_float+0x2f4>
 800bddc:	4a1b      	ldr	r2, [pc, #108]	; (800be4c <_printf_float+0x2f0>)
 800bdde:	2301      	movs	r3, #1
 800bde0:	4631      	mov	r1, r6
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b8      	blx	r7
 800bde6:	3001      	adds	r0, #1
 800bde8:	f43f af19 	beq.w	800bc1e <_printf_float+0xc2>
 800bdec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	d102      	bne.n	800bdfa <_printf_float+0x29e>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	07d9      	lsls	r1, r3, #31
 800bdf8:	d5d8      	bpl.n	800bdac <_printf_float+0x250>
 800bdfa:	ee18 3a10 	vmov	r3, s16
 800bdfe:	4652      	mov	r2, sl
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	f43f af09 	beq.w	800bc1e <_printf_float+0xc2>
 800be0c:	f04f 0900 	mov.w	r9, #0
 800be10:	f104 0a1a 	add.w	sl, r4, #26
 800be14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be16:	425b      	negs	r3, r3
 800be18:	454b      	cmp	r3, r9
 800be1a:	dc01      	bgt.n	800be20 <_printf_float+0x2c4>
 800be1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1e:	e792      	b.n	800bd46 <_printf_float+0x1ea>
 800be20:	2301      	movs	r3, #1
 800be22:	4652      	mov	r2, sl
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f aef7 	beq.w	800bc1e <_printf_float+0xc2>
 800be30:	f109 0901 	add.w	r9, r9, #1
 800be34:	e7ee      	b.n	800be14 <_printf_float+0x2b8>
 800be36:	bf00      	nop
 800be38:	7fefffff 	.word	0x7fefffff
 800be3c:	0800f58c 	.word	0x0800f58c
 800be40:	0800f590 	.word	0x0800f590
 800be44:	0800f598 	.word	0x0800f598
 800be48:	0800f594 	.word	0x0800f594
 800be4c:	0800f59c 	.word	0x0800f59c
 800be50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be54:	429a      	cmp	r2, r3
 800be56:	bfa8      	it	ge
 800be58:	461a      	movge	r2, r3
 800be5a:	2a00      	cmp	r2, #0
 800be5c:	4691      	mov	r9, r2
 800be5e:	dc37      	bgt.n	800bed0 <_printf_float+0x374>
 800be60:	f04f 0b00 	mov.w	fp, #0
 800be64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be68:	f104 021a 	add.w	r2, r4, #26
 800be6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	eba3 0309 	sub.w	r3, r3, r9
 800be74:	455b      	cmp	r3, fp
 800be76:	dc33      	bgt.n	800bee0 <_printf_float+0x384>
 800be78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be7c:	429a      	cmp	r2, r3
 800be7e:	db3b      	blt.n	800bef8 <_printf_float+0x39c>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	07da      	lsls	r2, r3, #31
 800be84:	d438      	bmi.n	800bef8 <_printf_float+0x39c>
 800be86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be88:	9a05      	ldr	r2, [sp, #20]
 800be8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be8c:	1a9a      	subs	r2, r3, r2
 800be8e:	eba3 0901 	sub.w	r9, r3, r1
 800be92:	4591      	cmp	r9, r2
 800be94:	bfa8      	it	ge
 800be96:	4691      	movge	r9, r2
 800be98:	f1b9 0f00 	cmp.w	r9, #0
 800be9c:	dc35      	bgt.n	800bf0a <_printf_float+0x3ae>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bea6:	f104 0a1a 	add.w	sl, r4, #26
 800beaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800beae:	1a9b      	subs	r3, r3, r2
 800beb0:	eba3 0309 	sub.w	r3, r3, r9
 800beb4:	4543      	cmp	r3, r8
 800beb6:	f77f af79 	ble.w	800bdac <_printf_float+0x250>
 800beba:	2301      	movs	r3, #1
 800bebc:	4652      	mov	r2, sl
 800bebe:	4631      	mov	r1, r6
 800bec0:	4628      	mov	r0, r5
 800bec2:	47b8      	blx	r7
 800bec4:	3001      	adds	r0, #1
 800bec6:	f43f aeaa 	beq.w	800bc1e <_printf_float+0xc2>
 800beca:	f108 0801 	add.w	r8, r8, #1
 800bece:	e7ec      	b.n	800beaa <_printf_float+0x34e>
 800bed0:	4613      	mov	r3, r2
 800bed2:	4631      	mov	r1, r6
 800bed4:	4642      	mov	r2, r8
 800bed6:	4628      	mov	r0, r5
 800bed8:	47b8      	blx	r7
 800beda:	3001      	adds	r0, #1
 800bedc:	d1c0      	bne.n	800be60 <_printf_float+0x304>
 800bede:	e69e      	b.n	800bc1e <_printf_float+0xc2>
 800bee0:	2301      	movs	r3, #1
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	9205      	str	r2, [sp, #20]
 800bee8:	47b8      	blx	r7
 800beea:	3001      	adds	r0, #1
 800beec:	f43f ae97 	beq.w	800bc1e <_printf_float+0xc2>
 800bef0:	9a05      	ldr	r2, [sp, #20]
 800bef2:	f10b 0b01 	add.w	fp, fp, #1
 800bef6:	e7b9      	b.n	800be6c <_printf_float+0x310>
 800bef8:	ee18 3a10 	vmov	r3, s16
 800befc:	4652      	mov	r2, sl
 800befe:	4631      	mov	r1, r6
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b8      	blx	r7
 800bf04:	3001      	adds	r0, #1
 800bf06:	d1be      	bne.n	800be86 <_printf_float+0x32a>
 800bf08:	e689      	b.n	800bc1e <_printf_float+0xc2>
 800bf0a:	9a05      	ldr	r2, [sp, #20]
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	4442      	add	r2, r8
 800bf10:	4631      	mov	r1, r6
 800bf12:	4628      	mov	r0, r5
 800bf14:	47b8      	blx	r7
 800bf16:	3001      	adds	r0, #1
 800bf18:	d1c1      	bne.n	800be9e <_printf_float+0x342>
 800bf1a:	e680      	b.n	800bc1e <_printf_float+0xc2>
 800bf1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf1e:	2a01      	cmp	r2, #1
 800bf20:	dc01      	bgt.n	800bf26 <_printf_float+0x3ca>
 800bf22:	07db      	lsls	r3, r3, #31
 800bf24:	d538      	bpl.n	800bf98 <_printf_float+0x43c>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4642      	mov	r2, r8
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	f43f ae74 	beq.w	800bc1e <_printf_float+0xc2>
 800bf36:	ee18 3a10 	vmov	r3, s16
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b8      	blx	r7
 800bf42:	3001      	adds	r0, #1
 800bf44:	f43f ae6b 	beq.w	800bc1e <_printf_float+0xc2>
 800bf48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f7f4 fde2 	bl	8000b18 <__aeabi_dcmpeq>
 800bf54:	b9d8      	cbnz	r0, 800bf8e <_printf_float+0x432>
 800bf56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf58:	f108 0201 	add.w	r2, r8, #1
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	4631      	mov	r1, r6
 800bf60:	4628      	mov	r0, r5
 800bf62:	47b8      	blx	r7
 800bf64:	3001      	adds	r0, #1
 800bf66:	d10e      	bne.n	800bf86 <_printf_float+0x42a>
 800bf68:	e659      	b.n	800bc1e <_printf_float+0xc2>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4652      	mov	r2, sl
 800bf6e:	4631      	mov	r1, r6
 800bf70:	4628      	mov	r0, r5
 800bf72:	47b8      	blx	r7
 800bf74:	3001      	adds	r0, #1
 800bf76:	f43f ae52 	beq.w	800bc1e <_printf_float+0xc2>
 800bf7a:	f108 0801 	add.w	r8, r8, #1
 800bf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf80:	3b01      	subs	r3, #1
 800bf82:	4543      	cmp	r3, r8
 800bf84:	dcf1      	bgt.n	800bf6a <_printf_float+0x40e>
 800bf86:	464b      	mov	r3, r9
 800bf88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf8c:	e6dc      	b.n	800bd48 <_printf_float+0x1ec>
 800bf8e:	f04f 0800 	mov.w	r8, #0
 800bf92:	f104 0a1a 	add.w	sl, r4, #26
 800bf96:	e7f2      	b.n	800bf7e <_printf_float+0x422>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4642      	mov	r2, r8
 800bf9c:	e7df      	b.n	800bf5e <_printf_float+0x402>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	464a      	mov	r2, r9
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b8      	blx	r7
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	f43f ae38 	beq.w	800bc1e <_printf_float+0xc2>
 800bfae:	f108 0801 	add.w	r8, r8, #1
 800bfb2:	68e3      	ldr	r3, [r4, #12]
 800bfb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfb6:	1a5b      	subs	r3, r3, r1
 800bfb8:	4543      	cmp	r3, r8
 800bfba:	dcf0      	bgt.n	800bf9e <_printf_float+0x442>
 800bfbc:	e6fa      	b.n	800bdb4 <_printf_float+0x258>
 800bfbe:	f04f 0800 	mov.w	r8, #0
 800bfc2:	f104 0919 	add.w	r9, r4, #25
 800bfc6:	e7f4      	b.n	800bfb2 <_printf_float+0x456>

0800bfc8 <_printf_common>:
 800bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	4616      	mov	r6, r2
 800bfce:	4699      	mov	r9, r3
 800bfd0:	688a      	ldr	r2, [r1, #8]
 800bfd2:	690b      	ldr	r3, [r1, #16]
 800bfd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	bfb8      	it	lt
 800bfdc:	4613      	movlt	r3, r2
 800bfde:	6033      	str	r3, [r6, #0]
 800bfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	b10a      	cbz	r2, 800bfee <_printf_common+0x26>
 800bfea:	3301      	adds	r3, #1
 800bfec:	6033      	str	r3, [r6, #0]
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	0699      	lsls	r1, r3, #26
 800bff2:	bf42      	ittt	mi
 800bff4:	6833      	ldrmi	r3, [r6, #0]
 800bff6:	3302      	addmi	r3, #2
 800bff8:	6033      	strmi	r3, [r6, #0]
 800bffa:	6825      	ldr	r5, [r4, #0]
 800bffc:	f015 0506 	ands.w	r5, r5, #6
 800c000:	d106      	bne.n	800c010 <_printf_common+0x48>
 800c002:	f104 0a19 	add.w	sl, r4, #25
 800c006:	68e3      	ldr	r3, [r4, #12]
 800c008:	6832      	ldr	r2, [r6, #0]
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	42ab      	cmp	r3, r5
 800c00e:	dc26      	bgt.n	800c05e <_printf_common+0x96>
 800c010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c014:	1e13      	subs	r3, r2, #0
 800c016:	6822      	ldr	r2, [r4, #0]
 800c018:	bf18      	it	ne
 800c01a:	2301      	movne	r3, #1
 800c01c:	0692      	lsls	r2, r2, #26
 800c01e:	d42b      	bmi.n	800c078 <_printf_common+0xb0>
 800c020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c024:	4649      	mov	r1, r9
 800c026:	4638      	mov	r0, r7
 800c028:	47c0      	blx	r8
 800c02a:	3001      	adds	r0, #1
 800c02c:	d01e      	beq.n	800c06c <_printf_common+0xa4>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	68e5      	ldr	r5, [r4, #12]
 800c032:	6832      	ldr	r2, [r6, #0]
 800c034:	f003 0306 	and.w	r3, r3, #6
 800c038:	2b04      	cmp	r3, #4
 800c03a:	bf08      	it	eq
 800c03c:	1aad      	subeq	r5, r5, r2
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	6922      	ldr	r2, [r4, #16]
 800c042:	bf0c      	ite	eq
 800c044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c048:	2500      	movne	r5, #0
 800c04a:	4293      	cmp	r3, r2
 800c04c:	bfc4      	itt	gt
 800c04e:	1a9b      	subgt	r3, r3, r2
 800c050:	18ed      	addgt	r5, r5, r3
 800c052:	2600      	movs	r6, #0
 800c054:	341a      	adds	r4, #26
 800c056:	42b5      	cmp	r5, r6
 800c058:	d11a      	bne.n	800c090 <_printf_common+0xc8>
 800c05a:	2000      	movs	r0, #0
 800c05c:	e008      	b.n	800c070 <_printf_common+0xa8>
 800c05e:	2301      	movs	r3, #1
 800c060:	4652      	mov	r2, sl
 800c062:	4649      	mov	r1, r9
 800c064:	4638      	mov	r0, r7
 800c066:	47c0      	blx	r8
 800c068:	3001      	adds	r0, #1
 800c06a:	d103      	bne.n	800c074 <_printf_common+0xac>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c074:	3501      	adds	r5, #1
 800c076:	e7c6      	b.n	800c006 <_printf_common+0x3e>
 800c078:	18e1      	adds	r1, r4, r3
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	2030      	movs	r0, #48	; 0x30
 800c07e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c082:	4422      	add	r2, r4
 800c084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c08c:	3302      	adds	r3, #2
 800c08e:	e7c7      	b.n	800c020 <_printf_common+0x58>
 800c090:	2301      	movs	r3, #1
 800c092:	4622      	mov	r2, r4
 800c094:	4649      	mov	r1, r9
 800c096:	4638      	mov	r0, r7
 800c098:	47c0      	blx	r8
 800c09a:	3001      	adds	r0, #1
 800c09c:	d0e6      	beq.n	800c06c <_printf_common+0xa4>
 800c09e:	3601      	adds	r6, #1
 800c0a0:	e7d9      	b.n	800c056 <_printf_common+0x8e>
	...

0800c0a4 <_printf_i>:
 800c0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a8:	7e0f      	ldrb	r7, [r1, #24]
 800c0aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0ac:	2f78      	cmp	r7, #120	; 0x78
 800c0ae:	4691      	mov	r9, r2
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	469a      	mov	sl, r3
 800c0b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0ba:	d807      	bhi.n	800c0cc <_printf_i+0x28>
 800c0bc:	2f62      	cmp	r7, #98	; 0x62
 800c0be:	d80a      	bhi.n	800c0d6 <_printf_i+0x32>
 800c0c0:	2f00      	cmp	r7, #0
 800c0c2:	f000 80d8 	beq.w	800c276 <_printf_i+0x1d2>
 800c0c6:	2f58      	cmp	r7, #88	; 0x58
 800c0c8:	f000 80a3 	beq.w	800c212 <_printf_i+0x16e>
 800c0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0d4:	e03a      	b.n	800c14c <_printf_i+0xa8>
 800c0d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0da:	2b15      	cmp	r3, #21
 800c0dc:	d8f6      	bhi.n	800c0cc <_printf_i+0x28>
 800c0de:	a101      	add	r1, pc, #4	; (adr r1, 800c0e4 <_printf_i+0x40>)
 800c0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0e4:	0800c13d 	.word	0x0800c13d
 800c0e8:	0800c151 	.word	0x0800c151
 800c0ec:	0800c0cd 	.word	0x0800c0cd
 800c0f0:	0800c0cd 	.word	0x0800c0cd
 800c0f4:	0800c0cd 	.word	0x0800c0cd
 800c0f8:	0800c0cd 	.word	0x0800c0cd
 800c0fc:	0800c151 	.word	0x0800c151
 800c100:	0800c0cd 	.word	0x0800c0cd
 800c104:	0800c0cd 	.word	0x0800c0cd
 800c108:	0800c0cd 	.word	0x0800c0cd
 800c10c:	0800c0cd 	.word	0x0800c0cd
 800c110:	0800c25d 	.word	0x0800c25d
 800c114:	0800c181 	.word	0x0800c181
 800c118:	0800c23f 	.word	0x0800c23f
 800c11c:	0800c0cd 	.word	0x0800c0cd
 800c120:	0800c0cd 	.word	0x0800c0cd
 800c124:	0800c27f 	.word	0x0800c27f
 800c128:	0800c0cd 	.word	0x0800c0cd
 800c12c:	0800c181 	.word	0x0800c181
 800c130:	0800c0cd 	.word	0x0800c0cd
 800c134:	0800c0cd 	.word	0x0800c0cd
 800c138:	0800c247 	.word	0x0800c247
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	1d1a      	adds	r2, r3, #4
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	602a      	str	r2, [r5, #0]
 800c144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c14c:	2301      	movs	r3, #1
 800c14e:	e0a3      	b.n	800c298 <_printf_i+0x1f4>
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	6829      	ldr	r1, [r5, #0]
 800c154:	0606      	lsls	r6, r0, #24
 800c156:	f101 0304 	add.w	r3, r1, #4
 800c15a:	d50a      	bpl.n	800c172 <_printf_i+0xce>
 800c15c:	680e      	ldr	r6, [r1, #0]
 800c15e:	602b      	str	r3, [r5, #0]
 800c160:	2e00      	cmp	r6, #0
 800c162:	da03      	bge.n	800c16c <_printf_i+0xc8>
 800c164:	232d      	movs	r3, #45	; 0x2d
 800c166:	4276      	negs	r6, r6
 800c168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c16c:	485e      	ldr	r0, [pc, #376]	; (800c2e8 <_printf_i+0x244>)
 800c16e:	230a      	movs	r3, #10
 800c170:	e019      	b.n	800c1a6 <_printf_i+0x102>
 800c172:	680e      	ldr	r6, [r1, #0]
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c17a:	bf18      	it	ne
 800c17c:	b236      	sxthne	r6, r6
 800c17e:	e7ef      	b.n	800c160 <_printf_i+0xbc>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	1d19      	adds	r1, r3, #4
 800c186:	6029      	str	r1, [r5, #0]
 800c188:	0601      	lsls	r1, r0, #24
 800c18a:	d501      	bpl.n	800c190 <_printf_i+0xec>
 800c18c:	681e      	ldr	r6, [r3, #0]
 800c18e:	e002      	b.n	800c196 <_printf_i+0xf2>
 800c190:	0646      	lsls	r6, r0, #25
 800c192:	d5fb      	bpl.n	800c18c <_printf_i+0xe8>
 800c194:	881e      	ldrh	r6, [r3, #0]
 800c196:	4854      	ldr	r0, [pc, #336]	; (800c2e8 <_printf_i+0x244>)
 800c198:	2f6f      	cmp	r7, #111	; 0x6f
 800c19a:	bf0c      	ite	eq
 800c19c:	2308      	moveq	r3, #8
 800c19e:	230a      	movne	r3, #10
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1a6:	6865      	ldr	r5, [r4, #4]
 800c1a8:	60a5      	str	r5, [r4, #8]
 800c1aa:	2d00      	cmp	r5, #0
 800c1ac:	bfa2      	ittt	ge
 800c1ae:	6821      	ldrge	r1, [r4, #0]
 800c1b0:	f021 0104 	bicge.w	r1, r1, #4
 800c1b4:	6021      	strge	r1, [r4, #0]
 800c1b6:	b90e      	cbnz	r6, 800c1bc <_printf_i+0x118>
 800c1b8:	2d00      	cmp	r5, #0
 800c1ba:	d04d      	beq.n	800c258 <_printf_i+0x1b4>
 800c1bc:	4615      	mov	r5, r2
 800c1be:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1c2:	fb03 6711 	mls	r7, r3, r1, r6
 800c1c6:	5dc7      	ldrb	r7, [r0, r7]
 800c1c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1cc:	4637      	mov	r7, r6
 800c1ce:	42bb      	cmp	r3, r7
 800c1d0:	460e      	mov	r6, r1
 800c1d2:	d9f4      	bls.n	800c1be <_printf_i+0x11a>
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d10b      	bne.n	800c1f0 <_printf_i+0x14c>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	07de      	lsls	r6, r3, #31
 800c1dc:	d508      	bpl.n	800c1f0 <_printf_i+0x14c>
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	6861      	ldr	r1, [r4, #4]
 800c1e2:	4299      	cmp	r1, r3
 800c1e4:	bfde      	ittt	le
 800c1e6:	2330      	movle	r3, #48	; 0x30
 800c1e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1f0:	1b52      	subs	r2, r2, r5
 800c1f2:	6122      	str	r2, [r4, #16]
 800c1f4:	f8cd a000 	str.w	sl, [sp]
 800c1f8:	464b      	mov	r3, r9
 800c1fa:	aa03      	add	r2, sp, #12
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4640      	mov	r0, r8
 800c200:	f7ff fee2 	bl	800bfc8 <_printf_common>
 800c204:	3001      	adds	r0, #1
 800c206:	d14c      	bne.n	800c2a2 <_printf_i+0x1fe>
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	b004      	add	sp, #16
 800c20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c212:	4835      	ldr	r0, [pc, #212]	; (800c2e8 <_printf_i+0x244>)
 800c214:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c218:	6829      	ldr	r1, [r5, #0]
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c220:	6029      	str	r1, [r5, #0]
 800c222:	061d      	lsls	r5, r3, #24
 800c224:	d514      	bpl.n	800c250 <_printf_i+0x1ac>
 800c226:	07df      	lsls	r7, r3, #31
 800c228:	bf44      	itt	mi
 800c22a:	f043 0320 	orrmi.w	r3, r3, #32
 800c22e:	6023      	strmi	r3, [r4, #0]
 800c230:	b91e      	cbnz	r6, 800c23a <_printf_i+0x196>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	f023 0320 	bic.w	r3, r3, #32
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	2310      	movs	r3, #16
 800c23c:	e7b0      	b.n	800c1a0 <_printf_i+0xfc>
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	f043 0320 	orr.w	r3, r3, #32
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	2378      	movs	r3, #120	; 0x78
 800c248:	4828      	ldr	r0, [pc, #160]	; (800c2ec <_printf_i+0x248>)
 800c24a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c24e:	e7e3      	b.n	800c218 <_printf_i+0x174>
 800c250:	0659      	lsls	r1, r3, #25
 800c252:	bf48      	it	mi
 800c254:	b2b6      	uxthmi	r6, r6
 800c256:	e7e6      	b.n	800c226 <_printf_i+0x182>
 800c258:	4615      	mov	r5, r2
 800c25a:	e7bb      	b.n	800c1d4 <_printf_i+0x130>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	6826      	ldr	r6, [r4, #0]
 800c260:	6961      	ldr	r1, [r4, #20]
 800c262:	1d18      	adds	r0, r3, #4
 800c264:	6028      	str	r0, [r5, #0]
 800c266:	0635      	lsls	r5, r6, #24
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	d501      	bpl.n	800c270 <_printf_i+0x1cc>
 800c26c:	6019      	str	r1, [r3, #0]
 800c26e:	e002      	b.n	800c276 <_printf_i+0x1d2>
 800c270:	0670      	lsls	r0, r6, #25
 800c272:	d5fb      	bpl.n	800c26c <_printf_i+0x1c8>
 800c274:	8019      	strh	r1, [r3, #0]
 800c276:	2300      	movs	r3, #0
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	4615      	mov	r5, r2
 800c27c:	e7ba      	b.n	800c1f4 <_printf_i+0x150>
 800c27e:	682b      	ldr	r3, [r5, #0]
 800c280:	1d1a      	adds	r2, r3, #4
 800c282:	602a      	str	r2, [r5, #0]
 800c284:	681d      	ldr	r5, [r3, #0]
 800c286:	6862      	ldr	r2, [r4, #4]
 800c288:	2100      	movs	r1, #0
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7f3 ffc8 	bl	8000220 <memchr>
 800c290:	b108      	cbz	r0, 800c296 <_printf_i+0x1f2>
 800c292:	1b40      	subs	r0, r0, r5
 800c294:	6060      	str	r0, [r4, #4]
 800c296:	6863      	ldr	r3, [r4, #4]
 800c298:	6123      	str	r3, [r4, #16]
 800c29a:	2300      	movs	r3, #0
 800c29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2a0:	e7a8      	b.n	800c1f4 <_printf_i+0x150>
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	462a      	mov	r2, r5
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	47d0      	blx	sl
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d0ab      	beq.n	800c208 <_printf_i+0x164>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	079b      	lsls	r3, r3, #30
 800c2b4:	d413      	bmi.n	800c2de <_printf_i+0x23a>
 800c2b6:	68e0      	ldr	r0, [r4, #12]
 800c2b8:	9b03      	ldr	r3, [sp, #12]
 800c2ba:	4298      	cmp	r0, r3
 800c2bc:	bfb8      	it	lt
 800c2be:	4618      	movlt	r0, r3
 800c2c0:	e7a4      	b.n	800c20c <_printf_i+0x168>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	47d0      	blx	sl
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d09b      	beq.n	800c208 <_printf_i+0x164>
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	68e3      	ldr	r3, [r4, #12]
 800c2d4:	9903      	ldr	r1, [sp, #12]
 800c2d6:	1a5b      	subs	r3, r3, r1
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	dcf2      	bgt.n	800c2c2 <_printf_i+0x21e>
 800c2dc:	e7eb      	b.n	800c2b6 <_printf_i+0x212>
 800c2de:	2500      	movs	r5, #0
 800c2e0:	f104 0619 	add.w	r6, r4, #25
 800c2e4:	e7f5      	b.n	800c2d2 <_printf_i+0x22e>
 800c2e6:	bf00      	nop
 800c2e8:	0800f59e 	.word	0x0800f59e
 800c2ec:	0800f5af 	.word	0x0800f5af

0800c2f0 <iprintf>:
 800c2f0:	b40f      	push	{r0, r1, r2, r3}
 800c2f2:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <iprintf+0x2c>)
 800c2f4:	b513      	push	{r0, r1, r4, lr}
 800c2f6:	681c      	ldr	r4, [r3, #0]
 800c2f8:	b124      	cbz	r4, 800c304 <iprintf+0x14>
 800c2fa:	69a3      	ldr	r3, [r4, #24]
 800c2fc:	b913      	cbnz	r3, 800c304 <iprintf+0x14>
 800c2fe:	4620      	mov	r0, r4
 800c300:	f001 f92e 	bl	800d560 <__sinit>
 800c304:	ab05      	add	r3, sp, #20
 800c306:	9a04      	ldr	r2, [sp, #16]
 800c308:	68a1      	ldr	r1, [r4, #8]
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	4620      	mov	r0, r4
 800c30e:	f001 fe01 	bl	800df14 <_vfiprintf_r>
 800c312:	b002      	add	sp, #8
 800c314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c318:	b004      	add	sp, #16
 800c31a:	4770      	bx	lr
 800c31c:	20000184 	.word	0x20000184

0800c320 <_puts_r>:
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	460e      	mov	r6, r1
 800c324:	4605      	mov	r5, r0
 800c326:	b118      	cbz	r0, 800c330 <_puts_r+0x10>
 800c328:	6983      	ldr	r3, [r0, #24]
 800c32a:	b90b      	cbnz	r3, 800c330 <_puts_r+0x10>
 800c32c:	f001 f918 	bl	800d560 <__sinit>
 800c330:	69ab      	ldr	r3, [r5, #24]
 800c332:	68ac      	ldr	r4, [r5, #8]
 800c334:	b913      	cbnz	r3, 800c33c <_puts_r+0x1c>
 800c336:	4628      	mov	r0, r5
 800c338:	f001 f912 	bl	800d560 <__sinit>
 800c33c:	4b2c      	ldr	r3, [pc, #176]	; (800c3f0 <_puts_r+0xd0>)
 800c33e:	429c      	cmp	r4, r3
 800c340:	d120      	bne.n	800c384 <_puts_r+0x64>
 800c342:	686c      	ldr	r4, [r5, #4]
 800c344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c346:	07db      	lsls	r3, r3, #31
 800c348:	d405      	bmi.n	800c356 <_puts_r+0x36>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	0598      	lsls	r0, r3, #22
 800c34e:	d402      	bmi.n	800c356 <_puts_r+0x36>
 800c350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c352:	f001 f9a8 	bl	800d6a6 <__retarget_lock_acquire_recursive>
 800c356:	89a3      	ldrh	r3, [r4, #12]
 800c358:	0719      	lsls	r1, r3, #28
 800c35a:	d51d      	bpl.n	800c398 <_puts_r+0x78>
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	b1db      	cbz	r3, 800c398 <_puts_r+0x78>
 800c360:	3e01      	subs	r6, #1
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c368:	3b01      	subs	r3, #1
 800c36a:	60a3      	str	r3, [r4, #8]
 800c36c:	bb39      	cbnz	r1, 800c3be <_puts_r+0x9e>
 800c36e:	2b00      	cmp	r3, #0
 800c370:	da38      	bge.n	800c3e4 <_puts_r+0xc4>
 800c372:	4622      	mov	r2, r4
 800c374:	210a      	movs	r1, #10
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f89c 	bl	800c4b4 <__swbuf_r>
 800c37c:	3001      	adds	r0, #1
 800c37e:	d011      	beq.n	800c3a4 <_puts_r+0x84>
 800c380:	250a      	movs	r5, #10
 800c382:	e011      	b.n	800c3a8 <_puts_r+0x88>
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <_puts_r+0xd4>)
 800c386:	429c      	cmp	r4, r3
 800c388:	d101      	bne.n	800c38e <_puts_r+0x6e>
 800c38a:	68ac      	ldr	r4, [r5, #8]
 800c38c:	e7da      	b.n	800c344 <_puts_r+0x24>
 800c38e:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <_puts_r+0xd8>)
 800c390:	429c      	cmp	r4, r3
 800c392:	bf08      	it	eq
 800c394:	68ec      	ldreq	r4, [r5, #12]
 800c396:	e7d5      	b.n	800c344 <_puts_r+0x24>
 800c398:	4621      	mov	r1, r4
 800c39a:	4628      	mov	r0, r5
 800c39c:	f000 f8dc 	bl	800c558 <__swsetup_r>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d0dd      	beq.n	800c360 <_puts_r+0x40>
 800c3a4:	f04f 35ff 	mov.w	r5, #4294967295
 800c3a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3aa:	07da      	lsls	r2, r3, #31
 800c3ac:	d405      	bmi.n	800c3ba <_puts_r+0x9a>
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	059b      	lsls	r3, r3, #22
 800c3b2:	d402      	bmi.n	800c3ba <_puts_r+0x9a>
 800c3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b6:	f001 f977 	bl	800d6a8 <__retarget_lock_release_recursive>
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	bd70      	pop	{r4, r5, r6, pc}
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da04      	bge.n	800c3cc <_puts_r+0xac>
 800c3c2:	69a2      	ldr	r2, [r4, #24]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	dc06      	bgt.n	800c3d6 <_puts_r+0xb6>
 800c3c8:	290a      	cmp	r1, #10
 800c3ca:	d004      	beq.n	800c3d6 <_puts_r+0xb6>
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	6022      	str	r2, [r4, #0]
 800c3d2:	7019      	strb	r1, [r3, #0]
 800c3d4:	e7c5      	b.n	800c362 <_puts_r+0x42>
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 f86b 	bl	800c4b4 <__swbuf_r>
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d1bf      	bne.n	800c362 <_puts_r+0x42>
 800c3e2:	e7df      	b.n	800c3a4 <_puts_r+0x84>
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	250a      	movs	r5, #10
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	6022      	str	r2, [r4, #0]
 800c3ec:	701d      	strb	r5, [r3, #0]
 800c3ee:	e7db      	b.n	800c3a8 <_puts_r+0x88>
 800c3f0:	0800f670 	.word	0x0800f670
 800c3f4:	0800f690 	.word	0x0800f690
 800c3f8:	0800f650 	.word	0x0800f650

0800c3fc <puts>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	; (800c408 <puts+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f7ff bf8d 	b.w	800c320 <_puts_r>
 800c406:	bf00      	nop
 800c408:	20000184 	.word	0x20000184

0800c40c <_sbrk_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d06      	ldr	r5, [pc, #24]	; (800c428 <_sbrk_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f8 fc62 	bl	8004ce0 <_sbrk>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_sbrk_r+0x1a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_sbrk_r+0x1a>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20002a34 	.word	0x20002a34

0800c42c <_raise_r>:
 800c42c:	291f      	cmp	r1, #31
 800c42e:	b538      	push	{r3, r4, r5, lr}
 800c430:	4604      	mov	r4, r0
 800c432:	460d      	mov	r5, r1
 800c434:	d904      	bls.n	800c440 <_raise_r+0x14>
 800c436:	2316      	movs	r3, #22
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c442:	b112      	cbz	r2, 800c44a <_raise_r+0x1e>
 800c444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c448:	b94b      	cbnz	r3, 800c45e <_raise_r+0x32>
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 f830 	bl	800c4b0 <_getpid_r>
 800c450:	462a      	mov	r2, r5
 800c452:	4601      	mov	r1, r0
 800c454:	4620      	mov	r0, r4
 800c456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c45a:	f000 b817 	b.w	800c48c <_kill_r>
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d00a      	beq.n	800c478 <_raise_r+0x4c>
 800c462:	1c59      	adds	r1, r3, #1
 800c464:	d103      	bne.n	800c46e <_raise_r+0x42>
 800c466:	2316      	movs	r3, #22
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	2001      	movs	r0, #1
 800c46c:	e7e7      	b.n	800c43e <_raise_r+0x12>
 800c46e:	2400      	movs	r4, #0
 800c470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c474:	4628      	mov	r0, r5
 800c476:	4798      	blx	r3
 800c478:	2000      	movs	r0, #0
 800c47a:	e7e0      	b.n	800c43e <_raise_r+0x12>

0800c47c <raise>:
 800c47c:	4b02      	ldr	r3, [pc, #8]	; (800c488 <raise+0xc>)
 800c47e:	4601      	mov	r1, r0
 800c480:	6818      	ldr	r0, [r3, #0]
 800c482:	f7ff bfd3 	b.w	800c42c <_raise_r>
 800c486:	bf00      	nop
 800c488:	20000184 	.word	0x20000184

0800c48c <_kill_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4d07      	ldr	r5, [pc, #28]	; (800c4ac <_kill_r+0x20>)
 800c490:	2300      	movs	r3, #0
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	4611      	mov	r1, r2
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	f7f8 fbdf 	bl	8004c5c <_kill>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d102      	bne.n	800c4a8 <_kill_r+0x1c>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	b103      	cbz	r3, 800c4a8 <_kill_r+0x1c>
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20002a34 	.word	0x20002a34

0800c4b0 <_getpid_r>:
 800c4b0:	f7f8 bbd2 	b.w	8004c58 <_getpid>

0800c4b4 <__swbuf_r>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	460e      	mov	r6, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	b118      	cbz	r0, 800c4c6 <__swbuf_r+0x12>
 800c4be:	6983      	ldr	r3, [r0, #24]
 800c4c0:	b90b      	cbnz	r3, 800c4c6 <__swbuf_r+0x12>
 800c4c2:	f001 f84d 	bl	800d560 <__sinit>
 800c4c6:	4b21      	ldr	r3, [pc, #132]	; (800c54c <__swbuf_r+0x98>)
 800c4c8:	429c      	cmp	r4, r3
 800c4ca:	d12b      	bne.n	800c524 <__swbuf_r+0x70>
 800c4cc:	686c      	ldr	r4, [r5, #4]
 800c4ce:	69a3      	ldr	r3, [r4, #24]
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	071a      	lsls	r2, r3, #28
 800c4d6:	d52f      	bpl.n	800c538 <__swbuf_r+0x84>
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	b36b      	cbz	r3, 800c538 <__swbuf_r+0x84>
 800c4dc:	6923      	ldr	r3, [r4, #16]
 800c4de:	6820      	ldr	r0, [r4, #0]
 800c4e0:	1ac0      	subs	r0, r0, r3
 800c4e2:	6963      	ldr	r3, [r4, #20]
 800c4e4:	b2f6      	uxtb	r6, r6
 800c4e6:	4283      	cmp	r3, r0
 800c4e8:	4637      	mov	r7, r6
 800c4ea:	dc04      	bgt.n	800c4f6 <__swbuf_r+0x42>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f000 ffa2 	bl	800d438 <_fflush_r>
 800c4f4:	bb30      	cbnz	r0, 800c544 <__swbuf_r+0x90>
 800c4f6:	68a3      	ldr	r3, [r4, #8]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	60a3      	str	r3, [r4, #8]
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	6022      	str	r2, [r4, #0]
 800c502:	701e      	strb	r6, [r3, #0]
 800c504:	6963      	ldr	r3, [r4, #20]
 800c506:	3001      	adds	r0, #1
 800c508:	4283      	cmp	r3, r0
 800c50a:	d004      	beq.n	800c516 <__swbuf_r+0x62>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	07db      	lsls	r3, r3, #31
 800c510:	d506      	bpl.n	800c520 <__swbuf_r+0x6c>
 800c512:	2e0a      	cmp	r6, #10
 800c514:	d104      	bne.n	800c520 <__swbuf_r+0x6c>
 800c516:	4621      	mov	r1, r4
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 ff8d 	bl	800d438 <_fflush_r>
 800c51e:	b988      	cbnz	r0, 800c544 <__swbuf_r+0x90>
 800c520:	4638      	mov	r0, r7
 800c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c524:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <__swbuf_r+0x9c>)
 800c526:	429c      	cmp	r4, r3
 800c528:	d101      	bne.n	800c52e <__swbuf_r+0x7a>
 800c52a:	68ac      	ldr	r4, [r5, #8]
 800c52c:	e7cf      	b.n	800c4ce <__swbuf_r+0x1a>
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <__swbuf_r+0xa0>)
 800c530:	429c      	cmp	r4, r3
 800c532:	bf08      	it	eq
 800c534:	68ec      	ldreq	r4, [r5, #12]
 800c536:	e7ca      	b.n	800c4ce <__swbuf_r+0x1a>
 800c538:	4621      	mov	r1, r4
 800c53a:	4628      	mov	r0, r5
 800c53c:	f000 f80c 	bl	800c558 <__swsetup_r>
 800c540:	2800      	cmp	r0, #0
 800c542:	d0cb      	beq.n	800c4dc <__swbuf_r+0x28>
 800c544:	f04f 37ff 	mov.w	r7, #4294967295
 800c548:	e7ea      	b.n	800c520 <__swbuf_r+0x6c>
 800c54a:	bf00      	nop
 800c54c:	0800f670 	.word	0x0800f670
 800c550:	0800f690 	.word	0x0800f690
 800c554:	0800f650 	.word	0x0800f650

0800c558 <__swsetup_r>:
 800c558:	4b32      	ldr	r3, [pc, #200]	; (800c624 <__swsetup_r+0xcc>)
 800c55a:	b570      	push	{r4, r5, r6, lr}
 800c55c:	681d      	ldr	r5, [r3, #0]
 800c55e:	4606      	mov	r6, r0
 800c560:	460c      	mov	r4, r1
 800c562:	b125      	cbz	r5, 800c56e <__swsetup_r+0x16>
 800c564:	69ab      	ldr	r3, [r5, #24]
 800c566:	b913      	cbnz	r3, 800c56e <__swsetup_r+0x16>
 800c568:	4628      	mov	r0, r5
 800c56a:	f000 fff9 	bl	800d560 <__sinit>
 800c56e:	4b2e      	ldr	r3, [pc, #184]	; (800c628 <__swsetup_r+0xd0>)
 800c570:	429c      	cmp	r4, r3
 800c572:	d10f      	bne.n	800c594 <__swsetup_r+0x3c>
 800c574:	686c      	ldr	r4, [r5, #4]
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c57c:	0719      	lsls	r1, r3, #28
 800c57e:	d42c      	bmi.n	800c5da <__swsetup_r+0x82>
 800c580:	06dd      	lsls	r5, r3, #27
 800c582:	d411      	bmi.n	800c5a8 <__swsetup_r+0x50>
 800c584:	2309      	movs	r3, #9
 800c586:	6033      	str	r3, [r6, #0]
 800c588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c58c:	81a3      	strh	r3, [r4, #12]
 800c58e:	f04f 30ff 	mov.w	r0, #4294967295
 800c592:	e03e      	b.n	800c612 <__swsetup_r+0xba>
 800c594:	4b25      	ldr	r3, [pc, #148]	; (800c62c <__swsetup_r+0xd4>)
 800c596:	429c      	cmp	r4, r3
 800c598:	d101      	bne.n	800c59e <__swsetup_r+0x46>
 800c59a:	68ac      	ldr	r4, [r5, #8]
 800c59c:	e7eb      	b.n	800c576 <__swsetup_r+0x1e>
 800c59e:	4b24      	ldr	r3, [pc, #144]	; (800c630 <__swsetup_r+0xd8>)
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	bf08      	it	eq
 800c5a4:	68ec      	ldreq	r4, [r5, #12]
 800c5a6:	e7e6      	b.n	800c576 <__swsetup_r+0x1e>
 800c5a8:	0758      	lsls	r0, r3, #29
 800c5aa:	d512      	bpl.n	800c5d2 <__swsetup_r+0x7a>
 800c5ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ae:	b141      	cbz	r1, 800c5c2 <__swsetup_r+0x6a>
 800c5b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	d002      	beq.n	800c5be <__swsetup_r+0x66>
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff f94f 	bl	800b85c <_free_r>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6363      	str	r3, [r4, #52]	; 0x34
 800c5c2:	89a3      	ldrh	r3, [r4, #12]
 800c5c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5c8:	81a3      	strh	r3, [r4, #12]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6063      	str	r3, [r4, #4]
 800c5ce:	6923      	ldr	r3, [r4, #16]
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	f043 0308 	orr.w	r3, r3, #8
 800c5d8:	81a3      	strh	r3, [r4, #12]
 800c5da:	6923      	ldr	r3, [r4, #16]
 800c5dc:	b94b      	cbnz	r3, 800c5f2 <__swsetup_r+0x9a>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5e8:	d003      	beq.n	800c5f2 <__swsetup_r+0x9a>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f001 f881 	bl	800d6f4 <__smakebuf_r>
 800c5f2:	89a0      	ldrh	r0, [r4, #12]
 800c5f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5f8:	f010 0301 	ands.w	r3, r0, #1
 800c5fc:	d00a      	beq.n	800c614 <__swsetup_r+0xbc>
 800c5fe:	2300      	movs	r3, #0
 800c600:	60a3      	str	r3, [r4, #8]
 800c602:	6963      	ldr	r3, [r4, #20]
 800c604:	425b      	negs	r3, r3
 800c606:	61a3      	str	r3, [r4, #24]
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	b943      	cbnz	r3, 800c61e <__swsetup_r+0xc6>
 800c60c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c610:	d1ba      	bne.n	800c588 <__swsetup_r+0x30>
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	0781      	lsls	r1, r0, #30
 800c616:	bf58      	it	pl
 800c618:	6963      	ldrpl	r3, [r4, #20]
 800c61a:	60a3      	str	r3, [r4, #8]
 800c61c:	e7f4      	b.n	800c608 <__swsetup_r+0xb0>
 800c61e:	2000      	movs	r0, #0
 800c620:	e7f7      	b.n	800c612 <__swsetup_r+0xba>
 800c622:	bf00      	nop
 800c624:	20000184 	.word	0x20000184
 800c628:	0800f670 	.word	0x0800f670
 800c62c:	0800f690 	.word	0x0800f690
 800c630:	0800f650 	.word	0x0800f650

0800c634 <quorem>:
 800c634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	6903      	ldr	r3, [r0, #16]
 800c63a:	690c      	ldr	r4, [r1, #16]
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	4607      	mov	r7, r0
 800c640:	f2c0 8081 	blt.w	800c746 <quorem+0x112>
 800c644:	3c01      	subs	r4, #1
 800c646:	f101 0814 	add.w	r8, r1, #20
 800c64a:	f100 0514 	add.w	r5, r0, #20
 800c64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65c:	3301      	adds	r3, #1
 800c65e:	429a      	cmp	r2, r3
 800c660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c668:	fbb2 f6f3 	udiv	r6, r2, r3
 800c66c:	d331      	bcc.n	800c6d2 <quorem+0x9e>
 800c66e:	f04f 0e00 	mov.w	lr, #0
 800c672:	4640      	mov	r0, r8
 800c674:	46ac      	mov	ip, r5
 800c676:	46f2      	mov	sl, lr
 800c678:	f850 2b04 	ldr.w	r2, [r0], #4
 800c67c:	b293      	uxth	r3, r2
 800c67e:	fb06 e303 	mla	r3, r6, r3, lr
 800c682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c686:	b29b      	uxth	r3, r3
 800c688:	ebaa 0303 	sub.w	r3, sl, r3
 800c68c:	f8dc a000 	ldr.w	sl, [ip]
 800c690:	0c12      	lsrs	r2, r2, #16
 800c692:	fa13 f38a 	uxtah	r3, r3, sl
 800c696:	fb06 e202 	mla	r2, r6, r2, lr
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6a2:	b292      	uxth	r2, r2
 800c6a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6b0:	4581      	cmp	r9, r0
 800c6b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800c6ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6be:	d2db      	bcs.n	800c678 <quorem+0x44>
 800c6c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6c4:	b92b      	cbnz	r3, 800c6d2 <quorem+0x9e>
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	d32e      	bcc.n	800c72e <quorem+0xfa>
 800c6d0:	613c      	str	r4, [r7, #16]
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	f001 fadc 	bl	800dc90 <__mcmp>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	db24      	blt.n	800c726 <quorem+0xf2>
 800c6dc:	3601      	adds	r6, #1
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f04f 0c00 	mov.w	ip, #0
 800c6e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6e8:	f8d0 e000 	ldr.w	lr, [r0]
 800c6ec:	b293      	uxth	r3, r2
 800c6ee:	ebac 0303 	sub.w	r3, ip, r3
 800c6f2:	0c12      	lsrs	r2, r2, #16
 800c6f4:	fa13 f38e 	uxtah	r3, r3, lr
 800c6f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c700:	b29b      	uxth	r3, r3
 800c702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c706:	45c1      	cmp	r9, r8
 800c708:	f840 3b04 	str.w	r3, [r0], #4
 800c70c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c710:	d2e8      	bcs.n	800c6e4 <quorem+0xb0>
 800c712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c71a:	b922      	cbnz	r2, 800c726 <quorem+0xf2>
 800c71c:	3b04      	subs	r3, #4
 800c71e:	429d      	cmp	r5, r3
 800c720:	461a      	mov	r2, r3
 800c722:	d30a      	bcc.n	800c73a <quorem+0x106>
 800c724:	613c      	str	r4, [r7, #16]
 800c726:	4630      	mov	r0, r6
 800c728:	b003      	add	sp, #12
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	6812      	ldr	r2, [r2, #0]
 800c730:	3b04      	subs	r3, #4
 800c732:	2a00      	cmp	r2, #0
 800c734:	d1cc      	bne.n	800c6d0 <quorem+0x9c>
 800c736:	3c01      	subs	r4, #1
 800c738:	e7c7      	b.n	800c6ca <quorem+0x96>
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d1f0      	bne.n	800c724 <quorem+0xf0>
 800c742:	3c01      	subs	r4, #1
 800c744:	e7eb      	b.n	800c71e <quorem+0xea>
 800c746:	2000      	movs	r0, #0
 800c748:	e7ee      	b.n	800c728 <quorem+0xf4>
 800c74a:	0000      	movs	r0, r0
 800c74c:	0000      	movs	r0, r0
	...

0800c750 <_dtoa_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	ed2d 8b04 	vpush	{d8-d9}
 800c758:	ec57 6b10 	vmov	r6, r7, d0
 800c75c:	b093      	sub	sp, #76	; 0x4c
 800c75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c764:	9106      	str	r1, [sp, #24]
 800c766:	ee10 aa10 	vmov	sl, s0
 800c76a:	4604      	mov	r4, r0
 800c76c:	9209      	str	r2, [sp, #36]	; 0x24
 800c76e:	930c      	str	r3, [sp, #48]	; 0x30
 800c770:	46bb      	mov	fp, r7
 800c772:	b975      	cbnz	r5, 800c792 <_dtoa_r+0x42>
 800c774:	2010      	movs	r0, #16
 800c776:	f7ff f843 	bl	800b800 <malloc>
 800c77a:	4602      	mov	r2, r0
 800c77c:	6260      	str	r0, [r4, #36]	; 0x24
 800c77e:	b920      	cbnz	r0, 800c78a <_dtoa_r+0x3a>
 800c780:	4ba7      	ldr	r3, [pc, #668]	; (800ca20 <_dtoa_r+0x2d0>)
 800c782:	21ea      	movs	r1, #234	; 0xea
 800c784:	48a7      	ldr	r0, [pc, #668]	; (800ca24 <_dtoa_r+0x2d4>)
 800c786:	f001 fd4b 	bl	800e220 <__assert_func>
 800c78a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c78e:	6005      	str	r5, [r0, #0]
 800c790:	60c5      	str	r5, [r0, #12]
 800c792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c794:	6819      	ldr	r1, [r3, #0]
 800c796:	b151      	cbz	r1, 800c7ae <_dtoa_r+0x5e>
 800c798:	685a      	ldr	r2, [r3, #4]
 800c79a:	604a      	str	r2, [r1, #4]
 800c79c:	2301      	movs	r3, #1
 800c79e:	4093      	lsls	r3, r2
 800c7a0:	608b      	str	r3, [r1, #8]
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f001 f832 	bl	800d80c <_Bfree>
 800c7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	1e3b      	subs	r3, r7, #0
 800c7b0:	bfaa      	itet	ge
 800c7b2:	2300      	movge	r3, #0
 800c7b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c7b8:	f8c8 3000 	strge.w	r3, [r8]
 800c7bc:	4b9a      	ldr	r3, [pc, #616]	; (800ca28 <_dtoa_r+0x2d8>)
 800c7be:	bfbc      	itt	lt
 800c7c0:	2201      	movlt	r2, #1
 800c7c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c7c6:	ea33 030b 	bics.w	r3, r3, fp
 800c7ca:	d11b      	bne.n	800c804 <_dtoa_r+0xb4>
 800c7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7d8:	4333      	orrs	r3, r6
 800c7da:	f000 8592 	beq.w	800d302 <_dtoa_r+0xbb2>
 800c7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e0:	b963      	cbnz	r3, 800c7fc <_dtoa_r+0xac>
 800c7e2:	4b92      	ldr	r3, [pc, #584]	; (800ca2c <_dtoa_r+0x2dc>)
 800c7e4:	e022      	b.n	800c82c <_dtoa_r+0xdc>
 800c7e6:	4b92      	ldr	r3, [pc, #584]	; (800ca30 <_dtoa_r+0x2e0>)
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	9801      	ldr	r0, [sp, #4]
 800c7f2:	b013      	add	sp, #76	; 0x4c
 800c7f4:	ecbd 8b04 	vpop	{d8-d9}
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	4b8b      	ldr	r3, [pc, #556]	; (800ca2c <_dtoa_r+0x2dc>)
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	3303      	adds	r3, #3
 800c802:	e7f3      	b.n	800c7ec <_dtoa_r+0x9c>
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	f7f4 f984 	bl	8000b18 <__aeabi_dcmpeq>
 800c810:	ec4b ab19 	vmov	d9, sl, fp
 800c814:	4680      	mov	r8, r0
 800c816:	b158      	cbz	r0, 800c830 <_dtoa_r+0xe0>
 800c818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c81a:	2301      	movs	r3, #1
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 856b 	beq.w	800d2fc <_dtoa_r+0xbac>
 800c826:	4883      	ldr	r0, [pc, #524]	; (800ca34 <_dtoa_r+0x2e4>)
 800c828:	6018      	str	r0, [r3, #0]
 800c82a:	1e43      	subs	r3, r0, #1
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	e7df      	b.n	800c7f0 <_dtoa_r+0xa0>
 800c830:	ec4b ab10 	vmov	d0, sl, fp
 800c834:	aa10      	add	r2, sp, #64	; 0x40
 800c836:	a911      	add	r1, sp, #68	; 0x44
 800c838:	4620      	mov	r0, r4
 800c83a:	f001 facf 	bl	800dddc <__d2b>
 800c83e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c842:	ee08 0a10 	vmov	s16, r0
 800c846:	2d00      	cmp	r5, #0
 800c848:	f000 8084 	beq.w	800c954 <_dtoa_r+0x204>
 800c84c:	ee19 3a90 	vmov	r3, s19
 800c850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c854:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c858:	4656      	mov	r6, sl
 800c85a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c85e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c862:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c866:	4b74      	ldr	r3, [pc, #464]	; (800ca38 <_dtoa_r+0x2e8>)
 800c868:	2200      	movs	r2, #0
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fd33 	bl	80002d8 <__aeabi_dsub>
 800c872:	a365      	add	r3, pc, #404	; (adr r3, 800ca08 <_dtoa_r+0x2b8>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fee6 	bl	8000648 <__aeabi_dmul>
 800c87c:	a364      	add	r3, pc, #400	; (adr r3, 800ca10 <_dtoa_r+0x2c0>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f3 fd2b 	bl	80002dc <__adddf3>
 800c886:	4606      	mov	r6, r0
 800c888:	4628      	mov	r0, r5
 800c88a:	460f      	mov	r7, r1
 800c88c:	f7f3 fe72 	bl	8000574 <__aeabi_i2d>
 800c890:	a361      	add	r3, pc, #388	; (adr r3, 800ca18 <_dtoa_r+0x2c8>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fed7 	bl	8000648 <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4630      	mov	r0, r6
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	f7f3 fd1b 	bl	80002dc <__adddf3>
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	460f      	mov	r7, r1
 800c8aa:	f7f4 f97d 	bl	8000ba8 <__aeabi_d2iz>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	9000      	str	r0, [sp, #0]
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f4 f938 	bl	8000b2c <__aeabi_dcmplt>
 800c8bc:	b150      	cbz	r0, 800c8d4 <_dtoa_r+0x184>
 800c8be:	9800      	ldr	r0, [sp, #0]
 800c8c0:	f7f3 fe58 	bl	8000574 <__aeabi_i2d>
 800c8c4:	4632      	mov	r2, r6
 800c8c6:	463b      	mov	r3, r7
 800c8c8:	f7f4 f926 	bl	8000b18 <__aeabi_dcmpeq>
 800c8cc:	b910      	cbnz	r0, 800c8d4 <_dtoa_r+0x184>
 800c8ce:	9b00      	ldr	r3, [sp, #0]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	2b16      	cmp	r3, #22
 800c8d8:	d85a      	bhi.n	800c990 <_dtoa_r+0x240>
 800c8da:	9a00      	ldr	r2, [sp, #0]
 800c8dc:	4b57      	ldr	r3, [pc, #348]	; (800ca3c <_dtoa_r+0x2ec>)
 800c8de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	ec51 0b19 	vmov	r0, r1, d9
 800c8ea:	f7f4 f91f 	bl	8000b2c <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d050      	beq.n	800c994 <_dtoa_r+0x244>
 800c8f2:	9b00      	ldr	r3, [sp, #0]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8fe:	1b5d      	subs	r5, r3, r5
 800c900:	1e6b      	subs	r3, r5, #1
 800c902:	9305      	str	r3, [sp, #20]
 800c904:	bf45      	ittet	mi
 800c906:	f1c5 0301 	rsbmi	r3, r5, #1
 800c90a:	9304      	strmi	r3, [sp, #16]
 800c90c:	2300      	movpl	r3, #0
 800c90e:	2300      	movmi	r3, #0
 800c910:	bf4c      	ite	mi
 800c912:	9305      	strmi	r3, [sp, #20]
 800c914:	9304      	strpl	r3, [sp, #16]
 800c916:	9b00      	ldr	r3, [sp, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	db3d      	blt.n	800c998 <_dtoa_r+0x248>
 800c91c:	9b05      	ldr	r3, [sp, #20]
 800c91e:	9a00      	ldr	r2, [sp, #0]
 800c920:	920a      	str	r2, [sp, #40]	; 0x28
 800c922:	4413      	add	r3, r2
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	2300      	movs	r3, #0
 800c928:	9307      	str	r3, [sp, #28]
 800c92a:	9b06      	ldr	r3, [sp, #24]
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	f200 8089 	bhi.w	800ca44 <_dtoa_r+0x2f4>
 800c932:	2b05      	cmp	r3, #5
 800c934:	bfc4      	itt	gt
 800c936:	3b04      	subgt	r3, #4
 800c938:	9306      	strgt	r3, [sp, #24]
 800c93a:	9b06      	ldr	r3, [sp, #24]
 800c93c:	f1a3 0302 	sub.w	r3, r3, #2
 800c940:	bfcc      	ite	gt
 800c942:	2500      	movgt	r5, #0
 800c944:	2501      	movle	r5, #1
 800c946:	2b03      	cmp	r3, #3
 800c948:	f200 8087 	bhi.w	800ca5a <_dtoa_r+0x30a>
 800c94c:	e8df f003 	tbb	[pc, r3]
 800c950:	59383a2d 	.word	0x59383a2d
 800c954:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c958:	441d      	add	r5, r3
 800c95a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c95e:	2b20      	cmp	r3, #32
 800c960:	bfc1      	itttt	gt
 800c962:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c966:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c96a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c96e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c972:	bfda      	itte	le
 800c974:	f1c3 0320 	rsble	r3, r3, #32
 800c978:	fa06 f003 	lslle.w	r0, r6, r3
 800c97c:	4318      	orrgt	r0, r3
 800c97e:	f7f3 fde9 	bl	8000554 <__aeabi_ui2d>
 800c982:	2301      	movs	r3, #1
 800c984:	4606      	mov	r6, r0
 800c986:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c98a:	3d01      	subs	r5, #1
 800c98c:	930e      	str	r3, [sp, #56]	; 0x38
 800c98e:	e76a      	b.n	800c866 <_dtoa_r+0x116>
 800c990:	2301      	movs	r3, #1
 800c992:	e7b2      	b.n	800c8fa <_dtoa_r+0x1aa>
 800c994:	900b      	str	r0, [sp, #44]	; 0x2c
 800c996:	e7b1      	b.n	800c8fc <_dtoa_r+0x1ac>
 800c998:	9b04      	ldr	r3, [sp, #16]
 800c99a:	9a00      	ldr	r2, [sp, #0]
 800c99c:	1a9b      	subs	r3, r3, r2
 800c99e:	9304      	str	r3, [sp, #16]
 800c9a0:	4253      	negs	r3, r2
 800c9a2:	9307      	str	r3, [sp, #28]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c9a8:	e7bf      	b.n	800c92a <_dtoa_r+0x1da>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9308      	str	r3, [sp, #32]
 800c9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dc55      	bgt.n	800ca60 <_dtoa_r+0x310>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9be:	e00c      	b.n	800c9da <_dtoa_r+0x28a>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e7f3      	b.n	800c9ac <_dtoa_r+0x25c>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9c8:	9308      	str	r3, [sp, #32]
 800c9ca:	9b00      	ldr	r3, [sp, #0]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	9302      	str	r3, [sp, #8]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	bfb8      	it	lt
 800c9d8:	2301      	movlt	r3, #1
 800c9da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9dc:	2200      	movs	r2, #0
 800c9de:	6042      	str	r2, [r0, #4]
 800c9e0:	2204      	movs	r2, #4
 800c9e2:	f102 0614 	add.w	r6, r2, #20
 800c9e6:	429e      	cmp	r6, r3
 800c9e8:	6841      	ldr	r1, [r0, #4]
 800c9ea:	d93d      	bls.n	800ca68 <_dtoa_r+0x318>
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f000 fecd 	bl	800d78c <_Balloc>
 800c9f2:	9001      	str	r0, [sp, #4]
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d13b      	bne.n	800ca70 <_dtoa_r+0x320>
 800c9f8:	4b11      	ldr	r3, [pc, #68]	; (800ca40 <_dtoa_r+0x2f0>)
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca00:	e6c0      	b.n	800c784 <_dtoa_r+0x34>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e7df      	b.n	800c9c6 <_dtoa_r+0x276>
 800ca06:	bf00      	nop
 800ca08:	636f4361 	.word	0x636f4361
 800ca0c:	3fd287a7 	.word	0x3fd287a7
 800ca10:	8b60c8b3 	.word	0x8b60c8b3
 800ca14:	3fc68a28 	.word	0x3fc68a28
 800ca18:	509f79fb 	.word	0x509f79fb
 800ca1c:	3fd34413 	.word	0x3fd34413
 800ca20:	0800f5cd 	.word	0x0800f5cd
 800ca24:	0800f5e4 	.word	0x0800f5e4
 800ca28:	7ff00000 	.word	0x7ff00000
 800ca2c:	0800f5c9 	.word	0x0800f5c9
 800ca30:	0800f5c0 	.word	0x0800f5c0
 800ca34:	0800f59d 	.word	0x0800f59d
 800ca38:	3ff80000 	.word	0x3ff80000
 800ca3c:	0800f738 	.word	0x0800f738
 800ca40:	0800f63f 	.word	0x0800f63f
 800ca44:	2501      	movs	r5, #1
 800ca46:	2300      	movs	r3, #0
 800ca48:	9306      	str	r3, [sp, #24]
 800ca4a:	9508      	str	r5, [sp, #32]
 800ca4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca54:	2200      	movs	r2, #0
 800ca56:	2312      	movs	r3, #18
 800ca58:	e7b0      	b.n	800c9bc <_dtoa_r+0x26c>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	9308      	str	r3, [sp, #32]
 800ca5e:	e7f5      	b.n	800ca4c <_dtoa_r+0x2fc>
 800ca60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca66:	e7b8      	b.n	800c9da <_dtoa_r+0x28a>
 800ca68:	3101      	adds	r1, #1
 800ca6a:	6041      	str	r1, [r0, #4]
 800ca6c:	0052      	lsls	r2, r2, #1
 800ca6e:	e7b8      	b.n	800c9e2 <_dtoa_r+0x292>
 800ca70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca72:	9a01      	ldr	r2, [sp, #4]
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	2b0e      	cmp	r3, #14
 800ca7a:	f200 809d 	bhi.w	800cbb8 <_dtoa_r+0x468>
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	f000 809a 	beq.w	800cbb8 <_dtoa_r+0x468>
 800ca84:	9b00      	ldr	r3, [sp, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	dd32      	ble.n	800caf0 <_dtoa_r+0x3a0>
 800ca8a:	4ab7      	ldr	r2, [pc, #732]	; (800cd68 <_dtoa_r+0x618>)
 800ca8c:	f003 030f 	and.w	r3, r3, #15
 800ca90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	05d8      	lsls	r0, r3, #23
 800ca9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800caa0:	d516      	bpl.n	800cad0 <_dtoa_r+0x380>
 800caa2:	4bb2      	ldr	r3, [pc, #712]	; (800cd6c <_dtoa_r+0x61c>)
 800caa4:	ec51 0b19 	vmov	r0, r1, d9
 800caa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800caac:	f7f3 fef6 	bl	800089c <__aeabi_ddiv>
 800cab0:	f007 070f 	and.w	r7, r7, #15
 800cab4:	4682      	mov	sl, r0
 800cab6:	468b      	mov	fp, r1
 800cab8:	2503      	movs	r5, #3
 800caba:	4eac      	ldr	r6, [pc, #688]	; (800cd6c <_dtoa_r+0x61c>)
 800cabc:	b957      	cbnz	r7, 800cad4 <_dtoa_r+0x384>
 800cabe:	4642      	mov	r2, r8
 800cac0:	464b      	mov	r3, r9
 800cac2:	4650      	mov	r0, sl
 800cac4:	4659      	mov	r1, fp
 800cac6:	f7f3 fee9 	bl	800089c <__aeabi_ddiv>
 800caca:	4682      	mov	sl, r0
 800cacc:	468b      	mov	fp, r1
 800cace:	e028      	b.n	800cb22 <_dtoa_r+0x3d2>
 800cad0:	2502      	movs	r5, #2
 800cad2:	e7f2      	b.n	800caba <_dtoa_r+0x36a>
 800cad4:	07f9      	lsls	r1, r7, #31
 800cad6:	d508      	bpl.n	800caea <_dtoa_r+0x39a>
 800cad8:	4640      	mov	r0, r8
 800cada:	4649      	mov	r1, r9
 800cadc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cae0:	f7f3 fdb2 	bl	8000648 <__aeabi_dmul>
 800cae4:	3501      	adds	r5, #1
 800cae6:	4680      	mov	r8, r0
 800cae8:	4689      	mov	r9, r1
 800caea:	107f      	asrs	r7, r7, #1
 800caec:	3608      	adds	r6, #8
 800caee:	e7e5      	b.n	800cabc <_dtoa_r+0x36c>
 800caf0:	f000 809b 	beq.w	800cc2a <_dtoa_r+0x4da>
 800caf4:	9b00      	ldr	r3, [sp, #0]
 800caf6:	4f9d      	ldr	r7, [pc, #628]	; (800cd6c <_dtoa_r+0x61c>)
 800caf8:	425e      	negs	r6, r3
 800cafa:	4b9b      	ldr	r3, [pc, #620]	; (800cd68 <_dtoa_r+0x618>)
 800cafc:	f006 020f 	and.w	r2, r6, #15
 800cb00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	ec51 0b19 	vmov	r0, r1, d9
 800cb0c:	f7f3 fd9c 	bl	8000648 <__aeabi_dmul>
 800cb10:	1136      	asrs	r6, r6, #4
 800cb12:	4682      	mov	sl, r0
 800cb14:	468b      	mov	fp, r1
 800cb16:	2300      	movs	r3, #0
 800cb18:	2502      	movs	r5, #2
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d17a      	bne.n	800cc14 <_dtoa_r+0x4c4>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1d3      	bne.n	800caca <_dtoa_r+0x37a>
 800cb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f000 8082 	beq.w	800cc2e <_dtoa_r+0x4de>
 800cb2a:	4b91      	ldr	r3, [pc, #580]	; (800cd70 <_dtoa_r+0x620>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4650      	mov	r0, sl
 800cb30:	4659      	mov	r1, fp
 800cb32:	f7f3 fffb 	bl	8000b2c <__aeabi_dcmplt>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d079      	beq.n	800cc2e <_dtoa_r+0x4de>
 800cb3a:	9b03      	ldr	r3, [sp, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d076      	beq.n	800cc2e <_dtoa_r+0x4de>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dd36      	ble.n	800cbb4 <_dtoa_r+0x464>
 800cb46:	9b00      	ldr	r3, [sp, #0]
 800cb48:	4650      	mov	r0, sl
 800cb4a:	4659      	mov	r1, fp
 800cb4c:	1e5f      	subs	r7, r3, #1
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4b88      	ldr	r3, [pc, #544]	; (800cd74 <_dtoa_r+0x624>)
 800cb52:	f7f3 fd79 	bl	8000648 <__aeabi_dmul>
 800cb56:	9e02      	ldr	r6, [sp, #8]
 800cb58:	4682      	mov	sl, r0
 800cb5a:	468b      	mov	fp, r1
 800cb5c:	3501      	adds	r5, #1
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7f3 fd08 	bl	8000574 <__aeabi_i2d>
 800cb64:	4652      	mov	r2, sl
 800cb66:	465b      	mov	r3, fp
 800cb68:	f7f3 fd6e 	bl	8000648 <__aeabi_dmul>
 800cb6c:	4b82      	ldr	r3, [pc, #520]	; (800cd78 <_dtoa_r+0x628>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f7f3 fbb4 	bl	80002dc <__adddf3>
 800cb74:	46d0      	mov	r8, sl
 800cb76:	46d9      	mov	r9, fp
 800cb78:	4682      	mov	sl, r0
 800cb7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	d158      	bne.n	800cc34 <_dtoa_r+0x4e4>
 800cb82:	4b7e      	ldr	r3, [pc, #504]	; (800cd7c <_dtoa_r+0x62c>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4640      	mov	r0, r8
 800cb88:	4649      	mov	r1, r9
 800cb8a:	f7f3 fba5 	bl	80002d8 <__aeabi_dsub>
 800cb8e:	4652      	mov	r2, sl
 800cb90:	465b      	mov	r3, fp
 800cb92:	4680      	mov	r8, r0
 800cb94:	4689      	mov	r9, r1
 800cb96:	f7f3 ffe7 	bl	8000b68 <__aeabi_dcmpgt>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	f040 8295 	bne.w	800d0ca <_dtoa_r+0x97a>
 800cba0:	4652      	mov	r2, sl
 800cba2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cba6:	4640      	mov	r0, r8
 800cba8:	4649      	mov	r1, r9
 800cbaa:	f7f3 ffbf 	bl	8000b2c <__aeabi_dcmplt>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	f040 8289 	bne.w	800d0c6 <_dtoa_r+0x976>
 800cbb4:	ec5b ab19 	vmov	sl, fp, d9
 800cbb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f2c0 8148 	blt.w	800ce50 <_dtoa_r+0x700>
 800cbc0:	9a00      	ldr	r2, [sp, #0]
 800cbc2:	2a0e      	cmp	r2, #14
 800cbc4:	f300 8144 	bgt.w	800ce50 <_dtoa_r+0x700>
 800cbc8:	4b67      	ldr	r3, [pc, #412]	; (800cd68 <_dtoa_r+0x618>)
 800cbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f280 80d5 	bge.w	800cd84 <_dtoa_r+0x634>
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f300 80d1 	bgt.w	800cd84 <_dtoa_r+0x634>
 800cbe2:	f040 826f 	bne.w	800d0c4 <_dtoa_r+0x974>
 800cbe6:	4b65      	ldr	r3, [pc, #404]	; (800cd7c <_dtoa_r+0x62c>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4640      	mov	r0, r8
 800cbec:	4649      	mov	r1, r9
 800cbee:	f7f3 fd2b 	bl	8000648 <__aeabi_dmul>
 800cbf2:	4652      	mov	r2, sl
 800cbf4:	465b      	mov	r3, fp
 800cbf6:	f7f3 ffad 	bl	8000b54 <__aeabi_dcmpge>
 800cbfa:	9e03      	ldr	r6, [sp, #12]
 800cbfc:	4637      	mov	r7, r6
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f040 8245 	bne.w	800d08e <_dtoa_r+0x93e>
 800cc04:	9d01      	ldr	r5, [sp, #4]
 800cc06:	2331      	movs	r3, #49	; 0x31
 800cc08:	f805 3b01 	strb.w	r3, [r5], #1
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	e240      	b.n	800d096 <_dtoa_r+0x946>
 800cc14:	07f2      	lsls	r2, r6, #31
 800cc16:	d505      	bpl.n	800cc24 <_dtoa_r+0x4d4>
 800cc18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc1c:	f7f3 fd14 	bl	8000648 <__aeabi_dmul>
 800cc20:	3501      	adds	r5, #1
 800cc22:	2301      	movs	r3, #1
 800cc24:	1076      	asrs	r6, r6, #1
 800cc26:	3708      	adds	r7, #8
 800cc28:	e777      	b.n	800cb1a <_dtoa_r+0x3ca>
 800cc2a:	2502      	movs	r5, #2
 800cc2c:	e779      	b.n	800cb22 <_dtoa_r+0x3d2>
 800cc2e:	9f00      	ldr	r7, [sp, #0]
 800cc30:	9e03      	ldr	r6, [sp, #12]
 800cc32:	e794      	b.n	800cb5e <_dtoa_r+0x40e>
 800cc34:	9901      	ldr	r1, [sp, #4]
 800cc36:	4b4c      	ldr	r3, [pc, #304]	; (800cd68 <_dtoa_r+0x618>)
 800cc38:	4431      	add	r1, r6
 800cc3a:	910d      	str	r1, [sp, #52]	; 0x34
 800cc3c:	9908      	ldr	r1, [sp, #32]
 800cc3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc46:	2900      	cmp	r1, #0
 800cc48:	d043      	beq.n	800ccd2 <_dtoa_r+0x582>
 800cc4a:	494d      	ldr	r1, [pc, #308]	; (800cd80 <_dtoa_r+0x630>)
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f7f3 fe25 	bl	800089c <__aeabi_ddiv>
 800cc52:	4652      	mov	r2, sl
 800cc54:	465b      	mov	r3, fp
 800cc56:	f7f3 fb3f 	bl	80002d8 <__aeabi_dsub>
 800cc5a:	9d01      	ldr	r5, [sp, #4]
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	468b      	mov	fp, r1
 800cc60:	4649      	mov	r1, r9
 800cc62:	4640      	mov	r0, r8
 800cc64:	f7f3 ffa0 	bl	8000ba8 <__aeabi_d2iz>
 800cc68:	4606      	mov	r6, r0
 800cc6a:	f7f3 fc83 	bl	8000574 <__aeabi_i2d>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4640      	mov	r0, r8
 800cc74:	4649      	mov	r1, r9
 800cc76:	f7f3 fb2f 	bl	80002d8 <__aeabi_dsub>
 800cc7a:	3630      	adds	r6, #48	; 0x30
 800cc7c:	f805 6b01 	strb.w	r6, [r5], #1
 800cc80:	4652      	mov	r2, sl
 800cc82:	465b      	mov	r3, fp
 800cc84:	4680      	mov	r8, r0
 800cc86:	4689      	mov	r9, r1
 800cc88:	f7f3 ff50 	bl	8000b2c <__aeabi_dcmplt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d163      	bne.n	800cd58 <_dtoa_r+0x608>
 800cc90:	4642      	mov	r2, r8
 800cc92:	464b      	mov	r3, r9
 800cc94:	4936      	ldr	r1, [pc, #216]	; (800cd70 <_dtoa_r+0x620>)
 800cc96:	2000      	movs	r0, #0
 800cc98:	f7f3 fb1e 	bl	80002d8 <__aeabi_dsub>
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	465b      	mov	r3, fp
 800cca0:	f7f3 ff44 	bl	8000b2c <__aeabi_dcmplt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	f040 80b5 	bne.w	800ce14 <_dtoa_r+0x6c4>
 800ccaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccac:	429d      	cmp	r5, r3
 800ccae:	d081      	beq.n	800cbb4 <_dtoa_r+0x464>
 800ccb0:	4b30      	ldr	r3, [pc, #192]	; (800cd74 <_dtoa_r+0x624>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4650      	mov	r0, sl
 800ccb6:	4659      	mov	r1, fp
 800ccb8:	f7f3 fcc6 	bl	8000648 <__aeabi_dmul>
 800ccbc:	4b2d      	ldr	r3, [pc, #180]	; (800cd74 <_dtoa_r+0x624>)
 800ccbe:	4682      	mov	sl, r0
 800ccc0:	468b      	mov	fp, r1
 800ccc2:	4640      	mov	r0, r8
 800ccc4:	4649      	mov	r1, r9
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f7f3 fcbe 	bl	8000648 <__aeabi_dmul>
 800cccc:	4680      	mov	r8, r0
 800ccce:	4689      	mov	r9, r1
 800ccd0:	e7c6      	b.n	800cc60 <_dtoa_r+0x510>
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	f7f3 fcb7 	bl	8000648 <__aeabi_dmul>
 800ccda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccdc:	9d01      	ldr	r5, [sp, #4]
 800ccde:	930f      	str	r3, [sp, #60]	; 0x3c
 800cce0:	4682      	mov	sl, r0
 800cce2:	468b      	mov	fp, r1
 800cce4:	4649      	mov	r1, r9
 800cce6:	4640      	mov	r0, r8
 800cce8:	f7f3 ff5e 	bl	8000ba8 <__aeabi_d2iz>
 800ccec:	4606      	mov	r6, r0
 800ccee:	f7f3 fc41 	bl	8000574 <__aeabi_i2d>
 800ccf2:	3630      	adds	r6, #48	; 0x30
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 faec 	bl	80002d8 <__aeabi_dsub>
 800cd00:	f805 6b01 	strb.w	r6, [r5], #1
 800cd04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd06:	429d      	cmp	r5, r3
 800cd08:	4680      	mov	r8, r0
 800cd0a:	4689      	mov	r9, r1
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	d124      	bne.n	800cd5c <_dtoa_r+0x60c>
 800cd12:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <_dtoa_r+0x630>)
 800cd14:	4650      	mov	r0, sl
 800cd16:	4659      	mov	r1, fp
 800cd18:	f7f3 fae0 	bl	80002dc <__adddf3>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4640      	mov	r0, r8
 800cd22:	4649      	mov	r1, r9
 800cd24:	f7f3 ff20 	bl	8000b68 <__aeabi_dcmpgt>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d173      	bne.n	800ce14 <_dtoa_r+0x6c4>
 800cd2c:	4652      	mov	r2, sl
 800cd2e:	465b      	mov	r3, fp
 800cd30:	4913      	ldr	r1, [pc, #76]	; (800cd80 <_dtoa_r+0x630>)
 800cd32:	2000      	movs	r0, #0
 800cd34:	f7f3 fad0 	bl	80002d8 <__aeabi_dsub>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	4649      	mov	r1, r9
 800cd40:	f7f3 fef4 	bl	8000b2c <__aeabi_dcmplt>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f43f af35 	beq.w	800cbb4 <_dtoa_r+0x464>
 800cd4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd4c:	1e6b      	subs	r3, r5, #1
 800cd4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd54:	2b30      	cmp	r3, #48	; 0x30
 800cd56:	d0f8      	beq.n	800cd4a <_dtoa_r+0x5fa>
 800cd58:	9700      	str	r7, [sp, #0]
 800cd5a:	e049      	b.n	800cdf0 <_dtoa_r+0x6a0>
 800cd5c:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <_dtoa_r+0x624>)
 800cd5e:	f7f3 fc73 	bl	8000648 <__aeabi_dmul>
 800cd62:	4680      	mov	r8, r0
 800cd64:	4689      	mov	r9, r1
 800cd66:	e7bd      	b.n	800cce4 <_dtoa_r+0x594>
 800cd68:	0800f738 	.word	0x0800f738
 800cd6c:	0800f710 	.word	0x0800f710
 800cd70:	3ff00000 	.word	0x3ff00000
 800cd74:	40240000 	.word	0x40240000
 800cd78:	401c0000 	.word	0x401c0000
 800cd7c:	40140000 	.word	0x40140000
 800cd80:	3fe00000 	.word	0x3fe00000
 800cd84:	9d01      	ldr	r5, [sp, #4]
 800cd86:	4656      	mov	r6, sl
 800cd88:	465f      	mov	r7, fp
 800cd8a:	4642      	mov	r2, r8
 800cd8c:	464b      	mov	r3, r9
 800cd8e:	4630      	mov	r0, r6
 800cd90:	4639      	mov	r1, r7
 800cd92:	f7f3 fd83 	bl	800089c <__aeabi_ddiv>
 800cd96:	f7f3 ff07 	bl	8000ba8 <__aeabi_d2iz>
 800cd9a:	4682      	mov	sl, r0
 800cd9c:	f7f3 fbea 	bl	8000574 <__aeabi_i2d>
 800cda0:	4642      	mov	r2, r8
 800cda2:	464b      	mov	r3, r9
 800cda4:	f7f3 fc50 	bl	8000648 <__aeabi_dmul>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	4630      	mov	r0, r6
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cdb4:	f7f3 fa90 	bl	80002d8 <__aeabi_dsub>
 800cdb8:	f805 6b01 	strb.w	r6, [r5], #1
 800cdbc:	9e01      	ldr	r6, [sp, #4]
 800cdbe:	9f03      	ldr	r7, [sp, #12]
 800cdc0:	1bae      	subs	r6, r5, r6
 800cdc2:	42b7      	cmp	r7, r6
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	d135      	bne.n	800ce36 <_dtoa_r+0x6e6>
 800cdca:	f7f3 fa87 	bl	80002dc <__adddf3>
 800cdce:	4642      	mov	r2, r8
 800cdd0:	464b      	mov	r3, r9
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460f      	mov	r7, r1
 800cdd6:	f7f3 fec7 	bl	8000b68 <__aeabi_dcmpgt>
 800cdda:	b9d0      	cbnz	r0, 800ce12 <_dtoa_r+0x6c2>
 800cddc:	4642      	mov	r2, r8
 800cdde:	464b      	mov	r3, r9
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	f7f3 fe98 	bl	8000b18 <__aeabi_dcmpeq>
 800cde8:	b110      	cbz	r0, 800cdf0 <_dtoa_r+0x6a0>
 800cdea:	f01a 0f01 	tst.w	sl, #1
 800cdee:	d110      	bne.n	800ce12 <_dtoa_r+0x6c2>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	ee18 1a10 	vmov	r1, s16
 800cdf6:	f000 fd09 	bl	800d80c <_Bfree>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9800      	ldr	r0, [sp, #0]
 800cdfe:	702b      	strb	r3, [r5, #0]
 800ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce02:	3001      	adds	r0, #1
 800ce04:	6018      	str	r0, [r3, #0]
 800ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f43f acf1 	beq.w	800c7f0 <_dtoa_r+0xa0>
 800ce0e:	601d      	str	r5, [r3, #0]
 800ce10:	e4ee      	b.n	800c7f0 <_dtoa_r+0xa0>
 800ce12:	9f00      	ldr	r7, [sp, #0]
 800ce14:	462b      	mov	r3, r5
 800ce16:	461d      	mov	r5, r3
 800ce18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce1c:	2a39      	cmp	r2, #57	; 0x39
 800ce1e:	d106      	bne.n	800ce2e <_dtoa_r+0x6de>
 800ce20:	9a01      	ldr	r2, [sp, #4]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d1f7      	bne.n	800ce16 <_dtoa_r+0x6c6>
 800ce26:	9901      	ldr	r1, [sp, #4]
 800ce28:	2230      	movs	r2, #48	; 0x30
 800ce2a:	3701      	adds	r7, #1
 800ce2c:	700a      	strb	r2, [r1, #0]
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	3201      	adds	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]
 800ce34:	e790      	b.n	800cd58 <_dtoa_r+0x608>
 800ce36:	4ba6      	ldr	r3, [pc, #664]	; (800d0d0 <_dtoa_r+0x980>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f7f3 fc05 	bl	8000648 <__aeabi_dmul>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	2300      	movs	r3, #0
 800ce42:	4606      	mov	r6, r0
 800ce44:	460f      	mov	r7, r1
 800ce46:	f7f3 fe67 	bl	8000b18 <__aeabi_dcmpeq>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d09d      	beq.n	800cd8a <_dtoa_r+0x63a>
 800ce4e:	e7cf      	b.n	800cdf0 <_dtoa_r+0x6a0>
 800ce50:	9a08      	ldr	r2, [sp, #32]
 800ce52:	2a00      	cmp	r2, #0
 800ce54:	f000 80d7 	beq.w	800d006 <_dtoa_r+0x8b6>
 800ce58:	9a06      	ldr	r2, [sp, #24]
 800ce5a:	2a01      	cmp	r2, #1
 800ce5c:	f300 80ba 	bgt.w	800cfd4 <_dtoa_r+0x884>
 800ce60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	f000 80b2 	beq.w	800cfcc <_dtoa_r+0x87c>
 800ce68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce6c:	9e07      	ldr	r6, [sp, #28]
 800ce6e:	9d04      	ldr	r5, [sp, #16]
 800ce70:	9a04      	ldr	r2, [sp, #16]
 800ce72:	441a      	add	r2, r3
 800ce74:	9204      	str	r2, [sp, #16]
 800ce76:	9a05      	ldr	r2, [sp, #20]
 800ce78:	2101      	movs	r1, #1
 800ce7a:	441a      	add	r2, r3
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	9205      	str	r2, [sp, #20]
 800ce80:	f000 fd7c 	bl	800d97c <__i2b>
 800ce84:	4607      	mov	r7, r0
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	dd0c      	ble.n	800cea4 <_dtoa_r+0x754>
 800ce8a:	9b05      	ldr	r3, [sp, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	dd09      	ble.n	800cea4 <_dtoa_r+0x754>
 800ce90:	42ab      	cmp	r3, r5
 800ce92:	9a04      	ldr	r2, [sp, #16]
 800ce94:	bfa8      	it	ge
 800ce96:	462b      	movge	r3, r5
 800ce98:	1ad2      	subs	r2, r2, r3
 800ce9a:	9204      	str	r2, [sp, #16]
 800ce9c:	9a05      	ldr	r2, [sp, #20]
 800ce9e:	1aed      	subs	r5, r5, r3
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	9305      	str	r3, [sp, #20]
 800cea4:	9b07      	ldr	r3, [sp, #28]
 800cea6:	b31b      	cbz	r3, 800cef0 <_dtoa_r+0x7a0>
 800cea8:	9b08      	ldr	r3, [sp, #32]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 80af 	beq.w	800d00e <_dtoa_r+0x8be>
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	dd13      	ble.n	800cedc <_dtoa_r+0x78c>
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	4632      	mov	r2, r6
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f000 fe1f 	bl	800dafc <__pow5mult>
 800cebe:	ee18 2a10 	vmov	r2, s16
 800cec2:	4601      	mov	r1, r0
 800cec4:	4607      	mov	r7, r0
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 fd6e 	bl	800d9a8 <__multiply>
 800cecc:	ee18 1a10 	vmov	r1, s16
 800ced0:	4680      	mov	r8, r0
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fc9a 	bl	800d80c <_Bfree>
 800ced8:	ee08 8a10 	vmov	s16, r8
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	1b9a      	subs	r2, r3, r6
 800cee0:	d006      	beq.n	800cef0 <_dtoa_r+0x7a0>
 800cee2:	ee18 1a10 	vmov	r1, s16
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fe08 	bl	800dafc <__pow5mult>
 800ceec:	ee08 0a10 	vmov	s16, r0
 800cef0:	2101      	movs	r1, #1
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 fd42 	bl	800d97c <__i2b>
 800cef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	4606      	mov	r6, r0
 800cefe:	f340 8088 	ble.w	800d012 <_dtoa_r+0x8c2>
 800cf02:	461a      	mov	r2, r3
 800cf04:	4601      	mov	r1, r0
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 fdf8 	bl	800dafc <__pow5mult>
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	4606      	mov	r6, r0
 800cf12:	f340 8081 	ble.w	800d018 <_dtoa_r+0x8c8>
 800cf16:	f04f 0800 	mov.w	r8, #0
 800cf1a:	6933      	ldr	r3, [r6, #16]
 800cf1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf20:	6918      	ldr	r0, [r3, #16]
 800cf22:	f000 fcdb 	bl	800d8dc <__hi0bits>
 800cf26:	f1c0 0020 	rsb	r0, r0, #32
 800cf2a:	9b05      	ldr	r3, [sp, #20]
 800cf2c:	4418      	add	r0, r3
 800cf2e:	f010 001f 	ands.w	r0, r0, #31
 800cf32:	f000 8092 	beq.w	800d05a <_dtoa_r+0x90a>
 800cf36:	f1c0 0320 	rsb	r3, r0, #32
 800cf3a:	2b04      	cmp	r3, #4
 800cf3c:	f340 808a 	ble.w	800d054 <_dtoa_r+0x904>
 800cf40:	f1c0 001c 	rsb	r0, r0, #28
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	4403      	add	r3, r0
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	9b05      	ldr	r3, [sp, #20]
 800cf4c:	4403      	add	r3, r0
 800cf4e:	4405      	add	r5, r0
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	9b04      	ldr	r3, [sp, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	dd07      	ble.n	800cf68 <_dtoa_r+0x818>
 800cf58:	ee18 1a10 	vmov	r1, s16
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 fe26 	bl	800dbb0 <__lshift>
 800cf64:	ee08 0a10 	vmov	s16, r0
 800cf68:	9b05      	ldr	r3, [sp, #20]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	dd05      	ble.n	800cf7a <_dtoa_r+0x82a>
 800cf6e:	4631      	mov	r1, r6
 800cf70:	461a      	mov	r2, r3
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 fe1c 	bl	800dbb0 <__lshift>
 800cf78:	4606      	mov	r6, r0
 800cf7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d06e      	beq.n	800d05e <_dtoa_r+0x90e>
 800cf80:	ee18 0a10 	vmov	r0, s16
 800cf84:	4631      	mov	r1, r6
 800cf86:	f000 fe83 	bl	800dc90 <__mcmp>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	da67      	bge.n	800d05e <_dtoa_r+0x90e>
 800cf8e:	9b00      	ldr	r3, [sp, #0]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	ee18 1a10 	vmov	r1, s16
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	220a      	movs	r2, #10
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fc57 	bl	800d850 <__multadd>
 800cfa2:	9b08      	ldr	r3, [sp, #32]
 800cfa4:	ee08 0a10 	vmov	s16, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 81b1 	beq.w	800d310 <_dtoa_r+0xbc0>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	220a      	movs	r2, #10
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 fc4b 	bl	800d850 <__multadd>
 800cfba:	9b02      	ldr	r3, [sp, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	f300 808e 	bgt.w	800d0e0 <_dtoa_r+0x990>
 800cfc4:	9b06      	ldr	r3, [sp, #24]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	dc51      	bgt.n	800d06e <_dtoa_r+0x91e>
 800cfca:	e089      	b.n	800d0e0 <_dtoa_r+0x990>
 800cfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfd2:	e74b      	b.n	800ce6c <_dtoa_r+0x71c>
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	1e5e      	subs	r6, r3, #1
 800cfd8:	9b07      	ldr	r3, [sp, #28]
 800cfda:	42b3      	cmp	r3, r6
 800cfdc:	bfbf      	itttt	lt
 800cfde:	9b07      	ldrlt	r3, [sp, #28]
 800cfe0:	9607      	strlt	r6, [sp, #28]
 800cfe2:	1af2      	sublt	r2, r6, r3
 800cfe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cfe6:	bfb6      	itet	lt
 800cfe8:	189b      	addlt	r3, r3, r2
 800cfea:	1b9e      	subge	r6, r3, r6
 800cfec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cfee:	9b03      	ldr	r3, [sp, #12]
 800cff0:	bfb8      	it	lt
 800cff2:	2600      	movlt	r6, #0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	bfb7      	itett	lt
 800cff8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cffc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d000:	1a9d      	sublt	r5, r3, r2
 800d002:	2300      	movlt	r3, #0
 800d004:	e734      	b.n	800ce70 <_dtoa_r+0x720>
 800d006:	9e07      	ldr	r6, [sp, #28]
 800d008:	9d04      	ldr	r5, [sp, #16]
 800d00a:	9f08      	ldr	r7, [sp, #32]
 800d00c:	e73b      	b.n	800ce86 <_dtoa_r+0x736>
 800d00e:	9a07      	ldr	r2, [sp, #28]
 800d010:	e767      	b.n	800cee2 <_dtoa_r+0x792>
 800d012:	9b06      	ldr	r3, [sp, #24]
 800d014:	2b01      	cmp	r3, #1
 800d016:	dc18      	bgt.n	800d04a <_dtoa_r+0x8fa>
 800d018:	f1ba 0f00 	cmp.w	sl, #0
 800d01c:	d115      	bne.n	800d04a <_dtoa_r+0x8fa>
 800d01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d022:	b993      	cbnz	r3, 800d04a <_dtoa_r+0x8fa>
 800d024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d028:	0d1b      	lsrs	r3, r3, #20
 800d02a:	051b      	lsls	r3, r3, #20
 800d02c:	b183      	cbz	r3, 800d050 <_dtoa_r+0x900>
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	3301      	adds	r3, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9b05      	ldr	r3, [sp, #20]
 800d036:	3301      	adds	r3, #1
 800d038:	9305      	str	r3, [sp, #20]
 800d03a:	f04f 0801 	mov.w	r8, #1
 800d03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d040:	2b00      	cmp	r3, #0
 800d042:	f47f af6a 	bne.w	800cf1a <_dtoa_r+0x7ca>
 800d046:	2001      	movs	r0, #1
 800d048:	e76f      	b.n	800cf2a <_dtoa_r+0x7da>
 800d04a:	f04f 0800 	mov.w	r8, #0
 800d04e:	e7f6      	b.n	800d03e <_dtoa_r+0x8ee>
 800d050:	4698      	mov	r8, r3
 800d052:	e7f4      	b.n	800d03e <_dtoa_r+0x8ee>
 800d054:	f43f af7d 	beq.w	800cf52 <_dtoa_r+0x802>
 800d058:	4618      	mov	r0, r3
 800d05a:	301c      	adds	r0, #28
 800d05c:	e772      	b.n	800cf44 <_dtoa_r+0x7f4>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	dc37      	bgt.n	800d0d4 <_dtoa_r+0x984>
 800d064:	9b06      	ldr	r3, [sp, #24]
 800d066:	2b02      	cmp	r3, #2
 800d068:	dd34      	ble.n	800d0d4 <_dtoa_r+0x984>
 800d06a:	9b03      	ldr	r3, [sp, #12]
 800d06c:	9302      	str	r3, [sp, #8]
 800d06e:	9b02      	ldr	r3, [sp, #8]
 800d070:	b96b      	cbnz	r3, 800d08e <_dtoa_r+0x93e>
 800d072:	4631      	mov	r1, r6
 800d074:	2205      	movs	r2, #5
 800d076:	4620      	mov	r0, r4
 800d078:	f000 fbea 	bl	800d850 <__multadd>
 800d07c:	4601      	mov	r1, r0
 800d07e:	4606      	mov	r6, r0
 800d080:	ee18 0a10 	vmov	r0, s16
 800d084:	f000 fe04 	bl	800dc90 <__mcmp>
 800d088:	2800      	cmp	r0, #0
 800d08a:	f73f adbb 	bgt.w	800cc04 <_dtoa_r+0x4b4>
 800d08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d090:	9d01      	ldr	r5, [sp, #4]
 800d092:	43db      	mvns	r3, r3
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	f04f 0800 	mov.w	r8, #0
 800d09a:	4631      	mov	r1, r6
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 fbb5 	bl	800d80c <_Bfree>
 800d0a2:	2f00      	cmp	r7, #0
 800d0a4:	f43f aea4 	beq.w	800cdf0 <_dtoa_r+0x6a0>
 800d0a8:	f1b8 0f00 	cmp.w	r8, #0
 800d0ac:	d005      	beq.n	800d0ba <_dtoa_r+0x96a>
 800d0ae:	45b8      	cmp	r8, r7
 800d0b0:	d003      	beq.n	800d0ba <_dtoa_r+0x96a>
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 fba9 	bl	800d80c <_Bfree>
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fba5 	bl	800d80c <_Bfree>
 800d0c2:	e695      	b.n	800cdf0 <_dtoa_r+0x6a0>
 800d0c4:	2600      	movs	r6, #0
 800d0c6:	4637      	mov	r7, r6
 800d0c8:	e7e1      	b.n	800d08e <_dtoa_r+0x93e>
 800d0ca:	9700      	str	r7, [sp, #0]
 800d0cc:	4637      	mov	r7, r6
 800d0ce:	e599      	b.n	800cc04 <_dtoa_r+0x4b4>
 800d0d0:	40240000 	.word	0x40240000
 800d0d4:	9b08      	ldr	r3, [sp, #32]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f000 80ca 	beq.w	800d270 <_dtoa_r+0xb20>
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	9302      	str	r3, [sp, #8]
 800d0e0:	2d00      	cmp	r5, #0
 800d0e2:	dd05      	ble.n	800d0f0 <_dtoa_r+0x9a0>
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	462a      	mov	r2, r5
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 fd61 	bl	800dbb0 <__lshift>
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	f1b8 0f00 	cmp.w	r8, #0
 800d0f4:	d05b      	beq.n	800d1ae <_dtoa_r+0xa5e>
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fb47 	bl	800d78c <_Balloc>
 800d0fe:	4605      	mov	r5, r0
 800d100:	b928      	cbnz	r0, 800d10e <_dtoa_r+0x9be>
 800d102:	4b87      	ldr	r3, [pc, #540]	; (800d320 <_dtoa_r+0xbd0>)
 800d104:	4602      	mov	r2, r0
 800d106:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d10a:	f7ff bb3b 	b.w	800c784 <_dtoa_r+0x34>
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	3202      	adds	r2, #2
 800d112:	0092      	lsls	r2, r2, #2
 800d114:	f107 010c 	add.w	r1, r7, #12
 800d118:	300c      	adds	r0, #12
 800d11a:	f7fe fb89 	bl	800b830 <memcpy>
 800d11e:	2201      	movs	r2, #1
 800d120:	4629      	mov	r1, r5
 800d122:	4620      	mov	r0, r4
 800d124:	f000 fd44 	bl	800dbb0 <__lshift>
 800d128:	9b01      	ldr	r3, [sp, #4]
 800d12a:	f103 0901 	add.w	r9, r3, #1
 800d12e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d132:	4413      	add	r3, r2
 800d134:	9305      	str	r3, [sp, #20]
 800d136:	f00a 0301 	and.w	r3, sl, #1
 800d13a:	46b8      	mov	r8, r7
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	4607      	mov	r7, r0
 800d140:	4631      	mov	r1, r6
 800d142:	ee18 0a10 	vmov	r0, s16
 800d146:	f7ff fa75 	bl	800c634 <quorem>
 800d14a:	4641      	mov	r1, r8
 800d14c:	9002      	str	r0, [sp, #8]
 800d14e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d152:	ee18 0a10 	vmov	r0, s16
 800d156:	f000 fd9b 	bl	800dc90 <__mcmp>
 800d15a:	463a      	mov	r2, r7
 800d15c:	9003      	str	r0, [sp, #12]
 800d15e:	4631      	mov	r1, r6
 800d160:	4620      	mov	r0, r4
 800d162:	f000 fdb1 	bl	800dcc8 <__mdiff>
 800d166:	68c2      	ldr	r2, [r0, #12]
 800d168:	f109 3bff 	add.w	fp, r9, #4294967295
 800d16c:	4605      	mov	r5, r0
 800d16e:	bb02      	cbnz	r2, 800d1b2 <_dtoa_r+0xa62>
 800d170:	4601      	mov	r1, r0
 800d172:	ee18 0a10 	vmov	r0, s16
 800d176:	f000 fd8b 	bl	800dc90 <__mcmp>
 800d17a:	4602      	mov	r2, r0
 800d17c:	4629      	mov	r1, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	9207      	str	r2, [sp, #28]
 800d182:	f000 fb43 	bl	800d80c <_Bfree>
 800d186:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d18a:	ea43 0102 	orr.w	r1, r3, r2
 800d18e:	9b04      	ldr	r3, [sp, #16]
 800d190:	430b      	orrs	r3, r1
 800d192:	464d      	mov	r5, r9
 800d194:	d10f      	bne.n	800d1b6 <_dtoa_r+0xa66>
 800d196:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d19a:	d02a      	beq.n	800d1f2 <_dtoa_r+0xaa2>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	dd02      	ble.n	800d1a8 <_dtoa_r+0xa58>
 800d1a2:	9b02      	ldr	r3, [sp, #8]
 800d1a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d1a8:	f88b a000 	strb.w	sl, [fp]
 800d1ac:	e775      	b.n	800d09a <_dtoa_r+0x94a>
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	e7ba      	b.n	800d128 <_dtoa_r+0x9d8>
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	e7e2      	b.n	800d17c <_dtoa_r+0xa2c>
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	db04      	blt.n	800d1c6 <_dtoa_r+0xa76>
 800d1bc:	9906      	ldr	r1, [sp, #24]
 800d1be:	430b      	orrs	r3, r1
 800d1c0:	9904      	ldr	r1, [sp, #16]
 800d1c2:	430b      	orrs	r3, r1
 800d1c4:	d122      	bne.n	800d20c <_dtoa_r+0xabc>
 800d1c6:	2a00      	cmp	r2, #0
 800d1c8:	ddee      	ble.n	800d1a8 <_dtoa_r+0xa58>
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fced 	bl	800dbb0 <__lshift>
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	ee08 0a10 	vmov	s16, r0
 800d1dc:	f000 fd58 	bl	800dc90 <__mcmp>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	dc03      	bgt.n	800d1ec <_dtoa_r+0xa9c>
 800d1e4:	d1e0      	bne.n	800d1a8 <_dtoa_r+0xa58>
 800d1e6:	f01a 0f01 	tst.w	sl, #1
 800d1ea:	d0dd      	beq.n	800d1a8 <_dtoa_r+0xa58>
 800d1ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1f0:	d1d7      	bne.n	800d1a2 <_dtoa_r+0xa52>
 800d1f2:	2339      	movs	r3, #57	; 0x39
 800d1f4:	f88b 3000 	strb.w	r3, [fp]
 800d1f8:	462b      	mov	r3, r5
 800d1fa:	461d      	mov	r5, r3
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d202:	2a39      	cmp	r2, #57	; 0x39
 800d204:	d071      	beq.n	800d2ea <_dtoa_r+0xb9a>
 800d206:	3201      	adds	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	e746      	b.n	800d09a <_dtoa_r+0x94a>
 800d20c:	2a00      	cmp	r2, #0
 800d20e:	dd07      	ble.n	800d220 <_dtoa_r+0xad0>
 800d210:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d214:	d0ed      	beq.n	800d1f2 <_dtoa_r+0xaa2>
 800d216:	f10a 0301 	add.w	r3, sl, #1
 800d21a:	f88b 3000 	strb.w	r3, [fp]
 800d21e:	e73c      	b.n	800d09a <_dtoa_r+0x94a>
 800d220:	9b05      	ldr	r3, [sp, #20]
 800d222:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d226:	4599      	cmp	r9, r3
 800d228:	d047      	beq.n	800d2ba <_dtoa_r+0xb6a>
 800d22a:	ee18 1a10 	vmov	r1, s16
 800d22e:	2300      	movs	r3, #0
 800d230:	220a      	movs	r2, #10
 800d232:	4620      	mov	r0, r4
 800d234:	f000 fb0c 	bl	800d850 <__multadd>
 800d238:	45b8      	cmp	r8, r7
 800d23a:	ee08 0a10 	vmov	s16, r0
 800d23e:	f04f 0300 	mov.w	r3, #0
 800d242:	f04f 020a 	mov.w	r2, #10
 800d246:	4641      	mov	r1, r8
 800d248:	4620      	mov	r0, r4
 800d24a:	d106      	bne.n	800d25a <_dtoa_r+0xb0a>
 800d24c:	f000 fb00 	bl	800d850 <__multadd>
 800d250:	4680      	mov	r8, r0
 800d252:	4607      	mov	r7, r0
 800d254:	f109 0901 	add.w	r9, r9, #1
 800d258:	e772      	b.n	800d140 <_dtoa_r+0x9f0>
 800d25a:	f000 faf9 	bl	800d850 <__multadd>
 800d25e:	4639      	mov	r1, r7
 800d260:	4680      	mov	r8, r0
 800d262:	2300      	movs	r3, #0
 800d264:	220a      	movs	r2, #10
 800d266:	4620      	mov	r0, r4
 800d268:	f000 faf2 	bl	800d850 <__multadd>
 800d26c:	4607      	mov	r7, r0
 800d26e:	e7f1      	b.n	800d254 <_dtoa_r+0xb04>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	9302      	str	r3, [sp, #8]
 800d274:	9d01      	ldr	r5, [sp, #4]
 800d276:	ee18 0a10 	vmov	r0, s16
 800d27a:	4631      	mov	r1, r6
 800d27c:	f7ff f9da 	bl	800c634 <quorem>
 800d280:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d284:	9b01      	ldr	r3, [sp, #4]
 800d286:	f805 ab01 	strb.w	sl, [r5], #1
 800d28a:	1aea      	subs	r2, r5, r3
 800d28c:	9b02      	ldr	r3, [sp, #8]
 800d28e:	4293      	cmp	r3, r2
 800d290:	dd09      	ble.n	800d2a6 <_dtoa_r+0xb56>
 800d292:	ee18 1a10 	vmov	r1, s16
 800d296:	2300      	movs	r3, #0
 800d298:	220a      	movs	r2, #10
 800d29a:	4620      	mov	r0, r4
 800d29c:	f000 fad8 	bl	800d850 <__multadd>
 800d2a0:	ee08 0a10 	vmov	s16, r0
 800d2a4:	e7e7      	b.n	800d276 <_dtoa_r+0xb26>
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bfc8      	it	gt
 800d2ac:	461d      	movgt	r5, r3
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	bfd8      	it	le
 800d2b2:	2501      	movle	r5, #1
 800d2b4:	441d      	add	r5, r3
 800d2b6:	f04f 0800 	mov.w	r8, #0
 800d2ba:	ee18 1a10 	vmov	r1, s16
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fc75 	bl	800dbb0 <__lshift>
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	ee08 0a10 	vmov	s16, r0
 800d2cc:	f000 fce0 	bl	800dc90 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	dc91      	bgt.n	800d1f8 <_dtoa_r+0xaa8>
 800d2d4:	d102      	bne.n	800d2dc <_dtoa_r+0xb8c>
 800d2d6:	f01a 0f01 	tst.w	sl, #1
 800d2da:	d18d      	bne.n	800d1f8 <_dtoa_r+0xaa8>
 800d2dc:	462b      	mov	r3, r5
 800d2de:	461d      	mov	r5, r3
 800d2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2e4:	2a30      	cmp	r2, #48	; 0x30
 800d2e6:	d0fa      	beq.n	800d2de <_dtoa_r+0xb8e>
 800d2e8:	e6d7      	b.n	800d09a <_dtoa_r+0x94a>
 800d2ea:	9a01      	ldr	r2, [sp, #4]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d184      	bne.n	800d1fa <_dtoa_r+0xaaa>
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	2331      	movs	r3, #49	; 0x31
 800d2f8:	7013      	strb	r3, [r2, #0]
 800d2fa:	e6ce      	b.n	800d09a <_dtoa_r+0x94a>
 800d2fc:	4b09      	ldr	r3, [pc, #36]	; (800d324 <_dtoa_r+0xbd4>)
 800d2fe:	f7ff ba95 	b.w	800c82c <_dtoa_r+0xdc>
 800d302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d304:	2b00      	cmp	r3, #0
 800d306:	f47f aa6e 	bne.w	800c7e6 <_dtoa_r+0x96>
 800d30a:	4b07      	ldr	r3, [pc, #28]	; (800d328 <_dtoa_r+0xbd8>)
 800d30c:	f7ff ba8e 	b.w	800c82c <_dtoa_r+0xdc>
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	dcae      	bgt.n	800d274 <_dtoa_r+0xb24>
 800d316:	9b06      	ldr	r3, [sp, #24]
 800d318:	2b02      	cmp	r3, #2
 800d31a:	f73f aea8 	bgt.w	800d06e <_dtoa_r+0x91e>
 800d31e:	e7a9      	b.n	800d274 <_dtoa_r+0xb24>
 800d320:	0800f63f 	.word	0x0800f63f
 800d324:	0800f59c 	.word	0x0800f59c
 800d328:	0800f5c0 	.word	0x0800f5c0

0800d32c <__sflush_r>:
 800d32c:	898a      	ldrh	r2, [r1, #12]
 800d32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	4605      	mov	r5, r0
 800d334:	0710      	lsls	r0, r2, #28
 800d336:	460c      	mov	r4, r1
 800d338:	d458      	bmi.n	800d3ec <__sflush_r+0xc0>
 800d33a:	684b      	ldr	r3, [r1, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc05      	bgt.n	800d34c <__sflush_r+0x20>
 800d340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d342:	2b00      	cmp	r3, #0
 800d344:	dc02      	bgt.n	800d34c <__sflush_r+0x20>
 800d346:	2000      	movs	r0, #0
 800d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d0f9      	beq.n	800d346 <__sflush_r+0x1a>
 800d352:	2300      	movs	r3, #0
 800d354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d358:	682f      	ldr	r7, [r5, #0]
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	d032      	beq.n	800d3c4 <__sflush_r+0x98>
 800d35e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	075a      	lsls	r2, r3, #29
 800d364:	d505      	bpl.n	800d372 <__sflush_r+0x46>
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	1ac0      	subs	r0, r0, r3
 800d36a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d36c:	b10b      	cbz	r3, 800d372 <__sflush_r+0x46>
 800d36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d370:	1ac0      	subs	r0, r0, r3
 800d372:	2300      	movs	r3, #0
 800d374:	4602      	mov	r2, r0
 800d376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d378:	6a21      	ldr	r1, [r4, #32]
 800d37a:	4628      	mov	r0, r5
 800d37c:	47b0      	blx	r6
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	d106      	bne.n	800d392 <__sflush_r+0x66>
 800d384:	6829      	ldr	r1, [r5, #0]
 800d386:	291d      	cmp	r1, #29
 800d388:	d82c      	bhi.n	800d3e4 <__sflush_r+0xb8>
 800d38a:	4a2a      	ldr	r2, [pc, #168]	; (800d434 <__sflush_r+0x108>)
 800d38c:	40ca      	lsrs	r2, r1
 800d38e:	07d6      	lsls	r6, r2, #31
 800d390:	d528      	bpl.n	800d3e4 <__sflush_r+0xb8>
 800d392:	2200      	movs	r2, #0
 800d394:	6062      	str	r2, [r4, #4]
 800d396:	04d9      	lsls	r1, r3, #19
 800d398:	6922      	ldr	r2, [r4, #16]
 800d39a:	6022      	str	r2, [r4, #0]
 800d39c:	d504      	bpl.n	800d3a8 <__sflush_r+0x7c>
 800d39e:	1c42      	adds	r2, r0, #1
 800d3a0:	d101      	bne.n	800d3a6 <__sflush_r+0x7a>
 800d3a2:	682b      	ldr	r3, [r5, #0]
 800d3a4:	b903      	cbnz	r3, 800d3a8 <__sflush_r+0x7c>
 800d3a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3aa:	602f      	str	r7, [r5, #0]
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	d0ca      	beq.n	800d346 <__sflush_r+0x1a>
 800d3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3b4:	4299      	cmp	r1, r3
 800d3b6:	d002      	beq.n	800d3be <__sflush_r+0x92>
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f7fe fa4f 	bl	800b85c <_free_r>
 800d3be:	2000      	movs	r0, #0
 800d3c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d3c2:	e7c1      	b.n	800d348 <__sflush_r+0x1c>
 800d3c4:	6a21      	ldr	r1, [r4, #32]
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b0      	blx	r6
 800d3cc:	1c41      	adds	r1, r0, #1
 800d3ce:	d1c7      	bne.n	800d360 <__sflush_r+0x34>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c4      	beq.n	800d360 <__sflush_r+0x34>
 800d3d6:	2b1d      	cmp	r3, #29
 800d3d8:	d001      	beq.n	800d3de <__sflush_r+0xb2>
 800d3da:	2b16      	cmp	r3, #22
 800d3dc:	d101      	bne.n	800d3e2 <__sflush_r+0xb6>
 800d3de:	602f      	str	r7, [r5, #0]
 800d3e0:	e7b1      	b.n	800d346 <__sflush_r+0x1a>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7ad      	b.n	800d348 <__sflush_r+0x1c>
 800d3ec:	690f      	ldr	r7, [r1, #16]
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d0a9      	beq.n	800d346 <__sflush_r+0x1a>
 800d3f2:	0793      	lsls	r3, r2, #30
 800d3f4:	680e      	ldr	r6, [r1, #0]
 800d3f6:	bf08      	it	eq
 800d3f8:	694b      	ldreq	r3, [r1, #20]
 800d3fa:	600f      	str	r7, [r1, #0]
 800d3fc:	bf18      	it	ne
 800d3fe:	2300      	movne	r3, #0
 800d400:	eba6 0807 	sub.w	r8, r6, r7
 800d404:	608b      	str	r3, [r1, #8]
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	dd9c      	ble.n	800d346 <__sflush_r+0x1a>
 800d40c:	6a21      	ldr	r1, [r4, #32]
 800d40e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d410:	4643      	mov	r3, r8
 800d412:	463a      	mov	r2, r7
 800d414:	4628      	mov	r0, r5
 800d416:	47b0      	blx	r6
 800d418:	2800      	cmp	r0, #0
 800d41a:	dc06      	bgt.n	800d42a <__sflush_r+0xfe>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	e78e      	b.n	800d348 <__sflush_r+0x1c>
 800d42a:	4407      	add	r7, r0
 800d42c:	eba8 0800 	sub.w	r8, r8, r0
 800d430:	e7e9      	b.n	800d406 <__sflush_r+0xda>
 800d432:	bf00      	nop
 800d434:	20400001 	.word	0x20400001

0800d438 <_fflush_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	690b      	ldr	r3, [r1, #16]
 800d43c:	4605      	mov	r5, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b913      	cbnz	r3, 800d448 <_fflush_r+0x10>
 800d442:	2500      	movs	r5, #0
 800d444:	4628      	mov	r0, r5
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	b118      	cbz	r0, 800d452 <_fflush_r+0x1a>
 800d44a:	6983      	ldr	r3, [r0, #24]
 800d44c:	b90b      	cbnz	r3, 800d452 <_fflush_r+0x1a>
 800d44e:	f000 f887 	bl	800d560 <__sinit>
 800d452:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <_fflush_r+0x6c>)
 800d454:	429c      	cmp	r4, r3
 800d456:	d11b      	bne.n	800d490 <_fflush_r+0x58>
 800d458:	686c      	ldr	r4, [r5, #4]
 800d45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0ef      	beq.n	800d442 <_fflush_r+0xa>
 800d462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d464:	07d0      	lsls	r0, r2, #31
 800d466:	d404      	bmi.n	800d472 <_fflush_r+0x3a>
 800d468:	0599      	lsls	r1, r3, #22
 800d46a:	d402      	bmi.n	800d472 <_fflush_r+0x3a>
 800d46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d46e:	f000 f91a 	bl	800d6a6 <__retarget_lock_acquire_recursive>
 800d472:	4628      	mov	r0, r5
 800d474:	4621      	mov	r1, r4
 800d476:	f7ff ff59 	bl	800d32c <__sflush_r>
 800d47a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d47c:	07da      	lsls	r2, r3, #31
 800d47e:	4605      	mov	r5, r0
 800d480:	d4e0      	bmi.n	800d444 <_fflush_r+0xc>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	059b      	lsls	r3, r3, #22
 800d486:	d4dd      	bmi.n	800d444 <_fflush_r+0xc>
 800d488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d48a:	f000 f90d 	bl	800d6a8 <__retarget_lock_release_recursive>
 800d48e:	e7d9      	b.n	800d444 <_fflush_r+0xc>
 800d490:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <_fflush_r+0x70>)
 800d492:	429c      	cmp	r4, r3
 800d494:	d101      	bne.n	800d49a <_fflush_r+0x62>
 800d496:	68ac      	ldr	r4, [r5, #8]
 800d498:	e7df      	b.n	800d45a <_fflush_r+0x22>
 800d49a:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <_fflush_r+0x74>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	bf08      	it	eq
 800d4a0:	68ec      	ldreq	r4, [r5, #12]
 800d4a2:	e7da      	b.n	800d45a <_fflush_r+0x22>
 800d4a4:	0800f670 	.word	0x0800f670
 800d4a8:	0800f690 	.word	0x0800f690
 800d4ac:	0800f650 	.word	0x0800f650

0800d4b0 <std>:
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	b510      	push	{r4, lr}
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4be:	6083      	str	r3, [r0, #8]
 800d4c0:	8181      	strh	r1, [r0, #12]
 800d4c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d4c4:	81c2      	strh	r2, [r0, #14]
 800d4c6:	6183      	str	r3, [r0, #24]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	2208      	movs	r2, #8
 800d4cc:	305c      	adds	r0, #92	; 0x5c
 800d4ce:	f7fe f9bd 	bl	800b84c <memset>
 800d4d2:	4b05      	ldr	r3, [pc, #20]	; (800d4e8 <std+0x38>)
 800d4d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <std+0x3c>)
 800d4d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4da:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <std+0x40>)
 800d4dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <std+0x44>)
 800d4e0:	6224      	str	r4, [r4, #32]
 800d4e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d4e4:	bd10      	pop	{r4, pc}
 800d4e6:	bf00      	nop
 800d4e8:	0800e175 	.word	0x0800e175
 800d4ec:	0800e197 	.word	0x0800e197
 800d4f0:	0800e1cf 	.word	0x0800e1cf
 800d4f4:	0800e1f3 	.word	0x0800e1f3

0800d4f8 <_cleanup_r>:
 800d4f8:	4901      	ldr	r1, [pc, #4]	; (800d500 <_cleanup_r+0x8>)
 800d4fa:	f000 b8af 	b.w	800d65c <_fwalk_reent>
 800d4fe:	bf00      	nop
 800d500:	0800d439 	.word	0x0800d439

0800d504 <__sfmoreglue>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	2268      	movs	r2, #104	; 0x68
 800d508:	1e4d      	subs	r5, r1, #1
 800d50a:	4355      	muls	r5, r2
 800d50c:	460e      	mov	r6, r1
 800d50e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d512:	f7fe fa0f 	bl	800b934 <_malloc_r>
 800d516:	4604      	mov	r4, r0
 800d518:	b140      	cbz	r0, 800d52c <__sfmoreglue+0x28>
 800d51a:	2100      	movs	r1, #0
 800d51c:	e9c0 1600 	strd	r1, r6, [r0]
 800d520:	300c      	adds	r0, #12
 800d522:	60a0      	str	r0, [r4, #8]
 800d524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d528:	f7fe f990 	bl	800b84c <memset>
 800d52c:	4620      	mov	r0, r4
 800d52e:	bd70      	pop	{r4, r5, r6, pc}

0800d530 <__sfp_lock_acquire>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__sfp_lock_acquire+0x8>)
 800d532:	f000 b8b8 	b.w	800d6a6 <__retarget_lock_acquire_recursive>
 800d536:	bf00      	nop
 800d538:	20002a31 	.word	0x20002a31

0800d53c <__sfp_lock_release>:
 800d53c:	4801      	ldr	r0, [pc, #4]	; (800d544 <__sfp_lock_release+0x8>)
 800d53e:	f000 b8b3 	b.w	800d6a8 <__retarget_lock_release_recursive>
 800d542:	bf00      	nop
 800d544:	20002a31 	.word	0x20002a31

0800d548 <__sinit_lock_acquire>:
 800d548:	4801      	ldr	r0, [pc, #4]	; (800d550 <__sinit_lock_acquire+0x8>)
 800d54a:	f000 b8ac 	b.w	800d6a6 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	20002a32 	.word	0x20002a32

0800d554 <__sinit_lock_release>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__sinit_lock_release+0x8>)
 800d556:	f000 b8a7 	b.w	800d6a8 <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	20002a32 	.word	0x20002a32

0800d560 <__sinit>:
 800d560:	b510      	push	{r4, lr}
 800d562:	4604      	mov	r4, r0
 800d564:	f7ff fff0 	bl	800d548 <__sinit_lock_acquire>
 800d568:	69a3      	ldr	r3, [r4, #24]
 800d56a:	b11b      	cbz	r3, 800d574 <__sinit+0x14>
 800d56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d570:	f7ff bff0 	b.w	800d554 <__sinit_lock_release>
 800d574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d578:	6523      	str	r3, [r4, #80]	; 0x50
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <__sinit+0x68>)
 800d57c:	4a13      	ldr	r2, [pc, #76]	; (800d5cc <__sinit+0x6c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	62a2      	str	r2, [r4, #40]	; 0x28
 800d582:	42a3      	cmp	r3, r4
 800d584:	bf04      	itt	eq
 800d586:	2301      	moveq	r3, #1
 800d588:	61a3      	streq	r3, [r4, #24]
 800d58a:	4620      	mov	r0, r4
 800d58c:	f000 f820 	bl	800d5d0 <__sfp>
 800d590:	6060      	str	r0, [r4, #4]
 800d592:	4620      	mov	r0, r4
 800d594:	f000 f81c 	bl	800d5d0 <__sfp>
 800d598:	60a0      	str	r0, [r4, #8]
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 f818 	bl	800d5d0 <__sfp>
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	60e0      	str	r0, [r4, #12]
 800d5a4:	2104      	movs	r1, #4
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	f7ff ff82 	bl	800d4b0 <std>
 800d5ac:	68a0      	ldr	r0, [r4, #8]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	2109      	movs	r1, #9
 800d5b2:	f7ff ff7d 	bl	800d4b0 <std>
 800d5b6:	68e0      	ldr	r0, [r4, #12]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	2112      	movs	r1, #18
 800d5bc:	f7ff ff78 	bl	800d4b0 <std>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	61a3      	str	r3, [r4, #24]
 800d5c4:	e7d2      	b.n	800d56c <__sinit+0xc>
 800d5c6:	bf00      	nop
 800d5c8:	0800f588 	.word	0x0800f588
 800d5cc:	0800d4f9 	.word	0x0800d4f9

0800d5d0 <__sfp>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	f7ff ffac 	bl	800d530 <__sfp_lock_acquire>
 800d5d8:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <__sfp+0x84>)
 800d5da:	681e      	ldr	r6, [r3, #0]
 800d5dc:	69b3      	ldr	r3, [r6, #24]
 800d5de:	b913      	cbnz	r3, 800d5e6 <__sfp+0x16>
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ffbd 	bl	800d560 <__sinit>
 800d5e6:	3648      	adds	r6, #72	; 0x48
 800d5e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	d503      	bpl.n	800d5f8 <__sfp+0x28>
 800d5f0:	6833      	ldr	r3, [r6, #0]
 800d5f2:	b30b      	cbz	r3, 800d638 <__sfp+0x68>
 800d5f4:	6836      	ldr	r6, [r6, #0]
 800d5f6:	e7f7      	b.n	800d5e8 <__sfp+0x18>
 800d5f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5fc:	b9d5      	cbnz	r5, 800d634 <__sfp+0x64>
 800d5fe:	4b16      	ldr	r3, [pc, #88]	; (800d658 <__sfp+0x88>)
 800d600:	60e3      	str	r3, [r4, #12]
 800d602:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d606:	6665      	str	r5, [r4, #100]	; 0x64
 800d608:	f000 f84c 	bl	800d6a4 <__retarget_lock_init_recursive>
 800d60c:	f7ff ff96 	bl	800d53c <__sfp_lock_release>
 800d610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d618:	6025      	str	r5, [r4, #0]
 800d61a:	61a5      	str	r5, [r4, #24]
 800d61c:	2208      	movs	r2, #8
 800d61e:	4629      	mov	r1, r5
 800d620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d624:	f7fe f912 	bl	800b84c <memset>
 800d628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d62c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d630:	4620      	mov	r0, r4
 800d632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d634:	3468      	adds	r4, #104	; 0x68
 800d636:	e7d9      	b.n	800d5ec <__sfp+0x1c>
 800d638:	2104      	movs	r1, #4
 800d63a:	4638      	mov	r0, r7
 800d63c:	f7ff ff62 	bl	800d504 <__sfmoreglue>
 800d640:	4604      	mov	r4, r0
 800d642:	6030      	str	r0, [r6, #0]
 800d644:	2800      	cmp	r0, #0
 800d646:	d1d5      	bne.n	800d5f4 <__sfp+0x24>
 800d648:	f7ff ff78 	bl	800d53c <__sfp_lock_release>
 800d64c:	230c      	movs	r3, #12
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	e7ee      	b.n	800d630 <__sfp+0x60>
 800d652:	bf00      	nop
 800d654:	0800f588 	.word	0x0800f588
 800d658:	ffff0001 	.word	0xffff0001

0800d65c <_fwalk_reent>:
 800d65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d660:	4606      	mov	r6, r0
 800d662:	4688      	mov	r8, r1
 800d664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d668:	2700      	movs	r7, #0
 800d66a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d66e:	f1b9 0901 	subs.w	r9, r9, #1
 800d672:	d505      	bpl.n	800d680 <_fwalk_reent+0x24>
 800d674:	6824      	ldr	r4, [r4, #0]
 800d676:	2c00      	cmp	r4, #0
 800d678:	d1f7      	bne.n	800d66a <_fwalk_reent+0xe>
 800d67a:	4638      	mov	r0, r7
 800d67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d680:	89ab      	ldrh	r3, [r5, #12]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d907      	bls.n	800d696 <_fwalk_reent+0x3a>
 800d686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d68a:	3301      	adds	r3, #1
 800d68c:	d003      	beq.n	800d696 <_fwalk_reent+0x3a>
 800d68e:	4629      	mov	r1, r5
 800d690:	4630      	mov	r0, r6
 800d692:	47c0      	blx	r8
 800d694:	4307      	orrs	r7, r0
 800d696:	3568      	adds	r5, #104	; 0x68
 800d698:	e7e9      	b.n	800d66e <_fwalk_reent+0x12>
	...

0800d69c <_localeconv_r>:
 800d69c:	4800      	ldr	r0, [pc, #0]	; (800d6a0 <_localeconv_r+0x4>)
 800d69e:	4770      	bx	lr
 800d6a0:	200002d8 	.word	0x200002d8

0800d6a4 <__retarget_lock_init_recursive>:
 800d6a4:	4770      	bx	lr

0800d6a6 <__retarget_lock_acquire_recursive>:
 800d6a6:	4770      	bx	lr

0800d6a8 <__retarget_lock_release_recursive>:
 800d6a8:	4770      	bx	lr

0800d6aa <__swhatbuf_r>:
 800d6aa:	b570      	push	{r4, r5, r6, lr}
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b2:	2900      	cmp	r1, #0
 800d6b4:	b096      	sub	sp, #88	; 0x58
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	461d      	mov	r5, r3
 800d6ba:	da08      	bge.n	800d6ce <__swhatbuf_r+0x24>
 800d6bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	602a      	str	r2, [r5, #0]
 800d6c4:	061a      	lsls	r2, r3, #24
 800d6c6:	d410      	bmi.n	800d6ea <__swhatbuf_r+0x40>
 800d6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6cc:	e00e      	b.n	800d6ec <__swhatbuf_r+0x42>
 800d6ce:	466a      	mov	r2, sp
 800d6d0:	f000 fde6 	bl	800e2a0 <_fstat_r>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	dbf1      	blt.n	800d6bc <__swhatbuf_r+0x12>
 800d6d8:	9a01      	ldr	r2, [sp, #4]
 800d6da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6e2:	425a      	negs	r2, r3
 800d6e4:	415a      	adcs	r2, r3
 800d6e6:	602a      	str	r2, [r5, #0]
 800d6e8:	e7ee      	b.n	800d6c8 <__swhatbuf_r+0x1e>
 800d6ea:	2340      	movs	r3, #64	; 0x40
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	b016      	add	sp, #88	; 0x58
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}

0800d6f4 <__smakebuf_r>:
 800d6f4:	898b      	ldrh	r3, [r1, #12]
 800d6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6f8:	079d      	lsls	r5, r3, #30
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	d507      	bpl.n	800d710 <__smakebuf_r+0x1c>
 800d700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	6123      	str	r3, [r4, #16]
 800d708:	2301      	movs	r3, #1
 800d70a:	6163      	str	r3, [r4, #20]
 800d70c:	b002      	add	sp, #8
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	ab01      	add	r3, sp, #4
 800d712:	466a      	mov	r2, sp
 800d714:	f7ff ffc9 	bl	800d6aa <__swhatbuf_r>
 800d718:	9900      	ldr	r1, [sp, #0]
 800d71a:	4605      	mov	r5, r0
 800d71c:	4630      	mov	r0, r6
 800d71e:	f7fe f909 	bl	800b934 <_malloc_r>
 800d722:	b948      	cbnz	r0, 800d738 <__smakebuf_r+0x44>
 800d724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d728:	059a      	lsls	r2, r3, #22
 800d72a:	d4ef      	bmi.n	800d70c <__smakebuf_r+0x18>
 800d72c:	f023 0303 	bic.w	r3, r3, #3
 800d730:	f043 0302 	orr.w	r3, r3, #2
 800d734:	81a3      	strh	r3, [r4, #12]
 800d736:	e7e3      	b.n	800d700 <__smakebuf_r+0xc>
 800d738:	4b0d      	ldr	r3, [pc, #52]	; (800d770 <__smakebuf_r+0x7c>)
 800d73a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	6020      	str	r0, [r4, #0]
 800d740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	6163      	str	r3, [r4, #20]
 800d74a:	9b01      	ldr	r3, [sp, #4]
 800d74c:	6120      	str	r0, [r4, #16]
 800d74e:	b15b      	cbz	r3, 800d768 <__smakebuf_r+0x74>
 800d750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d754:	4630      	mov	r0, r6
 800d756:	f000 fdb5 	bl	800e2c4 <_isatty_r>
 800d75a:	b128      	cbz	r0, 800d768 <__smakebuf_r+0x74>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f023 0303 	bic.w	r3, r3, #3
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	89a0      	ldrh	r0, [r4, #12]
 800d76a:	4305      	orrs	r5, r0
 800d76c:	81a5      	strh	r5, [r4, #12]
 800d76e:	e7cd      	b.n	800d70c <__smakebuf_r+0x18>
 800d770:	0800d4f9 	.word	0x0800d4f9

0800d774 <__malloc_lock>:
 800d774:	4801      	ldr	r0, [pc, #4]	; (800d77c <__malloc_lock+0x8>)
 800d776:	f7ff bf96 	b.w	800d6a6 <__retarget_lock_acquire_recursive>
 800d77a:	bf00      	nop
 800d77c:	20002a30 	.word	0x20002a30

0800d780 <__malloc_unlock>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__malloc_unlock+0x8>)
 800d782:	f7ff bf91 	b.w	800d6a8 <__retarget_lock_release_recursive>
 800d786:	bf00      	nop
 800d788:	20002a30 	.word	0x20002a30

0800d78c <_Balloc>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d790:	4604      	mov	r4, r0
 800d792:	460d      	mov	r5, r1
 800d794:	b976      	cbnz	r6, 800d7b4 <_Balloc+0x28>
 800d796:	2010      	movs	r0, #16
 800d798:	f7fe f832 	bl	800b800 <malloc>
 800d79c:	4602      	mov	r2, r0
 800d79e:	6260      	str	r0, [r4, #36]	; 0x24
 800d7a0:	b920      	cbnz	r0, 800d7ac <_Balloc+0x20>
 800d7a2:	4b18      	ldr	r3, [pc, #96]	; (800d804 <_Balloc+0x78>)
 800d7a4:	4818      	ldr	r0, [pc, #96]	; (800d808 <_Balloc+0x7c>)
 800d7a6:	2166      	movs	r1, #102	; 0x66
 800d7a8:	f000 fd3a 	bl	800e220 <__assert_func>
 800d7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7b0:	6006      	str	r6, [r0, #0]
 800d7b2:	60c6      	str	r6, [r0, #12]
 800d7b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d7b6:	68f3      	ldr	r3, [r6, #12]
 800d7b8:	b183      	cbz	r3, 800d7dc <_Balloc+0x50>
 800d7ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7c2:	b9b8      	cbnz	r0, 800d7f4 <_Balloc+0x68>
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d7ca:	1d72      	adds	r2, r6, #5
 800d7cc:	0092      	lsls	r2, r2, #2
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 fb60 	bl	800de94 <_calloc_r>
 800d7d4:	b160      	cbz	r0, 800d7f0 <_Balloc+0x64>
 800d7d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d7da:	e00e      	b.n	800d7fa <_Balloc+0x6e>
 800d7dc:	2221      	movs	r2, #33	; 0x21
 800d7de:	2104      	movs	r1, #4
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 fb57 	bl	800de94 <_calloc_r>
 800d7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7e8:	60f0      	str	r0, [r6, #12]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1e4      	bne.n	800d7ba <_Balloc+0x2e>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	bd70      	pop	{r4, r5, r6, pc}
 800d7f4:	6802      	ldr	r2, [r0, #0]
 800d7f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d800:	e7f7      	b.n	800d7f2 <_Balloc+0x66>
 800d802:	bf00      	nop
 800d804:	0800f5cd 	.word	0x0800f5cd
 800d808:	0800f6b0 	.word	0x0800f6b0

0800d80c <_Bfree>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d810:	4605      	mov	r5, r0
 800d812:	460c      	mov	r4, r1
 800d814:	b976      	cbnz	r6, 800d834 <_Bfree+0x28>
 800d816:	2010      	movs	r0, #16
 800d818:	f7fd fff2 	bl	800b800 <malloc>
 800d81c:	4602      	mov	r2, r0
 800d81e:	6268      	str	r0, [r5, #36]	; 0x24
 800d820:	b920      	cbnz	r0, 800d82c <_Bfree+0x20>
 800d822:	4b09      	ldr	r3, [pc, #36]	; (800d848 <_Bfree+0x3c>)
 800d824:	4809      	ldr	r0, [pc, #36]	; (800d84c <_Bfree+0x40>)
 800d826:	218a      	movs	r1, #138	; 0x8a
 800d828:	f000 fcfa 	bl	800e220 <__assert_func>
 800d82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d830:	6006      	str	r6, [r0, #0]
 800d832:	60c6      	str	r6, [r0, #12]
 800d834:	b13c      	cbz	r4, 800d846 <_Bfree+0x3a>
 800d836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d838:	6862      	ldr	r2, [r4, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d840:	6021      	str	r1, [r4, #0]
 800d842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d846:	bd70      	pop	{r4, r5, r6, pc}
 800d848:	0800f5cd 	.word	0x0800f5cd
 800d84c:	0800f6b0 	.word	0x0800f6b0

0800d850 <__multadd>:
 800d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d854:	690d      	ldr	r5, [r1, #16]
 800d856:	4607      	mov	r7, r0
 800d858:	460c      	mov	r4, r1
 800d85a:	461e      	mov	r6, r3
 800d85c:	f101 0c14 	add.w	ip, r1, #20
 800d860:	2000      	movs	r0, #0
 800d862:	f8dc 3000 	ldr.w	r3, [ip]
 800d866:	b299      	uxth	r1, r3
 800d868:	fb02 6101 	mla	r1, r2, r1, r6
 800d86c:	0c1e      	lsrs	r6, r3, #16
 800d86e:	0c0b      	lsrs	r3, r1, #16
 800d870:	fb02 3306 	mla	r3, r2, r6, r3
 800d874:	b289      	uxth	r1, r1
 800d876:	3001      	adds	r0, #1
 800d878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d87c:	4285      	cmp	r5, r0
 800d87e:	f84c 1b04 	str.w	r1, [ip], #4
 800d882:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d886:	dcec      	bgt.n	800d862 <__multadd+0x12>
 800d888:	b30e      	cbz	r6, 800d8ce <__multadd+0x7e>
 800d88a:	68a3      	ldr	r3, [r4, #8]
 800d88c:	42ab      	cmp	r3, r5
 800d88e:	dc19      	bgt.n	800d8c4 <__multadd+0x74>
 800d890:	6861      	ldr	r1, [r4, #4]
 800d892:	4638      	mov	r0, r7
 800d894:	3101      	adds	r1, #1
 800d896:	f7ff ff79 	bl	800d78c <_Balloc>
 800d89a:	4680      	mov	r8, r0
 800d89c:	b928      	cbnz	r0, 800d8aa <__multadd+0x5a>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <__multadd+0x84>)
 800d8a2:	480d      	ldr	r0, [pc, #52]	; (800d8d8 <__multadd+0x88>)
 800d8a4:	21b5      	movs	r1, #181	; 0xb5
 800d8a6:	f000 fcbb 	bl	800e220 <__assert_func>
 800d8aa:	6922      	ldr	r2, [r4, #16]
 800d8ac:	3202      	adds	r2, #2
 800d8ae:	f104 010c 	add.w	r1, r4, #12
 800d8b2:	0092      	lsls	r2, r2, #2
 800d8b4:	300c      	adds	r0, #12
 800d8b6:	f7fd ffbb 	bl	800b830 <memcpy>
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f7ff ffa5 	bl	800d80c <_Bfree>
 800d8c2:	4644      	mov	r4, r8
 800d8c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	615e      	str	r6, [r3, #20]
 800d8cc:	6125      	str	r5, [r4, #16]
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d4:	0800f63f 	.word	0x0800f63f
 800d8d8:	0800f6b0 	.word	0x0800f6b0

0800d8dc <__hi0bits>:
 800d8dc:	0c03      	lsrs	r3, r0, #16
 800d8de:	041b      	lsls	r3, r3, #16
 800d8e0:	b9d3      	cbnz	r3, 800d918 <__hi0bits+0x3c>
 800d8e2:	0400      	lsls	r0, r0, #16
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8ea:	bf04      	itt	eq
 800d8ec:	0200      	lsleq	r0, r0, #8
 800d8ee:	3308      	addeq	r3, #8
 800d8f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8f4:	bf04      	itt	eq
 800d8f6:	0100      	lsleq	r0, r0, #4
 800d8f8:	3304      	addeq	r3, #4
 800d8fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8fe:	bf04      	itt	eq
 800d900:	0080      	lsleq	r0, r0, #2
 800d902:	3302      	addeq	r3, #2
 800d904:	2800      	cmp	r0, #0
 800d906:	db05      	blt.n	800d914 <__hi0bits+0x38>
 800d908:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d90c:	f103 0301 	add.w	r3, r3, #1
 800d910:	bf08      	it	eq
 800d912:	2320      	moveq	r3, #32
 800d914:	4618      	mov	r0, r3
 800d916:	4770      	bx	lr
 800d918:	2300      	movs	r3, #0
 800d91a:	e7e4      	b.n	800d8e6 <__hi0bits+0xa>

0800d91c <__lo0bits>:
 800d91c:	6803      	ldr	r3, [r0, #0]
 800d91e:	f013 0207 	ands.w	r2, r3, #7
 800d922:	4601      	mov	r1, r0
 800d924:	d00b      	beq.n	800d93e <__lo0bits+0x22>
 800d926:	07da      	lsls	r2, r3, #31
 800d928:	d423      	bmi.n	800d972 <__lo0bits+0x56>
 800d92a:	0798      	lsls	r0, r3, #30
 800d92c:	bf49      	itett	mi
 800d92e:	085b      	lsrmi	r3, r3, #1
 800d930:	089b      	lsrpl	r3, r3, #2
 800d932:	2001      	movmi	r0, #1
 800d934:	600b      	strmi	r3, [r1, #0]
 800d936:	bf5c      	itt	pl
 800d938:	600b      	strpl	r3, [r1, #0]
 800d93a:	2002      	movpl	r0, #2
 800d93c:	4770      	bx	lr
 800d93e:	b298      	uxth	r0, r3
 800d940:	b9a8      	cbnz	r0, 800d96e <__lo0bits+0x52>
 800d942:	0c1b      	lsrs	r3, r3, #16
 800d944:	2010      	movs	r0, #16
 800d946:	b2da      	uxtb	r2, r3
 800d948:	b90a      	cbnz	r2, 800d94e <__lo0bits+0x32>
 800d94a:	3008      	adds	r0, #8
 800d94c:	0a1b      	lsrs	r3, r3, #8
 800d94e:	071a      	lsls	r2, r3, #28
 800d950:	bf04      	itt	eq
 800d952:	091b      	lsreq	r3, r3, #4
 800d954:	3004      	addeq	r0, #4
 800d956:	079a      	lsls	r2, r3, #30
 800d958:	bf04      	itt	eq
 800d95a:	089b      	lsreq	r3, r3, #2
 800d95c:	3002      	addeq	r0, #2
 800d95e:	07da      	lsls	r2, r3, #31
 800d960:	d403      	bmi.n	800d96a <__lo0bits+0x4e>
 800d962:	085b      	lsrs	r3, r3, #1
 800d964:	f100 0001 	add.w	r0, r0, #1
 800d968:	d005      	beq.n	800d976 <__lo0bits+0x5a>
 800d96a:	600b      	str	r3, [r1, #0]
 800d96c:	4770      	bx	lr
 800d96e:	4610      	mov	r0, r2
 800d970:	e7e9      	b.n	800d946 <__lo0bits+0x2a>
 800d972:	2000      	movs	r0, #0
 800d974:	4770      	bx	lr
 800d976:	2020      	movs	r0, #32
 800d978:	4770      	bx	lr
	...

0800d97c <__i2b>:
 800d97c:	b510      	push	{r4, lr}
 800d97e:	460c      	mov	r4, r1
 800d980:	2101      	movs	r1, #1
 800d982:	f7ff ff03 	bl	800d78c <_Balloc>
 800d986:	4602      	mov	r2, r0
 800d988:	b928      	cbnz	r0, 800d996 <__i2b+0x1a>
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <__i2b+0x24>)
 800d98c:	4805      	ldr	r0, [pc, #20]	; (800d9a4 <__i2b+0x28>)
 800d98e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d992:	f000 fc45 	bl	800e220 <__assert_func>
 800d996:	2301      	movs	r3, #1
 800d998:	6144      	str	r4, [r0, #20]
 800d99a:	6103      	str	r3, [r0, #16]
 800d99c:	bd10      	pop	{r4, pc}
 800d99e:	bf00      	nop
 800d9a0:	0800f63f 	.word	0x0800f63f
 800d9a4:	0800f6b0 	.word	0x0800f6b0

0800d9a8 <__multiply>:
 800d9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	4691      	mov	r9, r2
 800d9ae:	690a      	ldr	r2, [r1, #16]
 800d9b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	bfb8      	it	lt
 800d9b8:	460b      	movlt	r3, r1
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	bfbc      	itt	lt
 800d9be:	464c      	movlt	r4, r9
 800d9c0:	4699      	movlt	r9, r3
 800d9c2:	6927      	ldr	r7, [r4, #16]
 800d9c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	6861      	ldr	r1, [r4, #4]
 800d9cc:	eb07 060a 	add.w	r6, r7, sl
 800d9d0:	42b3      	cmp	r3, r6
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	bfb8      	it	lt
 800d9d6:	3101      	addlt	r1, #1
 800d9d8:	f7ff fed8 	bl	800d78c <_Balloc>
 800d9dc:	b930      	cbnz	r0, 800d9ec <__multiply+0x44>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	4b44      	ldr	r3, [pc, #272]	; (800daf4 <__multiply+0x14c>)
 800d9e2:	4845      	ldr	r0, [pc, #276]	; (800daf8 <__multiply+0x150>)
 800d9e4:	f240 115d 	movw	r1, #349	; 0x15d
 800d9e8:	f000 fc1a 	bl	800e220 <__assert_func>
 800d9ec:	f100 0514 	add.w	r5, r0, #20
 800d9f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	4543      	cmp	r3, r8
 800d9fa:	d321      	bcc.n	800da40 <__multiply+0x98>
 800d9fc:	f104 0314 	add.w	r3, r4, #20
 800da00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da04:	f109 0314 	add.w	r3, r9, #20
 800da08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da0c:	9202      	str	r2, [sp, #8]
 800da0e:	1b3a      	subs	r2, r7, r4
 800da10:	3a15      	subs	r2, #21
 800da12:	f022 0203 	bic.w	r2, r2, #3
 800da16:	3204      	adds	r2, #4
 800da18:	f104 0115 	add.w	r1, r4, #21
 800da1c:	428f      	cmp	r7, r1
 800da1e:	bf38      	it	cc
 800da20:	2204      	movcc	r2, #4
 800da22:	9201      	str	r2, [sp, #4]
 800da24:	9a02      	ldr	r2, [sp, #8]
 800da26:	9303      	str	r3, [sp, #12]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d80c      	bhi.n	800da46 <__multiply+0x9e>
 800da2c:	2e00      	cmp	r6, #0
 800da2e:	dd03      	ble.n	800da38 <__multiply+0x90>
 800da30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da34:	2b00      	cmp	r3, #0
 800da36:	d05a      	beq.n	800daee <__multiply+0x146>
 800da38:	6106      	str	r6, [r0, #16]
 800da3a:	b005      	add	sp, #20
 800da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da40:	f843 2b04 	str.w	r2, [r3], #4
 800da44:	e7d8      	b.n	800d9f8 <__multiply+0x50>
 800da46:	f8b3 a000 	ldrh.w	sl, [r3]
 800da4a:	f1ba 0f00 	cmp.w	sl, #0
 800da4e:	d024      	beq.n	800da9a <__multiply+0xf2>
 800da50:	f104 0e14 	add.w	lr, r4, #20
 800da54:	46a9      	mov	r9, r5
 800da56:	f04f 0c00 	mov.w	ip, #0
 800da5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da5e:	f8d9 1000 	ldr.w	r1, [r9]
 800da62:	fa1f fb82 	uxth.w	fp, r2
 800da66:	b289      	uxth	r1, r1
 800da68:	fb0a 110b 	mla	r1, sl, fp, r1
 800da6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da70:	f8d9 2000 	ldr.w	r2, [r9]
 800da74:	4461      	add	r1, ip
 800da76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800da7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da82:	b289      	uxth	r1, r1
 800da84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da88:	4577      	cmp	r7, lr
 800da8a:	f849 1b04 	str.w	r1, [r9], #4
 800da8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da92:	d8e2      	bhi.n	800da5a <__multiply+0xb2>
 800da94:	9a01      	ldr	r2, [sp, #4]
 800da96:	f845 c002 	str.w	ip, [r5, r2]
 800da9a:	9a03      	ldr	r2, [sp, #12]
 800da9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800daa0:	3304      	adds	r3, #4
 800daa2:	f1b9 0f00 	cmp.w	r9, #0
 800daa6:	d020      	beq.n	800daea <__multiply+0x142>
 800daa8:	6829      	ldr	r1, [r5, #0]
 800daaa:	f104 0c14 	add.w	ip, r4, #20
 800daae:	46ae      	mov	lr, r5
 800dab0:	f04f 0a00 	mov.w	sl, #0
 800dab4:	f8bc b000 	ldrh.w	fp, [ip]
 800dab8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dabc:	fb09 220b 	mla	r2, r9, fp, r2
 800dac0:	4492      	add	sl, r2
 800dac2:	b289      	uxth	r1, r1
 800dac4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dac8:	f84e 1b04 	str.w	r1, [lr], #4
 800dacc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dad0:	f8be 1000 	ldrh.w	r1, [lr]
 800dad4:	0c12      	lsrs	r2, r2, #16
 800dad6:	fb09 1102 	mla	r1, r9, r2, r1
 800dada:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dade:	4567      	cmp	r7, ip
 800dae0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dae4:	d8e6      	bhi.n	800dab4 <__multiply+0x10c>
 800dae6:	9a01      	ldr	r2, [sp, #4]
 800dae8:	50a9      	str	r1, [r5, r2]
 800daea:	3504      	adds	r5, #4
 800daec:	e79a      	b.n	800da24 <__multiply+0x7c>
 800daee:	3e01      	subs	r6, #1
 800daf0:	e79c      	b.n	800da2c <__multiply+0x84>
 800daf2:	bf00      	nop
 800daf4:	0800f63f 	.word	0x0800f63f
 800daf8:	0800f6b0 	.word	0x0800f6b0

0800dafc <__pow5mult>:
 800dafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db00:	4615      	mov	r5, r2
 800db02:	f012 0203 	ands.w	r2, r2, #3
 800db06:	4606      	mov	r6, r0
 800db08:	460f      	mov	r7, r1
 800db0a:	d007      	beq.n	800db1c <__pow5mult+0x20>
 800db0c:	4c25      	ldr	r4, [pc, #148]	; (800dba4 <__pow5mult+0xa8>)
 800db0e:	3a01      	subs	r2, #1
 800db10:	2300      	movs	r3, #0
 800db12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db16:	f7ff fe9b 	bl	800d850 <__multadd>
 800db1a:	4607      	mov	r7, r0
 800db1c:	10ad      	asrs	r5, r5, #2
 800db1e:	d03d      	beq.n	800db9c <__pow5mult+0xa0>
 800db20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db22:	b97c      	cbnz	r4, 800db44 <__pow5mult+0x48>
 800db24:	2010      	movs	r0, #16
 800db26:	f7fd fe6b 	bl	800b800 <malloc>
 800db2a:	4602      	mov	r2, r0
 800db2c:	6270      	str	r0, [r6, #36]	; 0x24
 800db2e:	b928      	cbnz	r0, 800db3c <__pow5mult+0x40>
 800db30:	4b1d      	ldr	r3, [pc, #116]	; (800dba8 <__pow5mult+0xac>)
 800db32:	481e      	ldr	r0, [pc, #120]	; (800dbac <__pow5mult+0xb0>)
 800db34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db38:	f000 fb72 	bl	800e220 <__assert_func>
 800db3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db40:	6004      	str	r4, [r0, #0]
 800db42:	60c4      	str	r4, [r0, #12]
 800db44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db4c:	b94c      	cbnz	r4, 800db62 <__pow5mult+0x66>
 800db4e:	f240 2171 	movw	r1, #625	; 0x271
 800db52:	4630      	mov	r0, r6
 800db54:	f7ff ff12 	bl	800d97c <__i2b>
 800db58:	2300      	movs	r3, #0
 800db5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db5e:	4604      	mov	r4, r0
 800db60:	6003      	str	r3, [r0, #0]
 800db62:	f04f 0900 	mov.w	r9, #0
 800db66:	07eb      	lsls	r3, r5, #31
 800db68:	d50a      	bpl.n	800db80 <__pow5mult+0x84>
 800db6a:	4639      	mov	r1, r7
 800db6c:	4622      	mov	r2, r4
 800db6e:	4630      	mov	r0, r6
 800db70:	f7ff ff1a 	bl	800d9a8 <__multiply>
 800db74:	4639      	mov	r1, r7
 800db76:	4680      	mov	r8, r0
 800db78:	4630      	mov	r0, r6
 800db7a:	f7ff fe47 	bl	800d80c <_Bfree>
 800db7e:	4647      	mov	r7, r8
 800db80:	106d      	asrs	r5, r5, #1
 800db82:	d00b      	beq.n	800db9c <__pow5mult+0xa0>
 800db84:	6820      	ldr	r0, [r4, #0]
 800db86:	b938      	cbnz	r0, 800db98 <__pow5mult+0x9c>
 800db88:	4622      	mov	r2, r4
 800db8a:	4621      	mov	r1, r4
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7ff ff0b 	bl	800d9a8 <__multiply>
 800db92:	6020      	str	r0, [r4, #0]
 800db94:	f8c0 9000 	str.w	r9, [r0]
 800db98:	4604      	mov	r4, r0
 800db9a:	e7e4      	b.n	800db66 <__pow5mult+0x6a>
 800db9c:	4638      	mov	r0, r7
 800db9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dba2:	bf00      	nop
 800dba4:	0800f800 	.word	0x0800f800
 800dba8:	0800f5cd 	.word	0x0800f5cd
 800dbac:	0800f6b0 	.word	0x0800f6b0

0800dbb0 <__lshift>:
 800dbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	6849      	ldr	r1, [r1, #4]
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbbe:	68a3      	ldr	r3, [r4, #8]
 800dbc0:	4607      	mov	r7, r0
 800dbc2:	4691      	mov	r9, r2
 800dbc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbc8:	f108 0601 	add.w	r6, r8, #1
 800dbcc:	42b3      	cmp	r3, r6
 800dbce:	db0b      	blt.n	800dbe8 <__lshift+0x38>
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	f7ff fddb 	bl	800d78c <_Balloc>
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	b948      	cbnz	r0, 800dbee <__lshift+0x3e>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	4b2a      	ldr	r3, [pc, #168]	; (800dc88 <__lshift+0xd8>)
 800dbde:	482b      	ldr	r0, [pc, #172]	; (800dc8c <__lshift+0xdc>)
 800dbe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbe4:	f000 fb1c 	bl	800e220 <__assert_func>
 800dbe8:	3101      	adds	r1, #1
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	e7ee      	b.n	800dbcc <__lshift+0x1c>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f100 0114 	add.w	r1, r0, #20
 800dbf4:	f100 0210 	add.w	r2, r0, #16
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	4553      	cmp	r3, sl
 800dbfc:	db37      	blt.n	800dc6e <__lshift+0xbe>
 800dbfe:	6920      	ldr	r0, [r4, #16]
 800dc00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc04:	f104 0314 	add.w	r3, r4, #20
 800dc08:	f019 091f 	ands.w	r9, r9, #31
 800dc0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc14:	d02f      	beq.n	800dc76 <__lshift+0xc6>
 800dc16:	f1c9 0e20 	rsb	lr, r9, #32
 800dc1a:	468a      	mov	sl, r1
 800dc1c:	f04f 0c00 	mov.w	ip, #0
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	fa02 f209 	lsl.w	r2, r2, r9
 800dc26:	ea42 020c 	orr.w	r2, r2, ip
 800dc2a:	f84a 2b04 	str.w	r2, [sl], #4
 800dc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc32:	4298      	cmp	r0, r3
 800dc34:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc38:	d8f2      	bhi.n	800dc20 <__lshift+0x70>
 800dc3a:	1b03      	subs	r3, r0, r4
 800dc3c:	3b15      	subs	r3, #21
 800dc3e:	f023 0303 	bic.w	r3, r3, #3
 800dc42:	3304      	adds	r3, #4
 800dc44:	f104 0215 	add.w	r2, r4, #21
 800dc48:	4290      	cmp	r0, r2
 800dc4a:	bf38      	it	cc
 800dc4c:	2304      	movcc	r3, #4
 800dc4e:	f841 c003 	str.w	ip, [r1, r3]
 800dc52:	f1bc 0f00 	cmp.w	ip, #0
 800dc56:	d001      	beq.n	800dc5c <__lshift+0xac>
 800dc58:	f108 0602 	add.w	r6, r8, #2
 800dc5c:	3e01      	subs	r6, #1
 800dc5e:	4638      	mov	r0, r7
 800dc60:	612e      	str	r6, [r5, #16]
 800dc62:	4621      	mov	r1, r4
 800dc64:	f7ff fdd2 	bl	800d80c <_Bfree>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc72:	3301      	adds	r3, #1
 800dc74:	e7c1      	b.n	800dbfa <__lshift+0x4a>
 800dc76:	3904      	subs	r1, #4
 800dc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc80:	4298      	cmp	r0, r3
 800dc82:	d8f9      	bhi.n	800dc78 <__lshift+0xc8>
 800dc84:	e7ea      	b.n	800dc5c <__lshift+0xac>
 800dc86:	bf00      	nop
 800dc88:	0800f63f 	.word	0x0800f63f
 800dc8c:	0800f6b0 	.word	0x0800f6b0

0800dc90 <__mcmp>:
 800dc90:	b530      	push	{r4, r5, lr}
 800dc92:	6902      	ldr	r2, [r0, #16]
 800dc94:	690c      	ldr	r4, [r1, #16]
 800dc96:	1b12      	subs	r2, r2, r4
 800dc98:	d10e      	bne.n	800dcb8 <__mcmp+0x28>
 800dc9a:	f100 0314 	add.w	r3, r0, #20
 800dc9e:	3114      	adds	r1, #20
 800dca0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dca8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dcac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dcb0:	42a5      	cmp	r5, r4
 800dcb2:	d003      	beq.n	800dcbc <__mcmp+0x2c>
 800dcb4:	d305      	bcc.n	800dcc2 <__mcmp+0x32>
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	4610      	mov	r0, r2
 800dcba:	bd30      	pop	{r4, r5, pc}
 800dcbc:	4283      	cmp	r3, r0
 800dcbe:	d3f3      	bcc.n	800dca8 <__mcmp+0x18>
 800dcc0:	e7fa      	b.n	800dcb8 <__mcmp+0x28>
 800dcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc6:	e7f7      	b.n	800dcb8 <__mcmp+0x28>

0800dcc8 <__mdiff>:
 800dcc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	460c      	mov	r4, r1
 800dcce:	4606      	mov	r6, r0
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4690      	mov	r8, r2
 800dcd6:	f7ff ffdb 	bl	800dc90 <__mcmp>
 800dcda:	1e05      	subs	r5, r0, #0
 800dcdc:	d110      	bne.n	800dd00 <__mdiff+0x38>
 800dcde:	4629      	mov	r1, r5
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7ff fd53 	bl	800d78c <_Balloc>
 800dce6:	b930      	cbnz	r0, 800dcf6 <__mdiff+0x2e>
 800dce8:	4b3a      	ldr	r3, [pc, #232]	; (800ddd4 <__mdiff+0x10c>)
 800dcea:	4602      	mov	r2, r0
 800dcec:	f240 2132 	movw	r1, #562	; 0x232
 800dcf0:	4839      	ldr	r0, [pc, #228]	; (800ddd8 <__mdiff+0x110>)
 800dcf2:	f000 fa95 	bl	800e220 <__assert_func>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd00:	bfa4      	itt	ge
 800dd02:	4643      	movge	r3, r8
 800dd04:	46a0      	movge	r8, r4
 800dd06:	4630      	mov	r0, r6
 800dd08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd0c:	bfa6      	itte	ge
 800dd0e:	461c      	movge	r4, r3
 800dd10:	2500      	movge	r5, #0
 800dd12:	2501      	movlt	r5, #1
 800dd14:	f7ff fd3a 	bl	800d78c <_Balloc>
 800dd18:	b920      	cbnz	r0, 800dd24 <__mdiff+0x5c>
 800dd1a:	4b2e      	ldr	r3, [pc, #184]	; (800ddd4 <__mdiff+0x10c>)
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd22:	e7e5      	b.n	800dcf0 <__mdiff+0x28>
 800dd24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd28:	6926      	ldr	r6, [r4, #16]
 800dd2a:	60c5      	str	r5, [r0, #12]
 800dd2c:	f104 0914 	add.w	r9, r4, #20
 800dd30:	f108 0514 	add.w	r5, r8, #20
 800dd34:	f100 0e14 	add.w	lr, r0, #20
 800dd38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd40:	f108 0210 	add.w	r2, r8, #16
 800dd44:	46f2      	mov	sl, lr
 800dd46:	2100      	movs	r1, #0
 800dd48:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd50:	fa1f f883 	uxth.w	r8, r3
 800dd54:	fa11 f18b 	uxtah	r1, r1, fp
 800dd58:	0c1b      	lsrs	r3, r3, #16
 800dd5a:	eba1 0808 	sub.w	r8, r1, r8
 800dd5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd66:	fa1f f888 	uxth.w	r8, r8
 800dd6a:	1419      	asrs	r1, r3, #16
 800dd6c:	454e      	cmp	r6, r9
 800dd6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd72:	f84a 3b04 	str.w	r3, [sl], #4
 800dd76:	d8e7      	bhi.n	800dd48 <__mdiff+0x80>
 800dd78:	1b33      	subs	r3, r6, r4
 800dd7a:	3b15      	subs	r3, #21
 800dd7c:	f023 0303 	bic.w	r3, r3, #3
 800dd80:	3304      	adds	r3, #4
 800dd82:	3415      	adds	r4, #21
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	bf38      	it	cc
 800dd88:	2304      	movcc	r3, #4
 800dd8a:	441d      	add	r5, r3
 800dd8c:	4473      	add	r3, lr
 800dd8e:	469e      	mov	lr, r3
 800dd90:	462e      	mov	r6, r5
 800dd92:	4566      	cmp	r6, ip
 800dd94:	d30e      	bcc.n	800ddb4 <__mdiff+0xec>
 800dd96:	f10c 0203 	add.w	r2, ip, #3
 800dd9a:	1b52      	subs	r2, r2, r5
 800dd9c:	f022 0203 	bic.w	r2, r2, #3
 800dda0:	3d03      	subs	r5, #3
 800dda2:	45ac      	cmp	ip, r5
 800dda4:	bf38      	it	cc
 800dda6:	2200      	movcc	r2, #0
 800dda8:	441a      	add	r2, r3
 800ddaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ddae:	b17b      	cbz	r3, 800ddd0 <__mdiff+0x108>
 800ddb0:	6107      	str	r7, [r0, #16]
 800ddb2:	e7a3      	b.n	800dcfc <__mdiff+0x34>
 800ddb4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ddb8:	fa11 f288 	uxtah	r2, r1, r8
 800ddbc:	1414      	asrs	r4, r2, #16
 800ddbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddc2:	b292      	uxth	r2, r2
 800ddc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddc8:	f84e 2b04 	str.w	r2, [lr], #4
 800ddcc:	1421      	asrs	r1, r4, #16
 800ddce:	e7e0      	b.n	800dd92 <__mdiff+0xca>
 800ddd0:	3f01      	subs	r7, #1
 800ddd2:	e7ea      	b.n	800ddaa <__mdiff+0xe2>
 800ddd4:	0800f63f 	.word	0x0800f63f
 800ddd8:	0800f6b0 	.word	0x0800f6b0

0800dddc <__d2b>:
 800dddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dde0:	4689      	mov	r9, r1
 800dde2:	2101      	movs	r1, #1
 800dde4:	ec57 6b10 	vmov	r6, r7, d0
 800dde8:	4690      	mov	r8, r2
 800ddea:	f7ff fccf 	bl	800d78c <_Balloc>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	b930      	cbnz	r0, 800de00 <__d2b+0x24>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b25      	ldr	r3, [pc, #148]	; (800de8c <__d2b+0xb0>)
 800ddf6:	4826      	ldr	r0, [pc, #152]	; (800de90 <__d2b+0xb4>)
 800ddf8:	f240 310a 	movw	r1, #778	; 0x30a
 800ddfc:	f000 fa10 	bl	800e220 <__assert_func>
 800de00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de08:	bb35      	cbnz	r5, 800de58 <__d2b+0x7c>
 800de0a:	2e00      	cmp	r6, #0
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	d028      	beq.n	800de62 <__d2b+0x86>
 800de10:	4668      	mov	r0, sp
 800de12:	9600      	str	r6, [sp, #0]
 800de14:	f7ff fd82 	bl	800d91c <__lo0bits>
 800de18:	9900      	ldr	r1, [sp, #0]
 800de1a:	b300      	cbz	r0, 800de5e <__d2b+0x82>
 800de1c:	9a01      	ldr	r2, [sp, #4]
 800de1e:	f1c0 0320 	rsb	r3, r0, #32
 800de22:	fa02 f303 	lsl.w	r3, r2, r3
 800de26:	430b      	orrs	r3, r1
 800de28:	40c2      	lsrs	r2, r0
 800de2a:	6163      	str	r3, [r4, #20]
 800de2c:	9201      	str	r2, [sp, #4]
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	61a3      	str	r3, [r4, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	bf14      	ite	ne
 800de36:	2202      	movne	r2, #2
 800de38:	2201      	moveq	r2, #1
 800de3a:	6122      	str	r2, [r4, #16]
 800de3c:	b1d5      	cbz	r5, 800de74 <__d2b+0x98>
 800de3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de42:	4405      	add	r5, r0
 800de44:	f8c9 5000 	str.w	r5, [r9]
 800de48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de4c:	f8c8 0000 	str.w	r0, [r8]
 800de50:	4620      	mov	r0, r4
 800de52:	b003      	add	sp, #12
 800de54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de5c:	e7d5      	b.n	800de0a <__d2b+0x2e>
 800de5e:	6161      	str	r1, [r4, #20]
 800de60:	e7e5      	b.n	800de2e <__d2b+0x52>
 800de62:	a801      	add	r0, sp, #4
 800de64:	f7ff fd5a 	bl	800d91c <__lo0bits>
 800de68:	9b01      	ldr	r3, [sp, #4]
 800de6a:	6163      	str	r3, [r4, #20]
 800de6c:	2201      	movs	r2, #1
 800de6e:	6122      	str	r2, [r4, #16]
 800de70:	3020      	adds	r0, #32
 800de72:	e7e3      	b.n	800de3c <__d2b+0x60>
 800de74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de7c:	f8c9 0000 	str.w	r0, [r9]
 800de80:	6918      	ldr	r0, [r3, #16]
 800de82:	f7ff fd2b 	bl	800d8dc <__hi0bits>
 800de86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de8a:	e7df      	b.n	800de4c <__d2b+0x70>
 800de8c:	0800f63f 	.word	0x0800f63f
 800de90:	0800f6b0 	.word	0x0800f6b0

0800de94 <_calloc_r>:
 800de94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de96:	fba1 2402 	umull	r2, r4, r1, r2
 800de9a:	b94c      	cbnz	r4, 800deb0 <_calloc_r+0x1c>
 800de9c:	4611      	mov	r1, r2
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	f7fd fd48 	bl	800b934 <_malloc_r>
 800dea4:	9a01      	ldr	r2, [sp, #4]
 800dea6:	4605      	mov	r5, r0
 800dea8:	b930      	cbnz	r0, 800deb8 <_calloc_r+0x24>
 800deaa:	4628      	mov	r0, r5
 800deac:	b003      	add	sp, #12
 800deae:	bd30      	pop	{r4, r5, pc}
 800deb0:	220c      	movs	r2, #12
 800deb2:	6002      	str	r2, [r0, #0]
 800deb4:	2500      	movs	r5, #0
 800deb6:	e7f8      	b.n	800deaa <_calloc_r+0x16>
 800deb8:	4621      	mov	r1, r4
 800deba:	f7fd fcc7 	bl	800b84c <memset>
 800debe:	e7f4      	b.n	800deaa <_calloc_r+0x16>

0800dec0 <__sfputc_r>:
 800dec0:	6893      	ldr	r3, [r2, #8]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	b410      	push	{r4}
 800dec8:	6093      	str	r3, [r2, #8]
 800deca:	da08      	bge.n	800dede <__sfputc_r+0x1e>
 800decc:	6994      	ldr	r4, [r2, #24]
 800dece:	42a3      	cmp	r3, r4
 800ded0:	db01      	blt.n	800ded6 <__sfputc_r+0x16>
 800ded2:	290a      	cmp	r1, #10
 800ded4:	d103      	bne.n	800dede <__sfputc_r+0x1e>
 800ded6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deda:	f7fe baeb 	b.w	800c4b4 <__swbuf_r>
 800dede:	6813      	ldr	r3, [r2, #0]
 800dee0:	1c58      	adds	r0, r3, #1
 800dee2:	6010      	str	r0, [r2, #0]
 800dee4:	7019      	strb	r1, [r3, #0]
 800dee6:	4608      	mov	r0, r1
 800dee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deec:	4770      	bx	lr

0800deee <__sfputs_r>:
 800deee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def0:	4606      	mov	r6, r0
 800def2:	460f      	mov	r7, r1
 800def4:	4614      	mov	r4, r2
 800def6:	18d5      	adds	r5, r2, r3
 800def8:	42ac      	cmp	r4, r5
 800defa:	d101      	bne.n	800df00 <__sfputs_r+0x12>
 800defc:	2000      	movs	r0, #0
 800defe:	e007      	b.n	800df10 <__sfputs_r+0x22>
 800df00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df04:	463a      	mov	r2, r7
 800df06:	4630      	mov	r0, r6
 800df08:	f7ff ffda 	bl	800dec0 <__sfputc_r>
 800df0c:	1c43      	adds	r3, r0, #1
 800df0e:	d1f3      	bne.n	800def8 <__sfputs_r+0xa>
 800df10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df14 <_vfiprintf_r>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	460d      	mov	r5, r1
 800df1a:	b09d      	sub	sp, #116	; 0x74
 800df1c:	4614      	mov	r4, r2
 800df1e:	4698      	mov	r8, r3
 800df20:	4606      	mov	r6, r0
 800df22:	b118      	cbz	r0, 800df2c <_vfiprintf_r+0x18>
 800df24:	6983      	ldr	r3, [r0, #24]
 800df26:	b90b      	cbnz	r3, 800df2c <_vfiprintf_r+0x18>
 800df28:	f7ff fb1a 	bl	800d560 <__sinit>
 800df2c:	4b89      	ldr	r3, [pc, #548]	; (800e154 <_vfiprintf_r+0x240>)
 800df2e:	429d      	cmp	r5, r3
 800df30:	d11b      	bne.n	800df6a <_vfiprintf_r+0x56>
 800df32:	6875      	ldr	r5, [r6, #4]
 800df34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df36:	07d9      	lsls	r1, r3, #31
 800df38:	d405      	bmi.n	800df46 <_vfiprintf_r+0x32>
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	059a      	lsls	r2, r3, #22
 800df3e:	d402      	bmi.n	800df46 <_vfiprintf_r+0x32>
 800df40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df42:	f7ff fbb0 	bl	800d6a6 <__retarget_lock_acquire_recursive>
 800df46:	89ab      	ldrh	r3, [r5, #12]
 800df48:	071b      	lsls	r3, r3, #28
 800df4a:	d501      	bpl.n	800df50 <_vfiprintf_r+0x3c>
 800df4c:	692b      	ldr	r3, [r5, #16]
 800df4e:	b9eb      	cbnz	r3, 800df8c <_vfiprintf_r+0x78>
 800df50:	4629      	mov	r1, r5
 800df52:	4630      	mov	r0, r6
 800df54:	f7fe fb00 	bl	800c558 <__swsetup_r>
 800df58:	b1c0      	cbz	r0, 800df8c <_vfiprintf_r+0x78>
 800df5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df5c:	07dc      	lsls	r4, r3, #31
 800df5e:	d50e      	bpl.n	800df7e <_vfiprintf_r+0x6a>
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	b01d      	add	sp, #116	; 0x74
 800df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6a:	4b7b      	ldr	r3, [pc, #492]	; (800e158 <_vfiprintf_r+0x244>)
 800df6c:	429d      	cmp	r5, r3
 800df6e:	d101      	bne.n	800df74 <_vfiprintf_r+0x60>
 800df70:	68b5      	ldr	r5, [r6, #8]
 800df72:	e7df      	b.n	800df34 <_vfiprintf_r+0x20>
 800df74:	4b79      	ldr	r3, [pc, #484]	; (800e15c <_vfiprintf_r+0x248>)
 800df76:	429d      	cmp	r5, r3
 800df78:	bf08      	it	eq
 800df7a:	68f5      	ldreq	r5, [r6, #12]
 800df7c:	e7da      	b.n	800df34 <_vfiprintf_r+0x20>
 800df7e:	89ab      	ldrh	r3, [r5, #12]
 800df80:	0598      	lsls	r0, r3, #22
 800df82:	d4ed      	bmi.n	800df60 <_vfiprintf_r+0x4c>
 800df84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df86:	f7ff fb8f 	bl	800d6a8 <__retarget_lock_release_recursive>
 800df8a:	e7e9      	b.n	800df60 <_vfiprintf_r+0x4c>
 800df8c:	2300      	movs	r3, #0
 800df8e:	9309      	str	r3, [sp, #36]	; 0x24
 800df90:	2320      	movs	r3, #32
 800df92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df96:	f8cd 800c 	str.w	r8, [sp, #12]
 800df9a:	2330      	movs	r3, #48	; 0x30
 800df9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e160 <_vfiprintf_r+0x24c>
 800dfa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfa4:	f04f 0901 	mov.w	r9, #1
 800dfa8:	4623      	mov	r3, r4
 800dfaa:	469a      	mov	sl, r3
 800dfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfb0:	b10a      	cbz	r2, 800dfb6 <_vfiprintf_r+0xa2>
 800dfb2:	2a25      	cmp	r2, #37	; 0x25
 800dfb4:	d1f9      	bne.n	800dfaa <_vfiprintf_r+0x96>
 800dfb6:	ebba 0b04 	subs.w	fp, sl, r4
 800dfba:	d00b      	beq.n	800dfd4 <_vfiprintf_r+0xc0>
 800dfbc:	465b      	mov	r3, fp
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7ff ff93 	bl	800deee <__sfputs_r>
 800dfc8:	3001      	adds	r0, #1
 800dfca:	f000 80aa 	beq.w	800e122 <_vfiprintf_r+0x20e>
 800dfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfd0:	445a      	add	r2, fp
 800dfd2:	9209      	str	r2, [sp, #36]	; 0x24
 800dfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 80a2 	beq.w	800e122 <_vfiprintf_r+0x20e>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfe8:	f10a 0a01 	add.w	sl, sl, #1
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dff4:	931a      	str	r3, [sp, #104]	; 0x68
 800dff6:	4654      	mov	r4, sl
 800dff8:	2205      	movs	r2, #5
 800dffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dffe:	4858      	ldr	r0, [pc, #352]	; (800e160 <_vfiprintf_r+0x24c>)
 800e000:	f7f2 f90e 	bl	8000220 <memchr>
 800e004:	9a04      	ldr	r2, [sp, #16]
 800e006:	b9d8      	cbnz	r0, 800e040 <_vfiprintf_r+0x12c>
 800e008:	06d1      	lsls	r1, r2, #27
 800e00a:	bf44      	itt	mi
 800e00c:	2320      	movmi	r3, #32
 800e00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e012:	0713      	lsls	r3, r2, #28
 800e014:	bf44      	itt	mi
 800e016:	232b      	movmi	r3, #43	; 0x2b
 800e018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e01c:	f89a 3000 	ldrb.w	r3, [sl]
 800e020:	2b2a      	cmp	r3, #42	; 0x2a
 800e022:	d015      	beq.n	800e050 <_vfiprintf_r+0x13c>
 800e024:	9a07      	ldr	r2, [sp, #28]
 800e026:	4654      	mov	r4, sl
 800e028:	2000      	movs	r0, #0
 800e02a:	f04f 0c0a 	mov.w	ip, #10
 800e02e:	4621      	mov	r1, r4
 800e030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e034:	3b30      	subs	r3, #48	; 0x30
 800e036:	2b09      	cmp	r3, #9
 800e038:	d94e      	bls.n	800e0d8 <_vfiprintf_r+0x1c4>
 800e03a:	b1b0      	cbz	r0, 800e06a <_vfiprintf_r+0x156>
 800e03c:	9207      	str	r2, [sp, #28]
 800e03e:	e014      	b.n	800e06a <_vfiprintf_r+0x156>
 800e040:	eba0 0308 	sub.w	r3, r0, r8
 800e044:	fa09 f303 	lsl.w	r3, r9, r3
 800e048:	4313      	orrs	r3, r2
 800e04a:	9304      	str	r3, [sp, #16]
 800e04c:	46a2      	mov	sl, r4
 800e04e:	e7d2      	b.n	800dff6 <_vfiprintf_r+0xe2>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	1d19      	adds	r1, r3, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	9103      	str	r1, [sp, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bfbb      	ittet	lt
 800e05c:	425b      	neglt	r3, r3
 800e05e:	f042 0202 	orrlt.w	r2, r2, #2
 800e062:	9307      	strge	r3, [sp, #28]
 800e064:	9307      	strlt	r3, [sp, #28]
 800e066:	bfb8      	it	lt
 800e068:	9204      	strlt	r2, [sp, #16]
 800e06a:	7823      	ldrb	r3, [r4, #0]
 800e06c:	2b2e      	cmp	r3, #46	; 0x2e
 800e06e:	d10c      	bne.n	800e08a <_vfiprintf_r+0x176>
 800e070:	7863      	ldrb	r3, [r4, #1]
 800e072:	2b2a      	cmp	r3, #42	; 0x2a
 800e074:	d135      	bne.n	800e0e2 <_vfiprintf_r+0x1ce>
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	1d1a      	adds	r2, r3, #4
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	9203      	str	r2, [sp, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	bfb8      	it	lt
 800e082:	f04f 33ff 	movlt.w	r3, #4294967295
 800e086:	3402      	adds	r4, #2
 800e088:	9305      	str	r3, [sp, #20]
 800e08a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e170 <_vfiprintf_r+0x25c>
 800e08e:	7821      	ldrb	r1, [r4, #0]
 800e090:	2203      	movs	r2, #3
 800e092:	4650      	mov	r0, sl
 800e094:	f7f2 f8c4 	bl	8000220 <memchr>
 800e098:	b140      	cbz	r0, 800e0ac <_vfiprintf_r+0x198>
 800e09a:	2340      	movs	r3, #64	; 0x40
 800e09c:	eba0 000a 	sub.w	r0, r0, sl
 800e0a0:	fa03 f000 	lsl.w	r0, r3, r0
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	4303      	orrs	r3, r0
 800e0a8:	3401      	adds	r4, #1
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b0:	482c      	ldr	r0, [pc, #176]	; (800e164 <_vfiprintf_r+0x250>)
 800e0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0b6:	2206      	movs	r2, #6
 800e0b8:	f7f2 f8b2 	bl	8000220 <memchr>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d03f      	beq.n	800e140 <_vfiprintf_r+0x22c>
 800e0c0:	4b29      	ldr	r3, [pc, #164]	; (800e168 <_vfiprintf_r+0x254>)
 800e0c2:	bb1b      	cbnz	r3, 800e10c <_vfiprintf_r+0x1f8>
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	3307      	adds	r3, #7
 800e0c8:	f023 0307 	bic.w	r3, r3, #7
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	9303      	str	r3, [sp, #12]
 800e0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d2:	443b      	add	r3, r7
 800e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d6:	e767      	b.n	800dfa8 <_vfiprintf_r+0x94>
 800e0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0dc:	460c      	mov	r4, r1
 800e0de:	2001      	movs	r0, #1
 800e0e0:	e7a5      	b.n	800e02e <_vfiprintf_r+0x11a>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	3401      	adds	r4, #1
 800e0e6:	9305      	str	r3, [sp, #20]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	f04f 0c0a 	mov.w	ip, #10
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f4:	3a30      	subs	r2, #48	; 0x30
 800e0f6:	2a09      	cmp	r2, #9
 800e0f8:	d903      	bls.n	800e102 <_vfiprintf_r+0x1ee>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0c5      	beq.n	800e08a <_vfiprintf_r+0x176>
 800e0fe:	9105      	str	r1, [sp, #20]
 800e100:	e7c3      	b.n	800e08a <_vfiprintf_r+0x176>
 800e102:	fb0c 2101 	mla	r1, ip, r1, r2
 800e106:	4604      	mov	r4, r0
 800e108:	2301      	movs	r3, #1
 800e10a:	e7f0      	b.n	800e0ee <_vfiprintf_r+0x1da>
 800e10c:	ab03      	add	r3, sp, #12
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	462a      	mov	r2, r5
 800e112:	4b16      	ldr	r3, [pc, #88]	; (800e16c <_vfiprintf_r+0x258>)
 800e114:	a904      	add	r1, sp, #16
 800e116:	4630      	mov	r0, r6
 800e118:	f7fd fd20 	bl	800bb5c <_printf_float>
 800e11c:	4607      	mov	r7, r0
 800e11e:	1c78      	adds	r0, r7, #1
 800e120:	d1d6      	bne.n	800e0d0 <_vfiprintf_r+0x1bc>
 800e122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e124:	07d9      	lsls	r1, r3, #31
 800e126:	d405      	bmi.n	800e134 <_vfiprintf_r+0x220>
 800e128:	89ab      	ldrh	r3, [r5, #12]
 800e12a:	059a      	lsls	r2, r3, #22
 800e12c:	d402      	bmi.n	800e134 <_vfiprintf_r+0x220>
 800e12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e130:	f7ff faba 	bl	800d6a8 <__retarget_lock_release_recursive>
 800e134:	89ab      	ldrh	r3, [r5, #12]
 800e136:	065b      	lsls	r3, r3, #25
 800e138:	f53f af12 	bmi.w	800df60 <_vfiprintf_r+0x4c>
 800e13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e13e:	e711      	b.n	800df64 <_vfiprintf_r+0x50>
 800e140:	ab03      	add	r3, sp, #12
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	462a      	mov	r2, r5
 800e146:	4b09      	ldr	r3, [pc, #36]	; (800e16c <_vfiprintf_r+0x258>)
 800e148:	a904      	add	r1, sp, #16
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7fd ffaa 	bl	800c0a4 <_printf_i>
 800e150:	e7e4      	b.n	800e11c <_vfiprintf_r+0x208>
 800e152:	bf00      	nop
 800e154:	0800f670 	.word	0x0800f670
 800e158:	0800f690 	.word	0x0800f690
 800e15c:	0800f650 	.word	0x0800f650
 800e160:	0800f80c 	.word	0x0800f80c
 800e164:	0800f816 	.word	0x0800f816
 800e168:	0800bb5d 	.word	0x0800bb5d
 800e16c:	0800deef 	.word	0x0800deef
 800e170:	0800f812 	.word	0x0800f812

0800e174 <__sread>:
 800e174:	b510      	push	{r4, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17c:	f000 f8d6 	bl	800e32c <_read_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	bfab      	itete	ge
 800e184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e186:	89a3      	ldrhlt	r3, [r4, #12]
 800e188:	181b      	addge	r3, r3, r0
 800e18a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e18e:	bfac      	ite	ge
 800e190:	6563      	strge	r3, [r4, #84]	; 0x54
 800e192:	81a3      	strhlt	r3, [r4, #12]
 800e194:	bd10      	pop	{r4, pc}

0800e196 <__swrite>:
 800e196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19a:	461f      	mov	r7, r3
 800e19c:	898b      	ldrh	r3, [r1, #12]
 800e19e:	05db      	lsls	r3, r3, #23
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	d505      	bpl.n	800e1b4 <__swrite+0x1e>
 800e1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f000 f898 	bl	800e2e4 <_lseek_r>
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1be:	81a3      	strh	r3, [r4, #12]
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ca:	f000 b817 	b.w	800e1fc <_write_r>

0800e1ce <__sseek>:
 800e1ce:	b510      	push	{r4, lr}
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d6:	f000 f885 	bl	800e2e4 <_lseek_r>
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	89a3      	ldrh	r3, [r4, #12]
 800e1de:	bf15      	itete	ne
 800e1e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1ea:	81a3      	strheq	r3, [r4, #12]
 800e1ec:	bf18      	it	ne
 800e1ee:	81a3      	strhne	r3, [r4, #12]
 800e1f0:	bd10      	pop	{r4, pc}

0800e1f2 <__sclose>:
 800e1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f6:	f000 b831 	b.w	800e25c <_close_r>
	...

0800e1fc <_write_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	; (800e21c <_write_r+0x20>)
 800e200:	4604      	mov	r4, r0
 800e202:	4608      	mov	r0, r1
 800e204:	4611      	mov	r1, r2
 800e206:	2200      	movs	r2, #0
 800e208:	602a      	str	r2, [r5, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	f7f6 fd42 	bl	8004c94 <_write>
 800e210:	1c43      	adds	r3, r0, #1
 800e212:	d102      	bne.n	800e21a <_write_r+0x1e>
 800e214:	682b      	ldr	r3, [r5, #0]
 800e216:	b103      	cbz	r3, 800e21a <_write_r+0x1e>
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	bd38      	pop	{r3, r4, r5, pc}
 800e21c:	20002a34 	.word	0x20002a34

0800e220 <__assert_func>:
 800e220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e222:	4614      	mov	r4, r2
 800e224:	461a      	mov	r2, r3
 800e226:	4b09      	ldr	r3, [pc, #36]	; (800e24c <__assert_func+0x2c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4605      	mov	r5, r0
 800e22c:	68d8      	ldr	r0, [r3, #12]
 800e22e:	b14c      	cbz	r4, 800e244 <__assert_func+0x24>
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <__assert_func+0x30>)
 800e232:	9100      	str	r1, [sp, #0]
 800e234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e238:	4906      	ldr	r1, [pc, #24]	; (800e254 <__assert_func+0x34>)
 800e23a:	462b      	mov	r3, r5
 800e23c:	f000 f81e 	bl	800e27c <fiprintf>
 800e240:	f7fd faac 	bl	800b79c <abort>
 800e244:	4b04      	ldr	r3, [pc, #16]	; (800e258 <__assert_func+0x38>)
 800e246:	461c      	mov	r4, r3
 800e248:	e7f3      	b.n	800e232 <__assert_func+0x12>
 800e24a:	bf00      	nop
 800e24c:	20000184 	.word	0x20000184
 800e250:	0800f81d 	.word	0x0800f81d
 800e254:	0800f82a 	.word	0x0800f82a
 800e258:	0800f449 	.word	0x0800f449

0800e25c <_close_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	; (800e278 <_close_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f6 fd2e 	bl	8004cc8 <_close>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_close_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_close_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	20002a34 	.word	0x20002a34

0800e27c <fiprintf>:
 800e27c:	b40e      	push	{r1, r2, r3}
 800e27e:	b503      	push	{r0, r1, lr}
 800e280:	4601      	mov	r1, r0
 800e282:	ab03      	add	r3, sp, #12
 800e284:	4805      	ldr	r0, [pc, #20]	; (800e29c <fiprintf+0x20>)
 800e286:	f853 2b04 	ldr.w	r2, [r3], #4
 800e28a:	6800      	ldr	r0, [r0, #0]
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	f7ff fe41 	bl	800df14 <_vfiprintf_r>
 800e292:	b002      	add	sp, #8
 800e294:	f85d eb04 	ldr.w	lr, [sp], #4
 800e298:	b003      	add	sp, #12
 800e29a:	4770      	bx	lr
 800e29c:	20000184 	.word	0x20000184

0800e2a0 <_fstat_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4d07      	ldr	r5, [pc, #28]	; (800e2c0 <_fstat_r+0x20>)
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	4608      	mov	r0, r1
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	602b      	str	r3, [r5, #0]
 800e2ae:	f7f6 fd0e 	bl	8004cce <_fstat>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	d102      	bne.n	800e2bc <_fstat_r+0x1c>
 800e2b6:	682b      	ldr	r3, [r5, #0]
 800e2b8:	b103      	cbz	r3, 800e2bc <_fstat_r+0x1c>
 800e2ba:	6023      	str	r3, [r4, #0]
 800e2bc:	bd38      	pop	{r3, r4, r5, pc}
 800e2be:	bf00      	nop
 800e2c0:	20002a34 	.word	0x20002a34

0800e2c4 <_isatty_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d06      	ldr	r5, [pc, #24]	; (800e2e0 <_isatty_r+0x1c>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	602b      	str	r3, [r5, #0]
 800e2d0:	f7f6 fd02 	bl	8004cd8 <_isatty>
 800e2d4:	1c43      	adds	r3, r0, #1
 800e2d6:	d102      	bne.n	800e2de <_isatty_r+0x1a>
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	b103      	cbz	r3, 800e2de <_isatty_r+0x1a>
 800e2dc:	6023      	str	r3, [r4, #0]
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	20002a34 	.word	0x20002a34

0800e2e4 <_lseek_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d07      	ldr	r5, [pc, #28]	; (800e304 <_lseek_r+0x20>)
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	4608      	mov	r0, r1
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	602a      	str	r2, [r5, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	f7f6 fcf2 	bl	8004cdc <_lseek>
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	d102      	bne.n	800e302 <_lseek_r+0x1e>
 800e2fc:	682b      	ldr	r3, [r5, #0]
 800e2fe:	b103      	cbz	r3, 800e302 <_lseek_r+0x1e>
 800e300:	6023      	str	r3, [r4, #0]
 800e302:	bd38      	pop	{r3, r4, r5, pc}
 800e304:	20002a34 	.word	0x20002a34

0800e308 <__ascii_mbtowc>:
 800e308:	b082      	sub	sp, #8
 800e30a:	b901      	cbnz	r1, 800e30e <__ascii_mbtowc+0x6>
 800e30c:	a901      	add	r1, sp, #4
 800e30e:	b142      	cbz	r2, 800e322 <__ascii_mbtowc+0x1a>
 800e310:	b14b      	cbz	r3, 800e326 <__ascii_mbtowc+0x1e>
 800e312:	7813      	ldrb	r3, [r2, #0]
 800e314:	600b      	str	r3, [r1, #0]
 800e316:	7812      	ldrb	r2, [r2, #0]
 800e318:	1e10      	subs	r0, r2, #0
 800e31a:	bf18      	it	ne
 800e31c:	2001      	movne	r0, #1
 800e31e:	b002      	add	sp, #8
 800e320:	4770      	bx	lr
 800e322:	4610      	mov	r0, r2
 800e324:	e7fb      	b.n	800e31e <__ascii_mbtowc+0x16>
 800e326:	f06f 0001 	mvn.w	r0, #1
 800e32a:	e7f8      	b.n	800e31e <__ascii_mbtowc+0x16>

0800e32c <_read_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	; (800e34c <_read_r+0x20>)
 800e330:	4604      	mov	r4, r0
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	2200      	movs	r2, #0
 800e338:	602a      	str	r2, [r5, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7f6 fc9c 	bl	8004c78 <_read>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_read_r+0x1e>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_read_r+0x1e>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20002a34 	.word	0x20002a34

0800e350 <__ascii_wctomb>:
 800e350:	b149      	cbz	r1, 800e366 <__ascii_wctomb+0x16>
 800e352:	2aff      	cmp	r2, #255	; 0xff
 800e354:	bf85      	ittet	hi
 800e356:	238a      	movhi	r3, #138	; 0x8a
 800e358:	6003      	strhi	r3, [r0, #0]
 800e35a:	700a      	strbls	r2, [r1, #0]
 800e35c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e360:	bf98      	it	ls
 800e362:	2001      	movls	r0, #1
 800e364:	4770      	bx	lr
 800e366:	4608      	mov	r0, r1
 800e368:	4770      	bx	lr
	...

0800e36c <_init>:
 800e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36e:	bf00      	nop
 800e370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e372:	bc08      	pop	{r3}
 800e374:	469e      	mov	lr, r3
 800e376:	4770      	bx	lr

0800e378 <_fini>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr
