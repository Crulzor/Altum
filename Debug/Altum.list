
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016240  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  08016420  08016420  00026420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016df4  08016df4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08016df4  08016df4  00026df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016dfc  08016dfc  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016dfc  08016dfc  00026dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e00  08016e00  00026e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08016e04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002140  20000354  08017158  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002494  08017158  00032494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049366  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073dc  00000000  00000000  000796ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002568  00000000  00000000  00080ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00083030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d21f  00000000  00000000  00085348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e9b6  00000000  00000000  000c2567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d02d  00000000  00000000  00100f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027df4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b110  00000000  00000000  0027df9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016408 	.word	0x08016408

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08016408 	.word	0x08016408

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	6053      	str	r3, [r2, #4]
 8000f14:	6093      	str	r3, [r2, #8]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3314      	adds	r3, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	861a      	strh	r2, [r3, #48]	; 0x30
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 ff10 	bl	8004da8 <_ZN10Components9get_ADC_1Ev>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f005 fc59 	bl	8006844 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 ff12 	bl	8004dc0 <_ZN10Components9get_ADC_2Ev>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f005 fc4e 	bl	8006844 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 ff15 	bl	8004ddc <_ZN10Components9get_ADC_5Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f005 fc43 	bl	8006844 <HAL_ADC_Start_DMA>



}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 ff88 	bl	8003ee8 <_ZN4SBUS8B_buttonEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe8:	da01      	bge.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <_ZN9Convertor9updateLEDEv+0x2a>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d015      	beq.n	8001020 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	33fa      	adds	r3, #250	; 0xfa
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fae5 	bl	80025e0 <_ZN11Initializer13get_LED_TimerEv>
 8001016:	4603      	mov	r3, r0
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4622      	mov	r2, r4
 800101c:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 800101e:	e026      	b.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4618      	mov	r0, r3
 8001026:	f002 ff05 	bl	8003e34 <_ZN4SBUS8A_buttonEv>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd01      	ble.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <_ZN9Convertor9updateLEDEv+0x7a>
 800103e:	2300      	movs	r3, #0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800104a:	b29b      	uxth	r3, r3
 800104c:	3bfa      	subs	r3, #250	; 0xfa
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fabd 	bl	80025e0 <_ZN11Initializer13get_LED_TimerEv>
 8001066:	4603      	mov	r3, r0
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4622      	mov	r2, r4
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}

08001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	460b      	mov	r3, r1
 8001084:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001086:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db76      	blt.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 8001094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e03c      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d109      	bne.n	80010c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 80010ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
 80010c0:	e02f      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d109      	bne.n	80010dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 80010c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010da:	e022      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d109      	bne.n	80010f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 80010e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfb8      	it	lt
 80010ea:	425b      	neglt	r3, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	e015      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d109      	bne.n	8001110 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 80010fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfb8      	it	lt
 8001104:	425b      	neglt	r3, r3
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
 800110e:	e008      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001110:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001114:	2b00      	cmp	r3, #0
 8001116:	bfb8      	it	lt
 8001118:	425b      	neglt	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 8001130:	e09e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b04      	cmp	r3, #4
 8001136:	d104      	bne.n	8001142 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001140:	e096      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d104      	bne.n	8001152 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001150:	e08e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d104      	bne.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001160:	e086      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d104      	bne.n	8001172 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001170:	e07e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800117a:	e079      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 800117c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da75      	bge.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e023      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d104      	bne.n	80011a4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	639a      	str	r2, [r3, #56]	; 0x38
 80011a2:	e01b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d104      	bne.n	80011b4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b2:	e013      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d104      	bne.n	80011c4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e00b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d104      	bne.n	80011d4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
 80011d2:	e003      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 80011e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011f4:	e03c      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d109      	bne.n	8001210 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 80011fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001200:	2b00      	cmp	r3, #0
 8001202:	bfb8      	it	lt
 8001204:	425b      	neglt	r3, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800120e:	e02f      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b08      	cmp	r3, #8
 8001214:	d109      	bne.n	800122a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 8001216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	425b      	neglt	r3, r3
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001228:	e022      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d109      	bne.n	8001244 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 8001230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bfb8      	it	lt
 8001238:	425b      	neglt	r3, r3
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001242:	e015      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d109      	bne.n	800125e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 800124a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	425b      	neglt	r3, r3
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800125c:	e008      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800125e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfb8      	it	lt
 8001266:	425b      	neglt	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fc98 	bl	8003bc4 <_ZN4SBUS9getRightYEv>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	dd10      	ble.n	80012d2 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bfb8      	it	lt
 80012ba:	425b      	neglt	r3, r3
 80012bc:	b29c      	uxth	r4, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f9be 	bl	8002644 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4622      	mov	r2, r4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 80012d0:	e008      	b.n	80012e4 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f9b4 	bl	8002644 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012dc:	4603      	mov	r3, r0
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fccb 	bl	8003c94 <_ZN4SBUS9getRightXEv>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	b21a      	sxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <_ZN9Convertor14updateSelectorEv+0x8c>)
 8001312:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <_ZN9Convertor14updateSelectorEv+0x90>)
 8001316:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd10      	ble.n	8001344 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f963 	bl	80025f8 <_ZN11Initializer18get_selector_TimerEv>
 8001332:	4602      	mov	r2, r0
 8001334:	2308      	movs	r3, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	230c      	movs	r3, #12
 800133a:	4621      	mov	r1, r4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe9a 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 8001342:	e014      	b.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	da0f      	bge.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f001 f94d 	bl	80025f8 <_ZN11Initializer18get_selector_TimerEv>
 800135e:	4602      	mov	r2, r0
 8001360:	2308      	movs	r3, #8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	230c      	movs	r3, #12
 8001366:	4621      	mov	r1, r4
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fe84 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	42dc0000 	.word	0x42dc0000
 800137c:	44700000 	.word	0x44700000

08001380 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fbc7 	bl	8003b20 <_ZN4SBUS8getLeftYEv>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 3a90 	vmov	r3, s15
 800139e:	b21a      	sxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd10      	ble.n	80013d0 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f92a 	bl	8002612 <_ZN11Initializer19get_pushMotor_TimerEv>
 80013be:	4602      	mov	r2, r0
 80013c0:	2308      	movs	r3, #8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2304      	movs	r3, #4
 80013c6:	4621      	mov	r1, r4
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe54 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 80013ce:	e014      	b.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0f      	bge.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f914 	bl	8002612 <_ZN11Initializer19get_pushMotor_TimerEv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	2308      	movs	r3, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2304      	movs	r3, #4
 80013f2:	4621      	mov	r1, r4
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fe3e 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 8001402:	b590      	push	{r4, r7, lr}
 8001404:	b085      	sub	sp, #20
 8001406:	af02      	add	r7, sp, #8
 8001408:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fca8 	bl	8003d64 <_ZN4SBUS11getJogWheelEv>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd10      	ble.n	8001452 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f8f5 	bl	800262a <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001440:	4602      	mov	r2, r0
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2304      	movs	r3, #4
 8001448:	4621      	mov	r1, r4
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe13 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 8001450:	e014      	b.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0f      	bge.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f8df 	bl	800262a <_ZN11Initializer20get_fluidMotor_TimerEv>
 800146c:	4602      	mov	r2, r0
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2304      	movs	r3, #4
 8001474:	4621      	mov	r1, r4
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fdfd 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <_ZN9Convertor7processEv>:

	return ADC_5_Buffer[1] / 4.095;
}


void Convertor::process(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]


	this->updateLED();
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fd9a 	bl	8000fc6 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff2a 	bl	80012ec <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff71 	bl	8001380 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffaf 	bl	8001402 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fee9 	bl	800127c <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd63 	bl	8000f76 <_ZN9Convertor6getADCEv>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]

	this->_huart1 = huart1;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
	this->initClock();
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f001 f81f 	bl	8002514 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 ff76 	bl	80023c8 <_ZN11Initializer8initGPIOEv>
}
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]


	this->initDMA();
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 ff14 	bl	800231c <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f821 	bl	800153c <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f922 	bl	8001744 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f999 	bl	8001838 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa52 	bl	80019b0 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fb37 	bl	8001b80 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc54 	bl	8001dc0 <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fd1b 	bl	8001f54 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fd88 	bl	8002034 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fe0d 	bl	8002144 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fe9a 	bl	8002264 <_ZN11Initializer8initI2C2Ev>

    MX_USB_Device_Init();
 8001530:	f011 fc0c 	bl	8012d4c <MX_USB_Device_Init>





}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b09e      	sub	sp, #120	; 0x78
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	4a7b      	ldr	r2, [pc, #492]	; (8001738 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800154a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154e:	6613      	str	r3, [r2, #96]	; 0x60
 8001550:	4b79      	ldr	r3, [pc, #484]	; (8001738 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2234      	movs	r2, #52	; 0x34
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f012 f99a 	bl	80138cc <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a68      	ldr	r2, [pc, #416]	; (800173c <_ZN11Initializer9initTIM_1Ev+0x200>)
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
	  htim1.Init.Prescaler = 8;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2208      	movs	r2, #8
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim1.Init.Period = 1080;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80015b0:	661a      	str	r2, [r3, #96]	; 0x60
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	665a      	str	r2, [r3, #100]	; 0x64
	  htim1.Init.RepetitionCounter = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	669a      	str	r2, [r3, #104]	; 0x68
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	66da      	str	r2, [r3, #108]	; 0x6c
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3354      	adds	r3, #84	; 0x54
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00a fccf 	bl	800bf6c <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f001 f848 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80015e4:	4856      	ldr	r0, [pc, #344]	; (8001740 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80015e6:	f012 fde3 	bl	80141b0 <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3354      	adds	r3, #84	; 0x54
 80015f4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00a ff8a 	bl	800c514 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 f82f 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3354      	adds	r3, #84	; 0x54
 800161a:	4618      	mov	r0, r3
 800161c:	f00a fcfd 	bl	800c01a <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f001 f81f 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001636:	4842      	ldr	r0, [pc, #264]	; (8001740 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001638:	f012 fdba 	bl	80141b0 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3354      	adds	r3, #84	; 0x54
 800164c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f00b fdca 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f803 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3354      	adds	r3, #84	; 0x54
 800168e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001692:	2208      	movs	r2, #8
 8001694:	4618      	mov	r0, r3
 8001696:	f00a fe29 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 ffe2 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80016b2:	f012 fd7d 	bl	80141b0 <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3354      	adds	r3, #84	; 0x54
 80016f2:	f107 020c 	add.w	r2, r7, #12
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b fe0d 	bl	800d318 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 ffb0 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001716:	f012 fd4b 	bl	80141b0 <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3354      	adds	r3, #84	; 0x54
 800171e:	4618      	mov	r0, r3
 8001720:	f004 f854 	bl	80057cc <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3354      	adds	r3, #84	; 0x54
 8001728:	2108      	movs	r1, #8
 800172a:	4618      	mov	r0, r3
 800172c:	f00b fc9c 	bl	800d068 <HAL_TIMEx_PWMN_Start>


}
 8001730:	bf00      	nop
 8001732:	3778      	adds	r7, #120	; 0x78
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40012c00 	.word	0x40012c00
 8001740:	08016420 	.word	0x08016420

08001744 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	  htim2.Init.Prescaler = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	  htim2.Init.Period = 4.294967295E9;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00a fbe3 	bl	800bf6c <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 ff5c 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017bc:	481d      	ldr	r0, [pc, #116]	; (8001834 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017be:	f012 fcf7 	bl	80141b0 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c6:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80017ce:	f107 0218 	add.w	r2, r7, #24
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a fe9d 	bl	800c514 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 ff42 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017f0:	4810      	ldr	r0, [pc, #64]	; (8001834 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017f2:	f012 fcdd 	bl	80141b0 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001804:	f107 020c 	add.w	r2, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f00b fcee 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 ff27 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001828:	f012 fcc2 	bl	80141b0 <iprintf>

	  }


}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	08016438 	.word	0x08016438

08001838 <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	; 0x38
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8001840:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	4a57      	ldr	r2, [pc, #348]	; (80019a4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6593      	str	r3, [r2, #88]	; 0x58
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <_ZN11Initializer9initTIM_3Ev+0x170>)
 800187c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	  htim3.Init.Prescaler = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim3.Init.Period = 1000;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001896:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00a fbb2 	bl	800c01a <HAL_TIM_PWM_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fed4 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80018cc:	4837      	ldr	r0, [pc, #220]	; (80019ac <_ZN11Initializer9initTIM_3Ev+0x174>)
 80018ce:	f012 fc6f 	bl	80141b0 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b fc80 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 feb9 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001902:	482a      	ldr	r0, [pc, #168]	; (80019ac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001904:	f012 fc54 	bl	80141b0 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800191e:	f107 0110 	add.w	r1, r7, #16
 8001922:	2200      	movs	r2, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fce1 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fe9a 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001942:	f012 fc35 	bl	80141b0 <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800194c:	f107 0110 	add.w	r1, r7, #16
 8001950:	2204      	movs	r2, #4
 8001952:	4618      	mov	r0, r3
 8001954:	f00a fcca 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf14      	ite	ne
 800195e:	2301      	movne	r3, #1
 8001960:	2300      	moveq	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fe83 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800196e:	480f      	ldr	r0, [pc, #60]	; (80019ac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001970:	f012 fc1e 	bl	80141b0 <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800197a:	4618      	mov	r0, r3
 800197c:	f003 ff26 	bl	80057cc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f00a fb9d 	bl	800c0c8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001994:	2104      	movs	r1, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f00a fb96 	bl	800c0c8 <HAL_TIM_PWM_Start>



}
 800199c:	bf00      	nop
 800199e:	3738      	adds	r7, #56	; 0x38
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40000400 	.word	0x40000400
 80019ac:	08016450 	.word	0x08016450

080019b0 <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	; 0x48
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 80019b8:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1c4>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a6d      	ldr	r2, [pc, #436]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1c4>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1c4>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <_ZN11Initializer9initTIM_4Ev+0x1c8>)
 8001a02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  htim4.Init.Prescaler = 2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim4.Init.Period = 1000;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	33a0      	adds	r3, #160	; 0xa0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fa99 	bl	800bf6c <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <_ZN11Initializer9initTIM_4Ev+0xa6>
	  {
	    this->Error_Handler();
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fe12 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a50:	484a      	ldr	r0, [pc, #296]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001a52:	f012 fbad 	bl	80141b0 <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	33a0      	adds	r3, #160	; 0xa0
 8001a60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00a fd54 	bl	800c514 <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <_ZN11Initializer9initTIM_4Ev+0xd8>
	  {
	    this->Error_Handler();
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fdf9 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a82:	483e      	ldr	r0, [pc, #248]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001a84:	f012 fb94 	bl	80141b0 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	33a0      	adds	r3, #160	; 0xa0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00a fac4 	bl	800c01a <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <_ZN11Initializer9initTIM_4Ev+0xfe>
	  {
	    this->Error_Handler();
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fde6 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001aa8:	4834      	ldr	r0, [pc, #208]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001aaa:	f012 fb81 	bl	80141b0 <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	33a0      	adds	r3, #160	; 0xa0
 8001aba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b fb93 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <_ZN11Initializer9initTIM_4Ev+0x132>
	  {
	    this->Error_Handler();
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fdcc 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001adc:	4827      	ldr	r0, [pc, #156]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001ade:	f012 fb67 	bl	80141b0 <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	33a0      	adds	r3, #160	; 0xa0
 8001af6:	f107 0110 	add.w	r1, r7, #16
 8001afa:	2204      	movs	r2, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00a fbf5 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <_ZN11Initializer9initTIM_4Ev+0x16e>
	  {
	    this->Error_Handler();
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fdae 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b18:	4818      	ldr	r0, [pc, #96]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001b1a:	f012 fb49 	bl	80141b0 <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	33a0      	adds	r3, #160	; 0xa0
 8001b22:	f107 0110 	add.w	r1, r7, #16
 8001b26:	2208      	movs	r2, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00a fbdf 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <_ZN11Initializer9initTIM_4Ev+0x19a>
	  {
	    this->Error_Handler();
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fd98 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1cc>)
 8001b46:	f012 fb33 	bl	80141b0 <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	33a0      	adds	r3, #160	; 0xa0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fe3c 	bl	80057cc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	33a0      	adds	r3, #160	; 0xa0
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00a fab4 	bl	800c0c8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	33a0      	adds	r3, #160	; 0xa0
 8001b64:	2104      	movs	r1, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00a faae 	bl	800c0c8 <HAL_TIM_PWM_Start>


}
 8001b6c:	bf00      	nop
 8001b6e:	3748      	adds	r7, #72	; 0x48
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	08016468 	.word	0x08016468

08001b80 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09e      	sub	sp, #120	; 0x78
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001b88:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <_ZN11Initializer9initTIM_8Ev+0x238>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	4a8a      	ldr	r2, [pc, #552]	; (8001db8 <_ZN11Initializer9initTIM_8Ev+0x238>)
 8001b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b92:	6613      	str	r3, [r2, #96]	; 0x60
 8001b94:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <_ZN11Initializer9initTIM_8Ev+0x238>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2234      	movs	r2, #52	; 0x34
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f011 fe78 	bl	80138cc <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <_ZN11Initializer9initTIM_8Ev+0x23c>)
 8001be0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	  htim8.Init.Prescaler = 2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim8.Init.Period = 1000;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bfa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim8.Init.RepetitionCounter = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00a f9a5 	bl	800bf6c <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <_ZN11Initializer9initTIM_8Ev+0xb8>
	  {
	    Error_Handler();
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fd1e 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c44:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00a fc62 	bl	800c514 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <_ZN11Initializer9initTIM_8Ev+0xe6>
	  {
	    Error_Handler();
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fd07 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00a f9d4 	bl	800c01a <HAL_TIM_PWM_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <_ZN11Initializer9initTIM_8Ev+0x108>
	  {
	    Error_Handler();
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fcf6 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c9a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00b faa3 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <_ZN11Initializer9initTIM_8Ev+0x13c>
	  {
	    Error_Handler();
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fcdc 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbc:	2360      	movs	r3, #96	; 0x60
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001cde:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00a fb01 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <_ZN11Initializer9initTIM_8Ev+0x180>
	  {
	    Error_Handler();
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fcba 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00a faed 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <_ZN11Initializer9initTIM_8Ev+0x1a8>
	  {
	    Error_Handler();
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fca6 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d66:	f107 020c 	add.w	r2, r7, #12
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00b fad3 	bl	800d318 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <_ZN11Initializer9initTIM_8Ev+0x208>
	  {
	    Error_Handler();
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fc76 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fd1c 	bl	80057cc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00a f993 	bl	800c0c8 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001da8:	210c      	movs	r1, #12
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00b f95c 	bl	800d068 <HAL_TIMEx_PWMN_Start>




}
 8001db0:	bf00      	nop
 8001db2:	3778      	adds	r7, #120	; 0x78
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40013400 	.word	0x40013400

08001dc0 <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b098      	sub	sp, #96	; 0x60
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd4:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	2234      	movs	r2, #52	; 0x34
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f011 fd65 	bl	80138cc <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001e06:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	  htim16.Init.Prescaler = 128;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim16.Init.Period = 1000;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e20:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim16.Init.RepetitionCounter = 0;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	33ec      	adds	r3, #236	; 0xec
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00a f893 	bl	800bf6c <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fc0c 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e5c:	483c      	ldr	r0, [pc, #240]	; (8001f50 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e5e:	f012 f9a7 	bl	80141b0 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	33ec      	adds	r3, #236	; 0xec
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00a f8d7 	bl	800c01a <HAL_TIM_PWM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fbf9 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e82:	4833      	ldr	r0, [pc, #204]	; (8001f50 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e84:	f012 f994 	bl	80141b0 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e88:	2360      	movs	r3, #96	; 0x60
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	33ec      	adds	r3, #236	; 0xec
 8001ea8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001eac:	2200      	movs	r2, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00a fa1c 	bl	800c2ec <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fbd5 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001eca:	4821      	ldr	r0, [pc, #132]	; (8001f50 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001ecc:	f012 f970 	bl	80141b0 <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	33ec      	adds	r3, #236	; 0xec
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00b fa0b 	bl	800d318 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fbae 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f1a:	f012 f949 	bl	80141b0 <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	33ec      	adds	r3, #236	; 0xec
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc52 	bl	80057cc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	33ec      	adds	r3, #236	; 0xec
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00a f8ca 	bl	800c0c8 <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34





}
 8001f3e:	bf00      	nop
 8001f40:	3760      	adds	r7, #96	; 0x60
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	08016480 	.word	0x08016480

08001f54 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b09c      	sub	sp, #112	; 0x70
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <_ZN11Initializer10initTIM_20Ev+0xd8>)
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8001f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f009 ffe7 	bl	800bf6c <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb60 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fb4:	481e      	ldr	r0, [pc, #120]	; (8002030 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001fb6:	f012 f8fb 	bl	80141b0 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbe:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001fc0:	f107 0214 	add.w	r2, r7, #20
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00a faa2 	bl	800c514 <HAL_TIM_ConfigClockSource>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fb47 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fe6:	4812      	ldr	r0, [pc, #72]	; (8002030 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001fe8:	f012 f8e2 	bl	80141b0 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001ff8:	f107 0208 	add.w	r2, r7, #8
 8001ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f00b f8f2 	bl	800d1ec <HAL_TIMEx_MasterConfigSynchronization>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fb2b 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002020:	f012 f8c6 	bl	80141b0 <iprintf>

	  }



}
 8002024:	bf00      	nop
 8002026:	3770      	adds	r7, #112	; 0x70
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40015000 	.word	0x40015000
 8002030:	08016480 	.word	0x08016480

08002034 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3e      	ldr	r2, [pc, #248]	; (800213c <_ZN11Initializer11initUSART_1Ev+0x108>)
 8002042:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800204c:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	220c      	movs	r2, #12
 800206c:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f00b fa13 	bl	800d4c6 <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fadf 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020b6:	4822      	ldr	r0, [pc, #136]	; (8002140 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020b8:	f012 f87a 	bl	80141b0 <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00c fe04 	bl	800ecd0 <HAL_UARTEx_SetTxFifoThreshold>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 facb 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020de:	4818      	ldr	r0, [pc, #96]	; (8002140 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020e0:	f012 f866 	bl	80141b0 <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00c fe2e 	bl	800ed4c <HAL_UARTEx_SetRxFifoThreshold>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fab7 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002108:	f012 f852 	bl	80141b0 <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f00c fda4 	bl	800ec5e <HAL_UARTEx_DisableFifoMode>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 faa4 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800212e:	f012 f83f 	bl	80141b0 <iprintf>

	  }



}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40013800 	.word	0x40013800
 8002140:	08016498 	.word	0x08016498

08002144 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a41      	ldr	r2, [pc, #260]	; (8002258 <_ZN11Initializer11initUSART_2Ev+0x114>)
 8002152:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a40      	ldr	r2, [pc, #256]	; (800225c <_ZN11Initializer11initUSART_2Ev+0x118>)
 800215a:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002164:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002176:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	220c      	movs	r2, #12
 800217e:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00b f985 	bl	800d4c6 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa51 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021d2:	4823      	ldr	r0, [pc, #140]	; (8002260 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021d4:	f011 ffec 	bl	80141b0 <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f00c fd76 	bl	800ecd0 <HAL_UARTEx_SetTxFifoThreshold>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fa3d 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021fa:	4819      	ldr	r0, [pc, #100]	; (8002260 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021fc:	f011 ffd8 	bl	80141b0 <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f00c fda0 	bl	800ed4c <HAL_UARTEx_SetRxFifoThreshold>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fa29 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002224:	f011 ffc4 	bl	80141b0 <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f00c fd16 	bl	800ec5e <HAL_UARTEx_DisableFifoMode>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fa16 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800224a:	f011 ffb1 	bl	80141b0 <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40004400 	.word	0x40004400
 800225c:	000186a0 	.word	0x000186a0
 8002260:	080164ac 	.word	0x080164ac

08002264 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 8002264:	b580      	push	{r7, lr}
 8002266:	b096      	sub	sp, #88	; 0x58
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

	  I2C_HandleTypeDef hi2c2;
	  hi2c2.Instance = I2C2;
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <_ZN11Initializer8initI2C2Ev+0xac>)
 800226e:	60fb      	str	r3, [r7, #12]
	  hi2c2.Init.Timing = 0x20A0C4DF;
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <_ZN11Initializer8initI2C2Ev+0xb0>)
 8002272:	613b      	str	r3, [r7, #16]
	  hi2c2.Init.OwnAddress1 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002278:	2301      	movs	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
	  hi2c2.Init.OwnAddress2 = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4618      	mov	r0, r3
 8002296:	f006 fdc3 	bl	8008e20 <HAL_I2C_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <_ZN11Initializer8initI2C2Ev+0x52>
	  {
	    Error_Handler();
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9e2 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80022b0:	4819      	ldr	r0, [pc, #100]	; (8002318 <_ZN11Initializer8initI2C2Ev+0xb4>)
 80022b2:	f011 ff7d 	bl	80141b0 <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f006 fe3e 	bl	8008f3e <HAL_I2CEx_ConfigAnalogFilter>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <_ZN11Initializer8initI2C2Ev+0x7a>
	  {
	    this->Error_Handler();
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9ce 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <_ZN11Initializer8initI2C2Ev+0xb4>)
 80022da:	f011 ff69 	bl	80141b0 <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fe75 	bl	8008fd4 <HAL_I2CEx_ConfigDigitalFilter>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <_ZN11Initializer8initI2C2Ev+0xa2>
	  {
	    this->Error_Handler();
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f9ba 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <_ZN11Initializer8initI2C2Ev+0xb4>)
 8002302:	f011 ff55 	bl	80141b0 <iprintf>
	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	3758      	adds	r7, #88	; 0x58
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005800 	.word	0x40005800
 8002314:	20a0c4df 	.word	0x20a0c4df
 8002318:	080164c0 	.word	0x080164c0

0800231c <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6493      	str	r3, [r2, #72]	; 0x48
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6493      	str	r3, [r2, #72]	; 0x48
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	6493      	str	r3, [r2, #72]	; 0x48
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	200b      	movs	r0, #11
 8002372:	f005 fe70 	bl	8008056 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002376:	200b      	movs	r0, #11
 8002378:	f005 fe87 	bl	800808a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	200c      	movs	r0, #12
 8002382:	f005 fe68 	bl	8008056 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002386:	200c      	movs	r0, #12
 8002388:	f005 fe7f 	bl	800808a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	200d      	movs	r0, #13
 8002392:	f005 fe60 	bl	8008056 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002396:	200d      	movs	r0, #13
 8002398:	f005 fe77 	bl	800808a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	200e      	movs	r0, #14
 80023a2:	f005 fe58 	bl	8008056 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80023a6:	200e      	movs	r0, #14
 80023a8:	f005 fe6f 	bl	800808a <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2038      	movs	r0, #56	; 0x38
 80023b2:	f005 fe50 	bl	8008056 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80023b6:	2038      	movs	r0, #56	; 0x38
 80023b8:	f005 fe67 	bl	800808a <HAL_NVIC_EnableIRQ>

}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	4a47      	ldr	r2, [pc, #284]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ec:	4b45      	ldr	r3, [pc, #276]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	4a41      	ldr	r2, [pc, #260]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4a35      	ldr	r2, [pc, #212]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <_ZN11Initializer8initGPIOEv+0x13c>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800245e:	482a      	ldr	r0, [pc, #168]	; (8002508 <_ZN11Initializer8initGPIOEv+0x140>)
 8002460:	f006 fcac 	bl	8008dbc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	2102      	movs	r1, #2
 8002468:	4828      	ldr	r0, [pc, #160]	; (800250c <_ZN11Initializer8initGPIOEv+0x144>)
 800246a:	f006 fca7 	bl	8008dbc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002474:	4826      	ldr	r0, [pc, #152]	; (8002510 <_ZN11Initializer8initGPIOEv+0x148>)
 8002476:	f006 fca1 	bl	8008dbc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2110      	movs	r1, #16
 800247e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002482:	f006 fc9b 	bl	8008dbc <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 8002486:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800248a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	481a      	ldr	r0, [pc, #104]	; (8002508 <_ZN11Initializer8initGPIOEv+0x140>)
 80024a0:	f006 fb0a 	bl	8008ab8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <_ZN11Initializer8initGPIOEv+0x144>)
 80024bc:	f006 fafc 	bl	8008ab8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 80024c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c6:	2301      	movs	r3, #1
 80024c8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <_ZN11Initializer8initGPIOEv+0x148>)
 80024da:	f006 faed 	bl	8008ab8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024de:	2310      	movs	r3, #16
 80024e0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f8:	f006 fade 	bl	8008ab8 <HAL_GPIO_Init>

}
 80024fc:	bf00      	nop
 80024fe:	3730      	adds	r7, #48	; 0x30
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	48000800 	.word	0x48000800
 800250c:	48001400 	.word	0x48001400
 8002510:	48001800 	.word	0x48001800

08002514 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002514:	b580      	push	{r7, lr}
 8002516:	b096      	sub	sp, #88	; 0x58
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251c:	f107 0320 	add.w	r3, r7, #32
 8002520:	2238      	movs	r2, #56	; 0x38
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f011 f9d1 	bl	80138cc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800253a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800253e:	f008 fcef 	bl	800af20 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002542:	2322      	movs	r3, #34	; 0x22
 8002544:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002550:	2301      	movs	r3, #1
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002554:	2302      	movs	r3, #2
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002558:	2302      	movs	r3, #2
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800255c:	2301      	movs	r3, #1
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002560:	2310      	movs	r3, #16
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002564:	2302      	movs	r3, #2
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002568:	2302      	movs	r3, #2
 800256a:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800256c:	2302      	movs	r3, #2
 800256e:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4618      	mov	r0, r3
 8002576:	f008 fd77 	bl	800b068 <HAL_RCC_OscConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f872 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002590:	4812      	ldr	r0, [pc, #72]	; (80025dc <_ZN11Initializer9initClockEv+0xc8>)
 8002592:	f011 fe0d 	bl	80141b0 <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002596:	230f      	movs	r3, #15
 8002598:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259a:	2303      	movs	r3, #3
 800259c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 f871 	bl	800b698 <HAL_RCC_ClockConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f854 	bl	8002674 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <_ZN11Initializer9initClockEv+0xc8>)
 80025ce:	f011 fdef 	bl	80141b0 <iprintf>

	  }


}
 80025d2:	bf00      	nop
 80025d4:	3758      	adds	r7, #88	; 0x58
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	080164d4 	.word	0x080164d4

080025e0 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

	return &htim16;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	33ec      	adds	r3, #236	; 0xec

}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

	return &htim8;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 739c 	add.w	r3, r3, #312	; 0x138
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]

	return &htim4;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	33a0      	adds	r3, #160	; 0xa0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

	return &htim3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 73c2 	add.w	r3, r3, #388	; 0x184

}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

	return &htim1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3354      	adds	r3, #84	; 0x54

}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_ZN11Initializer7get_i2cEv>:

I2C_HandleTypeDef* Initializer::get_i2c(void){
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

	return &hi2c2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3308      	adds	r3, #8
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d80e      	bhi.n	80026a4 <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <_ZN11Initializer13Error_HandlerEv+0x38>)
 800268c:	f006 fbae 	bl	8008dec <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002690:	2064      	movs	r0, #100	; 0x64
 8002692:	f003 fcab 	bl	8005fec <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 8002698:	f011 fe10 	bl	80142bc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e7ed      	b.n	8002680 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	48000800 	.word	0x48000800
 80026b0:	080164f4 	.word	0x080164f4

080026b4 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4053      	eors	r3, r2
 80026ca:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	b25a      	sxtb	r2, r3
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4053      	eors	r3, r2
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4053      	eors	r3, r2
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4053      	eors	r3, r2
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	b21b      	sxth	r3, r3
 8002702:	4053      	eors	r3, r2
 8002704:	b21b      	sxth	r3, r3
 8002706:	b29a      	uxth	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	801a      	strh	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002726:	801a      	strh	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002740:	f107 030e 	add.w	r3, r7, #14
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffe7 	bl	8002718 <crc_init>
	while (length--) {
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	807a      	strh	r2, [r7, #2]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f107 020e 	add.w	r2, r7, #14
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffa1 	bl	80026b4 <crc_accumulate>
	while (length--) {
 8002772:	e7ea      	b.n	800274a <crc_calculate+0x16>
        }
        return crcTmp;
 8002774:	89fb      	ldrh	r3, [r7, #14]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	1e5a      	subs	r2, r3, #1
 8002794:	80fa      	strh	r2, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	617a      	str	r2, [r7, #20]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff80 	bl	80026b4 <crc_accumulate>
	while (length--) {
 80027b4:	e7ec      	b.n	8002790 <crc_accumulate_buffer+0x12>
        }
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <mavlink_sha256_init+0x50>)
 80027d8:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <mavlink_sha256_init+0x54>)
 80027de:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <mavlink_sha256_init+0x58>)
 80027e4:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <mavlink_sha256_init+0x5c>)
 80027ea:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <mavlink_sha256_init+0x60>)
 80027f0:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <mavlink_sha256_init+0x64>)
 80027f6:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <mavlink_sha256_init+0x68>)
 80027fc:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <mavlink_sha256_init+0x6c>)
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	6a09e667 	.word	0x6a09e667
 8002814:	bb67ae85 	.word	0xbb67ae85
 8002818:	3c6ef372 	.word	0x3c6ef372
 800281c:	a54ff53a 	.word	0xa54ff53a
 8002820:	510e527f 	.word	0x510e527f
 8002824:	9b05688c 	.word	0x9b05688c
 8002828:	1f83d9ab 	.word	0x1f83d9ab
 800282c:	5be0cd19 	.word	0x5be0cd19

08002830 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002830:	b480      	push	{r7}
 8002832:	b0cf      	sub	sp, #316	; 0x13c
 8002834:	af00      	add	r7, sp, #0
 8002836:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800283a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800283e:	6018      	str	r0, [r3, #0]
 8002840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002844:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002848:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800284a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800284e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800285a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800285e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800286a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800286e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800287a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800287e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800288a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800288e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 800289a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800289e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80028aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80028ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	dc17      	bgt.n	8002908 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 80028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80028e2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002900:	3301      	adds	r3, #1
 8002902:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002906:	e7e3      	b.n	80028d0 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002908:	2310      	movs	r3, #16
 800290a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800290e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002912:	2b3f      	cmp	r3, #63	; 0x3f
 8002914:	dc6a      	bgt.n	80029ec <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800291a:	1e9a      	subs	r2, r3, #2
 800291c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	ea4f 4273 	mov.w	r2, r3, ror #17
 800292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002930:	1e99      	subs	r1, r3, #2
 8002932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800293a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800293e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002942:	405a      	eors	r2, r3
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002948:	1e99      	subs	r1, r3, #2
 800294a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800294e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002956:	0a9b      	lsrs	r3, r3, #10
 8002958:	405a      	eors	r2, r3
 800295a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800295e:	1fd9      	subs	r1, r3, #7
 8002960:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800296c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800296e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002972:	f1a3 010f 	sub.w	r1, r3, #15
 8002976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800297a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800297e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002982:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298a:	f1a3 000f 	sub.w	r0, r3, #15
 800298e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002992:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002996:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800299a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800299e:	4059      	eors	r1, r3
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a4:	f1a3 000f 	sub.w	r0, r3, #15
 80029a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80029b8:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80029ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029be:	f1a3 0110 	sub.w	r1, r3, #16
 80029c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029ce:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80029d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80029e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e4:	3301      	adds	r3, #1
 80029e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029ea:	e790      	b.n	800290e <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f6:	2b3f      	cmp	r3, #63	; 0x3f
 80029f8:	dc79      	bgt.n	8002aee <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80029fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029fe:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002a02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a06:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002a0a:	405a      	eors	r2, r3
 8002a0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a10:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002a14:	405a      	eors	r2, r3
 8002a16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a1a:	441a      	add	r2, r3
 8002a1c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a24:	4019      	ands	r1, r3
 8002a26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a2a:	43d8      	mvns	r0, r3
 8002a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a30:	4003      	ands	r3, r0
 8002a32:	404b      	eors	r3, r1
 8002a34:	441a      	add	r2, r3
 8002a36:	496d      	ldr	r1, [pc, #436]	; (8002bec <mavlink_sha256_calc+0x3bc>)
 8002a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a40:	441a      	add	r2, r3
 8002a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a4a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002a4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a52:	4413      	add	r3, r2
 8002a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a5c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a64:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002a68:	405a      	eors	r2, r3
 8002a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a6e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002a72:	405a      	eors	r2, r3
 8002a74:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a7c:	4059      	eors	r1, r3
 8002a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a82:	4019      	ands	r1, r3
 8002a84:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a8c:	4003      	ands	r3, r0
 8002a8e:	404b      	eors	r3, r1
 8002a90:	4413      	add	r3, r2
 8002a92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002aa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002aa6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002aae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002ab2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ac0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002ac4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002acc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ad0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002ad4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002adc:	4413      	add	r3, r2
 8002ade:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002aec:	e781      	b.n	80029f2 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002aee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002af2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002afe:	441a      	add	r2, r3
 8002b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002b0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b1c:	441a      	add	r2, r3
 8002b1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002b2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b3a:	441a      	add	r2, r3
 8002b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002b48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b58:	441a      	add	r2, r3
 8002b5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002b66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b76:	441a      	add	r2, r3
 8002b78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b94:	441a      	add	r2, r3
 8002b96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002ba2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ba6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bb2:	441a      	add	r2, r3
 8002bb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bd0:	441a      	add	r2, r3
 8002bd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	080168d8 	.word	0x080168d8

08002bf0 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b09c      	sub	sp, #112	; 0x70
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	441a      	add	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d904      	bls.n	8002c28 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d058      	beq.n	8002cea <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c3a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c3e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d201      	bcs.n	8002c4c <mavlink_sha256_update+0x5c>
            l = len;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c54:	4413      	add	r3, r2
 8002c56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f010 fe28 	bl	80138b0 <memcpy>
	offset += l;
 8002c60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c64:	4413      	add	r3, r2
 8002c66:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002c68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6c:	4413      	add	r3, r2
 8002c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d1d9      	bne.n	8002c32 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3328      	adds	r3, #40	; 0x28
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002c84:	2300      	movs	r3, #0
 8002c86:	663b      	str	r3, [r7, #96]	; 0x60
 8002c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	dc24      	bgt.n	8002cd8 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c94:	4413      	add	r3, r2
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002c98:	f107 0210 	add.w	r2, r7, #16
 8002c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	3303      	adds	r3, #3
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cac:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	7812      	ldrb	r2, [r2, #0]
 8002cb8:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc8:	3303      	adds	r3, #3
 8002cca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd6:	e7d7      	b.n	8002c88 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	4619      	mov	r1, r3
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7ff fda6 	bl	8002830 <mavlink_sha256_calc>
	    offset = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002ce8:	e7a3      	b.n	8002c32 <mavlink_sha256_update+0x42>
	}
    }
}
 8002cea:	bf00      	nop
 8002cec:	3770      	adds	r7, #112	; 0x70
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b098      	sub	sp, #96	; 0x60
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d06:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d12:	3301      	adds	r3, #1
 8002d14:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	3301      	adds	r3, #1
 8002d26:	2247      	movs	r2, #71	; 0x47
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f010 fdce 	bl	80138cc <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	3307      	adds	r3, #7
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0a1a      	lsrs	r2, r3, #8
 8002d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4a:	3306      	adds	r3, #6
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	443b      	add	r3, r7
 8002d52:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	0c1a      	lsrs	r2, r3, #16
 8002d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5e:	3305      	adds	r3, #5
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	3360      	adds	r3, #96	; 0x60
 8002d64:	443b      	add	r3, r7
 8002d66:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e1a      	lsrs	r2, r3, #24
 8002d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d72:	3304      	adds	r3, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	443b      	add	r3, r7
 8002d7a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d84:	3303      	adds	r3, #3
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0a1a      	lsrs	r2, r3, #8
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	3302      	adds	r3, #2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	3360      	adds	r3, #96	; 0x60
 8002d9e:	443b      	add	r3, r7
 8002da0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c1a      	lsrs	r2, r3, #16
 8002daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	3360      	adds	r3, #96	; 0x60
 8002db2:	443b      	add	r3, r7
 8002db4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0e1b      	lsrs	r3, r3, #24
 8002dbe:	b2d9      	uxtb	r1, r3
 8002dc0:	f107 020c 	add.w	r2, r7, #12
 8002dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc6:	4413      	add	r3, r2
 8002dc8:	460a      	mov	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff09 	bl	8002bf0 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	78da      	ldrb	r2, [r3, #3]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dec:	7892      	ldrb	r2, [r2, #2]
 8002dee:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	3302      	adds	r3, #2
 8002df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df6:	7852      	ldrb	r2, [r2, #1]
 8002df8:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	3304      	adds	r3, #4
 8002e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e0a:	79d2      	ldrb	r2, [r2, #7]
 8002e0c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	3305      	adds	r3, #5
 8002e12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e14:	7992      	ldrb	r2, [r2, #6]
 8002e16:	701a      	strb	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3760      	adds	r7, #96	; 0x60
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <mavlink_get_channel_status+0x24>)
 8002e36:	4413      	add	r3, r2
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	20000370 	.word	0x20000370

08002e48 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b0a0      	sub	sp, #128	; 0x80
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <mavlink_sign_packet+0x20>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <mavlink_sign_packet+0x24>
	    return 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e04f      	b.n	8002f0c <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	785a      	ldrb	r2, [r3, #1]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3301      	adds	r3, #1
 8002e82:	f107 0110 	add.w	r1, r7, #16
 8002e86:	2206      	movs	r2, #6
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f010 fd11 	bl	80138b0 <memcpy>
	signing->timestamp++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e94:	1c54      	adds	r4, r2, #1
 8002e96:	f143 0500 	adc.w	r5, r3, #0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002ea0:	f107 0318 	add.w	r3, r7, #24
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fc8b 	bl	80027c0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f103 0110 	add.w	r1, r3, #16
 8002eb0:	f107 0318 	add.w	r3, r7, #24
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fe9a 	bl	8002bf0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	f107 0318 	add.w	r3, r7, #24
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fe93 	bl	8002bf0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8002eca:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8002ece:	f107 0318 	add.w	r3, r7, #24
 8002ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe8a 	bl	8002bf0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8002edc:	f107 0318 	add.w	r3, r7, #24
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fe82 	bl	8002bf0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8002eec:	f107 0318 	add.w	r3, r7, #24
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe7b 	bl	8002bf0 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1dda      	adds	r2, r3, #7
 8002efe:	f107 0318 	add.w	r3, r7, #24
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fef4 	bl	8002cf2 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8002f0a:	230d      	movs	r3, #13
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3780      	adds	r7, #128	; 0x80
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}

08002f14 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d90a      	bls.n	8002f3c <_mav_trim_payload+0x28>
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <_mav_trim_payload+0x28>
		length--;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002f3a:	e7f1      	b.n	8002f20 <_mav_trim_payload+0xc>
	}
	return length;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8002f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4c:	b08f      	sub	sp, #60	; 0x3c
 8002f4e:	af04      	add	r7, sp, #16
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	72fb      	strb	r3, [r7, #11]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b1b      	ldrb	r3, [r3, #12]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f74:	f083 0301 	eor.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <mavlink_finalize_message_buffer+0x4e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mavlink_finalize_message_buffer+0x4e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <mavlink_finalize_message_buffer+0x4e>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <mavlink_finalize_message_buffer+0x50>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8002f9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <mavlink_finalize_message_buffer+0x60>
 8002fa6:	230d      	movs	r3, #13
 8002fa8:	e000      	b.n	8002fac <mavlink_finalize_message_buffer+0x62>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8002fb0:	230a      	movs	r3, #10
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8002fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	22fe      	movs	r2, #254	; 0xfe
 8002fc2:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8002fc4:	2306      	movs	r3, #6
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fca:	e002      	b.n	8002fd2 <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	22fd      	movs	r2, #253	; 0xfd
 8002fd0:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <mavlink_finalize_message_buffer+0x96>
 8002fda:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002fde:	e009      	b.n	8002ff4 <mavlink_finalize_message_buffer+0xaa>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff92 	bl	8002f14 <_mav_trim_payload>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	7afa      	ldrb	r2, [r7, #11]
 8002ffc:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	7aba      	ldrb	r2, [r7, #10]
 8003002:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800300a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	791b      	ldrb	r3, [r3, #4]
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799a      	ldrb	r2, [r3, #6]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	799b      	ldrb	r3, [r3, #6]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	789b      	ldrb	r3, [r3, #2]
 800303e:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	78db      	ldrb	r3, [r3, #3]
 8003044:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8003046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800304a:	2b00      	cmp	r3, #0
 800304c:	d013      	beq.n	8003076 <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	799b      	ldrb	r3, [r3, #6]
 8003052:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	79db      	ldrb	r3, [r3, #7]
 8003058:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	7a1b      	ldrb	r3, [r3, #8]
 800305e:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	7a5a      	ldrb	r2, [r3, #9]
 8003064:	7a99      	ldrb	r1, [r3, #10]
 8003066:	0209      	lsls	r1, r1, #8
 8003068:	430a      	orrs	r2, r1
 800306a:	7adb      	ldrb	r3, [r3, #11]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	4313      	orrs	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	777b      	strb	r3, [r7, #29]
 8003074:	e030      	b.n	80030d8 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	795b      	ldrb	r3, [r3, #5]
 8003080:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	799b      	ldrb	r3, [r3, #6]
 8003086:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	79db      	ldrb	r3, [r3, #7]
 800308c:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	7a1b      	ldrb	r3, [r3, #8]
 8003092:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	7a5a      	ldrb	r2, [r3, #9]
 8003098:	7a99      	ldrb	r1, [r3, #10]
 800309a:	0209      	lsls	r1, r1, #8
 800309c:	430a      	orrs	r2, r1
 800309e:	7adb      	ldrb	r3, [r3, #11]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	7a5a      	ldrb	r2, [r3, #9]
 80030ac:	7a99      	ldrb	r1, [r3, #10]
 80030ae:	0209      	lsls	r1, r1, #8
 80030b0:	430a      	orrs	r2, r1
 80030b2:	7adb      	ldrb	r3, [r3, #11]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	4313      	orrs	r3, r2
 80030b8:	121b      	asrs	r3, r3, #8
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	7a5a      	ldrb	r2, [r3, #9]
 80030c4:	7a99      	ldrb	r1, [r3, #10]
 80030c6:	0209      	lsls	r1, r1, #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	7adb      	ldrb	r3, [r3, #11]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	4313      	orrs	r3, r2
 80030d0:	141b      	asrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f107 0318 	add.w	r3, r7, #24
 80030e6:	3301      	adds	r3, #1
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fb22 	bl	8002734 <crc_calculate>
 80030f0:	4603      	mov	r3, r0
 80030f2:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f103 010c 	add.w	r1, r3, #12
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	f107 0316 	add.w	r3, r7, #22
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fb3a 	bl	800277e <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800310a:	f107 0216 	add.w	r2, r7, #22
 800310e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff facd 	bl	80026b4 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800311a:	8af9      	ldrh	r1, [r7, #22]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	330c      	adds	r3, #12
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	78d2      	ldrb	r2, [r2, #3]
 8003124:	4413      	add	r3, r2
 8003126:	b2ca      	uxtb	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800312a:	8afb      	ldrh	r3, [r7, #22]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	b299      	uxth	r1, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f103 020c 	add.w	r2, r3, #12
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	3301      	adds	r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	b2ca      	uxtb	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8003142:	8afa      	ldrh	r2, [r7, #22]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8003148:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01a      	beq.n	8003186 <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	310c      	adds	r1, #12
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800316a:	4401      	add	r1, r0
 800316c:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003170:	f107 0018 	add.w	r0, r7, #24
 8003174:	9102      	str	r1, [sp, #8]
 8003176:	9201      	str	r2, [sp, #4]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4633      	mov	r3, r6
 800317c:	4602      	mov	r2, r0
 800317e:	4629      	mov	r1, r5
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff fe61 	bl	8002e48 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	78db      	ldrb	r3, [r3, #3]
 800318a:	b29a      	uxth	r2, r3
 800318c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003190:	b29b      	uxth	r3, r3
 8003192:	4413      	add	r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800319a:	b29b      	uxth	r3, r3
 800319c:	4413      	add	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3302      	adds	r3, #2
 80031a2:	b29b      	uxth	r3, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	372c      	adds	r7, #44	; 0x2c
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ac <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af04      	add	r7, sp, #16
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	70fb      	strb	r3, [r7, #3]
 80031be:	460b      	mov	r3, r1
 80031c0:	70bb      	strb	r3, [r7, #2]
 80031c2:	4613      	mov	r3, r2
 80031c4:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80031c6:	787b      	ldrb	r3, [r7, #1]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fe29 	bl	8002e20 <mavlink_get_channel_status>
 80031ce:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80031d0:	78ba      	ldrb	r2, [r7, #2]
 80031d2:	78f9      	ldrb	r1, [r7, #3]
 80031d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	7f3b      	ldrb	r3, [r7, #28]
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	7e3b      	ldrb	r3, [r7, #24]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff feb0 	bl	8002f4a <mavlink_finalize_message_buffer>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af04      	add	r7, sp, #16
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	70fb      	strb	r3, [r7, #3]
 8003206:	460b      	mov	r3, r1
 8003208:	70bb      	strb	r3, [r7, #2]
 800320a:	4613      	mov	r3, r2
 800320c:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 800320e:	78ba      	ldrb	r2, [r7, #2]
 8003210:	78f9      	ldrb	r1, [r7, #3]
 8003212:	7d3b      	ldrb	r3, [r7, #20]
 8003214:	9302      	str	r3, [sp, #8]
 8003216:	7c3b      	ldrb	r3, [r7, #16]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	787b      	ldrb	r3, [r7, #1]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffc3 	bl	80031ac <mavlink_finalize_message_chan>
 8003226:	4603      	mov	r3, r0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	789b      	ldrb	r3, [r3, #2]
 8003244:	2bfe      	cmp	r3, #254	; 0xfe
 8003246:	d13a      	bne.n	80032be <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800324c:	2305      	movs	r3, #5
 800324e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	789a      	ldrb	r2, [r3, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3302      	adds	r3, #2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	7992      	ldrb	r2, [r2, #6]
 8003268:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3303      	adds	r3, #3
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	79d2      	ldrb	r2, [r2, #7]
 8003272:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3304      	adds	r3, #4
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	7a12      	ldrb	r2, [r2, #8]
 800327c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	7a5a      	ldrb	r2, [r3, #9]
 8003282:	7a99      	ldrb	r1, [r3, #10]
 8003284:	0209      	lsls	r1, r1, #8
 8003286:	430a      	orrs	r2, r1
 8003288:	7adb      	ldrb	r3, [r3, #11]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	4313      	orrs	r3, r2
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3305      	adds	r3, #5
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1d98      	adds	r0, r3, #6
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f103 010c 	add.w	r1, r3, #12
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	78db      	ldrb	r3, [r3, #3]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f010 fb02 	bl	80138b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80032ac:	7dbb      	ldrb	r3, [r7, #22]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	78d2      	ldrb	r2, [r2, #3]
 80032b2:	4413      	add	r3, r2
 80032b4:	3301      	adds	r3, #1
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e06c      	b.n	8003398 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fe24 	bl	8002f14 <_mav_trim_payload>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80032d0:	2309      	movs	r3, #9
 80032d2:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	789a      	ldrb	r2, [r3, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3302      	adds	r3, #2
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	7912      	ldrb	r2, [r2, #4]
 80032ec:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3303      	adds	r3, #3
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	7952      	ldrb	r2, [r2, #5]
 80032f6:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	7992      	ldrb	r2, [r2, #6]
 8003300:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3305      	adds	r3, #5
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	79d2      	ldrb	r2, [r2, #7]
 800330a:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3306      	adds	r3, #6
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	7a12      	ldrb	r2, [r2, #8]
 8003314:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7a5a      	ldrb	r2, [r3, #9]
 800331a:	7a99      	ldrb	r1, [r3, #10]
 800331c:	0209      	lsls	r1, r1, #8
 800331e:	430a      	orrs	r2, r1
 8003320:	7adb      	ldrb	r3, [r3, #11]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	4313      	orrs	r3, r2
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3307      	adds	r3, #7
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	7a5a      	ldrb	r2, [r3, #9]
 8003334:	7a99      	ldrb	r1, [r3, #10]
 8003336:	0209      	lsls	r1, r1, #8
 8003338:	430a      	orrs	r2, r1
 800333a:	7adb      	ldrb	r3, [r3, #11]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	4313      	orrs	r3, r2
 8003340:	121a      	asrs	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3308      	adds	r3, #8
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	7a5a      	ldrb	r2, [r3, #9]
 800334e:	7a99      	ldrb	r1, [r3, #10]
 8003350:	0209      	lsls	r1, r1, #8
 8003352:	430a      	orrs	r2, r1
 8003354:	7adb      	ldrb	r3, [r3, #11]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	4313      	orrs	r3, r2
 800335a:	141a      	asrs	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3309      	adds	r3, #9
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 000a 	add.w	r0, r3, #10
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	4619      	mov	r1, r3
 8003372:	f010 fa9d 	bl	80138b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003376:	7dba      	ldrb	r2, [r7, #22]
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	4413      	add	r3, r2
 800337c:	3301      	adds	r3, #1
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <mavlink_msg_to_send_buffer+0x164>
 8003390:	230d      	movs	r3, #13
 8003392:	e000      	b.n	8003396 <mavlink_msg_to_send_buffer+0x166>
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	3301      	adds	r3, #1
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1c98      	adds	r0, r3, #2
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80033c6:	7dfa      	ldrb	r2, [r7, #23]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f010 fa71 	bl	80138b0 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80033ce:	7dbb      	ldrb	r3, [r7, #22]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4413      	add	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3303      	adds	r3, #3
 80033e4:	b29b      	uxth	r3, r3
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b08e      	sub	sp, #56	; 0x38
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	613a      	str	r2, [r7, #16]
 80033f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80033fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80033fe:	461a      	mov	r2, r3
 8003400:	ed87 1a01 	vstr	s2, [r7, #4]
 8003404:	edc7 1a00 	vstr	s3, [r7]
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]
 800340c:	460b      	mov	r3, r1
 800340e:	75bb      	strb	r3, [r7, #22]
 8003410:	4613      	mov	r3, r2
 8003412:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 8003424:	8abb      	ldrh	r3, [r7, #20]
 8003426:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 8003428:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800342a:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	330c      	adds	r3, #12
 8003430:	f107 011c 	add.w	r1, r7, #28
 8003434:	2214      	movs	r2, #20
 8003436:	4618      	mov	r0, r3
 8003438:	f010 fa3a 	bl	80138b0 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2200      	movs	r2, #0
 8003440:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8003444:	725a      	strb	r2, [r3, #9]
 8003446:	2200      	movs	r2, #0
 8003448:	729a      	strb	r2, [r3, #10]
 800344a:	2200      	movs	r2, #0
 800344c:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 800344e:	7dba      	ldrb	r2, [r7, #22]
 8003450:	7df9      	ldrb	r1, [r7, #23]
 8003452:	2314      	movs	r3, #20
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2314      	movs	r3, #20
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2314      	movs	r3, #20
 800345c:	6938      	ldr	r0, [r7, #16]
 800345e:	f7ff fec9 	bl	80031f4 <mavlink_finalize_message>
 8003462:	4603      	mov	r3, r0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	603a      	str	r2, [r7, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	460b      	mov	r3, r1
 800347c:	71bb      	strb	r3, [r7, #6]
 800347e:	4613      	mov	r3, r2
 8003480:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8003486:	797b      	ldrb	r3, [r7, #5]
 8003488:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 800348a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800348e:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8003490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003494:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8003496:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800349a:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 800349c:	2303      	movs	r3, #3
 800349e:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	f107 010c 	add.w	r1, r7, #12
 80034a8:	2209      	movs	r2, #9
 80034aa:	4618      	mov	r0, r3
 80034ac:	f010 fa00 	bl	80138b0 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	725a      	strb	r2, [r3, #9]
 80034b6:	2200      	movs	r2, #0
 80034b8:	729a      	strb	r2, [r3, #10]
 80034ba:	2200      	movs	r2, #0
 80034bc:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80034be:	79ba      	ldrb	r2, [r7, #6]
 80034c0:	79f9      	ldrb	r1, [r7, #7]
 80034c2:	2332      	movs	r3, #50	; 0x32
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2309      	movs	r3, #9
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2309      	movs	r3, #9
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	f7ff fe91 	bl	80031f4 <mavlink_finalize_message>
 80034d2:	4603      	mov	r3, r0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 80034dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	60ba      	str	r2, [r7, #8]
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	460b      	mov	r3, r1
 80034ec:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791e      	ldrb	r6, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	795b      	ldrb	r3, [r3, #5]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	7992      	ldrb	r2, [r2, #6]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	6809      	ldr	r1, [r1, #0]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	79c0      	ldrb	r0, [r0, #7]
 8003502:	7bbd      	ldrb	r5, [r7, #14]
 8003504:	7bfc      	ldrb	r4, [r7, #15]
 8003506:	9003      	str	r0, [sp, #12]
 8003508:	9102      	str	r1, [sp, #8]
 800350a:	9201      	str	r2, [sp, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4633      	mov	r3, r6
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	4629      	mov	r1, r5
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ffa9 	bl	800346c <mavlink_msg_heartbeat_pack>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003524 <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	705a      	strb	r2, [r3, #1]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	709a      	strb	r2, [r3, #2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	70da      	strb	r2, [r3, #3]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	711a      	strb	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	715a      	strb	r2, [r3, #5]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	719a      	strb	r2, [r3, #6]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, I2C_HandleTypeDef* i2c)
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter_i2c(i2c)  {
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	731a      	strb	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	81da      	strh	r2, [r3, #14]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xac>)
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	220a      	movs	r2, #10
 80035b2:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80035cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f010 f97a 	bl	80138cc <memset>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f203 33cd 	addw	r3, r3, #973	; 0x3cd
 80035ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f010 f969 	bl	80138cc <memset>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff8f 	bl	8003524 <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xb0>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6013      	str	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);




}
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	08016518 	.word	0x08016518
 800361c:	200003d0 	.word	0x200003d0

08003620 <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <HAL_UARTEx_RxEventCallback+0x30>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]



	  //printf("Size/length from callback function %d \r\n", instance->_receiveBuffer_1[0]);
  	  instance->_bufferIndex ++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8003638:	3301      	adds	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
  	  //instance->readFlightTime();



}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	200003d0 	.word	0x200003d0

08003654 <_ZN14MavlinkControl9update_RXEv>:

void MavlinkControl::update_RX(void){
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8003666:	f44f 728c 	mov.w	r2, #280	; 0x118
 800366a:	4619      	mov	r1, r3
 800366c:	f00a f812 	bl	800d694 <HAL_UART_Receive_DMA>
	//this->process_header();

}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

	//Every 0.5 sec send a heartbeat to the herelink controller. If this runs continuously this
	//blocks the SBUS protocol

	this->sendTestMessage();
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f86d 	bl	8003760 <_ZN14MavlinkControl15sendTestMessageEv>

	if(HAL_GetTick() % 500 == 0){
 8003686:	f002 fca5 	bl	8005fd4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <_ZN14MavlinkControl9update_TXEv+0x44>)
 800368e:	fba3 1302 	umull	r1, r3, r3, r2
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f807 	bl	80036c0 <_ZN14MavlinkControl9heartbeatEv>

	}

}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 80036e0:	f7ff fefc 	bl	80034dc <mavlink_msg_heartbeat_encode>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f203 1233 	addw	r2, r3, #307	; 0x133
 80036fe:	2303      	movs	r3, #3
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	2300      	movs	r3, #0
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	230a      	movs	r3, #10
 8003710:	f7ff feac 	bl	800346c <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f203 32cd 	addw	r2, r3, #973	; 0x3cd
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff fd84 	bl	8003230 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f203 31cd 	addw	r1, r3, #973	; 0x3cd
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	89da      	ldrh	r2, [r3, #14]
 8003736:	2364      	movs	r3, #100	; 0x64
 8003738:	f009 ff15 	bl	800d566 <HAL_UART_Transmit>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 800374e:	f010 fdb5 	bl	80142bc <puts>
	}

}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	0801651c 	.word	0x0801651c

08003760 <_ZN14MavlinkControl15sendTestMessageEv>:

void MavlinkControl::sendTestMessage(void){
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]

	float testValue = 122.0f;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <_ZN14MavlinkControl15sendTestMessageEv+0x8c>)
 800376a:	60fb      	str	r3, [r7, #12]

	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though

	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, testValue, 0.0f,0,0,0,0);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f203 1233 	addw	r2, r3, #307	; 0x133
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80037f0 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003786:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80037f0 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 800378a:	2300      	movs	r3, #0
 800378c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80037f0 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003790:	ed97 0a03 	vldr	s0, [r7, #12]
 8003794:	f7ff fe2b 	bl	80033ee <mavlink_msg_vfr_hud_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f203 32cd 	addw	r2, r3, #973	; 0x3cd
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f203 1333 	addw	r3, r3, #307	; 0x133
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f7ff fd42 	bl	8003230 <mavlink_msg_to_send_buffer>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8a3 24e6 	strh.w	r2, [r3, #1254]	; 0x4e6
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f203 31cd 	addw	r1, r3, #973	; 0x3cd
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 24e6 	ldrh.w	r2, [r3, #1254]	; 0x4e6
 80037c6:	2364      	movs	r3, #100	; 0x64
 80037c8:	f009 fecd 	bl	800d566 <HAL_UART_Transmit>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <_ZN14MavlinkControl15sendTestMessageEv+0x82>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <_ZN14MavlinkControl15sendTestMessageEv+0x94>)
 80037de:	f010 fd6d 	bl	80142bc <puts>
	}

}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	42f40000 	.word	0x42f40000
 80037f0:	00000000 	.word	0x00000000
 80037f4:	0801651c 	.word	0x0801651c

080037f8 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	611a      	str	r2, [r3, #16]
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	761a      	strb	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	331e      	adds	r3, #30
 800381a:	2220      	movs	r2, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f010 f854 	bl	80138cc <memset>

	this->_huart_sbus = huart_sbus;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]





}
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2219      	movs	r2, #25
 8003846:	4619      	mov	r1, r3
 8003848:	f00b fabe 	bl	800edc8 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f804 	bl	800385a <_ZN4SBUS8readSBUSEv>




}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	795b      	ldrb	r3, [r3, #5]
 8003866:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	799b      	ldrb	r3, [r3, #6]
 800386c:	b29b      	uxth	r3, r3
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	89bb      	ldrh	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	799b      	ldrb	r3, [r3, #6]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	79db      	ldrb	r3, [r3, #7]
 8003892:	b29b      	uxth	r3, r3
 8003894:	015b      	lsls	r3, r3, #5
 8003896:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	89bb      	ldrh	r3, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	79db      	ldrb	r3, [r3, #7]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7a1b      	ldrb	r3, [r3, #8]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7a5b      	ldrb	r3, [r3, #9]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 80038c8:	89fa      	ldrh	r2, [r7, #14]
 80038ca:	89bb      	ldrh	r3, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	897b      	ldrh	r3, [r7, #10]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7a5b      	ldrb	r3, [r3, #9]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7a9b      	ldrb	r3, [r3, #10]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	01db      	lsls	r3, r3, #7
 80038f2:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 80038f4:	89fa      	ldrh	r2, [r7, #14]
 80038f6:	89bb      	ldrh	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7a9b      	ldrb	r3, [r3, #10]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	b2db      	uxtb	r3, r3
 800390e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7adb      	ldrb	r3, [r3, #11]
 8003914:	b29b      	uxth	r3, r3
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 800391a:	89fa      	ldrh	r2, [r7, #14]
 800391c:	89bb      	ldrh	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7adb      	ldrb	r3, [r3, #11]
 8003930:	09db      	lsrs	r3, r3, #7
 8003932:	b2db      	uxtb	r3, r3
 8003934:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7b1b      	ldrb	r3, [r3, #12]
 800393a:	b29b      	uxth	r3, r3
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7b5b      	ldrb	r3, [r3, #13]
 8003944:	b29b      	uxth	r3, r3
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 800394a:	89fa      	ldrh	r2, [r7, #14]
 800394c:	89bb      	ldrh	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	b29a      	uxth	r2, r3
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	4313      	orrs	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7b5b      	ldrb	r3, [r3, #13]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7b9b      	ldrb	r3, [r3, #14]
 8003970:	b29b      	uxth	r3, r3
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003976:	89fa      	ldrh	r2, [r7, #14]
 8003978:	89bb      	ldrh	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7b9b      	ldrb	r3, [r3, #14]
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7bdb      	ldrb	r3, [r3, #15]
 8003996:	b29b      	uxth	r3, r3
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 800399c:	89fa      	ldrh	r2, [r7, #14]
 800399e:	89bb      	ldrh	r3, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7c1b      	ldrb	r3, [r3, #16]
 80039b2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7c5b      	ldrb	r3, [r3, #17]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 80039be:	89fa      	ldrh	r2, [r7, #14]
 80039c0:	89bb      	ldrh	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7c5b      	ldrb	r3, [r3, #17]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7c9b      	ldrb	r3, [r3, #18]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 80039e4:	89fa      	ldrh	r2, [r7, #14]
 80039e6:	89bb      	ldrh	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7c9b      	ldrb	r3, [r3, #18]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7cdb      	ldrb	r3, [r3, #19]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7d1b      	ldrb	r3, [r3, #20]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	029b      	lsls	r3, r3, #10
 8003a12:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003a14:	89fa      	ldrh	r2, [r7, #14]
 8003a16:	89bb      	ldrh	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	897b      	ldrh	r3, [r7, #10]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7d1b      	ldrb	r3, [r3, #20]
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7d5b      	ldrb	r3, [r3, #21]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	01db      	lsls	r3, r3, #7
 8003a3e:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8003a40:	89fa      	ldrh	r2, [r7, #14]
 8003a42:	89bb      	ldrh	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7d5b      	ldrb	r3, [r3, #21]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7d9b      	ldrb	r3, [r3, #22]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003a66:	89fa      	ldrh	r2, [r7, #14]
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7d9b      	ldrb	r3, [r3, #22]
 8003a7c:	09db      	lsrs	r3, r3, #7
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7ddb      	ldrb	r3, [r3, #23]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7e1b      	ldrb	r3, [r3, #24]
 8003a90:	125b      	asrs	r3, r3, #9
 8003a92:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003a94:	89fa      	ldrh	r2, [r7, #14]
 8003a96:	89bb      	ldrh	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	897b      	ldrh	r3, [r7, #10]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7e1b      	ldrb	r3, [r3, #24]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7e5b      	ldrb	r3, [r3, #25]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8003ac0:	89fa      	ldrh	r2, [r7, #14]
 8003ac2:	89bb      	ldrh	r3, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7e5b      	ldrb	r3, [r3, #25]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7e9b      	ldrb	r3, [r3, #26]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8003ae6:	89fa      	ldrh	r2, [r7, #14]
 8003ae8:	89bb      	ldrh	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7edb      	ldrb	r3, [r3, #27]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <_ZN4SBUS8readSBUSEv+0x2b0>
 8003b04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b08:	e000      	b.n	8003b0c <_ZN4SBUS8readSBUSEv+0x2b2>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8003b10:	2301      	movs	r3, #1


}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003b2c:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8003b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b32:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003b34:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003b38:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003b3a:	f240 6394 	movw	r3, #1684	; 0x694
 8003b3e:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8003b40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	da14      	bge.n	8003b76 <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003b4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5a:	fb03 f202 	mul.w	r2, r3, r2
 8003b5e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b66:	1acb      	subs	r3, r1, r3
 8003b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b74:	e01b      	b.n	8003bae <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003b76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	dd13      	ble.n	8003baa <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8003b82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <_ZN4SBUS8getLeftYEv+0x9c>)
 8003b8e:	fb03 f202 	mul.w	r2, r3, r2
 8003b92:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003b96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba8:	e001      	b.n	8003bae <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8003baa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003bc0 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8003bae:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	fffffc18 	.word	0xfffffc18
 8003bc0:	00000000 	.word	0x00000000

08003bc4 <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8c1b      	ldrh	r3, [r3, #32]
 8003bd0:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003bd2:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003bd6:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <_ZN4SBUS9getRightYEv+0xc0>)
 8003bda:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <_ZN4SBUS9getRightYEv+0xc4>)
 8003bde:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8003be0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	dd16      	ble.n	8003c28 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 8003bfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003c8c <_ZN4SBUS9getRightYEv+0xc8>
 8003c12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c16:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c26:	e025      	b.n	8003c74 <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8003c28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c34:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d516      	bpl.n	8003c70 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8003c42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003c8c <_ZN4SBUS9getRightYEv+0xc8>
 8003c5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6e:	e001      	b.n	8003c74 <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8003c70:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003c90 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8003c74:	eeb0 0a67 	vmov.f32	s0, s15
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	43b60000 	.word	0x43b60000
 8003c88:	44d28000 	.word	0x44d28000
 8003c8c:	447a0000 	.word	0x447a0000
 8003c90:	00000000 	.word	0x00000000

08003c94 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8bdb      	ldrh	r3, [r3, #30]
 8003ca0:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003ca2:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003ca6:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <_ZN4SBUS9getRightXEv+0xc0>)
 8003caa:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <_ZN4SBUS9getRightXEv+0xc4>)
 8003cae:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8003cb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	dd16      	ble.n	8003cf8 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003cca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003d5c <_ZN4SBUS9getRightXEv+0xc8>
 8003ce2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf6:	e025      	b.n	8003d44 <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8003cf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d04:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	d516      	bpl.n	8003d40 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8003d12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d26:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003d5c <_ZN4SBUS9getRightXEv+0xc8>
 8003d2a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	e001      	b.n	8003d44 <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8003d40:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003d60 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	43b60000 	.word	0x43b60000
 8003d58:	44d28000 	.word	0x44d28000
 8003d5c:	447a0000 	.word	0x447a0000
 8003d60:	00000000 	.word	0x00000000

08003d64 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d70:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8003d72:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003d76:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8003d78:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <_ZN4SBUS11getJogWheelEv+0xc0>)
 8003d7a:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8003d7e:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8003d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d98:	dd16      	ble.n	8003dc8 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8003d9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e2c <_ZN4SBUS11getJogWheelEv+0xc8>
 8003db2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003db6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc6:	e025      	b.n	8003e14 <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8003dc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	d516      	bpl.n	8003e10 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8003de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003e2c <_ZN4SBUS11getJogWheelEv+0xc8>
 8003dfa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0e:	e001      	b.n	8003e14 <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8003e10:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003e30 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 8003e14:	eeb0 0a67 	vmov.f32	s0, s15
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	44d28000 	.word	0x44d28000
 8003e28:	43b60000 	.word	0x43b60000
 8003e2c:	447a0000 	.word	0x447a0000
 8003e30:	00000000 	.word	0x00000000

08003e34 <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e44:	bf8c      	ite	hi
 8003e46:	2301      	movhi	r3, #1
 8003e48:	2300      	movls	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <_ZN4SBUS8A_buttonEv+0xac>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d02d      	beq.n	8003eb0 <_ZN4SBUS8A_buttonEv+0x7c>
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	dc3b      	bgt.n	8003ed0 <_ZN4SBUS8A_buttonEv+0x9c>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <_ZN4SBUS8A_buttonEv+0x2e>
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00a      	beq.n	8003e76 <_ZN4SBUS8A_buttonEv+0x42>
 8003e60:	e036      	b.n	8003ed0 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02e      	beq.n	8003ec6 <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <_ZN4SBUS8A_buttonEv+0xac>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003e74:	e027      	b.n	8003ec6 <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	f083 0301 	eor.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <_ZN4SBUS8A_buttonEv+0xac>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8003e88:	e01f      	b.n	8003eca <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b31      	cmp	r3, #49	; 0x31
 8003e9c:	bf8c      	ite	hi
 8003e9e:	2301      	movhi	r3, #1
 8003ea0:	2300      	movls	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <_ZN4SBUS8A_buttonEv+0xac>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
	      break;
 8003eae:	e00c      	b.n	8003eca <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	f083 0301 	eor.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <_ZN4SBUS8A_buttonEv+0xac>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
	        return true;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e005      	b.n	8003ed2 <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8003ece:	bf00      	nop
	  }

	  return false;
 8003ed0:	2300      	movs	r3, #0

}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	200003d4 	.word	0x200003d4
 8003ee4:	200003d5 	.word	0x200003d5

08003ee8 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef8:	bf8c      	ite	hi
 8003efa:	2301      	movhi	r3, #1
 8003efc:	2300      	movls	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <_ZN4SBUS8B_buttonEv+0xac>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d02d      	beq.n	8003f64 <_ZN4SBUS8B_buttonEv+0x7c>
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	dc3b      	bgt.n	8003f84 <_ZN4SBUS8B_buttonEv+0x9c>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <_ZN4SBUS8B_buttonEv+0x2e>
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d00a      	beq.n	8003f2a <_ZN4SBUS8B_buttonEv+0x42>
 8003f14:	e036      	b.n	8003f84 <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02e      	beq.n	8003f7a <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <_ZN4SBUS8B_buttonEv+0xac>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003f28:	e027      	b.n	8003f7a <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	f083 0301 	eor.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <_ZN4SBUS8B_buttonEv+0xac>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8003f3c:	e01f      	b.n	8003f7e <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b31      	cmp	r3, #49	; 0x31
 8003f50:	bf8c      	ite	hi
 8003f52:	2301      	movhi	r3, #1
 8003f54:	2300      	movls	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <_ZN4SBUS8B_buttonEv+0xac>)
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
	      break;
 8003f62:	e00c      	b.n	8003f7e <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	f083 0301 	eor.w	r3, r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <_ZN4SBUS8B_buttonEv+0xac>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
	        return true;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e005      	b.n	8003f86 <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 8003f82:	bf00      	nop
	  }

	  return false;
 8003f84:	2300      	movs	r3, #0


}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	200003d6 	.word	0x200003d6
 8003f98:	200003d7 	.word	0x200003d7

08003f9c <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b1d      	cmp	r3, #29
 8003fac:	d80e      	bhi.n	8003fcc <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8003fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fb2:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <_ZN10Components13Error_HandlerEv+0x38>)
 8003fb4:	f004 ff1a 	bl	8008dec <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8003fb8:	20c8      	movs	r0, #200	; 0xc8
 8003fba:	f002 f817 	bl	8005fec <HAL_Delay>
		printf("Components error handler !! \r\n");
 8003fbe:	4806      	ldr	r0, [pc, #24]	; (8003fd8 <_ZN10Components13Error_HandlerEv+0x3c>)
 8003fc0:	f010 f97c 	bl	80142bc <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	e7ed      	b.n	8003fa8 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	48000800 	.word	0x48000800
 8003fd8:	08016564 	.word	0x08016564

08003fdc <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb09 	bl	80045fc <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb42 	bl	8004674 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb7b 	bl	80046ec <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fbb0 	bl	800475c <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fbe9 	bl	80047d4 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f86a 	bl	80040dc <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fc19 	bl	8004840 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fc7e 	bl	8004910 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fccf 	bl	80049b8 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fd1e 	bl	8004a5c <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fd6d 	bl	8004b00 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fdae 	bl	8004b88 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f95f 	bl	80042f0 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fdec 	bl	8004c10 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fe2d 	bl	8004c98 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa1a 	bl	8004478 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fe6b 	bl	8004d20 <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	4618      	mov	r0, r3
 8004050:	f005 f8dc 	bl	800920c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	4618      	mov	r0, r3
 800405a:	f005 f8d7 	bl	800920c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	4618      	mov	r0, r3
 8004064:	f005 f8d2 	bl	800920c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4618      	mov	r0, r3
 800406e:	f005 f8cd 	bl	800920c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f005 f8c8 	bl	800920c <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4618      	mov	r0, r3
 8004082:	f005 f8f4 	bl	800926e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	4618      	mov	r0, r3
 800408c:	f005 f8ef 	bl	800926e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	4618      	mov	r0, r3
 8004096:	f005 f8ea 	bl	800926e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4618      	mov	r0, r3
 80040a0:	f005 f8e5 	bl	800926e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	4618      	mov	r0, r3
 80040aa:	f005 f8e0 	bl	800926e <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	217f      	movs	r1, #127	; 0x7f
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 fa9f 	bl	80075f8 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	217f      	movs	r1, #127	; 0x7f
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 fa99 	bl	80075f8 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	217f      	movs	r1, #127	; 0x7f
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 fa93 	bl	80075f8 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08e      	sub	sp, #56	; 0x38
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 80040e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	2220      	movs	r2, #32
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f00f fbe7 	bl	80138cc <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004106:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004110:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	2201      	movs	r2, #1
 8004130:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	2208      	movs	r2, #8
 8004138:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	2200      	movs	r2, #0
 8004148:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	2203      	movs	r2, #3
 8004150:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	2200      	movs	r2, #0
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	221c      	movs	r2, #28
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004198:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	2200      	movs	r2, #0
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	2201      	movs	r2, #1
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f986 	bl	80064c0 <HAL_ADC_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fee9 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 80041ca:	4842      	ldr	r0, [pc, #264]	; (80042d4 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 80041cc:	f00f fff0 	bl	80141b0 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f003 fa6c 	bl	80076bc <HAL_ADCEx_MultiModeConfigChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fed1 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 80041fa:	4837      	ldr	r0, [pc, #220]	; (80042d8 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 80041fc:	f00f ffd8 	bl	80141b0 <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <_ZN10Components10init_ADC_1Ev+0x200>)
 8004202:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004204:	2306      	movs	r3, #6
 8004206:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004208:	2304      	movs	r3, #4
 800420a:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800420c:	237f      	movs	r3, #127	; 0x7f
 800420e:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004210:	2304      	movs	r3, #4
 8004212:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	f107 020c 	add.w	r2, r7, #12
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f002 fc00 	bl	8006a28 <HAL_ADC_ConfigChannel>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff feaf 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 800423e:	4828      	ldr	r0, [pc, #160]	; (80042e0 <_ZN10Components10init_ADC_1Ev+0x204>)
 8004240:	f00f ffb6 	bl	80141b0 <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <_ZN10Components10init_ADC_1Ev+0x208>)
 8004246:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004248:	2312      	movs	r3, #18
 800424a:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800424c:	2304      	movs	r3, #4
 800424e:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004250:	237f      	movs	r3, #127	; 0x7f
 8004252:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004254:	2304      	movs	r3, #4
 8004256:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	f107 020c 	add.w	r2, r7, #12
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f002 fbde 	bl	8006a28 <HAL_ADC_ConfigChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fe8d 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004282:	4819      	ldr	r0, [pc, #100]	; (80042e8 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004284:	f00f ff94 	bl	80141b0 <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <_ZN10Components10init_ADC_1Ev+0x210>)
 800428a:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 800428c:	2318      	movs	r3, #24
 800428e:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004290:	2304      	movs	r3, #4
 8004292:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004294:	237f      	movs	r3, #127	; 0x7f
 8004296:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004298:	2304      	movs	r3, #4
 800429a:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	f107 020c 	add.w	r2, r7, #12
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f002 fbbc 	bl	8006a28 <HAL_ADC_ConfigChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fe6b 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 80042c6:	4808      	ldr	r0, [pc, #32]	; (80042e8 <_ZN10Components10init_ADC_1Ev+0x20c>)
 80042c8:	f00f ff72 	bl	80141b0 <iprintf>
		  }


}
 80042cc:	bf00      	nop
 80042ce:	3738      	adds	r7, #56	; 0x38
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	08016584 	.word	0x08016584
 80042d8:	08016598 	.word	0x08016598
 80042dc:	2e300800 	.word	0x2e300800
 80042e0:	080165c8 	.word	0x080165c8
 80042e4:	3ac04000 	.word	0x3ac04000
 80042e8:	080165ec 	.word	0x080165ec
 80042ec:	32601000 	.word	0x32601000

080042f0 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	2220      	movs	r2, #32
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f00f fae3 	bl	80138cc <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	4a55      	ldr	r2, [pc, #340]	; (8004460 <_ZN10Components10init_ADC_2Ev+0x170>)
 800430c:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004316:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	2200      	movs	r2, #0
 8004326:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	2201      	movs	r2, #1
 8004336:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	2208      	movs	r2, #8
 800433e:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	2200      	movs	r2, #0
 800434e:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2202      	movs	r2, #2
 8004356:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2200      	movs	r2, #0
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2200      	movs	r2, #0
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2218      	movs	r2, #24
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	22e0      	movs	r2, #224	; 0xe0
 800439c:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2200      	movs	r2, #0
 80043a4:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2201      	movs	r2, #1
 80043ac:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f002 f884 	bl	80064c0 <HAL_ADC_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fde7 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 80043ce:	4825      	ldr	r0, [pc, #148]	; (8004464 <_ZN10Components10init_ADC_2Ev+0x174>)
 80043d0:	f00f ff74 	bl	80142bc <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <_ZN10Components10init_ADC_2Ev+0x178>)
 80043d6:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043d8:	2306      	movs	r3, #6
 80043da:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043e0:	237f      	movs	r3, #127	; 0x7f
 80043e2:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043e4:	2304      	movs	r3, #4
 80043e6:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f107 0208 	add.w	r2, r7, #8
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 fb16 	bl	8006a28 <HAL_ADC_ConfigChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fdc5 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 8004412:	4816      	ldr	r0, [pc, #88]	; (800446c <_ZN10Components10init_ADC_2Ev+0x17c>)
 8004414:	f00f ff52 	bl	80142bc <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <_ZN10Components10init_ADC_2Ev+0x180>)
 800441a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 800441c:	230c      	movs	r3, #12
 800441e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004420:	2304      	movs	r3, #4
 8004422:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004424:	237f      	movs	r3, #127	; 0x7f
 8004426:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004428:	2304      	movs	r3, #4
 800442a:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	f107 0208 	add.w	r2, r7, #8
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f002 faf6 	bl	8006a28 <HAL_ADC_ConfigChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fda5 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 8004452:	4808      	ldr	r0, [pc, #32]	; (8004474 <_ZN10Components10init_ADC_2Ev+0x184>)
 8004454:	f00f ff32 	bl	80142bc <puts>

	  }


}
 8004458:	bf00      	nop
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	50000100 	.word	0x50000100
 8004464:	08016618 	.word	0x08016618
 8004468:	c3290000 	.word	0xc3290000
 800446c:	08016634 	.word	0x08016634
 8004470:	cb8c0000 	.word	0xcb8c0000
 8004474:	0801665c 	.word	0x0801665c

08004478 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	2220      	movs	r2, #32
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f00f fa1f 	bl	80138cc <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a55      	ldr	r2, [pc, #340]	; (80045e8 <_ZN10Components10init_ADC_5Ev+0x170>)
 8004494:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800449e:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2201      	movs	r2, #1
 80044be:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2208      	movs	r2, #8
 80044c6:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2200      	movs	r2, #0
 80044d6:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2202      	movs	r2, #2
 80044de:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2200      	movs	r2, #0
 80044f0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	2200      	movs	r2, #0
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2218      	movs	r2, #24
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	22e0      	movs	r2, #224	; 0xe0
 8004524:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2200      	movs	r2, #0
 800452c:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2201      	movs	r2, #1
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4618      	mov	r0, r3
 800453c:	f001 ffc0 	bl	80064c0 <HAL_ADC_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fd23 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8004556:	4825      	ldr	r0, [pc, #148]	; (80045ec <_ZN10Components10init_ADC_5Ev+0x174>)
 8004558:	f00f fe2a 	bl	80141b0 <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <_ZN10Components10init_ADC_5Ev+0x178>)
 800455e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004560:	2306      	movs	r3, #6
 8004562:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004568:	237f      	movs	r3, #127	; 0x7f
 800456a:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800456c:	2304      	movs	r3, #4
 800456e:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f107 0208 	add.w	r2, r7, #8
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f002 fa52 	bl	8006a28 <HAL_ADC_ConfigChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fd01 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 800459a:	4816      	ldr	r0, [pc, #88]	; (80045f4 <_ZN10Components10init_ADC_5Ev+0x17c>)
 800459c:	f00f fe08 	bl	80141b0 <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <_ZN10Components10init_ADC_5Ev+0x180>)
 80045a2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80045a4:	230c      	movs	r3, #12
 80045a6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80045a8:	2304      	movs	r3, #4
 80045aa:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80045ac:	237f      	movs	r3, #127	; 0x7f
 80045ae:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80045b0:	2304      	movs	r3, #4
 80045b2:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f107 0208 	add.w	r2, r7, #8
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f002 fa32 	bl	8006a28 <HAL_ADC_ConfigChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fce1 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80045da:	4806      	ldr	r0, [pc, #24]	; (80045f4 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80045dc:	f00f fde8 	bl	80141b0 <iprintf>
	  }




}
 80045e0:	bf00      	nop
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	50000600 	.word	0x50000600
 80045ec:	08016684 	.word	0x08016684
 80045f0:	94f00020 	.word	0x94f00020
 80045f4:	0801669c 	.word	0x0801669c
 80045f8:	8c900008 	.word	0x8c900008

080045fc <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <_ZN10Components11init_COMP_1Ev+0x70>)
 800460a:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2200      	movs	r2, #0
 8004612:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2250      	movs	r2, #80	; 0x50
 800461a:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f003 fa93 	bl	8007b6c <HAL_COMP_Init>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fca0 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 800465c:	4804      	ldr	r0, [pc, #16]	; (8004670 <_ZN10Components11init_COMP_1Ev+0x74>)
 800465e:	f00f fda7 	bl	80141b0 <iprintf>

	  }
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40010200 	.word	0x40010200
 8004670:	080166c0 	.word	0x080166c0

08004674 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <_ZN10Components11init_COMP_2Ev+0x70>)
 8004682:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2250      	movs	r2, #80	; 0x50
 8004692:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f003 fa57 	bl	8007b6c <HAL_COMP_Init>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fc64 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 80046d4:	4804      	ldr	r0, [pc, #16]	; (80046e8 <_ZN10Components11init_COMP_2Ev+0x74>)
 80046d6:	f00f fd6b 	bl	80141b0 <iprintf>
	    }




}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40010204 	.word	0x40010204
 80046e8:	080166d8 	.word	0x080166d8

080046ec <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <_ZN10Components11init_COMP_4Ev+0x68>)
 80046fa:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2200      	movs	r2, #0
 8004702:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f003 fa1f 	bl	8007b6c <HAL_COMP_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fc2c 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8004746:	f00f fd33 	bl	80141b0 <iprintf>
    }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	4001020c 	.word	0x4001020c
 8004758:	080166f0 	.word	0x080166f0

0800475c <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <_ZN10Components11init_COMP_5Ev+0x70>)
 800476a:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2240      	movs	r2, #64	; 0x40
 800477a:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f003 f9e3 	bl	8007b6c <HAL_COMP_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fbf0 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 80047bc:	4804      	ldr	r0, [pc, #16]	; (80047d0 <_ZN10Components11init_COMP_5Ev+0x74>)
 80047be:	f00f fcf7 	bl	80141b0 <iprintf>

	  }

}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40010210 	.word	0x40010210
 80047d0:	08016708 	.word	0x08016708

080047d4 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <_ZN10Components11init_COMP_7Ev+0x68>)
 80047e2:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2250      	movs	r2, #80	; 0x50
 80047f2:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2200      	movs	r2, #0
 8004802:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2200      	movs	r2, #0
 800480a:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	4618      	mov	r0, r3
 800481a:	f003 f9a7 	bl	8007b6c <HAL_COMP_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fbb4 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	   }



}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40010218 	.word	0x40010218

08004840 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8004840:	b580      	push	{r7, lr}
 8004842:	b08e      	sub	sp, #56	; 0x38
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	2230      	movs	r2, #48	; 0x30
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f00f f83b 	bl	80138cc <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <_ZN10Components10init_DAC_1Ev+0xc8>)
 800485c:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	4618      	mov	r0, r3
 8004864:	f003 fc2b 	bl	80080be <HAL_DAC_Init>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fb8f 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800487e:	4823      	ldr	r0, [pc, #140]	; (800490c <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004880:	f00f fc96 	bl	80141b0 <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004884:	2302      	movs	r3, #2
 8004886:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004888:	2300      	movs	r3, #0
 800488a:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 800488c:	2300      	movs	r3, #0
 800488e:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800489c:	2302      	movs	r3, #2
 800489e:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80048a0:	2302      	movs	r3, #2
 80048a2:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f107 0108 	add.w	r1, r7, #8
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 fc26 	bl	8008104 <HAL_DAC_ConfigChannel>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fb67 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80048ce:	480f      	ldr	r0, [pc, #60]	; (800490c <_ZN10Components10init_DAC_1Ev+0xcc>)
 80048d0:	f00f fc6e 	bl	80141b0 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f107 0108 	add.w	r1, r7, #8
 80048dc:	2210      	movs	r2, #16
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 fc10 	bl	8008104 <HAL_DAC_ConfigChannel>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fb51 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80048fa:	4804      	ldr	r0, [pc, #16]	; (800490c <_ZN10Components10init_DAC_1Ev+0xcc>)
 80048fc:	f00f fc58 	bl	80141b0 <iprintf>

    }

}
 8004900:	bf00      	nop
 8004902:	3738      	adds	r7, #56	; 0x38
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	50000800 	.word	0x50000800
 800490c:	08016720 	.word	0x08016720

08004910 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	2230      	movs	r2, #48	; 0x30
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f00e ffd3 	bl	80138cc <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	4a20      	ldr	r2, [pc, #128]	; (80049ac <_ZN10Components10init_DAC_2Ev+0x9c>)
 800492c:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fbc3 	bl	80080be <HAL_DAC_Init>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fb27 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800494e:	4818      	ldr	r0, [pc, #96]	; (80049b0 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8004950:	f00f fc2e 	bl	80141b0 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004954:	2302      	movs	r3, #2
 8004956:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004958:	2300      	movs	r3, #0
 800495a:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800496c:	2302      	movs	r3, #2
 800496e:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004970:	2302      	movs	r3, #2
 8004972:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	2200      	movs	r2, #0
 800497e:	4619      	mov	r1, r3
 8004980:	480c      	ldr	r0, [pc, #48]	; (80049b4 <_ZN10Components10init_DAC_2Ev+0xa4>)
 8004982:	f003 fbbf 	bl	8008104 <HAL_DAC_ConfigChannel>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fb00 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800499c:	4804      	ldr	r0, [pc, #16]	; (80049b0 <_ZN10Components10init_DAC_2Ev+0xa0>)
 800499e:	f00f fc07 	bl	80141b0 <iprintf>

	  }


}
 80049a2:	bf00      	nop
 80049a4:	3738      	adds	r7, #56	; 0x38
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	50000c00 	.word	0x50000c00
 80049b0:	08016738 	.word	0x08016738
 80049b4:	200004a0 	.word	0x200004a0

080049b8 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	2230      	movs	r2, #48	; 0x30
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f00e ff7f 	bl	80138cc <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <_ZN10Components10init_DAC_3Ev+0x9c>)
 80049d4:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4618      	mov	r0, r3
 80049dc:	f003 fb6f 	bl	80080be <HAL_DAC_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fad3 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 80049f6:	4818      	ldr	r0, [pc, #96]	; (8004a58 <_ZN10Components10init_DAC_3Ev+0xa0>)
 80049f8:	f00f fbda 	bl	80141b0 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80049fc:	2302      	movs	r3, #2
 80049fe:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004a14:	2302      	movs	r3, #2
 8004a16:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f107 0108 	add.w	r1, r7, #8
 8004a28:	2210      	movs	r2, #16
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 fb6a 	bl	8008104 <HAL_DAC_ConfigChannel>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff faab 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004a46:	4804      	ldr	r0, [pc, #16]	; (8004a58 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004a48:	f00f fbb2 	bl	80141b0 <iprintf>

	  }



}
 8004a4c:	bf00      	nop
 8004a4e:	3738      	adds	r7, #56	; 0x38
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	50001000 	.word	0x50001000
 8004a58:	08016750 	.word	0x08016750

08004a5c <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	; 0x38
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8004a64:	f107 0308 	add.w	r3, r7, #8
 8004a68:	2230      	movs	r2, #48	; 0x30
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f00e ff2d 	bl	80138cc <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <_ZN10Components10init_DAC_4Ev+0x9c>)
 8004a78:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 fb1d 	bl	80080be <HAL_DAC_Init>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fa81 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004a9a:	4818      	ldr	r0, [pc, #96]	; (8004afc <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004a9c:	f00f fb88 	bl	80141b0 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004abc:	2302      	movs	r3, #2
 8004abe:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f107 0108 	add.w	r1, r7, #8
 8004acc:	2200      	movs	r2, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fb18 	bl	8008104 <HAL_DAC_ConfigChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fa59 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004aea:	4804      	ldr	r0, [pc, #16]	; (8004afc <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004aec:	f00f fb60 	bl	80141b0 <iprintf>

	  }


}
 8004af0:	bf00      	nop
 8004af2:	3738      	adds	r7, #56	; 0x38
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	50001400 	.word	0x50001400
 8004afc:	08016768 	.word	0x08016768

08004b00 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <_ZN10Components9init_OA_1Ev+0x80>)
 8004b0e:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2240      	movs	r2, #64	; 0x40
 8004b1e:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2200      	movs	r2, #0
 8004b26:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f004 fa89 	bl	800906c <HAL_OPAMP_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fa16 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 8004b70:	4804      	ldr	r0, [pc, #16]	; (8004b84 <_ZN10Components9init_OA_1Ev+0x84>)
 8004b72:	f00f fb1d 	bl	80141b0 <iprintf>
	  }


}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40010300 	.word	0x40010300
 8004b84:	08016780 	.word	0x08016780

08004b88 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <_ZN10Components9init_OA_2Ev+0x80>)
 8004b96:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2240      	movs	r2, #64	; 0x40
 8004ba6:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 fa44 	bl	800906c <HAL_OPAMP_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff f9d1 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <_ZN10Components9init_OA_2Ev+0x84>)
 8004bfc:	f00f fad8 	bl	80141b0 <iprintf>

	    }


}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40010304 	.word	0x40010304
 8004c0c:	08016798 	.word	0x08016798

08004c10 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <_ZN10Components9init_OA_3Ev+0x80>)
 8004c1e:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	2200      	movs	r2, #0
 8004c26:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2240      	movs	r2, #64	; 0x40
 8004c2e:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	2200      	movs	r2, #0
 8004c36:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2200      	movs	r2, #0
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	4618      	mov	r0, r3
 8004c66:	f004 fa01 	bl	800906c <HAL_OPAMP_Init>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff f98e 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 8004c80:	4804      	ldr	r0, [pc, #16]	; (8004c94 <_ZN10Components9init_OA_3Ev+0x84>)
 8004c82:	f00f fa95 	bl	80141b0 <iprintf>

	   }

}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40010308 	.word	0x40010308
 8004c94:	080167b0 	.word	0x080167b0

08004c98 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <_ZN10Components9init_OA_4Ev+0x80>)
 8004ca6:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	2240      	movs	r2, #64	; 0x40
 8004cb6:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	2200      	movs	r2, #0
 8004cce:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f004 f9bc 	bl	800906c <HAL_OPAMP_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff f949 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 8004d0a:	4804      	ldr	r0, [pc, #16]	; (8004d1c <_ZN10Components9init_OA_4Ev+0x84>)
 8004d0c:	f00f fa50 	bl	80141b0 <iprintf>

	  }
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	4001030c 	.word	0x4001030c
 8004d1c:	080167c8 	.word	0x080167c8

08004d20 <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <_ZN10Components9init_OA_5Ev+0x80>)
 8004d2e:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	2200      	movs	r2, #0
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 f978 	bl	800906c <HAL_OPAMP_Init>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff f905 	bl	8003f9c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 8004d92:	4804      	ldr	r0, [pc, #16]	; (8004da4 <_ZN10Components9init_OA_5Ev+0x84>)
 8004d94:	f00f fa0c 	bl	80141b0 <iprintf>

	  }

}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40010310 	.word	0x40010310
 8004da4:	080167e0 	.word	0x080167e0

08004da8 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000674 	.word	0x20000674

08004ddc <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

	return &hadc5;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200006e0 	.word	0x200006e0

08004df8 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor){
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	609a      	str	r2, [r3, #8]

}
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <main>:
//UART HANDLES IN MAIN FOR NOW, DMA HANDLES are created in stm32g4xx_hal_msp.c file
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


int main(void){
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 8004e2e:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8004e30:	f001 f86b 	bl	8005f0a <HAL_Init>
	//Initialize clock/DMA/... configurations and components.

	HAL_Delay(100);
 8004e34:	2064      	movs	r0, #100	; 0x64
 8004e36:	f001 f8d9 	bl	8005fec <HAL_Delay>
	Initializer init(&huart1, &huart2);
 8004e3a:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8004e3e:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <main+0x100>)
 8004e40:	493a      	ldr	r1, [pc, #232]	; (8004f2c <main+0x104>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fc fb38 	bl	80014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8004e48:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fc fb4a 	bl	80014e6 <_ZN11Initializer12init_ConfigsEv>

	HAL_Delay(100);
 8004e52:	2064      	movs	r0, #100	; 0x64
 8004e54:	f001 f8ca 	bl	8005fec <HAL_Delay>
	Components components;
 8004e58:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8004e5c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e60:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <main+0x108>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	4611      	mov	r1, r2
 8004e66:	2344      	movs	r3, #68	; 0x44
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f00e fd21 	bl	80138b0 <memcpy>
	components.init_Components();
 8004e6e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff f8b2 	bl	8003fdc <_ZN10Components15init_ComponentsEv>


	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8004e78:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8004e7c:	492a      	ldr	r1, [pc, #168]	; (8004f28 <main+0x100>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fcba 	bl	80037f8 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1, init.get_i2c());
 8004e84:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd fbe7 	bl	800265c <_ZN11Initializer7get_i2cEv>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e94:	4925      	ldr	r1, [pc, #148]	; (8004f2c <main+0x104>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fb68 	bl	800356c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 8004e9c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8004ea0:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 8004ea4:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8004ea8:	f107 0010 	add.w	r0, r7, #16
 8004eac:	f7fc f826 	bl	8000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Debugger debugger(&sbus, &mavlink, &convertor);
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004eb8:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8004ebc:	1d38      	adds	r0, r7, #4
 8004ebe:	f7ff ff9b 	bl	8004df8 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>

	HAL_Delay(100);
 8004ec2:	2064      	movs	r0, #100	; 0x64
 8004ec4:	f001 f892 	bl	8005fec <HAL_Delay>
	printf(" sanity check \r \n");
 8004ec8:	481a      	ldr	r0, [pc, #104]	; (8004f34 <main+0x10c>)
 8004eca:	f00f f9f7 	bl	80142bc <puts>

	/* Main loop */
	while (1){

		//signal led
		if(HAL_GetTick() % 1000 == 0){
 8004ece:	f001 f881 	bl	8005fd4 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <main+0x110>)
 8004ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <main+0xd6>

			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 8004ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ef8:	4810      	ldr	r0, [pc, #64]	; (8004f3c <main+0x114>)
 8004efa:	f003 ff77 	bl	8008dec <HAL_GPIO_TogglePin>


		}

		  sbus.update();
 8004efe:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fc96 	bl	8003834 <_ZN4SBUS6updateEv>
		  convertor.process();
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fc fab9 	bl	8001484 <_ZN9Convertor7processEv>
		  mavlink.update_TX();
 8004f12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fbae 	bl	8003678 <_ZN14MavlinkControl9update_TXEv>
		  mavlink.update_RX();
 8004f1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fb97 	bl	8003654 <_ZN14MavlinkControl9update_RXEv>
		if(HAL_GetTick() % 1000 == 0){
 8004f26:	e7d2      	b.n	8004ece <main+0xa6>
 8004f28:	200007dc 	.word	0x200007dc
 8004f2c:	2000074c 	.word	0x2000074c
 8004f30:	0801680c 	.word	0x0801680c
 8004f34:	080167f8 	.word	0x080167f8
 8004f38:	10624dd3 	.word	0x10624dd3
 8004f3c:	48000800 	.word	0x48000800

08004f40 <Error_Handler>:
}




void Error_Handler(void){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004f46:	2300      	movs	r3, #0
 8004f48:	71fb      	strb	r3, [r7, #7]
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b1d      	cmp	r3, #29
 8004f4e:	d80e      	bhi.n	8004f6e <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f54:	4808      	ldr	r0, [pc, #32]	; (8004f78 <Error_Handler+0x38>)
 8004f56:	f003 ff49 	bl	8008dec <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8004f5a:	4808      	ldr	r0, [pc, #32]	; (8004f7c <Error_Handler+0x3c>)
 8004f5c:	f00f f9ae 	bl	80142bc <puts>
		HAL_Delay(100);
 8004f60:	2064      	movs	r0, #100	; 0x64
 8004f62:	f001 f843 	bl	8005fec <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	71fb      	strb	r3, [r7, #7]
 8004f6c:	e7ed      	b.n	8004f4a <Error_Handler+0xa>
	}

}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	48000800 	.word	0x48000800
 8004f7c:	08016850 	.word	0x08016850

08004f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_MspInit+0x44>)
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <HAL_MspInit+0x44>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6613      	str	r3, [r2, #96]	; 0x60
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_MspInit+0x44>)
 8004f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_MspInit+0x44>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <HAL_MspInit+0x44>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_MspInit+0x44>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0a2      	sub	sp, #136	; 0x88
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fe0:	f107 0320 	add.w	r3, r7, #32
 8004fe4:	2254      	movs	r2, #84	; 0x54
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f00e fc6f 	bl	80138cc <memset>
  if(hadc->Instance==ADC1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff6:	f040 8086 	bne.w	8005106 <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005000:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005004:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005006:	f107 0320 	add.w	r3, r7, #32
 800500a:	4618      	mov	r0, r3
 800500c:	f006 fd60 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005016:	f7ff ff93 	bl	8004f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800501a:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a8c      	ldr	r2, [pc, #560]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 8005022:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005024:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10b      	bne.n	8005044 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800502c:	4b8a      	ldr	r3, [pc, #552]	; (8005258 <HAL_ADC_MspInit+0x290>)
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	4a89      	ldr	r2, [pc, #548]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005038:	4b87      	ldr	r3, [pc, #540]	; (8005258 <HAL_ADC_MspInit+0x290>)
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005044:	4b84      	ldr	r3, [pc, #528]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_ADC_MspInit+0x290>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505c:	4b7e      	ldr	r3, [pc, #504]	; (8005258 <HAL_ADC_MspInit+0x290>)
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	4a7d      	ldr	r2, [pc, #500]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005068:	4b7b      	ldr	r3, [pc, #492]	; (8005258 <HAL_ADC_MspInit+0x290>)
 800506a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8005074:	2301      	movs	r3, #1
 8005076:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005078:	2303      	movs	r3, #3
 800507a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8005080:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005084:	4619      	mov	r1, r3
 8005086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508a:	f003 fd15 	bl	8008ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 800508e:	f641 0302 	movw	r3, #6146	; 0x1802
 8005092:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005094:	2303      	movs	r3, #3
 8005096:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	2300      	movs	r3, #0
 800509a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80050a0:	4619      	mov	r1, r3
 80050a2:	486e      	ldr	r0, [pc, #440]	; (800525c <HAL_ADC_MspInit+0x294>)
 80050a4:	f003 fd08 	bl	8008ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80050a8:	4b6d      	ldr	r3, [pc, #436]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050aa:	4a6e      	ldr	r2, [pc, #440]	; (8005264 <HAL_ADC_MspInit+0x29c>)
 80050ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80050ae:	4b6c      	ldr	r3, [pc, #432]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050b0:	2205      	movs	r2, #5
 80050b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ba:	4b69      	ldr	r3, [pc, #420]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050bc:	2200      	movs	r2, #0
 80050be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050c0:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050c6:	4b66      	ldr	r3, [pc, #408]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050ce:	4b64      	ldr	r3, [pc, #400]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80050d6:	4b62      	ldr	r3, [pc, #392]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050d8:	2200      	movs	r2, #0
 80050da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80050dc:	4b60      	ldr	r3, [pc, #384]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050de:	2200      	movs	r2, #0
 80050e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050e2:	485f      	ldr	r0, [pc, #380]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050e4:	f003 f9b6 	bl	8008454 <HAL_DMA_Init>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80050ee:	f7ff ff27 	bl	8004f40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a5a      	ldr	r2, [pc, #360]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
 80050f8:	4a59      	ldr	r2, [pc, #356]	; (8005260 <HAL_ADC_MspInit+0x298>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 80050fe:	485a      	ldr	r0, [pc, #360]	; (8005268 <HAL_ADC_MspInit+0x2a0>)
 8005100:	f00f f8dc 	bl	80142bc <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8005104:	e0a1      	b.n	800524a <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a58      	ldr	r2, [pc, #352]	; (800526c <HAL_ADC_MspInit+0x2a4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d150      	bne.n	80051b2 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005114:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005116:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800511a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800511c:	f107 0320 	add.w	r3, r7, #32
 8005120:	4618      	mov	r0, r3
 8005122:	f006 fcd5 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 800512c:	f7ff ff08 	bl	8004f40 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005130:	4b48      	ldr	r3, [pc, #288]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a47      	ldr	r2, [pc, #284]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 8005138:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800513a:	4b46      	ldr	r3, [pc, #280]	; (8005254 <HAL_ADC_MspInit+0x28c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10b      	bne.n	800515a <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005142:	4b45      	ldr	r3, [pc, #276]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	4a44      	ldr	r2, [pc, #272]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800514c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800514e:	4b42      	ldr	r3, [pc, #264]	; (8005258 <HAL_ADC_MspInit+0x290>)
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 800515c:	4a45      	ldr	r2, [pc, #276]	; (8005274 <HAL_ADC_MspInit+0x2ac>)
 800515e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005160:	4b43      	ldr	r3, [pc, #268]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005162:	2224      	movs	r2, #36	; 0x24
 8005164:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005166:	4b42      	ldr	r3, [pc, #264]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800516c:	4b40      	ldr	r3, [pc, #256]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 800516e:	2200      	movs	r2, #0
 8005170:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005172:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005178:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 800517a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800517e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005186:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005188:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 800518a:	2200      	movs	r2, #0
 800518c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005190:	2200      	movs	r2, #0
 8005192:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005194:	4836      	ldr	r0, [pc, #216]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 8005196:	f003 f95d 	bl	8008454 <HAL_DMA_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80051a0:	f7ff fece 	bl	8004f40 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a32      	ldr	r2, [pc, #200]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
 80051aa:	4a31      	ldr	r2, [pc, #196]	; (8005270 <HAL_ADC_MspInit+0x2a8>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6293      	str	r3, [r2, #40]	; 0x28
}
 80051b0:	e04b      	b.n	800524a <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC5)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_ADC_MspInit+0x2b0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d146      	bne.n	800524a <HAL_ADC_MspInit+0x282>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80051bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80051c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051c8:	f107 0320 	add.w	r3, r7, #32
 80051cc:	4618      	mov	r0, r3
 80051ce:	f006 fc7f 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_ADC_MspInit+0x214>
      Error_Handler();
 80051d8:	f7ff feb2 	bl	8004f40 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <HAL_ADC_MspInit+0x290>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_ADC_MspInit+0x290>)
 80051e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_ADC_MspInit+0x290>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 80051f6:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_ADC_MspInit+0x2b8>)
 80051f8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 80051fc:	2227      	movs	r2, #39	; 0x27
 80051fe:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005202:	2200      	movs	r2, #0
 8005204:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005208:	2200      	movs	r2, #0
 800520a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005218:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 800521c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005220:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005224:	2200      	movs	r2, #0
 8005226:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 800522a:	2200      	movs	r2, #0
 800522c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800522e:	4813      	ldr	r0, [pc, #76]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005230:	f003 f910 	bl	8008454 <HAL_DMA_Init>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800523a:	f7ff fe81 	bl	8004f40 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a0e      	ldr	r2, [pc, #56]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_ADC_MspInit+0x2b4>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800524a:	bf00      	nop
 800524c:	3788      	adds	r7, #136	; 0x88
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000a4c 	.word	0x20000a4c
 8005258:	40021000 	.word	0x40021000
 800525c:	48000400 	.word	0x48000400
 8005260:	2000086c 	.word	0x2000086c
 8005264:	4002001c 	.word	0x4002001c
 8005268:	08016874 	.word	0x08016874
 800526c:	50000100 	.word	0x50000100
 8005270:	200008cc 	.word	0x200008cc
 8005274:	40020030 	.word	0x40020030
 8005278:	50000600 	.word	0x50000600
 800527c:	2000092c 	.word	0x2000092c
 8005280:	40020044 	.word	0x40020044

08005284 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 031c 	add.w	r3, r7, #28
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <HAL_COMP_MspInit+0x114>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d119      	bne.n	80052da <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	4a3c      	ldr	r2, [pc, #240]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052b2:	4b3a      	ldr	r3, [pc, #232]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80052be:	2380      	movs	r3, #128	; 0x80
 80052c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052c2:	2303      	movs	r3, #3
 80052c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ca:	f107 031c 	add.w	r3, r7, #28
 80052ce:	4619      	mov	r1, r3
 80052d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d4:	f003 fbf0 	bl	8008ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80052d8:	e05a      	b.n	8005390 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <HAL_COMP_MspInit+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d118      	bne.n	8005316 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e4:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e8:	4a2c      	ldr	r2, [pc, #176]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052f0:	4b2a      	ldr	r3, [pc, #168]	; (800539c <HAL_COMP_MspInit+0x118>)
 80052f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005300:	2303      	movs	r3, #3
 8005302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	4619      	mov	r1, r3
 800530e:	4825      	ldr	r0, [pc, #148]	; (80053a4 <HAL_COMP_MspInit+0x120>)
 8005310:	f003 fbd2 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005314:	e03c      	b.n	8005390 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_COMP_MspInit+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d119      	bne.n	8005354 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_COMP_MspInit+0x118>)
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_COMP_MspInit+0x118>)
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <HAL_COMP_MspInit+0x118>)
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8005338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800533c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533e:	2303      	movs	r3, #3
 8005340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8005346:	f107 031c 	add.w	r3, r7, #28
 800534a:	4619      	mov	r1, r3
 800534c:	4815      	ldr	r0, [pc, #84]	; (80053a4 <HAL_COMP_MspInit+0x120>)
 800534e:	f003 fbb3 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005352:	e01d      	b.n	8005390 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a14      	ldr	r2, [pc, #80]	; (80053ac <HAL_COMP_MspInit+0x128>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d118      	bne.n	8005390 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_COMP_MspInit+0x118>)
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	4a0e      	ldr	r2, [pc, #56]	; (800539c <HAL_COMP_MspInit+0x118>)
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_COMP_MspInit+0x118>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8005376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800537a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800537c:	2303      	movs	r3, #3
 800537e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8005384:	f107 031c 	add.w	r3, r7, #28
 8005388:	4619      	mov	r1, r3
 800538a:	4806      	ldr	r0, [pc, #24]	; (80053a4 <HAL_COMP_MspInit+0x120>)
 800538c:	f003 fb94 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005390:	bf00      	nop
 8005392:	3730      	adds	r7, #48	; 0x30
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40010204 	.word	0x40010204
 800539c:	40021000 	.word	0x40021000
 80053a0:	4001020c 	.word	0x4001020c
 80053a4:	48000400 	.word	0x48000400
 80053a8:	40010210 	.word	0x40010210
 80053ac:	40010218 	.word	0x40010218

080053b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <HAL_DAC_MspInit+0xa4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10c      	bne.n	80053dc <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80053c2:	4b25      	ldr	r3, [pc, #148]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	4a24      	ldr	r2, [pc, #144]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80053da:	e034      	b.n	8005446 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1e      	ldr	r2, [pc, #120]	; (800545c <HAL_DAC_MspInit+0xac>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053f2:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693b      	ldr	r3, [r7, #16]
}
 80053fe:	e022      	b.n	8005446 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_DAC_MspInit+0xb0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	e010      	b.n	8005446 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <HAL_DAC_MspInit+0xb4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10b      	bne.n	8005446 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	4a09      	ldr	r2, [pc, #36]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 8005434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <HAL_DAC_MspInit+0xa8>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	50000800 	.word	0x50000800
 8005458:	40021000 	.word	0x40021000
 800545c:	50000c00 	.word	0x50000c00
 8005460:	50001000 	.word	0x50001000
 8005464:	50001400 	.word	0x50001400

08005468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b09e      	sub	sp, #120	; 0x78
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005480:	f107 0310 	add.w	r3, r7, #16
 8005484:	2254      	movs	r2, #84	; 0x54
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f00e fa1f 	bl	80138cc <memset>
  if(hi2c->Instance==I2C2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_I2C_MspInit+0xa8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d137      	bne.n	8005508 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800549c:	2300      	movs	r3, #0
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f006 fb13 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80054b0:	f7ff fd46 	bl	8004f40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b4:	4b17      	ldr	r3, [pc, #92]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b8:	4a16      	ldr	r2, [pc, #88]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80054cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054d0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054d2:	2312      	movs	r3, #18
 80054d4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054da:	2300      	movs	r3, #0
 80054dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80054de:	2304      	movs	r3, #4
 80054e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054e6:	4619      	mov	r1, r3
 80054e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ec:	f003 fae4 	bl	8008ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	4a07      	ldr	r2, [pc, #28]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054fa:	6593      	str	r3, [r2, #88]	; 0x58
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_I2C_MspInit+0xac>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005508:	bf00      	nop
 800550a:	3778      	adds	r7, #120	; 0x78
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40005800 	.word	0x40005800
 8005514:	40021000 	.word	0x40021000

08005518 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005520:	f107 031c 	add.w	r3, r7, #28
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a4d      	ldr	r2, [pc, #308]	; (800566c <HAL_OPAMP_MspInit+0x154>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d119      	bne.n	800556e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800553a:	4b4d      	ldr	r3, [pc, #308]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	4a4c      	ldr	r2, [pc, #304]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005546:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 8005552:	230a      	movs	r3, #10
 8005554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005556:	2303      	movs	r3, #3
 8005558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555e:	f107 031c 	add.w	r3, r7, #28
 8005562:	4619      	mov	r1, r3
 8005564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005568:	f003 faa6 	bl	8008ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 800556c:	e079      	b.n	8005662 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a40      	ldr	r2, [pc, #256]	; (8005674 <HAL_OPAMP_MspInit+0x15c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d119      	bne.n	80055ac <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005578:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 800557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557c:	4a3c      	ldr	r2, [pc, #240]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005584:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005590:	23a0      	movs	r3, #160	; 0xa0
 8005592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005594:	2303      	movs	r3, #3
 8005596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005598:	2300      	movs	r3, #0
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055a6:	f003 fa87 	bl	8008ab8 <HAL_GPIO_Init>
}
 80055aa:	e05a      	b.n	8005662 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a31      	ldr	r2, [pc, #196]	; (8005678 <HAL_OPAMP_MspInit+0x160>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d118      	bne.n	80055e8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055c2:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 80055ce:	2305      	movs	r3, #5
 80055d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055d2:	2303      	movs	r3, #3
 80055d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055da:	f107 031c 	add.w	r3, r7, #28
 80055de:	4619      	mov	r1, r3
 80055e0:	4826      	ldr	r0, [pc, #152]	; (800567c <HAL_OPAMP_MspInit+0x164>)
 80055e2:	f003 fa69 	bl	8008ab8 <HAL_GPIO_Init>
}
 80055e6:	e03c      	b.n	8005662 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_OPAMP_MspInit+0x168>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d119      	bne.n	8005626 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f2:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055fe:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 800560a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800560e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005610:	2303      	movs	r3, #3
 8005612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005618:	f107 031c 	add.w	r3, r7, #28
 800561c:	4619      	mov	r1, r3
 800561e:	4817      	ldr	r0, [pc, #92]	; (800567c <HAL_OPAMP_MspInit+0x164>)
 8005620:	f003 fa4a 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005624:	e01d      	b.n	8005662 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_OPAMP_MspInit+0x16c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d118      	bne.n	8005662 <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 8005636:	f043 0302 	orr.w	r3, r3, #2
 800563a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <HAL_OPAMP_MspInit+0x158>)
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8005648:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800564c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800564e:	2303      	movs	r3, #3
 8005650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005656:	f107 031c 	add.w	r3, r7, #28
 800565a:	4619      	mov	r1, r3
 800565c:	4807      	ldr	r0, [pc, #28]	; (800567c <HAL_OPAMP_MspInit+0x164>)
 800565e:	f003 fa2b 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005662:	bf00      	nop
 8005664:	3730      	adds	r7, #48	; 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40010300 	.word	0x40010300
 8005670:	40021000 	.word	0x40021000
 8005674:	40010304 	.word	0x40010304
 8005678:	40010308 	.word	0x40010308
 800567c:	48000400 	.word	0x48000400
 8005680:	4001030c 	.word	0x4001030c
 8005684:	40010310 	.word	0x40010310

08005688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005688:	b480      	push	{r7}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a37      	ldr	r2, [pc, #220]	; (8005774 <HAL_TIM_Base_MspInit+0xec>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10c      	bne.n	80056b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 800569c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569e:	4a36      	ldr	r2, [pc, #216]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056a4:	6613      	str	r3, [r2, #96]	; 0x60
 80056a6:	4b34      	ldr	r3, [pc, #208]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80056b2:	e058      	b.n	8005766 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056bc:	d10c      	bne.n	80056d8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ca:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	69bb      	ldr	r3, [r7, #24]
}
 80056d6:	e046      	b.n	8005766 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a27      	ldr	r2, [pc, #156]	; (800577c <HAL_TIM_Base_MspInit+0xf4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10c      	bne.n	80056fc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80056e2:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	4a24      	ldr	r2, [pc, #144]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6593      	str	r3, [r2, #88]	; 0x58
 80056ee:	4b22      	ldr	r3, [pc, #136]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	697b      	ldr	r3, [r7, #20]
}
 80056fa:	e034      	b.n	8005766 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HAL_TIM_Base_MspInit+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10c      	bne.n	8005720 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 800570c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005710:	6613      	str	r3, [r2, #96]	; 0x60
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	693b      	ldr	r3, [r7, #16]
}
 800571e:	e022      	b.n	8005766 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a17      	ldr	r2, [pc, #92]	; (8005784 <HAL_TIM_Base_MspInit+0xfc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10c      	bne.n	8005744 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 800572c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005734:	6613      	str	r3, [r2, #96]	; 0x60
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	e010      	b.n	8005766 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <HAL_TIM_Base_MspInit+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10b      	bne.n	8005766 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 8005754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005758:	6613      	str	r3, [r2, #96]	; 0x60
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <HAL_TIM_Base_MspInit+0xf0>)
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
}
 8005766:	bf00      	nop
 8005768:	3724      	adds	r7, #36	; 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40021000 	.word	0x40021000
 800577c:	40000800 	.word	0x40000800
 8005780:	40013400 	.word	0x40013400
 8005784:	40014400 	.word	0x40014400
 8005788:	40015000 	.word	0x40015000

0800578c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <HAL_TIM_PWM_MspInit+0x38>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d10b      	bne.n	80057b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80057a4:	f043 0302 	orr.w	r3, r3, #2
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40021000 	.word	0x40021000

080057cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08e      	sub	sp, #56	; 0x38
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_TIM_MspPostInit+0x1b4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d11c      	bne.n	8005828 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057ee:	4b65      	ldr	r3, [pc, #404]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	4a64      	ldr	r2, [pc, #400]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80057f4:	f043 0320 	orr.w	r3, r3, #32
 80057f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057fa:	4b62      	ldr	r3, [pc, #392]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8005806:	2301      	movs	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580a:	2302      	movs	r3, #2
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005812:	2300      	movs	r3, #0
 8005814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005816:	2306      	movs	r3, #6
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 800581a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581e:	4619      	mov	r1, r3
 8005820:	4859      	ldr	r0, [pc, #356]	; (8005988 <HAL_TIM_MspPostInit+0x1bc>)
 8005822:	f003 f949 	bl	8008ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005826:	e0a6      	b.n	8005976 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a57      	ldr	r2, [pc, #348]	; (800598c <HAL_TIM_MspPostInit+0x1c0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d11c      	bne.n	800586c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005832:	4b54      	ldr	r3, [pc, #336]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	4a53      	ldr	r2, [pc, #332]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800583e:	4b51      	ldr	r3, [pc, #324]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 800584a:	2330      	movs	r3, #48	; 0x30
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005852:	2300      	movs	r3, #0
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005856:	2300      	movs	r3, #0
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800585a:	2302      	movs	r3, #2
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005862:	4619      	mov	r1, r3
 8005864:	484a      	ldr	r0, [pc, #296]	; (8005990 <HAL_TIM_MspPostInit+0x1c4>)
 8005866:	f003 f927 	bl	8008ab8 <HAL_GPIO_Init>
}
 800586a:	e084      	b.n	8005976 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a48      	ldr	r2, [pc, #288]	; (8005994 <HAL_TIM_MspPostInit+0x1c8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d11d      	bne.n	80058b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	4a42      	ldr	r2, [pc, #264]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 800587c:	f043 0302 	orr.w	r3, r3, #2
 8005880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005882:	4b40      	ldr	r3, [pc, #256]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 800588e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005894:	2302      	movs	r3, #2
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005898:	2300      	movs	r3, #0
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800589c:	2300      	movs	r3, #0
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80058a0:	2302      	movs	r3, #2
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a8:	4619      	mov	r1, r3
 80058aa:	4839      	ldr	r0, [pc, #228]	; (8005990 <HAL_TIM_MspPostInit+0x1c4>)
 80058ac:	f003 f904 	bl	8008ab8 <HAL_GPIO_Init>
}
 80058b0:	e061      	b.n	8005976 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a38      	ldr	r2, [pc, #224]	; (8005998 <HAL_TIM_MspPostInit+0x1cc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d13a      	bne.n	8005932 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058bc:	4b31      	ldr	r3, [pc, #196]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058c2:	f043 0304 	orr.w	r3, r3, #4
 80058c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058c8:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058da:	f043 0302 	orr.w	r3, r3, #2
 80058de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 80058e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 80058ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f2:	2302      	movs	r3, #2
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fa:	2300      	movs	r3, #0
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 80058fe:	2306      	movs	r3, #6
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8005902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005906:	4619      	mov	r1, r3
 8005908:	4824      	ldr	r0, [pc, #144]	; (800599c <HAL_TIM_MspPostInit+0x1d0>)
 800590a:	f003 f8d5 	bl	8008ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 800590e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005914:	2302      	movs	r3, #2
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591c:	2300      	movs	r3, #0
 800591e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8005920:	230a      	movs	r3, #10
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8005924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005928:	4619      	mov	r1, r3
 800592a:	4819      	ldr	r0, [pc, #100]	; (8005990 <HAL_TIM_MspPostInit+0x1c4>)
 800592c:	f003 f8c4 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005930:	e021      	b.n	8005976 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <HAL_TIM_MspPostInit+0x1d4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d11c      	bne.n	8005976 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 800593e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005940:	4a10      	ldr	r2, [pc, #64]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005948:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <HAL_TIM_MspPostInit+0x1b8>)
 800594a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005958:	2302      	movs	r3, #2
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005960:	2300      	movs	r3, #0
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8005964:	2301      	movs	r3, #1
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8005968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596c:	4619      	mov	r1, r3
 800596e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005972:	f003 f8a1 	bl	8008ab8 <HAL_GPIO_Init>
}
 8005976:	bf00      	nop
 8005978:	3738      	adds	r7, #56	; 0x38
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40021000 	.word	0x40021000
 8005988:	48001400 	.word	0x48001400
 800598c:	40000400 	.word	0x40000400
 8005990:	48000400 	.word	0x48000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40013400 	.word	0x40013400
 800599c:	48000800 	.word	0x48000800
 80059a0:	40014400 	.word	0x40014400

080059a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b0a2      	sub	sp, #136	; 0x88
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059bc:	f107 0320 	add.w	r3, r7, #32
 80059c0:	2254      	movs	r2, #84	; 0x54
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f00d ff81 	bl	80138cc <memset>
  if(huart->Instance==USART1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a81      	ldr	r2, [pc, #516]	; (8005bd4 <HAL_UART_MspInit+0x230>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	f040 808a 	bne.w	8005aea <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059de:	f107 0320 	add.w	r3, r7, #32
 80059e2:	4618      	mov	r0, r3
 80059e4:	f006 f874 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80059ee:	f7ff faa7 	bl	8004f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059f2:	4b79      	ldr	r3, [pc, #484]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	4a78      	ldr	r2, [pc, #480]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 80059f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059fc:	6613      	str	r3, [r2, #96]	; 0x60
 80059fe:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0a:	4b73      	ldr	r3, [pc, #460]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0e:	4a72      	ldr	r2, [pc, #456]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a16:	4b70      	ldr	r3, [pc, #448]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	4a6c      	ldr	r2, [pc, #432]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a2e:	4b6a      	ldr	r3, [pc, #424]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a40:	2302      	movs	r3, #2
 8005a42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a4e:	2307      	movs	r3, #7
 8005a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a5e:	f003 f82b 	bl	8008ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a66:	2302      	movs	r3, #2
 8005a68:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a74:	2307      	movs	r3, #7
 8005a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4856      	ldr	r0, [pc, #344]	; (8005bdc <HAL_UART_MspInit+0x238>)
 8005a82:	f003 f819 	bl	8008ab8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005a86:	4b56      	ldr	r3, [pc, #344]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005a88:	4a56      	ldr	r2, [pc, #344]	; (8005be4 <HAL_UART_MspInit+0x240>)
 8005a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005a8c:	4b54      	ldr	r3, [pc, #336]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005a8e:	2218      	movs	r2, #24
 8005a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a92:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a98:	4b51      	ldr	r3, [pc, #324]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a9e:	4b50      	ldr	r3, [pc, #320]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aa4:	4b4e      	ldr	r3, [pc, #312]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aaa:	4b4d      	ldr	r3, [pc, #308]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005ab0:	4b4b      	ldr	r3, [pc, #300]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ab6:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005abc:	4848      	ldr	r0, [pc, #288]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005abe:	f002 fcc9 	bl	8008454 <HAL_DMA_Init>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005ac8:	f7ff fa3a 	bl	8004f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a44      	ldr	r2, [pc, #272]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ad2:	4a43      	ldr	r2, [pc, #268]	; (8005be0 <HAL_UART_MspInit+0x23c>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2100      	movs	r1, #0
 8005adc:	2025      	movs	r0, #37	; 0x25
 8005ade:	f002 faba 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ae2:	2025      	movs	r0, #37	; 0x25
 8005ae4:	f002 fad1 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ae8:	e06f      	b.n	8005bca <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3e      	ldr	r2, [pc, #248]	; (8005be8 <HAL_UART_MspInit+0x244>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d16a      	bne.n	8005bca <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005af4:	2302      	movs	r3, #2
 8005af6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005afc:	f107 0320 	add.w	r3, r7, #32
 8005b00:	4618      	mov	r0, r3
 8005b02:	f005 ffe5 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8005b0c:	f7ff fa18 	bl	8004f40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b10:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b1c:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b28:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_UART_MspInit+0x234>)
 8005b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8005b40:	f248 0304 	movw	r3, #32772	; 0x8004
 8005b44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b46:	2302      	movs	r3, #2
 8005b48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b54:	2307      	movs	r3, #7
 8005b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b64:	f002 ffa8 	bl	8008ab8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8005b68:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <HAL_UART_MspInit+0x24c>)
 8005b6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b70:	221a      	movs	r2, #26
 8005b72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b8c:	4b17      	ldr	r3, [pc, #92]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005b92:	4b16      	ldr	r3, [pc, #88]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b98:	4b14      	ldr	r3, [pc, #80]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005b9e:	4813      	ldr	r0, [pc, #76]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005ba0:	f002 fc58 	bl	8008454 <HAL_DMA_Init>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8005baa:	f7ff f9c9 	bl	8004f40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005bb2:	67da      	str	r2, [r3, #124]	; 0x7c
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <HAL_UART_MspInit+0x248>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2026      	movs	r0, #38	; 0x26
 8005bc0:	f002 fa49 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005bc4:	2026      	movs	r0, #38	; 0x26
 8005bc6:	f002 fa60 	bl	800808a <HAL_NVIC_EnableIRQ>
}
 8005bca:	bf00      	nop
 8005bcc:	3788      	adds	r7, #136	; 0x88
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40013800 	.word	0x40013800
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	48000400 	.word	0x48000400
 8005be0:	2000098c 	.word	0x2000098c
 8005be4:	40020008 	.word	0x40020008
 8005be8:	40004400 	.word	0x40004400
 8005bec:	200009ec 	.word	0x200009ec
 8005bf0:	40020408 	.word	0x40020408

08005bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bf8:	e7fe      	b.n	8005bf8 <NMI_Handler+0x4>

08005bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bfe:	e7fe      	b.n	8005bfe <HardFault_Handler+0x4>

08005c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c04:	e7fe      	b.n	8005c04 <MemManage_Handler+0x4>

08005c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c0a:	e7fe      	b.n	8005c0a <BusFault_Handler+0x4>

08005c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c10:	e7fe      	b.n	8005c10 <UsageFault_Handler+0x4>

08005c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c40:	f000 f9b6 	bl	8005fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <DMA1_Channel1_IRQHandler+0x10>)
 8005c4e:	f002 fde4 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	2000098c 	.word	0x2000098c

08005c5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005c60:	4802      	ldr	r0, [pc, #8]	; (8005c6c <DMA1_Channel2_IRQHandler+0x10>)
 8005c62:	f002 fdda 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000086c 	.word	0x2000086c

08005c70 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005c74:	4802      	ldr	r0, [pc, #8]	; (8005c80 <DMA1_Channel3_IRQHandler+0x10>)
 8005c76:	f002 fdd0 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200008cc 	.word	0x200008cc

08005c84 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005c88:	4802      	ldr	r0, [pc, #8]	; (8005c94 <DMA1_Channel4_IRQHandler+0x10>)
 8005c8a:	f002 fdc6 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	2000092c 	.word	0x2000092c

08005c98 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005c9c:	4802      	ldr	r0, [pc, #8]	; (8005ca8 <USB_LP_IRQHandler+0x10>)
 8005c9e:	f003 fd12 	bl	80096c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20001f70 	.word	0x20001f70

08005cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cb0:	4802      	ldr	r0, [pc, #8]	; (8005cbc <USART1_IRQHandler+0x10>)
 8005cb2:	f007 fd45 	bl	800d740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	2000074c 	.word	0x2000074c

08005cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005cc4:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <USART2_IRQHandler+0x10>)
 8005cc6:	f007 fd3b 	bl	800d740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200007dc 	.word	0x200007dc

08005cd4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005cd8:	4802      	ldr	r0, [pc, #8]	; (8005ce4 <DMA2_Channel1_IRQHandler+0x10>)
 8005cda:	f002 fd9e 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200009ec 	.word	0x200009ec

08005ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return 1;
 8005cec:	2301      	movs	r3, #1
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <_kill>:

int _kill(int pid, int sig)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005d02:	f00d fdab 	bl	801385c <__errno>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2216      	movs	r2, #22
 8005d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_exit>:

void _exit (int status)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005d20:	f04f 31ff 	mov.w	r1, #4294967295
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ffe7 	bl	8005cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005d2a:	e7fe      	b.n	8005d2a <_exit+0x12>

08005d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e00a      	b.n	8005d54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005d3e:	f3af 8000 	nop.w
 8005d42:	4601      	mov	r1, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	60ba      	str	r2, [r7, #8]
 8005d4a:	b2ca      	uxtb	r2, r1
 8005d4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3301      	adds	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	dbf0      	blt.n	8005d3e <_read+0x12>
  }

  return len;
 8005d5c:	687b      	ldr	r3, [r7, #4]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <_write+0x18>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d115      	bne.n	8005daa <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	68b8      	ldr	r0, [r7, #8]
 8005d82:	f00d f8c9 	bl	8012f18 <CDC_Transmit_FS>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d0f6      	beq.n	8005d7e <_write+0x18>
		        if (result != USBD_OK)
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <_write+0x40>
		        {
		            errno = EIO;
 8005d96:	f00d fd61 	bl	801385c <__errno>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	601a      	str	r2, [r3, #0]
		            return -1;
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	e008      	b.n	8005db8 <_write+0x52>
		        }
		        return len;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	e006      	b.n	8005db8 <_write+0x52>
		    }
		    errno = EBADF;
 8005daa:	f00d fd57 	bl	801385c <__errno>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2209      	movs	r2, #9
 8005db2:	601a      	str	r2, [r3, #0]
		    return -1;
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_close>:

int _close(int file)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005de8:	605a      	str	r2, [r3, #4]
  return 0;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <_isatty>:

int _isatty(int file)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e00:	2301      	movs	r3, #1
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <_sbrk+0x5c>)
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <_sbrk+0x60>)
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <_sbrk+0x64>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e44:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <_sbrk+0x64>)
 8005e46:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <_sbrk+0x68>)
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e4a:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <_sbrk+0x64>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d207      	bcs.n	8005e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e58:	f00d fd00 	bl	801385c <__errno>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	220c      	movs	r2, #12
 8005e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e009      	b.n	8005e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <_sbrk+0x64>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <_sbrk+0x64>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	4a05      	ldr	r2, [pc, #20]	; (8005e8c <_sbrk+0x64>)
 8005e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20020000 	.word	0x20020000
 8005e88:	00000400 	.word	0x00000400
 8005e8c:	20000a50 	.word	0x20000a50
 8005e90:	20002498 	.word	0x20002498

08005e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <SystemInit+0x20>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <SystemInit+0x20>)
 8005ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005eba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ebc:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ebe:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ec0:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <LoopForever+0xe>)
  movs r3, #0
 8005ec2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ec4:	e002      	b.n	8005ecc <LoopCopyDataInit>

08005ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eca:	3304      	adds	r3, #4

08005ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed0:	d3f9      	bcc.n	8005ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed2:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ed4:	4c0b      	ldr	r4, [pc, #44]	; (8005f04 <LoopForever+0x16>)
  movs r3, #0
 8005ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ed8:	e001      	b.n	8005ede <LoopFillZerobss>

08005eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005edc:	3204      	adds	r2, #4

08005ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee0:	d3fb      	bcc.n	8005eda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ee2:	f7ff ffd7 	bl	8005e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ee6:	f00d fcbf 	bl	8013868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005eea:	f7fe ff9d 	bl	8004e28 <main>

08005eee <LoopForever>:

LoopForever:
    b LoopForever
 8005eee:	e7fe      	b.n	8005eee <LoopForever>
  ldr   r0, =_estack
 8005ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ef8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8005efc:	08016e04 	.word	0x08016e04
  ldr r2, =_sbss
 8005f00:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8005f04:	20002494 	.word	0x20002494

08005f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f08:	e7fe      	b.n	8005f08 <ADC1_2_IRQHandler>

08005f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f14:	2003      	movs	r0, #3
 8005f16:	f002 f893 	bl	8008040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f1a:	200f      	movs	r0, #15
 8005f1c:	f000 f80e 	bl	8005f3c <HAL_InitTick>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	71fb      	strb	r3, [r7, #7]
 8005f2a:	e001      	b.n	8005f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f2c:	f7ff f828 	bl	8004f80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f30:	79fb      	ldrb	r3, [r7, #7]

}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005f48:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <HAL_InitTick+0x68>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d022      	beq.n	8005f96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005f50:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_InitTick+0x6c>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <HAL_InitTick+0x68>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 f89e 	bl	80080a6 <HAL_SYSTICK_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d809      	bhi.n	8005f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f76:	2200      	movs	r2, #0
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7e:	f002 f86a 	bl	8008056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <HAL_InitTick+0x70>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e007      	b.n	8005f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
 8005f8e:	e004      	b.n	8005f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	e001      	b.n	8005f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000008 	.word	0x20000008
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	20000004 	.word	0x20000004

08005fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_IncTick+0x1c>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_IncTick+0x20>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <HAL_IncTick+0x1c>)
 8005fc0:	6013      	str	r3, [r2, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000a54 	.word	0x20000a54
 8005fd0:	20000008 	.word	0x20000008

08005fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <HAL_GetTick+0x14>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000a54 	.word	0x20000a54

08005fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ff4:	f7ff ffee 	bl	8005fd4 <HAL_GetTick>
 8005ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d004      	beq.n	8006010 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_Delay+0x40>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006010:	bf00      	nop
 8006012:	f7ff ffdf 	bl	8005fd4 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d8f7      	bhi.n	8006012 <HAL_Delay+0x26>
  {
  }
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000008 	.word	0x20000008

08006030 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3360      	adds	r3, #96	; 0x60
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <LL_ADC_SetOffset+0x44>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	03fff000 	.word	0x03fff000

080060e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3360      	adds	r3, #96	; 0x60
 80060ee:	461a      	mov	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3360      	adds	r3, #96	; 0x60
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	431a      	orrs	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3360      	adds	r3, #96	; 0x60
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	431a      	orrs	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3360      	adds	r3, #96	; 0x60
 8006188:	461a      	mov	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	431a      	orrs	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	615a      	str	r2, [r3, #20]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3330      	adds	r3, #48	; 0x30
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	4413      	add	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	211f      	movs	r1, #31
 8006226:	fa01 f303 	lsl.w	r3, r1, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	401a      	ands	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0e9b      	lsrs	r3, r3, #26
 8006232:	f003 011f 	and.w	r1, r3, #31
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	431a      	orrs	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006252:	b480      	push	{r7}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3314      	adds	r3, #20
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	0e5b      	lsrs	r3, r3, #25
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	4413      	add	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	0d1b      	lsrs	r3, r3, #20
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2107      	movs	r1, #7
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	401a      	ands	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	0d1b      	lsrs	r3, r3, #20
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	431a      	orrs	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d10a      	bne.n	80062d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80062d0:	e00a      	b.n	80062e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062de:	43db      	mvns	r3, r3
 80062e0:	401a      	ands	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	407f0000 	.word	0x407f0000

080062f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 031f 	and.w	r3, r3, #31
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6093      	str	r3, [r2, #8]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634c:	d101      	bne.n	8006352 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639c:	d101      	bne.n	80063a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063c4:	f043 0201 	orr.w	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <LL_ADC_IsEnabled+0x18>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <LL_ADC_IsEnabled+0x1a>
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d101      	bne.n	800643e <LL_ADC_IsDisableOngoing+0x18>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <LL_ADC_IsDisableOngoing+0x1a>
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800645c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006460:	f043 0204 	orr.w	r2, r3, #4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b04      	cmp	r3, #4
 8006486:	d101      	bne.n	800648c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d101      	bne.n	80064b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e1af      	b.n	800683a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fe fd6d 	bl	8004fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff ff19 	bl	8006338 <LL_ADC_IsDeepPowerDownEnabled>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff feff 	bl	8006314 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ff34 	bl	8006388 <LL_ADC_IsInternalRegulatorEnabled>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d115      	bne.n	8006552 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ff18 	bl	8006360 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006530:	4b9f      	ldr	r3, [pc, #636]	; (80067b0 <HAL_ADC_Init+0x2f0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	4a9f      	ldr	r2, [pc, #636]	; (80067b4 <HAL_ADC_Init+0x2f4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	3301      	adds	r3, #1
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006544:	e002      	b.n	800654c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3b01      	subs	r3, #1
 800654a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f9      	bne.n	8006546 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff ff16 	bl	8006388 <LL_ADC_IsInternalRegulatorEnabled>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	f043 0210 	orr.w	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff ff76 	bl	8006474 <LL_ADC_REG_IsConversionOngoing>
 8006588:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8148 	bne.w	8006828 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 8144 	bne.w	8006828 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80065a8:	f043 0202 	orr.w	r2, r3, #2
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff ff23 	bl	8006400 <LL_ADC_IsEnabled>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d141      	bne.n	8006644 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c8:	d004      	beq.n	80065d4 <HAL_ADC_Init+0x114>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a7a      	ldr	r2, [pc, #488]	; (80067b8 <HAL_ADC_Init+0x2f8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10f      	bne.n	80065f4 <HAL_ADC_Init+0x134>
 80065d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065d8:	f7ff ff12 	bl	8006400 <LL_ADC_IsEnabled>
 80065dc:	4604      	mov	r4, r0
 80065de:	4876      	ldr	r0, [pc, #472]	; (80067b8 <HAL_ADC_Init+0x2f8>)
 80065e0:	f7ff ff0e 	bl	8006400 <LL_ADC_IsEnabled>
 80065e4:	4603      	mov	r3, r0
 80065e6:	4323      	orrs	r3, r4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e012      	b.n	800661a <HAL_ADC_Init+0x15a>
 80065f4:	4871      	ldr	r0, [pc, #452]	; (80067bc <HAL_ADC_Init+0x2fc>)
 80065f6:	f7ff ff03 	bl	8006400 <LL_ADC_IsEnabled>
 80065fa:	4604      	mov	r4, r0
 80065fc:	4870      	ldr	r0, [pc, #448]	; (80067c0 <HAL_ADC_Init+0x300>)
 80065fe:	f7ff feff 	bl	8006400 <LL_ADC_IsEnabled>
 8006602:	4603      	mov	r3, r0
 8006604:	431c      	orrs	r4, r3
 8006606:	486f      	ldr	r0, [pc, #444]	; (80067c4 <HAL_ADC_Init+0x304>)
 8006608:	f7ff fefa 	bl	8006400 <LL_ADC_IsEnabled>
 800660c:	4603      	mov	r3, r0
 800660e:	4323      	orrs	r3, r4
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d012      	beq.n	8006644 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006626:	d004      	beq.n	8006632 <HAL_ADC_Init+0x172>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a62      	ldr	r2, [pc, #392]	; (80067b8 <HAL_ADC_Init+0x2f8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <HAL_ADC_Init+0x176>
 8006632:	4a65      	ldr	r2, [pc, #404]	; (80067c8 <HAL_ADC_Init+0x308>)
 8006634:	e000      	b.n	8006638 <HAL_ADC_Init+0x178>
 8006636:	4a65      	ldr	r2, [pc, #404]	; (80067cc <HAL_ADC_Init+0x30c>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7ff fcf6 	bl	8006030 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7f5b      	ldrb	r3, [r3, #29]
 8006648:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800664e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006654:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800665a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006662:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006664:	4313      	orrs	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800666e:	2b01      	cmp	r3, #1
 8006670:	d106      	bne.n	8006680 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	3b01      	subs	r3, #1
 8006678:	045b      	lsls	r3, r3, #17
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d009      	beq.n	800669c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <HAL_ADC_Init+0x310>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	69b9      	ldr	r1, [r7, #24]
 80066ac:	430b      	orrs	r3, r1
 80066ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fed2 	bl	8006474 <LL_ADC_REG_IsConversionOngoing>
 80066d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff fedf 	bl	800649a <LL_ADC_INJ_IsConversionOngoing>
 80066dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d17f      	bne.n	80067e4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d17c      	bne.n	80067e4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	f023 0302 	bic.w	r3, r3, #2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	69b9      	ldr	r1, [r7, #24]
 8006710:	430b      	orrs	r3, r1
 8006712:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800672a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006734:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6911      	ldr	r1, [r2, #16]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	430b      	orrs	r3, r1
 8006746:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800674a:	e013      	b.n	8006774 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800675a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800676c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006770:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677a:	2b01      	cmp	r3, #1
 800677c:	d12a      	bne.n	80067d4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006794:	4311      	orrs	r1, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800679a:	4311      	orrs	r1, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067a0:	430a      	orrs	r2, r1
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0201 	orr.w	r2, r2, #1
 80067ac:	611a      	str	r2, [r3, #16]
 80067ae:	e019      	b.n	80067e4 <HAL_ADC_Init+0x324>
 80067b0:	20000000 	.word	0x20000000
 80067b4:	053e2d63 	.word	0x053e2d63
 80067b8:	50000100 	.word	0x50000100
 80067bc:	50000400 	.word	0x50000400
 80067c0:	50000500 	.word	0x50000500
 80067c4:	50000600 	.word	0x50000600
 80067c8:	50000300 	.word	0x50000300
 80067cc:	50000700 	.word	0x50000700
 80067d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10c      	bne.n	8006806 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	f023 010f 	bic.w	r1, r3, #15
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
 8006804:	e007      	b.n	8006816 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 020f 	bic.w	r2, r2, #15
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	65da      	str	r2, [r3, #92]	; 0x5c
 8006826:	e007      	b.n	8006838 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682c:	f043 0210 	orr.w	r2, r3, #16
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006838:	7ffb      	ldrb	r3, [r7, #31]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3724      	adds	r7, #36	; 0x24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd90      	pop	{r4, r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006858:	d004      	beq.n	8006864 <HAL_ADC_Start_DMA+0x20>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a5a      	ldr	r2, [pc, #360]	; (80069c8 <HAL_ADC_Start_DMA+0x184>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <HAL_ADC_Start_DMA+0x24>
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_ADC_Start_DMA+0x188>)
 8006866:	e000      	b.n	800686a <HAL_ADC_Start_DMA+0x26>
 8006868:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <HAL_ADC_Start_DMA+0x18c>)
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fd44 	bl	80062f8 <LL_ADC_GetMultimode>
 8006870:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fdfc 	bl	8006474 <LL_ADC_REG_IsConversionOngoing>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 809b 	bne.w	80069ba <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_ADC_Start_DMA+0x4e>
 800688e:	2302      	movs	r3, #2
 8006890:	e096      	b.n	80069c0 <HAL_ADC_Start_DMA+0x17c>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4d      	ldr	r2, [pc, #308]	; (80069d4 <HAL_ADC_Start_DMA+0x190>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d008      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d002      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b09      	cmp	r3, #9
 80068b4:	d17a      	bne.n	80069ac <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fcf6 	bl	80072a8 <ADC_Enable>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d16d      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a3a      	ldr	r2, [pc, #232]	; (80069c8 <HAL_ADC_Start_DMA+0x184>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_ADC_Start_DMA+0xb4>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <HAL_ADC_Start_DMA+0x194>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d002      	beq.n	80068f4 <HAL_ADC_Start_DMA+0xb0>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	e003      	b.n	80068fc <HAL_ADC_Start_DMA+0xb8>
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <HAL_ADC_Start_DMA+0x198>)
 80068f6:	e001      	b.n	80068fc <HAL_ADC_Start_DMA+0xb8>
 80068f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4293      	cmp	r3, r2
 8006902:	d002      	beq.n	800690a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d006      	beq.n	8006930 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	f023 0206 	bic.w	r2, r3, #6
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	661a      	str	r2, [r3, #96]	; 0x60
 800692e:	e002      	b.n	8006936 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <HAL_ADC_Start_DMA+0x19c>)
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	4a28      	ldr	r2, [pc, #160]	; (80069e4 <HAL_ADC_Start_DMA+0x1a0>)
 8006944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	4a27      	ldr	r2, [pc, #156]	; (80069e8 <HAL_ADC_Start_DMA+0x1a4>)
 800694c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	221c      	movs	r2, #28
 8006954:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0210 	orr.w	r2, r2, #16
 800696c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0201 	orr.w	r2, r2, #1
 800697c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3340      	adds	r3, #64	; 0x40
 8006988:	4619      	mov	r1, r3
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f001 fe09 	bl	80085a4 <HAL_DMA_Start_IT>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fd56 	bl	800644c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80069a0:	e00d      	b.n	80069be <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80069aa:	e008      	b.n	80069be <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80069b8:	e001      	b.n	80069be <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	50000100 	.word	0x50000100
 80069cc:	50000300 	.word	0x50000300
 80069d0:	50000700 	.word	0x50000700
 80069d4:	50000600 	.word	0x50000600
 80069d8:	50000500 	.word	0x50000500
 80069dc:	50000400 	.word	0x50000400
 80069e0:	0800742b 	.word	0x0800742b
 80069e4:	08007503 	.word	0x08007503
 80069e8:	0800751f 	.word	0x0800751f

080069ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b0b6      	sub	sp, #216	; 0xd8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d102      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x24>
 8006a46:	2302      	movs	r3, #2
 8006a48:	f000 bc13 	b.w	8007272 <HAL_ADC_ConfigChannel+0x84a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fd0b 	bl	8006474 <LL_ADC_REG_IsConversionOngoing>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 83f3 	bne.w	800724c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7ff fbc1 	bl	80061fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fcf9 	bl	8006474 <LL_ADC_REG_IsConversionOngoing>
 8006a82:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fd05 	bl	800649a <LL_ADC_INJ_IsConversionOngoing>
 8006a90:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 81d9 	bne.w	8006e50 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 81d4 	bne.w	8006e50 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	4619      	mov	r1, r3
 8006abe:	f7ff fbc8 	bl	8006252 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fb6f 	bl	80061ae <LL_ADC_SetSamplingTimeCommonConfig>
 8006ad0:	e00e      	b.n	8006af0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7ff fbb7 	bl	8006252 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fb5f 	bl	80061ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	08db      	lsrs	r3, r3, #3
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d022      	beq.n	8006b58 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6919      	ldr	r1, [r3, #16]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b22:	f7ff fab9 	bl	8006098 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6919      	ldr	r1, [r3, #16]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7ff fb05 	bl	8006142 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6919      	ldr	r1, [r3, #16]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	7f1b      	ldrb	r3, [r3, #28]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d102      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x126>
 8006b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b4c:	e000      	b.n	8006b50 <HAL_ADC_ConfigChannel+0x128>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	461a      	mov	r2, r3
 8006b52:	f7ff fb11 	bl	8006178 <LL_ADC_SetOffsetSaturation>
 8006b56:	e17b      	b.n	8006e50 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fabe 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x15c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fab3 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	0e9b      	lsrs	r3, r3, #26
 8006b7e:	f003 021f 	and.w	r2, r3, #31
 8006b82:	e01e      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x19a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff faa8 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b9a:	fa93 f3a3 	rbit	r3, r3
 8006b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	e004      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bba:	fab3 f383 	clz	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <HAL_ADC_ConfigChannel+0x1b2>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	0e9b      	lsrs	r3, r3, #26
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	e018      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x1e4>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006be6:	fa93 f3a3 	rbit	r3, r3
 8006bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006bfe:	2320      	movs	r3, #32
 8006c00:	e004      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c06:	fab3 f383 	clz	r3, r3
 8006c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d106      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fa77 	bl	800610c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2101      	movs	r1, #1
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fa5b 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_ADC_ConfigChannel+0x222>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fa50 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006c40:	4603      	mov	r3, r0
 8006c42:	0e9b      	lsrs	r3, r3, #26
 8006c44:	f003 021f 	and.w	r2, r3, #31
 8006c48:	e01e      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x260>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fa45 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c60:	fa93 f3a3 	rbit	r3, r3
 8006c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006c78:	2320      	movs	r3, #32
 8006c7a:	e004      	b.n	8006c86 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c80:	fab3 f383 	clz	r3, r3
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <HAL_ADC_ConfigChannel+0x278>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	0e9b      	lsrs	r3, r3, #26
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	e018      	b.n	8006cd2 <HAL_ADC_ConfigChannel+0x2aa>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cac:	fa93 f3a3 	rbit	r3, r3
 8006cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	e004      	b.n	8006cd2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ccc:	fab3 f383 	clz	r3, r3
 8006cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d106      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fa14 	bl	800610c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff f9f8 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x2e8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2102      	movs	r1, #2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff f9ed 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006d06:	4603      	mov	r3, r0
 8006d08:	0e9b      	lsrs	r3, r3, #26
 8006d0a:	f003 021f 	and.w	r2, r3, #31
 8006d0e:	e01e      	b.n	8006d4e <HAL_ADC_ConfigChannel+0x326>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2102      	movs	r1, #2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff f9e2 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d26:	fa93 f3a3 	rbit	r3, r3
 8006d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006d3e:	2320      	movs	r3, #32
 8006d40:	e004      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d46:	fab3 f383 	clz	r3, r3
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <HAL_ADC_ConfigChannel+0x33e>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	0e9b      	lsrs	r3, r3, #26
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	e016      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x36c>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d72:	fa93 f3a3 	rbit	r3, r3
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006d86:	2320      	movs	r3, #32
 8006d88:	e004      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d8e:	fab3 f383 	clz	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d106      	bne.n	8006da6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2102      	movs	r1, #2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff f9b3 	bl	800610c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2103      	movs	r1, #3
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff f997 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <HAL_ADC_ConfigChannel+0x3aa>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2103      	movs	r1, #3
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff f98c 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	0e9b      	lsrs	r3, r3, #26
 8006dcc:	f003 021f 	and.w	r2, r3, #31
 8006dd0:	e017      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x3da>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2103      	movs	r1, #3
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff f981 	bl	80060e0 <LL_ADC_GetOffsetChannel>
 8006dde:	4603      	mov	r3, r0
 8006de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de4:	fa93 f3a3 	rbit	r3, r3
 8006de8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006df4:	2320      	movs	r3, #32
 8006df6:	e003      	b.n	8006e00 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfa:	fab3 f383 	clz	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_ADC_ConfigChannel+0x3f2>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	0e9b      	lsrs	r3, r3, #26
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	e011      	b.n	8006e3e <HAL_ADC_ConfigChannel+0x416>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e22:	fa93 f3a3 	rbit	r3, r3
 8006e26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006e32:	2320      	movs	r3, #32
 8006e34:	e003      	b.n	8006e3e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e38:	fab3 f383 	clz	r3, r3
 8006e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d106      	bne.n	8006e50 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	2103      	movs	r1, #3
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff f95e 	bl	800610c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fad3 	bl	8006400 <LL_ADC_IsEnabled>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 813d 	bne.w	80070dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7ff fa1a 	bl	80062a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4aa2      	ldr	r2, [pc, #648]	; (8007104 <HAL_ADC_ConfigChannel+0x6dc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	f040 812e 	bne.w	80070dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_ADC_ConfigChannel+0x480>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	0e9b      	lsrs	r3, r3, #26
 8006e96:	3301      	adds	r3, #1
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2b09      	cmp	r3, #9
 8006e9e:	bf94      	ite	ls
 8006ea0:	2301      	movls	r3, #1
 8006ea2:	2300      	movhi	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e019      	b.n	8006edc <HAL_ADC_ConfigChannel+0x4b4>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb0:	fa93 f3a3 	rbit	r3, r3
 8006eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	e003      	b.n	8006ecc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2b09      	cmp	r3, #9
 8006ed4:	bf94      	ite	ls
 8006ed6:	2301      	movls	r3, #1
 8006ed8:	2300      	movhi	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d079      	beq.n	8006fd4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d107      	bne.n	8006efc <HAL_ADC_ConfigChannel+0x4d4>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	0e9b      	lsrs	r3, r3, #26
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	069b      	lsls	r3, r3, #26
 8006ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006efa:	e015      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x500>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	fa93 f3a3 	rbit	r3, r3
 8006f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006f14:	2320      	movs	r3, #32
 8006f16:	e003      	b.n	8006f20 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1a:	fab3 f383 	clz	r3, r3
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	3301      	adds	r3, #1
 8006f22:	069b      	lsls	r3, r3, #26
 8006f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <HAL_ADC_ConfigChannel+0x520>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	0e9b      	lsrs	r3, r3, #26
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	2101      	movs	r1, #1
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	e017      	b.n	8006f78 <HAL_ADC_ConfigChannel+0x550>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f50:	fa93 f3a3 	rbit	r3, r3
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006f60:	2320      	movs	r3, #32
 8006f62:	e003      	b.n	8006f6c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f66:	fab3 f383 	clz	r3, r3
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2101      	movs	r1, #1
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	ea42 0103 	orr.w	r1, r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x576>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	0e9b      	lsrs	r3, r3, #26
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f003 021f 	and.w	r2, r3, #31
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	051b      	lsls	r3, r3, #20
 8006f9c:	e018      	b.n	8006fd0 <HAL_ADC_ConfigChannel+0x5a8>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	fa93 f3a3 	rbit	r3, r3
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006fb6:	2320      	movs	r3, #32
 8006fb8:	e003      	b.n	8006fc2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbc:	fab3 f383 	clz	r3, r3
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	f003 021f 	and.w	r2, r3, #31
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	e07e      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d107      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x5c8>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	0e9b      	lsrs	r3, r3, #26
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	069b      	lsls	r3, r3, #26
 8006fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fee:	e015      	b.n	800701c <HAL_ADC_ConfigChannel+0x5f4>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	fa93 f3a3 	rbit	r3, r3
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007008:	2320      	movs	r3, #32
 800700a:	e003      	b.n	8007014 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	fab3 f383 	clz	r3, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	3301      	adds	r3, #1
 8007016:	069b      	lsls	r3, r3, #26
 8007018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_ADC_ConfigChannel+0x614>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	0e9b      	lsrs	r3, r3, #26
 800702e:	3301      	adds	r3, #1
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2101      	movs	r1, #1
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	e017      	b.n	800706c <HAL_ADC_ConfigChannel+0x644>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	fa93 f3a3 	rbit	r3, r3
 8007048:	61fb      	str	r3, [r7, #28]
  return result;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007054:	2320      	movs	r3, #32
 8007056:	e003      	b.n	8007060 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	fab3 f383 	clz	r3, r3
 800705e:	b2db      	uxtb	r3, r3
 8007060:	3301      	adds	r3, #1
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2101      	movs	r1, #1
 8007068:	fa01 f303 	lsl.w	r3, r1, r3
 800706c:	ea42 0103 	orr.w	r1, r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10d      	bne.n	8007098 <HAL_ADC_ConfigChannel+0x670>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	0e9b      	lsrs	r3, r3, #26
 8007082:	3301      	adds	r3, #1
 8007084:	f003 021f 	and.w	r2, r3, #31
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	3b1e      	subs	r3, #30
 8007090:	051b      	lsls	r3, r3, #20
 8007092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007096:	e01b      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x6a8>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	fa93 f3a3 	rbit	r3, r3
 80070a4:	613b      	str	r3, [r7, #16]
  return result;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80070b0:	2320      	movs	r3, #32
 80070b2:	e003      	b.n	80070bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	fab3 f383 	clz	r3, r3
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	3301      	adds	r3, #1
 80070be:	f003 021f 	and.w	r2, r3, #31
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	3b1e      	subs	r3, #30
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d0:	430b      	orrs	r3, r1
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	6892      	ldr	r2, [r2, #8]
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7ff f8bb 	bl	8006252 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <HAL_ADC_ConfigChannel+0x6e0>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80be 	beq.w	8007266 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f2:	d004      	beq.n	80070fe <HAL_ADC_ConfigChannel+0x6d6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a04      	ldr	r2, [pc, #16]	; (800710c <HAL_ADC_ConfigChannel+0x6e4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10a      	bne.n	8007114 <HAL_ADC_ConfigChannel+0x6ec>
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <HAL_ADC_ConfigChannel+0x6e8>)
 8007100:	e009      	b.n	8007116 <HAL_ADC_ConfigChannel+0x6ee>
 8007102:	bf00      	nop
 8007104:	407f0000 	.word	0x407f0000
 8007108:	80080000 	.word	0x80080000
 800710c:	50000100 	.word	0x50000100
 8007110:	50000300 	.word	0x50000300
 8007114:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_ADC_ConfigChannel+0x854>)
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe ffb0 	bl	800607c <LL_ADC_GetCommonPathInternalCh>
 800711c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a56      	ldr	r2, [pc, #344]	; (8007280 <HAL_ADC_ConfigChannel+0x858>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_ADC_ConfigChannel+0x70c>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a55      	ldr	r2, [pc, #340]	; (8007284 <HAL_ADC_ConfigChannel+0x85c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d13a      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d134      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007148:	d005      	beq.n	8007156 <HAL_ADC_ConfigChannel+0x72e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4e      	ldr	r2, [pc, #312]	; (8007288 <HAL_ADC_ConfigChannel+0x860>)
 8007150:	4293      	cmp	r3, r2
 8007152:	f040 8085 	bne.w	8007260 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800715e:	d004      	beq.n	800716a <HAL_ADC_ConfigChannel+0x742>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a49      	ldr	r2, [pc, #292]	; (800728c <HAL_ADC_ConfigChannel+0x864>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <HAL_ADC_ConfigChannel+0x746>
 800716a:	4a49      	ldr	r2, [pc, #292]	; (8007290 <HAL_ADC_ConfigChannel+0x868>)
 800716c:	e000      	b.n	8007170 <HAL_ADC_ConfigChannel+0x748>
 800716e:	4a43      	ldr	r2, [pc, #268]	; (800727c <HAL_ADC_ConfigChannel+0x854>)
 8007170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f7fe ff6b 	bl	8006056 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007180:	4b44      	ldr	r3, [pc, #272]	; (8007294 <HAL_ADC_ConfigChannel+0x86c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	099b      	lsrs	r3, r3, #6
 8007186:	4a44      	ldr	r2, [pc, #272]	; (8007298 <HAL_ADC_ConfigChannel+0x870>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	099b      	lsrs	r3, r3, #6
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800719a:	e002      	b.n	80071a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b01      	subs	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f9      	bne.n	800719c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071a8:	e05a      	b.n	8007260 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3b      	ldr	r2, [pc, #236]	; (800729c <HAL_ADC_ConfigChannel+0x874>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d125      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x7d8>
 80071b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d11f      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a31      	ldr	r2, [pc, #196]	; (800728c <HAL_ADC_ConfigChannel+0x864>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d104      	bne.n	80071d4 <HAL_ADC_ConfigChannel+0x7ac>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a34      	ldr	r2, [pc, #208]	; (80072a0 <HAL_ADC_ConfigChannel+0x878>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d047      	beq.n	8007264 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071dc:	d004      	beq.n	80071e8 <HAL_ADC_ConfigChannel+0x7c0>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2a      	ldr	r2, [pc, #168]	; (800728c <HAL_ADC_ConfigChannel+0x864>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d101      	bne.n	80071ec <HAL_ADC_ConfigChannel+0x7c4>
 80071e8:	4a29      	ldr	r2, [pc, #164]	; (8007290 <HAL_ADC_ConfigChannel+0x868>)
 80071ea:	e000      	b.n	80071ee <HAL_ADC_ConfigChannel+0x7c6>
 80071ec:	4a23      	ldr	r2, [pc, #140]	; (800727c <HAL_ADC_ConfigChannel+0x854>)
 80071ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe ff2c 	bl	8006056 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071fe:	e031      	b.n	8007264 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_ADC_ConfigChannel+0x87c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d12d      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800720a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800720e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d127      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <HAL_ADC_ConfigChannel+0x864>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d022      	beq.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d004      	beq.n	8007234 <HAL_ADC_ConfigChannel+0x80c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_ADC_ConfigChannel+0x864>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d101      	bne.n	8007238 <HAL_ADC_ConfigChannel+0x810>
 8007234:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_ADC_ConfigChannel+0x868>)
 8007236:	e000      	b.n	800723a <HAL_ADC_ConfigChannel+0x812>
 8007238:	4a10      	ldr	r2, [pc, #64]	; (800727c <HAL_ADC_ConfigChannel+0x854>)
 800723a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800723e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe ff06 	bl	8006056 <LL_ADC_SetCommonPathInternalCh>
 800724a:	e00c      	b.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800725e:	e002      	b.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007260:	bf00      	nop
 8007262:	e000      	b.n	8007266 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007264:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800726e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007272:	4618      	mov	r0, r3
 8007274:	37d8      	adds	r7, #216	; 0xd8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	50000700 	.word	0x50000700
 8007280:	c3210000 	.word	0xc3210000
 8007284:	90c00010 	.word	0x90c00010
 8007288:	50000600 	.word	0x50000600
 800728c:	50000100 	.word	0x50000100
 8007290:	50000300 	.word	0x50000300
 8007294:	20000000 	.word	0x20000000
 8007298:	053e2d63 	.word	0x053e2d63
 800729c:	c7520000 	.word	0xc7520000
 80072a0:	50000500 	.word	0x50000500
 80072a4:	cb840000 	.word	0xcb840000

080072a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff f8a3 	bl	8006400 <LL_ADC_IsEnabled>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d14d      	bne.n	800735c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	4b28      	ldr	r3, [pc, #160]	; (8007368 <ADC_Enable+0xc0>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	f043 0210 	orr.w	r2, r3, #16
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e039      	b.n	800735e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff f85e 	bl	80063b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80072f4:	f7fe fe6e 	bl	8005fd4 <HAL_GetTick>
 80072f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80072fa:	e028      	b.n	800734e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff f87d 	bl	8006400 <LL_ADC_IsEnabled>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff f84d 	bl	80063b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007316:	f7fe fe5d 	bl	8005fd4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d914      	bls.n	800734e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b01      	cmp	r3, #1
 8007330:	d00d      	beq.n	800734e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007336:	f043 0210 	orr.w	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007342:	f043 0201 	orr.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e007      	b.n	800735e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d1cf      	bne.n	80072fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	8000003f 	.word	0x8000003f

0800736c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff f854 	bl	8006426 <LL_ADC_IsDisableOngoing>
 800737e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff f83b 	bl	8006400 <LL_ADC_IsEnabled>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d047      	beq.n	8007420 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d144      	bne.n	8007420 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 030d 	and.w	r3, r3, #13
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d10c      	bne.n	80073be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff f815 	bl	80063d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2203      	movs	r2, #3
 80073b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073b6:	f7fe fe0d 	bl	8005fd4 <HAL_GetTick>
 80073ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073bc:	e029      	b.n	8007412 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c2:	f043 0210 	orr.w	r2, r3, #16
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ce:	f043 0201 	orr.w	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e023      	b.n	8007422 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80073da:	f7fe fdfb 	bl	8005fd4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d914      	bls.n	8007412 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00d      	beq.n	8007412 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	f043 0210 	orr.w	r2, r3, #16
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e007      	b.n	8007422 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1dc      	bne.n	80073da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007440:	2b00      	cmp	r3, #0
 8007442:	d14b      	bne.n	80074dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d021      	beq.n	80074a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe feb6 	bl	80061d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d032      	beq.n	80074d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d12b      	bne.n	80074d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11f      	bne.n	80074d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	f043 0201 	orr.w	r2, r3, #1
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	65da      	str	r2, [r3, #92]	; 0x5c
 80074a0:	e018      	b.n	80074d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f043 0201 	orr.w	r2, r3, #1
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff fa89 	bl	80069ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074da:	e00e      	b.n	80074fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fa93 	bl	8006a14 <HAL_ADC_ErrorCallback>
}
 80074ee:	e004      	b.n	80074fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff fa75 	bl	8006a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753c:	f043 0204 	orr.w	r2, r3, #4
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fa65 	bl	8006a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <LL_ADC_IsEnabled>:
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <LL_ADC_IsEnabled+0x18>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <LL_ADC_IsEnabled+0x1a>
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <LL_ADC_StartCalibration>:
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800758a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007594:	4313      	orrs	r3, r2
 8007596:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <LL_ADC_IsCalibrationOnGoing>:
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075be:	d101      	bne.n	80075c4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d101      	bne.n	80075ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_ADCEx_Calibration_Start+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e04d      	b.n	80076b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fea5 	bl	800736c <ADC_Disable>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d136      	bne.n	800769a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007630:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007634:	f023 0302 	bic.w	r3, r3, #2
 8007638:	f043 0202 	orr.w	r2, r3, #2
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff96 	bl	8007578 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800764c:	e014      	b.n	8007678 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	3301      	adds	r3, #1
 8007652:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d90d      	bls.n	8007678 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007660:	f023 0312 	bic.w	r3, r3, #18
 8007664:	f043 0210 	orr.w	r2, r3, #16
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e01b      	b.n	80076b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff94 	bl	80075aa <LL_ADC_IsCalibrationOnGoing>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e2      	bne.n	800764e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	f043 0201 	orr.w	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	65da      	str	r2, [r3, #92]	; 0x5c
 8007698:	e005      	b.n	80076a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	f043 0210 	orr.w	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0004de01 	.word	0x0004de01

080076bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80076bc:	b590      	push	{r4, r7, lr}
 80076be:	b0a1      	sub	sp, #132	; 0x84
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e0e7      	b.n	80078aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80076e2:	2300      	movs	r3, #0
 80076e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80076e6:	2300      	movs	r3, #0
 80076e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076f2:	d102      	bne.n	80076fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80076f4:	4b6f      	ldr	r3, [pc, #444]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	e009      	b.n	800770e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6e      	ldr	r2, [pc, #440]	; (80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d102      	bne.n	800770a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007704:	4b6d      	ldr	r3, [pc, #436]	; (80078bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007706:	60bb      	str	r3, [r7, #8]
 8007708:	e001      	b.n	800770e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007718:	f043 0220 	orr.w	r2, r3, #32
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0be      	b.n	80078aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff ff4f 	bl	80075d2 <LL_ADC_REG_IsConversionOngoing>
 8007734:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff ff49 	bl	80075d2 <LL_ADC_REG_IsConversionOngoing>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 80a0 	bne.w	8007888 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 809c 	bne.w	8007888 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007758:	d004      	beq.n	8007764 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a55      	ldr	r2, [pc, #340]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007764:	4b56      	ldr	r3, [pc, #344]	; (80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007766:	e000      	b.n	800776a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007768:	4b56      	ldr	r3, [pc, #344]	; (80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800776a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d04b      	beq.n	800780c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	6859      	ldr	r1, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007786:	035b      	lsls	r3, r3, #13
 8007788:	430b      	orrs	r3, r1
 800778a:	431a      	orrs	r2, r3
 800778c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800778e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007798:	d004      	beq.n	80077a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a45      	ldr	r2, [pc, #276]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d10f      	bne.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80077a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80077a8:	f7ff fed3 	bl	8007552 <LL_ADC_IsEnabled>
 80077ac:	4604      	mov	r4, r0
 80077ae:	4841      	ldr	r0, [pc, #260]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077b0:	f7ff fecf 	bl	8007552 <LL_ADC_IsEnabled>
 80077b4:	4603      	mov	r3, r0
 80077b6:	4323      	orrs	r3, r4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf0c      	ite	eq
 80077bc:	2301      	moveq	r3, #1
 80077be:	2300      	movne	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e012      	b.n	80077ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80077c4:	483c      	ldr	r0, [pc, #240]	; (80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80077c6:	f7ff fec4 	bl	8007552 <LL_ADC_IsEnabled>
 80077ca:	4604      	mov	r4, r0
 80077cc:	483b      	ldr	r0, [pc, #236]	; (80078bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80077ce:	f7ff fec0 	bl	8007552 <LL_ADC_IsEnabled>
 80077d2:	4603      	mov	r3, r0
 80077d4:	431c      	orrs	r4, r3
 80077d6:	483c      	ldr	r0, [pc, #240]	; (80078c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80077d8:	f7ff febb 	bl	8007552 <LL_ADC_IsEnabled>
 80077dc:	4603      	mov	r3, r0
 80077de:	4323      	orrs	r3, r4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d056      	beq.n	800789c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80077ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80077f6:	f023 030f 	bic.w	r3, r3, #15
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	6811      	ldr	r1, [r2, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	6892      	ldr	r2, [r2, #8]
 8007802:	430a      	orrs	r2, r1
 8007804:	431a      	orrs	r2, r3
 8007806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007808:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800780a:	e047      	b.n	800789c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800780c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007816:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007820:	d004      	beq.n	800782c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a23      	ldr	r2, [pc, #140]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10f      	bne.n	800784c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800782c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007830:	f7ff fe8f 	bl	8007552 <LL_ADC_IsEnabled>
 8007834:	4604      	mov	r4, r0
 8007836:	481f      	ldr	r0, [pc, #124]	; (80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007838:	f7ff fe8b 	bl	8007552 <LL_ADC_IsEnabled>
 800783c:	4603      	mov	r3, r0
 800783e:	4323      	orrs	r3, r4
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e012      	b.n	8007872 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800784c:	481a      	ldr	r0, [pc, #104]	; (80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800784e:	f7ff fe80 	bl	8007552 <LL_ADC_IsEnabled>
 8007852:	4604      	mov	r4, r0
 8007854:	4819      	ldr	r0, [pc, #100]	; (80078bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007856:	f7ff fe7c 	bl	8007552 <LL_ADC_IsEnabled>
 800785a:	4603      	mov	r3, r0
 800785c:	431c      	orrs	r4, r3
 800785e:	481a      	ldr	r0, [pc, #104]	; (80078c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007860:	f7ff fe77 	bl	8007552 <LL_ADC_IsEnabled>
 8007864:	4603      	mov	r3, r0
 8007866:	4323      	orrs	r3, r4
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d012      	beq.n	800789c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800787e:	f023 030f 	bic.w	r3, r3, #15
 8007882:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007884:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007886:	e009      	b.n	800789c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	f043 0220 	orr.w	r2, r3, #32
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800789a:	e000      	b.n	800789e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800789c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80078a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3784      	adds	r7, #132	; 0x84
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd90      	pop	{r4, r7, pc}
 80078b2:	bf00      	nop
 80078b4:	50000100 	.word	0x50000100
 80078b8:	50000400 	.word	0x50000400
 80078bc:	50000500 	.word	0x50000500
 80078c0:	50000300 	.word	0x50000300
 80078c4:	50000700 	.word	0x50000700
 80078c8:	50000600 	.word	0x50000600

080078cc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <LL_EXTI_EnableIT_0_31+0x20>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4904      	ldr	r1, [pc, #16]	; (80078ec <LL_EXTI_EnableIT_0_31+0x20>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	40010400 	.word	0x40010400

080078f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <LL_EXTI_EnableIT_32_63+0x20>)
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <LL_EXTI_EnableIT_32_63+0x20>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4313      	orrs	r3, r2
 8007902:	620b      	str	r3, [r1, #32]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40010400 	.word	0x40010400

08007914 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <LL_EXTI_DisableIT_0_31+0x24>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	43db      	mvns	r3, r3
 8007924:	4904      	ldr	r1, [pc, #16]	; (8007938 <LL_EXTI_DisableIT_0_31+0x24>)
 8007926:	4013      	ands	r3, r2
 8007928:	600b      	str	r3, [r1, #0]
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40010400 	.word	0x40010400

0800793c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <LL_EXTI_DisableIT_32_63+0x24>)
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	43db      	mvns	r3, r3
 800794c:	4904      	ldr	r1, [pc, #16]	; (8007960 <LL_EXTI_DisableIT_32_63+0x24>)
 800794e:	4013      	ands	r3, r2
 8007950:	620b      	str	r3, [r1, #32]
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40010400 	.word	0x40010400

08007964 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <LL_EXTI_EnableEvent_0_31+0x20>)
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	4904      	ldr	r1, [pc, #16]	; (8007984 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4313      	orrs	r3, r2
 8007976:	604b      	str	r3, [r1, #4]

}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	40010400 	.word	0x40010400

08007988 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007990:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007994:	4904      	ldr	r1, [pc, #16]	; (80079a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4313      	orrs	r3, r2
 800799a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40010400 	.word	0x40010400

080079ac <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	43db      	mvns	r3, r3
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80079be:	4013      	ands	r3, r2
 80079c0:	604b      	str	r3, [r1, #4]
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40010400 	.word	0x40010400

080079d4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80079de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	43db      	mvns	r3, r3
 80079e4:	4904      	ldr	r1, [pc, #16]	; (80079f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010400 	.word	0x40010400

080079fc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	4904      	ldr	r1, [pc, #16]	; (8007a1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	608b      	str	r3, [r1, #8]

}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	40010400 	.word	0x40010400

08007a20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a2c:	4904      	ldr	r1, [pc, #16]	; (8007a40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	40010400 	.word	0x40010400

08007a44 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	43db      	mvns	r3, r3
 8007a54:	4904      	ldr	r1, [pc, #16]	; (8007a68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	608b      	str	r3, [r1, #8]

}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40010400 	.word	0x40010400

08007a6c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4904      	ldr	r1, [pc, #16]	; (8007a90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010400 	.word	0x40010400

08007a94 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60cb      	str	r3, [r1, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	4904      	ldr	r1, [pc, #16]	; (8007ad8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	40010400 	.word	0x40010400

08007adc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	43db      	mvns	r3, r3
 8007aec:	4904      	ldr	r1, [pc, #16]	; (8007b00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	60cb      	str	r3, [r1, #12]
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40010400 	.word	0x40010400

08007b04 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	43db      	mvns	r3, r3
 8007b14:	4904      	ldr	r1, [pc, #16]	; (8007b28 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010400 	.word	0x40010400

08007b2c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6153      	str	r3, [r2, #20]
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40010400 	.word	0x40010400

08007b4c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010400 	.word	0x40010400

08007b6c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	77fb      	strb	r3, [r7, #31]
 8007b86:	e181      	b.n	8007e8c <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b96:	d102      	bne.n	8007b9e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e176      	b.n	8007e8c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7f5b      	ldrb	r3, [r3, #29]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d108      	bne.n	8007bba <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fd fb65 	bl	8005284 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bc4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b90      	ldr	r3, [pc, #576]	; (8007e2c <HAL_COMP_Init+0x2c0>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <HAL_COMP_Init+0xc8>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d113      	bne.n	8007c34 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c0c:	4b88      	ldr	r3, [pc, #544]	; (8007e30 <HAL_COMP_Init+0x2c4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	099b      	lsrs	r3, r3, #6
 8007c12:	4a88      	ldr	r2, [pc, #544]	; (8007e34 <HAL_COMP_Init+0x2c8>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	099b      	lsrs	r3, r3, #6
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007c26:	e002      	b.n	8007c2e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f9      	bne.n	8007c28 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a7f      	ldr	r2, [pc, #508]	; (8007e38 <HAL_COMP_Init+0x2cc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d028      	beq.n	8007c90 <HAL_COMP_Init+0x124>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a7e      	ldr	r2, [pc, #504]	; (8007e3c <HAL_COMP_Init+0x2d0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d020      	beq.n	8007c8a <HAL_COMP_Init+0x11e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a7c      	ldr	r2, [pc, #496]	; (8007e40 <HAL_COMP_Init+0x2d4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d018      	beq.n	8007c84 <HAL_COMP_Init+0x118>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a7b      	ldr	r2, [pc, #492]	; (8007e44 <HAL_COMP_Init+0x2d8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d010      	beq.n	8007c7e <HAL_COMP_Init+0x112>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a79      	ldr	r2, [pc, #484]	; (8007e48 <HAL_COMP_Init+0x2dc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d008      	beq.n	8007c78 <HAL_COMP_Init+0x10c>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a78      	ldr	r2, [pc, #480]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d101      	bne.n	8007c74 <HAL_COMP_Init+0x108>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e00f      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e00d      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c7c:	e00a      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c82:	e007      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c84:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007c88:	e004      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c8e:	e001      	b.n	8007c94 <HAL_COMP_Init+0x128>
 8007c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c94:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80b6 	beq.w	8007e10 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d011      	beq.n	8007cd4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a65      	ldr	r2, [pc, #404]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_COMP_Init+0x158>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a64      	ldr	r2, [pc, #400]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d103      	bne.n	8007ccc <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8007cc4:	6938      	ldr	r0, [r7, #16]
 8007cc6:	f7ff feab 	bl	8007a20 <LL_EXTI_EnableRisingTrig_32_63>
 8007cca:	e014      	b.n	8007cf6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007ccc:	6938      	ldr	r0, [r7, #16]
 8007cce:	f7ff fe95 	bl	80079fc <LL_EXTI_EnableRisingTrig_0_31>
 8007cd2:	e010      	b.n	8007cf6 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a5c      	ldr	r2, [pc, #368]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_COMP_Init+0x17c>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a5b      	ldr	r2, [pc, #364]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d103      	bne.n	8007cf0 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8007ce8:	6938      	ldr	r0, [r7, #16]
 8007cea:	f7ff febf 	bl	8007a6c <LL_EXTI_DisableRisingTrig_32_63>
 8007cee:	e002      	b.n	8007cf6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007cf0:	6938      	ldr	r0, [r7, #16]
 8007cf2:	f7ff fea7 	bl	8007a44 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d011      	beq.n	8007d26 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a51      	ldr	r2, [pc, #324]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_COMP_Init+0x1aa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a4f      	ldr	r2, [pc, #316]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d103      	bne.n	8007d1e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8007d16:	6938      	ldr	r0, [r7, #16]
 8007d18:	f7ff fece 	bl	8007ab8 <LL_EXTI_EnableFallingTrig_32_63>
 8007d1c:	e014      	b.n	8007d48 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007d1e:	6938      	ldr	r0, [r7, #16]
 8007d20:	f7ff feb8 	bl	8007a94 <LL_EXTI_EnableFallingTrig_0_31>
 8007d24:	e010      	b.n	8007d48 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a48      	ldr	r2, [pc, #288]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_COMP_Init+0x1ce>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a46      	ldr	r2, [pc, #280]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d103      	bne.n	8007d42 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8007d3a:	6938      	ldr	r0, [r7, #16]
 8007d3c:	f7ff fee2 	bl	8007b04 <LL_EXTI_DisableFallingTrig_32_63>
 8007d40:	e002      	b.n	8007d48 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007d42:	6938      	ldr	r0, [r7, #16]
 8007d44:	f7ff feca 	bl	8007adc <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a3f      	ldr	r2, [pc, #252]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_COMP_Init+0x1f0>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a3e      	ldr	r2, [pc, #248]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d103      	bne.n	8007d64 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8007d5c:	6938      	ldr	r0, [r7, #16]
 8007d5e:	f7ff fef5 	bl	8007b4c <LL_EXTI_ClearFlag_32_63>
 8007d62:	e002      	b.n	8007d6a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8007d64:	6938      	ldr	r0, [r7, #16]
 8007d66:	f7ff fee1 	bl	8007b2c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d011      	beq.n	8007d9a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a34      	ldr	r2, [pc, #208]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_COMP_Init+0x21e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a32      	ldr	r2, [pc, #200]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d103      	bne.n	8007d92 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f7ff fdfc 	bl	8007988 <LL_EXTI_EnableEvent_32_63>
 8007d90:	e014      	b.n	8007dbc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f7ff fde6 	bl	8007964 <LL_EXTI_EnableEvent_0_31>
 8007d98:	e010      	b.n	8007dbc <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_COMP_Init+0x242>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a29      	ldr	r2, [pc, #164]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d103      	bne.n	8007db6 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8007dae:	6938      	ldr	r0, [r7, #16]
 8007db0:	f7ff fe10 	bl	80079d4 <LL_EXTI_DisableEvent_32_63>
 8007db4:	e002      	b.n	8007dbc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007db6:	6938      	ldr	r0, [r7, #16]
 8007db8:	f7ff fdf8 	bl	80079ac <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d004      	beq.n	8007ddc <HAL_COMP_Init+0x270>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007ddc:	6938      	ldr	r0, [r7, #16]
 8007dde:	f7ff fd87 	bl	80078f0 <LL_EXTI_EnableIT_32_63>
 8007de2:	e04b      	b.n	8007e7c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8007de4:	6938      	ldr	r0, [r7, #16]
 8007de6:	f7ff fd71 	bl	80078cc <LL_EXTI_EnableIT_0_31>
 8007dea:	e047      	b.n	8007e7c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d004      	beq.n	8007e00 <HAL_COMP_Init+0x294>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d103      	bne.n	8007e08 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007e00:	6938      	ldr	r0, [r7, #16]
 8007e02:	f7ff fd9b 	bl	800793c <LL_EXTI_DisableIT_32_63>
 8007e06:	e039      	b.n	8007e7c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8007e08:	6938      	ldr	r0, [r7, #16]
 8007e0a:	f7ff fd83 	bl	8007914 <LL_EXTI_DisableIT_0_31>
 8007e0e:	e035      	b.n	8007e7c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <HAL_COMP_Init+0x2e0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_COMP_Init+0x2b8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <HAL_COMP_Init+0x2e4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d117      	bne.n	8007e54 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007e24:	6938      	ldr	r0, [r7, #16]
 8007e26:	f7ff fdd5 	bl	80079d4 <LL_EXTI_DisableEvent_32_63>
 8007e2a:	e016      	b.n	8007e5a <HAL_COMP_Init+0x2ee>
 8007e2c:	ff007e0f 	.word	0xff007e0f
 8007e30:	20000000 	.word	0x20000000
 8007e34:	053e2d63 	.word	0x053e2d63
 8007e38:	40010200 	.word	0x40010200
 8007e3c:	40010204 	.word	0x40010204
 8007e40:	40010208 	.word	0x40010208
 8007e44:	4001020c 	.word	0x4001020c
 8007e48:	40010210 	.word	0x40010210
 8007e4c:	40010214 	.word	0x40010214
 8007e50:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007e54:	6938      	ldr	r0, [r7, #16]
 8007e56:	f7ff fda9 	bl	80079ac <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	; (8007e98 <HAL_COMP_Init+0x32c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_COMP_Init+0x302>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <HAL_COMP_Init+0x330>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d103      	bne.n	8007e76 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8007e6e:	6938      	ldr	r0, [r7, #16]
 8007e70:	f7ff fd64 	bl	800793c <LL_EXTI_DisableIT_32_63>
 8007e74:	e002      	b.n	8007e7c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f7ff fd4c 	bl	8007914 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7f5b      	ldrb	r3, [r3, #29]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8007e8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40010214 	.word	0x40010214
 8007e9c:	40010218 	.word	0x40010218

08007ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	60d3      	str	r3, [r2, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__NVIC_GetPriorityGrouping+0x18>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0307 	and.w	r3, r3, #7
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db0b      	blt.n	8007f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	f003 021f 	and.w	r2, r3, #31
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <__NVIC_EnableIRQ+0x38>)
 8007f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2001      	movs	r0, #1
 8007f26:	fa00 f202 	lsl.w	r2, r0, r2
 8007f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000e100 	.word	0xe000e100

08007f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db0a      	blt.n	8007f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	490c      	ldr	r1, [pc, #48]	; (8007f8c <__NVIC_SetPriority+0x4c>)
 8007f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5e:	0112      	lsls	r2, r2, #4
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	440b      	add	r3, r1
 8007f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f68:	e00a      	b.n	8007f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4908      	ldr	r1, [pc, #32]	; (8007f90 <__NVIC_SetPriority+0x50>)
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	3b04      	subs	r3, #4
 8007f78:	0112      	lsls	r2, r2, #4
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	761a      	strb	r2, [r3, #24]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000e100 	.word	0xe000e100
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	bf28      	it	cs
 8007fb2:	2304      	movcs	r3, #4
 8007fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2b06      	cmp	r3, #6
 8007fbc:	d902      	bls.n	8007fc4 <NVIC_EncodePriority+0x30>
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3b03      	subs	r3, #3
 8007fc2:	e000      	b.n	8007fc6 <NVIC_EncodePriority+0x32>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	401a      	ands	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	43d9      	mvns	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fec:	4313      	orrs	r3, r2
         );
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3b01      	subs	r3, #1
 8008008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800800c:	d301      	bcc.n	8008012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800800e:	2301      	movs	r3, #1
 8008010:	e00f      	b.n	8008032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <SysTick_Config+0x40>)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800801a:	210f      	movs	r1, #15
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	f7ff ff8e 	bl	8007f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <SysTick_Config+0x40>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <SysTick_Config+0x40>)
 800802c:	2207      	movs	r2, #7
 800802e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	e000e010 	.word	0xe000e010

08008040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff29 	bl	8007ea0 <__NVIC_SetPriorityGrouping>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	4603      	mov	r3, r0
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008064:	f7ff ff40 	bl	8007ee8 <__NVIC_GetPriorityGrouping>
 8008068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	6978      	ldr	r0, [r7, #20]
 8008070:	f7ff ff90 	bl	8007f94 <NVIC_EncodePriority>
 8008074:	4602      	mov	r2, r0
 8008076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff5f 	bl	8007f40 <__NVIC_SetPriority>
}
 8008082:	bf00      	nop
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	4603      	mov	r3, r0
 8008092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff ff33 	bl	8007f04 <__NVIC_EnableIRQ>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff ffa4 	bl	8007ffc <SysTick_Config>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e014      	b.n	80080fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	791b      	ldrb	r3, [r3, #4]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fd f965 	bl	80053b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	795b      	ldrb	r3, [r3, #5]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_DAC_ConfigChannel+0x18>
 8008118:	2302      	movs	r3, #2
 800811a:	e192      	b.n	8008442 <HAL_DAC_ConfigChannel+0x33e>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2202      	movs	r2, #2
 8008126:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b04      	cmp	r3, #4
 800812e:	d174      	bne.n	800821a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008130:	f7fd ff50 	bl	8005fd4 <HAL_GetTick>
 8008134:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d134      	bne.n	80081a6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800813c:	e011      	b.n	8008162 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800813e:	f7fd ff49 	bl	8005fd4 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d90a      	bls.n	8008162 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f043 0208 	orr.w	r2, r3, #8
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2203      	movs	r2, #3
 800815c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e16f      	b.n	8008442 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8008170:	2001      	movs	r0, #1
 8008172:	f7fd ff3b 	bl	8005fec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800817e:	641a      	str	r2, [r3, #64]	; 0x40
 8008180:	e01e      	b.n	80081c0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008182:	f7fd ff27 	bl	8005fd4 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d90a      	bls.n	80081a6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f043 0208 	orr.w	r2, r3, #8
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2203      	movs	r2, #3
 80081a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e14d      	b.n	8008442 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dbe8      	blt.n	8008182 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7fd ff1b 	bl	8005fec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081be:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	ea02 0103 	and.w	r1, r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	409a      	lsls	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f003 0310 	and.w	r3, r3, #16
 80081fa:	21ff      	movs	r1, #255	; 0xff
 80081fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	ea02 0103 	and.w	r1, r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	409a      	lsls	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d11d      	bne.n	800825e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f003 0310 	and.w	r3, r3, #16
 8008230:	221f      	movs	r2, #31
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	4013      	ands	r3, r2
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	4313      	orrs	r3, r2
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2207      	movs	r2, #7
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	4013      	ands	r3, r2
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d102      	bne.n	8008288 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8008282:	2300      	movs	r3, #0
 8008284:	623b      	str	r3, [r7, #32]
 8008286:	e00f      	b.n	80082a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d102      	bne.n	8008296 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008290:	2301      	movs	r3, #1
 8008292:	623b      	str	r3, [r7, #32]
 8008294:	e008      	b.n	80082a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800829e:	2301      	movs	r3, #1
 80082a0:	623b      	str	r3, [r7, #32]
 80082a2:	e001      	b.n	80082a8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	43db      	mvns	r3, r3
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	4013      	ands	r3, r2
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d102      	bne.n	80082dc <HAL_DAC_ConfigChannel+0x1d8>
 80082d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082da:	e000      	b.n	80082de <HAL_DAC_ConfigChannel+0x1da>
 80082dc:	2300      	movs	r3, #0
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f6:	4013      	ands	r3, r2
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	795b      	ldrb	r3, [r3, #5]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d102      	bne.n	8008308 <HAL_DAC_ConfigChannel+0x204>
 8008302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008306:	e000      	b.n	800830a <HAL_DAC_ConfigChannel+0x206>
 8008308:	2300      	movs	r3, #0
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4313      	orrs	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d114      	bne.n	800834a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008320:	f003 fb58 	bl	800b9d4 <HAL_RCC_GetHCLKFreq>
 8008324:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	4a48      	ldr	r2, [pc, #288]	; (800844c <HAL_DAC_ConfigChannel+0x348>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d904      	bls.n	8008338 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
 8008336:	e00f      	b.n	8008358 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4a45      	ldr	r2, [pc, #276]	; (8008450 <HAL_DAC_ConfigChannel+0x34c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d90a      	bls.n	8008356 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
 8008348:	e006      	b.n	8008358 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008350:	4313      	orrs	r3, r2
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
 8008354:	e000      	b.n	8008358 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008356:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008366:	4313      	orrs	r3, r2
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6819      	ldr	r1, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008382:	fa02 f303 	lsl.w	r3, r2, r3
 8008386:	43da      	mvns	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	400a      	ands	r2, r1
 800838e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f003 0310 	and.w	r3, r3, #16
 800839e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	43db      	mvns	r3, r3
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	4013      	ands	r3, r2
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c2:	4313      	orrs	r3, r2
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	22c0      	movs	r2, #192	; 0xc0
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	43da      	mvns	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	400a      	ands	r2, r1
 80083e8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	4313      	orrs	r3, r2
 8008406:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008418:	fa01 f303 	lsl.w	r3, r1, r3
 800841c:	43db      	mvns	r3, r3
 800841e:	ea02 0103 	and.w	r1, r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	409a      	lsls	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3728      	adds	r7, #40	; 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	09896800 	.word	0x09896800
 8008450:	04c4b400 	.word	0x04c4b400

08008454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e08d      	b.n	8008582 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	4b47      	ldr	r3, [pc, #284]	; (800858c <HAL_DMA_Init+0x138>)
 800846e:	429a      	cmp	r2, r3
 8008470:	d80f      	bhi.n	8008492 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	4b45      	ldr	r3, [pc, #276]	; (8008590 <HAL_DMA_Init+0x13c>)
 800847a:	4413      	add	r3, r2
 800847c:	4a45      	ldr	r2, [pc, #276]	; (8008594 <HAL_DMA_Init+0x140>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	009a      	lsls	r2, r3, #2
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a42      	ldr	r2, [pc, #264]	; (8008598 <HAL_DMA_Init+0x144>)
 800848e:	641a      	str	r2, [r3, #64]	; 0x40
 8008490:	e00e      	b.n	80084b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	4b40      	ldr	r3, [pc, #256]	; (800859c <HAL_DMA_Init+0x148>)
 800849a:	4413      	add	r3, r2
 800849c:	4a3d      	ldr	r2, [pc, #244]	; (8008594 <HAL_DMA_Init+0x140>)
 800849e:	fba2 2303 	umull	r2, r3, r2, r3
 80084a2:	091b      	lsrs	r3, r3, #4
 80084a4:	009a      	lsls	r2, r3, #2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a3c      	ldr	r2, [pc, #240]	; (80085a0 <HAL_DMA_Init+0x14c>)
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa76 	bl	80089f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008510:	d102      	bne.n	8008518 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800852c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d010      	beq.n	8008558 <HAL_DMA_Init+0x104>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b04      	cmp	r3, #4
 800853c:	d80c      	bhi.n	8008558 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa96 	bl	8008a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	e008      	b.n	800856a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40020407 	.word	0x40020407
 8008590:	bffdfff8 	.word	0xbffdfff8
 8008594:	cccccccd 	.word	0xcccccccd
 8008598:	40020000 	.word	0x40020000
 800859c:	bffdfbf8 	.word	0xbffdfbf8
 80085a0:	40020400 	.word	0x40020400

080085a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_DMA_Start_IT+0x20>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e066      	b.n	8008692 <HAL_DMA_Start_IT+0xee>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d155      	bne.n	8008684 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0201 	bic.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 f9bb 	bl	8008978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 020e 	orr.w	r2, r2, #14
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e00f      	b.n	800863c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0204 	bic.w	r2, r2, #4
 800862a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 020a 	orr.w	r2, r2, #10
 800863a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008658:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008670:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0201 	orr.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e005      	b.n	8008690 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800868c:	2302      	movs	r3, #2
 800868e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d005      	beq.n	80086be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2204      	movs	r2, #4
 80086b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
 80086bc:	e037      	b.n	800872e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 020e 	bic.w	r2, r2, #14
 80086cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	f003 021f 	and.w	r2, r3, #31
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	2101      	movs	r1, #1
 80086fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008700:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800870a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008722:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800872c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d00d      	beq.n	8008780 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2204      	movs	r2, #4
 8008768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e047      	b.n	8008810 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 020e 	bic.w	r2, r2, #14
 800878e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0201 	bic.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b4:	f003 021f 	and.w	r2, r3, #31
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f202 	lsl.w	r2, r1, r2
 80087c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00c      	beq.n	80087f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
    }
  }
  return status;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	2204      	movs	r2, #4
 800883c:	409a      	lsls	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4013      	ands	r3, r2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d026      	beq.n	8008894 <HAL_DMA_IRQHandler+0x7a>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d021      	beq.n	8008894 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d107      	bne.n	800886e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0204 	bic.w	r2, r2, #4
 800886c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f003 021f 	and.w	r2, r3, #31
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2104      	movs	r1, #4
 800887c:	fa01 f202 	lsl.w	r2, r1, r2
 8008880:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	2b00      	cmp	r3, #0
 8008888:	d071      	beq.n	800896e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008892:	e06c      	b.n	800896e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2202      	movs	r2, #2
 800889e:	409a      	lsls	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d02e      	beq.n	8008906 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d029      	beq.n	8008906 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10b      	bne.n	80088d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 020a 	bic.w	r2, r2, #10
 80088ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	f003 021f 	and.w	r2, r3, #31
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	2102      	movs	r1, #2
 80088e6:	fa01 f202 	lsl.w	r2, r1, r2
 80088ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d038      	beq.n	800896e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008904:	e033      	b.n	800896e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	2208      	movs	r2, #8
 8008910:	409a      	lsls	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4013      	ands	r3, r2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02a      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	d025      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 020e 	bic.w	r2, r2, #14
 8008932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	f003 021f 	and.w	r2, r3, #31
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f202 	lsl.w	r2, r1, r2
 8008946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800896e:	bf00      	nop
 8008970:	bf00      	nop
}
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800898e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80089a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	f003 021f 	and.w	r2, r3, #31
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	2101      	movs	r1, #1
 80089b0:	fa01 f202 	lsl.w	r2, r1, r2
 80089b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d108      	bne.n	80089d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80089d6:	e007      	b.n	80089e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	60da      	str	r2, [r3, #12]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d802      	bhi.n	8008a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008a08:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	e001      	b.n	8008a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008a0e:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008a10:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	3b08      	subs	r3, #8
 8008a1e:	4a12      	ldr	r2, [pc, #72]	; (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	091b      	lsrs	r3, r3, #4
 8008a26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	009a      	lsls	r2, r3, #2
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	4413      	add	r3, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a0b      	ldr	r2, [pc, #44]	; (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	2201      	movs	r2, #1
 8008a48:	409a      	lsls	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40020407 	.word	0x40020407
 8008a60:	40020800 	.word	0x40020800
 8008a64:	40020820 	.word	0x40020820
 8008a68:	cccccccd 	.word	0xcccccccd
 8008a6c:	40020880 	.word	0x40020880

08008a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008a92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	1000823f 	.word	0x1000823f
 8008ab4:	40020940 	.word	0x40020940

08008ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ac6:	e15a      	b.n	8008d7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	2101      	movs	r1, #1
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 814c 	beq.w	8008d78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d005      	beq.n	8008af8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d130      	bne.n	8008b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	2203      	movs	r2, #3
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b2e:	2201      	movs	r2, #1
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	43db      	mvns	r3, r3
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	091b      	lsrs	r3, r3, #4
 8008b44:	f003 0201 	and.w	r2, r3, #1
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d017      	beq.n	8008b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	2203      	movs	r2, #3
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	43db      	mvns	r3, r3
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d123      	bne.n	8008bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	08da      	lsrs	r2, r3, #3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3208      	adds	r2, #8
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	220f      	movs	r2, #15
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	08da      	lsrs	r2, r3, #3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3208      	adds	r2, #8
 8008be4:	6939      	ldr	r1, [r7, #16]
 8008be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	2203      	movs	r2, #3
 8008bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfa:	43db      	mvns	r3, r3
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0203 	and.w	r2, r3, #3
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80a6 	beq.w	8008d78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c2c:	4b5b      	ldr	r3, [pc, #364]	; (8008d9c <HAL_GPIO_Init+0x2e4>)
 8008c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c30:	4a5a      	ldr	r2, [pc, #360]	; (8008d9c <HAL_GPIO_Init+0x2e4>)
 8008c32:	f043 0301 	orr.w	r3, r3, #1
 8008c36:	6613      	str	r3, [r2, #96]	; 0x60
 8008c38:	4b58      	ldr	r3, [pc, #352]	; (8008d9c <HAL_GPIO_Init+0x2e4>)
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c44:	4a56      	ldr	r2, [pc, #344]	; (8008da0 <HAL_GPIO_Init+0x2e8>)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	089b      	lsrs	r3, r3, #2
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	220f      	movs	r2, #15
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	43db      	mvns	r3, r3
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4013      	ands	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c6e:	d01f      	beq.n	8008cb0 <HAL_GPIO_Init+0x1f8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a4c      	ldr	r2, [pc, #304]	; (8008da4 <HAL_GPIO_Init+0x2ec>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d019      	beq.n	8008cac <HAL_GPIO_Init+0x1f4>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a4b      	ldr	r2, [pc, #300]	; (8008da8 <HAL_GPIO_Init+0x2f0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d013      	beq.n	8008ca8 <HAL_GPIO_Init+0x1f0>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a4a      	ldr	r2, [pc, #296]	; (8008dac <HAL_GPIO_Init+0x2f4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00d      	beq.n	8008ca4 <HAL_GPIO_Init+0x1ec>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a49      	ldr	r2, [pc, #292]	; (8008db0 <HAL_GPIO_Init+0x2f8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d007      	beq.n	8008ca0 <HAL_GPIO_Init+0x1e8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a48      	ldr	r2, [pc, #288]	; (8008db4 <HAL_GPIO_Init+0x2fc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d101      	bne.n	8008c9c <HAL_GPIO_Init+0x1e4>
 8008c98:	2305      	movs	r3, #5
 8008c9a:	e00a      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008c9c:	2306      	movs	r3, #6
 8008c9e:	e008      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	e006      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e004      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e002      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e000      	b.n	8008cb2 <HAL_GPIO_Init+0x1fa>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	f002 0203 	and.w	r2, r2, #3
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	4093      	lsls	r3, r2
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cc2:	4937      	ldr	r1, [pc, #220]	; (8008da0 <HAL_GPIO_Init+0x2e8>)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	3302      	adds	r3, #2
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cd0:	4b39      	ldr	r3, [pc, #228]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008cf4:	4a30      	ldr	r2, [pc, #192]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	43db      	mvns	r3, r3
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	4013      	ands	r3, r2
 8008d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d1e:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008d24:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4013      	ands	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d48:	4a1b      	ldr	r2, [pc, #108]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	43db      	mvns	r3, r3
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d72:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <HAL_GPIO_Init+0x300>)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f ae9d 	bne.w	8008ac8 <HAL_GPIO_Init+0x10>
  }
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	40010000 	.word	0x40010000
 8008da4:	48000400 	.word	0x48000400
 8008da8:	48000800 	.word	0x48000800
 8008dac:	48000c00 	.word	0x48000c00
 8008db0:	48001000 	.word	0x48001000
 8008db4:	48001400 	.word	0x48001400
 8008db8:	40010400 	.word	0x40010400

08008dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	807b      	strh	r3, [r7, #2]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008dcc:	787b      	ldrb	r3, [r7, #1]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008dd2:	887a      	ldrh	r2, [r7, #2]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008dd8:	e002      	b.n	8008de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008dfe:	887a      	ldrh	r2, [r7, #2]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4013      	ands	r3, r2
 8008e04:	041a      	lsls	r2, r3, #16
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	43d9      	mvns	r1, r3
 8008e0a:	887b      	ldrh	r3, [r7, #2]
 8008e0c:	400b      	ands	r3, r1
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	619a      	str	r2, [r3, #24]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e081      	b.n	8008f36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fc fb0e 	bl	8005468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	; 0x24
 8008e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0201 	bic.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d107      	bne.n	8008e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e96:	609a      	str	r2, [r3, #8]
 8008e98:	e006      	b.n	8008ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d104      	bne.n	8008eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6812      	ldr	r2, [r2, #0]
 8008ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69d9      	ldr	r1, [r3, #28]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d138      	bne.n	8008fc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d101      	bne.n	8008f62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f5e:	2302      	movs	r3, #2
 8008f60:	e032      	b.n	8008fc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2224      	movs	r2, #36	; 0x24
 8008f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0201 	bic.w	r2, r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0201 	orr.w	r2, r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e000      	b.n	8008fc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fc6:	2302      	movs	r3, #2
  }
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d139      	bne.n	800905e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e033      	b.n	8009060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2224      	movs	r2, #36	; 0x24
 8009004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0201 	bic.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0201 	orr.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	e000      	b.n	8009060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800905e:	2302      	movs	r3, #2
  }
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e0bb      	b.n	80091fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b05      	cmp	r3, #5
 800908c:	d101      	bne.n	8009092 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e0b3      	b.n	80091fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b02      	cmp	r3, #2
 800909c:	d101      	bne.n	80090a2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e0ab      	b.n	80091fa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090a2:	4b58      	ldr	r3, [pc, #352]	; (8009204 <HAL_OPAMP_Init+0x198>)
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	4a57      	ldr	r2, [pc, #348]	; (8009204 <HAL_OPAMP_Init+0x198>)
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	6613      	str	r3, [r2, #96]	; 0x60
 80090ae:	4b55      	ldr	r3, [pc, #340]	; (8009204 <HAL_OPAMP_Init+0x198>)
 80090b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7fc fa22 	bl	8005518 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d003      	beq.n	80090e4 <HAL_OPAMP_Init+0x78>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b60      	cmp	r3, #96	; 0x60
 80090e2:	d133      	bne.n	800914c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f023 0110 	bic.w	r1, r3, #16
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b41      	ldr	r3, [pc, #260]	; (8009208 <HAL_OPAMP_Init+0x19c>)
 8009102:	4013      	ands	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6851      	ldr	r1, [r2, #4]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6892      	ldr	r2, [r2, #8]
 800910c:	4311      	orrs	r1, r2
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6912      	ldr	r2, [r2, #16]
 8009112:	430a      	orrs	r2, r1
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	7d09      	ldrb	r1, [r1, #20]
 8009118:	2901      	cmp	r1, #1
 800911a:	d102      	bne.n	8009122 <HAL_OPAMP_Init+0xb6>
 800911c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009120:	e000      	b.n	8009124 <HAL_OPAMP_Init+0xb8>
 8009122:	2100      	movs	r1, #0
 8009124:	4311      	orrs	r1, r2
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800912a:	4311      	orrs	r1, r2
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009130:	4311      	orrs	r1, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009136:	04d2      	lsls	r2, r2, #19
 8009138:	4311      	orrs	r1, r2
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800913e:	0612      	lsls	r2, r2, #24
 8009140:	4311      	orrs	r1, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6812      	ldr	r2, [r2, #0]
 8009146:	430b      	orrs	r3, r1
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e035      	b.n	80091b8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f023 0110 	bic.w	r1, r3, #16
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <HAL_OPAMP_Init+0x19c>)
 800916a:	4013      	ands	r3, r2
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6851      	ldr	r1, [r2, #4]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6892      	ldr	r2, [r2, #8]
 8009174:	4311      	orrs	r1, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	68d2      	ldr	r2, [r2, #12]
 800917a:	4311      	orrs	r1, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6912      	ldr	r2, [r2, #16]
 8009180:	430a      	orrs	r2, r1
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	7d09      	ldrb	r1, [r1, #20]
 8009186:	2901      	cmp	r1, #1
 8009188:	d102      	bne.n	8009190 <HAL_OPAMP_Init+0x124>
 800918a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800918e:	e000      	b.n	8009192 <HAL_OPAMP_Init+0x126>
 8009190:	2100      	movs	r1, #0
 8009192:	4311      	orrs	r1, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009198:	4311      	orrs	r1, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800919e:	4311      	orrs	r1, r2
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091a4:	04d2      	lsls	r2, r2, #19
 80091a6:	4311      	orrs	r1, r2
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091ac:	0612      	lsls	r2, r2, #24
 80091ae:	4311      	orrs	r1, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6812      	ldr	r2, [r2, #0]
 80091b4:	430b      	orrs	r3, r1
 80091b6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	db10      	blt.n	80091e4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	40021000 	.word	0x40021000
 8009208:	e0003e11 	.word	0xe0003e11

0800920c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
 8009222:	e01d      	b.n	8009260 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b05      	cmp	r3, #5
 800922e:	d102      	bne.n	8009236 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
 8009234:	e014      	b.n	8009260 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10c      	bne.n	800925c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0201 	orr.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2204      	movs	r2, #4
 8009256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800925a:	e001      	b.n	8009260 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]
 8009284:	e113      	b.n	80094ae <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b05      	cmp	r3, #5
 8009290:	d102      	bne.n	8009298 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
 8009296:	e10a      	b.n	80094ae <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	f040 8102 	bne.w	80094aa <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0202 	orr.w	r2, r2, #2
 80092b4:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0210 	orr.w	r2, r2, #16
 80092c4:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d4:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80092e4:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0201 	orr.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 80092f6:	2310      	movs	r3, #16
 80092f8:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 80092fa:	2308      	movs	r3, #8
 80092fc:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 80092fe:	e020      	b.n	8009342 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	061a      	lsls	r2, r3, #24
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8009316:	2002      	movs	r0, #2
 8009318:	f7fc fe68 	bl	8005fec <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	e003      	b.n	800933c <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1db      	bne.n	8009300 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	061a      	lsls	r2, r3, #24
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800935e:	2002      	movs	r0, #2
 8009360:	f7fc fe44 	bl	8005fec <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00d      	beq.n	800938e <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3301      	adds	r3, #1
 8009376:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	061a      	lsls	r2, r3, #24
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093a0:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 80093a2:	2310      	movs	r3, #16
 80093a4:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 80093a6:	2308      	movs	r3, #8
 80093a8:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 80093aa:	e020      	b.n	80093ee <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	04da      	lsls	r2, r3, #19
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 80093c2:	2002      	movs	r0, #2
 80093c4:	f7fc fe12 	bl	8005fec <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4413      	add	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e003      	b.n	80093e8 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1db      	bne.n	80093ac <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	04da      	lsls	r2, r3, #19
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800940a:	2002      	movs	r0, #2
 800940c:	f7fc fdee 	bl	8005fec <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	04da      	lsls	r2, r3, #19
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009448:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0202 	bic.w	r2, r2, #2
 8009468:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2210      	movs	r2, #16
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	04da      	lsls	r2, r3, #19
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	061a      	lsls	r2, r3, #24
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e001      	b.n	80094ae <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80094b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ba:	b08b      	sub	sp, #44	; 0x2c
 80094bc:	af06      	add	r7, sp, #24
 80094be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e0d7      	b.n	800967a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f009 fe6e 	bl	80131c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2203      	movs	r2, #3
 80094e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f005 fd2a 	bl	800ef4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	e04c      	b.n	8009596 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	440b      	add	r3, r1
 800950c:	3301      	adds	r3, #1
 800950e:	2201      	movs	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	440b      	add	r3, r1
 8009522:	7bfa      	ldrb	r2, [r7, #15]
 8009524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009526:	7bfa      	ldrb	r2, [r7, #15]
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	b298      	uxth	r0, r3
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	440b      	add	r3, r1
 8009538:	3336      	adds	r3, #54	; 0x36
 800953a:	4602      	mov	r2, r0
 800953c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	440b      	add	r3, r1
 800954e:	3303      	adds	r3, #3
 8009550:	2200      	movs	r2, #0
 8009552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009554:	7bfa      	ldrb	r2, [r7, #15]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	440b      	add	r3, r1
 8009562:	3338      	adds	r3, #56	; 0x38
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009568:	7bfa      	ldrb	r2, [r7, #15]
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	440b      	add	r3, r1
 8009576:	333c      	adds	r3, #60	; 0x3c
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800957c:	7bfa      	ldrb	r2, [r7, #15]
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	440b      	add	r3, r1
 800958a:	3340      	adds	r3, #64	; 0x40
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	3301      	adds	r3, #1
 8009594:	73fb      	strb	r3, [r7, #15]
 8009596:	7bfa      	ldrb	r2, [r7, #15]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d3ad      	bcc.n	80094fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e044      	b.n	8009630 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095a6:	7bfa      	ldrb	r2, [r7, #15]
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	440b      	add	r3, r1
 80095b4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095bc:	7bfa      	ldrb	r2, [r7, #15]
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	440b      	add	r3, r1
 80095ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80095ce:	7bfa      	ldrb	r2, [r7, #15]
 80095d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095d2:	7bfa      	ldrb	r2, [r7, #15]
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	440b      	add	r3, r1
 80095e0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095e8:	7bfa      	ldrb	r2, [r7, #15]
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	440b      	add	r3, r1
 80095f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095fe:	7bfa      	ldrb	r2, [r7, #15]
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009614:	7bfa      	ldrb	r2, [r7, #15]
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	440b      	add	r3, r1
 8009622:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3301      	adds	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
 8009630:	7bfa      	ldrb	r2, [r7, #15]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d3b5      	bcc.n	80095a6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	687e      	ldr	r6, [r7, #4]
 8009642:	466d      	mov	r5, sp
 8009644:	f106 0410 	add.w	r4, r6, #16
 8009648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800964a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	1d33      	adds	r3, r6, #4
 8009652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009654:	6838      	ldr	r0, [r7, #0]
 8009656:	f005 fc93 	bl	800ef80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d102      	bne.n	8009678 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fc29 	bl	800aeca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_PCD_Start+0x16>
 8009694:	2302      	movs	r3, #2
 8009696:	e012      	b.n	80096be <HAL_PCD_Start+0x3c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f005 fc39 	bl	800ef1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f007 fe52 	bl	8011358 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f007 fe57 	bl	8011386 <USB_ReadInterrupts>
 80096d8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fb26 	bl	8009d36 <PCD_EP_ISR_Handler>

    return;
 80096ea:	e110      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d013      	beq.n	800971e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096fe:	b29a      	uxth	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009708:	b292      	uxth	r2, r2
 800970a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f009 fde7 	bl	80132e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f8fc 	bl	8009914 <HAL_PCD_SetAddress>

    return;
 800971c:	e0f7      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00c      	beq.n	8009742 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800973a:	b292      	uxth	r2, r2
 800973c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009740:	e0e5      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00c      	beq.n	8009766 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009754:	b29a      	uxth	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800975e:	b292      	uxth	r2, r2
 8009760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009764:	e0d3      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d034      	beq.n	80097da <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0204 	bic.w	r2, r2, #4
 8009782:	b292      	uxth	r2, r2
 8009784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009790:	b29a      	uxth	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0208 	bic.w	r2, r2, #8
 800979a:	b292      	uxth	r2, r2
 800979c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d107      	bne.n	80097ba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f009 ff89 	bl	80136cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f009 fdca 	bl	8013354 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097d2:	b292      	uxth	r2, r2
 80097d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80097d8:	e099      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d027      	beq.n	8009834 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0208 	orr.w	r2, r2, #8
 80097f6:	b292      	uxth	r2, r2
 80097f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009804:	b29a      	uxth	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800980e:	b292      	uxth	r2, r2
 8009810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800981c:	b29a      	uxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0204 	orr.w	r2, r2, #4
 8009826:	b292      	uxth	r2, r2
 8009828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f009 fd77 	bl	8013320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009832:	e06c      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b00      	cmp	r3, #0
 800983c:	d040      	beq.n	80098c0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009846:	b29a      	uxth	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009850:	b292      	uxth	r2, r2
 8009852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d12b      	bne.n	80098b8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0204 	orr.w	r2, r2, #4
 8009872:	b292      	uxth	r2, r2
 8009874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0208 	orr.w	r2, r2, #8
 800988a:	b292      	uxth	r2, r2
 800988c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	089b      	lsrs	r3, r3, #2
 80098a4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80098ae:	2101      	movs	r1, #1
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f009 ff0b 	bl	80136cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80098b6:	e02a      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f009 fd31 	bl	8013320 <HAL_PCD_SuspendCallback>
    return;
 80098be:	e026      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00f      	beq.n	80098ea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80098dc:	b292      	uxth	r2, r2
 80098de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f009 fcef 	bl	80132c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80098e8:	e011      	b.n	800990e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00c      	beq.n	800990e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009906:	b292      	uxth	r2, r2
 8009908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800990c:	bf00      	nop
  }
}
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009926:	2b01      	cmp	r3, #1
 8009928:	d101      	bne.n	800992e <HAL_PCD_SetAddress+0x1a>
 800992a:	2302      	movs	r3, #2
 800992c:	e013      	b.n	8009956 <HAL_PCD_SetAddress+0x42>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f007 fcf2 	bl	8011330 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	461a      	mov	r2, r3
 800996c:	4603      	mov	r3, r0
 800996e:	70fb      	strb	r3, [r7, #3]
 8009970:	460b      	mov	r3, r1
 8009972:	803b      	strh	r3, [r7, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800997c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da0e      	bge.n	80099a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	705a      	strb	r2, [r3, #1]
 80099a0:	e00e      	b.n	80099c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 0207 	and.w	r2, r3, #7
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80099cc:	883a      	ldrh	r2, [r7, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	78ba      	ldrb	r2, [r7, #2]
 80099d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80099ea:	78bb      	ldrb	r3, [r7, #2]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d102      	bne.n	80099f6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d101      	bne.n	8009a04 <HAL_PCD_EP_Open+0xa6>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e00e      	b.n	8009a22 <HAL_PCD_EP_Open+0xc4>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68f9      	ldr	r1, [r7, #12]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f005 fad6 	bl	800efc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009a20:	7afb      	ldrb	r3, [r7, #11]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	460b      	mov	r3, r1
 8009a34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da0e      	bge.n	8009a5c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	705a      	strb	r2, [r3, #1]
 8009a5a:	e00e      	b.n	8009a7a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	f003 0207 	and.w	r2, r3, #7
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_PCD_EP_Close+0x6a>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e00e      	b.n	8009ab2 <HAL_PCD_EP_Close+0x88>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68f9      	ldr	r1, [r7, #12]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f005 fe22 	bl	800f6ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009aca:	7afb      	ldrb	r3, [r7, #11]
 8009acc:	f003 0207 	and.w	r2, r3, #7
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2200      	movs	r2, #0
 8009af2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2200      	movs	r2, #0
 8009af8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d106      	bne.n	8009b1e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f005 ffd5 	bl	800fac6 <USB_EPStartXfer>
 8009b1c:	e005      	b.n	8009b2a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6979      	ldr	r1, [r7, #20]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f005 ffce 	bl	800fac6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	f003 0207 	and.w	r2, r3, #7
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	440b      	add	r3, r1
 8009b52:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009b56:	681b      	ldr	r3, [r3, #0]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	607a      	str	r2, [r7, #4]
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	460b      	mov	r3, r1
 8009b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4413      	add	r3, r2
 8009b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2201      	movs	r2, #1
 8009bae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6979      	ldr	r1, [r7, #20]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f005 ff7a 	bl	800fac6 <USB_EPStartXfer>
 8009bd2:	e005      	b.n	8009be0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f005 ff73 	bl	800fac6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	f003 0207 	and.w	r2, r3, #7
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d901      	bls.n	8009c08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e03e      	b.n	8009c86 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	da0e      	bge.n	8009c2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	4413      	add	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	705a      	strb	r2, [r3, #1]
 8009c2c:	e00c      	b.n	8009c48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4413      	add	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_PCD_EP_SetStall+0x7e>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e00e      	b.n	8009c86 <HAL_PCD_EP_SetStall+0x9c>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f007 fa5b 	bl	8011132 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	f003 020f 	and.w	r2, r3, #15
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d901      	bls.n	8009cac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e040      	b.n	8009d2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da0e      	bge.n	8009cd2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	705a      	strb	r2, [r3, #1]
 8009cd0:	e00e      	b.n	8009cf0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	f003 0207 	and.w	r2, r3, #7
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_PCD_EP_ClrStall+0x82>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e00e      	b.n	8009d2e <HAL_PCD_EP_ClrStall+0xa0>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f007 fa58 	bl	80111d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b096      	sub	sp, #88	; 0x58
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009d3e:	e39c      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009d4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 030f 	and.w	r3, r3, #15
 8009d56:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8009d5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f040 815e 	bne.w	800a020 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009d64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d150      	bne.n	8009e12 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d80:	81fb      	strh	r3, [r7, #14]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	89fb      	ldrh	r3, [r7, #14]
 8009d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3328      	adds	r3, #40	; 0x28
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	4413      	add	r3, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	4413      	add	r3, r2
 8009db4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc4:	695a      	ldr	r2, [r3, #20]
 8009dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	441a      	add	r2, r3
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f009 fa5d 	bl	8013292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 834a 	beq.w	800a47a <PCD_EP_ISR_Handler+0x744>
 8009de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 8345 	bne.w	800a47a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	b292      	uxth	r2, r2
 8009e04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009e10:	e333      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009e18:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009e24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d032      	beq.n	8009e96 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	4413      	add	r3, r2
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e56:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f007 fadd 	bl	801142a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	823b      	strh	r3, [r7, #16]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	8a3a      	ldrh	r2, [r7, #16]
 8009e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f009 f9d2 	bl	8013238 <HAL_PCD_SetupStageCallback>
 8009e94:	e2f1      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009e96:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f280 82ed 	bge.w	800a47a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009eac:	4013      	ands	r3, r2
 8009eae:	83fb      	strh	r3, [r7, #30]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	8bfa      	ldrh	r2, [r7, #30]
 8009eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009eba:	b292      	uxth	r2, r2
 8009ebc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d019      	beq.n	8009f22 <PCD_EP_ISR_Handler+0x1ec>
 8009eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d015      	beq.n	8009f22 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efc:	6959      	ldr	r1, [r3, #20]
 8009efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f00:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f04:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	f007 fa8f 	bl	801142a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f0e:	695a      	ldr	r2, [r3, #20]
 8009f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	441a      	add	r2, r3
 8009f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f18:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f009 f99d 	bl	801325c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 82a3 	bne.w	800a47a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	61bb      	str	r3, [r7, #24]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	4413      	add	r3, r2
 8009f4a:	61bb      	str	r3, [r7, #24]
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	2b3e      	cmp	r3, #62	; 0x3e
 8009f5a:	d918      	bls.n	8009f8e <PCD_EP_ISR_Handler+0x258>
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	647b      	str	r3, [r7, #68]	; 0x44
 8009f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <PCD_EP_ISR_Handler+0x240>
 8009f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f72:	3b01      	subs	r3, #1
 8009f74:	647b      	str	r3, [r7, #68]	; 0x44
 8009f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	029b      	lsls	r3, r3, #10
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	e029      	b.n	8009fe2 <PCD_EP_ISR_Handler+0x2ac>
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d112      	bne.n	8009fbc <PCD_EP_ISR_Handler+0x286>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	801a      	strh	r2, [r3, #0]
 8009fba:	e012      	b.n	8009fe2 <PCD_EP_ISR_Handler+0x2ac>
 8009fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8009fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <PCD_EP_ISR_Handler+0x2a0>
 8009fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	029b      	lsls	r3, r3, #10
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff2:	827b      	strh	r3, [r7, #18]
 8009ff4:	8a7b      	ldrh	r3, [r7, #18]
 8009ff6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ffa:	827b      	strh	r3, [r7, #18]
 8009ffc:	8a7b      	ldrh	r3, [r7, #18]
 8009ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a002:	827b      	strh	r3, [r7, #18]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	8a7b      	ldrh	r3, [r7, #18]
 800a00a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	8013      	strh	r3, [r2, #0]
 800a01e:	e22c      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a034:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f280 80f6 	bge.w	800a22a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a054:	4013      	ands	r3, r2
 800a056:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a06c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a070:	b292      	uxth	r2, r2
 800a072:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a074:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800a078:	4613      	mov	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4413      	add	r3, r2
 800a088:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08c:	7b1b      	ldrb	r3, [r3, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d123      	bne.n	800a0da <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800a0ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 808e 	beq.w	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ca:	6959      	ldr	r1, [r3, #20]
 800a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ce:	88da      	ldrh	r2, [r3, #6]
 800a0d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a0d4:	f007 f9a9 	bl	801142a <USB_ReadPMA>
 800a0d8:	e082      	b.n	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0dc:	78db      	ldrb	r3, [r3, #3]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d10a      	bne.n	800a0f8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a0e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f9d3 	bl	800a496 <HAL_PCD_EP_DB_Receive>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a0f6:	e073      	b.n	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	441a      	add	r2, r3
 800a124:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a138:	b29b      	uxth	r3, r3
 800a13a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d022      	beq.n	800a19c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a15e:	b29b      	uxth	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	4413      	add	r3, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	4413      	add	r3, r2
 800a170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a17a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800a17e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a182:	2b00      	cmp	r3, #0
 800a184:	d02c      	beq.n	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18c:	6959      	ldr	r1, [r3, #20]
 800a18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a190:	891a      	ldrh	r2, [r3, #8]
 800a192:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a196:	f007 f948 	bl	801142a <USB_ReadPMA>
 800a19a:	e021      	b.n	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6812      	ldr	r2, [r2, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800a1c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d2:	6959      	ldr	r1, [r3, #20]
 800a1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d6:	895a      	ldrh	r2, [r3, #10]
 800a1d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a1dc:	f007 f925 	bl	801142a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a1e8:	441a      	add	r2, r3
 800a1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f0:	695a      	ldr	r2, [r3, #20]
 800a1f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a1f6:	441a      	add	r2, r3
 800a1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <PCD_EP_ISR_Handler+0x4da>
 800a204:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d206      	bcs.n	800a21e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f009 f820 	bl	801325c <HAL_PCD_DataOutStageCallback>
 800a21c:	e005      	b.n	800a22a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a224:	4618      	mov	r0, r3
 800a226:	f005 fc4e 	bl	800fac6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a22a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 8121 	beq.w	800a47a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800a238:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	4413      	add	r3, r2
 800a24a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a266:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	441a      	add	r2, r3
 800a278:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800a288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28a:	78db      	ldrb	r3, [r3, #3]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	f000 80a2 	beq.w	800a3d6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800a292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a294:	2200      	movs	r2, #0
 800a296:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a29a:	7b1b      	ldrb	r3, [r3, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8093 	beq.w	800a3c8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a2a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d046      	beq.n	800a33c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d126      	bne.n	800a304 <PCD_EP_ISR_Handler+0x5ce>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	4413      	add	r3, r2
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	00da      	lsls	r2, r3, #3
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2dc:	623b      	str	r3, [r7, #32]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	801a      	strh	r2, [r3, #0]
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	801a      	strh	r2, [r3, #0]
 800a302:	e061      	b.n	800a3c8 <PCD_EP_ISR_Handler+0x692>
 800a304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a306:	785b      	ldrb	r3, [r3, #1]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d15d      	bne.n	800a3c8 <PCD_EP_ISR_Handler+0x692>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	4413      	add	r3, r2
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	00da      	lsls	r2, r3, #3
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	4413      	add	r3, r2
 800a32e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2200      	movs	r2, #0
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e045      	b.n	800a3c8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d126      	bne.n	800a398 <PCD_EP_ISR_Handler+0x662>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	637b      	str	r3, [r7, #52]	; 0x34
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35e:	4413      	add	r3, r2
 800a360:	637b      	str	r3, [r7, #52]	; 0x34
 800a362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	00da      	lsls	r2, r3, #3
 800a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36a:	4413      	add	r3, r2
 800a36c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a370:	633b      	str	r3, [r7, #48]	; 0x30
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a38c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a390:	b29a      	uxth	r2, r3
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	e017      	b.n	800a3c8 <PCD_EP_ISR_Handler+0x692>
 800a398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d113      	bne.n	800a3c8 <PCD_EP_ISR_Handler+0x692>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ae:	4413      	add	r3, r2
 800a3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	00da      	lsls	r2, r3, #3
 800a3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f008 ff5f 	bl	8013292 <HAL_PCD_DataInStageCallback>
 800a3d4:	e051      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a3d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d144      	bne.n	800a46c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6812      	ldr	r2, [r2, #0]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a412:	429a      	cmp	r2, r3
 800a414:	d907      	bls.n	800a426 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800a416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a41e:	1ad2      	subs	r2, r2, r3
 800a420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a422:	619a      	str	r2, [r3, #24]
 800a424:	e002      	b.n	800a42c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800a426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a428:	2200      	movs	r2, #0
 800a42a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d106      	bne.n	800a442 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f008 ff29 	bl	8013292 <HAL_PCD_DataInStageCallback>
 800a440:	e01b      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a444:	695a      	ldr	r2, [r3, #20]
 800a446:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a44a:	441a      	add	r2, r3
 800a44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a452:	69da      	ldr	r2, [r3, #28]
 800a454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a458:	441a      	add	r2, r3
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a464:	4618      	mov	r0, r3
 800a466:	f005 fb2e 	bl	800fac6 <USB_EPStartXfer>
 800a46a:	e006      	b.n	800a47a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a46c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a470:	461a      	mov	r2, r3
 800a472:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f917 	bl	800a6a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a482:	b29b      	uxth	r3, r3
 800a484:	b21b      	sxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	f6ff ac5a 	blt.w	8009d40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3758      	adds	r7, #88	; 0x58
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b088      	sub	sp, #32
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	60b9      	str	r1, [r7, #8]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d07c      	beq.n	800a5a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	699a      	ldr	r2, [r3, #24]
 800a4d8:	8b7b      	ldrh	r3, [r7, #26]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d306      	bcc.n	800a4ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	699a      	ldr	r2, [r3, #24]
 800a4e2:	8b7b      	ldrh	r3, [r7, #26]
 800a4e4:	1ad2      	subs	r2, r2, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	619a      	str	r2, [r3, #24]
 800a4ea:	e002      	b.n	800a4f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d123      	bne.n	800a542 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a514:	833b      	strh	r3, [r7, #24]
 800a516:	8b3b      	ldrh	r3, [r7, #24]
 800a518:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a51c:	833b      	strh	r3, [r7, #24]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	441a      	add	r2, r3
 800a52c:	8b3b      	ldrh	r3, [r7, #24]
 800a52e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53e:	b29b      	uxth	r3, r3
 800a540:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01f      	beq.n	800a58c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a566:	82fb      	strh	r3, [r7, #22]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	441a      	add	r2, r3
 800a576:	8afb      	ldrh	r3, [r7, #22]
 800a578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a57c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a588:	b29b      	uxth	r3, r3
 800a58a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a58c:	8b7b      	ldrh	r3, [r7, #26]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 8085 	beq.w	800a69e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6818      	ldr	r0, [r3, #0]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6959      	ldr	r1, [r3, #20]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	891a      	ldrh	r2, [r3, #8]
 800a5a0:	8b7b      	ldrh	r3, [r7, #26]
 800a5a2:	f006 ff42 	bl	801142a <USB_ReadPMA>
 800a5a6:	e07a      	b.n	800a69e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	6812      	ldr	r2, [r2, #0]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	8b7b      	ldrh	r3, [r7, #26]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d306      	bcc.n	800a5e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	699a      	ldr	r2, [r3, #24]
 800a5dc:	8b7b      	ldrh	r3, [r7, #26]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	619a      	str	r2, [r3, #24]
 800a5e4:	e002      	b.n	800a5ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d123      	bne.n	800a63c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	83fb      	strh	r3, [r7, #30]
 800a610:	8bfb      	ldrh	r3, [r7, #30]
 800a612:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a616:	83fb      	strh	r3, [r7, #30]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	441a      	add	r2, r3
 800a626:	8bfb      	ldrh	r3, [r7, #30]
 800a628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a62c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a638:	b29b      	uxth	r3, r3
 800a63a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a63c:	88fb      	ldrh	r3, [r7, #6]
 800a63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d11f      	bne.n	800a686 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29b      	uxth	r3, r3
 800a658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a65c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a660:	83bb      	strh	r3, [r7, #28]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	8bbb      	ldrh	r3, [r7, #28]
 800a672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a682:	b29b      	uxth	r3, r3
 800a684:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a686:	8b7b      	ldrh	r3, [r7, #26]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d008      	beq.n	800a69e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6959      	ldr	r1, [r3, #20]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	895a      	ldrh	r2, [r3, #10]
 800a698:	8b7b      	ldrh	r3, [r7, #26]
 800a69a:	f006 fec6 	bl	801142a <USB_ReadPMA>
    }
  }

  return count;
 800a69e:	8b7b      	ldrh	r3, [r7, #26]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0a2      	sub	sp, #136	; 0x88
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 81c5 	beq.w	800aa4c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d907      	bls.n	800a706 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6fe:	1ad2      	subs	r2, r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	619a      	str	r2, [r3, #24]
 800a704:	e002      	b.n	800a70c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2200      	movs	r2, #0
 800a70a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f040 80b9 	bne.w	800a888 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d126      	bne.n	800a76c <HAL_PCD_EP_DB_Transmit+0xc4>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	62bb      	str	r3, [r7, #40]	; 0x28
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	4413      	add	r3, r2
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	00da      	lsls	r2, r3, #3
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73e:	4413      	add	r3, r2
 800a740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a750:	b29a      	uxth	r2, r3
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	801a      	strh	r2, [r3, #0]
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a764:	b29a      	uxth	r2, r3
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	e01a      	b.n	800a7a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	785b      	ldrb	r3, [r3, #1]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d116      	bne.n	800a7a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	633b      	str	r3, [r7, #48]	; 0x30
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a782:	b29b      	uxth	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	4413      	add	r3, r2
 800a78a:	633b      	str	r3, [r7, #48]	; 0x30
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	00da      	lsls	r2, r3, #3
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	4413      	add	r3, r2
 800a796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	2200      	movs	r2, #0
 800a7a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	623b      	str	r3, [r7, #32]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d126      	bne.n	800a7fe <HAL_PCD_EP_DB_Transmit+0x156>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	61bb      	str	r3, [r7, #24]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	00da      	lsls	r2, r3, #3
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	801a      	strh	r2, [r3, #0]
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	801a      	strh	r2, [r3, #0]
 800a7fc:	e017      	b.n	800a82e <HAL_PCD_EP_DB_Transmit+0x186>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d113      	bne.n	800a82e <HAL_PCD_EP_DB_Transmit+0x186>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a80e:	b29b      	uxth	r3, r3
 800a810:	461a      	mov	r2, r3
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	4413      	add	r3, r2
 800a816:	623b      	str	r3, [r7, #32]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	00da      	lsls	r2, r3, #3
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	4413      	add	r3, r2
 800a822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a826:	61fb      	str	r3, [r7, #28]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	2200      	movs	r2, #0
 800a82c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	4619      	mov	r1, r3
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f008 fd2c 	bl	8013292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a83a:	88fb      	ldrh	r3, [r7, #6]
 800a83c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 82d2 	beq.w	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	827b      	strh	r3, [r7, #18]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	441a      	add	r2, r3
 800a870:	8a7b      	ldrh	r3, [r7, #18]
 800a872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a87a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a882:	b29b      	uxth	r3, r3
 800a884:	8013      	strh	r3, [r2, #0]
 800a886:	e2b0      	b.n	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d021      	beq.n	800a8d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	441a      	add	r2, r3
 800a8be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	f040 8284 	bne.w	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	695a      	ldr	r2, [r3, #20]
 800a8e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ea:	441a      	add	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	69da      	ldr	r2, [r3, #28]
 800a8f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8f8:	441a      	add	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6a1a      	ldr	r2, [r3, #32]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	429a      	cmp	r2, r3
 800a908:	d309      	bcc.n	800a91e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	6a1a      	ldr	r2, [r3, #32]
 800a914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	621a      	str	r2, [r3, #32]
 800a91c:	e015      	b.n	800a94a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d107      	bne.n	800a936 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800a926:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a92a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a934:	e009      	b.n	800a94a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2200      	movs	r2, #0
 800a948:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	785b      	ldrb	r3, [r3, #1]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d155      	bne.n	800a9fe <HAL_PCD_EP_DB_Transmit+0x356>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a960:	b29b      	uxth	r3, r3
 800a962:	461a      	mov	r2, r3
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	4413      	add	r3, r2
 800a968:	63bb      	str	r3, [r7, #56]	; 0x38
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	00da      	lsls	r2, r3, #3
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	4413      	add	r3, r2
 800a974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a978:	637b      	str	r3, [r7, #52]	; 0x34
 800a97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97c:	2b3e      	cmp	r3, #62	; 0x3e
 800a97e:	d916      	bls.n	800a9ae <HAL_PCD_EP_DB_Transmit+0x306>
 800a980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a982:	095b      	lsrs	r3, r3, #5
 800a984:	64bb      	str	r3, [r7, #72]	; 0x48
 800a986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a988:	f003 031f 	and.w	r3, r3, #31
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800a990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a992:	3b01      	subs	r3, #1
 800a994:	64bb      	str	r3, [r7, #72]	; 0x48
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	b29b      	uxth	r3, r3
 800a99a:	029b      	lsls	r3, r3, #10
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	801a      	strh	r2, [r3, #0]
 800a9ac:	e043      	b.n	800aa36 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d112      	bne.n	800a9da <HAL_PCD_EP_DB_Transmit+0x332>
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	e02d      	b.n	800aa36 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9dc:	085b      	lsrs	r3, r3, #1
 800a9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <HAL_PCD_EP_DB_Transmit+0x348>
 800a9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	029b      	lsls	r3, r3, #10
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	e01b      	b.n	800aa36 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d117      	bne.n	800aa36 <HAL_PCD_EP_DB_Transmit+0x38e>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	461a      	mov	r2, r3
 800aa18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa1a:	4413      	add	r3, r2
 800aa1c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	00da      	lsls	r2, r3, #3
 800aa24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa26:	4413      	add	r3, r2
 800aa28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	6959      	ldr	r1, [r3, #20]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	891a      	ldrh	r2, [r3, #8]
 800aa42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f006 fcae 	bl	80113a6 <USB_WritePMA>
 800aa4a:	e1ce      	b.n	800adea <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	699a      	ldr	r2, [r3, #24]
 800aa78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d307      	bcc.n	800aa90 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	699a      	ldr	r2, [r3, #24]
 800aa84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa88:	1ad2      	subs	r2, r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	619a      	str	r2, [r3, #24]
 800aa8e:	e002      	b.n	800aa96 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2200      	movs	r2, #0
 800aa94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f040 80c4 	bne.w	800ac28 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d126      	bne.n	800aaf6 <HAL_PCD_EP_DB_Transmit+0x44e>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	66bb      	str	r3, [r7, #104]	; 0x68
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aabc:	4413      	add	r3, r2
 800aabe:	66bb      	str	r3, [r7, #104]	; 0x68
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	00da      	lsls	r2, r3, #3
 800aac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aac8:	4413      	add	r3, r2
 800aaca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aace:	667b      	str	r3, [r7, #100]	; 0x64
 800aad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aada:	b29a      	uxth	r2, r3
 800aadc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aade:	801a      	strh	r2, [r3, #0]
 800aae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaf2:	801a      	strh	r2, [r3, #0]
 800aaf4:	e01a      	b.n	800ab2c <HAL_PCD_EP_DB_Transmit+0x484>
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	785b      	ldrb	r3, [r3, #1]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d116      	bne.n	800ab2c <HAL_PCD_EP_DB_Transmit+0x484>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	673b      	str	r3, [r7, #112]	; 0x70
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab12:	4413      	add	r3, r2
 800ab14:	673b      	str	r3, [r7, #112]	; 0x70
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	00da      	lsls	r2, r3, #3
 800ab1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab1e:	4413      	add	r3, r2
 800ab20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab28:	2200      	movs	r2, #0
 800ab2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d12f      	bne.n	800ab9a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab52:	4413      	add	r3, r2
 800ab54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	00da      	lsls	r2, r3, #3
 800ab5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab62:	4413      	add	r3, r2
 800ab64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab7e:	801a      	strh	r2, [r3, #0]
 800ab80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab96:	801a      	strh	r2, [r3, #0]
 800ab98:	e017      	b.n	800abca <HAL_PCD_EP_DB_Transmit+0x522>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d113      	bne.n	800abca <HAL_PCD_EP_DB_Transmit+0x522>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abaa:	b29b      	uxth	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abb0:	4413      	add	r3, r2
 800abb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	00da      	lsls	r2, r3, #3
 800abba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abbc:	4413      	add	r3, r2
 800abbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800abc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc6:	2200      	movs	r2, #0
 800abc8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f008 fb5e 	bl	8013292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f040 8104 	bne.w	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	881b      	ldrh	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	441a      	add	r2, r3
 800ac0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ac12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	8013      	strh	r3, [r2, #0]
 800ac26:	e0e0      	b.n	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d121      	bne.n	800ac76 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	441a      	add	r2, r3
 800ac5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	f040 80b4 	bne.w	800adea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	695a      	ldr	r2, [r3, #20]
 800ac86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac8a:	441a      	add	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	69da      	ldr	r2, [r3, #28]
 800ac94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac98:	441a      	add	r2, r3
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	6a1a      	ldr	r2, [r3, #32]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d309      	bcc.n	800acbe <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	6a1a      	ldr	r2, [r3, #32]
 800acb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb6:	1ad2      	subs	r2, r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	621a      	str	r2, [r3, #32]
 800acbc:	e015      	b.n	800acea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800acc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800acd4:	e009      	b.n	800acea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	663b      	str	r3, [r7, #96]	; 0x60
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d155      	bne.n	800ada4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad0c:	4413      	add	r3, r2
 800ad0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	00da      	lsls	r2, r3, #3
 800ad16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad18:	4413      	add	r3, r2
 800ad1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad1e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad22:	2b3e      	cmp	r3, #62	; 0x3e
 800ad24:	d916      	bls.n	800ad54 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800ad26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad28:	095b      	lsrs	r3, r3, #5
 800ad2a:	677b      	str	r3, [r7, #116]	; 0x74
 800ad2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad2e:	f003 031f 	and.w	r3, r3, #31
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <HAL_PCD_EP_DB_Transmit+0x694>
 800ad36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	677b      	str	r3, [r7, #116]	; 0x74
 800ad3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	029b      	lsls	r3, r3, #10
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad50:	801a      	strh	r2, [r3, #0]
 800ad52:	e040      	b.n	800add6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ad54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d112      	bne.n	800ad80 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800ad5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad68:	801a      	strh	r2, [r3, #0]
 800ad6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	e02a      	b.n	800add6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ad80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad82:	085b      	lsrs	r3, r3, #1
 800ad84:	677b      	str	r3, [r7, #116]	; 0x74
 800ad86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800ad90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad92:	3301      	adds	r3, #1
 800ad94:	677b      	str	r3, [r7, #116]	; 0x74
 800ad96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	029b      	lsls	r3, r3, #10
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ada0:	801a      	strh	r2, [r3, #0]
 800ada2:	e018      	b.n	800add6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	785b      	ldrb	r3, [r3, #1]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d114      	bne.n	800add6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	461a      	mov	r2, r3
 800adb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adba:	4413      	add	r3, r2
 800adbc:	663b      	str	r3, [r7, #96]	; 0x60
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	00da      	lsls	r2, r3, #3
 800adc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adc6:	4413      	add	r3, r2
 800adc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add0:	b29a      	uxth	r2, r3
 800add2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800add4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6959      	ldr	r1, [r3, #20]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	895a      	ldrh	r2, [r3, #10]
 800ade2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f006 fade 	bl	80113a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae04:	823b      	strh	r3, [r7, #16]
 800ae06:	8a3b      	ldrh	r3, [r7, #16]
 800ae08:	f083 0310 	eor.w	r3, r3, #16
 800ae0c:	823b      	strh	r3, [r7, #16]
 800ae0e:	8a3b      	ldrh	r3, [r7, #16]
 800ae10:	f083 0320 	eor.w	r3, r3, #32
 800ae14:	823b      	strh	r3, [r7, #16]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	441a      	add	r2, r3
 800ae24:	8a3b      	ldrh	r3, [r7, #16]
 800ae26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3788      	adds	r7, #136	; 0x88
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	817b      	strh	r3, [r7, #10]
 800ae52:	4613      	mov	r3, r2
 800ae54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ae56:	897b      	ldrh	r3, [r7, #10]
 800ae58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae62:	897b      	ldrh	r3, [r7, #10]
 800ae64:	f003 0307 	and.w	r3, r3, #7
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e009      	b.n	800ae8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae7a:	897a      	ldrh	r2, [r7, #10]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ae8e:	893b      	ldrh	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d107      	bne.n	800aea4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	2200      	movs	r2, #0
 800ae98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	80da      	strh	r2, [r3, #6]
 800aea2:	e00b      	b.n	800aebc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2201      	movs	r2, #1
 800aea8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	0c1b      	lsrs	r3, r3, #16
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b085      	sub	sp, #20
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f043 0301 	orr.w	r3, r3, #1
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800af02:	b29b      	uxth	r3, r3
 800af04:	f043 0302 	orr.w	r3, r3, #2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
	...

0800af20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d141      	bne.n	800afb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af2e:	4b4b      	ldr	r3, [pc, #300]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af3a:	d131      	bne.n	800afa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af3c:	4b47      	ldr	r3, [pc, #284]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af42:	4a46      	ldr	r2, [pc, #280]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800af4c:	4b43      	ldr	r3, [pc, #268]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af54:	4a41      	ldr	r2, [pc, #260]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af5c:	4b40      	ldr	r3, [pc, #256]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2232      	movs	r2, #50	; 0x32
 800af62:	fb02 f303 	mul.w	r3, r2, r3
 800af66:	4a3f      	ldr	r2, [pc, #252]	; (800b064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af68:	fba2 2303 	umull	r2, r3, r2, r3
 800af6c:	0c9b      	lsrs	r3, r3, #18
 800af6e:	3301      	adds	r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af72:	e002      	b.n	800af7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3b01      	subs	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af7a:	4b38      	ldr	r3, [pc, #224]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af86:	d102      	bne.n	800af8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1f2      	bne.n	800af74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af8e:	4b33      	ldr	r3, [pc, #204]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af9a:	d158      	bne.n	800b04e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e057      	b.n	800b050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afa0:	4b2e      	ldr	r3, [pc, #184]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afa6:	4a2d      	ldr	r2, [pc, #180]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800afb0:	e04d      	b.n	800b04e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb8:	d141      	bne.n	800b03e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800afba:	4b28      	ldr	r3, [pc, #160]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afc6:	d131      	bne.n	800b02c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afc8:	4b24      	ldr	r3, [pc, #144]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afce:	4a23      	ldr	r2, [pc, #140]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800afd8:	4b20      	ldr	r3, [pc, #128]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800afe0:	4a1e      	ldr	r2, [pc, #120]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800afe8:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2232      	movs	r2, #50	; 0x32
 800afee:	fb02 f303 	mul.w	r3, r2, r3
 800aff2:	4a1c      	ldr	r2, [pc, #112]	; (800b064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aff4:	fba2 2303 	umull	r2, r3, r2, r3
 800aff8:	0c9b      	lsrs	r3, r3, #18
 800affa:	3301      	adds	r3, #1
 800affc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800affe:	e002      	b.n	800b006 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b01      	subs	r3, #1
 800b004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b006:	4b15      	ldr	r3, [pc, #84]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b00e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b012:	d102      	bne.n	800b01a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1f2      	bne.n	800b000 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b01a:	4b10      	ldr	r3, [pc, #64]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b026:	d112      	bne.n	800b04e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e011      	b.n	800b050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b032:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b03c:	e007      	b.n	800b04e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b03e:	4b07      	ldr	r3, [pc, #28]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b046:	4a05      	ldr	r2, [pc, #20]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b04c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	40007000 	.word	0x40007000
 800b060:	20000000 	.word	0x20000000
 800b064:	431bde83 	.word	0x431bde83

0800b068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e306      	b.n	800b688 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	d075      	beq.n	800b172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b086:	4b97      	ldr	r3, [pc, #604]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f003 030c 	and.w	r3, r3, #12
 800b08e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b090:	4b94      	ldr	r3, [pc, #592]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b0c      	cmp	r3, #12
 800b09e:	d102      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x3e>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d002      	beq.n	800b0ac <HAL_RCC_OscConfig+0x44>
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b08      	cmp	r3, #8
 800b0aa:	d10b      	bne.n	800b0c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0ac:	4b8d      	ldr	r3, [pc, #564]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d05b      	beq.n	800b170 <HAL_RCC_OscConfig+0x108>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d157      	bne.n	800b170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e2e1      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0cc:	d106      	bne.n	800b0dc <HAL_RCC_OscConfig+0x74>
 800b0ce:	4b85      	ldr	r3, [pc, #532]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a84      	ldr	r2, [pc, #528]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	e01d      	b.n	800b118 <HAL_RCC_OscConfig+0xb0>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0e4:	d10c      	bne.n	800b100 <HAL_RCC_OscConfig+0x98>
 800b0e6:	4b7f      	ldr	r3, [pc, #508]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a7e      	ldr	r2, [pc, #504]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	4b7c      	ldr	r3, [pc, #496]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a7b      	ldr	r2, [pc, #492]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	e00b      	b.n	800b118 <HAL_RCC_OscConfig+0xb0>
 800b100:	4b78      	ldr	r3, [pc, #480]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a77      	ldr	r2, [pc, #476]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	4b75      	ldr	r3, [pc, #468]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a74      	ldr	r2, [pc, #464]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d013      	beq.n	800b148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b120:	f7fa ff58 	bl	8005fd4 <HAL_GetTick>
 800b124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b126:	e008      	b.n	800b13a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b128:	f7fa ff54 	bl	8005fd4 <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	2b64      	cmp	r3, #100	; 0x64
 800b134:	d901      	bls.n	800b13a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e2a6      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b13a:	4b6a      	ldr	r3, [pc, #424]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0f0      	beq.n	800b128 <HAL_RCC_OscConfig+0xc0>
 800b146:	e014      	b.n	800b172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b148:	f7fa ff44 	bl	8005fd4 <HAL_GetTick>
 800b14c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b14e:	e008      	b.n	800b162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b150:	f7fa ff40 	bl	8005fd4 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b64      	cmp	r3, #100	; 0x64
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e292      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b162:	4b60      	ldr	r3, [pc, #384]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f0      	bne.n	800b150 <HAL_RCC_OscConfig+0xe8>
 800b16e:	e000      	b.n	800b172 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d075      	beq.n	800b26a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b17e:	4b59      	ldr	r3, [pc, #356]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f003 030c 	and.w	r3, r3, #12
 800b186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b188:	4b56      	ldr	r3, [pc, #344]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	2b0c      	cmp	r3, #12
 800b196:	d102      	bne.n	800b19e <HAL_RCC_OscConfig+0x136>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d002      	beq.n	800b1a4 <HAL_RCC_OscConfig+0x13c>
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d11f      	bne.n	800b1e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1a4:	4b4f      	ldr	r3, [pc, #316]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <HAL_RCC_OscConfig+0x154>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e265      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1bc:	4b49      	ldr	r3, [pc, #292]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	061b      	lsls	r3, r3, #24
 800b1ca:	4946      	ldr	r1, [pc, #280]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b1d0:	4b45      	ldr	r3, [pc, #276]	; (800b2e8 <HAL_RCC_OscConfig+0x280>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fa feb1 	bl	8005f3c <HAL_InitTick>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d043      	beq.n	800b268 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e251      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d023      	beq.n	800b234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1ec:	4b3d      	ldr	r3, [pc, #244]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a3c      	ldr	r2, [pc, #240]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f8:	f7fa feec 	bl	8005fd4 <HAL_GetTick>
 800b1fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1fe:	e008      	b.n	800b212 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b200:	f7fa fee8 	bl	8005fd4 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d901      	bls.n	800b212 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b20e:	2303      	movs	r3, #3
 800b210:	e23a      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b212:	4b34      	ldr	r3, [pc, #208]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0f0      	beq.n	800b200 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b21e:	4b31      	ldr	r3, [pc, #196]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	061b      	lsls	r3, r3, #24
 800b22c:	492d      	ldr	r1, [pc, #180]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b22e:	4313      	orrs	r3, r2
 800b230:	604b      	str	r3, [r1, #4]
 800b232:	e01a      	b.n	800b26a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b234:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a2a      	ldr	r2, [pc, #168]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b23a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b240:	f7fa fec8 	bl	8005fd4 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b248:	f7fa fec4 	bl	8005fd4 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e216      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b25a:	4b22      	ldr	r3, [pc, #136]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1f0      	bne.n	800b248 <HAL_RCC_OscConfig+0x1e0>
 800b266:	e000      	b.n	800b26a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0308 	and.w	r3, r3, #8
 800b272:	2b00      	cmp	r3, #0
 800b274:	d041      	beq.n	800b2fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d01c      	beq.n	800b2b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b27e:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b284:	4a17      	ldr	r2, [pc, #92]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b286:	f043 0301 	orr.w	r3, r3, #1
 800b28a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b28e:	f7fa fea1 	bl	8005fd4 <HAL_GetTick>
 800b292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b294:	e008      	b.n	800b2a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b296:	f7fa fe9d 	bl	8005fd4 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d901      	bls.n	800b2a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e1ef      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b2a8:	4b0e      	ldr	r3, [pc, #56]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2ae:	f003 0302 	and.w	r3, r3, #2
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0ef      	beq.n	800b296 <HAL_RCC_OscConfig+0x22e>
 800b2b6:	e020      	b.n	800b2fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b2ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2be:	4a09      	ldr	r2, [pc, #36]	; (800b2e4 <HAL_RCC_OscConfig+0x27c>)
 800b2c0:	f023 0301 	bic.w	r3, r3, #1
 800b2c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c8:	f7fa fe84 	bl	8005fd4 <HAL_GetTick>
 800b2cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b2ce:	e00d      	b.n	800b2ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2d0:	f7fa fe80 	bl	8005fd4 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d906      	bls.n	800b2ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e1d2      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
 800b2e2:	bf00      	nop
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b2ec:	4b8c      	ldr	r3, [pc, #560]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b2ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1ea      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 80a6 	beq.w	800b454 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b308:	2300      	movs	r3, #0
 800b30a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b30c:	4b84      	ldr	r3, [pc, #528]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <HAL_RCC_OscConfig+0x2b4>
 800b318:	2301      	movs	r3, #1
 800b31a:	e000      	b.n	800b31e <HAL_RCC_OscConfig+0x2b6>
 800b31c:	2300      	movs	r3, #0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00d      	beq.n	800b33e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b322:	4b7f      	ldr	r3, [pc, #508]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b326:	4a7e      	ldr	r2, [pc, #504]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b32c:	6593      	str	r3, [r2, #88]	; 0x58
 800b32e:	4b7c      	ldr	r3, [pc, #496]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b33a:	2301      	movs	r3, #1
 800b33c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b33e:	4b79      	ldr	r3, [pc, #484]	; (800b524 <HAL_RCC_OscConfig+0x4bc>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b346:	2b00      	cmp	r3, #0
 800b348:	d118      	bne.n	800b37c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b34a:	4b76      	ldr	r3, [pc, #472]	; (800b524 <HAL_RCC_OscConfig+0x4bc>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a75      	ldr	r2, [pc, #468]	; (800b524 <HAL_RCC_OscConfig+0x4bc>)
 800b350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b356:	f7fa fe3d 	bl	8005fd4 <HAL_GetTick>
 800b35a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b35c:	e008      	b.n	800b370 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b35e:	f7fa fe39 	bl	8005fd4 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d901      	bls.n	800b370 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e18b      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b370:	4b6c      	ldr	r3, [pc, #432]	; (800b524 <HAL_RCC_OscConfig+0x4bc>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0f0      	beq.n	800b35e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d108      	bne.n	800b396 <HAL_RCC_OscConfig+0x32e>
 800b384:	4b66      	ldr	r3, [pc, #408]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38a:	4a65      	ldr	r2, [pc, #404]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b38c:	f043 0301 	orr.w	r3, r3, #1
 800b390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b394:	e024      	b.n	800b3e0 <HAL_RCC_OscConfig+0x378>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	2b05      	cmp	r3, #5
 800b39c:	d110      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x358>
 800b39e:	4b60      	ldr	r3, [pc, #384]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a4:	4a5e      	ldr	r2, [pc, #376]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3a6:	f043 0304 	orr.w	r3, r3, #4
 800b3aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3ae:	4b5c      	ldr	r3, [pc, #368]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b4:	4a5a      	ldr	r2, [pc, #360]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3b6:	f043 0301 	orr.w	r3, r3, #1
 800b3ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3be:	e00f      	b.n	800b3e0 <HAL_RCC_OscConfig+0x378>
 800b3c0:	4b57      	ldr	r3, [pc, #348]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c6:	4a56      	ldr	r2, [pc, #344]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3c8:	f023 0301 	bic.w	r3, r3, #1
 800b3cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3d0:	4b53      	ldr	r3, [pc, #332]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d6:	4a52      	ldr	r2, [pc, #328]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b3d8:	f023 0304 	bic.w	r3, r3, #4
 800b3dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d016      	beq.n	800b416 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e8:	f7fa fdf4 	bl	8005fd4 <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3ee:	e00a      	b.n	800b406 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3f0:	f7fa fdf0 	bl	8005fd4 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d901      	bls.n	800b406 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e140      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b406:	4b46      	ldr	r3, [pc, #280]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d0ed      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x388>
 800b414:	e015      	b.n	800b442 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b416:	f7fa fddd 	bl	8005fd4 <HAL_GetTick>
 800b41a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b41c:	e00a      	b.n	800b434 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b41e:	f7fa fdd9 	bl	8005fd4 <HAL_GetTick>
 800b422:	4602      	mov	r2, r0
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d901      	bls.n	800b434 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e129      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b434:	4b3a      	ldr	r3, [pc, #232]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1ed      	bne.n	800b41e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b442:	7ffb      	ldrb	r3, [r7, #31]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d105      	bne.n	800b454 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b448:	4b35      	ldr	r3, [pc, #212]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44c:	4a34      	ldr	r2, [pc, #208]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b44e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d03c      	beq.n	800b4da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01c      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b468:	4b2d      	ldr	r3, [pc, #180]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b46e:	4a2c      	ldr	r2, [pc, #176]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b470:	f043 0301 	orr.w	r3, r3, #1
 800b474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b478:	f7fa fdac 	bl	8005fd4 <HAL_GetTick>
 800b47c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b47e:	e008      	b.n	800b492 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b480:	f7fa fda8 	bl	8005fd4 <HAL_GetTick>
 800b484:	4602      	mov	r2, r0
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e0fa      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b492:	4b23      	ldr	r3, [pc, #140]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0ef      	beq.n	800b480 <HAL_RCC_OscConfig+0x418>
 800b4a0:	e01b      	b.n	800b4da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b4a2:	4b1f      	ldr	r3, [pc, #124]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b4a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4a8:	4a1d      	ldr	r2, [pc, #116]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b4aa:	f023 0301 	bic.w	r3, r3, #1
 800b4ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4b2:	f7fa fd8f 	bl	8005fd4 <HAL_GetTick>
 800b4b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b4b8:	e008      	b.n	800b4cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b4ba:	f7fa fd8b 	bl	8005fd4 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e0dd      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b4cc:	4b14      	ldr	r3, [pc, #80]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b4ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4d2:	f003 0302 	and.w	r3, r3, #2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1ef      	bne.n	800b4ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 80d1 	beq.w	800b686 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f003 030c 	and.w	r3, r3, #12
 800b4ec:	2b0c      	cmp	r3, #12
 800b4ee:	f000 808b 	beq.w	800b608 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d15e      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a08      	ldr	r2, [pc, #32]	; (800b520 <HAL_RCC_OscConfig+0x4b8>)
 800b500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b506:	f7fa fd65 	bl	8005fd4 <HAL_GetTick>
 800b50a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b50c:	e00c      	b.n	800b528 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b50e:	f7fa fd61 	bl	8005fd4 <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d905      	bls.n	800b528 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e0b3      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
 800b520:	40021000 	.word	0x40021000
 800b524:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b528:	4b59      	ldr	r3, [pc, #356]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1ec      	bne.n	800b50e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b534:	4b56      	ldr	r3, [pc, #344]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b536:	68da      	ldr	r2, [r3, #12]
 800b538:	4b56      	ldr	r3, [pc, #344]	; (800b694 <HAL_RCC_OscConfig+0x62c>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6a11      	ldr	r1, [r2, #32]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b544:	3a01      	subs	r2, #1
 800b546:	0112      	lsls	r2, r2, #4
 800b548:	4311      	orrs	r1, r2
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b54e:	0212      	lsls	r2, r2, #8
 800b550:	4311      	orrs	r1, r2
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b556:	0852      	lsrs	r2, r2, #1
 800b558:	3a01      	subs	r2, #1
 800b55a:	0552      	lsls	r2, r2, #21
 800b55c:	4311      	orrs	r1, r2
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b562:	0852      	lsrs	r2, r2, #1
 800b564:	3a01      	subs	r2, #1
 800b566:	0652      	lsls	r2, r2, #25
 800b568:	4311      	orrs	r1, r2
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b56e:	06d2      	lsls	r2, r2, #27
 800b570:	430a      	orrs	r2, r1
 800b572:	4947      	ldr	r1, [pc, #284]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b574:	4313      	orrs	r3, r2
 800b576:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b578:	4b45      	ldr	r3, [pc, #276]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a44      	ldr	r2, [pc, #272]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b57e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b582:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b584:	4b42      	ldr	r3, [pc, #264]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4a41      	ldr	r2, [pc, #260]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b58e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b590:	f7fa fd20 	bl	8005fd4 <HAL_GetTick>
 800b594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b596:	e008      	b.n	800b5aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b598:	f7fa fd1c 	bl	8005fd4 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d901      	bls.n	800b5aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e06e      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5aa:	4b39      	ldr	r3, [pc, #228]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0f0      	beq.n	800b598 <HAL_RCC_OscConfig+0x530>
 800b5b6:	e066      	b.n	800b686 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5b8:	4b35      	ldr	r3, [pc, #212]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a34      	ldr	r2, [pc, #208]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b5c4:	4b32      	ldr	r3, [pc, #200]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	4a31      	ldr	r2, [pc, #196]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b5d0:	4b2f      	ldr	r3, [pc, #188]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	4a2e      	ldr	r2, [pc, #184]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b5da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e0:	f7fa fcf8 	bl	8005fd4 <HAL_GetTick>
 800b5e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5e6:	e008      	b.n	800b5fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5e8:	f7fa fcf4 	bl	8005fd4 <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d901      	bls.n	800b5fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e046      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5fa:	4b25      	ldr	r3, [pc, #148]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1f0      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x580>
 800b606:	e03e      	b.n	800b686 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d101      	bne.n	800b614 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	e039      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b614:	4b1e      	ldr	r3, [pc, #120]	; (800b690 <HAL_RCC_OscConfig+0x628>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f003 0203 	and.w	r2, r3, #3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	429a      	cmp	r2, r3
 800b626:	d12c      	bne.n	800b682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	3b01      	subs	r3, #1
 800b634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b636:	429a      	cmp	r2, r3
 800b638:	d123      	bne.n	800b682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b644:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b646:	429a      	cmp	r2, r3
 800b648:	d11b      	bne.n	800b682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b656:	429a      	cmp	r2, r3
 800b658:	d113      	bne.n	800b682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b664:	085b      	lsrs	r3, r3, #1
 800b666:	3b01      	subs	r3, #1
 800b668:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d109      	bne.n	800b682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b678:	085b      	lsrs	r3, r3, #1
 800b67a:	3b01      	subs	r3, #1
 800b67c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b67e:	429a      	cmp	r2, r3
 800b680:	d001      	beq.n	800b686 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3720      	adds	r7, #32
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	40021000 	.word	0x40021000
 800b694:	019f800c 	.word	0x019f800c

0800b698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e11e      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b6b0:	4b91      	ldr	r3, [pc, #580]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d910      	bls.n	800b6e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6be:	4b8e      	ldr	r3, [pc, #568]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f023 020f 	bic.w	r2, r3, #15
 800b6c6:	498c      	ldr	r1, [pc, #560]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6ce:	4b8a      	ldr	r3, [pc, #552]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d001      	beq.n	800b6e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e106      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d073      	beq.n	800b7d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d129      	bne.n	800b748 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6f4:	4b81      	ldr	r3, [pc, #516]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e0f4      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b704:	f000 f99e 	bl	800ba44 <RCC_GetSysClockFreqFromPLLSource>
 800b708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	4a7c      	ldr	r2, [pc, #496]	; (800b900 <HAL_RCC_ClockConfig+0x268>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d93f      	bls.n	800b792 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b712:	4b7a      	ldr	r3, [pc, #488]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d009      	beq.n	800b732 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b726:	2b00      	cmp	r3, #0
 800b728:	d033      	beq.n	800b792 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d12f      	bne.n	800b792 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b732:	4b72      	ldr	r3, [pc, #456]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b73a:	4a70      	ldr	r2, [pc, #448]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b740:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b742:	2380      	movs	r3, #128	; 0x80
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	e024      	b.n	800b792 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d107      	bne.n	800b760 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b750:	4b6a      	ldr	r3, [pc, #424]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e0c6      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b760:	4b66      	ldr	r3, [pc, #408]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0be      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b770:	f000 f8ce 	bl	800b910 <HAL_RCC_GetSysClockFreq>
 800b774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	4a61      	ldr	r2, [pc, #388]	; (800b900 <HAL_RCC_ClockConfig+0x268>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d909      	bls.n	800b792 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b77e:	4b5f      	ldr	r3, [pc, #380]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b786:	4a5d      	ldr	r2, [pc, #372]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b78e:	2380      	movs	r3, #128	; 0x80
 800b790:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b792:	4b5a      	ldr	r3, [pc, #360]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f023 0203 	bic.w	r2, r3, #3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4957      	ldr	r1, [pc, #348]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7a4:	f7fa fc16 	bl	8005fd4 <HAL_GetTick>
 800b7a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7aa:	e00a      	b.n	800b7c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7ac:	f7fa fc12 	bl	8005fd4 <HAL_GetTick>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d901      	bls.n	800b7c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e095      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7c2:	4b4e      	ldr	r3, [pc, #312]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f003 020c 	and.w	r2, r3, #12
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d1eb      	bne.n	800b7ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d023      	beq.n	800b828 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7ec:	4b43      	ldr	r3, [pc, #268]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	4a42      	ldr	r2, [pc, #264]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b7f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b7f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d007      	beq.n	800b814 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b804:	4b3d      	ldr	r3, [pc, #244]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b80c:	4a3b      	ldr	r2, [pc, #236]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b80e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b814:	4b39      	ldr	r3, [pc, #228]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	4936      	ldr	r1, [pc, #216]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b822:	4313      	orrs	r3, r2
 800b824:	608b      	str	r3, [r1, #8]
 800b826:	e008      	b.n	800b83a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2b80      	cmp	r3, #128	; 0x80
 800b82c:	d105      	bne.n	800b83a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b82e:	4b33      	ldr	r3, [pc, #204]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	4a32      	ldr	r2, [pc, #200]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b834:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b838:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b83a:	4b2f      	ldr	r3, [pc, #188]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	d21d      	bcs.n	800b884 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b848:	4b2b      	ldr	r3, [pc, #172]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f023 020f 	bic.w	r2, r3, #15
 800b850:	4929      	ldr	r1, [pc, #164]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	4313      	orrs	r3, r2
 800b856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b858:	f7fa fbbc 	bl	8005fd4 <HAL_GetTick>
 800b85c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b85e:	e00a      	b.n	800b876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b860:	f7fa fbb8 	bl	8005fd4 <HAL_GetTick>
 800b864:	4602      	mov	r2, r0
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86e:	4293      	cmp	r3, r2
 800b870:	d901      	bls.n	800b876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e03b      	b.n	800b8ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b876:	4b20      	ldr	r3, [pc, #128]	; (800b8f8 <HAL_RCC_ClockConfig+0x260>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d1ed      	bne.n	800b860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d008      	beq.n	800b8a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b890:	4b1a      	ldr	r3, [pc, #104]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	4917      	ldr	r1, [pc, #92]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d009      	beq.n	800b8c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	490f      	ldr	r1, [pc, #60]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b8c2:	f000 f825 	bl	800b910 <HAL_RCC_GetSysClockFreq>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <HAL_RCC_ClockConfig+0x264>)
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	091b      	lsrs	r3, r3, #4
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	490c      	ldr	r1, [pc, #48]	; (800b904 <HAL_RCC_ClockConfig+0x26c>)
 800b8d4:	5ccb      	ldrb	r3, [r1, r3]
 800b8d6:	f003 031f 	and.w	r3, r3, #31
 800b8da:	fa22 f303 	lsr.w	r3, r2, r3
 800b8de:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <HAL_RCC_ClockConfig+0x270>)
 800b8e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b8e2:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <HAL_RCC_ClockConfig+0x274>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fa fb28 	bl	8005f3c <HAL_InitTick>
 800b8ec:	4603      	mov	r3, r0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40022000 	.word	0x40022000
 800b8fc:	40021000 	.word	0x40021000
 800b900:	04c4b400 	.word	0x04c4b400
 800b904:	080169d8 	.word	0x080169d8
 800b908:	20000000 	.word	0x20000000
 800b90c:	20000004 	.word	0x20000004

0800b910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b916:	4b2c      	ldr	r3, [pc, #176]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 030c 	and.w	r3, r3, #12
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d102      	bne.n	800b928 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b922:	4b2a      	ldr	r3, [pc, #168]	; (800b9cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	e047      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b928:	4b27      	ldr	r3, [pc, #156]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f003 030c 	and.w	r3, r3, #12
 800b930:	2b08      	cmp	r3, #8
 800b932:	d102      	bne.n	800b93a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b934:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b936:	613b      	str	r3, [r7, #16]
 800b938:	e03e      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b93a:	4b23      	ldr	r3, [pc, #140]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f003 030c 	and.w	r3, r3, #12
 800b942:	2b0c      	cmp	r3, #12
 800b944:	d136      	bne.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b946:	4b20      	ldr	r3, [pc, #128]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	f003 0303 	and.w	r3, r3, #3
 800b94e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b950:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	091b      	lsrs	r3, r3, #4
 800b956:	f003 030f 	and.w	r3, r3, #15
 800b95a:	3301      	adds	r3, #1
 800b95c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b03      	cmp	r3, #3
 800b962:	d10c      	bne.n	800b97e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b964:	4a1a      	ldr	r2, [pc, #104]	; (800b9d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96c:	4a16      	ldr	r2, [pc, #88]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b96e:	68d2      	ldr	r2, [r2, #12]
 800b970:	0a12      	lsrs	r2, r2, #8
 800b972:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b976:	fb02 f303 	mul.w	r3, r2, r3
 800b97a:	617b      	str	r3, [r7, #20]
      break;
 800b97c:	e00c      	b.n	800b998 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b97e:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	fbb2 f3f3 	udiv	r3, r2, r3
 800b986:	4a10      	ldr	r2, [pc, #64]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b988:	68d2      	ldr	r2, [r2, #12]
 800b98a:	0a12      	lsrs	r2, r2, #8
 800b98c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b990:	fb02 f303 	mul.w	r3, r2, r3
 800b994:	617b      	str	r3, [r7, #20]
      break;
 800b996:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b998:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	0e5b      	lsrs	r3, r3, #25
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	e001      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b9b8:	693b      	ldr	r3, [r7, #16]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	40021000 	.word	0x40021000
 800b9cc:	00f42400 	.word	0x00f42400
 800b9d0:	007a1200 	.word	0x007a1200

0800b9d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b9d8:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b9da:	681b      	ldr	r3, [r3, #0]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000000 	.word	0x20000000

0800b9ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b9f0:	f7ff fff0 	bl	800b9d4 <HAL_RCC_GetHCLKFreq>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	4b06      	ldr	r3, [pc, #24]	; (800ba10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	f003 0307 	and.w	r3, r3, #7
 800ba00:	4904      	ldr	r1, [pc, #16]	; (800ba14 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba02:	5ccb      	ldrb	r3, [r1, r3]
 800ba04:	f003 031f 	and.w	r3, r3, #31
 800ba08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	40021000 	.word	0x40021000
 800ba14:	080169e8 	.word	0x080169e8

0800ba18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ba1c:	f7ff ffda 	bl	800b9d4 <HAL_RCC_GetHCLKFreq>
 800ba20:	4602      	mov	r2, r0
 800ba22:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	0adb      	lsrs	r3, r3, #11
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	4904      	ldr	r1, [pc, #16]	; (800ba40 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ba2e:	5ccb      	ldrb	r3, [r1, r3]
 800ba30:	f003 031f 	and.w	r3, r3, #31
 800ba34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	080169e8 	.word	0x080169e8

0800ba44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b087      	sub	sp, #28
 800ba48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba4a:	4b1e      	ldr	r3, [pc, #120]	; (800bac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba54:	4b1b      	ldr	r3, [pc, #108]	; (800bac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	091b      	lsrs	r3, r3, #4
 800ba5a:	f003 030f 	and.w	r3, r3, #15
 800ba5e:	3301      	adds	r3, #1
 800ba60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d10c      	bne.n	800ba82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba68:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba70:	4a14      	ldr	r2, [pc, #80]	; (800bac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba72:	68d2      	ldr	r2, [r2, #12]
 800ba74:	0a12      	lsrs	r2, r2, #8
 800ba76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba7a:	fb02 f303 	mul.w	r3, r2, r3
 800ba7e:	617b      	str	r3, [r7, #20]
    break;
 800ba80:	e00c      	b.n	800ba9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba82:	4a12      	ldr	r2, [pc, #72]	; (800bacc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8a:	4a0e      	ldr	r2, [pc, #56]	; (800bac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba8c:	68d2      	ldr	r2, [r2, #12]
 800ba8e:	0a12      	lsrs	r2, r2, #8
 800ba90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba94:	fb02 f303 	mul.w	r3, r2, r3
 800ba98:	617b      	str	r3, [r7, #20]
    break;
 800ba9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	0e5b      	lsrs	r3, r3, #25
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	3301      	adds	r3, #1
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bab6:	687b      	ldr	r3, [r7, #4]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40021000 	.word	0x40021000
 800bac8:	007a1200 	.word	0x007a1200
 800bacc:	00f42400 	.word	0x00f42400

0800bad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bad8:	2300      	movs	r3, #0
 800bada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800badc:	2300      	movs	r3, #0
 800bade:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 8098 	beq.w	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baee:	2300      	movs	r3, #0
 800baf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800baf2:	4b43      	ldr	r3, [pc, #268]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10d      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bafe:	4b40      	ldr	r3, [pc, #256]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb02:	4a3f      	ldr	r2, [pc, #252]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb08:	6593      	str	r3, [r2, #88]	; 0x58
 800bb0a:	4b3d      	ldr	r3, [pc, #244]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb12:	60bb      	str	r3, [r7, #8]
 800bb14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb16:	2301      	movs	r3, #1
 800bb18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb1a:	4b3a      	ldr	r3, [pc, #232]	; (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a39      	ldr	r2, [pc, #228]	; (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb26:	f7fa fa55 	bl	8005fd4 <HAL_GetTick>
 800bb2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb2c:	e009      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb2e:	f7fa fa51 	bl	8005fd4 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d902      	bls.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	74fb      	strb	r3, [r7, #19]
        break;
 800bb40:	e005      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb42:	4b30      	ldr	r3, [pc, #192]	; (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0ef      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bb4e:	7cfb      	ldrb	r3, [r7, #19]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d159      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb54:	4b2a      	ldr	r3, [pc, #168]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d01e      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d019      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb70:	4b23      	ldr	r3, [pc, #140]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb7c:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb8c:	4b1c      	ldr	r3, [pc, #112]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb92:	4a1b      	ldr	r2, [pc, #108]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bb9c:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d016      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbae:	f7fa fa11 	bl	8005fd4 <HAL_GetTick>
 800bbb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbb4:	e00b      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbb6:	f7fa fa0d 	bl	8005fd4 <HAL_GetTick>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d902      	bls.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	74fb      	strb	r3, [r7, #19]
            break;
 800bbcc:	e006      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0ec      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bbdc:	7cfb      	ldrb	r3, [r7, #19]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10b      	bne.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf0:	4903      	ldr	r1, [pc, #12]	; (800bc00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bbf8:	e008      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbfa:	7cfb      	ldrb	r3, [r7, #19]
 800bbfc:	74bb      	strb	r3, [r7, #18]
 800bbfe:	e005      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bc00:	40021000 	.word	0x40021000
 800bc04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc08:	7cfb      	ldrb	r3, [r7, #19]
 800bc0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc0c:	7c7b      	ldrb	r3, [r7, #17]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d105      	bne.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc12:	4ba7      	ldr	r3, [pc, #668]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc16:	4aa6      	ldr	r2, [pc, #664]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc2a:	4ba1      	ldr	r3, [pc, #644]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc30:	f023 0203 	bic.w	r2, r3, #3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	499d      	ldr	r1, [pc, #628]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00a      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc4c:	4b98      	ldr	r3, [pc, #608]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc52:	f023 020c 	bic.w	r2, r3, #12
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	4995      	ldr	r1, [pc, #596]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0304 	and.w	r3, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc6e:	4b90      	ldr	r3, [pc, #576]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	498c      	ldr	r1, [pc, #560]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0308 	and.w	r3, r3, #8
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00a      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc90:	4b87      	ldr	r3, [pc, #540]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	4984      	ldr	r1, [pc, #528]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0310 	and.w	r3, r3, #16
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00a      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bcb2:	4b7f      	ldr	r3, [pc, #508]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	695b      	ldr	r3, [r3, #20]
 800bcc0:	497b      	ldr	r1, [pc, #492]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0320 	and.w	r3, r3, #32
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bcd4:	4b76      	ldr	r3, [pc, #472]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	4973      	ldr	r1, [pc, #460]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bcf6:	4b6e      	ldr	r3, [pc, #440]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	496a      	ldr	r1, [pc, #424]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00a      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd18:	4b65      	ldr	r3, [pc, #404]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	4962      	ldr	r1, [pc, #392]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd3a:	4b5d      	ldr	r3, [pc, #372]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	4959      	ldr	r1, [pc, #356]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd5c:	4b54      	ldr	r3, [pc, #336]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd62:	f023 0203 	bic.w	r2, r3, #3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6a:	4951      	ldr	r1, [pc, #324]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd7e:	4b4c      	ldr	r3, [pc, #304]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4948      	ldr	r1, [pc, #288]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d015      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bda0:	4b43      	ldr	r3, [pc, #268]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdae:	4940      	ldr	r1, [pc, #256]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdbe:	d105      	bne.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdc0:	4b3b      	ldr	r3, [pc, #236]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	4a3a      	ldr	r2, [pc, #232]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d015      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bdd8:	4b35      	ldr	r3, [pc, #212]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	4932      	ldr	r1, [pc, #200]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdf6:	d105      	bne.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdf8:	4b2d      	ldr	r3, [pc, #180]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	4a2c      	ldr	r2, [pc, #176]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d015      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be10:	4b27      	ldr	r3, [pc, #156]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	4924      	ldr	r1, [pc, #144]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be20:	4313      	orrs	r3, r2
 800be22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be2e:	d105      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be30:	4b1f      	ldr	r3, [pc, #124]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	4a1e      	ldr	r2, [pc, #120]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d015      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be48:	4b19      	ldr	r3, [pc, #100]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	4916      	ldr	r1, [pc, #88]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be66:	d105      	bne.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be68:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d019      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be80:	4b0b      	ldr	r3, [pc, #44]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	4908      	ldr	r1, [pc, #32]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be90:	4313      	orrs	r3, r2
 800be92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be9e:	d109      	bne.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bea0:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	4a02      	ldr	r2, [pc, #8]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beaa:	60d3      	str	r3, [r2, #12]
 800beac:	e002      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800beae:	bf00      	nop
 800beb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d015      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bec0:	4b29      	ldr	r3, [pc, #164]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bece:	4926      	ldr	r1, [pc, #152]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bed0:	4313      	orrs	r3, r2
 800bed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bede:	d105      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bee0:	4b21      	ldr	r3, [pc, #132]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	4a20      	ldr	r2, [pc, #128]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800beea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d015      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bef8:	4b1b      	ldr	r3, [pc, #108]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800befa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800befe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf06:	4918      	ldr	r1, [pc, #96]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf16:	d105      	bne.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf18:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	4a12      	ldr	r2, [pc, #72]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d015      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bf30:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3e:	490a      	ldr	r1, [pc, #40]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf40:	4313      	orrs	r3, r2
 800bf42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf4e:	d105      	bne.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	4a04      	ldr	r2, [pc, #16]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bf5c:	7cbb      	ldrb	r3, [r7, #18]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	40021000 	.word	0x40021000

0800bf6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e049      	b.n	800c012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7f9 fb78 	bl	8005688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4610      	mov	r0, r2
 800bfac:	f000 fbc8 	bl	800c740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e049      	b.n	800c0c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d106      	bne.n	800c046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7f9 fba3 	bl	800578c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3304      	adds	r3, #4
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f000 fb71 	bl	800c740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d109      	bne.n	800c0ec <HAL_TIM_PWM_Start+0x24>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	bf14      	ite	ne
 800c0e4:	2301      	movne	r3, #1
 800c0e6:	2300      	moveq	r3, #0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	e03c      	b.n	800c166 <HAL_TIM_PWM_Start+0x9e>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d109      	bne.n	800c106 <HAL_TIM_PWM_Start+0x3e>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	bf14      	ite	ne
 800c0fe:	2301      	movne	r3, #1
 800c100:	2300      	moveq	r3, #0
 800c102:	b2db      	uxtb	r3, r3
 800c104:	e02f      	b.n	800c166 <HAL_TIM_PWM_Start+0x9e>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b08      	cmp	r3, #8
 800c10a:	d109      	bne.n	800c120 <HAL_TIM_PWM_Start+0x58>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b01      	cmp	r3, #1
 800c116:	bf14      	ite	ne
 800c118:	2301      	movne	r3, #1
 800c11a:	2300      	moveq	r3, #0
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	e022      	b.n	800c166 <HAL_TIM_PWM_Start+0x9e>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b0c      	cmp	r3, #12
 800c124:	d109      	bne.n	800c13a <HAL_TIM_PWM_Start+0x72>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b01      	cmp	r3, #1
 800c130:	bf14      	ite	ne
 800c132:	2301      	movne	r3, #1
 800c134:	2300      	moveq	r3, #0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	e015      	b.n	800c166 <HAL_TIM_PWM_Start+0x9e>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b10      	cmp	r3, #16
 800c13e:	d109      	bne.n	800c154 <HAL_TIM_PWM_Start+0x8c>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	bf14      	ite	ne
 800c14c:	2301      	movne	r3, #1
 800c14e:	2300      	moveq	r3, #0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	e008      	b.n	800c166 <HAL_TIM_PWM_Start+0x9e>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	bf14      	ite	ne
 800c160:	2301      	movne	r3, #1
 800c162:	2300      	moveq	r3, #0
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e0a6      	b.n	800c2bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d104      	bne.n	800c17e <HAL_TIM_PWM_Start+0xb6>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c17c:	e023      	b.n	800c1c6 <HAL_TIM_PWM_Start+0xfe>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b04      	cmp	r3, #4
 800c182:	d104      	bne.n	800c18e <HAL_TIM_PWM_Start+0xc6>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c18c:	e01b      	b.n	800c1c6 <HAL_TIM_PWM_Start+0xfe>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b08      	cmp	r3, #8
 800c192:	d104      	bne.n	800c19e <HAL_TIM_PWM_Start+0xd6>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2202      	movs	r2, #2
 800c198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c19c:	e013      	b.n	800c1c6 <HAL_TIM_PWM_Start+0xfe>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b0c      	cmp	r3, #12
 800c1a2:	d104      	bne.n	800c1ae <HAL_TIM_PWM_Start+0xe6>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1ac:	e00b      	b.n	800c1c6 <HAL_TIM_PWM_Start+0xfe>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d104      	bne.n	800c1be <HAL_TIM_PWM_Start+0xf6>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1bc:	e003      	b.n	800c1c6 <HAL_TIM_PWM_Start+0xfe>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 ff24 	bl	800d01c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a3a      	ldr	r2, [pc, #232]	; (800c2c4 <HAL_TIM_PWM_Start+0x1fc>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d018      	beq.n	800c210 <HAL_TIM_PWM_Start+0x148>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a39      	ldr	r2, [pc, #228]	; (800c2c8 <HAL_TIM_PWM_Start+0x200>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d013      	beq.n	800c210 <HAL_TIM_PWM_Start+0x148>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a37      	ldr	r2, [pc, #220]	; (800c2cc <HAL_TIM_PWM_Start+0x204>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d00e      	beq.n	800c210 <HAL_TIM_PWM_Start+0x148>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a36      	ldr	r2, [pc, #216]	; (800c2d0 <HAL_TIM_PWM_Start+0x208>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d009      	beq.n	800c210 <HAL_TIM_PWM_Start+0x148>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a34      	ldr	r2, [pc, #208]	; (800c2d4 <HAL_TIM_PWM_Start+0x20c>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d004      	beq.n	800c210 <HAL_TIM_PWM_Start+0x148>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a33      	ldr	r2, [pc, #204]	; (800c2d8 <HAL_TIM_PWM_Start+0x210>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d101      	bne.n	800c214 <HAL_TIM_PWM_Start+0x14c>
 800c210:	2301      	movs	r3, #1
 800c212:	e000      	b.n	800c216 <HAL_TIM_PWM_Start+0x14e>
 800c214:	2300      	movs	r3, #0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c228:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a25      	ldr	r2, [pc, #148]	; (800c2c4 <HAL_TIM_PWM_Start+0x1fc>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d022      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c23c:	d01d      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a26      	ldr	r2, [pc, #152]	; (800c2dc <HAL_TIM_PWM_Start+0x214>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d018      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a24      	ldr	r2, [pc, #144]	; (800c2e0 <HAL_TIM_PWM_Start+0x218>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d013      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a23      	ldr	r2, [pc, #140]	; (800c2e4 <HAL_TIM_PWM_Start+0x21c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d00e      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a19      	ldr	r2, [pc, #100]	; (800c2c8 <HAL_TIM_PWM_Start+0x200>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d009      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a18      	ldr	r2, [pc, #96]	; (800c2cc <HAL_TIM_PWM_Start+0x204>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d004      	beq.n	800c27a <HAL_TIM_PWM_Start+0x1b2>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a18      	ldr	r2, [pc, #96]	; (800c2d8 <HAL_TIM_PWM_Start+0x210>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d115      	bne.n	800c2a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	4b19      	ldr	r3, [pc, #100]	; (800c2e8 <HAL_TIM_PWM_Start+0x220>)
 800c282:	4013      	ands	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b06      	cmp	r3, #6
 800c28a:	d015      	beq.n	800c2b8 <HAL_TIM_PWM_Start+0x1f0>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c292:	d011      	beq.n	800c2b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f042 0201 	orr.w	r2, r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2a4:	e008      	b.n	800c2b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f042 0201 	orr.w	r2, r2, #1
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e000      	b.n	800c2ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	40012c00 	.word	0x40012c00
 800c2c8:	40013400 	.word	0x40013400
 800c2cc:	40014000 	.word	0x40014000
 800c2d0:	40014400 	.word	0x40014400
 800c2d4:	40014800 	.word	0x40014800
 800c2d8:	40015000 	.word	0x40015000
 800c2dc:	40000400 	.word	0x40000400
 800c2e0:	40000800 	.word	0x40000800
 800c2e4:	40000c00 	.word	0x40000c00
 800c2e8:	00010007 	.word	0x00010007

0800c2ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c302:	2b01      	cmp	r3, #1
 800c304:	d101      	bne.n	800c30a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c306:	2302      	movs	r3, #2
 800c308:	e0ff      	b.n	800c50a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b14      	cmp	r3, #20
 800c316:	f200 80f0 	bhi.w	800c4fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c31a:	a201      	add	r2, pc, #4	; (adr r2, 800c320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c320:	0800c375 	.word	0x0800c375
 800c324:	0800c4fb 	.word	0x0800c4fb
 800c328:	0800c4fb 	.word	0x0800c4fb
 800c32c:	0800c4fb 	.word	0x0800c4fb
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c4fb 	.word	0x0800c4fb
 800c338:	0800c4fb 	.word	0x0800c4fb
 800c33c:	0800c4fb 	.word	0x0800c4fb
 800c340:	0800c3f7 	.word	0x0800c3f7
 800c344:	0800c4fb 	.word	0x0800c4fb
 800c348:	0800c4fb 	.word	0x0800c4fb
 800c34c:	0800c4fb 	.word	0x0800c4fb
 800c350:	0800c437 	.word	0x0800c437
 800c354:	0800c4fb 	.word	0x0800c4fb
 800c358:	0800c4fb 	.word	0x0800c4fb
 800c35c:	0800c4fb 	.word	0x0800c4fb
 800c360:	0800c479 	.word	0x0800c479
 800c364:	0800c4fb 	.word	0x0800c4fb
 800c368:	0800c4fb 	.word	0x0800c4fb
 800c36c:	0800c4fb 	.word	0x0800c4fb
 800c370:	0800c4b9 	.word	0x0800c4b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fa88 	bl	800c890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	699a      	ldr	r2, [r3, #24]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f042 0208 	orr.w	r2, r2, #8
 800c38e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	699a      	ldr	r2, [r3, #24]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f022 0204 	bic.w	r2, r2, #4
 800c39e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6999      	ldr	r1, [r3, #24]
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	691a      	ldr	r2, [r3, #16]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	619a      	str	r2, [r3, #24]
      break;
 800c3b2:	e0a5      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fb02 	bl	800c9c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	699a      	ldr	r2, [r3, #24]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6999      	ldr	r1, [r3, #24]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	021a      	lsls	r2, r3, #8
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	619a      	str	r2, [r3, #24]
      break;
 800c3f4:	e084      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fb75 	bl	800caec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0208 	orr.w	r2, r2, #8
 800c410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	69da      	ldr	r2, [r3, #28]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f022 0204 	bic.w	r2, r2, #4
 800c420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	69d9      	ldr	r1, [r3, #28]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	691a      	ldr	r2, [r3, #16]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	61da      	str	r2, [r3, #28]
      break;
 800c434:	e064      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fbe7 	bl	800cc10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69da      	ldr	r2, [r3, #28]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69da      	ldr	r2, [r3, #28]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	69d9      	ldr	r1, [r3, #28]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	021a      	lsls	r2, r3, #8
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	61da      	str	r2, [r3, #28]
      break;
 800c476:	e043      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 fc5a 	bl	800cd38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f042 0208 	orr.w	r2, r2, #8
 800c492:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f022 0204 	bic.w	r2, r2, #4
 800c4a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c4b6:	e023      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fca4 	bl	800ce0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	021a      	lsls	r2, r3, #8
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c4f8:	e002      	b.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c4fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c508:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop

0800c514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <HAL_TIM_ConfigClockSource+0x1c>
 800c52c:	2302      	movs	r3, #2
 800c52e:	e0f6      	b.n	800c71e <HAL_TIM_ConfigClockSource+0x20a>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c54e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c55a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a6f      	ldr	r2, [pc, #444]	; (800c728 <HAL_TIM_ConfigClockSource+0x214>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	f000 80c1 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c570:	4a6d      	ldr	r2, [pc, #436]	; (800c728 <HAL_TIM_ConfigClockSource+0x214>)
 800c572:	4293      	cmp	r3, r2
 800c574:	f200 80c6 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c578:	4a6c      	ldr	r2, [pc, #432]	; (800c72c <HAL_TIM_ConfigClockSource+0x218>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	f000 80b9 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c580:	4a6a      	ldr	r2, [pc, #424]	; (800c72c <HAL_TIM_ConfigClockSource+0x218>)
 800c582:	4293      	cmp	r3, r2
 800c584:	f200 80be 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c588:	4a69      	ldr	r2, [pc, #420]	; (800c730 <HAL_TIM_ConfigClockSource+0x21c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	f000 80b1 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c590:	4a67      	ldr	r2, [pc, #412]	; (800c730 <HAL_TIM_ConfigClockSource+0x21c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	f200 80b6 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c598:	4a66      	ldr	r2, [pc, #408]	; (800c734 <HAL_TIM_ConfigClockSource+0x220>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	f000 80a9 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5a0:	4a64      	ldr	r2, [pc, #400]	; (800c734 <HAL_TIM_ConfigClockSource+0x220>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	f200 80ae 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5a8:	4a63      	ldr	r2, [pc, #396]	; (800c738 <HAL_TIM_ConfigClockSource+0x224>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	f000 80a1 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5b0:	4a61      	ldr	r2, [pc, #388]	; (800c738 <HAL_TIM_ConfigClockSource+0x224>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	f200 80a6 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5b8:	4a60      	ldr	r2, [pc, #384]	; (800c73c <HAL_TIM_ConfigClockSource+0x228>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	f000 8099 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5c0:	4a5e      	ldr	r2, [pc, #376]	; (800c73c <HAL_TIM_ConfigClockSource+0x228>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	f200 809e 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5cc:	f000 8091 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5d4:	f200 8096 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5dc:	f000 8089 	beq.w	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5e4:	f200 808e 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ec:	d03e      	beq.n	800c66c <HAL_TIM_ConfigClockSource+0x158>
 800c5ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f2:	f200 8087 	bhi.w	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5fa:	f000 8086 	beq.w	800c70a <HAL_TIM_ConfigClockSource+0x1f6>
 800c5fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c602:	d87f      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c604:	2b70      	cmp	r3, #112	; 0x70
 800c606:	d01a      	beq.n	800c63e <HAL_TIM_ConfigClockSource+0x12a>
 800c608:	2b70      	cmp	r3, #112	; 0x70
 800c60a:	d87b      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c60c:	2b60      	cmp	r3, #96	; 0x60
 800c60e:	d050      	beq.n	800c6b2 <HAL_TIM_ConfigClockSource+0x19e>
 800c610:	2b60      	cmp	r3, #96	; 0x60
 800c612:	d877      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c614:	2b50      	cmp	r3, #80	; 0x50
 800c616:	d03c      	beq.n	800c692 <HAL_TIM_ConfigClockSource+0x17e>
 800c618:	2b50      	cmp	r3, #80	; 0x50
 800c61a:	d873      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c61c:	2b40      	cmp	r3, #64	; 0x40
 800c61e:	d058      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x1be>
 800c620:	2b40      	cmp	r3, #64	; 0x40
 800c622:	d86f      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c624:	2b30      	cmp	r3, #48	; 0x30
 800c626:	d064      	beq.n	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c628:	2b30      	cmp	r3, #48	; 0x30
 800c62a:	d86b      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	d060      	beq.n	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c630:	2b20      	cmp	r3, #32
 800c632:	d867      	bhi.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
 800c634:	2b00      	cmp	r3, #0
 800c636:	d05c      	beq.n	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c638:	2b10      	cmp	r3, #16
 800c63a:	d05a      	beq.n	800c6f2 <HAL_TIM_ConfigClockSource+0x1de>
 800c63c:	e062      	b.n	800c704 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6818      	ldr	r0, [r3, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	6899      	ldr	r1, [r3, #8]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f000 fcc5 	bl	800cfdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	609a      	str	r2, [r3, #8]
      break;
 800c66a:	e04f      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	6899      	ldr	r1, [r3, #8]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	f000 fcae 	bl	800cfdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	689a      	ldr	r2, [r3, #8]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c68e:	609a      	str	r2, [r3, #8]
      break;
 800c690:	e03c      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	6859      	ldr	r1, [r3, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f000 fc20 	bl	800cee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2150      	movs	r1, #80	; 0x50
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fc79 	bl	800cfa2 <TIM_ITRx_SetConfig>
      break;
 800c6b0:	e02c      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	6859      	ldr	r1, [r3, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f000 fc3f 	bl	800cf42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2160      	movs	r1, #96	; 0x60
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 fc69 	bl	800cfa2 <TIM_ITRx_SetConfig>
      break;
 800c6d0:	e01c      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	6859      	ldr	r1, [r3, #4]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	f000 fc00 	bl	800cee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2140      	movs	r1, #64	; 0x40
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fc59 	bl	800cfa2 <TIM_ITRx_SetConfig>
      break;
 800c6f0:	e00c      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	f000 fc50 	bl	800cfa2 <TIM_ITRx_SetConfig>
      break;
 800c702:	e003      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	73fb      	strb	r3, [r7, #15]
      break;
 800c708:	e000      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c70a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	00100070 	.word	0x00100070
 800c72c:	00100060 	.word	0x00100060
 800c730:	00100050 	.word	0x00100050
 800c734:	00100040 	.word	0x00100040
 800c738:	00100030 	.word	0x00100030
 800c73c:	00100020 	.word	0x00100020

0800c740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a46      	ldr	r2, [pc, #280]	; (800c86c <TIM_Base_SetConfig+0x12c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d017      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c75e:	d013      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a43      	ldr	r2, [pc, #268]	; (800c870 <TIM_Base_SetConfig+0x130>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00f      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a42      	ldr	r2, [pc, #264]	; (800c874 <TIM_Base_SetConfig+0x134>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00b      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a41      	ldr	r2, [pc, #260]	; (800c878 <TIM_Base_SetConfig+0x138>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d007      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a40      	ldr	r2, [pc, #256]	; (800c87c <TIM_Base_SetConfig+0x13c>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d003      	beq.n	800c788 <TIM_Base_SetConfig+0x48>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a3f      	ldr	r2, [pc, #252]	; (800c880 <TIM_Base_SetConfig+0x140>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d108      	bne.n	800c79a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c78e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a33      	ldr	r2, [pc, #204]	; (800c86c <TIM_Base_SetConfig+0x12c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d023      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7a8:	d01f      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a30      	ldr	r2, [pc, #192]	; (800c870 <TIM_Base_SetConfig+0x130>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d01b      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a2f      	ldr	r2, [pc, #188]	; (800c874 <TIM_Base_SetConfig+0x134>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d017      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a2e      	ldr	r2, [pc, #184]	; (800c878 <TIM_Base_SetConfig+0x138>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d013      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a2d      	ldr	r2, [pc, #180]	; (800c87c <TIM_Base_SetConfig+0x13c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d00f      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a2d      	ldr	r2, [pc, #180]	; (800c884 <TIM_Base_SetConfig+0x144>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d00b      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a2c      	ldr	r2, [pc, #176]	; (800c888 <TIM_Base_SetConfig+0x148>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d007      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a2b      	ldr	r2, [pc, #172]	; (800c88c <TIM_Base_SetConfig+0x14c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d003      	beq.n	800c7ea <TIM_Base_SetConfig+0xaa>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a26      	ldr	r2, [pc, #152]	; (800c880 <TIM_Base_SetConfig+0x140>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d108      	bne.n	800c7fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a12      	ldr	r2, [pc, #72]	; (800c86c <TIM_Base_SetConfig+0x12c>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d013      	beq.n	800c850 <TIM_Base_SetConfig+0x110>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a14      	ldr	r2, [pc, #80]	; (800c87c <TIM_Base_SetConfig+0x13c>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d00f      	beq.n	800c850 <TIM_Base_SetConfig+0x110>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a14      	ldr	r2, [pc, #80]	; (800c884 <TIM_Base_SetConfig+0x144>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00b      	beq.n	800c850 <TIM_Base_SetConfig+0x110>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a13      	ldr	r2, [pc, #76]	; (800c888 <TIM_Base_SetConfig+0x148>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d007      	beq.n	800c850 <TIM_Base_SetConfig+0x110>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a12      	ldr	r2, [pc, #72]	; (800c88c <TIM_Base_SetConfig+0x14c>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d003      	beq.n	800c850 <TIM_Base_SetConfig+0x110>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a0d      	ldr	r2, [pc, #52]	; (800c880 <TIM_Base_SetConfig+0x140>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d103      	bne.n	800c858 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	691a      	ldr	r2, [r3, #16]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	615a      	str	r2, [r3, #20]
}
 800c85e:	bf00      	nop
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	40012c00 	.word	0x40012c00
 800c870:	40000400 	.word	0x40000400
 800c874:	40000800 	.word	0x40000800
 800c878:	40000c00 	.word	0x40000c00
 800c87c:	40013400 	.word	0x40013400
 800c880:	40015000 	.word	0x40015000
 800c884:	40014000 	.word	0x40014000
 800c888:	40014400 	.word	0x40014400
 800c88c:	40014800 	.word	0x40014800

0800c890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	f023 0201 	bic.w	r2, r3, #1
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f023 0302 	bic.w	r3, r3, #2
 800c8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a30      	ldr	r2, [pc, #192]	; (800c9ac <TIM_OC1_SetConfig+0x11c>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d013      	beq.n	800c918 <TIM_OC1_SetConfig+0x88>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a2f      	ldr	r2, [pc, #188]	; (800c9b0 <TIM_OC1_SetConfig+0x120>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d00f      	beq.n	800c918 <TIM_OC1_SetConfig+0x88>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a2e      	ldr	r2, [pc, #184]	; (800c9b4 <TIM_OC1_SetConfig+0x124>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00b      	beq.n	800c918 <TIM_OC1_SetConfig+0x88>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a2d      	ldr	r2, [pc, #180]	; (800c9b8 <TIM_OC1_SetConfig+0x128>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d007      	beq.n	800c918 <TIM_OC1_SetConfig+0x88>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a2c      	ldr	r2, [pc, #176]	; (800c9bc <TIM_OC1_SetConfig+0x12c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC1_SetConfig+0x88>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a2b      	ldr	r2, [pc, #172]	; (800c9c0 <TIM_OC1_SetConfig+0x130>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d10c      	bne.n	800c932 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f023 0308 	bic.w	r3, r3, #8
 800c91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	4313      	orrs	r3, r2
 800c928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f023 0304 	bic.w	r3, r3, #4
 800c930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a1d      	ldr	r2, [pc, #116]	; (800c9ac <TIM_OC1_SetConfig+0x11c>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d013      	beq.n	800c962 <TIM_OC1_SetConfig+0xd2>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a1c      	ldr	r2, [pc, #112]	; (800c9b0 <TIM_OC1_SetConfig+0x120>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d00f      	beq.n	800c962 <TIM_OC1_SetConfig+0xd2>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a1b      	ldr	r2, [pc, #108]	; (800c9b4 <TIM_OC1_SetConfig+0x124>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d00b      	beq.n	800c962 <TIM_OC1_SetConfig+0xd2>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a1a      	ldr	r2, [pc, #104]	; (800c9b8 <TIM_OC1_SetConfig+0x128>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d007      	beq.n	800c962 <TIM_OC1_SetConfig+0xd2>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a19      	ldr	r2, [pc, #100]	; (800c9bc <TIM_OC1_SetConfig+0x12c>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d003      	beq.n	800c962 <TIM_OC1_SetConfig+0xd2>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a18      	ldr	r2, [pc, #96]	; (800c9c0 <TIM_OC1_SetConfig+0x130>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d111      	bne.n	800c986 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	4313      	orrs	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4313      	orrs	r3, r2
 800c984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	621a      	str	r2, [r3, #32]
}
 800c9a0:	bf00      	nop
 800c9a2:	371c      	adds	r7, #28
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	40012c00 	.word	0x40012c00
 800c9b0:	40013400 	.word	0x40013400
 800c9b4:	40014000 	.word	0x40014000
 800c9b8:	40014400 	.word	0x40014400
 800c9bc:	40014800 	.word	0x40014800
 800c9c0:	40015000 	.word	0x40015000

0800c9c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	f023 0210 	bic.w	r2, r3, #16
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f023 0320 	bic.w	r3, r3, #32
 800ca12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a2c      	ldr	r2, [pc, #176]	; (800cad4 <TIM_OC2_SetConfig+0x110>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d007      	beq.n	800ca38 <TIM_OC2_SetConfig+0x74>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a2b      	ldr	r2, [pc, #172]	; (800cad8 <TIM_OC2_SetConfig+0x114>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d003      	beq.n	800ca38 <TIM_OC2_SetConfig+0x74>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a2a      	ldr	r2, [pc, #168]	; (800cadc <TIM_OC2_SetConfig+0x118>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d10d      	bne.n	800ca54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a1f      	ldr	r2, [pc, #124]	; (800cad4 <TIM_OC2_SetConfig+0x110>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d013      	beq.n	800ca84 <TIM_OC2_SetConfig+0xc0>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a1e      	ldr	r2, [pc, #120]	; (800cad8 <TIM_OC2_SetConfig+0x114>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d00f      	beq.n	800ca84 <TIM_OC2_SetConfig+0xc0>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a1e      	ldr	r2, [pc, #120]	; (800cae0 <TIM_OC2_SetConfig+0x11c>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00b      	beq.n	800ca84 <TIM_OC2_SetConfig+0xc0>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a1d      	ldr	r2, [pc, #116]	; (800cae4 <TIM_OC2_SetConfig+0x120>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d007      	beq.n	800ca84 <TIM_OC2_SetConfig+0xc0>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a1c      	ldr	r2, [pc, #112]	; (800cae8 <TIM_OC2_SetConfig+0x124>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d003      	beq.n	800ca84 <TIM_OC2_SetConfig+0xc0>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a17      	ldr	r2, [pc, #92]	; (800cadc <TIM_OC2_SetConfig+0x118>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d113      	bne.n	800caac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	621a      	str	r2, [r3, #32]
}
 800cac6:	bf00      	nop
 800cac8:	371c      	adds	r7, #28
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	40012c00 	.word	0x40012c00
 800cad8:	40013400 	.word	0x40013400
 800cadc:	40015000 	.word	0x40015000
 800cae0:	40014000 	.word	0x40014000
 800cae4:	40014400 	.word	0x40014400
 800cae8:	40014800 	.word	0x40014800

0800caec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800caec:	b480      	push	{r7}
 800caee:	b087      	sub	sp, #28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	021b      	lsls	r3, r3, #8
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a2b      	ldr	r2, [pc, #172]	; (800cbf8 <TIM_OC3_SetConfig+0x10c>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d007      	beq.n	800cb5e <TIM_OC3_SetConfig+0x72>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a2a      	ldr	r2, [pc, #168]	; (800cbfc <TIM_OC3_SetConfig+0x110>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d003      	beq.n	800cb5e <TIM_OC3_SetConfig+0x72>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a29      	ldr	r2, [pc, #164]	; (800cc00 <TIM_OC3_SetConfig+0x114>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d10d      	bne.n	800cb7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	021b      	lsls	r3, r3, #8
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1e      	ldr	r2, [pc, #120]	; (800cbf8 <TIM_OC3_SetConfig+0x10c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d013      	beq.n	800cbaa <TIM_OC3_SetConfig+0xbe>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a1d      	ldr	r2, [pc, #116]	; (800cbfc <TIM_OC3_SetConfig+0x110>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d00f      	beq.n	800cbaa <TIM_OC3_SetConfig+0xbe>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <TIM_OC3_SetConfig+0x118>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d00b      	beq.n	800cbaa <TIM_OC3_SetConfig+0xbe>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a1c      	ldr	r2, [pc, #112]	; (800cc08 <TIM_OC3_SetConfig+0x11c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d007      	beq.n	800cbaa <TIM_OC3_SetConfig+0xbe>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a1b      	ldr	r2, [pc, #108]	; (800cc0c <TIM_OC3_SetConfig+0x120>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d003      	beq.n	800cbaa <TIM_OC3_SetConfig+0xbe>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a16      	ldr	r2, [pc, #88]	; (800cc00 <TIM_OC3_SetConfig+0x114>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d113      	bne.n	800cbd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	621a      	str	r2, [r3, #32]
}
 800cbec:	bf00      	nop
 800cbee:	371c      	adds	r7, #28
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr
 800cbf8:	40012c00 	.word	0x40012c00
 800cbfc:	40013400 	.word	0x40013400
 800cc00:	40015000 	.word	0x40015000
 800cc04:	40014000 	.word	0x40014000
 800cc08:	40014400 	.word	0x40014400
 800cc0c:	40014800 	.word	0x40014800

0800cc10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	021b      	lsls	r3, r3, #8
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	031b      	lsls	r3, r3, #12
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a2c      	ldr	r2, [pc, #176]	; (800cd20 <TIM_OC4_SetConfig+0x110>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d007      	beq.n	800cc84 <TIM_OC4_SetConfig+0x74>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a2b      	ldr	r2, [pc, #172]	; (800cd24 <TIM_OC4_SetConfig+0x114>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d003      	beq.n	800cc84 <TIM_OC4_SetConfig+0x74>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a2a      	ldr	r2, [pc, #168]	; (800cd28 <TIM_OC4_SetConfig+0x118>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d10d      	bne.n	800cca0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	031b      	lsls	r3, r3, #12
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a1f      	ldr	r2, [pc, #124]	; (800cd20 <TIM_OC4_SetConfig+0x110>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d013      	beq.n	800ccd0 <TIM_OC4_SetConfig+0xc0>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a1e      	ldr	r2, [pc, #120]	; (800cd24 <TIM_OC4_SetConfig+0x114>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00f      	beq.n	800ccd0 <TIM_OC4_SetConfig+0xc0>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a1e      	ldr	r2, [pc, #120]	; (800cd2c <TIM_OC4_SetConfig+0x11c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d00b      	beq.n	800ccd0 <TIM_OC4_SetConfig+0xc0>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a1d      	ldr	r2, [pc, #116]	; (800cd30 <TIM_OC4_SetConfig+0x120>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d007      	beq.n	800ccd0 <TIM_OC4_SetConfig+0xc0>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a1c      	ldr	r2, [pc, #112]	; (800cd34 <TIM_OC4_SetConfig+0x124>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d003      	beq.n	800ccd0 <TIM_OC4_SetConfig+0xc0>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a17      	ldr	r2, [pc, #92]	; (800cd28 <TIM_OC4_SetConfig+0x118>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d113      	bne.n	800ccf8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	695b      	ldr	r3, [r3, #20]
 800cce4:	019b      	lsls	r3, r3, #6
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	019b      	lsls	r3, r3, #6
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	621a      	str	r2, [r3, #32]
}
 800cd12:	bf00      	nop
 800cd14:	371c      	adds	r7, #28
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	40012c00 	.word	0x40012c00
 800cd24:	40013400 	.word	0x40013400
 800cd28:	40015000 	.word	0x40015000
 800cd2c:	40014000 	.word	0x40014000
 800cd30:	40014400 	.word	0x40014400
 800cd34:	40014800 	.word	0x40014800

0800cd38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cd7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	041b      	lsls	r3, r3, #16
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <TIM_OC5_SetConfig+0xbc>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d013      	beq.n	800cdba <TIM_OC5_SetConfig+0x82>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a18      	ldr	r2, [pc, #96]	; (800cdf8 <TIM_OC5_SetConfig+0xc0>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d00f      	beq.n	800cdba <TIM_OC5_SetConfig+0x82>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a17      	ldr	r2, [pc, #92]	; (800cdfc <TIM_OC5_SetConfig+0xc4>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d00b      	beq.n	800cdba <TIM_OC5_SetConfig+0x82>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a16      	ldr	r2, [pc, #88]	; (800ce00 <TIM_OC5_SetConfig+0xc8>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d007      	beq.n	800cdba <TIM_OC5_SetConfig+0x82>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a15      	ldr	r2, [pc, #84]	; (800ce04 <TIM_OC5_SetConfig+0xcc>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d003      	beq.n	800cdba <TIM_OC5_SetConfig+0x82>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <TIM_OC5_SetConfig+0xd0>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d109      	bne.n	800cdce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	697a      	ldr	r2, [r7, #20]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	621a      	str	r2, [r3, #32]
}
 800cde8:	bf00      	nop
 800cdea:	371c      	adds	r7, #28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	40012c00 	.word	0x40012c00
 800cdf8:	40013400 	.word	0x40013400
 800cdfc:	40014000 	.word	0x40014000
 800ce00:	40014400 	.word	0x40014400
 800ce04:	40014800 	.word	0x40014800
 800ce08:	40015000 	.word	0x40015000

0800ce0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	051b      	lsls	r3, r3, #20
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a1a      	ldr	r2, [pc, #104]	; (800cecc <TIM_OC6_SetConfig+0xc0>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d013      	beq.n	800ce90 <TIM_OC6_SetConfig+0x84>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a19      	ldr	r2, [pc, #100]	; (800ced0 <TIM_OC6_SetConfig+0xc4>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d00f      	beq.n	800ce90 <TIM_OC6_SetConfig+0x84>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a18      	ldr	r2, [pc, #96]	; (800ced4 <TIM_OC6_SetConfig+0xc8>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d00b      	beq.n	800ce90 <TIM_OC6_SetConfig+0x84>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a17      	ldr	r2, [pc, #92]	; (800ced8 <TIM_OC6_SetConfig+0xcc>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d007      	beq.n	800ce90 <TIM_OC6_SetConfig+0x84>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a16      	ldr	r2, [pc, #88]	; (800cedc <TIM_OC6_SetConfig+0xd0>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d003      	beq.n	800ce90 <TIM_OC6_SetConfig+0x84>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a15      	ldr	r2, [pc, #84]	; (800cee0 <TIM_OC6_SetConfig+0xd4>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d109      	bne.n	800cea4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	029b      	lsls	r3, r3, #10
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	621a      	str	r2, [r3, #32]
}
 800cebe:	bf00      	nop
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	40012c00 	.word	0x40012c00
 800ced0:	40013400 	.word	0x40013400
 800ced4:	40014000 	.word	0x40014000
 800ced8:	40014400 	.word	0x40014400
 800cedc:	40014800 	.word	0x40014800
 800cee0:	40015000 	.word	0x40015000

0800cee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6a1b      	ldr	r3, [r3, #32]
 800cef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	f023 0201 	bic.w	r2, r3, #1
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	011b      	lsls	r3, r3, #4
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f023 030a 	bic.w	r3, r3, #10
 800cf20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	621a      	str	r2, [r3, #32]
}
 800cf36:	bf00      	nop
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b087      	sub	sp, #28
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	f023 0210 	bic.w	r2, r3, #16
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	031b      	lsls	r3, r3, #12
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	621a      	str	r2, [r3, #32]
}
 800cf96:	bf00      	nop
 800cf98:	371c      	adds	r7, #28
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	b085      	sub	sp, #20
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cfb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	f043 0307 	orr.w	r3, r3, #7
 800cfc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	609a      	str	r2, [r3, #8]
}
 800cfd0:	bf00      	nop
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b087      	sub	sp, #28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	021a      	lsls	r2, r3, #8
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	431a      	orrs	r2, r3
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	4313      	orrs	r3, r2
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	4313      	orrs	r3, r2
 800d008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	609a      	str	r2, [r3, #8]
}
 800d010:	bf00      	nop
 800d012:	371c      	adds	r7, #28
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	f003 031f 	and.w	r3, r3, #31
 800d02e:	2201      	movs	r2, #1
 800d030:	fa02 f303 	lsl.w	r3, r2, r3
 800d034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a1a      	ldr	r2, [r3, #32]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	43db      	mvns	r3, r3
 800d03e:	401a      	ands	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6a1a      	ldr	r2, [r3, #32]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f003 031f 	and.w	r3, r3, #31
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	fa01 f303 	lsl.w	r3, r1, r3
 800d054:	431a      	orrs	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	621a      	str	r2, [r3, #32]
}
 800d05a:	bf00      	nop
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
	...

0800d068 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d109      	bne.n	800d08c <HAL_TIMEx_PWMN_Start+0x24>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b01      	cmp	r3, #1
 800d082:	bf14      	ite	ne
 800d084:	2301      	movne	r3, #1
 800d086:	2300      	moveq	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	e022      	b.n	800d0d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d109      	bne.n	800d0a6 <HAL_TIMEx_PWMN_Start+0x3e>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	bf14      	ite	ne
 800d09e:	2301      	movne	r3, #1
 800d0a0:	2300      	moveq	r3, #0
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	e015      	b.n	800d0d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d109      	bne.n	800d0c0 <HAL_TIMEx_PWMN_Start+0x58>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	bf14      	ite	ne
 800d0b8:	2301      	movne	r3, #1
 800d0ba:	2300      	moveq	r3, #0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	e008      	b.n	800d0d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	bf14      	ite	ne
 800d0cc:	2301      	movne	r3, #1
 800d0ce:	2300      	moveq	r3, #0
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e073      	b.n	800d1c2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <HAL_TIMEx_PWMN_Start+0x82>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0e8:	e013      	b.n	800d112 <HAL_TIMEx_PWMN_Start+0xaa>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d104      	bne.n	800d0fa <HAL_TIMEx_PWMN_Start+0x92>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0f8:	e00b      	b.n	800d112 <HAL_TIMEx_PWMN_Start+0xaa>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d104      	bne.n	800d10a <HAL_TIMEx_PWMN_Start+0xa2>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2202      	movs	r2, #2
 800d104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d108:	e003      	b.n	800d112 <HAL_TIMEx_PWMN_Start+0xaa>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2202      	movs	r2, #2
 800d10e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2204      	movs	r2, #4
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f9ae 	bl	800d47c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d12e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a25      	ldr	r2, [pc, #148]	; (800d1cc <HAL_TIMEx_PWMN_Start+0x164>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d022      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d142:	d01d      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a21      	ldr	r2, [pc, #132]	; (800d1d0 <HAL_TIMEx_PWMN_Start+0x168>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d018      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a20      	ldr	r2, [pc, #128]	; (800d1d4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d013      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a1e      	ldr	r2, [pc, #120]	; (800d1d8 <HAL_TIMEx_PWMN_Start+0x170>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00e      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a1d      	ldr	r2, [pc, #116]	; (800d1dc <HAL_TIMEx_PWMN_Start+0x174>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d009      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a1b      	ldr	r2, [pc, #108]	; (800d1e0 <HAL_TIMEx_PWMN_Start+0x178>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d004      	beq.n	800d180 <HAL_TIMEx_PWMN_Start+0x118>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a1a      	ldr	r2, [pc, #104]	; (800d1e4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d115      	bne.n	800d1ac <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	4b18      	ldr	r3, [pc, #96]	; (800d1e8 <HAL_TIMEx_PWMN_Start+0x180>)
 800d188:	4013      	ands	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b06      	cmp	r3, #6
 800d190:	d015      	beq.n	800d1be <HAL_TIMEx_PWMN_Start+0x156>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d198:	d011      	beq.n	800d1be <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f042 0201 	orr.w	r2, r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1aa:	e008      	b.n	800d1be <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	e000      	b.n	800d1c0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	40012c00 	.word	0x40012c00
 800d1d0:	40000400 	.word	0x40000400
 800d1d4:	40000800 	.word	0x40000800
 800d1d8:	40000c00 	.word	0x40000c00
 800d1dc:	40013400 	.word	0x40013400
 800d1e0:	40014000 	.word	0x40014000
 800d1e4:	40015000 	.word	0x40015000
 800d1e8:	00010007 	.word	0x00010007

0800d1ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d101      	bne.n	800d204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d200:	2302      	movs	r3, #2
 800d202:	e074      	b.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a34      	ldr	r2, [pc, #208]	; (800d2fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d009      	beq.n	800d242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a33      	ldr	r2, [pc, #204]	; (800d300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d004      	beq.n	800d242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a31      	ldr	r2, [pc, #196]	; (800d304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d108      	bne.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d248:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	4313      	orrs	r3, r2
 800d252:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d25e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	4313      	orrs	r3, r2
 800d268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a21      	ldr	r2, [pc, #132]	; (800d2fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d022      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d284:	d01d      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a1f      	ldr	r2, [pc, #124]	; (800d308 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d018      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d013      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a1c      	ldr	r2, [pc, #112]	; (800d310 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d00e      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a15      	ldr	r2, [pc, #84]	; (800d300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d009      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a18      	ldr	r2, [pc, #96]	; (800d314 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d004      	beq.n	800d2c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a11      	ldr	r2, [pc, #68]	; (800d304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d10c      	bne.n	800d2dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	40012c00 	.word	0x40012c00
 800d300:	40013400 	.word	0x40013400
 800d304:	40015000 	.word	0x40015000
 800d308:	40000400 	.word	0x40000400
 800d30c:	40000800 	.word	0x40000800
 800d310:	40000c00 	.word	0x40000c00
 800d314:	40014000 	.word	0x40014000

0800d318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d101      	bne.n	800d334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d330:	2302      	movs	r3, #2
 800d332:	e096      	b.n	800d462 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	4313      	orrs	r3, r2
 800d348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	4313      	orrs	r3, r2
 800d356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	4313      	orrs	r3, r2
 800d364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	4313      	orrs	r3, r2
 800d380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	041b      	lsls	r3, r3, #16
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a2f      	ldr	r2, [pc, #188]	; (800d470 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d009      	beq.n	800d3cc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a2c      	ldr	r2, [pc, #176]	; (800d478 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d106      	bne.n	800d3da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a24      	ldr	r2, [pc, #144]	; (800d470 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d009      	beq.n	800d3f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a22      	ldr	r2, [pc, #136]	; (800d474 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d004      	beq.n	800d3f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a21      	ldr	r2, [pc, #132]	; (800d478 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d12b      	bne.n	800d450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d402:	051b      	lsls	r3, r3, #20
 800d404:	4313      	orrs	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a11      	ldr	r2, [pc, #68]	; (800d470 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d009      	beq.n	800d442 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a10      	ldr	r2, [pc, #64]	; (800d474 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d004      	beq.n	800d442 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a0e      	ldr	r2, [pc, #56]	; (800d478 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d106      	bne.n	800d450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	4313      	orrs	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	40012c00 	.word	0x40012c00
 800d474:	40013400 	.word	0x40013400
 800d478:	40015000 	.word	0x40015000

0800d47c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f003 031f 	and.w	r3, r3, #31
 800d48e:	2204      	movs	r2, #4
 800d490:	fa02 f303 	lsl.w	r3, r2, r3
 800d494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6a1a      	ldr	r2, [r3, #32]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	43db      	mvns	r3, r3
 800d49e:	401a      	ands	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6a1a      	ldr	r2, [r3, #32]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	f003 031f 	and.w	r3, r3, #31
 800d4ae:	6879      	ldr	r1, [r7, #4]
 800d4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	621a      	str	r2, [r3, #32]
}
 800d4ba:	bf00      	nop
 800d4bc:	371c      	adds	r7, #28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e042      	b.n	800d55e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7f8 fa5a 	bl	80059a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2224      	movs	r2, #36	; 0x24
 800d4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f022 0201 	bic.w	r2, r2, #1
 800d506:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fc59 	bl	800ddc0 <UART_SetConfig>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b01      	cmp	r3, #1
 800d512:	d101      	bne.n	800d518 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e022      	b.n	800d55e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 ff49 	bl	800e3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d534:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d544:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f042 0201 	orr.w	r2, r2, #1
 800d554:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 ffd0 	bl	800e4fc <UART_CheckIdleState>
 800d55c:	4603      	mov	r3, r0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b08a      	sub	sp, #40	; 0x28
 800d56a:	af02      	add	r7, sp, #8
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	4613      	mov	r3, r2
 800d574:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d57c:	2b20      	cmp	r3, #32
 800d57e:	f040 8083 	bne.w	800d688 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <HAL_UART_Transmit+0x28>
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d101      	bne.n	800d592 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e07b      	b.n	800d68a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d101      	bne.n	800d5a0 <HAL_UART_Transmit+0x3a>
 800d59c:	2302      	movs	r3, #2
 800d59e:	e074      	b.n	800d68a <HAL_UART_Transmit+0x124>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2221      	movs	r2, #33	; 0x21
 800d5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5b8:	f7f8 fd0c 	bl	8005fd4 <HAL_GetTick>
 800d5bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	88fa      	ldrh	r2, [r7, #6]
 800d5c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	88fa      	ldrh	r2, [r7, #6]
 800d5ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d6:	d108      	bne.n	800d5ea <HAL_UART_Transmit+0x84>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d104      	bne.n	800d5ea <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	61bb      	str	r3, [r7, #24]
 800d5e8:	e003      	b.n	800d5f2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d5fa:	e02c      	b.n	800d656 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2200      	movs	r2, #0
 800d604:	2180      	movs	r1, #128	; 0x80
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f000 ffc3 	bl	800e592 <UART_WaitOnFlagUntilTimeout>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e039      	b.n	800d68a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10b      	bne.n	800d634 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	881b      	ldrh	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d62a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	3302      	adds	r3, #2
 800d630:	61bb      	str	r3, [r7, #24]
 800d632:	e007      	b.n	800d644 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	781a      	ldrb	r2, [r3, #0]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	3301      	adds	r3, #1
 800d642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	3b01      	subs	r3, #1
 800d64e:	b29a      	uxth	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1cc      	bne.n	800d5fc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2200      	movs	r2, #0
 800d66a:	2140      	movs	r1, #64	; 0x40
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f000 ff90 	bl	800e592 <UART_WaitOnFlagUntilTimeout>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e006      	b.n	800d68a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2220      	movs	r2, #32
 800d680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	e000      	b.n	800d68a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d688:	2302      	movs	r3, #2
  }
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b08a      	sub	sp, #40	; 0x28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	d142      	bne.n	800d732 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <HAL_UART_Receive_DMA+0x24>
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e03b      	b.n	800d734 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d101      	bne.n	800d6ca <HAL_UART_Receive_DMA+0x36>
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	e034      	b.n	800d734 <HAL_UART_Receive_DMA+0xa0>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a17      	ldr	r2, [pc, #92]	; (800d73c <HAL_UART_Receive_DMA+0xa8>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d01f      	beq.n	800d722 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d018      	beq.n	800d722 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	e853 3f00 	ldrex	r3, [r3]
 800d6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	623b      	str	r3, [r7, #32]
 800d710:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d712:	69f9      	ldr	r1, [r7, #28]
 800d714:	6a3a      	ldr	r2, [r7, #32]
 800d716:	e841 2300 	strex	r3, r2, [r1]
 800d71a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e6      	bne.n	800d6f0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d722:	88fb      	ldrh	r3, [r7, #6]
 800d724:	461a      	mov	r2, r3
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 fffb 	bl	800e724 <UART_Start_Receive_DMA>
 800d72e:	4603      	mov	r3, r0
 800d730:	e000      	b.n	800d734 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d732:	2302      	movs	r3, #2
  }
}
 800d734:	4618      	mov	r0, r3
 800d736:	3728      	adds	r7, #40	; 0x28
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	40008000 	.word	0x40008000

0800d740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b0ba      	sub	sp, #232	; 0xe8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d766:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d76a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d76e:	4013      	ands	r3, r2
 800d770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d11b      	bne.n	800d7b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d780:	f003 0320 	and.w	r3, r3, #32
 800d784:	2b00      	cmp	r3, #0
 800d786:	d015      	beq.n	800d7b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d78c:	f003 0320 	and.w	r3, r3, #32
 800d790:	2b00      	cmp	r3, #0
 800d792:	d105      	bne.n	800d7a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 82d6 	beq.w	800dd56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	4798      	blx	r3
      }
      return;
 800d7b2:	e2d0      	b.n	800dd56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f000 811f 	beq.w	800d9fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7c2:	4b8b      	ldr	r3, [pc, #556]	; (800d9f0 <HAL_UART_IRQHandler+0x2b0>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7ce:	4b89      	ldr	r3, [pc, #548]	; (800d9f4 <HAL_UART_IRQHandler+0x2b4>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 8112 	beq.w	800d9fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d011      	beq.n	800d808 <HAL_UART_IRQHandler+0xc8>
 800d7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fe:	f043 0201 	orr.w	r2, r3, #1
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d011      	beq.n	800d838 <HAL_UART_IRQHandler+0xf8>
 800d814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2202      	movs	r2, #2
 800d826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82e:	f043 0204 	orr.w	r2, r3, #4
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d83c:	f003 0304 	and.w	r3, r3, #4
 800d840:	2b00      	cmp	r3, #0
 800d842:	d011      	beq.n	800d868 <HAL_UART_IRQHandler+0x128>
 800d844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00b      	beq.n	800d868 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2204      	movs	r2, #4
 800d856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d85e:	f043 0202 	orr.w	r2, r3, #2
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86c:	f003 0308 	and.w	r3, r3, #8
 800d870:	2b00      	cmp	r3, #0
 800d872:	d017      	beq.n	800d8a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d105      	bne.n	800d88c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d880:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d884:	4b5a      	ldr	r3, [pc, #360]	; (800d9f0 <HAL_UART_IRQHandler+0x2b0>)
 800d886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00b      	beq.n	800d8a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2208      	movs	r2, #8
 800d892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d89a:	f043 0208 	orr.w	r2, r3, #8
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d012      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x196>
 800d8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00c      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8cc:	f043 0220 	orr.w	r2, r3, #32
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 823c 	beq.w	800dd5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d013      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d91c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92a:	2b40      	cmp	r3, #64	; 0x40
 800d92c:	d005      	beq.n	800d93a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d92e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d932:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d936:	2b00      	cmp	r3, #0
 800d938:	d04f      	beq.n	800d9da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 ffdb 	bl	800e8f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b40      	cmp	r3, #64	; 0x40
 800d94c:	d141      	bne.n	800d9d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3308      	adds	r3, #8
 800d954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d96c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d97a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d97e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1d9      	bne.n	800d94e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d013      	beq.n	800d9ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9a6:	4a14      	ldr	r2, [pc, #80]	; (800d9f8 <HAL_UART_IRQHandler+0x2b8>)
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fa fecc 	bl	800874c <HAL_DMA_Abort_IT>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d017      	beq.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c8:	e00f      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f9ee 	bl	800ddac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d0:	e00b      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f9ea 	bl	800ddac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d8:	e007      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f9e6 	bl	800ddac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9e8:	e1b7      	b.n	800dd5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ea:	bf00      	nop
    return;
 800d9ec:	e1b5      	b.n	800dd5a <HAL_UART_IRQHandler+0x61a>
 800d9ee:	bf00      	nop
 800d9f0:	10000001 	.word	0x10000001
 800d9f4:	04000120 	.word	0x04000120
 800d9f8:	0800eba1 	.word	0x0800eba1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da00:	2b01      	cmp	r3, #1
 800da02:	f040 814a 	bne.w	800dc9a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da0a:	f003 0310 	and.w	r3, r3, #16
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 8143 	beq.w	800dc9a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da18:	f003 0310 	and.w	r3, r3, #16
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 813c 	beq.w	800dc9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2210      	movs	r2, #16
 800da28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	f040 80b5 	bne.w	800dba4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 8187 	beq.w	800dd5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da5a:	429a      	cmp	r2, r3
 800da5c:	f080 817f 	bcs.w	800dd5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0320 	and.w	r3, r3, #32
 800da76:	2b00      	cmp	r3, #0
 800da78:	f040 8086 	bne.w	800db88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da88:	e853 3f00 	ldrex	r3, [r3]
 800da8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	461a      	mov	r2, r3
 800daa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800daa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800daaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dabe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1da      	bne.n	800da7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3308      	adds	r3, #8
 800dacc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dad0:	e853 3f00 	ldrex	r3, [r3]
 800dad4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dad8:	f023 0301 	bic.w	r3, r3, #1
 800dadc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3308      	adds	r3, #8
 800dae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800daea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800daee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800daf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800daf6:	e841 2300 	strex	r3, r2, [r1]
 800dafa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1e1      	bne.n	800dac6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3308      	adds	r3, #8
 800db08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db0c:	e853 3f00 	ldrex	r3, [r3]
 800db10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3308      	adds	r3, #8
 800db22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db26:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db2e:	e841 2300 	strex	r3, r2, [r1]
 800db32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1e3      	bne.n	800db02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2220      	movs	r2, #32
 800db3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db50:	e853 3f00 	ldrex	r3, [r3]
 800db54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db58:	f023 0310 	bic.w	r3, r3, #16
 800db5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	461a      	mov	r2, r3
 800db66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800db6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e4      	bne.n	800db48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db82:	4618      	mov	r0, r3
 800db84:	f7fa fd89 	bl	800869a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db94:	b29b      	uxth	r3, r3
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7f5 fd3f 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dba2:	e0dc      	b.n	800dd5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 80ce 	beq.w	800dd62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800dbc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80c9 	beq.w	800dd62 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbf2:	647b      	str	r3, [r7, #68]	; 0x44
 800dbf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e4      	bne.n	800dbd0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	e853 3f00 	ldrex	r3, [r3]
 800dc14:	623b      	str	r3, [r7, #32]
   return(result);
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc1c:	f023 0301 	bic.w	r3, r3, #1
 800dc20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3308      	adds	r3, #8
 800dc2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc2e:	633a      	str	r2, [r7, #48]	; 0x30
 800dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e1      	bne.n	800dc06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	e853 3f00 	ldrex	r3, [r3]
 800dc62:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f023 0310 	bic.w	r3, r3, #16
 800dc6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc78:	61fb      	str	r3, [r7, #28]
 800dc7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7c:	69b9      	ldr	r1, [r7, #24]
 800dc7e:	69fa      	ldr	r2, [r7, #28]
 800dc80:	e841 2300 	strex	r3, r2, [r1]
 800dc84:	617b      	str	r3, [r7, #20]
   return(result);
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1e4      	bne.n	800dc56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc90:	4619      	mov	r1, r3
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7f5 fcc4 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc98:	e063      	b.n	800dd62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00e      	beq.n	800dcc4 <HAL_UART_IRQHandler+0x584>
 800dca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d008      	beq.n	800dcc4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dcba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 ffb0 	bl	800ec22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcc2:	e051      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dcc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d014      	beq.n	800dcfa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dcd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d105      	bne.n	800dce8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dcdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d008      	beq.n	800dcfa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d03a      	beq.n	800dd66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	4798      	blx	r3
    }
    return;
 800dcf8:	e035      	b.n	800dd66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d009      	beq.n	800dd1a <HAL_UART_IRQHandler+0x5da>
 800dd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 ff5a 	bl	800ebcc <UART_EndTransmit_IT>
    return;
 800dd18:	e026      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d009      	beq.n	800dd3a <HAL_UART_IRQHandler+0x5fa>
 800dd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 ff89 	bl	800ec4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd38:	e016      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d010      	beq.n	800dd68 <HAL_UART_IRQHandler+0x628>
 800dd46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da0c      	bge.n	800dd68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 ff71 	bl	800ec36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd54:	e008      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
      return;
 800dd56:	bf00      	nop
 800dd58:	e006      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
    return;
 800dd5a:	bf00      	nop
 800dd5c:	e004      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
      return;
 800dd5e:	bf00      	nop
 800dd60:	e002      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
      return;
 800dd62:	bf00      	nop
 800dd64:	e000      	b.n	800dd68 <HAL_UART_IRQHandler+0x628>
    return;
 800dd66:	bf00      	nop
  }
}
 800dd68:	37e8      	adds	r7, #232	; 0xe8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop

0800dd70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ddc4:	b08c      	sub	sp, #48	; 0x30
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	689a      	ldr	r2, [r3, #8]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	431a      	orrs	r2, r3
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	69db      	ldr	r3, [r3, #28]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	4baa      	ldr	r3, [pc, #680]	; (800e098 <UART_SetConfig+0x2d8>)
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	697a      	ldr	r2, [r7, #20]
 800ddf4:	6812      	ldr	r2, [r2, #0]
 800ddf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddf8:	430b      	orrs	r3, r1
 800ddfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	68da      	ldr	r2, [r3, #12]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	430a      	orrs	r2, r1
 800de10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a9f      	ldr	r2, [pc, #636]	; (800e09c <UART_SetConfig+0x2dc>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d004      	beq.n	800de2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de28:	4313      	orrs	r3, r2
 800de2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800de36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	6812      	ldr	r2, [r2, #0]
 800de3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de40:	430b      	orrs	r3, r1
 800de42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4a:	f023 010f 	bic.w	r1, r3, #15
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	430a      	orrs	r2, r1
 800de58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a90      	ldr	r2, [pc, #576]	; (800e0a0 <UART_SetConfig+0x2e0>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d125      	bne.n	800deb0 <UART_SetConfig+0xf0>
 800de64:	4b8f      	ldr	r3, [pc, #572]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800de66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de6a:	f003 0303 	and.w	r3, r3, #3
 800de6e:	2b03      	cmp	r3, #3
 800de70:	d81a      	bhi.n	800dea8 <UART_SetConfig+0xe8>
 800de72:	a201      	add	r2, pc, #4	; (adr r2, 800de78 <UART_SetConfig+0xb8>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800de89 	.word	0x0800de89
 800de7c:	0800de99 	.word	0x0800de99
 800de80:	0800de91 	.word	0x0800de91
 800de84:	0800dea1 	.word	0x0800dea1
 800de88:	2301      	movs	r3, #1
 800de8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de8e:	e116      	b.n	800e0be <UART_SetConfig+0x2fe>
 800de90:	2302      	movs	r3, #2
 800de92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de96:	e112      	b.n	800e0be <UART_SetConfig+0x2fe>
 800de98:	2304      	movs	r3, #4
 800de9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de9e:	e10e      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dea0:	2308      	movs	r3, #8
 800dea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dea6:	e10a      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dea8:	2310      	movs	r3, #16
 800deaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800deae:	e106      	b.n	800e0be <UART_SetConfig+0x2fe>
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a7c      	ldr	r2, [pc, #496]	; (800e0a8 <UART_SetConfig+0x2e8>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d138      	bne.n	800df2c <UART_SetConfig+0x16c>
 800deba:	4b7a      	ldr	r3, [pc, #488]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800debc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec0:	f003 030c 	and.w	r3, r3, #12
 800dec4:	2b0c      	cmp	r3, #12
 800dec6:	d82d      	bhi.n	800df24 <UART_SetConfig+0x164>
 800dec8:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <UART_SetConfig+0x110>)
 800deca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dece:	bf00      	nop
 800ded0:	0800df05 	.word	0x0800df05
 800ded4:	0800df25 	.word	0x0800df25
 800ded8:	0800df25 	.word	0x0800df25
 800dedc:	0800df25 	.word	0x0800df25
 800dee0:	0800df15 	.word	0x0800df15
 800dee4:	0800df25 	.word	0x0800df25
 800dee8:	0800df25 	.word	0x0800df25
 800deec:	0800df25 	.word	0x0800df25
 800def0:	0800df0d 	.word	0x0800df0d
 800def4:	0800df25 	.word	0x0800df25
 800def8:	0800df25 	.word	0x0800df25
 800defc:	0800df25 	.word	0x0800df25
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	2300      	movs	r3, #0
 800df06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df0a:	e0d8      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df0c:	2302      	movs	r3, #2
 800df0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df12:	e0d4      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df14:	2304      	movs	r3, #4
 800df16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df1a:	e0d0      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df1c:	2308      	movs	r3, #8
 800df1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df22:	e0cc      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df24:	2310      	movs	r3, #16
 800df26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df2a:	e0c8      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a5e      	ldr	r2, [pc, #376]	; (800e0ac <UART_SetConfig+0x2ec>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d125      	bne.n	800df82 <UART_SetConfig+0x1c2>
 800df36:	4b5b      	ldr	r3, [pc, #364]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800df38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df40:	2b30      	cmp	r3, #48	; 0x30
 800df42:	d016      	beq.n	800df72 <UART_SetConfig+0x1b2>
 800df44:	2b30      	cmp	r3, #48	; 0x30
 800df46:	d818      	bhi.n	800df7a <UART_SetConfig+0x1ba>
 800df48:	2b20      	cmp	r3, #32
 800df4a:	d00a      	beq.n	800df62 <UART_SetConfig+0x1a2>
 800df4c:	2b20      	cmp	r3, #32
 800df4e:	d814      	bhi.n	800df7a <UART_SetConfig+0x1ba>
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <UART_SetConfig+0x19a>
 800df54:	2b10      	cmp	r3, #16
 800df56:	d008      	beq.n	800df6a <UART_SetConfig+0x1aa>
 800df58:	e00f      	b.n	800df7a <UART_SetConfig+0x1ba>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df60:	e0ad      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df62:	2302      	movs	r3, #2
 800df64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df68:	e0a9      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df6a:	2304      	movs	r3, #4
 800df6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df70:	e0a5      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df72:	2308      	movs	r3, #8
 800df74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df78:	e0a1      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df7a:	2310      	movs	r3, #16
 800df7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df80:	e09d      	b.n	800e0be <UART_SetConfig+0x2fe>
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a4a      	ldr	r2, [pc, #296]	; (800e0b0 <UART_SetConfig+0x2f0>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d125      	bne.n	800dfd8 <UART_SetConfig+0x218>
 800df8c:	4b45      	ldr	r3, [pc, #276]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800df8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df96:	2bc0      	cmp	r3, #192	; 0xc0
 800df98:	d016      	beq.n	800dfc8 <UART_SetConfig+0x208>
 800df9a:	2bc0      	cmp	r3, #192	; 0xc0
 800df9c:	d818      	bhi.n	800dfd0 <UART_SetConfig+0x210>
 800df9e:	2b80      	cmp	r3, #128	; 0x80
 800dfa0:	d00a      	beq.n	800dfb8 <UART_SetConfig+0x1f8>
 800dfa2:	2b80      	cmp	r3, #128	; 0x80
 800dfa4:	d814      	bhi.n	800dfd0 <UART_SetConfig+0x210>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <UART_SetConfig+0x1f0>
 800dfaa:	2b40      	cmp	r3, #64	; 0x40
 800dfac:	d008      	beq.n	800dfc0 <UART_SetConfig+0x200>
 800dfae:	e00f      	b.n	800dfd0 <UART_SetConfig+0x210>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfb6:	e082      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfbe:	e07e      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dfc0:	2304      	movs	r3, #4
 800dfc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfc6:	e07a      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dfc8:	2308      	movs	r3, #8
 800dfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfce:	e076      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dfd0:	2310      	movs	r3, #16
 800dfd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfd6:	e072      	b.n	800e0be <UART_SetConfig+0x2fe>
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a35      	ldr	r2, [pc, #212]	; (800e0b4 <UART_SetConfig+0x2f4>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d12a      	bne.n	800e038 <UART_SetConfig+0x278>
 800dfe2:	4b30      	ldr	r3, [pc, #192]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800dfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dff0:	d01a      	beq.n	800e028 <UART_SetConfig+0x268>
 800dff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dff6:	d81b      	bhi.n	800e030 <UART_SetConfig+0x270>
 800dff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dffc:	d00c      	beq.n	800e018 <UART_SetConfig+0x258>
 800dffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e002:	d815      	bhi.n	800e030 <UART_SetConfig+0x270>
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <UART_SetConfig+0x250>
 800e008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e00c:	d008      	beq.n	800e020 <UART_SetConfig+0x260>
 800e00e:	e00f      	b.n	800e030 <UART_SetConfig+0x270>
 800e010:	2300      	movs	r3, #0
 800e012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e016:	e052      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e018:	2302      	movs	r3, #2
 800e01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e01e:	e04e      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e020:	2304      	movs	r3, #4
 800e022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e026:	e04a      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e028:	2308      	movs	r3, #8
 800e02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e02e:	e046      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e030:	2310      	movs	r3, #16
 800e032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e036:	e042      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a17      	ldr	r2, [pc, #92]	; (800e09c <UART_SetConfig+0x2dc>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d13a      	bne.n	800e0b8 <UART_SetConfig+0x2f8>
 800e042:	4b18      	ldr	r3, [pc, #96]	; (800e0a4 <UART_SetConfig+0x2e4>)
 800e044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e048:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e04c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e050:	d01a      	beq.n	800e088 <UART_SetConfig+0x2c8>
 800e052:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e056:	d81b      	bhi.n	800e090 <UART_SetConfig+0x2d0>
 800e058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e05c:	d00c      	beq.n	800e078 <UART_SetConfig+0x2b8>
 800e05e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e062:	d815      	bhi.n	800e090 <UART_SetConfig+0x2d0>
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <UART_SetConfig+0x2b0>
 800e068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e06c:	d008      	beq.n	800e080 <UART_SetConfig+0x2c0>
 800e06e:	e00f      	b.n	800e090 <UART_SetConfig+0x2d0>
 800e070:	2300      	movs	r3, #0
 800e072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e076:	e022      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e078:	2302      	movs	r3, #2
 800e07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e07e:	e01e      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e080:	2304      	movs	r3, #4
 800e082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e086:	e01a      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e088:	2308      	movs	r3, #8
 800e08a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e08e:	e016      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e090:	2310      	movs	r3, #16
 800e092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e096:	e012      	b.n	800e0be <UART_SetConfig+0x2fe>
 800e098:	cfff69f3 	.word	0xcfff69f3
 800e09c:	40008000 	.word	0x40008000
 800e0a0:	40013800 	.word	0x40013800
 800e0a4:	40021000 	.word	0x40021000
 800e0a8:	40004400 	.word	0x40004400
 800e0ac:	40004800 	.word	0x40004800
 800e0b0:	40004c00 	.word	0x40004c00
 800e0b4:	40005000 	.word	0x40005000
 800e0b8:	2310      	movs	r3, #16
 800e0ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4aae      	ldr	r2, [pc, #696]	; (800e37c <UART_SetConfig+0x5bc>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	f040 8097 	bne.w	800e1f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e0ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0ce:	2b08      	cmp	r3, #8
 800e0d0:	d823      	bhi.n	800e11a <UART_SetConfig+0x35a>
 800e0d2:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <UART_SetConfig+0x318>)
 800e0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d8:	0800e0fd 	.word	0x0800e0fd
 800e0dc:	0800e11b 	.word	0x0800e11b
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e11b 	.word	0x0800e11b
 800e0e8:	0800e10b 	.word	0x0800e10b
 800e0ec:	0800e11b 	.word	0x0800e11b
 800e0f0:	0800e11b 	.word	0x0800e11b
 800e0f4:	0800e11b 	.word	0x0800e11b
 800e0f8:	0800e113 	.word	0x0800e113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0fc:	f7fd fc76 	bl	800b9ec <HAL_RCC_GetPCLK1Freq>
 800e100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e102:	e010      	b.n	800e126 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e104:	4b9e      	ldr	r3, [pc, #632]	; (800e380 <UART_SetConfig+0x5c0>)
 800e106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e108:	e00d      	b.n	800e126 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e10a:	f7fd fc01 	bl	800b910 <HAL_RCC_GetSysClockFreq>
 800e10e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e110:	e009      	b.n	800e126 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e118:	e005      	b.n	800e126 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 8130 	beq.w	800e38e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e132:	4a94      	ldr	r2, [pc, #592]	; (800e384 <UART_SetConfig+0x5c4>)
 800e134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e138:	461a      	mov	r2, r3
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e140:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	4613      	mov	r3, r2
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	69ba      	ldr	r2, [r7, #24]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d305      	bcc.n	800e15e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e158:	69ba      	ldr	r2, [r7, #24]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d903      	bls.n	800e166 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e15e:	2301      	movs	r3, #1
 800e160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e164:	e113      	b.n	800e38e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	2200      	movs	r2, #0
 800e16a:	60bb      	str	r3, [r7, #8]
 800e16c:	60fa      	str	r2, [r7, #12]
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	4a84      	ldr	r2, [pc, #528]	; (800e384 <UART_SetConfig+0x5c4>)
 800e174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	2200      	movs	r2, #0
 800e17c:	603b      	str	r3, [r7, #0]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e188:	f7f2 fd36 	bl	8000bf8 <__aeabi_uldivmod>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4610      	mov	r0, r2
 800e192:	4619      	mov	r1, r3
 800e194:	f04f 0200 	mov.w	r2, #0
 800e198:	f04f 0300 	mov.w	r3, #0
 800e19c:	020b      	lsls	r3, r1, #8
 800e19e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e1a2:	0202      	lsls	r2, r0, #8
 800e1a4:	6979      	ldr	r1, [r7, #20]
 800e1a6:	6849      	ldr	r1, [r1, #4]
 800e1a8:	0849      	lsrs	r1, r1, #1
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	eb12 0804 	adds.w	r8, r2, r4
 800e1b4:	eb43 0905 	adc.w	r9, r3, r5
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	469a      	mov	sl, r3
 800e1c0:	4693      	mov	fp, r2
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	465b      	mov	r3, fp
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	f7f2 fd15 	bl	8000bf8 <__aeabi_uldivmod>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1d6:	6a3b      	ldr	r3, [r7, #32]
 800e1d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e1dc:	d308      	bcc.n	800e1f0 <UART_SetConfig+0x430>
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1e4:	d204      	bcs.n	800e1f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	6a3a      	ldr	r2, [r7, #32]
 800e1ec:	60da      	str	r2, [r3, #12]
 800e1ee:	e0ce      	b.n	800e38e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e1f6:	e0ca      	b.n	800e38e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	69db      	ldr	r3, [r3, #28]
 800e1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e200:	d166      	bne.n	800e2d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e206:	2b08      	cmp	r3, #8
 800e208:	d827      	bhi.n	800e25a <UART_SetConfig+0x49a>
 800e20a:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <UART_SetConfig+0x450>)
 800e20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e210:	0800e235 	.word	0x0800e235
 800e214:	0800e23d 	.word	0x0800e23d
 800e218:	0800e245 	.word	0x0800e245
 800e21c:	0800e25b 	.word	0x0800e25b
 800e220:	0800e24b 	.word	0x0800e24b
 800e224:	0800e25b 	.word	0x0800e25b
 800e228:	0800e25b 	.word	0x0800e25b
 800e22c:	0800e25b 	.word	0x0800e25b
 800e230:	0800e253 	.word	0x0800e253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e234:	f7fd fbda 	bl	800b9ec <HAL_RCC_GetPCLK1Freq>
 800e238:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e23a:	e014      	b.n	800e266 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e23c:	f7fd fbec 	bl	800ba18 <HAL_RCC_GetPCLK2Freq>
 800e240:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e242:	e010      	b.n	800e266 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e244:	4b4e      	ldr	r3, [pc, #312]	; (800e380 <UART_SetConfig+0x5c0>)
 800e246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e248:	e00d      	b.n	800e266 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e24a:	f7fd fb61 	bl	800b910 <HAL_RCC_GetSysClockFreq>
 800e24e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e250:	e009      	b.n	800e266 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e258:	e005      	b.n	800e266 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e25a:	2300      	movs	r3, #0
 800e25c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e25e:	2301      	movs	r3, #1
 800e260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 8090 	beq.w	800e38e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e272:	4a44      	ldr	r2, [pc, #272]	; (800e384 <UART_SetConfig+0x5c4>)
 800e274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e278:	461a      	mov	r2, r3
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e280:	005a      	lsls	r2, r3, #1
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	085b      	lsrs	r3, r3, #1
 800e288:	441a      	add	r2, r3
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e292:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	2b0f      	cmp	r3, #15
 800e298:	d916      	bls.n	800e2c8 <UART_SetConfig+0x508>
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2a0:	d212      	bcs.n	800e2c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2a2:	6a3b      	ldr	r3, [r7, #32]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f023 030f 	bic.w	r3, r3, #15
 800e2aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	085b      	lsrs	r3, r3, #1
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	f003 0307 	and.w	r3, r3, #7
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	8bfb      	ldrh	r3, [r7, #30]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	8bfa      	ldrh	r2, [r7, #30]
 800e2c4:	60da      	str	r2, [r3, #12]
 800e2c6:	e062      	b.n	800e38e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e2ce:	e05e      	b.n	800e38e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d828      	bhi.n	800e32a <UART_SetConfig+0x56a>
 800e2d8:	a201      	add	r2, pc, #4	; (adr r2, 800e2e0 <UART_SetConfig+0x520>)
 800e2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2de:	bf00      	nop
 800e2e0:	0800e305 	.word	0x0800e305
 800e2e4:	0800e30d 	.word	0x0800e30d
 800e2e8:	0800e315 	.word	0x0800e315
 800e2ec:	0800e32b 	.word	0x0800e32b
 800e2f0:	0800e31b 	.word	0x0800e31b
 800e2f4:	0800e32b 	.word	0x0800e32b
 800e2f8:	0800e32b 	.word	0x0800e32b
 800e2fc:	0800e32b 	.word	0x0800e32b
 800e300:	0800e323 	.word	0x0800e323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e304:	f7fd fb72 	bl	800b9ec <HAL_RCC_GetPCLK1Freq>
 800e308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e30a:	e014      	b.n	800e336 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e30c:	f7fd fb84 	bl	800ba18 <HAL_RCC_GetPCLK2Freq>
 800e310:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e312:	e010      	b.n	800e336 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e314:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <UART_SetConfig+0x5c0>)
 800e316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e318:	e00d      	b.n	800e336 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e31a:	f7fd faf9 	bl	800b910 <HAL_RCC_GetSysClockFreq>
 800e31e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e320:	e009      	b.n	800e336 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e328:	e005      	b.n	800e336 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e32a:	2300      	movs	r3, #0
 800e32c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e334:	bf00      	nop
    }

    if (pclk != 0U)
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d028      	beq.n	800e38e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e340:	4a10      	ldr	r2, [pc, #64]	; (800e384 <UART_SetConfig+0x5c4>)
 800e342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e346:	461a      	mov	r2, r3
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	085b      	lsrs	r3, r3, #1
 800e354:	441a      	add	r2, r3
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e35e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e360:	6a3b      	ldr	r3, [r7, #32]
 800e362:	2b0f      	cmp	r3, #15
 800e364:	d910      	bls.n	800e388 <UART_SetConfig+0x5c8>
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e36c:	d20c      	bcs.n	800e388 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	b29a      	uxth	r2, r3
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	60da      	str	r2, [r3, #12]
 800e378:	e009      	b.n	800e38e <UART_SetConfig+0x5ce>
 800e37a:	bf00      	nop
 800e37c:	40008000 	.word	0x40008000
 800e380:	00f42400 	.word	0x00f42400
 800e384:	080169f0 	.word	0x080169f0
      }
      else
      {
        ret = HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	2201      	movs	r2, #1
 800e392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	2201      	movs	r2, #1
 800e39a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e3aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3730      	adds	r7, #48	; 0x30
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00a      	beq.n	800e3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	430a      	orrs	r2, r1
 800e3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00a      	beq.n	800e404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00a      	beq.n	800e426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	430a      	orrs	r2, r1
 800e446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46e:	f003 0320 	and.w	r3, r3, #32
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e494:	2b00      	cmp	r3, #0
 800e496:	d01a      	beq.n	800e4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4b6:	d10a      	bne.n	800e4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	605a      	str	r2, [r3, #4]
  }
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af02      	add	r7, sp, #8
 800e502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e50c:	f7f7 fd62 	bl	8005fd4 <HAL_GetTick>
 800e510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f003 0308 	and.w	r3, r3, #8
 800e51c:	2b08      	cmp	r3, #8
 800e51e:	d10e      	bne.n	800e53e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 f82f 	bl	800e592 <UART_WaitOnFlagUntilTimeout>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e53a:	2303      	movs	r3, #3
 800e53c:	e025      	b.n	800e58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b04      	cmp	r3, #4
 800e54a:	d10e      	bne.n	800e56a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f819 	bl	800e592 <UART_WaitOnFlagUntilTimeout>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e566:	2303      	movs	r3, #3
 800e568:	e00f      	b.n	800e58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2220      	movs	r2, #32
 800e56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b09c      	sub	sp, #112	; 0x70
 800e596:	af00      	add	r7, sp, #0
 800e598:	60f8      	str	r0, [r7, #12]
 800e59a:	60b9      	str	r1, [r7, #8]
 800e59c:	603b      	str	r3, [r7, #0]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5a2:	e0a9      	b.n	800e6f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	f000 80a5 	beq.w	800e6f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5ae:	f7f7 fd11 	bl	8005fd4 <HAL_GetTick>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	1ad3      	subs	r3, r2, r3
 800e5b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d302      	bcc.n	800e5c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d140      	bne.n	800e646 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5cc:	e853 3f00 	ldrex	r3, [r3]
 800e5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5d8:	667b      	str	r3, [r7, #100]	; 0x64
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5ea:	e841 2300 	strex	r3, r2, [r1]
 800e5ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1e6      	bne.n	800e5c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e600:	e853 3f00 	ldrex	r3, [r3]
 800e604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	f023 0301 	bic.w	r3, r3, #1
 800e60c:	663b      	str	r3, [r7, #96]	; 0x60
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3308      	adds	r3, #8
 800e614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e616:	64ba      	str	r2, [r7, #72]	; 0x48
 800e618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e61e:	e841 2300 	strex	r3, r2, [r1]
 800e622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e5      	bne.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2220      	movs	r2, #32
 800e62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2220      	movs	r2, #32
 800e636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e642:	2303      	movs	r3, #3
 800e644:	e069      	b.n	800e71a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f003 0304 	and.w	r3, r3, #4
 800e650:	2b00      	cmp	r3, #0
 800e652:	d051      	beq.n	800e6f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e65e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e662:	d149      	bne.n	800e6f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e66c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	e853 3f00 	ldrex	r3, [r3]
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e682:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	461a      	mov	r2, r3
 800e68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34
 800e68e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e694:	e841 2300 	strex	r3, r2, [r1]
 800e698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e6      	bne.n	800e66e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	e853 3f00 	ldrex	r3, [r3]
 800e6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	f023 0301 	bic.w	r3, r3, #1
 800e6b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3308      	adds	r3, #8
 800e6be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6c0:	623a      	str	r2, [r7, #32]
 800e6c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c4:	69f9      	ldr	r1, [r7, #28]
 800e6c6:	6a3a      	ldr	r2, [r7, #32]
 800e6c8:	e841 2300 	strex	r3, r2, [r1]
 800e6cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e5      	bne.n	800e6a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2220      	movs	r2, #32
 800e6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2220      	movs	r2, #32
 800e6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e010      	b.n	800e71a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	69da      	ldr	r2, [r3, #28]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	4013      	ands	r3, r2
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	429a      	cmp	r2, r3
 800e706:	bf0c      	ite	eq
 800e708:	2301      	moveq	r3, #1
 800e70a:	2300      	movne	r3, #0
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	461a      	mov	r2, r3
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	429a      	cmp	r2, r3
 800e714:	f43f af46 	beq.w	800e5a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3770      	adds	r7, #112	; 0x70
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b096      	sub	sp, #88	; 0x58
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	88fa      	ldrh	r2, [r7, #6]
 800e73c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2222      	movs	r2, #34	; 0x22
 800e74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d02c      	beq.n	800e7b2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e75c:	4a42      	ldr	r2, [pc, #264]	; (800e868 <UART_Start_Receive_DMA+0x144>)
 800e75e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e764:	4a41      	ldr	r2, [pc, #260]	; (800e86c <UART_Start_Receive_DMA+0x148>)
 800e766:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76c:	4a40      	ldr	r2, [pc, #256]	; (800e870 <UART_Start_Receive_DMA+0x14c>)
 800e76e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e774:	2200      	movs	r2, #0
 800e776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3324      	adds	r3, #36	; 0x24
 800e782:	4619      	mov	r1, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e788:	461a      	mov	r2, r3
 800e78a:	88fb      	ldrh	r3, [r7, #6]
 800e78c:	f7f9 ff0a 	bl	80085a4 <HAL_DMA_Start_IT>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00d      	beq.n	800e7b2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2210      	movs	r2, #16
 800e79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e055      	b.n	800e85e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d018      	beq.n	800e7f4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ca:	e853 3f00 	ldrex	r3, [r3]
 800e7ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7d6:	657b      	str	r3, [r7, #84]	; 0x54
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7e8:	e841 2300 	strex	r3, r2, [r1]
 800e7ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1e6      	bne.n	800e7c2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	e853 3f00 	ldrex	r3, [r3]
 800e802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	f043 0301 	orr.w	r3, r3, #1
 800e80a:	653b      	str	r3, [r7, #80]	; 0x50
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	3308      	adds	r3, #8
 800e812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e814:	637a      	str	r2, [r7, #52]	; 0x34
 800e816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e81c:	e841 2300 	strex	r3, r2, [r1]
 800e820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1e5      	bne.n	800e7f4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3308      	adds	r3, #8
 800e82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	e853 3f00 	ldrex	r3, [r3]
 800e836:	613b      	str	r3, [r7, #16]
   return(result);
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3308      	adds	r3, #8
 800e846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e848:	623a      	str	r2, [r7, #32]
 800e84a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84c:	69f9      	ldr	r1, [r7, #28]
 800e84e:	6a3a      	ldr	r2, [r7, #32]
 800e850:	e841 2300 	strex	r3, r2, [r1]
 800e854:	61bb      	str	r3, [r7, #24]
   return(result);
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1e5      	bne.n	800e828 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3758      	adds	r7, #88	; 0x58
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	0800e9c3 	.word	0x0800e9c3
 800e86c:	0800eae9 	.word	0x0800eae9
 800e870:	0800eb21 	.word	0x0800eb21

0800e874 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b08f      	sub	sp, #60	; 0x3c
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	61fb      	str	r3, [r7, #28]
   return(result);
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e89a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e89c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e6      	bne.n	800e87c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	e853 3f00 	ldrex	r3, [r3]
 800e8bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e8c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ce:	61ba      	str	r2, [r7, #24]
 800e8d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d2:	6979      	ldr	r1, [r7, #20]
 800e8d4:	69ba      	ldr	r2, [r7, #24]
 800e8d6:	e841 2300 	strex	r3, r2, [r1]
 800e8da:	613b      	str	r3, [r7, #16]
   return(result);
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1e5      	bne.n	800e8ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e8ea:	bf00      	nop
 800e8ec:	373c      	adds	r7, #60	; 0x3c
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b095      	sub	sp, #84	; 0x54
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e906:	e853 3f00 	ldrex	r3, [r3]
 800e90a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e912:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	461a      	mov	r2, r3
 800e91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91c:	643b      	str	r3, [r7, #64]	; 0x40
 800e91e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e924:	e841 2300 	strex	r3, r2, [r1]
 800e928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1e6      	bne.n	800e8fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e938:	6a3b      	ldr	r3, [r7, #32]
 800e93a:	e853 3f00 	ldrex	r3, [r3]
 800e93e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e946:	f023 0301 	bic.w	r3, r3, #1
 800e94a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3308      	adds	r3, #8
 800e952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e954:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e95c:	e841 2300 	strex	r3, r2, [r1]
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1e3      	bne.n	800e930 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d118      	bne.n	800e9a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	e853 3f00 	ldrex	r3, [r3]
 800e97c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f023 0310 	bic.w	r3, r3, #16
 800e984:	647b      	str	r3, [r7, #68]	; 0x44
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	461a      	mov	r2, r3
 800e98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e992:	6979      	ldr	r1, [r7, #20]
 800e994:	69ba      	ldr	r2, [r7, #24]
 800e996:	e841 2300 	strex	r3, r2, [r1]
 800e99a:	613b      	str	r3, [r7, #16]
   return(result);
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1e6      	bne.n	800e970 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e9b6:	bf00      	nop
 800e9b8:	3754      	adds	r7, #84	; 0x54
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b09c      	sub	sp, #112	; 0x70
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f003 0320 	and.w	r3, r3, #32
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d171      	bne.n	800eac2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ee:	e853 3f00 	ldrex	r3, [r3]
 800e9f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	461a      	mov	r2, r3
 800ea02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e6      	bne.n	800e9e6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2a:	f023 0301 	bic.w	r3, r3, #1
 800ea2e:	667b      	str	r3, [r7, #100]	; 0x64
 800ea30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3308      	adds	r3, #8
 800ea36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea38:	647a      	str	r2, [r7, #68]	; 0x44
 800ea3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea40:	e841 2300 	strex	r3, r2, [r1]
 800ea44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1e5      	bne.n	800ea18 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3308      	adds	r3, #8
 800ea52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	e853 3f00 	ldrex	r3, [r3]
 800ea5a:	623b      	str	r3, [r7, #32]
   return(result);
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea62:	663b      	str	r3, [r7, #96]	; 0x60
 800ea64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3308      	adds	r3, #8
 800ea6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea6c:	633a      	str	r2, [r7, #48]	; 0x30
 800ea6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea74:	e841 2300 	strex	r3, r2, [r1]
 800ea78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1e5      	bne.n	800ea4c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea82:	2220      	movs	r2, #32
 800ea84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d118      	bne.n	800eac2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	e853 3f00 	ldrex	r3, [r3]
 800ea9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f023 0310 	bic.w	r3, r3, #16
 800eaa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaae:	61fb      	str	r3, [r7, #28]
 800eab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab2:	69b9      	ldr	r1, [r7, #24]
 800eab4:	69fa      	ldr	r2, [r7, #28]
 800eab6:	e841 2300 	strex	r3, r2, [r1]
 800eaba:	617b      	str	r3, [r7, #20]
   return(result);
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1e6      	bne.n	800ea90 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d107      	bne.n	800eada <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eaca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eacc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ead0:	4619      	mov	r1, r3
 800ead2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ead4:	f7f4 fda4 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ead8:	e002      	b.n	800eae0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800eada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eadc:	f7ff f952 	bl	800dd84 <HAL_UART_RxCpltCallback>
}
 800eae0:	bf00      	nop
 800eae2:	3770      	adds	r7, #112	; 0x70
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d109      	bne.n	800eb12 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb04:	085b      	lsrs	r3, r3, #1
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	4619      	mov	r1, r3
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7f4 fd88 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb10:	e002      	b.n	800eb18 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff f940 	bl	800dd98 <HAL_UART_RxHalfCpltCallback>
}
 800eb18:	bf00      	nop
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb48:	2b80      	cmp	r3, #128	; 0x80
 800eb4a:	d109      	bne.n	800eb60 <UART_DMAError+0x40>
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b21      	cmp	r3, #33	; 0x21
 800eb50:	d106      	bne.n	800eb60 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb5a:	6978      	ldr	r0, [r7, #20]
 800eb5c:	f7ff fe8a 	bl	800e874 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb6a:	2b40      	cmp	r3, #64	; 0x40
 800eb6c:	d109      	bne.n	800eb82 <UART_DMAError+0x62>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b22      	cmp	r3, #34	; 0x22
 800eb72:	d106      	bne.n	800eb82 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb7c:	6978      	ldr	r0, [r7, #20]
 800eb7e:	f7ff feba 	bl	800e8f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb88:	f043 0210 	orr.w	r2, r3, #16
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb92:	6978      	ldr	r0, [r7, #20]
 800eb94:	f7ff f90a 	bl	800ddac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb98:	bf00      	nop
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff f8f4 	bl	800ddac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc4:	bf00      	nop
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	e853 3f00 	ldrex	r3, [r3]
 800ebe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebe8:	61fb      	str	r3, [r7, #28]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	61bb      	str	r3, [r7, #24]
 800ebf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf6:	6979      	ldr	r1, [r7, #20]
 800ebf8:	69ba      	ldr	r2, [r7, #24]
 800ebfa:	e841 2300 	strex	r3, r2, [r1]
 800ebfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1e6      	bne.n	800ebd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff f8ab 	bl	800dd70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec1a:	bf00      	nop
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec2a:	bf00      	nop
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b083      	sub	sp, #12
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec3e:	bf00      	nop
 800ec40:	370c      	adds	r7, #12
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec52:	bf00      	nop
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b085      	sub	sp, #20
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d101      	bne.n	800ec74 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec70:	2302      	movs	r3, #2
 800ec72:	e027      	b.n	800ecc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2224      	movs	r2, #36	; 0x24
 800ec80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f022 0201 	bic.w	r2, r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eca2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2220      	movs	r2, #32
 800ecb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d101      	bne.n	800ece8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ece4:	2302      	movs	r3, #2
 800ece6:	e02d      	b.n	800ed44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2224      	movs	r2, #36	; 0x24
 800ecf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f022 0201 	bic.w	r2, r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	430a      	orrs	r2, r1
 800ed22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f8ab 	bl	800ee80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2220      	movs	r2, #32
 800ed36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d101      	bne.n	800ed64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed60:	2302      	movs	r3, #2
 800ed62:	e02d      	b.n	800edc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2224      	movs	r2, #36	; 0x24
 800ed70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f022 0201 	bic.w	r2, r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 f86d 	bl	800ee80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2220      	movs	r2, #32
 800edb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08c      	sub	sp, #48	; 0x30
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	4613      	mov	r3, r2
 800edd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eddc:	2b20      	cmp	r3, #32
 800edde:	d14a      	bne.n	800ee76 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ede6:	88fb      	ldrh	r3, [r7, #6]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e043      	b.n	800ee78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d101      	bne.n	800edfe <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800edfa:	2302      	movs	r3, #2
 800edfc:	e03c      	b.n	800ee78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff fc86 	bl	800e724 <UART_Start_Receive_DMA>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ee1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d124      	bne.n	800ee70 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d11d      	bne.n	800ee6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2210      	movs	r2, #16
 800ee34:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	e853 3f00 	ldrex	r3, [r3]
 800ee42:	617b      	str	r3, [r7, #20]
   return(result);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	f043 0310 	orr.w	r3, r3, #16
 800ee4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee54:	627b      	str	r3, [r7, #36]	; 0x24
 800ee56:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	6a39      	ldr	r1, [r7, #32]
 800ee5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee5c:	e841 2300 	strex	r3, r2, [r1]
 800ee60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1e6      	bne.n	800ee36 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ee68:	e002      	b.n	800ee70 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ee70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee74:	e000      	b.n	800ee78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ee76:	2302      	movs	r3, #2
  }
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3730      	adds	r7, #48	; 0x30
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d108      	bne.n	800eea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eea0:	e031      	b.n	800ef06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eea2:	2308      	movs	r3, #8
 800eea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eea6:	2308      	movs	r3, #8
 800eea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	0e5b      	lsrs	r3, r3, #25
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	f003 0307 	and.w	r3, r3, #7
 800eeb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	0f5b      	lsrs	r3, r3, #29
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	f003 0307 	and.w	r3, r3, #7
 800eec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eeca:	7bbb      	ldrb	r3, [r7, #14]
 800eecc:	7b3a      	ldrb	r2, [r7, #12]
 800eece:	4911      	ldr	r1, [pc, #68]	; (800ef14 <UARTEx_SetNbDataToProcess+0x94>)
 800eed0:	5c8a      	ldrb	r2, [r1, r2]
 800eed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eed6:	7b3a      	ldrb	r2, [r7, #12]
 800eed8:	490f      	ldr	r1, [pc, #60]	; (800ef18 <UARTEx_SetNbDataToProcess+0x98>)
 800eeda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
 800eeea:	7b7a      	ldrb	r2, [r7, #13]
 800eeec:	4909      	ldr	r1, [pc, #36]	; (800ef14 <UARTEx_SetNbDataToProcess+0x94>)
 800eeee:	5c8a      	ldrb	r2, [r1, r2]
 800eef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eef4:	7b7a      	ldrb	r2, [r7, #13]
 800eef6:	4908      	ldr	r1, [pc, #32]	; (800ef18 <UARTEx_SetNbDataToProcess+0x98>)
 800eef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eefa:	fb93 f3f2 	sdiv	r3, r3, r2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef06:	bf00      	nop
 800ef08:	3714      	adds	r7, #20
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	08016a08 	.word	0x08016a08
 800ef18:	08016a10 	.word	0x08016a10

0800ef1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ef2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ef30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr

0800ef4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ef4a:	b480      	push	{r7}
 800ef4c:	b085      	sub	sp, #20
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ef52:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ef56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	43db      	mvns	r3, r3
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	4013      	ands	r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ef80:	b084      	sub	sp, #16
 800ef82:	b480      	push	{r7}
 800ef84:	b083      	sub	sp, #12
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	f107 0014 	add.w	r0, r7, #20
 800ef8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2201      	movs	r2, #1
 800ef96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	b004      	add	sp, #16
 800efc0:	4770      	bx	lr
	...

0800efc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b09d      	sub	sp, #116	; 0x74
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800efe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	78db      	ldrb	r3, [r3, #3]
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d81f      	bhi.n	800f036 <USB_ActivateEndpoint+0x72>
 800eff6:	a201      	add	r2, pc, #4	; (adr r2, 800effc <USB_ActivateEndpoint+0x38>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f00d 	.word	0x0800f00d
 800f000:	0800f029 	.word	0x0800f029
 800f004:	0800f03f 	.word	0x0800f03f
 800f008:	0800f01b 	.word	0x0800f01b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f00c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f014:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f018:	e012      	b.n	800f040 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f01a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f01e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f022:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f026:	e00b      	b.n	800f040 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f028:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f02c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f030:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f034:	e004      	b.n	800f040 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f03c:	e000      	b.n	800f040 <USB_ActivateEndpoint+0x7c>
      break;
 800f03e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	441a      	add	r2, r3
 800f04a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f04e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f05e:	b29b      	uxth	r3, r3
 800f060:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4413      	add	r3, r2
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	b21b      	sxth	r3, r3
 800f072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f07a:	b21a      	sxth	r2, r3
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	b21b      	sxth	r3, r3
 800f082:	4313      	orrs	r3, r2
 800f084:	b21b      	sxth	r3, r3
 800f086:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	441a      	add	r2, r3
 800f094:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f09c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	7b1b      	ldrb	r3, [r3, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f040 8149 	bne.w	800f348 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	785b      	ldrb	r3, [r3, #1]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 8084 	beq.w	800f1c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	61bb      	str	r3, [r7, #24]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	61bb      	str	r3, [r7, #24]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	00da      	lsls	r2, r3, #3
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	4413      	add	r3, r2
 800f0de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	88db      	ldrh	r3, [r3, #6]
 800f0e8:	085b      	lsrs	r3, r3, #1
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	881b      	ldrh	r3, [r3, #0]
 800f100:	827b      	strh	r3, [r7, #18]
 800f102:	8a7b      	ldrh	r3, [r7, #18]
 800f104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d01b      	beq.n	800f144 <USB_ActivateEndpoint+0x180>
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f122:	823b      	strh	r3, [r7, #16]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	441a      	add	r2, r3
 800f12e:	8a3b      	ldrh	r3, [r7, #16]
 800f130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f13c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f140:	b29b      	uxth	r3, r3
 800f142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	78db      	ldrb	r3, [r3, #3]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d020      	beq.n	800f18e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f162:	81bb      	strh	r3, [r7, #12]
 800f164:	89bb      	ldrh	r3, [r7, #12]
 800f166:	f083 0320 	eor.w	r3, r3, #32
 800f16a:	81bb      	strh	r3, [r7, #12]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	441a      	add	r2, r3
 800f176:	89bb      	ldrh	r3, [r7, #12]
 800f178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f17c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f188:	b29b      	uxth	r3, r3
 800f18a:	8013      	strh	r3, [r2, #0]
 800f18c:	e2a6      	b.n	800f6dc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	4413      	add	r3, r2
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a4:	81fb      	strh	r3, [r7, #14]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	441a      	add	r2, r3
 800f1b0:	89fb      	ldrh	r3, [r7, #14]
 800f1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	8013      	strh	r3, [r2, #0]
 800f1c6:	e289      	b.n	800f6dc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	4413      	add	r3, r2
 800f1da:	633b      	str	r3, [r7, #48]	; 0x30
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	00da      	lsls	r2, r3, #3
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	4413      	add	r3, r2
 800f1e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	88db      	ldrh	r3, [r3, #6]
 800f1f0:	085b      	lsrs	r3, r3, #1
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f206:	b29b      	uxth	r3, r3
 800f208:	461a      	mov	r2, r3
 800f20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20c:	4413      	add	r3, r2
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	00da      	lsls	r2, r3, #3
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	4413      	add	r3, r2
 800f21a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f21e:	627b      	str	r3, [r7, #36]	; 0x24
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	2b3e      	cmp	r3, #62	; 0x3e
 800f226:	d918      	bls.n	800f25a <USB_ActivateEndpoint+0x296>
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	095b      	lsrs	r3, r3, #5
 800f22e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	f003 031f 	and.w	r3, r3, #31
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <USB_ActivateEndpoint+0x27e>
 800f23c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f23e:	3b01      	subs	r3, #1
 800f240:	66bb      	str	r3, [r7, #104]	; 0x68
 800f242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f244:	b29b      	uxth	r3, r3
 800f246:	029b      	lsls	r3, r3, #10
 800f248:	b29b      	uxth	r3, r3
 800f24a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f24e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f252:	b29a      	uxth	r2, r3
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	801a      	strh	r2, [r3, #0]
 800f258:	e029      	b.n	800f2ae <USB_ActivateEndpoint+0x2ea>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d112      	bne.n	800f288 <USB_ActivateEndpoint+0x2c4>
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	b29b      	uxth	r3, r3
 800f268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	801a      	strh	r2, [r3, #0]
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	b29b      	uxth	r3, r3
 800f278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f27c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f280:	b29a      	uxth	r2, r3
 800f282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f284:	801a      	strh	r2, [r3, #0]
 800f286:	e012      	b.n	800f2ae <USB_ActivateEndpoint+0x2ea>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	085b      	lsrs	r3, r3, #1
 800f28e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <USB_ActivateEndpoint+0x2de>
 800f29c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f29e:	3301      	adds	r3, #1
 800f2a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f2a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	029b      	lsls	r3, r3, #10
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4413      	add	r3, r2
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	847b      	strh	r3, [r7, #34]	; 0x22
 800f2bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d01b      	beq.n	800f2fe <USB_ActivateEndpoint+0x33a>
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4413      	add	r3, r2
 800f2d0:	881b      	ldrh	r3, [r3, #0]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2dc:	843b      	strh	r3, [r7, #32]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	441a      	add	r2, r3
 800f2e8:	8c3b      	ldrh	r3, [r7, #32]
 800f2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	4413      	add	r3, r2
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f314:	83fb      	strh	r3, [r7, #30]
 800f316:	8bfb      	ldrh	r3, [r7, #30]
 800f318:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f31c:	83fb      	strh	r3, [r7, #30]
 800f31e:	8bfb      	ldrh	r3, [r7, #30]
 800f320:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f324:	83fb      	strh	r3, [r7, #30]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	441a      	add	r2, r3
 800f330:	8bfb      	ldrh	r3, [r7, #30]
 800f332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f342:	b29b      	uxth	r3, r3
 800f344:	8013      	strh	r3, [r2, #0]
 800f346:	e1c9      	b.n	800f6dc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	78db      	ldrb	r3, [r3, #3]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d11e      	bne.n	800f38e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	4413      	add	r3, r2
 800f35a:	881b      	ldrh	r3, [r3, #0]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f366:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	441a      	add	r2, r3
 800f374:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f37c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f380:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f388:	b29b      	uxth	r3, r3
 800f38a:	8013      	strh	r3, [r2, #0]
 800f38c:	e01d      	b.n	800f3ca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f3a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	441a      	add	r2, r3
 800f3b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f3b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3da:	4413      	add	r3, r2
 800f3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	00da      	lsls	r2, r3, #3
 800f3e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	891b      	ldrh	r3, [r3, #8]
 800f3f2:	085b      	lsrs	r3, r3, #1
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	005b      	lsls	r3, r3, #1
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3fc:	801a      	strh	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	657b      	str	r3, [r7, #84]	; 0x54
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f408:	b29b      	uxth	r3, r3
 800f40a:	461a      	mov	r2, r3
 800f40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f40e:	4413      	add	r3, r2
 800f410:	657b      	str	r3, [r7, #84]	; 0x54
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	00da      	lsls	r2, r3, #3
 800f418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f41a:	4413      	add	r3, r2
 800f41c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f420:	653b      	str	r3, [r7, #80]	; 0x50
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	895b      	ldrh	r3, [r3, #10]
 800f426:	085b      	lsrs	r3, r3, #1
 800f428:	b29b      	uxth	r3, r3
 800f42a:	005b      	lsls	r3, r3, #1
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f430:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	785b      	ldrb	r3, [r3, #1]
 800f436:	2b00      	cmp	r3, #0
 800f438:	f040 8093 	bne.w	800f562 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f44c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01b      	beq.n	800f490 <USB_ActivateEndpoint+0x4cc>
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	b29b      	uxth	r3, r3
 800f466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f46e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	441a      	add	r2, r3
 800f47a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f47c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	4413      	add	r3, r2
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f49e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d01b      	beq.n	800f4e0 <USB_ActivateEndpoint+0x51c>
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	4413      	add	r3, r2
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4be:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	441a      	add	r2, r3
 800f4ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	4413      	add	r3, r2
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4f6:	873b      	strh	r3, [r7, #56]	; 0x38
 800f4f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f4fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f4fe:	873b      	strh	r3, [r7, #56]	; 0x38
 800f500:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f502:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f506:	873b      	strh	r3, [r7, #56]	; 0x38
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	441a      	add	r2, r3
 800f512:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f51c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f524:	b29b      	uxth	r3, r3
 800f526:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	881b      	ldrh	r3, [r3, #0]
 800f534:	b29b      	uxth	r3, r3
 800f536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f53e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	441a      	add	r2, r3
 800f54a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f54c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	8013      	strh	r3, [r2, #0]
 800f560:	e0bc      	b.n	800f6dc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	4413      	add	r3, r2
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d01d      	beq.n	800f5ba <USB_ActivateEndpoint+0x5f6>
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4413      	add	r3, r2
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f594:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	441a      	add	r2, r3
 800f5a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4413      	add	r3, r2
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f5ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d01d      	beq.n	800f612 <USB_ActivateEndpoint+0x64e>
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	441a      	add	r2, r3
 800f5fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f5fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f60a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f60e:	b29b      	uxth	r3, r3
 800f610:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	78db      	ldrb	r3, [r3, #3]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d024      	beq.n	800f664 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	b29b      	uxth	r3, r3
 800f628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f62c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f630:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f638:	f083 0320 	eor.w	r3, r3, #32
 800f63c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	441a      	add	r2, r3
 800f64a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f64e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f65e:	b29b      	uxth	r3, r3
 800f660:	8013      	strh	r3, [r2, #0]
 800f662:	e01d      	b.n	800f6a0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	b29b      	uxth	r3, r3
 800f672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f67a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	441a      	add	r2, r3
 800f688:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f68c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	4413      	add	r3, r2
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	441a      	add	r2, r3
 800f6c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f6dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3774      	adds	r7, #116	; 0x74
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b08d      	sub	sp, #52	; 0x34
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	7b1b      	ldrb	r3, [r3, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f040 808e 	bne.w	800f81c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d044      	beq.n	800f792 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	4413      	add	r3, r2
 800f712:	881b      	ldrh	r3, [r3, #0]
 800f714:	81bb      	strh	r3, [r7, #12]
 800f716:	89bb      	ldrh	r3, [r7, #12]
 800f718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d01b      	beq.n	800f758 <USB_DeactivateEndpoint+0x6c>
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	881b      	ldrh	r3, [r3, #0]
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f736:	817b      	strh	r3, [r7, #10]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	441a      	add	r2, r3
 800f742:	897b      	ldrh	r3, [r7, #10]
 800f744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f74c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f754:	b29b      	uxth	r3, r3
 800f756:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	b29b      	uxth	r3, r3
 800f766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f76a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f76e:	813b      	strh	r3, [r7, #8]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	441a      	add	r2, r3
 800f77a:	893b      	ldrh	r3, [r7, #8]
 800f77c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	8013      	strh	r3, [r2, #0]
 800f790:	e192      	b.n	800fab8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	4413      	add	r3, r2
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	827b      	strh	r3, [r7, #18]
 800f7a0:	8a7b      	ldrh	r3, [r7, #18]
 800f7a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d01b      	beq.n	800f7e2 <USB_DeactivateEndpoint+0xf6>
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7c0:	823b      	strh	r3, [r7, #16]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	441a      	add	r2, r3
 800f7cc:	8a3b      	ldrh	r3, [r7, #16]
 800f7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	4413      	add	r3, r2
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7f8:	81fb      	strh	r3, [r7, #14]
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	441a      	add	r2, r3
 800f804:	89fb      	ldrh	r3, [r7, #14]
 800f806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f80a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f80e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f816:	b29b      	uxth	r3, r3
 800f818:	8013      	strh	r3, [r2, #0]
 800f81a:	e14d      	b.n	800fab8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	785b      	ldrb	r3, [r3, #1]
 800f820:	2b00      	cmp	r3, #0
 800f822:	f040 80a5 	bne.w	800f970 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	843b      	strh	r3, [r7, #32]
 800f834:	8c3b      	ldrh	r3, [r7, #32]
 800f836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d01b      	beq.n	800f876 <USB_DeactivateEndpoint+0x18a>
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f854:	83fb      	strh	r3, [r7, #30]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	441a      	add	r2, r3
 800f860:	8bfb      	ldrh	r3, [r7, #30]
 800f862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f86a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f872:	b29b      	uxth	r3, r3
 800f874:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	4413      	add	r3, r2
 800f880:	881b      	ldrh	r3, [r3, #0]
 800f882:	83bb      	strh	r3, [r7, #28]
 800f884:	8bbb      	ldrh	r3, [r7, #28]
 800f886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d01b      	beq.n	800f8c6 <USB_DeactivateEndpoint+0x1da>
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	4413      	add	r3, r2
 800f898:	881b      	ldrh	r3, [r3, #0]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a4:	837b      	strh	r3, [r7, #26]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	441a      	add	r2, r3
 800f8b0:	8b7b      	ldrh	r3, [r7, #26]
 800f8b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	4413      	add	r3, r2
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8dc:	833b      	strh	r3, [r7, #24]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	441a      	add	r2, r3
 800f8e8:	8b3b      	ldrh	r3, [r7, #24]
 800f8ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	4413      	add	r3, r2
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f914:	82fb      	strh	r3, [r7, #22]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	441a      	add	r2, r3
 800f920:	8afb      	ldrh	r3, [r7, #22]
 800f922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f92a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f932:	b29b      	uxth	r3, r3
 800f934:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	4413      	add	r3, r2
 800f940:	881b      	ldrh	r3, [r3, #0]
 800f942:	b29b      	uxth	r3, r3
 800f944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f94c:	82bb      	strh	r3, [r7, #20]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	441a      	add	r2, r3
 800f958:	8abb      	ldrh	r3, [r7, #20]
 800f95a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f95e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	8013      	strh	r3, [r2, #0]
 800f96e:	e0a3      	b.n	800fab8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4413      	add	r3, r2
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f97e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f984:	2b00      	cmp	r3, #0
 800f986:	d01b      	beq.n	800f9c0 <USB_DeactivateEndpoint+0x2d4>
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29b      	uxth	r3, r3
 800f996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f99e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	441a      	add	r2, r3
 800f9aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	4413      	add	r3, r2
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f9ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d01b      	beq.n	800fa10 <USB_DeactivateEndpoint+0x324>
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4413      	add	r3, r2
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ee:	853b      	strh	r3, [r7, #40]	; 0x28
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	441a      	add	r2, r3
 800f9fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f9fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	4413      	add	r3, r2
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa26:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	441a      	add	r2, r3
 800fa32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	4413      	add	r3, r2
 800fa52:	881b      	ldrh	r3, [r3, #0]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	441a      	add	r2, r3
 800fa6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa96:	847b      	strh	r3, [r7, #34]	; 0x22
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	441a      	add	r2, r3
 800faa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3734      	adds	r7, #52	; 0x34
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr

0800fac6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b0c2      	sub	sp, #264	; 0x108
 800faca:	af00      	add	r7, sp, #0
 800facc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fad4:	6018      	str	r0, [r3, #0]
 800fad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fade:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	785b      	ldrb	r3, [r3, #1]
 800faec:	2b01      	cmp	r3, #1
 800faee:	f040 867b 	bne.w	80107e8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800faf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	699a      	ldr	r2, [r3, #24]
 800fafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d908      	bls.n	800fb20 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800fb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fb1e:	e007      	b.n	800fb30 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800fb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	699b      	ldr	r3, [r3, #24]
 800fb2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fb30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	7b1b      	ldrb	r3, [r3, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d13a      	bne.n	800fbb6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6959      	ldr	r1, [r3, #20]
 800fb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	88da      	ldrh	r2, [r3, #6]
 800fb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fb62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fb66:	6800      	ldr	r0, [r0, #0]
 800fb68:	f001 fc1d 	bl	80113a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	613b      	str	r3, [r7, #16]
 800fb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	461a      	mov	r2, r3
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	613b      	str	r3, [r7, #16]
 800fb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	00da      	lsls	r2, r3, #3
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	4413      	add	r3, r2
 800fba2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fba6:	60fb      	str	r3, [r7, #12]
 800fba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	801a      	strh	r2, [r3, #0]
 800fbb2:	f000 bde3 	b.w	801077c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fbb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	78db      	ldrb	r3, [r3, #3]
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	f040 843a 	bne.w	801043c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fbc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	6a1a      	ldr	r2, [r3, #32]
 800fbd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	691b      	ldr	r3, [r3, #16]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	f240 83b7 	bls.w	8010354 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	4413      	add	r3, r2
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	441a      	add	r2, r3
 800fc2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fc2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6a1a      	ldr	r2, [r3, #32]
 800fc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc52:	1ad2      	subs	r2, r2, r3
 800fc54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 81b3 	beq.w	800ffee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	633b      	str	r3, [r7, #48]	; 0x30
 800fc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	785b      	ldrb	r3, [r3, #1]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d16d      	bne.n	800fd80 <USB_EPStartXfer+0x2ba>
 800fca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	4413      	add	r3, r2
 800fcc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	00da      	lsls	r2, r3, #3
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	4413      	add	r3, r2
 800fcda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fcde:	627b      	str	r3, [r7, #36]	; 0x24
 800fce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fce4:	2b3e      	cmp	r3, #62	; 0x3e
 800fce6:	d91c      	bls.n	800fd22 <USB_EPStartXfer+0x25c>
 800fce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcec:	095b      	lsrs	r3, r3, #5
 800fcee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcf6:	f003 031f 	and.w	r3, r3, #31
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d104      	bne.n	800fd08 <USB_EPStartXfer+0x242>
 800fcfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fd02:	3b01      	subs	r3, #1
 800fd04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fd08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	029b      	lsls	r3, r3, #10
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	801a      	strh	r2, [r3, #0]
 800fd20:	e053      	b.n	800fdca <USB_EPStartXfer+0x304>
 800fd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d112      	bne.n	800fd50 <USB_EPStartXfer+0x28a>
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	801a      	strh	r2, [r3, #0]
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	881b      	ldrh	r3, [r3, #0]
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	801a      	strh	r2, [r3, #0]
 800fd4e:	e03c      	b.n	800fdca <USB_EPStartXfer+0x304>
 800fd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd54:	085b      	lsrs	r3, r3, #1
 800fd56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd5e:	f003 0301 	and.w	r3, r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d004      	beq.n	800fd70 <USB_EPStartXfer+0x2aa>
 800fd66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fd70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	029b      	lsls	r3, r3, #10
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	801a      	strh	r2, [r3, #0]
 800fd7e:	e024      	b.n	800fdca <USB_EPStartXfer+0x304>
 800fd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	785b      	ldrb	r3, [r3, #1]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d11c      	bne.n	800fdca <USB_EPStartXfer+0x304>
 800fd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	461a      	mov	r2, r3
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	4413      	add	r3, r2
 800fda6:	633b      	str	r3, [r7, #48]	; 0x30
 800fda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	00da      	lsls	r2, r3, #3
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	4413      	add	r3, r2
 800fdba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	895b      	ldrh	r3, [r3, #10]
 800fdd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6959      	ldr	r1, [r3, #20]
 800fde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fdf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fdf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fdf8:	6800      	ldr	r0, [r0, #0]
 800fdfa:	f001 fad4 	bl	80113a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800fdfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	695a      	ldr	r2, [r3, #20]
 800fe0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe0e:	441a      	add	r2, r3
 800fe10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fe1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	6a1a      	ldr	r2, [r3, #32]
 800fe28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d90f      	bls.n	800fe58 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800fe38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6a1a      	ldr	r2, [r3, #32]
 800fe44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe48:	1ad2      	subs	r2, r2, r3
 800fe4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	621a      	str	r2, [r3, #32]
 800fe56:	e00e      	b.n	800fe76 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800fe58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fe68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2200      	movs	r2, #0
 800fe74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fe76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	785b      	ldrb	r3, [r3, #1]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d16d      	bne.n	800ff62 <USB_EPStartXfer+0x49c>
 800fe86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	61bb      	str	r3, [r7, #24]
 800fe92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	461a      	mov	r2, r3
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	4413      	add	r3, r2
 800fea8:	61bb      	str	r3, [r7, #24]
 800feaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	00da      	lsls	r2, r3, #3
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	4413      	add	r3, r2
 800febc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fec0:	617b      	str	r3, [r7, #20]
 800fec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fec6:	2b3e      	cmp	r3, #62	; 0x3e
 800fec8:	d91c      	bls.n	800ff04 <USB_EPStartXfer+0x43e>
 800feca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fece:	095b      	lsrs	r3, r3, #5
 800fed0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fed8:	f003 031f 	and.w	r3, r3, #31
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <USB_EPStartXfer+0x424>
 800fee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fee4:	3b01      	subs	r3, #1
 800fee6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800feea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800feee:	b29b      	uxth	r3, r3
 800fef0:	029b      	lsls	r3, r3, #10
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	801a      	strh	r2, [r3, #0]
 800ff02:	e059      	b.n	800ffb8 <USB_EPStartXfer+0x4f2>
 800ff04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d112      	bne.n	800ff32 <USB_EPStartXfer+0x46c>
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	801a      	strh	r2, [r3, #0]
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	801a      	strh	r2, [r3, #0]
 800ff30:	e042      	b.n	800ffb8 <USB_EPStartXfer+0x4f2>
 800ff32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff36:	085b      	lsrs	r3, r3, #1
 800ff38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ff3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d004      	beq.n	800ff52 <USB_EPStartXfer+0x48c>
 800ff48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ff52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	029b      	lsls	r3, r3, #10
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	e02a      	b.n	800ffb8 <USB_EPStartXfer+0x4f2>
 800ff62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	785b      	ldrb	r3, [r3, #1]
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d122      	bne.n	800ffb8 <USB_EPStartXfer+0x4f2>
 800ff72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	623b      	str	r3, [r7, #32]
 800ff7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	461a      	mov	r2, r3
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	4413      	add	r3, r2
 800ff94:	623b      	str	r3, [r7, #32]
 800ff96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	00da      	lsls	r2, r3, #3
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ffac:	61fb      	str	r3, [r7, #28]
 800ffae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ffb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	891b      	ldrh	r3, [r3, #8]
 800ffc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ffc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	6959      	ldr	r1, [r3, #20]
 800ffd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ffde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ffe2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	f001 f9dd 	bl	80113a6 <USB_WritePMA>
 800ffec:	e3c6      	b.n	801077c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ffee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	785b      	ldrb	r3, [r3, #1]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d16d      	bne.n	80100da <USB_EPStartXfer+0x614>
 800fffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	64bb      	str	r3, [r7, #72]	; 0x48
 801000a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801000e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010018:	b29b      	uxth	r3, r3
 801001a:	461a      	mov	r2, r3
 801001c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801001e:	4413      	add	r3, r2
 8010020:	64bb      	str	r3, [r7, #72]	; 0x48
 8010022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	00da      	lsls	r2, r3, #3
 8010030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010032:	4413      	add	r3, r2
 8010034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010038:	647b      	str	r3, [r7, #68]	; 0x44
 801003a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801003e:	2b3e      	cmp	r3, #62	; 0x3e
 8010040:	d91c      	bls.n	801007c <USB_EPStartXfer+0x5b6>
 8010042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010046:	095b      	lsrs	r3, r3, #5
 8010048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801004c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010050:	f003 031f 	and.w	r3, r3, #31
 8010054:	2b00      	cmp	r3, #0
 8010056:	d104      	bne.n	8010062 <USB_EPStartXfer+0x59c>
 8010058:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801005c:	3b01      	subs	r3, #1
 801005e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010066:	b29b      	uxth	r3, r3
 8010068:	029b      	lsls	r3, r3, #10
 801006a:	b29b      	uxth	r3, r3
 801006c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010074:	b29a      	uxth	r2, r3
 8010076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010078:	801a      	strh	r2, [r3, #0]
 801007a:	e059      	b.n	8010130 <USB_EPStartXfer+0x66a>
 801007c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010080:	2b00      	cmp	r3, #0
 8010082:	d112      	bne.n	80100aa <USB_EPStartXfer+0x5e4>
 8010084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	b29b      	uxth	r3, r3
 801008a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801008e:	b29a      	uxth	r2, r3
 8010090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010092:	801a      	strh	r2, [r3, #0]
 8010094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	b29b      	uxth	r3, r3
 801009a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801009e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100a6:	801a      	strh	r2, [r3, #0]
 80100a8:	e042      	b.n	8010130 <USB_EPStartXfer+0x66a>
 80100aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100ae:	085b      	lsrs	r3, r3, #1
 80100b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80100b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d004      	beq.n	80100ca <USB_EPStartXfer+0x604>
 80100c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80100c4:	3301      	adds	r3, #1
 80100c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80100ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	029b      	lsls	r3, r3, #10
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d6:	801a      	strh	r2, [r3, #0]
 80100d8:	e02a      	b.n	8010130 <USB_EPStartXfer+0x66a>
 80100da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d122      	bne.n	8010130 <USB_EPStartXfer+0x66a>
 80100ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	653b      	str	r3, [r7, #80]	; 0x50
 80100f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010104:	b29b      	uxth	r3, r3
 8010106:	461a      	mov	r2, r3
 8010108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801010a:	4413      	add	r3, r2
 801010c:	653b      	str	r3, [r7, #80]	; 0x50
 801010e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	00da      	lsls	r2, r3, #3
 801011c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011e:	4413      	add	r3, r2
 8010120:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801012a:	b29a      	uxth	r2, r3
 801012c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801012e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	891b      	ldrh	r3, [r3, #8]
 801013c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6959      	ldr	r1, [r3, #20]
 801014c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010150:	b29b      	uxth	r3, r3
 8010152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010156:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801015a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801015e:	6800      	ldr	r0, [r0, #0]
 8010160:	f001 f921 	bl	80113a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8010164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	695a      	ldr	r2, [r3, #20]
 8010170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010174:	441a      	add	r2, r3
 8010176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801017a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6a1a      	ldr	r2, [r3, #32]
 801018e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	429a      	cmp	r2, r3
 801019c:	d90f      	bls.n	80101be <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801019e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	6a1a      	ldr	r2, [r3, #32]
 80101aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101ae:	1ad2      	subs	r2, r2, r3
 80101b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	621a      	str	r2, [r3, #32]
 80101bc:	e00e      	b.n	80101dc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80101be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80101ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2200      	movs	r2, #0
 80101da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80101dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	643b      	str	r3, [r7, #64]	; 0x40
 80101e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	785b      	ldrb	r3, [r3, #1]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d16d      	bne.n	80102d4 <USB_EPStartXfer+0x80e>
 80101f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	63bb      	str	r3, [r7, #56]	; 0x38
 8010204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010212:	b29b      	uxth	r3, r3
 8010214:	461a      	mov	r2, r3
 8010216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010218:	4413      	add	r3, r2
 801021a:	63bb      	str	r3, [r7, #56]	; 0x38
 801021c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	00da      	lsls	r2, r3, #3
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	4413      	add	r3, r2
 801022e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010232:	637b      	str	r3, [r7, #52]	; 0x34
 8010234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010238:	2b3e      	cmp	r3, #62	; 0x3e
 801023a:	d91c      	bls.n	8010276 <USB_EPStartXfer+0x7b0>
 801023c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010240:	095b      	lsrs	r3, r3, #5
 8010242:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801024a:	f003 031f 	and.w	r3, r3, #31
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <USB_EPStartXfer+0x796>
 8010252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010256:	3b01      	subs	r3, #1
 8010258:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801025c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010260:	b29b      	uxth	r3, r3
 8010262:	029b      	lsls	r3, r3, #10
 8010264:	b29b      	uxth	r3, r3
 8010266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801026a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801026e:	b29a      	uxth	r2, r3
 8010270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010272:	801a      	strh	r2, [r3, #0]
 8010274:	e053      	b.n	801031e <USB_EPStartXfer+0x858>
 8010276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801027a:	2b00      	cmp	r3, #0
 801027c:	d112      	bne.n	80102a4 <USB_EPStartXfer+0x7de>
 801027e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	b29b      	uxth	r3, r3
 8010284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010288:	b29a      	uxth	r2, r3
 801028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028c:	801a      	strh	r2, [r3, #0]
 801028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	b29b      	uxth	r3, r3
 8010294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801029c:	b29a      	uxth	r2, r3
 801029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a0:	801a      	strh	r2, [r3, #0]
 80102a2:	e03c      	b.n	801031e <USB_EPStartXfer+0x858>
 80102a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102a8:	085b      	lsrs	r3, r3, #1
 80102aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80102ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102b2:	f003 0301 	and.w	r3, r3, #1
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d004      	beq.n	80102c4 <USB_EPStartXfer+0x7fe>
 80102ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102be:	3301      	adds	r3, #1
 80102c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80102c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	029b      	lsls	r3, r3, #10
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d0:	801a      	strh	r2, [r3, #0]
 80102d2:	e024      	b.n	801031e <USB_EPStartXfer+0x858>
 80102d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	785b      	ldrb	r3, [r3, #1]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d11c      	bne.n	801031e <USB_EPStartXfer+0x858>
 80102e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	461a      	mov	r2, r3
 80102f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f8:	4413      	add	r3, r2
 80102fa:	643b      	str	r3, [r7, #64]	; 0x40
 80102fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	00da      	lsls	r2, r3, #3
 801030a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030c:	4413      	add	r3, r2
 801030e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010318:	b29a      	uxth	r2, r3
 801031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801031e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	895b      	ldrh	r3, [r3, #10]
 801032a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801032e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6959      	ldr	r1, [r3, #20]
 801033a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801033e:	b29b      	uxth	r3, r3
 8010340:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010344:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010348:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801034c:	6800      	ldr	r0, [r0, #0]
 801034e:	f001 f82a 	bl	80113a6 <USB_WritePMA>
 8010352:	e213      	b.n	801077c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6a1b      	ldr	r3, [r3, #32]
 8010360:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4413      	add	r3, r2
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	b29b      	uxth	r3, r3
 8010382:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801038a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801038e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	441a      	add	r2, r3
 80103a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80103ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103bc:	b29b      	uxth	r3, r3
 80103be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80103c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103da:	b29b      	uxth	r3, r3
 80103dc:	461a      	mov	r2, r3
 80103de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103e0:	4413      	add	r3, r2
 80103e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	00da      	lsls	r2, r3, #3
 80103f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103f4:	4413      	add	r3, r2
 80103f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80103fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80103fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010400:	b29a      	uxth	r2, r3
 8010402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010404:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801040a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	891b      	ldrh	r3, [r3, #8]
 8010412:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801041a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6959      	ldr	r1, [r3, #20]
 8010422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010426:	b29b      	uxth	r3, r3
 8010428:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801042c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010430:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010434:	6800      	ldr	r0, [r0, #0]
 8010436:	f000 ffb6 	bl	80113a6 <USB_WritePMA>
 801043a:	e19f      	b.n	801077c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801043c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	6a1a      	ldr	r2, [r3, #32]
 8010448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801044c:	1ad2      	subs	r2, r2, r3
 801044e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801045a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801045e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	b29b      	uxth	r3, r3
 8010478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 80bc 	beq.w	80105fa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	673b      	str	r3, [r7, #112]	; 0x70
 801048e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	785b      	ldrb	r3, [r3, #1]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d16d      	bne.n	801057a <USB_EPStartXfer+0xab4>
 801049e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80104aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	461a      	mov	r2, r3
 80104bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104be:	4413      	add	r3, r2
 80104c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80104c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	00da      	lsls	r2, r3, #3
 80104d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104d2:	4413      	add	r3, r2
 80104d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104d8:	667b      	str	r3, [r7, #100]	; 0x64
 80104da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104de:	2b3e      	cmp	r3, #62	; 0x3e
 80104e0:	d91c      	bls.n	801051c <USB_EPStartXfer+0xa56>
 80104e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104e6:	095b      	lsrs	r3, r3, #5
 80104e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80104ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104f0:	f003 031f 	and.w	r3, r3, #31
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d104      	bne.n	8010502 <USB_EPStartXfer+0xa3c>
 80104f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80104fc:	3b01      	subs	r3, #1
 80104fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010506:	b29b      	uxth	r3, r3
 8010508:	029b      	lsls	r3, r3, #10
 801050a:	b29b      	uxth	r3, r3
 801050c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010514:	b29a      	uxth	r2, r3
 8010516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010518:	801a      	strh	r2, [r3, #0]
 801051a:	e053      	b.n	80105c4 <USB_EPStartXfer+0xafe>
 801051c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010520:	2b00      	cmp	r3, #0
 8010522:	d112      	bne.n	801054a <USB_EPStartXfer+0xa84>
 8010524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	b29b      	uxth	r3, r3
 801052a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801052e:	b29a      	uxth	r2, r3
 8010530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010532:	801a      	strh	r2, [r3, #0]
 8010534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	b29b      	uxth	r3, r3
 801053a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801053e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010542:	b29a      	uxth	r2, r3
 8010544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010546:	801a      	strh	r2, [r3, #0]
 8010548:	e03c      	b.n	80105c4 <USB_EPStartXfer+0xafe>
 801054a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801054e:	085b      	lsrs	r3, r3, #1
 8010550:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010558:	f003 0301 	and.w	r3, r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	d004      	beq.n	801056a <USB_EPStartXfer+0xaa4>
 8010560:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010564:	3301      	adds	r3, #1
 8010566:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801056a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801056e:	b29b      	uxth	r3, r3
 8010570:	029b      	lsls	r3, r3, #10
 8010572:	b29a      	uxth	r2, r3
 8010574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010576:	801a      	strh	r2, [r3, #0]
 8010578:	e024      	b.n	80105c4 <USB_EPStartXfer+0xafe>
 801057a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801057e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	785b      	ldrb	r3, [r3, #1]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d11c      	bne.n	80105c4 <USB_EPStartXfer+0xafe>
 801058a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801058e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010598:	b29b      	uxth	r3, r3
 801059a:	461a      	mov	r2, r3
 801059c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801059e:	4413      	add	r3, r2
 80105a0:	673b      	str	r3, [r7, #112]	; 0x70
 80105a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	00da      	lsls	r2, r3, #3
 80105b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105b2:	4413      	add	r3, r2
 80105b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80105b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80105ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105be:	b29a      	uxth	r2, r3
 80105c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80105c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	895b      	ldrh	r3, [r3, #10]
 80105d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	6959      	ldr	r1, [r3, #20]
 80105e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80105ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80105f2:	6800      	ldr	r0, [r0, #0]
 80105f4:	f000 fed7 	bl	80113a6 <USB_WritePMA>
 80105f8:	e0c0      	b.n	801077c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80105fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	785b      	ldrb	r3, [r3, #1]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d16d      	bne.n	80106e6 <USB_EPStartXfer+0xc20>
 801060a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801060e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010624:	b29b      	uxth	r3, r3
 8010626:	461a      	mov	r2, r3
 8010628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801062a:	4413      	add	r3, r2
 801062c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801062e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	00da      	lsls	r2, r3, #3
 801063c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801063e:	4413      	add	r3, r2
 8010640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010644:	67bb      	str	r3, [r7, #120]	; 0x78
 8010646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801064a:	2b3e      	cmp	r3, #62	; 0x3e
 801064c:	d91c      	bls.n	8010688 <USB_EPStartXfer+0xbc2>
 801064e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010652:	095b      	lsrs	r3, r3, #5
 8010654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801065c:	f003 031f 	and.w	r3, r3, #31
 8010660:	2b00      	cmp	r3, #0
 8010662:	d104      	bne.n	801066e <USB_EPStartXfer+0xba8>
 8010664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010668:	3b01      	subs	r3, #1
 801066a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801066e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010672:	b29b      	uxth	r3, r3
 8010674:	029b      	lsls	r3, r3, #10
 8010676:	b29b      	uxth	r3, r3
 8010678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801067c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010680:	b29a      	uxth	r2, r3
 8010682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010684:	801a      	strh	r2, [r3, #0]
 8010686:	e05f      	b.n	8010748 <USB_EPStartXfer+0xc82>
 8010688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801068c:	2b00      	cmp	r3, #0
 801068e:	d112      	bne.n	80106b6 <USB_EPStartXfer+0xbf0>
 8010690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	b29b      	uxth	r3, r3
 8010696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801069a:	b29a      	uxth	r2, r3
 801069c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801069e:	801a      	strh	r2, [r3, #0]
 80106a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106a2:	881b      	ldrh	r3, [r3, #0]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106b2:	801a      	strh	r2, [r3, #0]
 80106b4:	e048      	b.n	8010748 <USB_EPStartXfer+0xc82>
 80106b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ba:	085b      	lsrs	r3, r3, #1
 80106bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80106c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d004      	beq.n	80106d6 <USB_EPStartXfer+0xc10>
 80106cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80106d0:	3301      	adds	r3, #1
 80106d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80106d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80106da:	b29b      	uxth	r3, r3
 80106dc:	029b      	lsls	r3, r3, #10
 80106de:	b29a      	uxth	r2, r3
 80106e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106e2:	801a      	strh	r2, [r3, #0]
 80106e4:	e030      	b.n	8010748 <USB_EPStartXfer+0xc82>
 80106e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	785b      	ldrb	r3, [r3, #1]
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d128      	bne.n	8010748 <USB_EPStartXfer+0xc82>
 80106f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010712:	b29b      	uxth	r3, r3
 8010714:	461a      	mov	r2, r3
 8010716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801071a:	4413      	add	r3, r2
 801071c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	00da      	lsls	r2, r3, #3
 801072e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010732:	4413      	add	r3, r2
 8010734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801073c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010740:	b29a      	uxth	r2, r3
 8010742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010746:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801074c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	891b      	ldrh	r3, [r3, #8]
 8010754:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	6959      	ldr	r1, [r3, #20]
 8010764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010768:	b29b      	uxth	r3, r3
 801076a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801076e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010772:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010776:	6800      	ldr	r0, [r0, #0]
 8010778:	f000 fe15 	bl	80113a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801077c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801078a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4413      	add	r3, r2
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	b29b      	uxth	r3, r3
 801079a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801079e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a2:	817b      	strh	r3, [r7, #10]
 80107a4:	897b      	ldrh	r3, [r7, #10]
 80107a6:	f083 0310 	eor.w	r3, r3, #16
 80107aa:	817b      	strh	r3, [r7, #10]
 80107ac:	897b      	ldrh	r3, [r7, #10]
 80107ae:	f083 0320 	eor.w	r3, r3, #32
 80107b2:	817b      	strh	r3, [r7, #10]
 80107b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	441a      	add	r2, r3
 80107ce:	897b      	ldrh	r3, [r7, #10]
 80107d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	8013      	strh	r3, [r2, #0]
 80107e4:	f000 bc9f 	b.w	8011126 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80107e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	7b1b      	ldrb	r3, [r3, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f040 80ae 	bne.w	8010956 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80107fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	699a      	ldr	r2, [r3, #24]
 8010806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801080a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	691b      	ldr	r3, [r3, #16]
 8010812:	429a      	cmp	r2, r3
 8010814:	d917      	bls.n	8010846 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8010816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801081a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	691b      	ldr	r3, [r3, #16]
 8010822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801082a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	699a      	ldr	r2, [r3, #24]
 8010832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010836:	1ad2      	subs	r2, r2, r3
 8010838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	619a      	str	r2, [r3, #24]
 8010844:	e00e      	b.n	8010864 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8010846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801084a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	699b      	ldr	r3, [r3, #24]
 8010852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2200      	movs	r2, #0
 8010862:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010880:	b29b      	uxth	r3, r3
 8010882:	461a      	mov	r2, r3
 8010884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010888:	4413      	add	r3, r2
 801088a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801088e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	00da      	lsls	r2, r3, #3
 801089c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a0:	4413      	add	r3, r2
 80108a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80108a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80108aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ae:	2b3e      	cmp	r3, #62	; 0x3e
 80108b0:	d91d      	bls.n	80108ee <USB_EPStartXfer+0xe28>
 80108b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108b6:	095b      	lsrs	r3, r3, #5
 80108b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80108bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108c0:	f003 031f 	and.w	r3, r3, #31
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <USB_EPStartXfer+0xe0c>
 80108c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80108cc:	3b01      	subs	r3, #1
 80108ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80108d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	029b      	lsls	r3, r3, #10
 80108da:	b29b      	uxth	r3, r3
 80108dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108ea:	801a      	strh	r2, [r3, #0]
 80108ec:	e3e1      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
 80108ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d116      	bne.n	8010924 <USB_EPStartXfer+0xe5e>
 80108f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010902:	b29a      	uxth	r2, r3
 8010904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	b29b      	uxth	r3, r3
 8010912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801091a:	b29a      	uxth	r2, r3
 801091c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010920:	801a      	strh	r2, [r3, #0]
 8010922:	e3c6      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
 8010924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801092e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010932:	f003 0301 	and.w	r3, r3, #1
 8010936:	2b00      	cmp	r3, #0
 8010938:	d004      	beq.n	8010944 <USB_EPStartXfer+0xe7e>
 801093a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801093e:	3301      	adds	r3, #1
 8010940:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010944:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010948:	b29b      	uxth	r3, r3
 801094a:	029b      	lsls	r3, r3, #10
 801094c:	b29a      	uxth	r2, r3
 801094e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010952:	801a      	strh	r2, [r3, #0]
 8010954:	e3ad      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	78db      	ldrb	r3, [r3, #3]
 8010962:	2b02      	cmp	r3, #2
 8010964:	f040 8200 	bne.w	8010d68 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	785b      	ldrb	r3, [r3, #1]
 8010974:	2b00      	cmp	r3, #0
 8010976:	f040 8091 	bne.w	8010a9c <USB_EPStartXfer+0xfd6>
 801097a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801097e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801098c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010996:	b29b      	uxth	r3, r3
 8010998:	461a      	mov	r2, r3
 801099a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801099e:	4413      	add	r3, r2
 80109a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	00da      	lsls	r2, r3, #3
 80109b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109b6:	4413      	add	r3, r2
 80109b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80109c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	2b3e      	cmp	r3, #62	; 0x3e
 80109ce:	d925      	bls.n	8010a1c <USB_EPStartXfer+0xf56>
 80109d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	095b      	lsrs	r3, r3, #5
 80109de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80109e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	f003 031f 	and.w	r3, r3, #31
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d104      	bne.n	8010a00 <USB_EPStartXfer+0xf3a>
 80109f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109fa:	3b01      	subs	r3, #1
 80109fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	029b      	lsls	r3, r3, #10
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a18:	801a      	strh	r2, [r3, #0]
 8010a1a:	e074      	b.n	8010b06 <USB_EPStartXfer+0x1040>
 8010a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d116      	bne.n	8010a5a <USB_EPStartXfer+0xf94>
 8010a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a3e:	801a      	strh	r2, [r3, #0]
 8010a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a56:	801a      	strh	r2, [r3, #0]
 8010a58:	e055      	b.n	8010b06 <USB_EPStartXfer+0x1040>
 8010a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	085b      	lsrs	r3, r3, #1
 8010a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d004      	beq.n	8010a8a <USB_EPStartXfer+0xfc4>
 8010a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a84:	3301      	adds	r3, #1
 8010a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	029b      	lsls	r3, r3, #10
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a98:	801a      	strh	r2, [r3, #0]
 8010a9a:	e034      	b.n	8010b06 <USB_EPStartXfer+0x1040>
 8010a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	785b      	ldrb	r3, [r3, #1]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d12c      	bne.n	8010b06 <USB_EPStartXfer+0x1040>
 8010aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	461a      	mov	r2, r3
 8010acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ad0:	4413      	add	r3, r2
 8010ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	00da      	lsls	r2, r3, #3
 8010ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ae8:	4413      	add	r3, r2
 8010aea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	691b      	ldr	r3, [r3, #16]
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010b04:	801a      	strh	r2, [r3, #0]
 8010b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	785b      	ldrb	r3, [r3, #1]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f040 8091 	bne.w	8010c48 <USB_EPStartXfer+0x1182>
 8010b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	461a      	mov	r2, r3
 8010b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	00da      	lsls	r2, r3, #3
 8010b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b62:	4413      	add	r3, r2
 8010b64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	691b      	ldr	r3, [r3, #16]
 8010b78:	2b3e      	cmp	r3, #62	; 0x3e
 8010b7a:	d925      	bls.n	8010bc8 <USB_EPStartXfer+0x1102>
 8010b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	691b      	ldr	r3, [r3, #16]
 8010b88:	095b      	lsrs	r3, r3, #5
 8010b8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	691b      	ldr	r3, [r3, #16]
 8010b9a:	f003 031f 	and.w	r3, r3, #31
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d104      	bne.n	8010bac <USB_EPStartXfer+0x10e6>
 8010ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	029b      	lsls	r3, r3, #10
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bc4:	801a      	strh	r2, [r3, #0]
 8010bc6:	e06d      	b.n	8010ca4 <USB_EPStartXfer+0x11de>
 8010bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d116      	bne.n	8010c06 <USB_EPStartXfer+0x1140>
 8010bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bea:	801a      	strh	r2, [r3, #0]
 8010bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bf0:	881b      	ldrh	r3, [r3, #0]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c02:	801a      	strh	r2, [r3, #0]
 8010c04:	e04e      	b.n	8010ca4 <USB_EPStartXfer+0x11de>
 8010c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	085b      	lsrs	r3, r3, #1
 8010c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	f003 0301 	and.w	r3, r3, #1
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d004      	beq.n	8010c36 <USB_EPStartXfer+0x1170>
 8010c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c30:	3301      	adds	r3, #1
 8010c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	029b      	lsls	r3, r3, #10
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c44:	801a      	strh	r2, [r3, #0]
 8010c46:	e02d      	b.n	8010ca4 <USB_EPStartXfer+0x11de>
 8010c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	785b      	ldrb	r3, [r3, #1]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d125      	bne.n	8010ca4 <USB_EPStartXfer+0x11de>
 8010c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	461a      	mov	r2, r3
 8010c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c6e:	4413      	add	r3, r2
 8010c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	00da      	lsls	r2, r3, #3
 8010c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c86:	4413      	add	r3, r2
 8010c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ca2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	69db      	ldr	r3, [r3, #28]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f000 81fe 	beq.w	80110b2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	4413      	add	r3, r2
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010cd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d005      	beq.n	8010cee <USB_EPStartXfer+0x1228>
 8010ce2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d10d      	bne.n	8010d0a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010cee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f040 81db 	bne.w	80110b2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010cfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f040 81d4 	bne.w	80110b2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4413      	add	r3, r2
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d30:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	441a      	add	r2, r3
 8010d4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	8013      	strh	r3, [r2, #0]
 8010d66:	e1a4      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	78db      	ldrb	r3, [r3, #3]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	f040 819a 	bne.w	80110ae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	699a      	ldr	r2, [r3, #24]
 8010d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d917      	bls.n	8010dc6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8010d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	691b      	ldr	r3, [r3, #16]
 8010da2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	699a      	ldr	r2, [r3, #24]
 8010db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010db6:	1ad2      	subs	r2, r2, r3
 8010db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	619a      	str	r2, [r3, #24]
 8010dc4:	e00e      	b.n	8010de4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8010dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2200      	movs	r2, #0
 8010de2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	785b      	ldrb	r3, [r3, #1]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d178      	bne.n	8010ee6 <USB_EPStartXfer+0x1420>
 8010df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	461a      	mov	r2, r3
 8010e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e18:	4413      	add	r3, r2
 8010e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	00da      	lsls	r2, r3, #3
 8010e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e30:	4413      	add	r3, r2
 8010e32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8010e40:	d91d      	bls.n	8010e7e <USB_EPStartXfer+0x13b8>
 8010e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e46:	095b      	lsrs	r3, r3, #5
 8010e48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e50:	f003 031f 	and.w	r3, r3, #31
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d104      	bne.n	8010e62 <USB_EPStartXfer+0x139c>
 8010e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	029b      	lsls	r3, r3, #10
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e7a:	801a      	strh	r2, [r3, #0]
 8010e7c:	e064      	b.n	8010f48 <USB_EPStartXfer+0x1482>
 8010e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d116      	bne.n	8010eb4 <USB_EPStartXfer+0x13ee>
 8010e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e98:	801a      	strh	r2, [r3, #0]
 8010e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010eb0:	801a      	strh	r2, [r3, #0]
 8010eb2:	e049      	b.n	8010f48 <USB_EPStartXfer+0x1482>
 8010eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eb8:	085b      	lsrs	r3, r3, #1
 8010eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec2:	f003 0301 	and.w	r3, r3, #1
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d004      	beq.n	8010ed4 <USB_EPStartXfer+0x140e>
 8010eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ece:	3301      	adds	r3, #1
 8010ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	029b      	lsls	r3, r3, #10
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ee2:	801a      	strh	r2, [r3, #0]
 8010ee4:	e030      	b.n	8010f48 <USB_EPStartXfer+0x1482>
 8010ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	785b      	ldrb	r3, [r3, #1]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d128      	bne.n	8010f48 <USB_EPStartXfer+0x1482>
 8010ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	461a      	mov	r2, r3
 8010f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f1a:	4413      	add	r3, r2
 8010f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	00da      	lsls	r2, r3, #3
 8010f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f32:	4413      	add	r3, r2
 8010f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f46:	801a      	strh	r2, [r3, #0]
 8010f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	785b      	ldrb	r3, [r3, #1]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d178      	bne.n	8011058 <USB_EPStartXfer+0x1592>
 8010f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	461a      	mov	r2, r3
 8010f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f8a:	4413      	add	r3, r2
 8010f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	00da      	lsls	r2, r3, #3
 8010f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8010fb2:	d91d      	bls.n	8010ff0 <USB_EPStartXfer+0x152a>
 8010fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fb8:	095b      	lsrs	r3, r3, #5
 8010fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fc2:	f003 031f 	and.w	r3, r3, #31
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d104      	bne.n	8010fd4 <USB_EPStartXfer+0x150e>
 8010fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	029b      	lsls	r3, r3, #10
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fec:	801a      	strh	r2, [r3, #0]
 8010fee:	e060      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
 8010ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d116      	bne.n	8011026 <USB_EPStartXfer+0x1560>
 8010ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011004:	b29a      	uxth	r2, r3
 8011006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801100a:	801a      	strh	r2, [r3, #0]
 801100c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011010:	881b      	ldrh	r3, [r3, #0]
 8011012:	b29b      	uxth	r3, r3
 8011014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801101c:	b29a      	uxth	r2, r3
 801101e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011022:	801a      	strh	r2, [r3, #0]
 8011024:	e045      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
 8011026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801102a:	085b      	lsrs	r3, r3, #1
 801102c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d004      	beq.n	8011046 <USB_EPStartXfer+0x1580>
 801103c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011040:	3301      	adds	r3, #1
 8011042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801104a:	b29b      	uxth	r3, r3
 801104c:	029b      	lsls	r3, r3, #10
 801104e:	b29a      	uxth	r2, r3
 8011050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011054:	801a      	strh	r2, [r3, #0]
 8011056:	e02c      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
 8011058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801105c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	785b      	ldrb	r3, [r3, #1]
 8011064:	2b01      	cmp	r3, #1
 8011066:	d124      	bne.n	80110b2 <USB_EPStartXfer+0x15ec>
 8011068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801106c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011076:	b29b      	uxth	r3, r3
 8011078:	461a      	mov	r2, r3
 801107a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801107e:	4413      	add	r3, r2
 8011080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	00da      	lsls	r2, r3, #3
 8011092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011096:	4413      	add	r3, r2
 8011098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801109c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80110a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110aa:	801a      	strh	r2, [r3, #0]
 80110ac:	e001      	b.n	80110b2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	e03a      	b.n	8011128 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80110b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	881b      	ldrh	r3, [r3, #0]
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80110dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80110e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80110e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80110f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80110f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	441a      	add	r2, r3
 801110e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801111a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801111e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011122:	b29b      	uxth	r3, r3
 8011124:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011132:	b480      	push	{r7}
 8011134:	b085      	sub	sp, #20
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	785b      	ldrb	r3, [r3, #1]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d020      	beq.n	8011186 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	4413      	add	r3, r2
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	b29b      	uxth	r3, r3
 8011152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801115a:	81bb      	strh	r3, [r7, #12]
 801115c:	89bb      	ldrh	r3, [r7, #12]
 801115e:	f083 0310 	eor.w	r3, r3, #16
 8011162:	81bb      	strh	r3, [r7, #12]
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	441a      	add	r2, r3
 801116e:	89bb      	ldrh	r3, [r7, #12]
 8011170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011180:	b29b      	uxth	r3, r3
 8011182:	8013      	strh	r3, [r2, #0]
 8011184:	e01f      	b.n	80111c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	4413      	add	r3, r2
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	b29b      	uxth	r3, r3
 8011194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801119c:	81fb      	strh	r3, [r7, #14]
 801119e:	89fb      	ldrh	r3, [r7, #14]
 80111a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80111a4:	81fb      	strh	r3, [r7, #14]
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	441a      	add	r2, r3
 80111b0:	89fb      	ldrh	r3, [r7, #14]
 80111b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	7b1b      	ldrb	r3, [r3, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f040 809d 	bne.w	8011322 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d04c      	beq.n	801128a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	823b      	strh	r3, [r7, #16]
 80111fe:	8a3b      	ldrh	r3, [r7, #16]
 8011200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011204:	2b00      	cmp	r3, #0
 8011206:	d01b      	beq.n	8011240 <USB_EPClearStall+0x6c>
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	4413      	add	r3, r2
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	b29b      	uxth	r3, r3
 8011216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801121a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801121e:	81fb      	strh	r3, [r7, #14]
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	441a      	add	r2, r3
 801122a:	89fb      	ldrh	r3, [r7, #14]
 801122c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801123c:	b29b      	uxth	r3, r3
 801123e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	78db      	ldrb	r3, [r3, #3]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d06c      	beq.n	8011322 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	881b      	ldrh	r3, [r3, #0]
 8011254:	b29b      	uxth	r3, r3
 8011256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801125a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801125e:	81bb      	strh	r3, [r7, #12]
 8011260:	89bb      	ldrh	r3, [r7, #12]
 8011262:	f083 0320 	eor.w	r3, r3, #32
 8011266:	81bb      	strh	r3, [r7, #12]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	441a      	add	r2, r3
 8011272:	89bb      	ldrh	r3, [r7, #12]
 8011274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801127c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011284:	b29b      	uxth	r3, r3
 8011286:	8013      	strh	r3, [r2, #0]
 8011288:	e04b      	b.n	8011322 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4413      	add	r3, r2
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	82fb      	strh	r3, [r7, #22]
 8011298:	8afb      	ldrh	r3, [r7, #22]
 801129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d01b      	beq.n	80112da <USB_EPClearStall+0x106>
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	009b      	lsls	r3, r3, #2
 80112aa:	4413      	add	r3, r2
 80112ac:	881b      	ldrh	r3, [r3, #0]
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112b8:	82bb      	strh	r3, [r7, #20]
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	441a      	add	r2, r3
 80112c4:	8abb      	ldrh	r3, [r7, #20]
 80112c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80112d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	4413      	add	r3, r2
 80112e4:	881b      	ldrh	r3, [r3, #0]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80112ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112f0:	827b      	strh	r3, [r7, #18]
 80112f2:	8a7b      	ldrh	r3, [r7, #18]
 80112f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80112f8:	827b      	strh	r3, [r7, #18]
 80112fa:	8a7b      	ldrh	r3, [r7, #18]
 80112fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011300:	827b      	strh	r3, [r7, #18]
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	441a      	add	r2, r3
 801130c:	8a7b      	ldrh	r3, [r7, #18]
 801130e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801131e:	b29b      	uxth	r3, r3
 8011320:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	371c      	adds	r7, #28
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr

08011330 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	460b      	mov	r3, r1
 801133a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d103      	bne.n	801134a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2280      	movs	r2, #128	; 0x80
 8011346:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011366:	b29b      	uxth	r3, r3
 8011368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801136c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011370:	b29a      	uxth	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011378:	2300      	movs	r3, #0
}
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8011386:	b480      	push	{r7}
 8011388:	b085      	sub	sp, #20
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011394:	b29b      	uxth	r3, r3
 8011396:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011398:	68fb      	ldr	r3, [r7, #12]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80113a6:	b480      	push	{r7}
 80113a8:	b08d      	sub	sp, #52	; 0x34
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	60b9      	str	r1, [r7, #8]
 80113b0:	4611      	mov	r1, r2
 80113b2:	461a      	mov	r2, r3
 80113b4:	460b      	mov	r3, r1
 80113b6:	80fb      	strh	r3, [r7, #6]
 80113b8:	4613      	mov	r3, r2
 80113ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80113bc:	88bb      	ldrh	r3, [r7, #4]
 80113be:	3301      	adds	r3, #1
 80113c0:	085b      	lsrs	r3, r3, #1
 80113c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80113cc:	88fa      	ldrh	r2, [r7, #6]
 80113ce:	69fb      	ldr	r3, [r7, #28]
 80113d0:	4413      	add	r3, r2
 80113d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113dc:	e01b      	b.n	8011416 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80113e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e6:	3301      	adds	r3, #1
 80113e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80113ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	021b      	lsls	r3, r3, #8
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	461a      	mov	r2, r3
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	4313      	orrs	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	b29a      	uxth	r2, r3
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	3302      	adds	r3, #2
 8011408:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	3301      	adds	r3, #1
 801140e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8011410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011412:	3b01      	subs	r3, #1
 8011414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1e0      	bne.n	80113de <USB_WritePMA+0x38>
  }
}
 801141c:	bf00      	nop
 801141e:	bf00      	nop
 8011420:	3734      	adds	r7, #52	; 0x34
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr

0801142a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801142a:	b480      	push	{r7}
 801142c:	b08b      	sub	sp, #44	; 0x2c
 801142e:	af00      	add	r7, sp, #0
 8011430:	60f8      	str	r0, [r7, #12]
 8011432:	60b9      	str	r1, [r7, #8]
 8011434:	4611      	mov	r1, r2
 8011436:	461a      	mov	r2, r3
 8011438:	460b      	mov	r3, r1
 801143a:	80fb      	strh	r3, [r7, #6]
 801143c:	4613      	mov	r3, r2
 801143e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011440:	88bb      	ldrh	r3, [r7, #4]
 8011442:	085b      	lsrs	r3, r3, #1
 8011444:	b29b      	uxth	r3, r3
 8011446:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011450:	88fa      	ldrh	r2, [r7, #6]
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	4413      	add	r3, r2
 8011456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801145a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	627b      	str	r3, [r7, #36]	; 0x24
 8011460:	e018      	b.n	8011494 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8011462:	6a3b      	ldr	r3, [r7, #32]
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	b29b      	uxth	r3, r3
 8011468:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	3302      	adds	r3, #2
 801146e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	b2da      	uxtb	r2, r3
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	3301      	adds	r3, #1
 801147c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	0a1b      	lsrs	r3, r3, #8
 8011482:	b2da      	uxtb	r2, r3
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	3301      	adds	r3, #1
 801148c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 801148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011490:	3b01      	subs	r3, #1
 8011492:	627b      	str	r3, [r7, #36]	; 0x24
 8011494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1e3      	bne.n	8011462 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801149a:	88bb      	ldrh	r3, [r7, #4]
 801149c:	f003 0301 	and.w	r3, r3, #1
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d007      	beq.n	80114b6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	701a      	strb	r2, [r3, #0]
  }
}
 80114b6:	bf00      	nop
 80114b8:	372c      	adds	r7, #44	; 0x2c
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
 80114ca:	460b      	mov	r3, r1
 80114cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80114ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80114d2:	f002 f931 	bl	8013738 <USBD_static_malloc>
 80114d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d105      	bne.n	80114ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80114e6:	2302      	movs	r3, #2
 80114e8:	e066      	b.n	80115b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	7c1b      	ldrb	r3, [r3, #16]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d119      	bne.n	801152e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80114fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114fe:	2202      	movs	r2, #2
 8011500:	2181      	movs	r1, #129	; 0x81
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f001 ffbd 	bl	8013482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2201      	movs	r2, #1
 801150c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011512:	2202      	movs	r2, #2
 8011514:	2101      	movs	r1, #1
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f001 ffb3 	bl	8013482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2201      	movs	r2, #1
 8011520:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2210      	movs	r2, #16
 8011528:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801152c:	e016      	b.n	801155c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801152e:	2340      	movs	r3, #64	; 0x40
 8011530:	2202      	movs	r2, #2
 8011532:	2181      	movs	r1, #129	; 0x81
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f001 ffa4 	bl	8013482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2201      	movs	r2, #1
 801153e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011540:	2340      	movs	r3, #64	; 0x40
 8011542:	2202      	movs	r2, #2
 8011544:	2101      	movs	r1, #1
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f001 ff9b 	bl	8013482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2201      	movs	r2, #1
 8011550:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2210      	movs	r2, #16
 8011558:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801155c:	2308      	movs	r3, #8
 801155e:	2203      	movs	r2, #3
 8011560:	2182      	movs	r1, #130	; 0x82
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f001 ff8d 	bl	8013482 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2201      	movs	r2, #1
 801156c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2200      	movs	r2, #0
 801157e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	7c1b      	ldrb	r3, [r3, #16]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d109      	bne.n	80115a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011598:	f44f 7300 	mov.w	r3, #512	; 0x200
 801159c:	2101      	movs	r1, #1
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f002 f85f 	bl	8013662 <USBD_LL_PrepareReceive>
 80115a4:	e007      	b.n	80115b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115ac:	2340      	movs	r3, #64	; 0x40
 80115ae:	2101      	movs	r1, #1
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f002 f856 	bl	8013662 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	460b      	mov	r3, r1
 80115ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80115cc:	2181      	movs	r1, #129	; 0x81
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f001 ff7d 	bl	80134ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80115da:	2101      	movs	r1, #1
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f001 ff76 	bl	80134ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80115ea:	2182      	movs	r1, #130	; 0x82
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f001 ff6e 	bl	80134ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00e      	beq.n	801162a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801161c:	4618      	mov	r0, r3
 801161e:	f002 f899 	bl	8013754 <USBD_static_free>
    pdev->pClassData = NULL;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2200      	movs	r2, #0
 8011626:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011646:	2300      	movs	r3, #0
 8011648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801164a:	2300      	movs	r3, #0
 801164c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d101      	bne.n	801165c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011658:	2303      	movs	r3, #3
 801165a:	e0af      	b.n	80117bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011664:	2b00      	cmp	r3, #0
 8011666:	d03f      	beq.n	80116e8 <USBD_CDC_Setup+0xb4>
 8011668:	2b20      	cmp	r3, #32
 801166a:	f040 809f 	bne.w	80117ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	88db      	ldrh	r3, [r3, #6]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d02e      	beq.n	80116d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	b25b      	sxtb	r3, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	da16      	bge.n	80116ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801168c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	88d2      	ldrh	r2, [r2, #6]
 8011692:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	88db      	ldrh	r3, [r3, #6]
 8011698:	2b07      	cmp	r3, #7
 801169a:	bf28      	it	cs
 801169c:	2307      	movcs	r3, #7
 801169e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	89fa      	ldrh	r2, [r7, #14]
 80116a4:	4619      	mov	r1, r3
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f001 facf 	bl	8012c4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80116ac:	e085      	b.n	80117ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	785a      	ldrb	r2, [r3, #1]
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	88db      	ldrh	r3, [r3, #6]
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80116c4:	6939      	ldr	r1, [r7, #16]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	88db      	ldrh	r3, [r3, #6]
 80116ca:	461a      	mov	r2, r3
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f001 fae8 	bl	8012ca2 <USBD_CtlPrepareRx>
      break;
 80116d2:	e072      	b.n	80117ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	7850      	ldrb	r0, [r2, #1]
 80116e0:	2200      	movs	r2, #0
 80116e2:	6839      	ldr	r1, [r7, #0]
 80116e4:	4798      	blx	r3
      break;
 80116e6:	e068      	b.n	80117ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	785b      	ldrb	r3, [r3, #1]
 80116ec:	2b0b      	cmp	r3, #11
 80116ee:	d852      	bhi.n	8011796 <USBD_CDC_Setup+0x162>
 80116f0:	a201      	add	r2, pc, #4	; (adr r2, 80116f8 <USBD_CDC_Setup+0xc4>)
 80116f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f6:	bf00      	nop
 80116f8:	08011729 	.word	0x08011729
 80116fc:	080117a5 	.word	0x080117a5
 8011700:	08011797 	.word	0x08011797
 8011704:	08011797 	.word	0x08011797
 8011708:	08011797 	.word	0x08011797
 801170c:	08011797 	.word	0x08011797
 8011710:	08011797 	.word	0x08011797
 8011714:	08011797 	.word	0x08011797
 8011718:	08011797 	.word	0x08011797
 801171c:	08011797 	.word	0x08011797
 8011720:	08011753 	.word	0x08011753
 8011724:	0801177d 	.word	0x0801177d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801172e:	b2db      	uxtb	r3, r3
 8011730:	2b03      	cmp	r3, #3
 8011732:	d107      	bne.n	8011744 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011734:	f107 030a 	add.w	r3, r7, #10
 8011738:	2202      	movs	r2, #2
 801173a:	4619      	mov	r1, r3
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f001 fa84 	bl	8012c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011742:	e032      	b.n	80117aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011744:	6839      	ldr	r1, [r7, #0]
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f001 fa0e 	bl	8012b68 <USBD_CtlError>
            ret = USBD_FAIL;
 801174c:	2303      	movs	r3, #3
 801174e:	75fb      	strb	r3, [r7, #23]
          break;
 8011750:	e02b      	b.n	80117aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011758:	b2db      	uxtb	r3, r3
 801175a:	2b03      	cmp	r3, #3
 801175c:	d107      	bne.n	801176e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801175e:	f107 030d 	add.w	r3, r7, #13
 8011762:	2201      	movs	r2, #1
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f001 fa6f 	bl	8012c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801176c:	e01d      	b.n	80117aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f001 f9f9 	bl	8012b68 <USBD_CtlError>
            ret = USBD_FAIL;
 8011776:	2303      	movs	r3, #3
 8011778:	75fb      	strb	r3, [r7, #23]
          break;
 801177a:	e016      	b.n	80117aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011782:	b2db      	uxtb	r3, r3
 8011784:	2b03      	cmp	r3, #3
 8011786:	d00f      	beq.n	80117a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011788:	6839      	ldr	r1, [r7, #0]
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f001 f9ec 	bl	8012b68 <USBD_CtlError>
            ret = USBD_FAIL;
 8011790:	2303      	movs	r3, #3
 8011792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011794:	e008      	b.n	80117a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f001 f9e5 	bl	8012b68 <USBD_CtlError>
          ret = USBD_FAIL;
 801179e:	2303      	movs	r3, #3
 80117a0:	75fb      	strb	r3, [r7, #23]
          break;
 80117a2:	e002      	b.n	80117aa <USBD_CDC_Setup+0x176>
          break;
 80117a4:	bf00      	nop
 80117a6:	e008      	b.n	80117ba <USBD_CDC_Setup+0x186>
          break;
 80117a8:	bf00      	nop
      }
      break;
 80117aa:	e006      	b.n	80117ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f001 f9da 	bl	8012b68 <USBD_CtlError>
      ret = USBD_FAIL;
 80117b4:	2303      	movs	r3, #3
 80117b6:	75fb      	strb	r3, [r7, #23]
      break;
 80117b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3718      	adds	r7, #24
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d101      	bne.n	80117e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80117e2:	2303      	movs	r3, #3
 80117e4:	e04f      	b.n	8011886 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117ee:	78fa      	ldrb	r2, [r7, #3]
 80117f0:	6879      	ldr	r1, [r7, #4]
 80117f2:	4613      	mov	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	440b      	add	r3, r1
 80117fc:	3318      	adds	r3, #24
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d029      	beq.n	8011858 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011804:	78fa      	ldrb	r2, [r7, #3]
 8011806:	6879      	ldr	r1, [r7, #4]
 8011808:	4613      	mov	r3, r2
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	4413      	add	r3, r2
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	440b      	add	r3, r1
 8011812:	3318      	adds	r3, #24
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	78f9      	ldrb	r1, [r7, #3]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	460b      	mov	r3, r1
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	440b      	add	r3, r1
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	4403      	add	r3, r0
 8011824:	3338      	adds	r3, #56	; 0x38
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	fbb2 f1f3 	udiv	r1, r2, r3
 801182c:	fb01 f303 	mul.w	r3, r1, r3
 8011830:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011832:	2b00      	cmp	r3, #0
 8011834:	d110      	bne.n	8011858 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011836:	78fa      	ldrb	r2, [r7, #3]
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	4613      	mov	r3, r2
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	440b      	add	r3, r1
 8011844:	3318      	adds	r3, #24
 8011846:	2200      	movs	r2, #0
 8011848:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801184a:	78f9      	ldrb	r1, [r7, #3]
 801184c:	2300      	movs	r3, #0
 801184e:	2200      	movs	r2, #0
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f001 fee5 	bl	8013620 <USBD_LL_Transmit>
 8011856:	e015      	b.n	8011884 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	2200      	movs	r2, #0
 801185c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011866:	691b      	ldr	r3, [r3, #16]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00b      	beq.n	8011884 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011880:	78fa      	ldrb	r2, [r7, #3]
 8011882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011884:	2300      	movs	r3, #0
}
 8011886:	4618      	mov	r0, r3
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80118ac:	2303      	movs	r3, #3
 80118ae:	e015      	b.n	80118dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	4619      	mov	r1, r3
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f001 fef5 	bl	80136a4 <USBD_LL_GetRxDataSize>
 80118ba:	4602      	mov	r2, r0
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80118d6:	4611      	mov	r1, r2
 80118d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80118fa:	2303      	movs	r3, #3
 80118fc:	e01b      	b.n	8011936 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d015      	beq.n	8011934 <USBD_CDC_EP0_RxReady+0x50>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801190e:	2bff      	cmp	r3, #255	; 0xff
 8011910:	d010      	beq.n	8011934 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011918:	689b      	ldr	r3, [r3, #8]
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011920:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011928:	b292      	uxth	r2, r2
 801192a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	22ff      	movs	r2, #255	; 0xff
 8011930:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
	...

08011940 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2243      	movs	r2, #67	; 0x43
 801194c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801194e:	4b03      	ldr	r3, [pc, #12]	; (801195c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011950:	4618      	mov	r0, r3
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	20000094 	.word	0x20000094

08011960 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2243      	movs	r2, #67	; 0x43
 801196c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801196e:	4b03      	ldr	r3, [pc, #12]	; (801197c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011970:	4618      	mov	r0, r3
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr
 801197c:	20000050 	.word	0x20000050

08011980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2243      	movs	r2, #67	; 0x43
 801198c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801198e:	4b03      	ldr	r3, [pc, #12]	; (801199c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011990:	4618      	mov	r0, r3
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	200000d8 	.word	0x200000d8

080119a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	220a      	movs	r2, #10
 80119ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80119ae:	4b03      	ldr	r3, [pc, #12]	; (80119bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	2000000c 	.word	0x2000000c

080119c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80119c0:	b480      	push	{r7}
 80119c2:	b083      	sub	sp, #12
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d101      	bne.n	80119d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80119d0:	2303      	movs	r3, #3
 80119d2:	e004      	b.n	80119de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	683a      	ldr	r2, [r7, #0]
 80119d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	370c      	adds	r7, #12
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr

080119ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80119ea:	b480      	push	{r7}
 80119ec:	b087      	sub	sp, #28
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	60f8      	str	r0, [r7, #12]
 80119f2:	60b9      	str	r1, [r7, #8]
 80119f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011a04:	2303      	movs	r3, #3
 8011a06:	e008      	b.n	8011a1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	371c      	adds	r7, #28
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr

08011a26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011a26:	b480      	push	{r7}
 8011a28:	b085      	sub	sp, #20
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
 8011a2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d101      	bne.n	8011a42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	e004      	b.n	8011a4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	683a      	ldr	r2, [r7, #0]
 8011a46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3714      	adds	r7, #20
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d101      	bne.n	8011a7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e01a      	b.n	8011ab0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d114      	bne.n	8011aae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	2201      	movs	r2, #1
 8011a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011aa2:	2181      	movs	r1, #129	; 0x81
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f001 fdbb 	bl	8013620 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3710      	adds	r7, #16
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d101      	bne.n	8011ad6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e016      	b.n	8011b04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7c1b      	ldrb	r3, [r3, #16]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d109      	bne.n	8011af2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ae8:	2101      	movs	r1, #1
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f001 fdb9 	bl	8013662 <USBD_LL_PrepareReceive>
 8011af0:	e007      	b.n	8011b02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011af8:	2340      	movs	r3, #64	; 0x40
 8011afa:	2101      	movs	r1, #1
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f001 fdb0 	bl	8013662 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	4613      	mov	r3, r2
 8011b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d101      	bne.n	8011b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b20:	2303      	movs	r3, #3
 8011b22:	e01f      	b.n	8011b64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d003      	beq.n	8011b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	79fa      	ldrb	r2, [r7, #7]
 8011b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f001 fc17 	bl	801338c <USBD_LL_Init>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3718      	adds	r7, #24
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b76:	2300      	movs	r3, #0
 8011b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011b80:	2303      	movs	r3, #3
 8011b82:	e016      	b.n	8011bb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	683a      	ldr	r2, [r7, #0]
 8011b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00b      	beq.n	8011bb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	f107 020e 	add.w	r2, r7, #14
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	4798      	blx	r3
 8011ba8:	4602      	mov	r2, r0
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f001 fc42 	bl	801344c <USBD_LL_Start>
 8011bc8:	4603      	mov	r3, r0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011bd2:	b480      	push	{r7}
 8011bd4:	b083      	sub	sp, #12
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011bf4:	2303      	movs	r3, #3
 8011bf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d009      	beq.n	8011c16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	78fa      	ldrb	r2, [r7, #3]
 8011c0c:	4611      	mov	r1, r2
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	4798      	blx	r3
 8011c12:	4603      	mov	r3, r0
 8011c14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	460b      	mov	r3, r1
 8011c2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d007      	beq.n	8011c46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	78fa      	ldrb	r2, [r7, #3]
 8011c40:	4611      	mov	r1, r2
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	4798      	blx	r3
  }

  return USBD_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c60:	6839      	ldr	r1, [r7, #0]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f000 ff46 	bl	8012af4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c76:	461a      	mov	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c84:	f003 031f 	and.w	r3, r3, #31
 8011c88:	2b02      	cmp	r3, #2
 8011c8a:	d01a      	beq.n	8011cc2 <USBD_LL_SetupStage+0x72>
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d822      	bhi.n	8011cd6 <USBD_LL_SetupStage+0x86>
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d002      	beq.n	8011c9a <USBD_LL_SetupStage+0x4a>
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d00a      	beq.n	8011cae <USBD_LL_SetupStage+0x5e>
 8011c98:	e01d      	b.n	8011cd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f9ee 	bl	8012084 <USBD_StdDevReq>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	73fb      	strb	r3, [r7, #15]
      break;
 8011cac:	e020      	b.n	8011cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fa52 	bl	8012160 <USBD_StdItfReq>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8011cc0:	e016      	b.n	8011cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 fa91 	bl	80121f2 <USBD_StdEPReq>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8011cd4:	e00c      	b.n	8011cf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011cdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f001 fc11 	bl	801350c <USBD_LL_StallEP>
 8011cea:	4603      	mov	r3, r0
 8011cec:	73fb      	strb	r3, [r7, #15]
      break;
 8011cee:	bf00      	nop
  }

  return ret;
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b086      	sub	sp, #24
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	460b      	mov	r3, r1
 8011d04:	607a      	str	r2, [r7, #4]
 8011d06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011d08:	7afb      	ldrb	r3, [r7, #11]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d138      	bne.n	8011d80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011d14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d1c:	2b03      	cmp	r3, #3
 8011d1e:	d14a      	bne.n	8011db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	689a      	ldr	r2, [r3, #8]
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d913      	bls.n	8011d54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	689a      	ldr	r2, [r3, #8]
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	1ad2      	subs	r2, r2, r3
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	68da      	ldr	r2, [r3, #12]
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	4293      	cmp	r3, r2
 8011d44:	bf28      	it	cs
 8011d46:	4613      	movcs	r3, r2
 8011d48:	461a      	mov	r2, r3
 8011d4a:	6879      	ldr	r1, [r7, #4]
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	f000 ffc5 	bl	8012cdc <USBD_CtlContinueRx>
 8011d52:	e030      	b.n	8011db6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	2b03      	cmp	r3, #3
 8011d5e:	d10b      	bne.n	8011d78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d66:	691b      	ldr	r3, [r3, #16]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d005      	beq.n	8011d78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f000 ffc0 	bl	8012cfe <USBD_CtlSendStatus>
 8011d7e:	e01a      	b.n	8011db6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b03      	cmp	r3, #3
 8011d8a:	d114      	bne.n	8011db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d92:	699b      	ldr	r3, [r3, #24]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00e      	beq.n	8011db6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d9e:	699b      	ldr	r3, [r3, #24]
 8011da0:	7afa      	ldrb	r2, [r7, #11]
 8011da2:	4611      	mov	r1, r2
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	4798      	blx	r3
 8011da8:	4603      	mov	r3, r0
 8011daa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011dac:	7dfb      	ldrb	r3, [r7, #23]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011db2:	7dfb      	ldrb	r3, [r7, #23]
 8011db4:	e000      	b.n	8011db8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011dce:	7afb      	ldrb	r3, [r7, #11]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d16b      	bne.n	8011eac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3314      	adds	r3, #20
 8011dd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d156      	bne.n	8011e92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	689a      	ldr	r2, [r3, #8]
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d914      	bls.n	8011e1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	689a      	ldr	r2, [r3, #8]
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	1ad2      	subs	r2, r2, r3
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	461a      	mov	r2, r3
 8011e04:	6879      	ldr	r1, [r7, #4]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f000 ff3a 	bl	8012c80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	2200      	movs	r2, #0
 8011e10:	2100      	movs	r1, #0
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f001 fc25 	bl	8013662 <USBD_LL_PrepareReceive>
 8011e18:	e03b      	b.n	8011e92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	68da      	ldr	r2, [r3, #12]
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d11c      	bne.n	8011e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	685a      	ldr	r2, [r3, #4]
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d316      	bcc.n	8011e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d20f      	bcs.n	8011e60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e40:	2200      	movs	r2, #0
 8011e42:	2100      	movs	r1, #0
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 ff1b 	bl	8012c80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e52:	2300      	movs	r3, #0
 8011e54:	2200      	movs	r2, #0
 8011e56:	2100      	movs	r1, #0
 8011e58:	68f8      	ldr	r0, [r7, #12]
 8011e5a:	f001 fc02 	bl	8013662 <USBD_LL_PrepareReceive>
 8011e5e:	e018      	b.n	8011e92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d10b      	bne.n	8011e84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d005      	beq.n	8011e84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e84:	2180      	movs	r1, #128	; 0x80
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f001 fb40 	bl	801350c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f000 ff49 	bl	8012d24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d122      	bne.n	8011ee2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ff fe98 	bl	8011bd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011eaa:	e01a      	b.n	8011ee2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b03      	cmp	r3, #3
 8011eb6:	d114      	bne.n	8011ee2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00e      	beq.n	8011ee2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	7afa      	ldrb	r2, [r7, #11]
 8011ece:	4611      	mov	r1, r2
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	4798      	blx	r3
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
 8011ee0:	e000      	b.n	8011ee4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011ee2:	2300      	movs	r3, #0
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3718      	adds	r7, #24
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d101      	bne.n	8011f20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011f1c:	2303      	movs	r3, #3
 8011f1e:	e02f      	b.n	8011f80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00f      	beq.n	8011f4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d009      	beq.n	8011f4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	6852      	ldr	r2, [r2, #4]
 8011f42:	b2d2      	uxtb	r2, r2
 8011f44:	4611      	mov	r1, r2
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f4a:	2340      	movs	r3, #64	; 0x40
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2100      	movs	r1, #0
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f001 fa96 	bl	8013482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2240      	movs	r2, #64	; 0x40
 8011f62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f66:	2340      	movs	r3, #64	; 0x40
 8011f68:	2200      	movs	r2, #0
 8011f6a:	2180      	movs	r1, #128	; 0x80
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f001 fa88 	bl	8013482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2201      	movs	r2, #1
 8011f76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2240      	movs	r2, #64	; 0x40
 8011f7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	78fa      	ldrb	r2, [r7, #3]
 8011f98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb6:	b2da      	uxtb	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2204      	movs	r2, #4
 8011fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b04      	cmp	r3, #4
 8011fe6:	d106      	bne.n	8011ff6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011fee:	b2da      	uxtb	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011ff6:	2300      	movs	r3, #0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012016:	2303      	movs	r3, #3
 8012018:	e012      	b.n	8012040 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b03      	cmp	r3, #3
 8012024:	d10b      	bne.n	801203e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801202c:	69db      	ldr	r3, [r3, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d005      	beq.n	801203e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012038:	69db      	ldr	r3, [r3, #28]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012048:	b480      	push	{r7}
 801204a:	b087      	sub	sp, #28
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	3301      	adds	r3, #1
 801205e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012066:	8a3b      	ldrh	r3, [r7, #16]
 8012068:	021b      	lsls	r3, r3, #8
 801206a:	b21a      	sxth	r2, r3
 801206c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012070:	4313      	orrs	r3, r2
 8012072:	b21b      	sxth	r3, r3
 8012074:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012076:	89fb      	ldrh	r3, [r7, #14]
}
 8012078:	4618      	mov	r0, r3
 801207a:	371c      	adds	r7, #28
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801208e:	2300      	movs	r3, #0
 8012090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801209a:	2b40      	cmp	r3, #64	; 0x40
 801209c:	d005      	beq.n	80120aa <USBD_StdDevReq+0x26>
 801209e:	2b40      	cmp	r3, #64	; 0x40
 80120a0:	d853      	bhi.n	801214a <USBD_StdDevReq+0xc6>
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00b      	beq.n	80120be <USBD_StdDevReq+0x3a>
 80120a6:	2b20      	cmp	r3, #32
 80120a8:	d14f      	bne.n	801214a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120b0:	689b      	ldr	r3, [r3, #8]
 80120b2:	6839      	ldr	r1, [r7, #0]
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	4798      	blx	r3
 80120b8:	4603      	mov	r3, r0
 80120ba:	73fb      	strb	r3, [r7, #15]
      break;
 80120bc:	e04a      	b.n	8012154 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	785b      	ldrb	r3, [r3, #1]
 80120c2:	2b09      	cmp	r3, #9
 80120c4:	d83b      	bhi.n	801213e <USBD_StdDevReq+0xba>
 80120c6:	a201      	add	r2, pc, #4	; (adr r2, 80120cc <USBD_StdDevReq+0x48>)
 80120c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120cc:	08012121 	.word	0x08012121
 80120d0:	08012135 	.word	0x08012135
 80120d4:	0801213f 	.word	0x0801213f
 80120d8:	0801212b 	.word	0x0801212b
 80120dc:	0801213f 	.word	0x0801213f
 80120e0:	080120ff 	.word	0x080120ff
 80120e4:	080120f5 	.word	0x080120f5
 80120e8:	0801213f 	.word	0x0801213f
 80120ec:	08012117 	.word	0x08012117
 80120f0:	08012109 	.word	0x08012109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 f9de 	bl	80124b8 <USBD_GetDescriptor>
          break;
 80120fc:	e024      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80120fe:	6839      	ldr	r1, [r7, #0]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fb6d 	bl	80127e0 <USBD_SetAddress>
          break;
 8012106:	e01f      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 fbac 	bl	8012868 <USBD_SetConfig>
 8012110:	4603      	mov	r3, r0
 8012112:	73fb      	strb	r3, [r7, #15]
          break;
 8012114:	e018      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012116:	6839      	ldr	r1, [r7, #0]
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 fc4b 	bl	80129b4 <USBD_GetConfig>
          break;
 801211e:	e013      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 fc7c 	bl	8012a20 <USBD_GetStatus>
          break;
 8012128:	e00e      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801212a:	6839      	ldr	r1, [r7, #0]
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 fcab 	bl	8012a88 <USBD_SetFeature>
          break;
 8012132:	e009      	b.n	8012148 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 fcba 	bl	8012ab0 <USBD_ClrFeature>
          break;
 801213c:	e004      	b.n	8012148 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 fd11 	bl	8012b68 <USBD_CtlError>
          break;
 8012146:	bf00      	nop
      }
      break;
 8012148:	e004      	b.n	8012154 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801214a:	6839      	ldr	r1, [r7, #0]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 fd0b 	bl	8012b68 <USBD_CtlError>
      break;
 8012152:	bf00      	nop
  }

  return ret;
 8012154:	7bfb      	ldrb	r3, [r7, #15]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop

08012160 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012176:	2b40      	cmp	r3, #64	; 0x40
 8012178:	d005      	beq.n	8012186 <USBD_StdItfReq+0x26>
 801217a:	2b40      	cmp	r3, #64	; 0x40
 801217c:	d82f      	bhi.n	80121de <USBD_StdItfReq+0x7e>
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <USBD_StdItfReq+0x26>
 8012182:	2b20      	cmp	r3, #32
 8012184:	d12b      	bne.n	80121de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801218c:	b2db      	uxtb	r3, r3
 801218e:	3b01      	subs	r3, #1
 8012190:	2b02      	cmp	r3, #2
 8012192:	d81d      	bhi.n	80121d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	889b      	ldrh	r3, [r3, #4]
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b01      	cmp	r3, #1
 801219c:	d813      	bhi.n	80121c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121a4:	689b      	ldr	r3, [r3, #8]
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4798      	blx	r3
 80121ac:	4603      	mov	r3, r0
 80121ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	88db      	ldrh	r3, [r3, #6]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d110      	bne.n	80121da <USBD_StdItfReq+0x7a>
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d10d      	bne.n	80121da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 fd9d 	bl	8012cfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80121c4:	e009      	b.n	80121da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f000 fccd 	bl	8012b68 <USBD_CtlError>
          break;
 80121ce:	e004      	b.n	80121da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fcc8 	bl	8012b68 <USBD_CtlError>
          break;
 80121d8:	e000      	b.n	80121dc <USBD_StdItfReq+0x7c>
          break;
 80121da:	bf00      	nop
      }
      break;
 80121dc:	e004      	b.n	80121e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fcc1 	bl	8012b68 <USBD_CtlError>
      break;
 80121e6:	bf00      	nop
  }

  return ret;
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b084      	sub	sp, #16
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	889b      	ldrh	r3, [r3, #4]
 8012204:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801220e:	2b40      	cmp	r3, #64	; 0x40
 8012210:	d007      	beq.n	8012222 <USBD_StdEPReq+0x30>
 8012212:	2b40      	cmp	r3, #64	; 0x40
 8012214:	f200 8145 	bhi.w	80124a2 <USBD_StdEPReq+0x2b0>
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00c      	beq.n	8012236 <USBD_StdEPReq+0x44>
 801221c:	2b20      	cmp	r3, #32
 801221e:	f040 8140 	bne.w	80124a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012228:	689b      	ldr	r3, [r3, #8]
 801222a:	6839      	ldr	r1, [r7, #0]
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	4798      	blx	r3
 8012230:	4603      	mov	r3, r0
 8012232:	73fb      	strb	r3, [r7, #15]
      break;
 8012234:	e13a      	b.n	80124ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	785b      	ldrb	r3, [r3, #1]
 801223a:	2b03      	cmp	r3, #3
 801223c:	d007      	beq.n	801224e <USBD_StdEPReq+0x5c>
 801223e:	2b03      	cmp	r3, #3
 8012240:	f300 8129 	bgt.w	8012496 <USBD_StdEPReq+0x2a4>
 8012244:	2b00      	cmp	r3, #0
 8012246:	d07f      	beq.n	8012348 <USBD_StdEPReq+0x156>
 8012248:	2b01      	cmp	r3, #1
 801224a:	d03c      	beq.n	80122c6 <USBD_StdEPReq+0xd4>
 801224c:	e123      	b.n	8012496 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012254:	b2db      	uxtb	r3, r3
 8012256:	2b02      	cmp	r3, #2
 8012258:	d002      	beq.n	8012260 <USBD_StdEPReq+0x6e>
 801225a:	2b03      	cmp	r3, #3
 801225c:	d016      	beq.n	801228c <USBD_StdEPReq+0x9a>
 801225e:	e02c      	b.n	80122ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012260:	7bbb      	ldrb	r3, [r7, #14]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00d      	beq.n	8012282 <USBD_StdEPReq+0x90>
 8012266:	7bbb      	ldrb	r3, [r7, #14]
 8012268:	2b80      	cmp	r3, #128	; 0x80
 801226a:	d00a      	beq.n	8012282 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801226c:	7bbb      	ldrb	r3, [r7, #14]
 801226e:	4619      	mov	r1, r3
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f001 f94b 	bl	801350c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012276:	2180      	movs	r1, #128	; 0x80
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f001 f947 	bl	801350c <USBD_LL_StallEP>
 801227e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012280:	e020      	b.n	80122c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fc6f 	bl	8012b68 <USBD_CtlError>
              break;
 801228a:	e01b      	b.n	80122c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	885b      	ldrh	r3, [r3, #2]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d10e      	bne.n	80122b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012294:	7bbb      	ldrb	r3, [r7, #14]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d00b      	beq.n	80122b2 <USBD_StdEPReq+0xc0>
 801229a:	7bbb      	ldrb	r3, [r7, #14]
 801229c:	2b80      	cmp	r3, #128	; 0x80
 801229e:	d008      	beq.n	80122b2 <USBD_StdEPReq+0xc0>
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	88db      	ldrh	r3, [r3, #6]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d104      	bne.n	80122b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80122a8:	7bbb      	ldrb	r3, [r7, #14]
 80122aa:	4619      	mov	r1, r3
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f001 f92d 	bl	801350c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 fd23 	bl	8012cfe <USBD_CtlSendStatus>

              break;
 80122b8:	e004      	b.n	80122c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80122ba:	6839      	ldr	r1, [r7, #0]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 fc53 	bl	8012b68 <USBD_CtlError>
              break;
 80122c2:	bf00      	nop
          }
          break;
 80122c4:	e0ec      	b.n	80124a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	d002      	beq.n	80122d8 <USBD_StdEPReq+0xe6>
 80122d2:	2b03      	cmp	r3, #3
 80122d4:	d016      	beq.n	8012304 <USBD_StdEPReq+0x112>
 80122d6:	e030      	b.n	801233a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00d      	beq.n	80122fa <USBD_StdEPReq+0x108>
 80122de:	7bbb      	ldrb	r3, [r7, #14]
 80122e0:	2b80      	cmp	r3, #128	; 0x80
 80122e2:	d00a      	beq.n	80122fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80122e4:	7bbb      	ldrb	r3, [r7, #14]
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f001 f90f 	bl	801350c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80122ee:	2180      	movs	r1, #128	; 0x80
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f001 f90b 	bl	801350c <USBD_LL_StallEP>
 80122f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80122f8:	e025      	b.n	8012346 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80122fa:	6839      	ldr	r1, [r7, #0]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 fc33 	bl	8012b68 <USBD_CtlError>
              break;
 8012302:	e020      	b.n	8012346 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	885b      	ldrh	r3, [r3, #2]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d11b      	bne.n	8012344 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801230c:	7bbb      	ldrb	r3, [r7, #14]
 801230e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012316:	7bbb      	ldrb	r3, [r7, #14]
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f001 f915 	bl	801354a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fcec 	bl	8012cfe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	4798      	blx	r3
 8012334:	4603      	mov	r3, r0
 8012336:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012338:	e004      	b.n	8012344 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fc13 	bl	8012b68 <USBD_CtlError>
              break;
 8012342:	e000      	b.n	8012346 <USBD_StdEPReq+0x154>
              break;
 8012344:	bf00      	nop
          }
          break;
 8012346:	e0ab      	b.n	80124a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801234e:	b2db      	uxtb	r3, r3
 8012350:	2b02      	cmp	r3, #2
 8012352:	d002      	beq.n	801235a <USBD_StdEPReq+0x168>
 8012354:	2b03      	cmp	r3, #3
 8012356:	d032      	beq.n	80123be <USBD_StdEPReq+0x1cc>
 8012358:	e097      	b.n	801248a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801235a:	7bbb      	ldrb	r3, [r7, #14]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d007      	beq.n	8012370 <USBD_StdEPReq+0x17e>
 8012360:	7bbb      	ldrb	r3, [r7, #14]
 8012362:	2b80      	cmp	r3, #128	; 0x80
 8012364:	d004      	beq.n	8012370 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 fbfd 	bl	8012b68 <USBD_CtlError>
                break;
 801236e:	e091      	b.n	8012494 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012374:	2b00      	cmp	r3, #0
 8012376:	da0b      	bge.n	8012390 <USBD_StdEPReq+0x19e>
 8012378:	7bbb      	ldrb	r3, [r7, #14]
 801237a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801237e:	4613      	mov	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	4413      	add	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	3310      	adds	r3, #16
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	4413      	add	r3, r2
 801238c:	3304      	adds	r3, #4
 801238e:	e00b      	b.n	80123a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012390:	7bbb      	ldrb	r3, [r7, #14]
 8012392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012396:	4613      	mov	r3, r2
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	4413      	add	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	4413      	add	r3, r2
 80123a6:	3304      	adds	r3, #4
 80123a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	2200      	movs	r2, #0
 80123ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2202      	movs	r2, #2
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fc47 	bl	8012c4a <USBD_CtlSendData>
              break;
 80123bc:	e06a      	b.n	8012494 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80123be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	da11      	bge.n	80123ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80123c6:	7bbb      	ldrb	r3, [r7, #14]
 80123c8:	f003 020f 	and.w	r2, r3, #15
 80123cc:	6879      	ldr	r1, [r7, #4]
 80123ce:	4613      	mov	r3, r2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	4413      	add	r3, r2
 80123d4:	009b      	lsls	r3, r3, #2
 80123d6:	440b      	add	r3, r1
 80123d8:	3324      	adds	r3, #36	; 0x24
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d117      	bne.n	8012410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80123e0:	6839      	ldr	r1, [r7, #0]
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fbc0 	bl	8012b68 <USBD_CtlError>
                  break;
 80123e8:	e054      	b.n	8012494 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	f003 020f 	and.w	r2, r3, #15
 80123f0:	6879      	ldr	r1, [r7, #4]
 80123f2:	4613      	mov	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	440b      	add	r3, r1
 80123fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d104      	bne.n	8012410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fbad 	bl	8012b68 <USBD_CtlError>
                  break;
 801240e:	e041      	b.n	8012494 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012414:	2b00      	cmp	r3, #0
 8012416:	da0b      	bge.n	8012430 <USBD_StdEPReq+0x23e>
 8012418:	7bbb      	ldrb	r3, [r7, #14]
 801241a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801241e:	4613      	mov	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4413      	add	r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	3310      	adds	r3, #16
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	4413      	add	r3, r2
 801242c:	3304      	adds	r3, #4
 801242e:	e00b      	b.n	8012448 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012430:	7bbb      	ldrb	r3, [r7, #14]
 8012432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012436:	4613      	mov	r3, r2
 8012438:	009b      	lsls	r3, r3, #2
 801243a:	4413      	add	r3, r2
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	4413      	add	r3, r2
 8012446:	3304      	adds	r3, #4
 8012448:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801244a:	7bbb      	ldrb	r3, [r7, #14]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <USBD_StdEPReq+0x264>
 8012450:	7bbb      	ldrb	r3, [r7, #14]
 8012452:	2b80      	cmp	r3, #128	; 0x80
 8012454:	d103      	bne.n	801245e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	2200      	movs	r2, #0
 801245a:	601a      	str	r2, [r3, #0]
 801245c:	e00e      	b.n	801247c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801245e:	7bbb      	ldrb	r3, [r7, #14]
 8012460:	4619      	mov	r1, r3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f001 f890 	bl	8013588 <USBD_LL_IsStallEP>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d003      	beq.n	8012476 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2201      	movs	r2, #1
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	e002      	b.n	801247c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2200      	movs	r2, #0
 801247a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2202      	movs	r2, #2
 8012480:	4619      	mov	r1, r3
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 fbe1 	bl	8012c4a <USBD_CtlSendData>
              break;
 8012488:	e004      	b.n	8012494 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fb6b 	bl	8012b68 <USBD_CtlError>
              break;
 8012492:	bf00      	nop
          }
          break;
 8012494:	e004      	b.n	80124a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 fb65 	bl	8012b68 <USBD_CtlError>
          break;
 801249e:	bf00      	nop
      }
      break;
 80124a0:	e004      	b.n	80124ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80124a2:	6839      	ldr	r1, [r7, #0]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fb5f 	bl	8012b68 <USBD_CtlError>
      break;
 80124aa:	bf00      	nop
  }

  return ret;
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3710      	adds	r7, #16
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
	...

080124b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80124c2:	2300      	movs	r3, #0
 80124c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80124c6:	2300      	movs	r3, #0
 80124c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80124ca:	2300      	movs	r3, #0
 80124cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	885b      	ldrh	r3, [r3, #2]
 80124d2:	0a1b      	lsrs	r3, r3, #8
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	3b01      	subs	r3, #1
 80124d8:	2b0e      	cmp	r3, #14
 80124da:	f200 8152 	bhi.w	8012782 <USBD_GetDescriptor+0x2ca>
 80124de:	a201      	add	r2, pc, #4	; (adr r2, 80124e4 <USBD_GetDescriptor+0x2c>)
 80124e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e4:	08012555 	.word	0x08012555
 80124e8:	0801256d 	.word	0x0801256d
 80124ec:	080125ad 	.word	0x080125ad
 80124f0:	08012783 	.word	0x08012783
 80124f4:	08012783 	.word	0x08012783
 80124f8:	08012723 	.word	0x08012723
 80124fc:	0801274f 	.word	0x0801274f
 8012500:	08012783 	.word	0x08012783
 8012504:	08012783 	.word	0x08012783
 8012508:	08012783 	.word	0x08012783
 801250c:	08012783 	.word	0x08012783
 8012510:	08012783 	.word	0x08012783
 8012514:	08012783 	.word	0x08012783
 8012518:	08012783 	.word	0x08012783
 801251c:	08012521 	.word	0x08012521
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00b      	beq.n	8012544 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012532:	69db      	ldr	r3, [r3, #28]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	7c12      	ldrb	r2, [r2, #16]
 8012538:	f107 0108 	add.w	r1, r7, #8
 801253c:	4610      	mov	r0, r2
 801253e:	4798      	blx	r3
 8012540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012542:	e126      	b.n	8012792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f000 fb0e 	bl	8012b68 <USBD_CtlError>
        err++;
 801254c:	7afb      	ldrb	r3, [r7, #11]
 801254e:	3301      	adds	r3, #1
 8012550:	72fb      	strb	r3, [r7, #11]
      break;
 8012552:	e11e      	b.n	8012792 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	7c12      	ldrb	r2, [r2, #16]
 8012560:	f107 0108 	add.w	r1, r7, #8
 8012564:	4610      	mov	r0, r2
 8012566:	4798      	blx	r3
 8012568:	60f8      	str	r0, [r7, #12]
      break;
 801256a:	e112      	b.n	8012792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	7c1b      	ldrb	r3, [r3, #16]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d10d      	bne.n	8012590 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801257c:	f107 0208 	add.w	r2, r7, #8
 8012580:	4610      	mov	r0, r2
 8012582:	4798      	blx	r3
 8012584:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	3301      	adds	r3, #1
 801258a:	2202      	movs	r2, #2
 801258c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801258e:	e100      	b.n	8012792 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012598:	f107 0208 	add.w	r2, r7, #8
 801259c:	4610      	mov	r0, r2
 801259e:	4798      	blx	r3
 80125a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	3301      	adds	r3, #1
 80125a6:	2202      	movs	r2, #2
 80125a8:	701a      	strb	r2, [r3, #0]
      break;
 80125aa:	e0f2      	b.n	8012792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	885b      	ldrh	r3, [r3, #2]
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	2b05      	cmp	r3, #5
 80125b4:	f200 80ac 	bhi.w	8012710 <USBD_GetDescriptor+0x258>
 80125b8:	a201      	add	r2, pc, #4	; (adr r2, 80125c0 <USBD_GetDescriptor+0x108>)
 80125ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125be:	bf00      	nop
 80125c0:	080125d9 	.word	0x080125d9
 80125c4:	0801260d 	.word	0x0801260d
 80125c8:	08012641 	.word	0x08012641
 80125cc:	08012675 	.word	0x08012675
 80125d0:	080126a9 	.word	0x080126a9
 80125d4:	080126dd 	.word	0x080126dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00b      	beq.n	80125fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	7c12      	ldrb	r2, [r2, #16]
 80125f0:	f107 0108 	add.w	r1, r7, #8
 80125f4:	4610      	mov	r0, r2
 80125f6:	4798      	blx	r3
 80125f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125fa:	e091      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 fab2 	bl	8012b68 <USBD_CtlError>
            err++;
 8012604:	7afb      	ldrb	r3, [r7, #11]
 8012606:	3301      	adds	r3, #1
 8012608:	72fb      	strb	r3, [r7, #11]
          break;
 801260a:	e089      	b.n	8012720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012612:	689b      	ldr	r3, [r3, #8]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00b      	beq.n	8012630 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801261e:	689b      	ldr	r3, [r3, #8]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	7c12      	ldrb	r2, [r2, #16]
 8012624:	f107 0108 	add.w	r1, r7, #8
 8012628:	4610      	mov	r0, r2
 801262a:	4798      	blx	r3
 801262c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801262e:	e077      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012630:	6839      	ldr	r1, [r7, #0]
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 fa98 	bl	8012b68 <USBD_CtlError>
            err++;
 8012638:	7afb      	ldrb	r3, [r7, #11]
 801263a:	3301      	adds	r3, #1
 801263c:	72fb      	strb	r3, [r7, #11]
          break;
 801263e:	e06f      	b.n	8012720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00b      	beq.n	8012664 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	7c12      	ldrb	r2, [r2, #16]
 8012658:	f107 0108 	add.w	r1, r7, #8
 801265c:	4610      	mov	r0, r2
 801265e:	4798      	blx	r3
 8012660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012662:	e05d      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012664:	6839      	ldr	r1, [r7, #0]
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 fa7e 	bl	8012b68 <USBD_CtlError>
            err++;
 801266c:	7afb      	ldrb	r3, [r7, #11]
 801266e:	3301      	adds	r3, #1
 8012670:	72fb      	strb	r3, [r7, #11]
          break;
 8012672:	e055      	b.n	8012720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801267a:	691b      	ldr	r3, [r3, #16]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d00b      	beq.n	8012698 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012686:	691b      	ldr	r3, [r3, #16]
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	7c12      	ldrb	r2, [r2, #16]
 801268c:	f107 0108 	add.w	r1, r7, #8
 8012690:	4610      	mov	r0, r2
 8012692:	4798      	blx	r3
 8012694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012696:	e043      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012698:	6839      	ldr	r1, [r7, #0]
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 fa64 	bl	8012b68 <USBD_CtlError>
            err++;
 80126a0:	7afb      	ldrb	r3, [r7, #11]
 80126a2:	3301      	adds	r3, #1
 80126a4:	72fb      	strb	r3, [r7, #11]
          break;
 80126a6:	e03b      	b.n	8012720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ae:	695b      	ldr	r3, [r3, #20]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d00b      	beq.n	80126cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ba:	695b      	ldr	r3, [r3, #20]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	7c12      	ldrb	r2, [r2, #16]
 80126c0:	f107 0108 	add.w	r1, r7, #8
 80126c4:	4610      	mov	r0, r2
 80126c6:	4798      	blx	r3
 80126c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126ca:	e029      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80126cc:	6839      	ldr	r1, [r7, #0]
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 fa4a 	bl	8012b68 <USBD_CtlError>
            err++;
 80126d4:	7afb      	ldrb	r3, [r7, #11]
 80126d6:	3301      	adds	r3, #1
 80126d8:	72fb      	strb	r3, [r7, #11]
          break;
 80126da:	e021      	b.n	8012720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126e2:	699b      	ldr	r3, [r3, #24]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d00b      	beq.n	8012700 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	7c12      	ldrb	r2, [r2, #16]
 80126f4:	f107 0108 	add.w	r1, r7, #8
 80126f8:	4610      	mov	r0, r2
 80126fa:	4798      	blx	r3
 80126fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126fe:	e00f      	b.n	8012720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012700:	6839      	ldr	r1, [r7, #0]
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f000 fa30 	bl	8012b68 <USBD_CtlError>
            err++;
 8012708:	7afb      	ldrb	r3, [r7, #11]
 801270a:	3301      	adds	r3, #1
 801270c:	72fb      	strb	r3, [r7, #11]
          break;
 801270e:	e007      	b.n	8012720 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012710:	6839      	ldr	r1, [r7, #0]
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fa28 	bl	8012b68 <USBD_CtlError>
          err++;
 8012718:	7afb      	ldrb	r3, [r7, #11]
 801271a:	3301      	adds	r3, #1
 801271c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801271e:	bf00      	nop
      }
      break;
 8012720:	e037      	b.n	8012792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	7c1b      	ldrb	r3, [r3, #16]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d109      	bne.n	801273e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012732:	f107 0208 	add.w	r2, r7, #8
 8012736:	4610      	mov	r0, r2
 8012738:	4798      	blx	r3
 801273a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801273c:	e029      	b.n	8012792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801273e:	6839      	ldr	r1, [r7, #0]
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fa11 	bl	8012b68 <USBD_CtlError>
        err++;
 8012746:	7afb      	ldrb	r3, [r7, #11]
 8012748:	3301      	adds	r3, #1
 801274a:	72fb      	strb	r3, [r7, #11]
      break;
 801274c:	e021      	b.n	8012792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	7c1b      	ldrb	r3, [r3, #16]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d10d      	bne.n	8012772 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801275e:	f107 0208 	add.w	r2, r7, #8
 8012762:	4610      	mov	r0, r2
 8012764:	4798      	blx	r3
 8012766:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	3301      	adds	r3, #1
 801276c:	2207      	movs	r2, #7
 801276e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012770:	e00f      	b.n	8012792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012772:	6839      	ldr	r1, [r7, #0]
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 f9f7 	bl	8012b68 <USBD_CtlError>
        err++;
 801277a:	7afb      	ldrb	r3, [r7, #11]
 801277c:	3301      	adds	r3, #1
 801277e:	72fb      	strb	r3, [r7, #11]
      break;
 8012780:	e007      	b.n	8012792 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012782:	6839      	ldr	r1, [r7, #0]
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 f9ef 	bl	8012b68 <USBD_CtlError>
      err++;
 801278a:	7afb      	ldrb	r3, [r7, #11]
 801278c:	3301      	adds	r3, #1
 801278e:	72fb      	strb	r3, [r7, #11]
      break;
 8012790:	bf00      	nop
  }

  if (err != 0U)
 8012792:	7afb      	ldrb	r3, [r7, #11]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d11e      	bne.n	80127d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	88db      	ldrh	r3, [r3, #6]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d016      	beq.n	80127ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80127a0:	893b      	ldrh	r3, [r7, #8]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d00e      	beq.n	80127c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	88da      	ldrh	r2, [r3, #6]
 80127aa:	893b      	ldrh	r3, [r7, #8]
 80127ac:	4293      	cmp	r3, r2
 80127ae:	bf28      	it	cs
 80127b0:	4613      	movcs	r3, r2
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80127b6:	893b      	ldrh	r3, [r7, #8]
 80127b8:	461a      	mov	r2, r3
 80127ba:	68f9      	ldr	r1, [r7, #12]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 fa44 	bl	8012c4a <USBD_CtlSendData>
 80127c2:	e009      	b.n	80127d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80127c4:	6839      	ldr	r1, [r7, #0]
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 f9ce 	bl	8012b68 <USBD_CtlError>
 80127cc:	e004      	b.n	80127d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 fa95 	bl	8012cfe <USBD_CtlSendStatus>
 80127d4:	e000      	b.n	80127d8 <USBD_GetDescriptor+0x320>
    return;
 80127d6:	bf00      	nop
  }
}
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop

080127e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	889b      	ldrh	r3, [r3, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d131      	bne.n	8012856 <USBD_SetAddress+0x76>
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	88db      	ldrh	r3, [r3, #6]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d12d      	bne.n	8012856 <USBD_SetAddress+0x76>
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	885b      	ldrh	r3, [r3, #2]
 80127fe:	2b7f      	cmp	r3, #127	; 0x7f
 8012800:	d829      	bhi.n	8012856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	885b      	ldrh	r3, [r3, #2]
 8012806:	b2db      	uxtb	r3, r3
 8012808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801280c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012814:	b2db      	uxtb	r3, r3
 8012816:	2b03      	cmp	r3, #3
 8012818:	d104      	bne.n	8012824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f000 f9a3 	bl	8012b68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012822:	e01d      	b.n	8012860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	7bfa      	ldrb	r2, [r7, #15]
 8012828:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801282c:	7bfb      	ldrb	r3, [r7, #15]
 801282e:	4619      	mov	r1, r3
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fed6 	bl	80135e2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 fa61 	bl	8012cfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801283c:	7bfb      	ldrb	r3, [r7, #15]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d004      	beq.n	801284c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2202      	movs	r2, #2
 8012846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801284a:	e009      	b.n	8012860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2201      	movs	r2, #1
 8012850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012854:	e004      	b.n	8012860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012856:	6839      	ldr	r1, [r7, #0]
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 f985 	bl	8012b68 <USBD_CtlError>
  }
}
 801285e:	bf00      	nop
 8012860:	bf00      	nop
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	885b      	ldrh	r3, [r3, #2]
 801287a:	b2da      	uxtb	r2, r3
 801287c:	4b4c      	ldr	r3, [pc, #304]	; (80129b0 <USBD_SetConfig+0x148>)
 801287e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012880:	4b4b      	ldr	r3, [pc, #300]	; (80129b0 <USBD_SetConfig+0x148>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d905      	bls.n	8012894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f96c 	bl	8012b68 <USBD_CtlError>
    return USBD_FAIL;
 8012890:	2303      	movs	r3, #3
 8012892:	e088      	b.n	80129a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801289a:	b2db      	uxtb	r3, r3
 801289c:	2b02      	cmp	r3, #2
 801289e:	d002      	beq.n	80128a6 <USBD_SetConfig+0x3e>
 80128a0:	2b03      	cmp	r3, #3
 80128a2:	d025      	beq.n	80128f0 <USBD_SetConfig+0x88>
 80128a4:	e071      	b.n	801298a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80128a6:	4b42      	ldr	r3, [pc, #264]	; (80129b0 <USBD_SetConfig+0x148>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d01c      	beq.n	80128e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80128ae:	4b40      	ldr	r3, [pc, #256]	; (80129b0 <USBD_SetConfig+0x148>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	461a      	mov	r2, r3
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80128b8:	4b3d      	ldr	r3, [pc, #244]	; (80129b0 <USBD_SetConfig+0x148>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	4619      	mov	r1, r3
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f7ff f992 	bl	8011be8 <USBD_SetClassConfig>
 80128c4:	4603      	mov	r3, r0
 80128c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d004      	beq.n	80128d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80128ce:	6839      	ldr	r1, [r7, #0]
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 f949 	bl	8012b68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80128d6:	e065      	b.n	80129a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fa10 	bl	8012cfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2203      	movs	r2, #3
 80128e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80128e6:	e05d      	b.n	80129a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fa08 	bl	8012cfe <USBD_CtlSendStatus>
      break;
 80128ee:	e059      	b.n	80129a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80128f0:	4b2f      	ldr	r3, [pc, #188]	; (80129b0 <USBD_SetConfig+0x148>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d112      	bne.n	801291e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2202      	movs	r2, #2
 80128fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012900:	4b2b      	ldr	r3, [pc, #172]	; (80129b0 <USBD_SetConfig+0x148>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	461a      	mov	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801290a:	4b29      	ldr	r3, [pc, #164]	; (80129b0 <USBD_SetConfig+0x148>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	4619      	mov	r1, r3
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff f985 	bl	8011c20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 f9f1 	bl	8012cfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801291c:	e042      	b.n	80129a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801291e:	4b24      	ldr	r3, [pc, #144]	; (80129b0 <USBD_SetConfig+0x148>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	429a      	cmp	r2, r3
 801292a:	d02a      	beq.n	8012982 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	b2db      	uxtb	r3, r3
 8012932:	4619      	mov	r1, r3
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff f973 	bl	8011c20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801293a:	4b1d      	ldr	r3, [pc, #116]	; (80129b0 <USBD_SetConfig+0x148>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	461a      	mov	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012944:	4b1a      	ldr	r3, [pc, #104]	; (80129b0 <USBD_SetConfig+0x148>)
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7ff f94c 	bl	8011be8 <USBD_SetClassConfig>
 8012950:	4603      	mov	r3, r0
 8012952:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012954:	7bfb      	ldrb	r3, [r7, #15]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00f      	beq.n	801297a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801295a:	6839      	ldr	r1, [r7, #0]
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f000 f903 	bl	8012b68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	b2db      	uxtb	r3, r3
 8012968:	4619      	mov	r1, r3
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7ff f958 	bl	8011c20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2202      	movs	r2, #2
 8012974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012978:	e014      	b.n	80129a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f9bf 	bl	8012cfe <USBD_CtlSendStatus>
      break;
 8012980:	e010      	b.n	80129a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 f9bb 	bl	8012cfe <USBD_CtlSendStatus>
      break;
 8012988:	e00c      	b.n	80129a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801298a:	6839      	ldr	r1, [r7, #0]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 f8eb 	bl	8012b68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012992:	4b07      	ldr	r3, [pc, #28]	; (80129b0 <USBD_SetConfig+0x148>)
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	4619      	mov	r1, r3
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f7ff f941 	bl	8011c20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801299e:	2303      	movs	r3, #3
 80129a0:	73fb      	strb	r3, [r7, #15]
      break;
 80129a2:	bf00      	nop
  }

  return ret;
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	20000a58 	.word	0x20000a58

080129b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	88db      	ldrh	r3, [r3, #6]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d004      	beq.n	80129d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80129c6:	6839      	ldr	r1, [r7, #0]
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f8cd 	bl	8012b68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80129ce:	e023      	b.n	8012a18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129d6:	b2db      	uxtb	r3, r3
 80129d8:	2b02      	cmp	r3, #2
 80129da:	dc02      	bgt.n	80129e2 <USBD_GetConfig+0x2e>
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dc03      	bgt.n	80129e8 <USBD_GetConfig+0x34>
 80129e0:	e015      	b.n	8012a0e <USBD_GetConfig+0x5a>
 80129e2:	2b03      	cmp	r3, #3
 80129e4:	d00b      	beq.n	80129fe <USBD_GetConfig+0x4a>
 80129e6:	e012      	b.n	8012a0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	3308      	adds	r3, #8
 80129f2:	2201      	movs	r2, #1
 80129f4:	4619      	mov	r1, r3
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 f927 	bl	8012c4a <USBD_CtlSendData>
        break;
 80129fc:	e00c      	b.n	8012a18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	3304      	adds	r3, #4
 8012a02:	2201      	movs	r2, #1
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 f91f 	bl	8012c4a <USBD_CtlSendData>
        break;
 8012a0c:	e004      	b.n	8012a18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012a0e:	6839      	ldr	r1, [r7, #0]
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 f8a9 	bl	8012b68 <USBD_CtlError>
        break;
 8012a16:	bf00      	nop
}
 8012a18:	bf00      	nop
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	3b01      	subs	r3, #1
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	d81e      	bhi.n	8012a76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	88db      	ldrh	r3, [r3, #6]
 8012a3c:	2b02      	cmp	r3, #2
 8012a3e:	d004      	beq.n	8012a4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012a40:	6839      	ldr	r1, [r7, #0]
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f000 f890 	bl	8012b68 <USBD_CtlError>
        break;
 8012a48:	e01a      	b.n	8012a80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d005      	beq.n	8012a66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	f043 0202 	orr.w	r2, r3, #2
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	330c      	adds	r3, #12
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f8eb 	bl	8012c4a <USBD_CtlSendData>
      break;
 8012a74:	e004      	b.n	8012a80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012a76:	6839      	ldr	r1, [r7, #0]
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f000 f875 	bl	8012b68 <USBD_CtlError>
      break;
 8012a7e:	bf00      	nop
  }
}
 8012a80:	bf00      	nop
 8012a82:	3708      	adds	r7, #8
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	885b      	ldrh	r3, [r3, #2]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d106      	bne.n	8012aa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f000 f92b 	bl	8012cfe <USBD_CtlSendStatus>
  }
}
 8012aa8:	bf00      	nop
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d80b      	bhi.n	8012ae0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	885b      	ldrh	r3, [r3, #2]
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d10c      	bne.n	8012aea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 f910 	bl	8012cfe <USBD_CtlSendStatus>
      }
      break;
 8012ade:	e004      	b.n	8012aea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012ae0:	6839      	ldr	r1, [r7, #0]
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 f840 	bl	8012b68 <USBD_CtlError>
      break;
 8012ae8:	e000      	b.n	8012aec <USBD_ClrFeature+0x3c>
      break;
 8012aea:	bf00      	nop
  }
}
 8012aec:	bf00      	nop
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	781a      	ldrb	r2, [r3, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7ff fa92 	bl	8012048 <SWAPBYTE>
 8012b24:	4603      	mov	r3, r0
 8012b26:	461a      	mov	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	3301      	adds	r3, #1
 8012b36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f7ff fa85 	bl	8012048 <SWAPBYTE>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	461a      	mov	r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f7ff fa78 	bl	8012048 <SWAPBYTE>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	80da      	strh	r2, [r3, #6]
}
 8012b60:	bf00      	nop
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012b72:	2180      	movs	r1, #128	; 0x80
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 fcc9 	bl	801350c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f000 fcc5 	bl	801350c <USBD_LL_StallEP>
}
 8012b82:	bf00      	nop
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b086      	sub	sp, #24
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	60f8      	str	r0, [r7, #12]
 8012b92:	60b9      	str	r1, [r7, #8]
 8012b94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012b96:	2300      	movs	r3, #0
 8012b98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d036      	beq.n	8012c0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012ba4:	6938      	ldr	r0, [r7, #16]
 8012ba6:	f000 f836 	bl	8012c16 <USBD_GetLen>
 8012baa:	4603      	mov	r3, r0
 8012bac:	3301      	adds	r3, #1
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	005b      	lsls	r3, r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012bb8:	7dfb      	ldrb	r3, [r7, #23]
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	7812      	ldrb	r2, [r2, #0]
 8012bc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8012bc4:	7dfb      	ldrb	r3, [r7, #23]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012bca:	7dfb      	ldrb	r3, [r7, #23]
 8012bcc:	68ba      	ldr	r2, [r7, #8]
 8012bce:	4413      	add	r3, r2
 8012bd0:	2203      	movs	r2, #3
 8012bd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8012bd4:	7dfb      	ldrb	r3, [r7, #23]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012bda:	e013      	b.n	8012c04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012bdc:	7dfb      	ldrb	r3, [r7, #23]
 8012bde:	68ba      	ldr	r2, [r7, #8]
 8012be0:	4413      	add	r3, r2
 8012be2:	693a      	ldr	r2, [r7, #16]
 8012be4:	7812      	ldrb	r2, [r2, #0]
 8012be6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	3301      	adds	r3, #1
 8012bec:	613b      	str	r3, [r7, #16]
    idx++;
 8012bee:	7dfb      	ldrb	r3, [r7, #23]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012bf4:	7dfb      	ldrb	r3, [r7, #23]
 8012bf6:	68ba      	ldr	r2, [r7, #8]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	701a      	strb	r2, [r3, #0]
    idx++;
 8012bfe:	7dfb      	ldrb	r3, [r7, #23]
 8012c00:	3301      	adds	r3, #1
 8012c02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d1e7      	bne.n	8012bdc <USBD_GetString+0x52>
 8012c0c:	e000      	b.n	8012c10 <USBD_GetString+0x86>
    return;
 8012c0e:	bf00      	nop
  }
}
 8012c10:	3718      	adds	r7, #24
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}

08012c16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012c16:	b480      	push	{r7}
 8012c18:	b085      	sub	sp, #20
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012c26:	e005      	b.n	8012c34 <USBD_GetLen+0x1e>
  {
    len++;
 8012c28:	7bfb      	ldrb	r3, [r7, #15]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	3301      	adds	r3, #1
 8012c32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d1f5      	bne.n	8012c28 <USBD_GetLen+0x12>
  }

  return len;
 8012c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3714      	adds	r7, #20
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b084      	sub	sp, #16
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	60f8      	str	r0, [r7, #12]
 8012c52:	60b9      	str	r1, [r7, #8]
 8012c54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2202      	movs	r2, #2
 8012c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	68ba      	ldr	r2, [r7, #8]
 8012c6e:	2100      	movs	r1, #0
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f000 fcd5 	bl	8013620 <USBD_LL_Transmit>

  return USBD_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	60b9      	str	r1, [r7, #8]
 8012c8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	2100      	movs	r1, #0
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f000 fcc4 	bl	8013620 <USBD_LL_Transmit>

  return USBD_OK;
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b084      	sub	sp, #16
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	60f8      	str	r0, [r7, #12]
 8012caa:	60b9      	str	r1, [r7, #8]
 8012cac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2203      	movs	r2, #3
 8012cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	68ba      	ldr	r2, [r7, #8]
 8012cca:	2100      	movs	r1, #0
 8012ccc:	68f8      	ldr	r0, [r7, #12]
 8012cce:	f000 fcc8 	bl	8013662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	2100      	movs	r1, #0
 8012cee:	68f8      	ldr	r0, [r7, #12]
 8012cf0:	f000 fcb7 	bl	8013662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b082      	sub	sp, #8
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2204      	movs	r2, #4
 8012d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012d0e:	2300      	movs	r3, #0
 8012d10:	2200      	movs	r2, #0
 8012d12:	2100      	movs	r1, #0
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fc83 	bl	8013620 <USBD_LL_Transmit>

  return USBD_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2205      	movs	r2, #5
 8012d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d34:	2300      	movs	r3, #0
 8012d36:	2200      	movs	r2, #0
 8012d38:	2100      	movs	r1, #0
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fc91 	bl	8013662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d40:	2300      	movs	r3, #0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
	...

08012d4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012d50:	2200      	movs	r2, #0
 8012d52:	4912      	ldr	r1, [pc, #72]	; (8012d9c <MX_USB_Device_Init+0x50>)
 8012d54:	4812      	ldr	r0, [pc, #72]	; (8012da0 <MX_USB_Device_Init+0x54>)
 8012d56:	f7fe fed9 	bl	8011b0c <USBD_Init>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d001      	beq.n	8012d64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012d60:	f7f2 f8ee 	bl	8004f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012d64:	490f      	ldr	r1, [pc, #60]	; (8012da4 <MX_USB_Device_Init+0x58>)
 8012d66:	480e      	ldr	r0, [pc, #56]	; (8012da0 <MX_USB_Device_Init+0x54>)
 8012d68:	f7fe ff00 	bl	8011b6c <USBD_RegisterClass>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d001      	beq.n	8012d76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012d72:	f7f2 f8e5 	bl	8004f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012d76:	490c      	ldr	r1, [pc, #48]	; (8012da8 <MX_USB_Device_Init+0x5c>)
 8012d78:	4809      	ldr	r0, [pc, #36]	; (8012da0 <MX_USB_Device_Init+0x54>)
 8012d7a:	f7fe fe21 	bl	80119c0 <USBD_CDC_RegisterInterface>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d001      	beq.n	8012d88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012d84:	f7f2 f8dc 	bl	8004f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012d88:	4805      	ldr	r0, [pc, #20]	; (8012da0 <MX_USB_Device_Init+0x54>)
 8012d8a:	f7fe ff16 	bl	8011bba <USBD_Start>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d001      	beq.n	8012d98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012d94:	f7f2 f8d4 	bl	8004f40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012d98:	bf00      	nop
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	20000130 	.word	0x20000130
 8012da0:	20000a5c 	.word	0x20000a5c
 8012da4:	20000018 	.word	0x20000018
 8012da8:	2000011c 	.word	0x2000011c

08012dac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012db0:	2200      	movs	r2, #0
 8012db2:	4905      	ldr	r1, [pc, #20]	; (8012dc8 <CDC_Init_FS+0x1c>)
 8012db4:	4805      	ldr	r0, [pc, #20]	; (8012dcc <CDC_Init_FS+0x20>)
 8012db6:	f7fe fe18 	bl	80119ea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012dba:	4905      	ldr	r1, [pc, #20]	; (8012dd0 <CDC_Init_FS+0x24>)
 8012dbc:	4803      	ldr	r0, [pc, #12]	; (8012dcc <CDC_Init_FS+0x20>)
 8012dbe:	f7fe fe32 	bl	8011a26 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8012dc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	2000156c 	.word	0x2000156c
 8012dcc:	20000a5c 	.word	0x20000a5c
 8012dd0:	20000d6c 	.word	0x20000d6c

08012dd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8012dd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	4603      	mov	r3, r0
 8012dec:	6039      	str	r1, [r7, #0]
 8012dee:	71fb      	strb	r3, [r7, #7]
 8012df0:	4613      	mov	r3, r2
 8012df2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8012df4:	79fb      	ldrb	r3, [r7, #7]
 8012df6:	2b23      	cmp	r3, #35	; 0x23
 8012df8:	d85a      	bhi.n	8012eb0 <CDC_Control_FS+0xcc>
 8012dfa:	a201      	add	r2, pc, #4	; (adr r2, 8012e00 <CDC_Control_FS+0x1c>)
 8012dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e00:	08012eb1 	.word	0x08012eb1
 8012e04:	08012eb1 	.word	0x08012eb1
 8012e08:	08012eb1 	.word	0x08012eb1
 8012e0c:	08012eb1 	.word	0x08012eb1
 8012e10:	08012eb1 	.word	0x08012eb1
 8012e14:	08012eb1 	.word	0x08012eb1
 8012e18:	08012eb1 	.word	0x08012eb1
 8012e1c:	08012eb1 	.word	0x08012eb1
 8012e20:	08012eb1 	.word	0x08012eb1
 8012e24:	08012eb1 	.word	0x08012eb1
 8012e28:	08012eb1 	.word	0x08012eb1
 8012e2c:	08012eb1 	.word	0x08012eb1
 8012e30:	08012eb1 	.word	0x08012eb1
 8012e34:	08012eb1 	.word	0x08012eb1
 8012e38:	08012eb1 	.word	0x08012eb1
 8012e3c:	08012eb1 	.word	0x08012eb1
 8012e40:	08012eb1 	.word	0x08012eb1
 8012e44:	08012eb1 	.word	0x08012eb1
 8012e48:	08012eb1 	.word	0x08012eb1
 8012e4c:	08012eb1 	.word	0x08012eb1
 8012e50:	08012eb1 	.word	0x08012eb1
 8012e54:	08012eb1 	.word	0x08012eb1
 8012e58:	08012eb1 	.word	0x08012eb1
 8012e5c:	08012eb1 	.word	0x08012eb1
 8012e60:	08012eb1 	.word	0x08012eb1
 8012e64:	08012eb1 	.word	0x08012eb1
 8012e68:	08012eb1 	.word	0x08012eb1
 8012e6c:	08012eb1 	.word	0x08012eb1
 8012e70:	08012eb1 	.word	0x08012eb1
 8012e74:	08012eb1 	.word	0x08012eb1
 8012e78:	08012eb1 	.word	0x08012eb1
 8012e7c:	08012eb1 	.word	0x08012eb1
 8012e80:	08012eb1 	.word	0x08012eb1
 8012e84:	08012eb1 	.word	0x08012eb1
 8012e88:	08012e91 	.word	0x08012e91
 8012e8c:	08012eb1 	.word	0x08012eb1

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	885b      	ldrh	r3, [r3, #2]
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d003      	beq.n	8012ea8 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 8012ea0:	4b07      	ldr	r3, [pc, #28]	; (8012ec0 <CDC_Control_FS+0xdc>)
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 8012ea6:	e004      	b.n	8012eb2 <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8012ea8:	4b05      	ldr	r3, [pc, #20]	; (8012ec0 <CDC_Control_FS+0xdc>)
 8012eaa:	2200      	movs	r2, #0
 8012eac:	701a      	strb	r2, [r3, #0]
		break;
 8012eae:	e000      	b.n	8012eb2 <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8012eb0:	bf00      	nop
	}

	return (USBD_OK);
 8012eb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3714      	adds	r7, #20
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr
 8012ec0:	20001d6c 	.word	0x20001d6c

08012ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ece:	6879      	ldr	r1, [r7, #4]
 8012ed0:	480f      	ldr	r0, [pc, #60]	; (8012f10 <CDC_Receive_FS+0x4c>)
 8012ed2:	f7fe fda8 	bl	8011a26 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012ed6:	480e      	ldr	r0, [pc, #56]	; (8012f10 <CDC_Receive_FS+0x4c>)
 8012ed8:	f7fe fdee 	bl	8011ab8 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8012edc:	2240      	movs	r2, #64	; 0x40
 8012ede:	2100      	movs	r1, #0
 8012ee0:	480c      	ldr	r0, [pc, #48]	; (8012f14 <CDC_Receive_FS+0x50>)
 8012ee2:	f000 fcf3 	bl	80138cc <memset>
	uint8_t len = (uint8_t) *Len;
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8012eec:	7bfb      	ldrb	r3, [r7, #15]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	6879      	ldr	r1, [r7, #4]
 8012ef2:	4808      	ldr	r0, [pc, #32]	; (8012f14 <CDC_Receive_FS+0x50>)
 8012ef4:	f000 fcdc 	bl	80138b0 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8012ef8:	7bfb      	ldrb	r3, [r7, #15]
 8012efa:	461a      	mov	r2, r3
 8012efc:	2100      	movs	r1, #0
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 fce4 	bl	80138cc <memset>

	return (USBD_OK);
 8012f04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	20000a5c 	.word	0x20000a5c
 8012f14:	20000d2c 	.word	0x20000d2c

08012f18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	460b      	mov	r3, r1
 8012f22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8012f28:	4b12      	ldr	r3, [pc, #72]	; (8012f74 <CDC_Transmit_FS+0x5c>)
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d01b      	beq.n	8012f68 <CDC_Transmit_FS+0x50>
 8012f30:	4b11      	ldr	r3, [pc, #68]	; (8012f78 <CDC_Transmit_FS+0x60>)
 8012f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d115      	bne.n	8012f68 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8012f3c:	4b0e      	ldr	r3, [pc, #56]	; (8012f78 <CDC_Transmit_FS+0x60>)
 8012f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f42:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e00b      	b.n	8012f6a <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012f52:	887b      	ldrh	r3, [r7, #2]
 8012f54:	461a      	mov	r2, r3
 8012f56:	6879      	ldr	r1, [r7, #4]
 8012f58:	4807      	ldr	r0, [pc, #28]	; (8012f78 <CDC_Transmit_FS+0x60>)
 8012f5a:	f7fe fd46 	bl	80119ea <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012f5e:	4806      	ldr	r0, [pc, #24]	; (8012f78 <CDC_Transmit_FS+0x60>)
 8012f60:	f7fe fd7a 	bl	8011a58 <USBD_CDC_TransmitPacket>
 8012f64:	4603      	mov	r3, r0
 8012f66:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8012f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	20001d6c 	.word	0x20001d6c
 8012f78:	20000a5c 	.word	0x20000a5c

08012f7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	4613      	mov	r3, r2
 8012f88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	371c      	adds	r7, #28
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
	...

08012fa0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	6039      	str	r1, [r7, #0]
 8012faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	2212      	movs	r2, #18
 8012fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012fb2:	4b03      	ldr	r3, [pc, #12]	; (8012fc0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	370c      	adds	r7, #12
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr
 8012fc0:	20000150 	.word	0x20000150

08012fc4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	6039      	str	r1, [r7, #0]
 8012fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	2204      	movs	r2, #4
 8012fd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012fd6:	4b03      	ldr	r3, [pc, #12]	; (8012fe4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr
 8012fe4:	20000164 	.word	0x20000164

08012fe8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	4603      	mov	r3, r0
 8012ff0:	6039      	str	r1, [r7, #0]
 8012ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d105      	bne.n	8013006 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012ffa:	683a      	ldr	r2, [r7, #0]
 8012ffc:	4907      	ldr	r1, [pc, #28]	; (801301c <USBD_CDC_ProductStrDescriptor+0x34>)
 8012ffe:	4808      	ldr	r0, [pc, #32]	; (8013020 <USBD_CDC_ProductStrDescriptor+0x38>)
 8013000:	f7ff fdc3 	bl	8012b8a <USBD_GetString>
 8013004:	e004      	b.n	8013010 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	4904      	ldr	r1, [pc, #16]	; (801301c <USBD_CDC_ProductStrDescriptor+0x34>)
 801300a:	4805      	ldr	r0, [pc, #20]	; (8013020 <USBD_CDC_ProductStrDescriptor+0x38>)
 801300c:	f7ff fdbd 	bl	8012b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013010:	4b02      	ldr	r3, [pc, #8]	; (801301c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8013012:	4618      	mov	r0, r3
 8013014:	3708      	adds	r7, #8
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	20001d70 	.word	0x20001d70
 8013020:	08016890 	.word	0x08016890

08013024 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	4603      	mov	r3, r0
 801302c:	6039      	str	r1, [r7, #0]
 801302e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	4904      	ldr	r1, [pc, #16]	; (8013044 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013034:	4804      	ldr	r0, [pc, #16]	; (8013048 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8013036:	f7ff fda8 	bl	8012b8a <USBD_GetString>
  return USBD_StrDesc;
 801303a:	4b02      	ldr	r3, [pc, #8]	; (8013044 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	20001d70 	.word	0x20001d70
 8013048:	080168a8 	.word	0x080168a8

0801304c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	4603      	mov	r3, r0
 8013054:	6039      	str	r1, [r7, #0]
 8013056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	221a      	movs	r2, #26
 801305c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801305e:	f000 f843 	bl	80130e8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013062:	4b02      	ldr	r3, [pc, #8]	; (801306c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013064:	4618      	mov	r0, r3
 8013066:	3708      	adds	r7, #8
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	20000168 	.word	0x20000168

08013070 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	4603      	mov	r3, r0
 8013078:	6039      	str	r1, [r7, #0]
 801307a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801307c:	79fb      	ldrb	r3, [r7, #7]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d105      	bne.n	801308e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013082:	683a      	ldr	r2, [r7, #0]
 8013084:	4907      	ldr	r1, [pc, #28]	; (80130a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013086:	4808      	ldr	r0, [pc, #32]	; (80130a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013088:	f7ff fd7f 	bl	8012b8a <USBD_GetString>
 801308c:	e004      	b.n	8013098 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801308e:	683a      	ldr	r2, [r7, #0]
 8013090:	4904      	ldr	r1, [pc, #16]	; (80130a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013092:	4805      	ldr	r0, [pc, #20]	; (80130a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013094:	f7ff fd79 	bl	8012b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013098:	4b02      	ldr	r3, [pc, #8]	; (80130a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801309a:	4618      	mov	r0, r3
 801309c:	3708      	adds	r7, #8
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	20001d70 	.word	0x20001d70
 80130a8:	080168bc 	.word	0x080168bc

080130ac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	4603      	mov	r3, r0
 80130b4:	6039      	str	r1, [r7, #0]
 80130b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80130b8:	79fb      	ldrb	r3, [r7, #7]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d105      	bne.n	80130ca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80130be:	683a      	ldr	r2, [r7, #0]
 80130c0:	4907      	ldr	r1, [pc, #28]	; (80130e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80130c2:	4808      	ldr	r0, [pc, #32]	; (80130e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80130c4:	f7ff fd61 	bl	8012b8a <USBD_GetString>
 80130c8:	e004      	b.n	80130d4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80130ca:	683a      	ldr	r2, [r7, #0]
 80130cc:	4904      	ldr	r1, [pc, #16]	; (80130e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80130ce:	4805      	ldr	r0, [pc, #20]	; (80130e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80130d0:	f7ff fd5b 	bl	8012b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80130d4:	4b02      	ldr	r3, [pc, #8]	; (80130e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	20001d70 	.word	0x20001d70
 80130e4:	080168c8 	.word	0x080168c8

080130e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130ee:	4b0f      	ldr	r3, [pc, #60]	; (801312c <Get_SerialNum+0x44>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130f4:	4b0e      	ldr	r3, [pc, #56]	; (8013130 <Get_SerialNum+0x48>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130fa:	4b0e      	ldr	r3, [pc, #56]	; (8013134 <Get_SerialNum+0x4c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013100:	68fa      	ldr	r2, [r7, #12]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4413      	add	r3, r2
 8013106:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d009      	beq.n	8013122 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801310e:	2208      	movs	r2, #8
 8013110:	4909      	ldr	r1, [pc, #36]	; (8013138 <Get_SerialNum+0x50>)
 8013112:	68f8      	ldr	r0, [r7, #12]
 8013114:	f000 f814 	bl	8013140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013118:	2204      	movs	r2, #4
 801311a:	4908      	ldr	r1, [pc, #32]	; (801313c <Get_SerialNum+0x54>)
 801311c:	68b8      	ldr	r0, [r7, #8]
 801311e:	f000 f80f 	bl	8013140 <IntToUnicode>
  }
}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	1fff7590 	.word	0x1fff7590
 8013130:	1fff7594 	.word	0x1fff7594
 8013134:	1fff7598 	.word	0x1fff7598
 8013138:	2000016a 	.word	0x2000016a
 801313c:	2000017a 	.word	0x2000017a

08013140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013140:	b480      	push	{r7}
 8013142:	b087      	sub	sp, #28
 8013144:	af00      	add	r7, sp, #0
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	4613      	mov	r3, r2
 801314c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013152:	2300      	movs	r3, #0
 8013154:	75fb      	strb	r3, [r7, #23]
 8013156:	e027      	b.n	80131a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	0f1b      	lsrs	r3, r3, #28
 801315c:	2b09      	cmp	r3, #9
 801315e:	d80b      	bhi.n	8013178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	0f1b      	lsrs	r3, r3, #28
 8013164:	b2da      	uxtb	r2, r3
 8013166:	7dfb      	ldrb	r3, [r7, #23]
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	4619      	mov	r1, r3
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	440b      	add	r3, r1
 8013170:	3230      	adds	r2, #48	; 0x30
 8013172:	b2d2      	uxtb	r2, r2
 8013174:	701a      	strb	r2, [r3, #0]
 8013176:	e00a      	b.n	801318e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	0f1b      	lsrs	r3, r3, #28
 801317c:	b2da      	uxtb	r2, r3
 801317e:	7dfb      	ldrb	r3, [r7, #23]
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	4619      	mov	r1, r3
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	440b      	add	r3, r1
 8013188:	3237      	adds	r2, #55	; 0x37
 801318a:	b2d2      	uxtb	r2, r2
 801318c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	011b      	lsls	r3, r3, #4
 8013192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013194:	7dfb      	ldrb	r3, [r7, #23]
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	3301      	adds	r3, #1
 801319a:	68ba      	ldr	r2, [r7, #8]
 801319c:	4413      	add	r3, r2
 801319e:	2200      	movs	r2, #0
 80131a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80131a2:	7dfb      	ldrb	r3, [r7, #23]
 80131a4:	3301      	adds	r3, #1
 80131a6:	75fb      	strb	r3, [r7, #23]
 80131a8:	7dfa      	ldrb	r2, [r7, #23]
 80131aa:	79fb      	ldrb	r3, [r7, #7]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d3d3      	bcc.n	8013158 <IntToUnicode+0x18>
  }
}
 80131b0:	bf00      	nop
 80131b2:	bf00      	nop
 80131b4:	371c      	adds	r7, #28
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
	...

080131c0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b098      	sub	sp, #96	; 0x60
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80131c8:	f107 030c 	add.w	r3, r7, #12
 80131cc:	2254      	movs	r2, #84	; 0x54
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f000 fb7b 	bl	80138cc <memset>
  if(pcdHandle->Instance==USB)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a15      	ldr	r2, [pc, #84]	; (8013230 <HAL_PCD_MspInit+0x70>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d122      	bne.n	8013226 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80131e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80131e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80131e6:	2300      	movs	r3, #0
 80131e8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80131ea:	f107 030c 	add.w	r3, r7, #12
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f8 fc6e 	bl	800bad0 <HAL_RCCEx_PeriphCLKConfig>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d001      	beq.n	80131fe <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80131fa:	f7f1 fea1 	bl	8004f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80131fe:	4b0d      	ldr	r3, [pc, #52]	; (8013234 <HAL_PCD_MspInit+0x74>)
 8013200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013202:	4a0c      	ldr	r2, [pc, #48]	; (8013234 <HAL_PCD_MspInit+0x74>)
 8013204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013208:	6593      	str	r3, [r2, #88]	; 0x58
 801320a:	4b0a      	ldr	r3, [pc, #40]	; (8013234 <HAL_PCD_MspInit+0x74>)
 801320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801320e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013212:	60bb      	str	r3, [r7, #8]
 8013214:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013216:	2200      	movs	r2, #0
 8013218:	2100      	movs	r1, #0
 801321a:	2014      	movs	r0, #20
 801321c:	f7f4 ff1b 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013220:	2014      	movs	r0, #20
 8013222:	f7f4 ff32 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013226:	bf00      	nop
 8013228:	3760      	adds	r7, #96	; 0x60
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	40005c00 	.word	0x40005c00
 8013234:	40021000 	.word	0x40021000

08013238 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801324c:	4619      	mov	r1, r3
 801324e:	4610      	mov	r0, r2
 8013250:	f7fe fcfe 	bl	8011c50 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013254:	bf00      	nop
 8013256:	3708      	adds	r7, #8
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	460b      	mov	r3, r1
 8013266:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801326e:	78fa      	ldrb	r2, [r7, #3]
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	4613      	mov	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	440b      	add	r3, r1
 801327c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	78fb      	ldrb	r3, [r7, #3]
 8013284:	4619      	mov	r1, r3
 8013286:	f7fe fd38 	bl	8011cfa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801328a:	bf00      	nop
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013292:	b580      	push	{r7, lr}
 8013294:	b082      	sub	sp, #8
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	460b      	mov	r3, r1
 801329c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80132a4:	78fa      	ldrb	r2, [r7, #3]
 80132a6:	6879      	ldr	r1, [r7, #4]
 80132a8:	4613      	mov	r3, r2
 80132aa:	009b      	lsls	r3, r3, #2
 80132ac:	4413      	add	r3, r2
 80132ae:	00db      	lsls	r3, r3, #3
 80132b0:	440b      	add	r3, r1
 80132b2:	333c      	adds	r3, #60	; 0x3c
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	78fb      	ldrb	r3, [r7, #3]
 80132b8:	4619      	mov	r1, r3
 80132ba:	f7fe fd81 	bl	8011dc0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80132be:	bf00      	nop
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b082      	sub	sp, #8
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fe fe95 	bl	8012004 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80132da:	bf00      	nop
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b084      	sub	sp, #16
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80132ea:	2301      	movs	r3, #1
 80132ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d001      	beq.n	80132fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80132f6:	f7f1 fe23 	bl	8004f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013300:	7bfa      	ldrb	r2, [r7, #15]
 8013302:	4611      	mov	r1, r2
 8013304:	4618      	mov	r0, r3
 8013306:	f7fe fe3f 	bl	8011f88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013310:	4618      	mov	r0, r3
 8013312:	f7fe fdeb 	bl	8011eec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013316:	bf00      	nop
 8013318:	3710      	adds	r7, #16
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
	...

08013320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe fe3a 	bl	8011fa8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	699b      	ldr	r3, [r3, #24]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d005      	beq.n	8013348 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801333c:	4b04      	ldr	r3, [pc, #16]	; (8013350 <HAL_PCD_SuspendCallback+0x30>)
 801333e:	691b      	ldr	r3, [r3, #16]
 8013340:	4a03      	ldr	r2, [pc, #12]	; (8013350 <HAL_PCD_SuspendCallback+0x30>)
 8013342:	f043 0306 	orr.w	r3, r3, #6
 8013346:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013348:	bf00      	nop
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	e000ed00 	.word	0xe000ed00

08013354 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d007      	beq.n	8013374 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013364:	4b08      	ldr	r3, [pc, #32]	; (8013388 <HAL_PCD_ResumeCallback+0x34>)
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	4a07      	ldr	r2, [pc, #28]	; (8013388 <HAL_PCD_ResumeCallback+0x34>)
 801336a:	f023 0306 	bic.w	r3, r3, #6
 801336e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013370:	f000 f9fa 	bl	8013768 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe fe2a 	bl	8011fd4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013380:	bf00      	nop
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	e000ed00 	.word	0xe000ed00

0801338c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013394:	4a2b      	ldr	r2, [pc, #172]	; (8013444 <USBD_LL_Init+0xb8>)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	4a29      	ldr	r2, [pc, #164]	; (8013444 <USBD_LL_Init+0xb8>)
 80133a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80133a4:	4b27      	ldr	r3, [pc, #156]	; (8013444 <USBD_LL_Init+0xb8>)
 80133a6:	4a28      	ldr	r2, [pc, #160]	; (8013448 <USBD_LL_Init+0xbc>)
 80133a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80133aa:	4b26      	ldr	r3, [pc, #152]	; (8013444 <USBD_LL_Init+0xb8>)
 80133ac:	2208      	movs	r2, #8
 80133ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80133b0:	4b24      	ldr	r3, [pc, #144]	; (8013444 <USBD_LL_Init+0xb8>)
 80133b2:	2202      	movs	r2, #2
 80133b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80133b6:	4b23      	ldr	r3, [pc, #140]	; (8013444 <USBD_LL_Init+0xb8>)
 80133b8:	2202      	movs	r2, #2
 80133ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80133bc:	4b21      	ldr	r3, [pc, #132]	; (8013444 <USBD_LL_Init+0xb8>)
 80133be:	2200      	movs	r2, #0
 80133c0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80133c2:	4b20      	ldr	r3, [pc, #128]	; (8013444 <USBD_LL_Init+0xb8>)
 80133c4:	2200      	movs	r2, #0
 80133c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80133c8:	4b1e      	ldr	r3, [pc, #120]	; (8013444 <USBD_LL_Init+0xb8>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80133ce:	4b1d      	ldr	r3, [pc, #116]	; (8013444 <USBD_LL_Init+0xb8>)
 80133d0:	2200      	movs	r2, #0
 80133d2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80133d4:	481b      	ldr	r0, [pc, #108]	; (8013444 <USBD_LL_Init+0xb8>)
 80133d6:	f7f6 f86f 	bl	80094b8 <HAL_PCD_Init>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80133e0:	f7f1 fdae 	bl	8004f40 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133ea:	2318      	movs	r3, #24
 80133ec:	2200      	movs	r2, #0
 80133ee:	2100      	movs	r1, #0
 80133f0:	f7f7 fd28 	bl	800ae44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133fa:	2358      	movs	r3, #88	; 0x58
 80133fc:	2200      	movs	r2, #0
 80133fe:	2180      	movs	r1, #128	; 0x80
 8013400:	f7f7 fd20 	bl	800ae44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801340a:	23c0      	movs	r3, #192	; 0xc0
 801340c:	2200      	movs	r2, #0
 801340e:	2181      	movs	r1, #129	; 0x81
 8013410:	f7f7 fd18 	bl	800ae44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801341a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801341e:	2200      	movs	r2, #0
 8013420:	2101      	movs	r1, #1
 8013422:	f7f7 fd0f 	bl	800ae44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801342c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013430:	2200      	movs	r2, #0
 8013432:	2182      	movs	r1, #130	; 0x82
 8013434:	f7f7 fd06 	bl	800ae44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013438:	2300      	movs	r3, #0
}
 801343a:	4618      	mov	r0, r3
 801343c:	3708      	adds	r7, #8
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	20001f70 	.word	0x20001f70
 8013448:	40005c00 	.word	0x40005c00

0801344c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013458:	2300      	movs	r3, #0
 801345a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013462:	4618      	mov	r0, r3
 8013464:	f7f6 f90d 	bl	8009682 <HAL_PCD_Start>
 8013468:	4603      	mov	r3, r0
 801346a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801346c:	7bfb      	ldrb	r3, [r7, #15]
 801346e:	4618      	mov	r0, r3
 8013470:	f000 f9c8 	bl	8013804 <USBD_Get_USB_Status>
 8013474:	4603      	mov	r3, r0
 8013476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013478:	7bbb      	ldrb	r3, [r7, #14]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b084      	sub	sp, #16
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	4608      	mov	r0, r1
 801348c:	4611      	mov	r1, r2
 801348e:	461a      	mov	r2, r3
 8013490:	4603      	mov	r3, r0
 8013492:	70fb      	strb	r3, [r7, #3]
 8013494:	460b      	mov	r3, r1
 8013496:	70bb      	strb	r3, [r7, #2]
 8013498:	4613      	mov	r3, r2
 801349a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801349c:	2300      	movs	r3, #0
 801349e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134a0:	2300      	movs	r3, #0
 80134a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134aa:	78bb      	ldrb	r3, [r7, #2]
 80134ac:	883a      	ldrh	r2, [r7, #0]
 80134ae:	78f9      	ldrb	r1, [r7, #3]
 80134b0:	f7f6 fa55 	bl	800995e <HAL_PCD_EP_Open>
 80134b4:	4603      	mov	r3, r0
 80134b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134b8:	7bfb      	ldrb	r3, [r7, #15]
 80134ba:	4618      	mov	r0, r3
 80134bc:	f000 f9a2 	bl	8013804 <USBD_Get_USB_Status>
 80134c0:	4603      	mov	r3, r0
 80134c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3710      	adds	r7, #16
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}

080134ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134ce:	b580      	push	{r7, lr}
 80134d0:	b084      	sub	sp, #16
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	460b      	mov	r3, r1
 80134d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134da:	2300      	movs	r3, #0
 80134dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134de:	2300      	movs	r3, #0
 80134e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134e8:	78fa      	ldrb	r2, [r7, #3]
 80134ea:	4611      	mov	r1, r2
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f6 fa9c 	bl	8009a2a <HAL_PCD_EP_Close>
 80134f2:	4603      	mov	r3, r0
 80134f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134f6:	7bfb      	ldrb	r3, [r7, #15]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f000 f983 	bl	8013804 <USBD_Get_USB_Status>
 80134fe:	4603      	mov	r3, r0
 8013500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013502:	7bbb      	ldrb	r3, [r7, #14]
}
 8013504:	4618      	mov	r0, r3
 8013506:	3710      	adds	r7, #16
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	460b      	mov	r3, r1
 8013516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013518:	2300      	movs	r3, #0
 801351a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801351c:	2300      	movs	r3, #0
 801351e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013526:	78fa      	ldrb	r2, [r7, #3]
 8013528:	4611      	mov	r1, r2
 801352a:	4618      	mov	r0, r3
 801352c:	f7f6 fb5d 	bl	8009bea <HAL_PCD_EP_SetStall>
 8013530:	4603      	mov	r3, r0
 8013532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013534:	7bfb      	ldrb	r3, [r7, #15]
 8013536:	4618      	mov	r0, r3
 8013538:	f000 f964 	bl	8013804 <USBD_Get_USB_Status>
 801353c:	4603      	mov	r3, r0
 801353e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013540:	7bbb      	ldrb	r3, [r7, #14]
}
 8013542:	4618      	mov	r0, r3
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801354a:	b580      	push	{r7, lr}
 801354c:	b084      	sub	sp, #16
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
 8013552:	460b      	mov	r3, r1
 8013554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013556:	2300      	movs	r3, #0
 8013558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801355a:	2300      	movs	r3, #0
 801355c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013564:	78fa      	ldrb	r2, [r7, #3]
 8013566:	4611      	mov	r1, r2
 8013568:	4618      	mov	r0, r3
 801356a:	f7f6 fb90 	bl	8009c8e <HAL_PCD_EP_ClrStall>
 801356e:	4603      	mov	r3, r0
 8013570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013572:	7bfb      	ldrb	r3, [r7, #15]
 8013574:	4618      	mov	r0, r3
 8013576:	f000 f945 	bl	8013804 <USBD_Get_USB_Status>
 801357a:	4603      	mov	r3, r0
 801357c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801357e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013588:	b480      	push	{r7}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	460b      	mov	r3, r1
 8013592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801359a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801359c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	da0c      	bge.n	80135be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80135a4:	78fb      	ldrb	r3, [r7, #3]
 80135a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135aa:	68f9      	ldr	r1, [r7, #12]
 80135ac:	1c5a      	adds	r2, r3, #1
 80135ae:	4613      	mov	r3, r2
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	4413      	add	r3, r2
 80135b4:	00db      	lsls	r3, r3, #3
 80135b6:	440b      	add	r3, r1
 80135b8:	3302      	adds	r3, #2
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	e00b      	b.n	80135d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80135be:	78fb      	ldrb	r3, [r7, #3]
 80135c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135c4:	68f9      	ldr	r1, [r7, #12]
 80135c6:	4613      	mov	r3, r2
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	4413      	add	r3, r2
 80135cc:	00db      	lsls	r3, r3, #3
 80135ce:	440b      	add	r3, r1
 80135d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80135d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr

080135e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b084      	sub	sp, #16
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
 80135ea:	460b      	mov	r3, r1
 80135ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135ee:	2300      	movs	r3, #0
 80135f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135f2:	2300      	movs	r3, #0
 80135f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135fc:	78fa      	ldrb	r2, [r7, #3]
 80135fe:	4611      	mov	r1, r2
 8013600:	4618      	mov	r0, r3
 8013602:	f7f6 f987 	bl	8009914 <HAL_PCD_SetAddress>
 8013606:	4603      	mov	r3, r0
 8013608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	4618      	mov	r0, r3
 801360e:	f000 f8f9 	bl	8013804 <USBD_Get_USB_Status>
 8013612:	4603      	mov	r3, r0
 8013614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013616:	7bbb      	ldrb	r3, [r7, #14]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b086      	sub	sp, #24
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	607a      	str	r2, [r7, #4]
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	460b      	mov	r3, r1
 801362e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013634:	2300      	movs	r3, #0
 8013636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801363e:	7af9      	ldrb	r1, [r7, #11]
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	f7f6 fa8e 	bl	8009b64 <HAL_PCD_EP_Transmit>
 8013648:	4603      	mov	r3, r0
 801364a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801364c:	7dfb      	ldrb	r3, [r7, #23]
 801364e:	4618      	mov	r0, r3
 8013650:	f000 f8d8 	bl	8013804 <USBD_Get_USB_Status>
 8013654:	4603      	mov	r3, r0
 8013656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013658:	7dbb      	ldrb	r3, [r7, #22]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3718      	adds	r7, #24
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013662:	b580      	push	{r7, lr}
 8013664:	b086      	sub	sp, #24
 8013666:	af00      	add	r7, sp, #0
 8013668:	60f8      	str	r0, [r7, #12]
 801366a:	607a      	str	r2, [r7, #4]
 801366c:	603b      	str	r3, [r7, #0]
 801366e:	460b      	mov	r3, r1
 8013670:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013672:	2300      	movs	r3, #0
 8013674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013676:	2300      	movs	r3, #0
 8013678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013680:	7af9      	ldrb	r1, [r7, #11]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	f7f6 fa18 	bl	8009aba <HAL_PCD_EP_Receive>
 801368a:	4603      	mov	r3, r0
 801368c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801368e:	7dfb      	ldrb	r3, [r7, #23]
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f8b7 	bl	8013804 <USBD_Get_USB_Status>
 8013696:	4603      	mov	r3, r0
 8013698:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801369a:	7dbb      	ldrb	r3, [r7, #22]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3718      	adds	r7, #24
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136b6:	78fa      	ldrb	r2, [r7, #3]
 80136b8:	4611      	mov	r1, r2
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7f6 fa3a 	bl	8009b34 <HAL_PCD_EP_GetRxCount>
 80136c0:	4603      	mov	r3, r0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3708      	adds	r7, #8
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
	...

080136cc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	460b      	mov	r3, r1
 80136d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80136d8:	78fb      	ldrb	r3, [r7, #3]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <HAL_PCDEx_LPM_Callback+0x18>
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d013      	beq.n	801370a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80136e2:	e023      	b.n	801372c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	699b      	ldr	r3, [r3, #24]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d007      	beq.n	80136fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80136ec:	f000 f83c 	bl	8013768 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80136f0:	4b10      	ldr	r3, [pc, #64]	; (8013734 <HAL_PCDEx_LPM_Callback+0x68>)
 80136f2:	691b      	ldr	r3, [r3, #16]
 80136f4:	4a0f      	ldr	r2, [pc, #60]	; (8013734 <HAL_PCDEx_LPM_Callback+0x68>)
 80136f6:	f023 0306 	bic.w	r3, r3, #6
 80136fa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013702:	4618      	mov	r0, r3
 8013704:	f7fe fc66 	bl	8011fd4 <USBD_LL_Resume>
    break;
 8013708:	e010      	b.n	801372c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013710:	4618      	mov	r0, r3
 8013712:	f7fe fc49 	bl	8011fa8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801371e:	4b05      	ldr	r3, [pc, #20]	; (8013734 <HAL_PCDEx_LPM_Callback+0x68>)
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	4a04      	ldr	r2, [pc, #16]	; (8013734 <HAL_PCDEx_LPM_Callback+0x68>)
 8013724:	f043 0306 	orr.w	r3, r3, #6
 8013728:	6113      	str	r3, [r2, #16]
    break;
 801372a:	bf00      	nop
}
 801372c:	bf00      	nop
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	e000ed00 	.word	0xe000ed00

08013738 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013740:	4b03      	ldr	r3, [pc, #12]	; (8013750 <USBD_static_malloc+0x18>)
}
 8013742:	4618      	mov	r0, r3
 8013744:	370c      	adds	r7, #12
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	20002264 	.word	0x20002264

08013754 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]

}
 801375c:	bf00      	nop
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr

08013768 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b094      	sub	sp, #80	; 0x50
 801376c:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801376e:	f107 0318 	add.w	r3, r7, #24
 8013772:	2238      	movs	r2, #56	; 0x38
 8013774:	2100      	movs	r1, #0
 8013776:	4618      	mov	r0, r3
 8013778:	f000 f8a8 	bl	80138cc <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801377c:	1d3b      	adds	r3, r7, #4
 801377e:	2200      	movs	r2, #0
 8013780:	601a      	str	r2, [r3, #0]
 8013782:	605a      	str	r2, [r3, #4]
 8013784:	609a      	str	r2, [r3, #8]
 8013786:	60da      	str	r2, [r3, #12]
 8013788:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 801378a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801378e:	f7f7 fbc7 	bl	800af20 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8013792:	2322      	movs	r3, #34	; 0x22
 8013794:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013796:	f44f 7380 	mov.w	r3, #256	; 0x100
 801379a:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801379c:	2340      	movs	r3, #64	; 0x40
 801379e:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80137a0:	2301      	movs	r3, #1
 80137a2:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80137a4:	2302      	movs	r3, #2
 80137a6:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80137a8:	2302      	movs	r3, #2
 80137aa:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80137ac:	2301      	movs	r3, #1
 80137ae:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 80137b0:	2310      	movs	r3, #16
 80137b2:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80137b4:	2302      	movs	r3, #2
 80137b6:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80137b8:	2302      	movs	r3, #2
 80137ba:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80137bc:	2302      	movs	r3, #2
 80137be:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80137c0:	f107 0318 	add.w	r3, r7, #24
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f7 fc4f 	bl	800b068 <HAL_RCC_OscConfig>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 80137d0:	f7f1 fbb6 	bl	8004f40 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80137d4:	230f      	movs	r3, #15
 80137d6:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80137d8:	2303      	movs	r3, #3
 80137da:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80137dc:	2300      	movs	r3, #0
 80137de:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80137e0:	2300      	movs	r3, #0
 80137e2:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80137e4:	2300      	movs	r3, #0
 80137e6:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80137e8:	1d3b      	adds	r3, r7, #4
 80137ea:	2103      	movs	r1, #3
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f7 ff53 	bl	800b698 <HAL_RCC_ClockConfig>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d001      	beq.n	80137fc <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 80137f8:	f7f1 fba2 	bl	8004f40 <Error_Handler>
		  }

}
 80137fc:	bf00      	nop
 80137fe:	3750      	adds	r7, #80	; 0x50
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013804:	b480      	push	{r7}
 8013806:	b085      	sub	sp, #20
 8013808:	af00      	add	r7, sp, #0
 801380a:	4603      	mov	r3, r0
 801380c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801380e:	2300      	movs	r3, #0
 8013810:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013812:	79fb      	ldrb	r3, [r7, #7]
 8013814:	2b03      	cmp	r3, #3
 8013816:	d817      	bhi.n	8013848 <USBD_Get_USB_Status+0x44>
 8013818:	a201      	add	r2, pc, #4	; (adr r2, 8013820 <USBD_Get_USB_Status+0x1c>)
 801381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801381e:	bf00      	nop
 8013820:	08013831 	.word	0x08013831
 8013824:	08013837 	.word	0x08013837
 8013828:	0801383d 	.word	0x0801383d
 801382c:	08013843 	.word	0x08013843
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013830:	2300      	movs	r3, #0
 8013832:	73fb      	strb	r3, [r7, #15]
    break;
 8013834:	e00b      	b.n	801384e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013836:	2303      	movs	r3, #3
 8013838:	73fb      	strb	r3, [r7, #15]
    break;
 801383a:	e008      	b.n	801384e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801383c:	2301      	movs	r3, #1
 801383e:	73fb      	strb	r3, [r7, #15]
    break;
 8013840:	e005      	b.n	801384e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013842:	2303      	movs	r3, #3
 8013844:	73fb      	strb	r3, [r7, #15]
    break;
 8013846:	e002      	b.n	801384e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013848:	2303      	movs	r3, #3
 801384a:	73fb      	strb	r3, [r7, #15]
    break;
 801384c:	bf00      	nop
  }
  return usb_status;
 801384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3714      	adds	r7, #20
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr

0801385c <__errno>:
 801385c:	4b01      	ldr	r3, [pc, #4]	; (8013864 <__errno+0x8>)
 801385e:	6818      	ldr	r0, [r3, #0]
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	20000184 	.word	0x20000184

08013868 <__libc_init_array>:
 8013868:	b570      	push	{r4, r5, r6, lr}
 801386a:	4d0d      	ldr	r5, [pc, #52]	; (80138a0 <__libc_init_array+0x38>)
 801386c:	4c0d      	ldr	r4, [pc, #52]	; (80138a4 <__libc_init_array+0x3c>)
 801386e:	1b64      	subs	r4, r4, r5
 8013870:	10a4      	asrs	r4, r4, #2
 8013872:	2600      	movs	r6, #0
 8013874:	42a6      	cmp	r6, r4
 8013876:	d109      	bne.n	801388c <__libc_init_array+0x24>
 8013878:	4d0b      	ldr	r5, [pc, #44]	; (80138a8 <__libc_init_array+0x40>)
 801387a:	4c0c      	ldr	r4, [pc, #48]	; (80138ac <__libc_init_array+0x44>)
 801387c:	f002 fdc4 	bl	8016408 <_init>
 8013880:	1b64      	subs	r4, r4, r5
 8013882:	10a4      	asrs	r4, r4, #2
 8013884:	2600      	movs	r6, #0
 8013886:	42a6      	cmp	r6, r4
 8013888:	d105      	bne.n	8013896 <__libc_init_array+0x2e>
 801388a:	bd70      	pop	{r4, r5, r6, pc}
 801388c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013890:	4798      	blx	r3
 8013892:	3601      	adds	r6, #1
 8013894:	e7ee      	b.n	8013874 <__libc_init_array+0xc>
 8013896:	f855 3b04 	ldr.w	r3, [r5], #4
 801389a:	4798      	blx	r3
 801389c:	3601      	adds	r6, #1
 801389e:	e7f2      	b.n	8013886 <__libc_init_array+0x1e>
 80138a0:	08016dfc 	.word	0x08016dfc
 80138a4:	08016dfc 	.word	0x08016dfc
 80138a8:	08016dfc 	.word	0x08016dfc
 80138ac:	08016e00 	.word	0x08016e00

080138b0 <memcpy>:
 80138b0:	440a      	add	r2, r1
 80138b2:	4291      	cmp	r1, r2
 80138b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80138b8:	d100      	bne.n	80138bc <memcpy+0xc>
 80138ba:	4770      	bx	lr
 80138bc:	b510      	push	{r4, lr}
 80138be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138c6:	4291      	cmp	r1, r2
 80138c8:	d1f9      	bne.n	80138be <memcpy+0xe>
 80138ca:	bd10      	pop	{r4, pc}

080138cc <memset>:
 80138cc:	4402      	add	r2, r0
 80138ce:	4603      	mov	r3, r0
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d100      	bne.n	80138d6 <memset+0xa>
 80138d4:	4770      	bx	lr
 80138d6:	f803 1b01 	strb.w	r1, [r3], #1
 80138da:	e7f9      	b.n	80138d0 <memset+0x4>

080138dc <__cvt>:
 80138dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138e0:	ec55 4b10 	vmov	r4, r5, d0
 80138e4:	2d00      	cmp	r5, #0
 80138e6:	460e      	mov	r6, r1
 80138e8:	4619      	mov	r1, r3
 80138ea:	462b      	mov	r3, r5
 80138ec:	bfbb      	ittet	lt
 80138ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80138f2:	461d      	movlt	r5, r3
 80138f4:	2300      	movge	r3, #0
 80138f6:	232d      	movlt	r3, #45	; 0x2d
 80138f8:	700b      	strb	r3, [r1, #0]
 80138fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013900:	4691      	mov	r9, r2
 8013902:	f023 0820 	bic.w	r8, r3, #32
 8013906:	bfbc      	itt	lt
 8013908:	4622      	movlt	r2, r4
 801390a:	4614      	movlt	r4, r2
 801390c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013910:	d005      	beq.n	801391e <__cvt+0x42>
 8013912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013916:	d100      	bne.n	801391a <__cvt+0x3e>
 8013918:	3601      	adds	r6, #1
 801391a:	2102      	movs	r1, #2
 801391c:	e000      	b.n	8013920 <__cvt+0x44>
 801391e:	2103      	movs	r1, #3
 8013920:	ab03      	add	r3, sp, #12
 8013922:	9301      	str	r3, [sp, #4]
 8013924:	ab02      	add	r3, sp, #8
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	ec45 4b10 	vmov	d0, r4, r5
 801392c:	4653      	mov	r3, sl
 801392e:	4632      	mov	r2, r6
 8013930:	f000 fe1a 	bl	8014568 <_dtoa_r>
 8013934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013938:	4607      	mov	r7, r0
 801393a:	d102      	bne.n	8013942 <__cvt+0x66>
 801393c:	f019 0f01 	tst.w	r9, #1
 8013940:	d022      	beq.n	8013988 <__cvt+0xac>
 8013942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013946:	eb07 0906 	add.w	r9, r7, r6
 801394a:	d110      	bne.n	801396e <__cvt+0x92>
 801394c:	783b      	ldrb	r3, [r7, #0]
 801394e:	2b30      	cmp	r3, #48	; 0x30
 8013950:	d10a      	bne.n	8013968 <__cvt+0x8c>
 8013952:	2200      	movs	r2, #0
 8013954:	2300      	movs	r3, #0
 8013956:	4620      	mov	r0, r4
 8013958:	4629      	mov	r1, r5
 801395a:	f7ed f8dd 	bl	8000b18 <__aeabi_dcmpeq>
 801395e:	b918      	cbnz	r0, 8013968 <__cvt+0x8c>
 8013960:	f1c6 0601 	rsb	r6, r6, #1
 8013964:	f8ca 6000 	str.w	r6, [sl]
 8013968:	f8da 3000 	ldr.w	r3, [sl]
 801396c:	4499      	add	r9, r3
 801396e:	2200      	movs	r2, #0
 8013970:	2300      	movs	r3, #0
 8013972:	4620      	mov	r0, r4
 8013974:	4629      	mov	r1, r5
 8013976:	f7ed f8cf 	bl	8000b18 <__aeabi_dcmpeq>
 801397a:	b108      	cbz	r0, 8013980 <__cvt+0xa4>
 801397c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013980:	2230      	movs	r2, #48	; 0x30
 8013982:	9b03      	ldr	r3, [sp, #12]
 8013984:	454b      	cmp	r3, r9
 8013986:	d307      	bcc.n	8013998 <__cvt+0xbc>
 8013988:	9b03      	ldr	r3, [sp, #12]
 801398a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801398c:	1bdb      	subs	r3, r3, r7
 801398e:	4638      	mov	r0, r7
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	b004      	add	sp, #16
 8013994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013998:	1c59      	adds	r1, r3, #1
 801399a:	9103      	str	r1, [sp, #12]
 801399c:	701a      	strb	r2, [r3, #0]
 801399e:	e7f0      	b.n	8013982 <__cvt+0xa6>

080139a0 <__exponent>:
 80139a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139a2:	4603      	mov	r3, r0
 80139a4:	2900      	cmp	r1, #0
 80139a6:	bfb8      	it	lt
 80139a8:	4249      	neglt	r1, r1
 80139aa:	f803 2b02 	strb.w	r2, [r3], #2
 80139ae:	bfb4      	ite	lt
 80139b0:	222d      	movlt	r2, #45	; 0x2d
 80139b2:	222b      	movge	r2, #43	; 0x2b
 80139b4:	2909      	cmp	r1, #9
 80139b6:	7042      	strb	r2, [r0, #1]
 80139b8:	dd2a      	ble.n	8013a10 <__exponent+0x70>
 80139ba:	f10d 0407 	add.w	r4, sp, #7
 80139be:	46a4      	mov	ip, r4
 80139c0:	270a      	movs	r7, #10
 80139c2:	46a6      	mov	lr, r4
 80139c4:	460a      	mov	r2, r1
 80139c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80139ca:	fb07 1516 	mls	r5, r7, r6, r1
 80139ce:	3530      	adds	r5, #48	; 0x30
 80139d0:	2a63      	cmp	r2, #99	; 0x63
 80139d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80139d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80139da:	4631      	mov	r1, r6
 80139dc:	dcf1      	bgt.n	80139c2 <__exponent+0x22>
 80139de:	3130      	adds	r1, #48	; 0x30
 80139e0:	f1ae 0502 	sub.w	r5, lr, #2
 80139e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80139e8:	1c44      	adds	r4, r0, #1
 80139ea:	4629      	mov	r1, r5
 80139ec:	4561      	cmp	r1, ip
 80139ee:	d30a      	bcc.n	8013a06 <__exponent+0x66>
 80139f0:	f10d 0209 	add.w	r2, sp, #9
 80139f4:	eba2 020e 	sub.w	r2, r2, lr
 80139f8:	4565      	cmp	r5, ip
 80139fa:	bf88      	it	hi
 80139fc:	2200      	movhi	r2, #0
 80139fe:	4413      	add	r3, r2
 8013a00:	1a18      	subs	r0, r3, r0
 8013a02:	b003      	add	sp, #12
 8013a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013a0e:	e7ed      	b.n	80139ec <__exponent+0x4c>
 8013a10:	2330      	movs	r3, #48	; 0x30
 8013a12:	3130      	adds	r1, #48	; 0x30
 8013a14:	7083      	strb	r3, [r0, #2]
 8013a16:	70c1      	strb	r1, [r0, #3]
 8013a18:	1d03      	adds	r3, r0, #4
 8013a1a:	e7f1      	b.n	8013a00 <__exponent+0x60>

08013a1c <_printf_float>:
 8013a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a20:	ed2d 8b02 	vpush	{d8}
 8013a24:	b08d      	sub	sp, #52	; 0x34
 8013a26:	460c      	mov	r4, r1
 8013a28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013a2c:	4616      	mov	r6, r2
 8013a2e:	461f      	mov	r7, r3
 8013a30:	4605      	mov	r5, r0
 8013a32:	f001 fd3f 	bl	80154b4 <_localeconv_r>
 8013a36:	f8d0 a000 	ldr.w	sl, [r0]
 8013a3a:	4650      	mov	r0, sl
 8013a3c:	f7ec fbf0 	bl	8000220 <strlen>
 8013a40:	2300      	movs	r3, #0
 8013a42:	930a      	str	r3, [sp, #40]	; 0x28
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	9305      	str	r3, [sp, #20]
 8013a48:	f8d8 3000 	ldr.w	r3, [r8]
 8013a4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013a50:	3307      	adds	r3, #7
 8013a52:	f023 0307 	bic.w	r3, r3, #7
 8013a56:	f103 0208 	add.w	r2, r3, #8
 8013a5a:	f8c8 2000 	str.w	r2, [r8]
 8013a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013a66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013a6e:	9307      	str	r3, [sp, #28]
 8013a70:	f8cd 8018 	str.w	r8, [sp, #24]
 8013a74:	ee08 0a10 	vmov	s16, r0
 8013a78:	4b9f      	ldr	r3, [pc, #636]	; (8013cf8 <_printf_float+0x2dc>)
 8013a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a82:	f7ed f87b 	bl	8000b7c <__aeabi_dcmpun>
 8013a86:	bb88      	cbnz	r0, 8013aec <_printf_float+0xd0>
 8013a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a8c:	4b9a      	ldr	r3, [pc, #616]	; (8013cf8 <_printf_float+0x2dc>)
 8013a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a92:	f7ed f855 	bl	8000b40 <__aeabi_dcmple>
 8013a96:	bb48      	cbnz	r0, 8013aec <_printf_float+0xd0>
 8013a98:	2200      	movs	r2, #0
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	4640      	mov	r0, r8
 8013a9e:	4649      	mov	r1, r9
 8013aa0:	f7ed f844 	bl	8000b2c <__aeabi_dcmplt>
 8013aa4:	b110      	cbz	r0, 8013aac <_printf_float+0x90>
 8013aa6:	232d      	movs	r3, #45	; 0x2d
 8013aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013aac:	4b93      	ldr	r3, [pc, #588]	; (8013cfc <_printf_float+0x2e0>)
 8013aae:	4894      	ldr	r0, [pc, #592]	; (8013d00 <_printf_float+0x2e4>)
 8013ab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013ab4:	bf94      	ite	ls
 8013ab6:	4698      	movls	r8, r3
 8013ab8:	4680      	movhi	r8, r0
 8013aba:	2303      	movs	r3, #3
 8013abc:	6123      	str	r3, [r4, #16]
 8013abe:	9b05      	ldr	r3, [sp, #20]
 8013ac0:	f023 0204 	bic.w	r2, r3, #4
 8013ac4:	6022      	str	r2, [r4, #0]
 8013ac6:	f04f 0900 	mov.w	r9, #0
 8013aca:	9700      	str	r7, [sp, #0]
 8013acc:	4633      	mov	r3, r6
 8013ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	f000 f9d8 	bl	8013e88 <_printf_common>
 8013ad8:	3001      	adds	r0, #1
 8013ada:	f040 8090 	bne.w	8013bfe <_printf_float+0x1e2>
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae2:	b00d      	add	sp, #52	; 0x34
 8013ae4:	ecbd 8b02 	vpop	{d8}
 8013ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aec:	4642      	mov	r2, r8
 8013aee:	464b      	mov	r3, r9
 8013af0:	4640      	mov	r0, r8
 8013af2:	4649      	mov	r1, r9
 8013af4:	f7ed f842 	bl	8000b7c <__aeabi_dcmpun>
 8013af8:	b140      	cbz	r0, 8013b0c <_printf_float+0xf0>
 8013afa:	464b      	mov	r3, r9
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	bfbc      	itt	lt
 8013b00:	232d      	movlt	r3, #45	; 0x2d
 8013b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b06:	487f      	ldr	r0, [pc, #508]	; (8013d04 <_printf_float+0x2e8>)
 8013b08:	4b7f      	ldr	r3, [pc, #508]	; (8013d08 <_printf_float+0x2ec>)
 8013b0a:	e7d1      	b.n	8013ab0 <_printf_float+0x94>
 8013b0c:	6863      	ldr	r3, [r4, #4]
 8013b0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013b12:	9206      	str	r2, [sp, #24]
 8013b14:	1c5a      	adds	r2, r3, #1
 8013b16:	d13f      	bne.n	8013b98 <_printf_float+0x17c>
 8013b18:	2306      	movs	r3, #6
 8013b1a:	6063      	str	r3, [r4, #4]
 8013b1c:	9b05      	ldr	r3, [sp, #20]
 8013b1e:	6861      	ldr	r1, [r4, #4]
 8013b20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013b24:	2300      	movs	r3, #0
 8013b26:	9303      	str	r3, [sp, #12]
 8013b28:	ab0a      	add	r3, sp, #40	; 0x28
 8013b2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013b2e:	ab09      	add	r3, sp, #36	; 0x24
 8013b30:	ec49 8b10 	vmov	d0, r8, r9
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	6022      	str	r2, [r4, #0]
 8013b38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f7ff fecd 	bl	80138dc <__cvt>
 8013b42:	9b06      	ldr	r3, [sp, #24]
 8013b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b46:	2b47      	cmp	r3, #71	; 0x47
 8013b48:	4680      	mov	r8, r0
 8013b4a:	d108      	bne.n	8013b5e <_printf_float+0x142>
 8013b4c:	1cc8      	adds	r0, r1, #3
 8013b4e:	db02      	blt.n	8013b56 <_printf_float+0x13a>
 8013b50:	6863      	ldr	r3, [r4, #4]
 8013b52:	4299      	cmp	r1, r3
 8013b54:	dd41      	ble.n	8013bda <_printf_float+0x1be>
 8013b56:	f1ab 0b02 	sub.w	fp, fp, #2
 8013b5a:	fa5f fb8b 	uxtb.w	fp, fp
 8013b5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013b62:	d820      	bhi.n	8013ba6 <_printf_float+0x18a>
 8013b64:	3901      	subs	r1, #1
 8013b66:	465a      	mov	r2, fp
 8013b68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8013b6e:	f7ff ff17 	bl	80139a0 <__exponent>
 8013b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b74:	1813      	adds	r3, r2, r0
 8013b76:	2a01      	cmp	r2, #1
 8013b78:	4681      	mov	r9, r0
 8013b7a:	6123      	str	r3, [r4, #16]
 8013b7c:	dc02      	bgt.n	8013b84 <_printf_float+0x168>
 8013b7e:	6822      	ldr	r2, [r4, #0]
 8013b80:	07d2      	lsls	r2, r2, #31
 8013b82:	d501      	bpl.n	8013b88 <_printf_float+0x16c>
 8013b84:	3301      	adds	r3, #1
 8013b86:	6123      	str	r3, [r4, #16]
 8013b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d09c      	beq.n	8013aca <_printf_float+0xae>
 8013b90:	232d      	movs	r3, #45	; 0x2d
 8013b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b96:	e798      	b.n	8013aca <_printf_float+0xae>
 8013b98:	9a06      	ldr	r2, [sp, #24]
 8013b9a:	2a47      	cmp	r2, #71	; 0x47
 8013b9c:	d1be      	bne.n	8013b1c <_printf_float+0x100>
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d1bc      	bne.n	8013b1c <_printf_float+0x100>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e7b9      	b.n	8013b1a <_printf_float+0xfe>
 8013ba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013baa:	d118      	bne.n	8013bde <_printf_float+0x1c2>
 8013bac:	2900      	cmp	r1, #0
 8013bae:	6863      	ldr	r3, [r4, #4]
 8013bb0:	dd0b      	ble.n	8013bca <_printf_float+0x1ae>
 8013bb2:	6121      	str	r1, [r4, #16]
 8013bb4:	b913      	cbnz	r3, 8013bbc <_printf_float+0x1a0>
 8013bb6:	6822      	ldr	r2, [r4, #0]
 8013bb8:	07d0      	lsls	r0, r2, #31
 8013bba:	d502      	bpl.n	8013bc2 <_printf_float+0x1a6>
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	440b      	add	r3, r1
 8013bc0:	6123      	str	r3, [r4, #16]
 8013bc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8013bc4:	f04f 0900 	mov.w	r9, #0
 8013bc8:	e7de      	b.n	8013b88 <_printf_float+0x16c>
 8013bca:	b913      	cbnz	r3, 8013bd2 <_printf_float+0x1b6>
 8013bcc:	6822      	ldr	r2, [r4, #0]
 8013bce:	07d2      	lsls	r2, r2, #31
 8013bd0:	d501      	bpl.n	8013bd6 <_printf_float+0x1ba>
 8013bd2:	3302      	adds	r3, #2
 8013bd4:	e7f4      	b.n	8013bc0 <_printf_float+0x1a4>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	e7f2      	b.n	8013bc0 <_printf_float+0x1a4>
 8013bda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013be0:	4299      	cmp	r1, r3
 8013be2:	db05      	blt.n	8013bf0 <_printf_float+0x1d4>
 8013be4:	6823      	ldr	r3, [r4, #0]
 8013be6:	6121      	str	r1, [r4, #16]
 8013be8:	07d8      	lsls	r0, r3, #31
 8013bea:	d5ea      	bpl.n	8013bc2 <_printf_float+0x1a6>
 8013bec:	1c4b      	adds	r3, r1, #1
 8013bee:	e7e7      	b.n	8013bc0 <_printf_float+0x1a4>
 8013bf0:	2900      	cmp	r1, #0
 8013bf2:	bfd4      	ite	le
 8013bf4:	f1c1 0202 	rsble	r2, r1, #2
 8013bf8:	2201      	movgt	r2, #1
 8013bfa:	4413      	add	r3, r2
 8013bfc:	e7e0      	b.n	8013bc0 <_printf_float+0x1a4>
 8013bfe:	6823      	ldr	r3, [r4, #0]
 8013c00:	055a      	lsls	r2, r3, #21
 8013c02:	d407      	bmi.n	8013c14 <_printf_float+0x1f8>
 8013c04:	6923      	ldr	r3, [r4, #16]
 8013c06:	4642      	mov	r2, r8
 8013c08:	4631      	mov	r1, r6
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	47b8      	blx	r7
 8013c0e:	3001      	adds	r0, #1
 8013c10:	d12c      	bne.n	8013c6c <_printf_float+0x250>
 8013c12:	e764      	b.n	8013ade <_printf_float+0xc2>
 8013c14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c18:	f240 80e0 	bls.w	8013ddc <_printf_float+0x3c0>
 8013c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c20:	2200      	movs	r2, #0
 8013c22:	2300      	movs	r3, #0
 8013c24:	f7ec ff78 	bl	8000b18 <__aeabi_dcmpeq>
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	d034      	beq.n	8013c96 <_printf_float+0x27a>
 8013c2c:	4a37      	ldr	r2, [pc, #220]	; (8013d0c <_printf_float+0x2f0>)
 8013c2e:	2301      	movs	r3, #1
 8013c30:	4631      	mov	r1, r6
 8013c32:	4628      	mov	r0, r5
 8013c34:	47b8      	blx	r7
 8013c36:	3001      	adds	r0, #1
 8013c38:	f43f af51 	beq.w	8013ade <_printf_float+0xc2>
 8013c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c40:	429a      	cmp	r2, r3
 8013c42:	db02      	blt.n	8013c4a <_printf_float+0x22e>
 8013c44:	6823      	ldr	r3, [r4, #0]
 8013c46:	07d8      	lsls	r0, r3, #31
 8013c48:	d510      	bpl.n	8013c6c <_printf_float+0x250>
 8013c4a:	ee18 3a10 	vmov	r3, s16
 8013c4e:	4652      	mov	r2, sl
 8013c50:	4631      	mov	r1, r6
 8013c52:	4628      	mov	r0, r5
 8013c54:	47b8      	blx	r7
 8013c56:	3001      	adds	r0, #1
 8013c58:	f43f af41 	beq.w	8013ade <_printf_float+0xc2>
 8013c5c:	f04f 0800 	mov.w	r8, #0
 8013c60:	f104 091a 	add.w	r9, r4, #26
 8013c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c66:	3b01      	subs	r3, #1
 8013c68:	4543      	cmp	r3, r8
 8013c6a:	dc09      	bgt.n	8013c80 <_printf_float+0x264>
 8013c6c:	6823      	ldr	r3, [r4, #0]
 8013c6e:	079b      	lsls	r3, r3, #30
 8013c70:	f100 8105 	bmi.w	8013e7e <_printf_float+0x462>
 8013c74:	68e0      	ldr	r0, [r4, #12]
 8013c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c78:	4298      	cmp	r0, r3
 8013c7a:	bfb8      	it	lt
 8013c7c:	4618      	movlt	r0, r3
 8013c7e:	e730      	b.n	8013ae2 <_printf_float+0xc6>
 8013c80:	2301      	movs	r3, #1
 8013c82:	464a      	mov	r2, r9
 8013c84:	4631      	mov	r1, r6
 8013c86:	4628      	mov	r0, r5
 8013c88:	47b8      	blx	r7
 8013c8a:	3001      	adds	r0, #1
 8013c8c:	f43f af27 	beq.w	8013ade <_printf_float+0xc2>
 8013c90:	f108 0801 	add.w	r8, r8, #1
 8013c94:	e7e6      	b.n	8013c64 <_printf_float+0x248>
 8013c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	dc39      	bgt.n	8013d10 <_printf_float+0x2f4>
 8013c9c:	4a1b      	ldr	r2, [pc, #108]	; (8013d0c <_printf_float+0x2f0>)
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	4631      	mov	r1, r6
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	47b8      	blx	r7
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	f43f af19 	beq.w	8013ade <_printf_float+0xc2>
 8013cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	d102      	bne.n	8013cba <_printf_float+0x29e>
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	07d9      	lsls	r1, r3, #31
 8013cb8:	d5d8      	bpl.n	8013c6c <_printf_float+0x250>
 8013cba:	ee18 3a10 	vmov	r3, s16
 8013cbe:	4652      	mov	r2, sl
 8013cc0:	4631      	mov	r1, r6
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	47b8      	blx	r7
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	f43f af09 	beq.w	8013ade <_printf_float+0xc2>
 8013ccc:	f04f 0900 	mov.w	r9, #0
 8013cd0:	f104 0a1a 	add.w	sl, r4, #26
 8013cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cd6:	425b      	negs	r3, r3
 8013cd8:	454b      	cmp	r3, r9
 8013cda:	dc01      	bgt.n	8013ce0 <_printf_float+0x2c4>
 8013cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cde:	e792      	b.n	8013c06 <_printf_float+0x1ea>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	4652      	mov	r2, sl
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	47b8      	blx	r7
 8013cea:	3001      	adds	r0, #1
 8013cec:	f43f aef7 	beq.w	8013ade <_printf_float+0xc2>
 8013cf0:	f109 0901 	add.w	r9, r9, #1
 8013cf4:	e7ee      	b.n	8013cd4 <_printf_float+0x2b8>
 8013cf6:	bf00      	nop
 8013cf8:	7fefffff 	.word	0x7fefffff
 8013cfc:	08016a1c 	.word	0x08016a1c
 8013d00:	08016a20 	.word	0x08016a20
 8013d04:	08016a28 	.word	0x08016a28
 8013d08:	08016a24 	.word	0x08016a24
 8013d0c:	08016a2c 	.word	0x08016a2c
 8013d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d14:	429a      	cmp	r2, r3
 8013d16:	bfa8      	it	ge
 8013d18:	461a      	movge	r2, r3
 8013d1a:	2a00      	cmp	r2, #0
 8013d1c:	4691      	mov	r9, r2
 8013d1e:	dc37      	bgt.n	8013d90 <_printf_float+0x374>
 8013d20:	f04f 0b00 	mov.w	fp, #0
 8013d24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d28:	f104 021a 	add.w	r2, r4, #26
 8013d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d2e:	9305      	str	r3, [sp, #20]
 8013d30:	eba3 0309 	sub.w	r3, r3, r9
 8013d34:	455b      	cmp	r3, fp
 8013d36:	dc33      	bgt.n	8013da0 <_printf_float+0x384>
 8013d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	db3b      	blt.n	8013db8 <_printf_float+0x39c>
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	07da      	lsls	r2, r3, #31
 8013d44:	d438      	bmi.n	8013db8 <_printf_float+0x39c>
 8013d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d48:	9a05      	ldr	r2, [sp, #20]
 8013d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d4c:	1a9a      	subs	r2, r3, r2
 8013d4e:	eba3 0901 	sub.w	r9, r3, r1
 8013d52:	4591      	cmp	r9, r2
 8013d54:	bfa8      	it	ge
 8013d56:	4691      	movge	r9, r2
 8013d58:	f1b9 0f00 	cmp.w	r9, #0
 8013d5c:	dc35      	bgt.n	8013dca <_printf_float+0x3ae>
 8013d5e:	f04f 0800 	mov.w	r8, #0
 8013d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d66:	f104 0a1a 	add.w	sl, r4, #26
 8013d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d6e:	1a9b      	subs	r3, r3, r2
 8013d70:	eba3 0309 	sub.w	r3, r3, r9
 8013d74:	4543      	cmp	r3, r8
 8013d76:	f77f af79 	ble.w	8013c6c <_printf_float+0x250>
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	4652      	mov	r2, sl
 8013d7e:	4631      	mov	r1, r6
 8013d80:	4628      	mov	r0, r5
 8013d82:	47b8      	blx	r7
 8013d84:	3001      	adds	r0, #1
 8013d86:	f43f aeaa 	beq.w	8013ade <_printf_float+0xc2>
 8013d8a:	f108 0801 	add.w	r8, r8, #1
 8013d8e:	e7ec      	b.n	8013d6a <_printf_float+0x34e>
 8013d90:	4613      	mov	r3, r2
 8013d92:	4631      	mov	r1, r6
 8013d94:	4642      	mov	r2, r8
 8013d96:	4628      	mov	r0, r5
 8013d98:	47b8      	blx	r7
 8013d9a:	3001      	adds	r0, #1
 8013d9c:	d1c0      	bne.n	8013d20 <_printf_float+0x304>
 8013d9e:	e69e      	b.n	8013ade <_printf_float+0xc2>
 8013da0:	2301      	movs	r3, #1
 8013da2:	4631      	mov	r1, r6
 8013da4:	4628      	mov	r0, r5
 8013da6:	9205      	str	r2, [sp, #20]
 8013da8:	47b8      	blx	r7
 8013daa:	3001      	adds	r0, #1
 8013dac:	f43f ae97 	beq.w	8013ade <_printf_float+0xc2>
 8013db0:	9a05      	ldr	r2, [sp, #20]
 8013db2:	f10b 0b01 	add.w	fp, fp, #1
 8013db6:	e7b9      	b.n	8013d2c <_printf_float+0x310>
 8013db8:	ee18 3a10 	vmov	r3, s16
 8013dbc:	4652      	mov	r2, sl
 8013dbe:	4631      	mov	r1, r6
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	47b8      	blx	r7
 8013dc4:	3001      	adds	r0, #1
 8013dc6:	d1be      	bne.n	8013d46 <_printf_float+0x32a>
 8013dc8:	e689      	b.n	8013ade <_printf_float+0xc2>
 8013dca:	9a05      	ldr	r2, [sp, #20]
 8013dcc:	464b      	mov	r3, r9
 8013dce:	4442      	add	r2, r8
 8013dd0:	4631      	mov	r1, r6
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	47b8      	blx	r7
 8013dd6:	3001      	adds	r0, #1
 8013dd8:	d1c1      	bne.n	8013d5e <_printf_float+0x342>
 8013dda:	e680      	b.n	8013ade <_printf_float+0xc2>
 8013ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dde:	2a01      	cmp	r2, #1
 8013de0:	dc01      	bgt.n	8013de6 <_printf_float+0x3ca>
 8013de2:	07db      	lsls	r3, r3, #31
 8013de4:	d538      	bpl.n	8013e58 <_printf_float+0x43c>
 8013de6:	2301      	movs	r3, #1
 8013de8:	4642      	mov	r2, r8
 8013dea:	4631      	mov	r1, r6
 8013dec:	4628      	mov	r0, r5
 8013dee:	47b8      	blx	r7
 8013df0:	3001      	adds	r0, #1
 8013df2:	f43f ae74 	beq.w	8013ade <_printf_float+0xc2>
 8013df6:	ee18 3a10 	vmov	r3, s16
 8013dfa:	4652      	mov	r2, sl
 8013dfc:	4631      	mov	r1, r6
 8013dfe:	4628      	mov	r0, r5
 8013e00:	47b8      	blx	r7
 8013e02:	3001      	adds	r0, #1
 8013e04:	f43f ae6b 	beq.w	8013ade <_printf_float+0xc2>
 8013e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f7ec fe82 	bl	8000b18 <__aeabi_dcmpeq>
 8013e14:	b9d8      	cbnz	r0, 8013e4e <_printf_float+0x432>
 8013e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e18:	f108 0201 	add.w	r2, r8, #1
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	4631      	mov	r1, r6
 8013e20:	4628      	mov	r0, r5
 8013e22:	47b8      	blx	r7
 8013e24:	3001      	adds	r0, #1
 8013e26:	d10e      	bne.n	8013e46 <_printf_float+0x42a>
 8013e28:	e659      	b.n	8013ade <_printf_float+0xc2>
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	4652      	mov	r2, sl
 8013e2e:	4631      	mov	r1, r6
 8013e30:	4628      	mov	r0, r5
 8013e32:	47b8      	blx	r7
 8013e34:	3001      	adds	r0, #1
 8013e36:	f43f ae52 	beq.w	8013ade <_printf_float+0xc2>
 8013e3a:	f108 0801 	add.w	r8, r8, #1
 8013e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e40:	3b01      	subs	r3, #1
 8013e42:	4543      	cmp	r3, r8
 8013e44:	dcf1      	bgt.n	8013e2a <_printf_float+0x40e>
 8013e46:	464b      	mov	r3, r9
 8013e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013e4c:	e6dc      	b.n	8013c08 <_printf_float+0x1ec>
 8013e4e:	f04f 0800 	mov.w	r8, #0
 8013e52:	f104 0a1a 	add.w	sl, r4, #26
 8013e56:	e7f2      	b.n	8013e3e <_printf_float+0x422>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4642      	mov	r2, r8
 8013e5c:	e7df      	b.n	8013e1e <_printf_float+0x402>
 8013e5e:	2301      	movs	r3, #1
 8013e60:	464a      	mov	r2, r9
 8013e62:	4631      	mov	r1, r6
 8013e64:	4628      	mov	r0, r5
 8013e66:	47b8      	blx	r7
 8013e68:	3001      	adds	r0, #1
 8013e6a:	f43f ae38 	beq.w	8013ade <_printf_float+0xc2>
 8013e6e:	f108 0801 	add.w	r8, r8, #1
 8013e72:	68e3      	ldr	r3, [r4, #12]
 8013e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e76:	1a5b      	subs	r3, r3, r1
 8013e78:	4543      	cmp	r3, r8
 8013e7a:	dcf0      	bgt.n	8013e5e <_printf_float+0x442>
 8013e7c:	e6fa      	b.n	8013c74 <_printf_float+0x258>
 8013e7e:	f04f 0800 	mov.w	r8, #0
 8013e82:	f104 0919 	add.w	r9, r4, #25
 8013e86:	e7f4      	b.n	8013e72 <_printf_float+0x456>

08013e88 <_printf_common>:
 8013e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e8c:	4616      	mov	r6, r2
 8013e8e:	4699      	mov	r9, r3
 8013e90:	688a      	ldr	r2, [r1, #8]
 8013e92:	690b      	ldr	r3, [r1, #16]
 8013e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	bfb8      	it	lt
 8013e9c:	4613      	movlt	r3, r2
 8013e9e:	6033      	str	r3, [r6, #0]
 8013ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ea4:	4607      	mov	r7, r0
 8013ea6:	460c      	mov	r4, r1
 8013ea8:	b10a      	cbz	r2, 8013eae <_printf_common+0x26>
 8013eaa:	3301      	adds	r3, #1
 8013eac:	6033      	str	r3, [r6, #0]
 8013eae:	6823      	ldr	r3, [r4, #0]
 8013eb0:	0699      	lsls	r1, r3, #26
 8013eb2:	bf42      	ittt	mi
 8013eb4:	6833      	ldrmi	r3, [r6, #0]
 8013eb6:	3302      	addmi	r3, #2
 8013eb8:	6033      	strmi	r3, [r6, #0]
 8013eba:	6825      	ldr	r5, [r4, #0]
 8013ebc:	f015 0506 	ands.w	r5, r5, #6
 8013ec0:	d106      	bne.n	8013ed0 <_printf_common+0x48>
 8013ec2:	f104 0a19 	add.w	sl, r4, #25
 8013ec6:	68e3      	ldr	r3, [r4, #12]
 8013ec8:	6832      	ldr	r2, [r6, #0]
 8013eca:	1a9b      	subs	r3, r3, r2
 8013ecc:	42ab      	cmp	r3, r5
 8013ece:	dc26      	bgt.n	8013f1e <_printf_common+0x96>
 8013ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ed4:	1e13      	subs	r3, r2, #0
 8013ed6:	6822      	ldr	r2, [r4, #0]
 8013ed8:	bf18      	it	ne
 8013eda:	2301      	movne	r3, #1
 8013edc:	0692      	lsls	r2, r2, #26
 8013ede:	d42b      	bmi.n	8013f38 <_printf_common+0xb0>
 8013ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	4638      	mov	r0, r7
 8013ee8:	47c0      	blx	r8
 8013eea:	3001      	adds	r0, #1
 8013eec:	d01e      	beq.n	8013f2c <_printf_common+0xa4>
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	68e5      	ldr	r5, [r4, #12]
 8013ef2:	6832      	ldr	r2, [r6, #0]
 8013ef4:	f003 0306 	and.w	r3, r3, #6
 8013ef8:	2b04      	cmp	r3, #4
 8013efa:	bf08      	it	eq
 8013efc:	1aad      	subeq	r5, r5, r2
 8013efe:	68a3      	ldr	r3, [r4, #8]
 8013f00:	6922      	ldr	r2, [r4, #16]
 8013f02:	bf0c      	ite	eq
 8013f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f08:	2500      	movne	r5, #0
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	bfc4      	itt	gt
 8013f0e:	1a9b      	subgt	r3, r3, r2
 8013f10:	18ed      	addgt	r5, r5, r3
 8013f12:	2600      	movs	r6, #0
 8013f14:	341a      	adds	r4, #26
 8013f16:	42b5      	cmp	r5, r6
 8013f18:	d11a      	bne.n	8013f50 <_printf_common+0xc8>
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	e008      	b.n	8013f30 <_printf_common+0xa8>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	4652      	mov	r2, sl
 8013f22:	4649      	mov	r1, r9
 8013f24:	4638      	mov	r0, r7
 8013f26:	47c0      	blx	r8
 8013f28:	3001      	adds	r0, #1
 8013f2a:	d103      	bne.n	8013f34 <_printf_common+0xac>
 8013f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f34:	3501      	adds	r5, #1
 8013f36:	e7c6      	b.n	8013ec6 <_printf_common+0x3e>
 8013f38:	18e1      	adds	r1, r4, r3
 8013f3a:	1c5a      	adds	r2, r3, #1
 8013f3c:	2030      	movs	r0, #48	; 0x30
 8013f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f42:	4422      	add	r2, r4
 8013f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f4c:	3302      	adds	r3, #2
 8013f4e:	e7c7      	b.n	8013ee0 <_printf_common+0x58>
 8013f50:	2301      	movs	r3, #1
 8013f52:	4622      	mov	r2, r4
 8013f54:	4649      	mov	r1, r9
 8013f56:	4638      	mov	r0, r7
 8013f58:	47c0      	blx	r8
 8013f5a:	3001      	adds	r0, #1
 8013f5c:	d0e6      	beq.n	8013f2c <_printf_common+0xa4>
 8013f5e:	3601      	adds	r6, #1
 8013f60:	e7d9      	b.n	8013f16 <_printf_common+0x8e>
	...

08013f64 <_printf_i>:
 8013f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f68:	7e0f      	ldrb	r7, [r1, #24]
 8013f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f6c:	2f78      	cmp	r7, #120	; 0x78
 8013f6e:	4691      	mov	r9, r2
 8013f70:	4680      	mov	r8, r0
 8013f72:	460c      	mov	r4, r1
 8013f74:	469a      	mov	sl, r3
 8013f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f7a:	d807      	bhi.n	8013f8c <_printf_i+0x28>
 8013f7c:	2f62      	cmp	r7, #98	; 0x62
 8013f7e:	d80a      	bhi.n	8013f96 <_printf_i+0x32>
 8013f80:	2f00      	cmp	r7, #0
 8013f82:	f000 80d8 	beq.w	8014136 <_printf_i+0x1d2>
 8013f86:	2f58      	cmp	r7, #88	; 0x58
 8013f88:	f000 80a3 	beq.w	80140d2 <_printf_i+0x16e>
 8013f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f94:	e03a      	b.n	801400c <_printf_i+0xa8>
 8013f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f9a:	2b15      	cmp	r3, #21
 8013f9c:	d8f6      	bhi.n	8013f8c <_printf_i+0x28>
 8013f9e:	a101      	add	r1, pc, #4	; (adr r1, 8013fa4 <_printf_i+0x40>)
 8013fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fa4:	08013ffd 	.word	0x08013ffd
 8013fa8:	08014011 	.word	0x08014011
 8013fac:	08013f8d 	.word	0x08013f8d
 8013fb0:	08013f8d 	.word	0x08013f8d
 8013fb4:	08013f8d 	.word	0x08013f8d
 8013fb8:	08013f8d 	.word	0x08013f8d
 8013fbc:	08014011 	.word	0x08014011
 8013fc0:	08013f8d 	.word	0x08013f8d
 8013fc4:	08013f8d 	.word	0x08013f8d
 8013fc8:	08013f8d 	.word	0x08013f8d
 8013fcc:	08013f8d 	.word	0x08013f8d
 8013fd0:	0801411d 	.word	0x0801411d
 8013fd4:	08014041 	.word	0x08014041
 8013fd8:	080140ff 	.word	0x080140ff
 8013fdc:	08013f8d 	.word	0x08013f8d
 8013fe0:	08013f8d 	.word	0x08013f8d
 8013fe4:	0801413f 	.word	0x0801413f
 8013fe8:	08013f8d 	.word	0x08013f8d
 8013fec:	08014041 	.word	0x08014041
 8013ff0:	08013f8d 	.word	0x08013f8d
 8013ff4:	08013f8d 	.word	0x08013f8d
 8013ff8:	08014107 	.word	0x08014107
 8013ffc:	682b      	ldr	r3, [r5, #0]
 8013ffe:	1d1a      	adds	r2, r3, #4
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	602a      	str	r2, [r5, #0]
 8014004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801400c:	2301      	movs	r3, #1
 801400e:	e0a3      	b.n	8014158 <_printf_i+0x1f4>
 8014010:	6820      	ldr	r0, [r4, #0]
 8014012:	6829      	ldr	r1, [r5, #0]
 8014014:	0606      	lsls	r6, r0, #24
 8014016:	f101 0304 	add.w	r3, r1, #4
 801401a:	d50a      	bpl.n	8014032 <_printf_i+0xce>
 801401c:	680e      	ldr	r6, [r1, #0]
 801401e:	602b      	str	r3, [r5, #0]
 8014020:	2e00      	cmp	r6, #0
 8014022:	da03      	bge.n	801402c <_printf_i+0xc8>
 8014024:	232d      	movs	r3, #45	; 0x2d
 8014026:	4276      	negs	r6, r6
 8014028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801402c:	485e      	ldr	r0, [pc, #376]	; (80141a8 <_printf_i+0x244>)
 801402e:	230a      	movs	r3, #10
 8014030:	e019      	b.n	8014066 <_printf_i+0x102>
 8014032:	680e      	ldr	r6, [r1, #0]
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	f010 0f40 	tst.w	r0, #64	; 0x40
 801403a:	bf18      	it	ne
 801403c:	b236      	sxthne	r6, r6
 801403e:	e7ef      	b.n	8014020 <_printf_i+0xbc>
 8014040:	682b      	ldr	r3, [r5, #0]
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	1d19      	adds	r1, r3, #4
 8014046:	6029      	str	r1, [r5, #0]
 8014048:	0601      	lsls	r1, r0, #24
 801404a:	d501      	bpl.n	8014050 <_printf_i+0xec>
 801404c:	681e      	ldr	r6, [r3, #0]
 801404e:	e002      	b.n	8014056 <_printf_i+0xf2>
 8014050:	0646      	lsls	r6, r0, #25
 8014052:	d5fb      	bpl.n	801404c <_printf_i+0xe8>
 8014054:	881e      	ldrh	r6, [r3, #0]
 8014056:	4854      	ldr	r0, [pc, #336]	; (80141a8 <_printf_i+0x244>)
 8014058:	2f6f      	cmp	r7, #111	; 0x6f
 801405a:	bf0c      	ite	eq
 801405c:	2308      	moveq	r3, #8
 801405e:	230a      	movne	r3, #10
 8014060:	2100      	movs	r1, #0
 8014062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014066:	6865      	ldr	r5, [r4, #4]
 8014068:	60a5      	str	r5, [r4, #8]
 801406a:	2d00      	cmp	r5, #0
 801406c:	bfa2      	ittt	ge
 801406e:	6821      	ldrge	r1, [r4, #0]
 8014070:	f021 0104 	bicge.w	r1, r1, #4
 8014074:	6021      	strge	r1, [r4, #0]
 8014076:	b90e      	cbnz	r6, 801407c <_printf_i+0x118>
 8014078:	2d00      	cmp	r5, #0
 801407a:	d04d      	beq.n	8014118 <_printf_i+0x1b4>
 801407c:	4615      	mov	r5, r2
 801407e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014082:	fb03 6711 	mls	r7, r3, r1, r6
 8014086:	5dc7      	ldrb	r7, [r0, r7]
 8014088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801408c:	4637      	mov	r7, r6
 801408e:	42bb      	cmp	r3, r7
 8014090:	460e      	mov	r6, r1
 8014092:	d9f4      	bls.n	801407e <_printf_i+0x11a>
 8014094:	2b08      	cmp	r3, #8
 8014096:	d10b      	bne.n	80140b0 <_printf_i+0x14c>
 8014098:	6823      	ldr	r3, [r4, #0]
 801409a:	07de      	lsls	r6, r3, #31
 801409c:	d508      	bpl.n	80140b0 <_printf_i+0x14c>
 801409e:	6923      	ldr	r3, [r4, #16]
 80140a0:	6861      	ldr	r1, [r4, #4]
 80140a2:	4299      	cmp	r1, r3
 80140a4:	bfde      	ittt	le
 80140a6:	2330      	movle	r3, #48	; 0x30
 80140a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140b0:	1b52      	subs	r2, r2, r5
 80140b2:	6122      	str	r2, [r4, #16]
 80140b4:	f8cd a000 	str.w	sl, [sp]
 80140b8:	464b      	mov	r3, r9
 80140ba:	aa03      	add	r2, sp, #12
 80140bc:	4621      	mov	r1, r4
 80140be:	4640      	mov	r0, r8
 80140c0:	f7ff fee2 	bl	8013e88 <_printf_common>
 80140c4:	3001      	adds	r0, #1
 80140c6:	d14c      	bne.n	8014162 <_printf_i+0x1fe>
 80140c8:	f04f 30ff 	mov.w	r0, #4294967295
 80140cc:	b004      	add	sp, #16
 80140ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d2:	4835      	ldr	r0, [pc, #212]	; (80141a8 <_printf_i+0x244>)
 80140d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140d8:	6829      	ldr	r1, [r5, #0]
 80140da:	6823      	ldr	r3, [r4, #0]
 80140dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80140e0:	6029      	str	r1, [r5, #0]
 80140e2:	061d      	lsls	r5, r3, #24
 80140e4:	d514      	bpl.n	8014110 <_printf_i+0x1ac>
 80140e6:	07df      	lsls	r7, r3, #31
 80140e8:	bf44      	itt	mi
 80140ea:	f043 0320 	orrmi.w	r3, r3, #32
 80140ee:	6023      	strmi	r3, [r4, #0]
 80140f0:	b91e      	cbnz	r6, 80140fa <_printf_i+0x196>
 80140f2:	6823      	ldr	r3, [r4, #0]
 80140f4:	f023 0320 	bic.w	r3, r3, #32
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	2310      	movs	r3, #16
 80140fc:	e7b0      	b.n	8014060 <_printf_i+0xfc>
 80140fe:	6823      	ldr	r3, [r4, #0]
 8014100:	f043 0320 	orr.w	r3, r3, #32
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	2378      	movs	r3, #120	; 0x78
 8014108:	4828      	ldr	r0, [pc, #160]	; (80141ac <_printf_i+0x248>)
 801410a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801410e:	e7e3      	b.n	80140d8 <_printf_i+0x174>
 8014110:	0659      	lsls	r1, r3, #25
 8014112:	bf48      	it	mi
 8014114:	b2b6      	uxthmi	r6, r6
 8014116:	e7e6      	b.n	80140e6 <_printf_i+0x182>
 8014118:	4615      	mov	r5, r2
 801411a:	e7bb      	b.n	8014094 <_printf_i+0x130>
 801411c:	682b      	ldr	r3, [r5, #0]
 801411e:	6826      	ldr	r6, [r4, #0]
 8014120:	6961      	ldr	r1, [r4, #20]
 8014122:	1d18      	adds	r0, r3, #4
 8014124:	6028      	str	r0, [r5, #0]
 8014126:	0635      	lsls	r5, r6, #24
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	d501      	bpl.n	8014130 <_printf_i+0x1cc>
 801412c:	6019      	str	r1, [r3, #0]
 801412e:	e002      	b.n	8014136 <_printf_i+0x1d2>
 8014130:	0670      	lsls	r0, r6, #25
 8014132:	d5fb      	bpl.n	801412c <_printf_i+0x1c8>
 8014134:	8019      	strh	r1, [r3, #0]
 8014136:	2300      	movs	r3, #0
 8014138:	6123      	str	r3, [r4, #16]
 801413a:	4615      	mov	r5, r2
 801413c:	e7ba      	b.n	80140b4 <_printf_i+0x150>
 801413e:	682b      	ldr	r3, [r5, #0]
 8014140:	1d1a      	adds	r2, r3, #4
 8014142:	602a      	str	r2, [r5, #0]
 8014144:	681d      	ldr	r5, [r3, #0]
 8014146:	6862      	ldr	r2, [r4, #4]
 8014148:	2100      	movs	r1, #0
 801414a:	4628      	mov	r0, r5
 801414c:	f7ec f870 	bl	8000230 <memchr>
 8014150:	b108      	cbz	r0, 8014156 <_printf_i+0x1f2>
 8014152:	1b40      	subs	r0, r0, r5
 8014154:	6060      	str	r0, [r4, #4]
 8014156:	6863      	ldr	r3, [r4, #4]
 8014158:	6123      	str	r3, [r4, #16]
 801415a:	2300      	movs	r3, #0
 801415c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014160:	e7a8      	b.n	80140b4 <_printf_i+0x150>
 8014162:	6923      	ldr	r3, [r4, #16]
 8014164:	462a      	mov	r2, r5
 8014166:	4649      	mov	r1, r9
 8014168:	4640      	mov	r0, r8
 801416a:	47d0      	blx	sl
 801416c:	3001      	adds	r0, #1
 801416e:	d0ab      	beq.n	80140c8 <_printf_i+0x164>
 8014170:	6823      	ldr	r3, [r4, #0]
 8014172:	079b      	lsls	r3, r3, #30
 8014174:	d413      	bmi.n	801419e <_printf_i+0x23a>
 8014176:	68e0      	ldr	r0, [r4, #12]
 8014178:	9b03      	ldr	r3, [sp, #12]
 801417a:	4298      	cmp	r0, r3
 801417c:	bfb8      	it	lt
 801417e:	4618      	movlt	r0, r3
 8014180:	e7a4      	b.n	80140cc <_printf_i+0x168>
 8014182:	2301      	movs	r3, #1
 8014184:	4632      	mov	r2, r6
 8014186:	4649      	mov	r1, r9
 8014188:	4640      	mov	r0, r8
 801418a:	47d0      	blx	sl
 801418c:	3001      	adds	r0, #1
 801418e:	d09b      	beq.n	80140c8 <_printf_i+0x164>
 8014190:	3501      	adds	r5, #1
 8014192:	68e3      	ldr	r3, [r4, #12]
 8014194:	9903      	ldr	r1, [sp, #12]
 8014196:	1a5b      	subs	r3, r3, r1
 8014198:	42ab      	cmp	r3, r5
 801419a:	dcf2      	bgt.n	8014182 <_printf_i+0x21e>
 801419c:	e7eb      	b.n	8014176 <_printf_i+0x212>
 801419e:	2500      	movs	r5, #0
 80141a0:	f104 0619 	add.w	r6, r4, #25
 80141a4:	e7f5      	b.n	8014192 <_printf_i+0x22e>
 80141a6:	bf00      	nop
 80141a8:	08016a2e 	.word	0x08016a2e
 80141ac:	08016a3f 	.word	0x08016a3f

080141b0 <iprintf>:
 80141b0:	b40f      	push	{r0, r1, r2, r3}
 80141b2:	4b0a      	ldr	r3, [pc, #40]	; (80141dc <iprintf+0x2c>)
 80141b4:	b513      	push	{r0, r1, r4, lr}
 80141b6:	681c      	ldr	r4, [r3, #0]
 80141b8:	b124      	cbz	r4, 80141c4 <iprintf+0x14>
 80141ba:	69a3      	ldr	r3, [r4, #24]
 80141bc:	b913      	cbnz	r3, 80141c4 <iprintf+0x14>
 80141be:	4620      	mov	r0, r4
 80141c0:	f001 f8da 	bl	8015378 <__sinit>
 80141c4:	ab05      	add	r3, sp, #20
 80141c6:	9a04      	ldr	r2, [sp, #16]
 80141c8:	68a1      	ldr	r1, [r4, #8]
 80141ca:	9301      	str	r3, [sp, #4]
 80141cc:	4620      	mov	r0, r4
 80141ce:	f001 fe89 	bl	8015ee4 <_vfiprintf_r>
 80141d2:	b002      	add	sp, #8
 80141d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141d8:	b004      	add	sp, #16
 80141da:	4770      	bx	lr
 80141dc:	20000184 	.word	0x20000184

080141e0 <_puts_r>:
 80141e0:	b570      	push	{r4, r5, r6, lr}
 80141e2:	460e      	mov	r6, r1
 80141e4:	4605      	mov	r5, r0
 80141e6:	b118      	cbz	r0, 80141f0 <_puts_r+0x10>
 80141e8:	6983      	ldr	r3, [r0, #24]
 80141ea:	b90b      	cbnz	r3, 80141f0 <_puts_r+0x10>
 80141ec:	f001 f8c4 	bl	8015378 <__sinit>
 80141f0:	69ab      	ldr	r3, [r5, #24]
 80141f2:	68ac      	ldr	r4, [r5, #8]
 80141f4:	b913      	cbnz	r3, 80141fc <_puts_r+0x1c>
 80141f6:	4628      	mov	r0, r5
 80141f8:	f001 f8be 	bl	8015378 <__sinit>
 80141fc:	4b2c      	ldr	r3, [pc, #176]	; (80142b0 <_puts_r+0xd0>)
 80141fe:	429c      	cmp	r4, r3
 8014200:	d120      	bne.n	8014244 <_puts_r+0x64>
 8014202:	686c      	ldr	r4, [r5, #4]
 8014204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014206:	07db      	lsls	r3, r3, #31
 8014208:	d405      	bmi.n	8014216 <_puts_r+0x36>
 801420a:	89a3      	ldrh	r3, [r4, #12]
 801420c:	0598      	lsls	r0, r3, #22
 801420e:	d402      	bmi.n	8014216 <_puts_r+0x36>
 8014210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014212:	f001 f954 	bl	80154be <__retarget_lock_acquire_recursive>
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	0719      	lsls	r1, r3, #28
 801421a:	d51d      	bpl.n	8014258 <_puts_r+0x78>
 801421c:	6923      	ldr	r3, [r4, #16]
 801421e:	b1db      	cbz	r3, 8014258 <_puts_r+0x78>
 8014220:	3e01      	subs	r6, #1
 8014222:	68a3      	ldr	r3, [r4, #8]
 8014224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014228:	3b01      	subs	r3, #1
 801422a:	60a3      	str	r3, [r4, #8]
 801422c:	bb39      	cbnz	r1, 801427e <_puts_r+0x9e>
 801422e:	2b00      	cmp	r3, #0
 8014230:	da38      	bge.n	80142a4 <_puts_r+0xc4>
 8014232:	4622      	mov	r2, r4
 8014234:	210a      	movs	r1, #10
 8014236:	4628      	mov	r0, r5
 8014238:	f000 f848 	bl	80142cc <__swbuf_r>
 801423c:	3001      	adds	r0, #1
 801423e:	d011      	beq.n	8014264 <_puts_r+0x84>
 8014240:	250a      	movs	r5, #10
 8014242:	e011      	b.n	8014268 <_puts_r+0x88>
 8014244:	4b1b      	ldr	r3, [pc, #108]	; (80142b4 <_puts_r+0xd4>)
 8014246:	429c      	cmp	r4, r3
 8014248:	d101      	bne.n	801424e <_puts_r+0x6e>
 801424a:	68ac      	ldr	r4, [r5, #8]
 801424c:	e7da      	b.n	8014204 <_puts_r+0x24>
 801424e:	4b1a      	ldr	r3, [pc, #104]	; (80142b8 <_puts_r+0xd8>)
 8014250:	429c      	cmp	r4, r3
 8014252:	bf08      	it	eq
 8014254:	68ec      	ldreq	r4, [r5, #12]
 8014256:	e7d5      	b.n	8014204 <_puts_r+0x24>
 8014258:	4621      	mov	r1, r4
 801425a:	4628      	mov	r0, r5
 801425c:	f000 f888 	bl	8014370 <__swsetup_r>
 8014260:	2800      	cmp	r0, #0
 8014262:	d0dd      	beq.n	8014220 <_puts_r+0x40>
 8014264:	f04f 35ff 	mov.w	r5, #4294967295
 8014268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801426a:	07da      	lsls	r2, r3, #31
 801426c:	d405      	bmi.n	801427a <_puts_r+0x9a>
 801426e:	89a3      	ldrh	r3, [r4, #12]
 8014270:	059b      	lsls	r3, r3, #22
 8014272:	d402      	bmi.n	801427a <_puts_r+0x9a>
 8014274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014276:	f001 f923 	bl	80154c0 <__retarget_lock_release_recursive>
 801427a:	4628      	mov	r0, r5
 801427c:	bd70      	pop	{r4, r5, r6, pc}
 801427e:	2b00      	cmp	r3, #0
 8014280:	da04      	bge.n	801428c <_puts_r+0xac>
 8014282:	69a2      	ldr	r2, [r4, #24]
 8014284:	429a      	cmp	r2, r3
 8014286:	dc06      	bgt.n	8014296 <_puts_r+0xb6>
 8014288:	290a      	cmp	r1, #10
 801428a:	d004      	beq.n	8014296 <_puts_r+0xb6>
 801428c:	6823      	ldr	r3, [r4, #0]
 801428e:	1c5a      	adds	r2, r3, #1
 8014290:	6022      	str	r2, [r4, #0]
 8014292:	7019      	strb	r1, [r3, #0]
 8014294:	e7c5      	b.n	8014222 <_puts_r+0x42>
 8014296:	4622      	mov	r2, r4
 8014298:	4628      	mov	r0, r5
 801429a:	f000 f817 	bl	80142cc <__swbuf_r>
 801429e:	3001      	adds	r0, #1
 80142a0:	d1bf      	bne.n	8014222 <_puts_r+0x42>
 80142a2:	e7df      	b.n	8014264 <_puts_r+0x84>
 80142a4:	6823      	ldr	r3, [r4, #0]
 80142a6:	250a      	movs	r5, #10
 80142a8:	1c5a      	adds	r2, r3, #1
 80142aa:	6022      	str	r2, [r4, #0]
 80142ac:	701d      	strb	r5, [r3, #0]
 80142ae:	e7db      	b.n	8014268 <_puts_r+0x88>
 80142b0:	08016b00 	.word	0x08016b00
 80142b4:	08016b20 	.word	0x08016b20
 80142b8:	08016ae0 	.word	0x08016ae0

080142bc <puts>:
 80142bc:	4b02      	ldr	r3, [pc, #8]	; (80142c8 <puts+0xc>)
 80142be:	4601      	mov	r1, r0
 80142c0:	6818      	ldr	r0, [r3, #0]
 80142c2:	f7ff bf8d 	b.w	80141e0 <_puts_r>
 80142c6:	bf00      	nop
 80142c8:	20000184 	.word	0x20000184

080142cc <__swbuf_r>:
 80142cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ce:	460e      	mov	r6, r1
 80142d0:	4614      	mov	r4, r2
 80142d2:	4605      	mov	r5, r0
 80142d4:	b118      	cbz	r0, 80142de <__swbuf_r+0x12>
 80142d6:	6983      	ldr	r3, [r0, #24]
 80142d8:	b90b      	cbnz	r3, 80142de <__swbuf_r+0x12>
 80142da:	f001 f84d 	bl	8015378 <__sinit>
 80142de:	4b21      	ldr	r3, [pc, #132]	; (8014364 <__swbuf_r+0x98>)
 80142e0:	429c      	cmp	r4, r3
 80142e2:	d12b      	bne.n	801433c <__swbuf_r+0x70>
 80142e4:	686c      	ldr	r4, [r5, #4]
 80142e6:	69a3      	ldr	r3, [r4, #24]
 80142e8:	60a3      	str	r3, [r4, #8]
 80142ea:	89a3      	ldrh	r3, [r4, #12]
 80142ec:	071a      	lsls	r2, r3, #28
 80142ee:	d52f      	bpl.n	8014350 <__swbuf_r+0x84>
 80142f0:	6923      	ldr	r3, [r4, #16]
 80142f2:	b36b      	cbz	r3, 8014350 <__swbuf_r+0x84>
 80142f4:	6923      	ldr	r3, [r4, #16]
 80142f6:	6820      	ldr	r0, [r4, #0]
 80142f8:	1ac0      	subs	r0, r0, r3
 80142fa:	6963      	ldr	r3, [r4, #20]
 80142fc:	b2f6      	uxtb	r6, r6
 80142fe:	4283      	cmp	r3, r0
 8014300:	4637      	mov	r7, r6
 8014302:	dc04      	bgt.n	801430e <__swbuf_r+0x42>
 8014304:	4621      	mov	r1, r4
 8014306:	4628      	mov	r0, r5
 8014308:	f000 ffa2 	bl	8015250 <_fflush_r>
 801430c:	bb30      	cbnz	r0, 801435c <__swbuf_r+0x90>
 801430e:	68a3      	ldr	r3, [r4, #8]
 8014310:	3b01      	subs	r3, #1
 8014312:	60a3      	str	r3, [r4, #8]
 8014314:	6823      	ldr	r3, [r4, #0]
 8014316:	1c5a      	adds	r2, r3, #1
 8014318:	6022      	str	r2, [r4, #0]
 801431a:	701e      	strb	r6, [r3, #0]
 801431c:	6963      	ldr	r3, [r4, #20]
 801431e:	3001      	adds	r0, #1
 8014320:	4283      	cmp	r3, r0
 8014322:	d004      	beq.n	801432e <__swbuf_r+0x62>
 8014324:	89a3      	ldrh	r3, [r4, #12]
 8014326:	07db      	lsls	r3, r3, #31
 8014328:	d506      	bpl.n	8014338 <__swbuf_r+0x6c>
 801432a:	2e0a      	cmp	r6, #10
 801432c:	d104      	bne.n	8014338 <__swbuf_r+0x6c>
 801432e:	4621      	mov	r1, r4
 8014330:	4628      	mov	r0, r5
 8014332:	f000 ff8d 	bl	8015250 <_fflush_r>
 8014336:	b988      	cbnz	r0, 801435c <__swbuf_r+0x90>
 8014338:	4638      	mov	r0, r7
 801433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801433c:	4b0a      	ldr	r3, [pc, #40]	; (8014368 <__swbuf_r+0x9c>)
 801433e:	429c      	cmp	r4, r3
 8014340:	d101      	bne.n	8014346 <__swbuf_r+0x7a>
 8014342:	68ac      	ldr	r4, [r5, #8]
 8014344:	e7cf      	b.n	80142e6 <__swbuf_r+0x1a>
 8014346:	4b09      	ldr	r3, [pc, #36]	; (801436c <__swbuf_r+0xa0>)
 8014348:	429c      	cmp	r4, r3
 801434a:	bf08      	it	eq
 801434c:	68ec      	ldreq	r4, [r5, #12]
 801434e:	e7ca      	b.n	80142e6 <__swbuf_r+0x1a>
 8014350:	4621      	mov	r1, r4
 8014352:	4628      	mov	r0, r5
 8014354:	f000 f80c 	bl	8014370 <__swsetup_r>
 8014358:	2800      	cmp	r0, #0
 801435a:	d0cb      	beq.n	80142f4 <__swbuf_r+0x28>
 801435c:	f04f 37ff 	mov.w	r7, #4294967295
 8014360:	e7ea      	b.n	8014338 <__swbuf_r+0x6c>
 8014362:	bf00      	nop
 8014364:	08016b00 	.word	0x08016b00
 8014368:	08016b20 	.word	0x08016b20
 801436c:	08016ae0 	.word	0x08016ae0

08014370 <__swsetup_r>:
 8014370:	4b32      	ldr	r3, [pc, #200]	; (801443c <__swsetup_r+0xcc>)
 8014372:	b570      	push	{r4, r5, r6, lr}
 8014374:	681d      	ldr	r5, [r3, #0]
 8014376:	4606      	mov	r6, r0
 8014378:	460c      	mov	r4, r1
 801437a:	b125      	cbz	r5, 8014386 <__swsetup_r+0x16>
 801437c:	69ab      	ldr	r3, [r5, #24]
 801437e:	b913      	cbnz	r3, 8014386 <__swsetup_r+0x16>
 8014380:	4628      	mov	r0, r5
 8014382:	f000 fff9 	bl	8015378 <__sinit>
 8014386:	4b2e      	ldr	r3, [pc, #184]	; (8014440 <__swsetup_r+0xd0>)
 8014388:	429c      	cmp	r4, r3
 801438a:	d10f      	bne.n	80143ac <__swsetup_r+0x3c>
 801438c:	686c      	ldr	r4, [r5, #4]
 801438e:	89a3      	ldrh	r3, [r4, #12]
 8014390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014394:	0719      	lsls	r1, r3, #28
 8014396:	d42c      	bmi.n	80143f2 <__swsetup_r+0x82>
 8014398:	06dd      	lsls	r5, r3, #27
 801439a:	d411      	bmi.n	80143c0 <__swsetup_r+0x50>
 801439c:	2309      	movs	r3, #9
 801439e:	6033      	str	r3, [r6, #0]
 80143a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80143a4:	81a3      	strh	r3, [r4, #12]
 80143a6:	f04f 30ff 	mov.w	r0, #4294967295
 80143aa:	e03e      	b.n	801442a <__swsetup_r+0xba>
 80143ac:	4b25      	ldr	r3, [pc, #148]	; (8014444 <__swsetup_r+0xd4>)
 80143ae:	429c      	cmp	r4, r3
 80143b0:	d101      	bne.n	80143b6 <__swsetup_r+0x46>
 80143b2:	68ac      	ldr	r4, [r5, #8]
 80143b4:	e7eb      	b.n	801438e <__swsetup_r+0x1e>
 80143b6:	4b24      	ldr	r3, [pc, #144]	; (8014448 <__swsetup_r+0xd8>)
 80143b8:	429c      	cmp	r4, r3
 80143ba:	bf08      	it	eq
 80143bc:	68ec      	ldreq	r4, [r5, #12]
 80143be:	e7e6      	b.n	801438e <__swsetup_r+0x1e>
 80143c0:	0758      	lsls	r0, r3, #29
 80143c2:	d512      	bpl.n	80143ea <__swsetup_r+0x7a>
 80143c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143c6:	b141      	cbz	r1, 80143da <__swsetup_r+0x6a>
 80143c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143cc:	4299      	cmp	r1, r3
 80143ce:	d002      	beq.n	80143d6 <__swsetup_r+0x66>
 80143d0:	4630      	mov	r0, r6
 80143d2:	f001 fc7d 	bl	8015cd0 <_free_r>
 80143d6:	2300      	movs	r3, #0
 80143d8:	6363      	str	r3, [r4, #52]	; 0x34
 80143da:	89a3      	ldrh	r3, [r4, #12]
 80143dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80143e0:	81a3      	strh	r3, [r4, #12]
 80143e2:	2300      	movs	r3, #0
 80143e4:	6063      	str	r3, [r4, #4]
 80143e6:	6923      	ldr	r3, [r4, #16]
 80143e8:	6023      	str	r3, [r4, #0]
 80143ea:	89a3      	ldrh	r3, [r4, #12]
 80143ec:	f043 0308 	orr.w	r3, r3, #8
 80143f0:	81a3      	strh	r3, [r4, #12]
 80143f2:	6923      	ldr	r3, [r4, #16]
 80143f4:	b94b      	cbnz	r3, 801440a <__swsetup_r+0x9a>
 80143f6:	89a3      	ldrh	r3, [r4, #12]
 80143f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014400:	d003      	beq.n	801440a <__swsetup_r+0x9a>
 8014402:	4621      	mov	r1, r4
 8014404:	4630      	mov	r0, r6
 8014406:	f001 f881 	bl	801550c <__smakebuf_r>
 801440a:	89a0      	ldrh	r0, [r4, #12]
 801440c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014410:	f010 0301 	ands.w	r3, r0, #1
 8014414:	d00a      	beq.n	801442c <__swsetup_r+0xbc>
 8014416:	2300      	movs	r3, #0
 8014418:	60a3      	str	r3, [r4, #8]
 801441a:	6963      	ldr	r3, [r4, #20]
 801441c:	425b      	negs	r3, r3
 801441e:	61a3      	str	r3, [r4, #24]
 8014420:	6923      	ldr	r3, [r4, #16]
 8014422:	b943      	cbnz	r3, 8014436 <__swsetup_r+0xc6>
 8014424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014428:	d1ba      	bne.n	80143a0 <__swsetup_r+0x30>
 801442a:	bd70      	pop	{r4, r5, r6, pc}
 801442c:	0781      	lsls	r1, r0, #30
 801442e:	bf58      	it	pl
 8014430:	6963      	ldrpl	r3, [r4, #20]
 8014432:	60a3      	str	r3, [r4, #8]
 8014434:	e7f4      	b.n	8014420 <__swsetup_r+0xb0>
 8014436:	2000      	movs	r0, #0
 8014438:	e7f7      	b.n	801442a <__swsetup_r+0xba>
 801443a:	bf00      	nop
 801443c:	20000184 	.word	0x20000184
 8014440:	08016b00 	.word	0x08016b00
 8014444:	08016b20 	.word	0x08016b20
 8014448:	08016ae0 	.word	0x08016ae0

0801444c <quorem>:
 801444c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014450:	6903      	ldr	r3, [r0, #16]
 8014452:	690c      	ldr	r4, [r1, #16]
 8014454:	42a3      	cmp	r3, r4
 8014456:	4607      	mov	r7, r0
 8014458:	f2c0 8081 	blt.w	801455e <quorem+0x112>
 801445c:	3c01      	subs	r4, #1
 801445e:	f101 0814 	add.w	r8, r1, #20
 8014462:	f100 0514 	add.w	r5, r0, #20
 8014466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801446a:	9301      	str	r3, [sp, #4]
 801446c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014474:	3301      	adds	r3, #1
 8014476:	429a      	cmp	r2, r3
 8014478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801447c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014480:	fbb2 f6f3 	udiv	r6, r2, r3
 8014484:	d331      	bcc.n	80144ea <quorem+0x9e>
 8014486:	f04f 0e00 	mov.w	lr, #0
 801448a:	4640      	mov	r0, r8
 801448c:	46ac      	mov	ip, r5
 801448e:	46f2      	mov	sl, lr
 8014490:	f850 2b04 	ldr.w	r2, [r0], #4
 8014494:	b293      	uxth	r3, r2
 8014496:	fb06 e303 	mla	r3, r6, r3, lr
 801449a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801449e:	b29b      	uxth	r3, r3
 80144a0:	ebaa 0303 	sub.w	r3, sl, r3
 80144a4:	f8dc a000 	ldr.w	sl, [ip]
 80144a8:	0c12      	lsrs	r2, r2, #16
 80144aa:	fa13 f38a 	uxtah	r3, r3, sl
 80144ae:	fb06 e202 	mla	r2, r6, r2, lr
 80144b2:	9300      	str	r3, [sp, #0]
 80144b4:	9b00      	ldr	r3, [sp, #0]
 80144b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80144ba:	b292      	uxth	r2, r2
 80144bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80144c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80144c8:	4581      	cmp	r9, r0
 80144ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ce:	f84c 3b04 	str.w	r3, [ip], #4
 80144d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80144d6:	d2db      	bcs.n	8014490 <quorem+0x44>
 80144d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80144dc:	b92b      	cbnz	r3, 80144ea <quorem+0x9e>
 80144de:	9b01      	ldr	r3, [sp, #4]
 80144e0:	3b04      	subs	r3, #4
 80144e2:	429d      	cmp	r5, r3
 80144e4:	461a      	mov	r2, r3
 80144e6:	d32e      	bcc.n	8014546 <quorem+0xfa>
 80144e8:	613c      	str	r4, [r7, #16]
 80144ea:	4638      	mov	r0, r7
 80144ec:	f001 fad8 	bl	8015aa0 <__mcmp>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	db24      	blt.n	801453e <quorem+0xf2>
 80144f4:	3601      	adds	r6, #1
 80144f6:	4628      	mov	r0, r5
 80144f8:	f04f 0c00 	mov.w	ip, #0
 80144fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8014500:	f8d0 e000 	ldr.w	lr, [r0]
 8014504:	b293      	uxth	r3, r2
 8014506:	ebac 0303 	sub.w	r3, ip, r3
 801450a:	0c12      	lsrs	r2, r2, #16
 801450c:	fa13 f38e 	uxtah	r3, r3, lr
 8014510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014518:	b29b      	uxth	r3, r3
 801451a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801451e:	45c1      	cmp	r9, r8
 8014520:	f840 3b04 	str.w	r3, [r0], #4
 8014524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014528:	d2e8      	bcs.n	80144fc <quorem+0xb0>
 801452a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801452e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014532:	b922      	cbnz	r2, 801453e <quorem+0xf2>
 8014534:	3b04      	subs	r3, #4
 8014536:	429d      	cmp	r5, r3
 8014538:	461a      	mov	r2, r3
 801453a:	d30a      	bcc.n	8014552 <quorem+0x106>
 801453c:	613c      	str	r4, [r7, #16]
 801453e:	4630      	mov	r0, r6
 8014540:	b003      	add	sp, #12
 8014542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014546:	6812      	ldr	r2, [r2, #0]
 8014548:	3b04      	subs	r3, #4
 801454a:	2a00      	cmp	r2, #0
 801454c:	d1cc      	bne.n	80144e8 <quorem+0x9c>
 801454e:	3c01      	subs	r4, #1
 8014550:	e7c7      	b.n	80144e2 <quorem+0x96>
 8014552:	6812      	ldr	r2, [r2, #0]
 8014554:	3b04      	subs	r3, #4
 8014556:	2a00      	cmp	r2, #0
 8014558:	d1f0      	bne.n	801453c <quorem+0xf0>
 801455a:	3c01      	subs	r4, #1
 801455c:	e7eb      	b.n	8014536 <quorem+0xea>
 801455e:	2000      	movs	r0, #0
 8014560:	e7ee      	b.n	8014540 <quorem+0xf4>
 8014562:	0000      	movs	r0, r0
 8014564:	0000      	movs	r0, r0
	...

08014568 <_dtoa_r>:
 8014568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801456c:	ed2d 8b04 	vpush	{d8-d9}
 8014570:	ec57 6b10 	vmov	r6, r7, d0
 8014574:	b093      	sub	sp, #76	; 0x4c
 8014576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801457c:	9106      	str	r1, [sp, #24]
 801457e:	ee10 aa10 	vmov	sl, s0
 8014582:	4604      	mov	r4, r0
 8014584:	9209      	str	r2, [sp, #36]	; 0x24
 8014586:	930c      	str	r3, [sp, #48]	; 0x30
 8014588:	46bb      	mov	fp, r7
 801458a:	b975      	cbnz	r5, 80145aa <_dtoa_r+0x42>
 801458c:	2010      	movs	r0, #16
 801458e:	f000 fffd 	bl	801558c <malloc>
 8014592:	4602      	mov	r2, r0
 8014594:	6260      	str	r0, [r4, #36]	; 0x24
 8014596:	b920      	cbnz	r0, 80145a2 <_dtoa_r+0x3a>
 8014598:	4ba7      	ldr	r3, [pc, #668]	; (8014838 <_dtoa_r+0x2d0>)
 801459a:	21ea      	movs	r1, #234	; 0xea
 801459c:	48a7      	ldr	r0, [pc, #668]	; (801483c <_dtoa_r+0x2d4>)
 801459e:	f001 fe37 	bl	8016210 <__assert_func>
 80145a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80145a6:	6005      	str	r5, [r0, #0]
 80145a8:	60c5      	str	r5, [r0, #12]
 80145aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145ac:	6819      	ldr	r1, [r3, #0]
 80145ae:	b151      	cbz	r1, 80145c6 <_dtoa_r+0x5e>
 80145b0:	685a      	ldr	r2, [r3, #4]
 80145b2:	604a      	str	r2, [r1, #4]
 80145b4:	2301      	movs	r3, #1
 80145b6:	4093      	lsls	r3, r2
 80145b8:	608b      	str	r3, [r1, #8]
 80145ba:	4620      	mov	r0, r4
 80145bc:	f001 f82e 	bl	801561c <_Bfree>
 80145c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
 80145c6:	1e3b      	subs	r3, r7, #0
 80145c8:	bfaa      	itet	ge
 80145ca:	2300      	movge	r3, #0
 80145cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80145d0:	f8c8 3000 	strge.w	r3, [r8]
 80145d4:	4b9a      	ldr	r3, [pc, #616]	; (8014840 <_dtoa_r+0x2d8>)
 80145d6:	bfbc      	itt	lt
 80145d8:	2201      	movlt	r2, #1
 80145da:	f8c8 2000 	strlt.w	r2, [r8]
 80145de:	ea33 030b 	bics.w	r3, r3, fp
 80145e2:	d11b      	bne.n	801461c <_dtoa_r+0xb4>
 80145e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80145ea:	6013      	str	r3, [r2, #0]
 80145ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145f0:	4333      	orrs	r3, r6
 80145f2:	f000 8592 	beq.w	801511a <_dtoa_r+0xbb2>
 80145f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145f8:	b963      	cbnz	r3, 8014614 <_dtoa_r+0xac>
 80145fa:	4b92      	ldr	r3, [pc, #584]	; (8014844 <_dtoa_r+0x2dc>)
 80145fc:	e022      	b.n	8014644 <_dtoa_r+0xdc>
 80145fe:	4b92      	ldr	r3, [pc, #584]	; (8014848 <_dtoa_r+0x2e0>)
 8014600:	9301      	str	r3, [sp, #4]
 8014602:	3308      	adds	r3, #8
 8014604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014606:	6013      	str	r3, [r2, #0]
 8014608:	9801      	ldr	r0, [sp, #4]
 801460a:	b013      	add	sp, #76	; 0x4c
 801460c:	ecbd 8b04 	vpop	{d8-d9}
 8014610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014614:	4b8b      	ldr	r3, [pc, #556]	; (8014844 <_dtoa_r+0x2dc>)
 8014616:	9301      	str	r3, [sp, #4]
 8014618:	3303      	adds	r3, #3
 801461a:	e7f3      	b.n	8014604 <_dtoa_r+0x9c>
 801461c:	2200      	movs	r2, #0
 801461e:	2300      	movs	r3, #0
 8014620:	4650      	mov	r0, sl
 8014622:	4659      	mov	r1, fp
 8014624:	f7ec fa78 	bl	8000b18 <__aeabi_dcmpeq>
 8014628:	ec4b ab19 	vmov	d9, sl, fp
 801462c:	4680      	mov	r8, r0
 801462e:	b158      	cbz	r0, 8014648 <_dtoa_r+0xe0>
 8014630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014632:	2301      	movs	r3, #1
 8014634:	6013      	str	r3, [r2, #0]
 8014636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014638:	2b00      	cmp	r3, #0
 801463a:	f000 856b 	beq.w	8015114 <_dtoa_r+0xbac>
 801463e:	4883      	ldr	r0, [pc, #524]	; (801484c <_dtoa_r+0x2e4>)
 8014640:	6018      	str	r0, [r3, #0]
 8014642:	1e43      	subs	r3, r0, #1
 8014644:	9301      	str	r3, [sp, #4]
 8014646:	e7df      	b.n	8014608 <_dtoa_r+0xa0>
 8014648:	ec4b ab10 	vmov	d0, sl, fp
 801464c:	aa10      	add	r2, sp, #64	; 0x40
 801464e:	a911      	add	r1, sp, #68	; 0x44
 8014650:	4620      	mov	r0, r4
 8014652:	f001 facb 	bl	8015bec <__d2b>
 8014656:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801465a:	ee08 0a10 	vmov	s16, r0
 801465e:	2d00      	cmp	r5, #0
 8014660:	f000 8084 	beq.w	801476c <_dtoa_r+0x204>
 8014664:	ee19 3a90 	vmov	r3, s19
 8014668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801466c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014670:	4656      	mov	r6, sl
 8014672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801467a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801467e:	4b74      	ldr	r3, [pc, #464]	; (8014850 <_dtoa_r+0x2e8>)
 8014680:	2200      	movs	r2, #0
 8014682:	4630      	mov	r0, r6
 8014684:	4639      	mov	r1, r7
 8014686:	f7eb fe27 	bl	80002d8 <__aeabi_dsub>
 801468a:	a365      	add	r3, pc, #404	; (adr r3, 8014820 <_dtoa_r+0x2b8>)
 801468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014690:	f7eb ffda 	bl	8000648 <__aeabi_dmul>
 8014694:	a364      	add	r3, pc, #400	; (adr r3, 8014828 <_dtoa_r+0x2c0>)
 8014696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469a:	f7eb fe1f 	bl	80002dc <__adddf3>
 801469e:	4606      	mov	r6, r0
 80146a0:	4628      	mov	r0, r5
 80146a2:	460f      	mov	r7, r1
 80146a4:	f7eb ff66 	bl	8000574 <__aeabi_i2d>
 80146a8:	a361      	add	r3, pc, #388	; (adr r3, 8014830 <_dtoa_r+0x2c8>)
 80146aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ae:	f7eb ffcb 	bl	8000648 <__aeabi_dmul>
 80146b2:	4602      	mov	r2, r0
 80146b4:	460b      	mov	r3, r1
 80146b6:	4630      	mov	r0, r6
 80146b8:	4639      	mov	r1, r7
 80146ba:	f7eb fe0f 	bl	80002dc <__adddf3>
 80146be:	4606      	mov	r6, r0
 80146c0:	460f      	mov	r7, r1
 80146c2:	f7ec fa71 	bl	8000ba8 <__aeabi_d2iz>
 80146c6:	2200      	movs	r2, #0
 80146c8:	9000      	str	r0, [sp, #0]
 80146ca:	2300      	movs	r3, #0
 80146cc:	4630      	mov	r0, r6
 80146ce:	4639      	mov	r1, r7
 80146d0:	f7ec fa2c 	bl	8000b2c <__aeabi_dcmplt>
 80146d4:	b150      	cbz	r0, 80146ec <_dtoa_r+0x184>
 80146d6:	9800      	ldr	r0, [sp, #0]
 80146d8:	f7eb ff4c 	bl	8000574 <__aeabi_i2d>
 80146dc:	4632      	mov	r2, r6
 80146de:	463b      	mov	r3, r7
 80146e0:	f7ec fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 80146e4:	b910      	cbnz	r0, 80146ec <_dtoa_r+0x184>
 80146e6:	9b00      	ldr	r3, [sp, #0]
 80146e8:	3b01      	subs	r3, #1
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	9b00      	ldr	r3, [sp, #0]
 80146ee:	2b16      	cmp	r3, #22
 80146f0:	d85a      	bhi.n	80147a8 <_dtoa_r+0x240>
 80146f2:	9a00      	ldr	r2, [sp, #0]
 80146f4:	4b57      	ldr	r3, [pc, #348]	; (8014854 <_dtoa_r+0x2ec>)
 80146f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fe:	ec51 0b19 	vmov	r0, r1, d9
 8014702:	f7ec fa13 	bl	8000b2c <__aeabi_dcmplt>
 8014706:	2800      	cmp	r0, #0
 8014708:	d050      	beq.n	80147ac <_dtoa_r+0x244>
 801470a:	9b00      	ldr	r3, [sp, #0]
 801470c:	3b01      	subs	r3, #1
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	2300      	movs	r3, #0
 8014712:	930b      	str	r3, [sp, #44]	; 0x2c
 8014714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014716:	1b5d      	subs	r5, r3, r5
 8014718:	1e6b      	subs	r3, r5, #1
 801471a:	9305      	str	r3, [sp, #20]
 801471c:	bf45      	ittet	mi
 801471e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014722:	9304      	strmi	r3, [sp, #16]
 8014724:	2300      	movpl	r3, #0
 8014726:	2300      	movmi	r3, #0
 8014728:	bf4c      	ite	mi
 801472a:	9305      	strmi	r3, [sp, #20]
 801472c:	9304      	strpl	r3, [sp, #16]
 801472e:	9b00      	ldr	r3, [sp, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	db3d      	blt.n	80147b0 <_dtoa_r+0x248>
 8014734:	9b05      	ldr	r3, [sp, #20]
 8014736:	9a00      	ldr	r2, [sp, #0]
 8014738:	920a      	str	r2, [sp, #40]	; 0x28
 801473a:	4413      	add	r3, r2
 801473c:	9305      	str	r3, [sp, #20]
 801473e:	2300      	movs	r3, #0
 8014740:	9307      	str	r3, [sp, #28]
 8014742:	9b06      	ldr	r3, [sp, #24]
 8014744:	2b09      	cmp	r3, #9
 8014746:	f200 8089 	bhi.w	801485c <_dtoa_r+0x2f4>
 801474a:	2b05      	cmp	r3, #5
 801474c:	bfc4      	itt	gt
 801474e:	3b04      	subgt	r3, #4
 8014750:	9306      	strgt	r3, [sp, #24]
 8014752:	9b06      	ldr	r3, [sp, #24]
 8014754:	f1a3 0302 	sub.w	r3, r3, #2
 8014758:	bfcc      	ite	gt
 801475a:	2500      	movgt	r5, #0
 801475c:	2501      	movle	r5, #1
 801475e:	2b03      	cmp	r3, #3
 8014760:	f200 8087 	bhi.w	8014872 <_dtoa_r+0x30a>
 8014764:	e8df f003 	tbb	[pc, r3]
 8014768:	59383a2d 	.word	0x59383a2d
 801476c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014770:	441d      	add	r5, r3
 8014772:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014776:	2b20      	cmp	r3, #32
 8014778:	bfc1      	itttt	gt
 801477a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801477e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014782:	fa0b f303 	lslgt.w	r3, fp, r3
 8014786:	fa26 f000 	lsrgt.w	r0, r6, r0
 801478a:	bfda      	itte	le
 801478c:	f1c3 0320 	rsble	r3, r3, #32
 8014790:	fa06 f003 	lslle.w	r0, r6, r3
 8014794:	4318      	orrgt	r0, r3
 8014796:	f7eb fedd 	bl	8000554 <__aeabi_ui2d>
 801479a:	2301      	movs	r3, #1
 801479c:	4606      	mov	r6, r0
 801479e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80147a2:	3d01      	subs	r5, #1
 80147a4:	930e      	str	r3, [sp, #56]	; 0x38
 80147a6:	e76a      	b.n	801467e <_dtoa_r+0x116>
 80147a8:	2301      	movs	r3, #1
 80147aa:	e7b2      	b.n	8014712 <_dtoa_r+0x1aa>
 80147ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80147ae:	e7b1      	b.n	8014714 <_dtoa_r+0x1ac>
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	9a00      	ldr	r2, [sp, #0]
 80147b4:	1a9b      	subs	r3, r3, r2
 80147b6:	9304      	str	r3, [sp, #16]
 80147b8:	4253      	negs	r3, r2
 80147ba:	9307      	str	r3, [sp, #28]
 80147bc:	2300      	movs	r3, #0
 80147be:	930a      	str	r3, [sp, #40]	; 0x28
 80147c0:	e7bf      	b.n	8014742 <_dtoa_r+0x1da>
 80147c2:	2300      	movs	r3, #0
 80147c4:	9308      	str	r3, [sp, #32]
 80147c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	dc55      	bgt.n	8014878 <_dtoa_r+0x310>
 80147cc:	2301      	movs	r3, #1
 80147ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80147d2:	461a      	mov	r2, r3
 80147d4:	9209      	str	r2, [sp, #36]	; 0x24
 80147d6:	e00c      	b.n	80147f2 <_dtoa_r+0x28a>
 80147d8:	2301      	movs	r3, #1
 80147da:	e7f3      	b.n	80147c4 <_dtoa_r+0x25c>
 80147dc:	2300      	movs	r3, #0
 80147de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147e0:	9308      	str	r3, [sp, #32]
 80147e2:	9b00      	ldr	r3, [sp, #0]
 80147e4:	4413      	add	r3, r2
 80147e6:	9302      	str	r3, [sp, #8]
 80147e8:	3301      	adds	r3, #1
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	9303      	str	r3, [sp, #12]
 80147ee:	bfb8      	it	lt
 80147f0:	2301      	movlt	r3, #1
 80147f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147f4:	2200      	movs	r2, #0
 80147f6:	6042      	str	r2, [r0, #4]
 80147f8:	2204      	movs	r2, #4
 80147fa:	f102 0614 	add.w	r6, r2, #20
 80147fe:	429e      	cmp	r6, r3
 8014800:	6841      	ldr	r1, [r0, #4]
 8014802:	d93d      	bls.n	8014880 <_dtoa_r+0x318>
 8014804:	4620      	mov	r0, r4
 8014806:	f000 fec9 	bl	801559c <_Balloc>
 801480a:	9001      	str	r0, [sp, #4]
 801480c:	2800      	cmp	r0, #0
 801480e:	d13b      	bne.n	8014888 <_dtoa_r+0x320>
 8014810:	4b11      	ldr	r3, [pc, #68]	; (8014858 <_dtoa_r+0x2f0>)
 8014812:	4602      	mov	r2, r0
 8014814:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014818:	e6c0      	b.n	801459c <_dtoa_r+0x34>
 801481a:	2301      	movs	r3, #1
 801481c:	e7df      	b.n	80147de <_dtoa_r+0x276>
 801481e:	bf00      	nop
 8014820:	636f4361 	.word	0x636f4361
 8014824:	3fd287a7 	.word	0x3fd287a7
 8014828:	8b60c8b3 	.word	0x8b60c8b3
 801482c:	3fc68a28 	.word	0x3fc68a28
 8014830:	509f79fb 	.word	0x509f79fb
 8014834:	3fd34413 	.word	0x3fd34413
 8014838:	08016a5d 	.word	0x08016a5d
 801483c:	08016a74 	.word	0x08016a74
 8014840:	7ff00000 	.word	0x7ff00000
 8014844:	08016a59 	.word	0x08016a59
 8014848:	08016a50 	.word	0x08016a50
 801484c:	08016a2d 	.word	0x08016a2d
 8014850:	3ff80000 	.word	0x3ff80000
 8014854:	08016bc8 	.word	0x08016bc8
 8014858:	08016acf 	.word	0x08016acf
 801485c:	2501      	movs	r5, #1
 801485e:	2300      	movs	r3, #0
 8014860:	9306      	str	r3, [sp, #24]
 8014862:	9508      	str	r5, [sp, #32]
 8014864:	f04f 33ff 	mov.w	r3, #4294967295
 8014868:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801486c:	2200      	movs	r2, #0
 801486e:	2312      	movs	r3, #18
 8014870:	e7b0      	b.n	80147d4 <_dtoa_r+0x26c>
 8014872:	2301      	movs	r3, #1
 8014874:	9308      	str	r3, [sp, #32]
 8014876:	e7f5      	b.n	8014864 <_dtoa_r+0x2fc>
 8014878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801487a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801487e:	e7b8      	b.n	80147f2 <_dtoa_r+0x28a>
 8014880:	3101      	adds	r1, #1
 8014882:	6041      	str	r1, [r0, #4]
 8014884:	0052      	lsls	r2, r2, #1
 8014886:	e7b8      	b.n	80147fa <_dtoa_r+0x292>
 8014888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801488a:	9a01      	ldr	r2, [sp, #4]
 801488c:	601a      	str	r2, [r3, #0]
 801488e:	9b03      	ldr	r3, [sp, #12]
 8014890:	2b0e      	cmp	r3, #14
 8014892:	f200 809d 	bhi.w	80149d0 <_dtoa_r+0x468>
 8014896:	2d00      	cmp	r5, #0
 8014898:	f000 809a 	beq.w	80149d0 <_dtoa_r+0x468>
 801489c:	9b00      	ldr	r3, [sp, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	dd32      	ble.n	8014908 <_dtoa_r+0x3a0>
 80148a2:	4ab7      	ldr	r2, [pc, #732]	; (8014b80 <_dtoa_r+0x618>)
 80148a4:	f003 030f 	and.w	r3, r3, #15
 80148a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80148ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148b0:	9b00      	ldr	r3, [sp, #0]
 80148b2:	05d8      	lsls	r0, r3, #23
 80148b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80148b8:	d516      	bpl.n	80148e8 <_dtoa_r+0x380>
 80148ba:	4bb2      	ldr	r3, [pc, #712]	; (8014b84 <_dtoa_r+0x61c>)
 80148bc:	ec51 0b19 	vmov	r0, r1, d9
 80148c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80148c4:	f7eb ffea 	bl	800089c <__aeabi_ddiv>
 80148c8:	f007 070f 	and.w	r7, r7, #15
 80148cc:	4682      	mov	sl, r0
 80148ce:	468b      	mov	fp, r1
 80148d0:	2503      	movs	r5, #3
 80148d2:	4eac      	ldr	r6, [pc, #688]	; (8014b84 <_dtoa_r+0x61c>)
 80148d4:	b957      	cbnz	r7, 80148ec <_dtoa_r+0x384>
 80148d6:	4642      	mov	r2, r8
 80148d8:	464b      	mov	r3, r9
 80148da:	4650      	mov	r0, sl
 80148dc:	4659      	mov	r1, fp
 80148de:	f7eb ffdd 	bl	800089c <__aeabi_ddiv>
 80148e2:	4682      	mov	sl, r0
 80148e4:	468b      	mov	fp, r1
 80148e6:	e028      	b.n	801493a <_dtoa_r+0x3d2>
 80148e8:	2502      	movs	r5, #2
 80148ea:	e7f2      	b.n	80148d2 <_dtoa_r+0x36a>
 80148ec:	07f9      	lsls	r1, r7, #31
 80148ee:	d508      	bpl.n	8014902 <_dtoa_r+0x39a>
 80148f0:	4640      	mov	r0, r8
 80148f2:	4649      	mov	r1, r9
 80148f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80148f8:	f7eb fea6 	bl	8000648 <__aeabi_dmul>
 80148fc:	3501      	adds	r5, #1
 80148fe:	4680      	mov	r8, r0
 8014900:	4689      	mov	r9, r1
 8014902:	107f      	asrs	r7, r7, #1
 8014904:	3608      	adds	r6, #8
 8014906:	e7e5      	b.n	80148d4 <_dtoa_r+0x36c>
 8014908:	f000 809b 	beq.w	8014a42 <_dtoa_r+0x4da>
 801490c:	9b00      	ldr	r3, [sp, #0]
 801490e:	4f9d      	ldr	r7, [pc, #628]	; (8014b84 <_dtoa_r+0x61c>)
 8014910:	425e      	negs	r6, r3
 8014912:	4b9b      	ldr	r3, [pc, #620]	; (8014b80 <_dtoa_r+0x618>)
 8014914:	f006 020f 	and.w	r2, r6, #15
 8014918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014920:	ec51 0b19 	vmov	r0, r1, d9
 8014924:	f7eb fe90 	bl	8000648 <__aeabi_dmul>
 8014928:	1136      	asrs	r6, r6, #4
 801492a:	4682      	mov	sl, r0
 801492c:	468b      	mov	fp, r1
 801492e:	2300      	movs	r3, #0
 8014930:	2502      	movs	r5, #2
 8014932:	2e00      	cmp	r6, #0
 8014934:	d17a      	bne.n	8014a2c <_dtoa_r+0x4c4>
 8014936:	2b00      	cmp	r3, #0
 8014938:	d1d3      	bne.n	80148e2 <_dtoa_r+0x37a>
 801493a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801493c:	2b00      	cmp	r3, #0
 801493e:	f000 8082 	beq.w	8014a46 <_dtoa_r+0x4de>
 8014942:	4b91      	ldr	r3, [pc, #580]	; (8014b88 <_dtoa_r+0x620>)
 8014944:	2200      	movs	r2, #0
 8014946:	4650      	mov	r0, sl
 8014948:	4659      	mov	r1, fp
 801494a:	f7ec f8ef 	bl	8000b2c <__aeabi_dcmplt>
 801494e:	2800      	cmp	r0, #0
 8014950:	d079      	beq.n	8014a46 <_dtoa_r+0x4de>
 8014952:	9b03      	ldr	r3, [sp, #12]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d076      	beq.n	8014a46 <_dtoa_r+0x4de>
 8014958:	9b02      	ldr	r3, [sp, #8]
 801495a:	2b00      	cmp	r3, #0
 801495c:	dd36      	ble.n	80149cc <_dtoa_r+0x464>
 801495e:	9b00      	ldr	r3, [sp, #0]
 8014960:	4650      	mov	r0, sl
 8014962:	4659      	mov	r1, fp
 8014964:	1e5f      	subs	r7, r3, #1
 8014966:	2200      	movs	r2, #0
 8014968:	4b88      	ldr	r3, [pc, #544]	; (8014b8c <_dtoa_r+0x624>)
 801496a:	f7eb fe6d 	bl	8000648 <__aeabi_dmul>
 801496e:	9e02      	ldr	r6, [sp, #8]
 8014970:	4682      	mov	sl, r0
 8014972:	468b      	mov	fp, r1
 8014974:	3501      	adds	r5, #1
 8014976:	4628      	mov	r0, r5
 8014978:	f7eb fdfc 	bl	8000574 <__aeabi_i2d>
 801497c:	4652      	mov	r2, sl
 801497e:	465b      	mov	r3, fp
 8014980:	f7eb fe62 	bl	8000648 <__aeabi_dmul>
 8014984:	4b82      	ldr	r3, [pc, #520]	; (8014b90 <_dtoa_r+0x628>)
 8014986:	2200      	movs	r2, #0
 8014988:	f7eb fca8 	bl	80002dc <__adddf3>
 801498c:	46d0      	mov	r8, sl
 801498e:	46d9      	mov	r9, fp
 8014990:	4682      	mov	sl, r0
 8014992:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014996:	2e00      	cmp	r6, #0
 8014998:	d158      	bne.n	8014a4c <_dtoa_r+0x4e4>
 801499a:	4b7e      	ldr	r3, [pc, #504]	; (8014b94 <_dtoa_r+0x62c>)
 801499c:	2200      	movs	r2, #0
 801499e:	4640      	mov	r0, r8
 80149a0:	4649      	mov	r1, r9
 80149a2:	f7eb fc99 	bl	80002d8 <__aeabi_dsub>
 80149a6:	4652      	mov	r2, sl
 80149a8:	465b      	mov	r3, fp
 80149aa:	4680      	mov	r8, r0
 80149ac:	4689      	mov	r9, r1
 80149ae:	f7ec f8db 	bl	8000b68 <__aeabi_dcmpgt>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	f040 8295 	bne.w	8014ee2 <_dtoa_r+0x97a>
 80149b8:	4652      	mov	r2, sl
 80149ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80149be:	4640      	mov	r0, r8
 80149c0:	4649      	mov	r1, r9
 80149c2:	f7ec f8b3 	bl	8000b2c <__aeabi_dcmplt>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	f040 8289 	bne.w	8014ede <_dtoa_r+0x976>
 80149cc:	ec5b ab19 	vmov	sl, fp, d9
 80149d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	f2c0 8148 	blt.w	8014c68 <_dtoa_r+0x700>
 80149d8:	9a00      	ldr	r2, [sp, #0]
 80149da:	2a0e      	cmp	r2, #14
 80149dc:	f300 8144 	bgt.w	8014c68 <_dtoa_r+0x700>
 80149e0:	4b67      	ldr	r3, [pc, #412]	; (8014b80 <_dtoa_r+0x618>)
 80149e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80149ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f280 80d5 	bge.w	8014b9c <_dtoa_r+0x634>
 80149f2:	9b03      	ldr	r3, [sp, #12]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	f300 80d1 	bgt.w	8014b9c <_dtoa_r+0x634>
 80149fa:	f040 826f 	bne.w	8014edc <_dtoa_r+0x974>
 80149fe:	4b65      	ldr	r3, [pc, #404]	; (8014b94 <_dtoa_r+0x62c>)
 8014a00:	2200      	movs	r2, #0
 8014a02:	4640      	mov	r0, r8
 8014a04:	4649      	mov	r1, r9
 8014a06:	f7eb fe1f 	bl	8000648 <__aeabi_dmul>
 8014a0a:	4652      	mov	r2, sl
 8014a0c:	465b      	mov	r3, fp
 8014a0e:	f7ec f8a1 	bl	8000b54 <__aeabi_dcmpge>
 8014a12:	9e03      	ldr	r6, [sp, #12]
 8014a14:	4637      	mov	r7, r6
 8014a16:	2800      	cmp	r0, #0
 8014a18:	f040 8245 	bne.w	8014ea6 <_dtoa_r+0x93e>
 8014a1c:	9d01      	ldr	r5, [sp, #4]
 8014a1e:	2331      	movs	r3, #49	; 0x31
 8014a20:	f805 3b01 	strb.w	r3, [r5], #1
 8014a24:	9b00      	ldr	r3, [sp, #0]
 8014a26:	3301      	adds	r3, #1
 8014a28:	9300      	str	r3, [sp, #0]
 8014a2a:	e240      	b.n	8014eae <_dtoa_r+0x946>
 8014a2c:	07f2      	lsls	r2, r6, #31
 8014a2e:	d505      	bpl.n	8014a3c <_dtoa_r+0x4d4>
 8014a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a34:	f7eb fe08 	bl	8000648 <__aeabi_dmul>
 8014a38:	3501      	adds	r5, #1
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	1076      	asrs	r6, r6, #1
 8014a3e:	3708      	adds	r7, #8
 8014a40:	e777      	b.n	8014932 <_dtoa_r+0x3ca>
 8014a42:	2502      	movs	r5, #2
 8014a44:	e779      	b.n	801493a <_dtoa_r+0x3d2>
 8014a46:	9f00      	ldr	r7, [sp, #0]
 8014a48:	9e03      	ldr	r6, [sp, #12]
 8014a4a:	e794      	b.n	8014976 <_dtoa_r+0x40e>
 8014a4c:	9901      	ldr	r1, [sp, #4]
 8014a4e:	4b4c      	ldr	r3, [pc, #304]	; (8014b80 <_dtoa_r+0x618>)
 8014a50:	4431      	add	r1, r6
 8014a52:	910d      	str	r1, [sp, #52]	; 0x34
 8014a54:	9908      	ldr	r1, [sp, #32]
 8014a56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014a5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014a5e:	2900      	cmp	r1, #0
 8014a60:	d043      	beq.n	8014aea <_dtoa_r+0x582>
 8014a62:	494d      	ldr	r1, [pc, #308]	; (8014b98 <_dtoa_r+0x630>)
 8014a64:	2000      	movs	r0, #0
 8014a66:	f7eb ff19 	bl	800089c <__aeabi_ddiv>
 8014a6a:	4652      	mov	r2, sl
 8014a6c:	465b      	mov	r3, fp
 8014a6e:	f7eb fc33 	bl	80002d8 <__aeabi_dsub>
 8014a72:	9d01      	ldr	r5, [sp, #4]
 8014a74:	4682      	mov	sl, r0
 8014a76:	468b      	mov	fp, r1
 8014a78:	4649      	mov	r1, r9
 8014a7a:	4640      	mov	r0, r8
 8014a7c:	f7ec f894 	bl	8000ba8 <__aeabi_d2iz>
 8014a80:	4606      	mov	r6, r0
 8014a82:	f7eb fd77 	bl	8000574 <__aeabi_i2d>
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	4640      	mov	r0, r8
 8014a8c:	4649      	mov	r1, r9
 8014a8e:	f7eb fc23 	bl	80002d8 <__aeabi_dsub>
 8014a92:	3630      	adds	r6, #48	; 0x30
 8014a94:	f805 6b01 	strb.w	r6, [r5], #1
 8014a98:	4652      	mov	r2, sl
 8014a9a:	465b      	mov	r3, fp
 8014a9c:	4680      	mov	r8, r0
 8014a9e:	4689      	mov	r9, r1
 8014aa0:	f7ec f844 	bl	8000b2c <__aeabi_dcmplt>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d163      	bne.n	8014b70 <_dtoa_r+0x608>
 8014aa8:	4642      	mov	r2, r8
 8014aaa:	464b      	mov	r3, r9
 8014aac:	4936      	ldr	r1, [pc, #216]	; (8014b88 <_dtoa_r+0x620>)
 8014aae:	2000      	movs	r0, #0
 8014ab0:	f7eb fc12 	bl	80002d8 <__aeabi_dsub>
 8014ab4:	4652      	mov	r2, sl
 8014ab6:	465b      	mov	r3, fp
 8014ab8:	f7ec f838 	bl	8000b2c <__aeabi_dcmplt>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	f040 80b5 	bne.w	8014c2c <_dtoa_r+0x6c4>
 8014ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac4:	429d      	cmp	r5, r3
 8014ac6:	d081      	beq.n	80149cc <_dtoa_r+0x464>
 8014ac8:	4b30      	ldr	r3, [pc, #192]	; (8014b8c <_dtoa_r+0x624>)
 8014aca:	2200      	movs	r2, #0
 8014acc:	4650      	mov	r0, sl
 8014ace:	4659      	mov	r1, fp
 8014ad0:	f7eb fdba 	bl	8000648 <__aeabi_dmul>
 8014ad4:	4b2d      	ldr	r3, [pc, #180]	; (8014b8c <_dtoa_r+0x624>)
 8014ad6:	4682      	mov	sl, r0
 8014ad8:	468b      	mov	fp, r1
 8014ada:	4640      	mov	r0, r8
 8014adc:	4649      	mov	r1, r9
 8014ade:	2200      	movs	r2, #0
 8014ae0:	f7eb fdb2 	bl	8000648 <__aeabi_dmul>
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	4689      	mov	r9, r1
 8014ae8:	e7c6      	b.n	8014a78 <_dtoa_r+0x510>
 8014aea:	4650      	mov	r0, sl
 8014aec:	4659      	mov	r1, fp
 8014aee:	f7eb fdab 	bl	8000648 <__aeabi_dmul>
 8014af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014af4:	9d01      	ldr	r5, [sp, #4]
 8014af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014af8:	4682      	mov	sl, r0
 8014afa:	468b      	mov	fp, r1
 8014afc:	4649      	mov	r1, r9
 8014afe:	4640      	mov	r0, r8
 8014b00:	f7ec f852 	bl	8000ba8 <__aeabi_d2iz>
 8014b04:	4606      	mov	r6, r0
 8014b06:	f7eb fd35 	bl	8000574 <__aeabi_i2d>
 8014b0a:	3630      	adds	r6, #48	; 0x30
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	4640      	mov	r0, r8
 8014b12:	4649      	mov	r1, r9
 8014b14:	f7eb fbe0 	bl	80002d8 <__aeabi_dsub>
 8014b18:	f805 6b01 	strb.w	r6, [r5], #1
 8014b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b1e:	429d      	cmp	r5, r3
 8014b20:	4680      	mov	r8, r0
 8014b22:	4689      	mov	r9, r1
 8014b24:	f04f 0200 	mov.w	r2, #0
 8014b28:	d124      	bne.n	8014b74 <_dtoa_r+0x60c>
 8014b2a:	4b1b      	ldr	r3, [pc, #108]	; (8014b98 <_dtoa_r+0x630>)
 8014b2c:	4650      	mov	r0, sl
 8014b2e:	4659      	mov	r1, fp
 8014b30:	f7eb fbd4 	bl	80002dc <__adddf3>
 8014b34:	4602      	mov	r2, r0
 8014b36:	460b      	mov	r3, r1
 8014b38:	4640      	mov	r0, r8
 8014b3a:	4649      	mov	r1, r9
 8014b3c:	f7ec f814 	bl	8000b68 <__aeabi_dcmpgt>
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d173      	bne.n	8014c2c <_dtoa_r+0x6c4>
 8014b44:	4652      	mov	r2, sl
 8014b46:	465b      	mov	r3, fp
 8014b48:	4913      	ldr	r1, [pc, #76]	; (8014b98 <_dtoa_r+0x630>)
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	f7eb fbc4 	bl	80002d8 <__aeabi_dsub>
 8014b50:	4602      	mov	r2, r0
 8014b52:	460b      	mov	r3, r1
 8014b54:	4640      	mov	r0, r8
 8014b56:	4649      	mov	r1, r9
 8014b58:	f7eb ffe8 	bl	8000b2c <__aeabi_dcmplt>
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	f43f af35 	beq.w	80149cc <_dtoa_r+0x464>
 8014b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014b64:	1e6b      	subs	r3, r5, #1
 8014b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b6c:	2b30      	cmp	r3, #48	; 0x30
 8014b6e:	d0f8      	beq.n	8014b62 <_dtoa_r+0x5fa>
 8014b70:	9700      	str	r7, [sp, #0]
 8014b72:	e049      	b.n	8014c08 <_dtoa_r+0x6a0>
 8014b74:	4b05      	ldr	r3, [pc, #20]	; (8014b8c <_dtoa_r+0x624>)
 8014b76:	f7eb fd67 	bl	8000648 <__aeabi_dmul>
 8014b7a:	4680      	mov	r8, r0
 8014b7c:	4689      	mov	r9, r1
 8014b7e:	e7bd      	b.n	8014afc <_dtoa_r+0x594>
 8014b80:	08016bc8 	.word	0x08016bc8
 8014b84:	08016ba0 	.word	0x08016ba0
 8014b88:	3ff00000 	.word	0x3ff00000
 8014b8c:	40240000 	.word	0x40240000
 8014b90:	401c0000 	.word	0x401c0000
 8014b94:	40140000 	.word	0x40140000
 8014b98:	3fe00000 	.word	0x3fe00000
 8014b9c:	9d01      	ldr	r5, [sp, #4]
 8014b9e:	4656      	mov	r6, sl
 8014ba0:	465f      	mov	r7, fp
 8014ba2:	4642      	mov	r2, r8
 8014ba4:	464b      	mov	r3, r9
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	4639      	mov	r1, r7
 8014baa:	f7eb fe77 	bl	800089c <__aeabi_ddiv>
 8014bae:	f7eb fffb 	bl	8000ba8 <__aeabi_d2iz>
 8014bb2:	4682      	mov	sl, r0
 8014bb4:	f7eb fcde 	bl	8000574 <__aeabi_i2d>
 8014bb8:	4642      	mov	r2, r8
 8014bba:	464b      	mov	r3, r9
 8014bbc:	f7eb fd44 	bl	8000648 <__aeabi_dmul>
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014bcc:	f7eb fb84 	bl	80002d8 <__aeabi_dsub>
 8014bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8014bd4:	9e01      	ldr	r6, [sp, #4]
 8014bd6:	9f03      	ldr	r7, [sp, #12]
 8014bd8:	1bae      	subs	r6, r5, r6
 8014bda:	42b7      	cmp	r7, r6
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	d135      	bne.n	8014c4e <_dtoa_r+0x6e6>
 8014be2:	f7eb fb7b 	bl	80002dc <__adddf3>
 8014be6:	4642      	mov	r2, r8
 8014be8:	464b      	mov	r3, r9
 8014bea:	4606      	mov	r6, r0
 8014bec:	460f      	mov	r7, r1
 8014bee:	f7eb ffbb 	bl	8000b68 <__aeabi_dcmpgt>
 8014bf2:	b9d0      	cbnz	r0, 8014c2a <_dtoa_r+0x6c2>
 8014bf4:	4642      	mov	r2, r8
 8014bf6:	464b      	mov	r3, r9
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	4639      	mov	r1, r7
 8014bfc:	f7eb ff8c 	bl	8000b18 <__aeabi_dcmpeq>
 8014c00:	b110      	cbz	r0, 8014c08 <_dtoa_r+0x6a0>
 8014c02:	f01a 0f01 	tst.w	sl, #1
 8014c06:	d110      	bne.n	8014c2a <_dtoa_r+0x6c2>
 8014c08:	4620      	mov	r0, r4
 8014c0a:	ee18 1a10 	vmov	r1, s16
 8014c0e:	f000 fd05 	bl	801561c <_Bfree>
 8014c12:	2300      	movs	r3, #0
 8014c14:	9800      	ldr	r0, [sp, #0]
 8014c16:	702b      	strb	r3, [r5, #0]
 8014c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c1a:	3001      	adds	r0, #1
 8014c1c:	6018      	str	r0, [r3, #0]
 8014c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	f43f acf1 	beq.w	8014608 <_dtoa_r+0xa0>
 8014c26:	601d      	str	r5, [r3, #0]
 8014c28:	e4ee      	b.n	8014608 <_dtoa_r+0xa0>
 8014c2a:	9f00      	ldr	r7, [sp, #0]
 8014c2c:	462b      	mov	r3, r5
 8014c2e:	461d      	mov	r5, r3
 8014c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c34:	2a39      	cmp	r2, #57	; 0x39
 8014c36:	d106      	bne.n	8014c46 <_dtoa_r+0x6de>
 8014c38:	9a01      	ldr	r2, [sp, #4]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d1f7      	bne.n	8014c2e <_dtoa_r+0x6c6>
 8014c3e:	9901      	ldr	r1, [sp, #4]
 8014c40:	2230      	movs	r2, #48	; 0x30
 8014c42:	3701      	adds	r7, #1
 8014c44:	700a      	strb	r2, [r1, #0]
 8014c46:	781a      	ldrb	r2, [r3, #0]
 8014c48:	3201      	adds	r2, #1
 8014c4a:	701a      	strb	r2, [r3, #0]
 8014c4c:	e790      	b.n	8014b70 <_dtoa_r+0x608>
 8014c4e:	4ba6      	ldr	r3, [pc, #664]	; (8014ee8 <_dtoa_r+0x980>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	f7eb fcf9 	bl	8000648 <__aeabi_dmul>
 8014c56:	2200      	movs	r2, #0
 8014c58:	2300      	movs	r3, #0
 8014c5a:	4606      	mov	r6, r0
 8014c5c:	460f      	mov	r7, r1
 8014c5e:	f7eb ff5b 	bl	8000b18 <__aeabi_dcmpeq>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d09d      	beq.n	8014ba2 <_dtoa_r+0x63a>
 8014c66:	e7cf      	b.n	8014c08 <_dtoa_r+0x6a0>
 8014c68:	9a08      	ldr	r2, [sp, #32]
 8014c6a:	2a00      	cmp	r2, #0
 8014c6c:	f000 80d7 	beq.w	8014e1e <_dtoa_r+0x8b6>
 8014c70:	9a06      	ldr	r2, [sp, #24]
 8014c72:	2a01      	cmp	r2, #1
 8014c74:	f300 80ba 	bgt.w	8014dec <_dtoa_r+0x884>
 8014c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c7a:	2a00      	cmp	r2, #0
 8014c7c:	f000 80b2 	beq.w	8014de4 <_dtoa_r+0x87c>
 8014c80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c84:	9e07      	ldr	r6, [sp, #28]
 8014c86:	9d04      	ldr	r5, [sp, #16]
 8014c88:	9a04      	ldr	r2, [sp, #16]
 8014c8a:	441a      	add	r2, r3
 8014c8c:	9204      	str	r2, [sp, #16]
 8014c8e:	9a05      	ldr	r2, [sp, #20]
 8014c90:	2101      	movs	r1, #1
 8014c92:	441a      	add	r2, r3
 8014c94:	4620      	mov	r0, r4
 8014c96:	9205      	str	r2, [sp, #20]
 8014c98:	f000 fd78 	bl	801578c <__i2b>
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	2d00      	cmp	r5, #0
 8014ca0:	dd0c      	ble.n	8014cbc <_dtoa_r+0x754>
 8014ca2:	9b05      	ldr	r3, [sp, #20]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	dd09      	ble.n	8014cbc <_dtoa_r+0x754>
 8014ca8:	42ab      	cmp	r3, r5
 8014caa:	9a04      	ldr	r2, [sp, #16]
 8014cac:	bfa8      	it	ge
 8014cae:	462b      	movge	r3, r5
 8014cb0:	1ad2      	subs	r2, r2, r3
 8014cb2:	9204      	str	r2, [sp, #16]
 8014cb4:	9a05      	ldr	r2, [sp, #20]
 8014cb6:	1aed      	subs	r5, r5, r3
 8014cb8:	1ad3      	subs	r3, r2, r3
 8014cba:	9305      	str	r3, [sp, #20]
 8014cbc:	9b07      	ldr	r3, [sp, #28]
 8014cbe:	b31b      	cbz	r3, 8014d08 <_dtoa_r+0x7a0>
 8014cc0:	9b08      	ldr	r3, [sp, #32]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	f000 80af 	beq.w	8014e26 <_dtoa_r+0x8be>
 8014cc8:	2e00      	cmp	r6, #0
 8014cca:	dd13      	ble.n	8014cf4 <_dtoa_r+0x78c>
 8014ccc:	4639      	mov	r1, r7
 8014cce:	4632      	mov	r2, r6
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fe1b 	bl	801590c <__pow5mult>
 8014cd6:	ee18 2a10 	vmov	r2, s16
 8014cda:	4601      	mov	r1, r0
 8014cdc:	4607      	mov	r7, r0
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f000 fd6a 	bl	80157b8 <__multiply>
 8014ce4:	ee18 1a10 	vmov	r1, s16
 8014ce8:	4680      	mov	r8, r0
 8014cea:	4620      	mov	r0, r4
 8014cec:	f000 fc96 	bl	801561c <_Bfree>
 8014cf0:	ee08 8a10 	vmov	s16, r8
 8014cf4:	9b07      	ldr	r3, [sp, #28]
 8014cf6:	1b9a      	subs	r2, r3, r6
 8014cf8:	d006      	beq.n	8014d08 <_dtoa_r+0x7a0>
 8014cfa:	ee18 1a10 	vmov	r1, s16
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f000 fe04 	bl	801590c <__pow5mult>
 8014d04:	ee08 0a10 	vmov	s16, r0
 8014d08:	2101      	movs	r1, #1
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f000 fd3e 	bl	801578c <__i2b>
 8014d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	4606      	mov	r6, r0
 8014d16:	f340 8088 	ble.w	8014e2a <_dtoa_r+0x8c2>
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	4601      	mov	r1, r0
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f000 fdf4 	bl	801590c <__pow5mult>
 8014d24:	9b06      	ldr	r3, [sp, #24]
 8014d26:	2b01      	cmp	r3, #1
 8014d28:	4606      	mov	r6, r0
 8014d2a:	f340 8081 	ble.w	8014e30 <_dtoa_r+0x8c8>
 8014d2e:	f04f 0800 	mov.w	r8, #0
 8014d32:	6933      	ldr	r3, [r6, #16]
 8014d34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014d38:	6918      	ldr	r0, [r3, #16]
 8014d3a:	f000 fcd7 	bl	80156ec <__hi0bits>
 8014d3e:	f1c0 0020 	rsb	r0, r0, #32
 8014d42:	9b05      	ldr	r3, [sp, #20]
 8014d44:	4418      	add	r0, r3
 8014d46:	f010 001f 	ands.w	r0, r0, #31
 8014d4a:	f000 8092 	beq.w	8014e72 <_dtoa_r+0x90a>
 8014d4e:	f1c0 0320 	rsb	r3, r0, #32
 8014d52:	2b04      	cmp	r3, #4
 8014d54:	f340 808a 	ble.w	8014e6c <_dtoa_r+0x904>
 8014d58:	f1c0 001c 	rsb	r0, r0, #28
 8014d5c:	9b04      	ldr	r3, [sp, #16]
 8014d5e:	4403      	add	r3, r0
 8014d60:	9304      	str	r3, [sp, #16]
 8014d62:	9b05      	ldr	r3, [sp, #20]
 8014d64:	4403      	add	r3, r0
 8014d66:	4405      	add	r5, r0
 8014d68:	9305      	str	r3, [sp, #20]
 8014d6a:	9b04      	ldr	r3, [sp, #16]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	dd07      	ble.n	8014d80 <_dtoa_r+0x818>
 8014d70:	ee18 1a10 	vmov	r1, s16
 8014d74:	461a      	mov	r2, r3
 8014d76:	4620      	mov	r0, r4
 8014d78:	f000 fe22 	bl	80159c0 <__lshift>
 8014d7c:	ee08 0a10 	vmov	s16, r0
 8014d80:	9b05      	ldr	r3, [sp, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	dd05      	ble.n	8014d92 <_dtoa_r+0x82a>
 8014d86:	4631      	mov	r1, r6
 8014d88:	461a      	mov	r2, r3
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f000 fe18 	bl	80159c0 <__lshift>
 8014d90:	4606      	mov	r6, r0
 8014d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d06e      	beq.n	8014e76 <_dtoa_r+0x90e>
 8014d98:	ee18 0a10 	vmov	r0, s16
 8014d9c:	4631      	mov	r1, r6
 8014d9e:	f000 fe7f 	bl	8015aa0 <__mcmp>
 8014da2:	2800      	cmp	r0, #0
 8014da4:	da67      	bge.n	8014e76 <_dtoa_r+0x90e>
 8014da6:	9b00      	ldr	r3, [sp, #0]
 8014da8:	3b01      	subs	r3, #1
 8014daa:	ee18 1a10 	vmov	r1, s16
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	220a      	movs	r2, #10
 8014db2:	2300      	movs	r3, #0
 8014db4:	4620      	mov	r0, r4
 8014db6:	f000 fc53 	bl	8015660 <__multadd>
 8014dba:	9b08      	ldr	r3, [sp, #32]
 8014dbc:	ee08 0a10 	vmov	s16, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 81b1 	beq.w	8015128 <_dtoa_r+0xbc0>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	4639      	mov	r1, r7
 8014dca:	220a      	movs	r2, #10
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f000 fc47 	bl	8015660 <__multadd>
 8014dd2:	9b02      	ldr	r3, [sp, #8]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	4607      	mov	r7, r0
 8014dd8:	f300 808e 	bgt.w	8014ef8 <_dtoa_r+0x990>
 8014ddc:	9b06      	ldr	r3, [sp, #24]
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	dc51      	bgt.n	8014e86 <_dtoa_r+0x91e>
 8014de2:	e089      	b.n	8014ef8 <_dtoa_r+0x990>
 8014de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014dea:	e74b      	b.n	8014c84 <_dtoa_r+0x71c>
 8014dec:	9b03      	ldr	r3, [sp, #12]
 8014dee:	1e5e      	subs	r6, r3, #1
 8014df0:	9b07      	ldr	r3, [sp, #28]
 8014df2:	42b3      	cmp	r3, r6
 8014df4:	bfbf      	itttt	lt
 8014df6:	9b07      	ldrlt	r3, [sp, #28]
 8014df8:	9607      	strlt	r6, [sp, #28]
 8014dfa:	1af2      	sublt	r2, r6, r3
 8014dfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014dfe:	bfb6      	itet	lt
 8014e00:	189b      	addlt	r3, r3, r2
 8014e02:	1b9e      	subge	r6, r3, r6
 8014e04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014e06:	9b03      	ldr	r3, [sp, #12]
 8014e08:	bfb8      	it	lt
 8014e0a:	2600      	movlt	r6, #0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	bfb7      	itett	lt
 8014e10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014e14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014e18:	1a9d      	sublt	r5, r3, r2
 8014e1a:	2300      	movlt	r3, #0
 8014e1c:	e734      	b.n	8014c88 <_dtoa_r+0x720>
 8014e1e:	9e07      	ldr	r6, [sp, #28]
 8014e20:	9d04      	ldr	r5, [sp, #16]
 8014e22:	9f08      	ldr	r7, [sp, #32]
 8014e24:	e73b      	b.n	8014c9e <_dtoa_r+0x736>
 8014e26:	9a07      	ldr	r2, [sp, #28]
 8014e28:	e767      	b.n	8014cfa <_dtoa_r+0x792>
 8014e2a:	9b06      	ldr	r3, [sp, #24]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	dc18      	bgt.n	8014e62 <_dtoa_r+0x8fa>
 8014e30:	f1ba 0f00 	cmp.w	sl, #0
 8014e34:	d115      	bne.n	8014e62 <_dtoa_r+0x8fa>
 8014e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e3a:	b993      	cbnz	r3, 8014e62 <_dtoa_r+0x8fa>
 8014e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e40:	0d1b      	lsrs	r3, r3, #20
 8014e42:	051b      	lsls	r3, r3, #20
 8014e44:	b183      	cbz	r3, 8014e68 <_dtoa_r+0x900>
 8014e46:	9b04      	ldr	r3, [sp, #16]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	9304      	str	r3, [sp, #16]
 8014e4c:	9b05      	ldr	r3, [sp, #20]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	9305      	str	r3, [sp, #20]
 8014e52:	f04f 0801 	mov.w	r8, #1
 8014e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	f47f af6a 	bne.w	8014d32 <_dtoa_r+0x7ca>
 8014e5e:	2001      	movs	r0, #1
 8014e60:	e76f      	b.n	8014d42 <_dtoa_r+0x7da>
 8014e62:	f04f 0800 	mov.w	r8, #0
 8014e66:	e7f6      	b.n	8014e56 <_dtoa_r+0x8ee>
 8014e68:	4698      	mov	r8, r3
 8014e6a:	e7f4      	b.n	8014e56 <_dtoa_r+0x8ee>
 8014e6c:	f43f af7d 	beq.w	8014d6a <_dtoa_r+0x802>
 8014e70:	4618      	mov	r0, r3
 8014e72:	301c      	adds	r0, #28
 8014e74:	e772      	b.n	8014d5c <_dtoa_r+0x7f4>
 8014e76:	9b03      	ldr	r3, [sp, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	dc37      	bgt.n	8014eec <_dtoa_r+0x984>
 8014e7c:	9b06      	ldr	r3, [sp, #24]
 8014e7e:	2b02      	cmp	r3, #2
 8014e80:	dd34      	ble.n	8014eec <_dtoa_r+0x984>
 8014e82:	9b03      	ldr	r3, [sp, #12]
 8014e84:	9302      	str	r3, [sp, #8]
 8014e86:	9b02      	ldr	r3, [sp, #8]
 8014e88:	b96b      	cbnz	r3, 8014ea6 <_dtoa_r+0x93e>
 8014e8a:	4631      	mov	r1, r6
 8014e8c:	2205      	movs	r2, #5
 8014e8e:	4620      	mov	r0, r4
 8014e90:	f000 fbe6 	bl	8015660 <__multadd>
 8014e94:	4601      	mov	r1, r0
 8014e96:	4606      	mov	r6, r0
 8014e98:	ee18 0a10 	vmov	r0, s16
 8014e9c:	f000 fe00 	bl	8015aa0 <__mcmp>
 8014ea0:	2800      	cmp	r0, #0
 8014ea2:	f73f adbb 	bgt.w	8014a1c <_dtoa_r+0x4b4>
 8014ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ea8:	9d01      	ldr	r5, [sp, #4]
 8014eaa:	43db      	mvns	r3, r3
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	f04f 0800 	mov.w	r8, #0
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	f000 fbb1 	bl	801561c <_Bfree>
 8014eba:	2f00      	cmp	r7, #0
 8014ebc:	f43f aea4 	beq.w	8014c08 <_dtoa_r+0x6a0>
 8014ec0:	f1b8 0f00 	cmp.w	r8, #0
 8014ec4:	d005      	beq.n	8014ed2 <_dtoa_r+0x96a>
 8014ec6:	45b8      	cmp	r8, r7
 8014ec8:	d003      	beq.n	8014ed2 <_dtoa_r+0x96a>
 8014eca:	4641      	mov	r1, r8
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f000 fba5 	bl	801561c <_Bfree>
 8014ed2:	4639      	mov	r1, r7
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	f000 fba1 	bl	801561c <_Bfree>
 8014eda:	e695      	b.n	8014c08 <_dtoa_r+0x6a0>
 8014edc:	2600      	movs	r6, #0
 8014ede:	4637      	mov	r7, r6
 8014ee0:	e7e1      	b.n	8014ea6 <_dtoa_r+0x93e>
 8014ee2:	9700      	str	r7, [sp, #0]
 8014ee4:	4637      	mov	r7, r6
 8014ee6:	e599      	b.n	8014a1c <_dtoa_r+0x4b4>
 8014ee8:	40240000 	.word	0x40240000
 8014eec:	9b08      	ldr	r3, [sp, #32]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f000 80ca 	beq.w	8015088 <_dtoa_r+0xb20>
 8014ef4:	9b03      	ldr	r3, [sp, #12]
 8014ef6:	9302      	str	r3, [sp, #8]
 8014ef8:	2d00      	cmp	r5, #0
 8014efa:	dd05      	ble.n	8014f08 <_dtoa_r+0x9a0>
 8014efc:	4639      	mov	r1, r7
 8014efe:	462a      	mov	r2, r5
 8014f00:	4620      	mov	r0, r4
 8014f02:	f000 fd5d 	bl	80159c0 <__lshift>
 8014f06:	4607      	mov	r7, r0
 8014f08:	f1b8 0f00 	cmp.w	r8, #0
 8014f0c:	d05b      	beq.n	8014fc6 <_dtoa_r+0xa5e>
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 fb43 	bl	801559c <_Balloc>
 8014f16:	4605      	mov	r5, r0
 8014f18:	b928      	cbnz	r0, 8014f26 <_dtoa_r+0x9be>
 8014f1a:	4b87      	ldr	r3, [pc, #540]	; (8015138 <_dtoa_r+0xbd0>)
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014f22:	f7ff bb3b 	b.w	801459c <_dtoa_r+0x34>
 8014f26:	693a      	ldr	r2, [r7, #16]
 8014f28:	3202      	adds	r2, #2
 8014f2a:	0092      	lsls	r2, r2, #2
 8014f2c:	f107 010c 	add.w	r1, r7, #12
 8014f30:	300c      	adds	r0, #12
 8014f32:	f7fe fcbd 	bl	80138b0 <memcpy>
 8014f36:	2201      	movs	r2, #1
 8014f38:	4629      	mov	r1, r5
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f000 fd40 	bl	80159c0 <__lshift>
 8014f40:	9b01      	ldr	r3, [sp, #4]
 8014f42:	f103 0901 	add.w	r9, r3, #1
 8014f46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	9305      	str	r3, [sp, #20]
 8014f4e:	f00a 0301 	and.w	r3, sl, #1
 8014f52:	46b8      	mov	r8, r7
 8014f54:	9304      	str	r3, [sp, #16]
 8014f56:	4607      	mov	r7, r0
 8014f58:	4631      	mov	r1, r6
 8014f5a:	ee18 0a10 	vmov	r0, s16
 8014f5e:	f7ff fa75 	bl	801444c <quorem>
 8014f62:	4641      	mov	r1, r8
 8014f64:	9002      	str	r0, [sp, #8]
 8014f66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f6a:	ee18 0a10 	vmov	r0, s16
 8014f6e:	f000 fd97 	bl	8015aa0 <__mcmp>
 8014f72:	463a      	mov	r2, r7
 8014f74:	9003      	str	r0, [sp, #12]
 8014f76:	4631      	mov	r1, r6
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f000 fdad 	bl	8015ad8 <__mdiff>
 8014f7e:	68c2      	ldr	r2, [r0, #12]
 8014f80:	f109 3bff 	add.w	fp, r9, #4294967295
 8014f84:	4605      	mov	r5, r0
 8014f86:	bb02      	cbnz	r2, 8014fca <_dtoa_r+0xa62>
 8014f88:	4601      	mov	r1, r0
 8014f8a:	ee18 0a10 	vmov	r0, s16
 8014f8e:	f000 fd87 	bl	8015aa0 <__mcmp>
 8014f92:	4602      	mov	r2, r0
 8014f94:	4629      	mov	r1, r5
 8014f96:	4620      	mov	r0, r4
 8014f98:	9207      	str	r2, [sp, #28]
 8014f9a:	f000 fb3f 	bl	801561c <_Bfree>
 8014f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014fa2:	ea43 0102 	orr.w	r1, r3, r2
 8014fa6:	9b04      	ldr	r3, [sp, #16]
 8014fa8:	430b      	orrs	r3, r1
 8014faa:	464d      	mov	r5, r9
 8014fac:	d10f      	bne.n	8014fce <_dtoa_r+0xa66>
 8014fae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fb2:	d02a      	beq.n	801500a <_dtoa_r+0xaa2>
 8014fb4:	9b03      	ldr	r3, [sp, #12]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dd02      	ble.n	8014fc0 <_dtoa_r+0xa58>
 8014fba:	9b02      	ldr	r3, [sp, #8]
 8014fbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014fc0:	f88b a000 	strb.w	sl, [fp]
 8014fc4:	e775      	b.n	8014eb2 <_dtoa_r+0x94a>
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	e7ba      	b.n	8014f40 <_dtoa_r+0x9d8>
 8014fca:	2201      	movs	r2, #1
 8014fcc:	e7e2      	b.n	8014f94 <_dtoa_r+0xa2c>
 8014fce:	9b03      	ldr	r3, [sp, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	db04      	blt.n	8014fde <_dtoa_r+0xa76>
 8014fd4:	9906      	ldr	r1, [sp, #24]
 8014fd6:	430b      	orrs	r3, r1
 8014fd8:	9904      	ldr	r1, [sp, #16]
 8014fda:	430b      	orrs	r3, r1
 8014fdc:	d122      	bne.n	8015024 <_dtoa_r+0xabc>
 8014fde:	2a00      	cmp	r2, #0
 8014fe0:	ddee      	ble.n	8014fc0 <_dtoa_r+0xa58>
 8014fe2:	ee18 1a10 	vmov	r1, s16
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f000 fce9 	bl	80159c0 <__lshift>
 8014fee:	4631      	mov	r1, r6
 8014ff0:	ee08 0a10 	vmov	s16, r0
 8014ff4:	f000 fd54 	bl	8015aa0 <__mcmp>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	dc03      	bgt.n	8015004 <_dtoa_r+0xa9c>
 8014ffc:	d1e0      	bne.n	8014fc0 <_dtoa_r+0xa58>
 8014ffe:	f01a 0f01 	tst.w	sl, #1
 8015002:	d0dd      	beq.n	8014fc0 <_dtoa_r+0xa58>
 8015004:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015008:	d1d7      	bne.n	8014fba <_dtoa_r+0xa52>
 801500a:	2339      	movs	r3, #57	; 0x39
 801500c:	f88b 3000 	strb.w	r3, [fp]
 8015010:	462b      	mov	r3, r5
 8015012:	461d      	mov	r5, r3
 8015014:	3b01      	subs	r3, #1
 8015016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801501a:	2a39      	cmp	r2, #57	; 0x39
 801501c:	d071      	beq.n	8015102 <_dtoa_r+0xb9a>
 801501e:	3201      	adds	r2, #1
 8015020:	701a      	strb	r2, [r3, #0]
 8015022:	e746      	b.n	8014eb2 <_dtoa_r+0x94a>
 8015024:	2a00      	cmp	r2, #0
 8015026:	dd07      	ble.n	8015038 <_dtoa_r+0xad0>
 8015028:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801502c:	d0ed      	beq.n	801500a <_dtoa_r+0xaa2>
 801502e:	f10a 0301 	add.w	r3, sl, #1
 8015032:	f88b 3000 	strb.w	r3, [fp]
 8015036:	e73c      	b.n	8014eb2 <_dtoa_r+0x94a>
 8015038:	9b05      	ldr	r3, [sp, #20]
 801503a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801503e:	4599      	cmp	r9, r3
 8015040:	d047      	beq.n	80150d2 <_dtoa_r+0xb6a>
 8015042:	ee18 1a10 	vmov	r1, s16
 8015046:	2300      	movs	r3, #0
 8015048:	220a      	movs	r2, #10
 801504a:	4620      	mov	r0, r4
 801504c:	f000 fb08 	bl	8015660 <__multadd>
 8015050:	45b8      	cmp	r8, r7
 8015052:	ee08 0a10 	vmov	s16, r0
 8015056:	f04f 0300 	mov.w	r3, #0
 801505a:	f04f 020a 	mov.w	r2, #10
 801505e:	4641      	mov	r1, r8
 8015060:	4620      	mov	r0, r4
 8015062:	d106      	bne.n	8015072 <_dtoa_r+0xb0a>
 8015064:	f000 fafc 	bl	8015660 <__multadd>
 8015068:	4680      	mov	r8, r0
 801506a:	4607      	mov	r7, r0
 801506c:	f109 0901 	add.w	r9, r9, #1
 8015070:	e772      	b.n	8014f58 <_dtoa_r+0x9f0>
 8015072:	f000 faf5 	bl	8015660 <__multadd>
 8015076:	4639      	mov	r1, r7
 8015078:	4680      	mov	r8, r0
 801507a:	2300      	movs	r3, #0
 801507c:	220a      	movs	r2, #10
 801507e:	4620      	mov	r0, r4
 8015080:	f000 faee 	bl	8015660 <__multadd>
 8015084:	4607      	mov	r7, r0
 8015086:	e7f1      	b.n	801506c <_dtoa_r+0xb04>
 8015088:	9b03      	ldr	r3, [sp, #12]
 801508a:	9302      	str	r3, [sp, #8]
 801508c:	9d01      	ldr	r5, [sp, #4]
 801508e:	ee18 0a10 	vmov	r0, s16
 8015092:	4631      	mov	r1, r6
 8015094:	f7ff f9da 	bl	801444c <quorem>
 8015098:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801509c:	9b01      	ldr	r3, [sp, #4]
 801509e:	f805 ab01 	strb.w	sl, [r5], #1
 80150a2:	1aea      	subs	r2, r5, r3
 80150a4:	9b02      	ldr	r3, [sp, #8]
 80150a6:	4293      	cmp	r3, r2
 80150a8:	dd09      	ble.n	80150be <_dtoa_r+0xb56>
 80150aa:	ee18 1a10 	vmov	r1, s16
 80150ae:	2300      	movs	r3, #0
 80150b0:	220a      	movs	r2, #10
 80150b2:	4620      	mov	r0, r4
 80150b4:	f000 fad4 	bl	8015660 <__multadd>
 80150b8:	ee08 0a10 	vmov	s16, r0
 80150bc:	e7e7      	b.n	801508e <_dtoa_r+0xb26>
 80150be:	9b02      	ldr	r3, [sp, #8]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	bfc8      	it	gt
 80150c4:	461d      	movgt	r5, r3
 80150c6:	9b01      	ldr	r3, [sp, #4]
 80150c8:	bfd8      	it	le
 80150ca:	2501      	movle	r5, #1
 80150cc:	441d      	add	r5, r3
 80150ce:	f04f 0800 	mov.w	r8, #0
 80150d2:	ee18 1a10 	vmov	r1, s16
 80150d6:	2201      	movs	r2, #1
 80150d8:	4620      	mov	r0, r4
 80150da:	f000 fc71 	bl	80159c0 <__lshift>
 80150de:	4631      	mov	r1, r6
 80150e0:	ee08 0a10 	vmov	s16, r0
 80150e4:	f000 fcdc 	bl	8015aa0 <__mcmp>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	dc91      	bgt.n	8015010 <_dtoa_r+0xaa8>
 80150ec:	d102      	bne.n	80150f4 <_dtoa_r+0xb8c>
 80150ee:	f01a 0f01 	tst.w	sl, #1
 80150f2:	d18d      	bne.n	8015010 <_dtoa_r+0xaa8>
 80150f4:	462b      	mov	r3, r5
 80150f6:	461d      	mov	r5, r3
 80150f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150fc:	2a30      	cmp	r2, #48	; 0x30
 80150fe:	d0fa      	beq.n	80150f6 <_dtoa_r+0xb8e>
 8015100:	e6d7      	b.n	8014eb2 <_dtoa_r+0x94a>
 8015102:	9a01      	ldr	r2, [sp, #4]
 8015104:	429a      	cmp	r2, r3
 8015106:	d184      	bne.n	8015012 <_dtoa_r+0xaaa>
 8015108:	9b00      	ldr	r3, [sp, #0]
 801510a:	3301      	adds	r3, #1
 801510c:	9300      	str	r3, [sp, #0]
 801510e:	2331      	movs	r3, #49	; 0x31
 8015110:	7013      	strb	r3, [r2, #0]
 8015112:	e6ce      	b.n	8014eb2 <_dtoa_r+0x94a>
 8015114:	4b09      	ldr	r3, [pc, #36]	; (801513c <_dtoa_r+0xbd4>)
 8015116:	f7ff ba95 	b.w	8014644 <_dtoa_r+0xdc>
 801511a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801511c:	2b00      	cmp	r3, #0
 801511e:	f47f aa6e 	bne.w	80145fe <_dtoa_r+0x96>
 8015122:	4b07      	ldr	r3, [pc, #28]	; (8015140 <_dtoa_r+0xbd8>)
 8015124:	f7ff ba8e 	b.w	8014644 <_dtoa_r+0xdc>
 8015128:	9b02      	ldr	r3, [sp, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	dcae      	bgt.n	801508c <_dtoa_r+0xb24>
 801512e:	9b06      	ldr	r3, [sp, #24]
 8015130:	2b02      	cmp	r3, #2
 8015132:	f73f aea8 	bgt.w	8014e86 <_dtoa_r+0x91e>
 8015136:	e7a9      	b.n	801508c <_dtoa_r+0xb24>
 8015138:	08016acf 	.word	0x08016acf
 801513c:	08016a2c 	.word	0x08016a2c
 8015140:	08016a50 	.word	0x08016a50

08015144 <__sflush_r>:
 8015144:	898a      	ldrh	r2, [r1, #12]
 8015146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801514a:	4605      	mov	r5, r0
 801514c:	0710      	lsls	r0, r2, #28
 801514e:	460c      	mov	r4, r1
 8015150:	d458      	bmi.n	8015204 <__sflush_r+0xc0>
 8015152:	684b      	ldr	r3, [r1, #4]
 8015154:	2b00      	cmp	r3, #0
 8015156:	dc05      	bgt.n	8015164 <__sflush_r+0x20>
 8015158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801515a:	2b00      	cmp	r3, #0
 801515c:	dc02      	bgt.n	8015164 <__sflush_r+0x20>
 801515e:	2000      	movs	r0, #0
 8015160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015166:	2e00      	cmp	r6, #0
 8015168:	d0f9      	beq.n	801515e <__sflush_r+0x1a>
 801516a:	2300      	movs	r3, #0
 801516c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015170:	682f      	ldr	r7, [r5, #0]
 8015172:	602b      	str	r3, [r5, #0]
 8015174:	d032      	beq.n	80151dc <__sflush_r+0x98>
 8015176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015178:	89a3      	ldrh	r3, [r4, #12]
 801517a:	075a      	lsls	r2, r3, #29
 801517c:	d505      	bpl.n	801518a <__sflush_r+0x46>
 801517e:	6863      	ldr	r3, [r4, #4]
 8015180:	1ac0      	subs	r0, r0, r3
 8015182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015184:	b10b      	cbz	r3, 801518a <__sflush_r+0x46>
 8015186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015188:	1ac0      	subs	r0, r0, r3
 801518a:	2300      	movs	r3, #0
 801518c:	4602      	mov	r2, r0
 801518e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015190:	6a21      	ldr	r1, [r4, #32]
 8015192:	4628      	mov	r0, r5
 8015194:	47b0      	blx	r6
 8015196:	1c43      	adds	r3, r0, #1
 8015198:	89a3      	ldrh	r3, [r4, #12]
 801519a:	d106      	bne.n	80151aa <__sflush_r+0x66>
 801519c:	6829      	ldr	r1, [r5, #0]
 801519e:	291d      	cmp	r1, #29
 80151a0:	d82c      	bhi.n	80151fc <__sflush_r+0xb8>
 80151a2:	4a2a      	ldr	r2, [pc, #168]	; (801524c <__sflush_r+0x108>)
 80151a4:	40ca      	lsrs	r2, r1
 80151a6:	07d6      	lsls	r6, r2, #31
 80151a8:	d528      	bpl.n	80151fc <__sflush_r+0xb8>
 80151aa:	2200      	movs	r2, #0
 80151ac:	6062      	str	r2, [r4, #4]
 80151ae:	04d9      	lsls	r1, r3, #19
 80151b0:	6922      	ldr	r2, [r4, #16]
 80151b2:	6022      	str	r2, [r4, #0]
 80151b4:	d504      	bpl.n	80151c0 <__sflush_r+0x7c>
 80151b6:	1c42      	adds	r2, r0, #1
 80151b8:	d101      	bne.n	80151be <__sflush_r+0x7a>
 80151ba:	682b      	ldr	r3, [r5, #0]
 80151bc:	b903      	cbnz	r3, 80151c0 <__sflush_r+0x7c>
 80151be:	6560      	str	r0, [r4, #84]	; 0x54
 80151c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151c2:	602f      	str	r7, [r5, #0]
 80151c4:	2900      	cmp	r1, #0
 80151c6:	d0ca      	beq.n	801515e <__sflush_r+0x1a>
 80151c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151cc:	4299      	cmp	r1, r3
 80151ce:	d002      	beq.n	80151d6 <__sflush_r+0x92>
 80151d0:	4628      	mov	r0, r5
 80151d2:	f000 fd7d 	bl	8015cd0 <_free_r>
 80151d6:	2000      	movs	r0, #0
 80151d8:	6360      	str	r0, [r4, #52]	; 0x34
 80151da:	e7c1      	b.n	8015160 <__sflush_r+0x1c>
 80151dc:	6a21      	ldr	r1, [r4, #32]
 80151de:	2301      	movs	r3, #1
 80151e0:	4628      	mov	r0, r5
 80151e2:	47b0      	blx	r6
 80151e4:	1c41      	adds	r1, r0, #1
 80151e6:	d1c7      	bne.n	8015178 <__sflush_r+0x34>
 80151e8:	682b      	ldr	r3, [r5, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d0c4      	beq.n	8015178 <__sflush_r+0x34>
 80151ee:	2b1d      	cmp	r3, #29
 80151f0:	d001      	beq.n	80151f6 <__sflush_r+0xb2>
 80151f2:	2b16      	cmp	r3, #22
 80151f4:	d101      	bne.n	80151fa <__sflush_r+0xb6>
 80151f6:	602f      	str	r7, [r5, #0]
 80151f8:	e7b1      	b.n	801515e <__sflush_r+0x1a>
 80151fa:	89a3      	ldrh	r3, [r4, #12]
 80151fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015200:	81a3      	strh	r3, [r4, #12]
 8015202:	e7ad      	b.n	8015160 <__sflush_r+0x1c>
 8015204:	690f      	ldr	r7, [r1, #16]
 8015206:	2f00      	cmp	r7, #0
 8015208:	d0a9      	beq.n	801515e <__sflush_r+0x1a>
 801520a:	0793      	lsls	r3, r2, #30
 801520c:	680e      	ldr	r6, [r1, #0]
 801520e:	bf08      	it	eq
 8015210:	694b      	ldreq	r3, [r1, #20]
 8015212:	600f      	str	r7, [r1, #0]
 8015214:	bf18      	it	ne
 8015216:	2300      	movne	r3, #0
 8015218:	eba6 0807 	sub.w	r8, r6, r7
 801521c:	608b      	str	r3, [r1, #8]
 801521e:	f1b8 0f00 	cmp.w	r8, #0
 8015222:	dd9c      	ble.n	801515e <__sflush_r+0x1a>
 8015224:	6a21      	ldr	r1, [r4, #32]
 8015226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015228:	4643      	mov	r3, r8
 801522a:	463a      	mov	r2, r7
 801522c:	4628      	mov	r0, r5
 801522e:	47b0      	blx	r6
 8015230:	2800      	cmp	r0, #0
 8015232:	dc06      	bgt.n	8015242 <__sflush_r+0xfe>
 8015234:	89a3      	ldrh	r3, [r4, #12]
 8015236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801523a:	81a3      	strh	r3, [r4, #12]
 801523c:	f04f 30ff 	mov.w	r0, #4294967295
 8015240:	e78e      	b.n	8015160 <__sflush_r+0x1c>
 8015242:	4407      	add	r7, r0
 8015244:	eba8 0800 	sub.w	r8, r8, r0
 8015248:	e7e9      	b.n	801521e <__sflush_r+0xda>
 801524a:	bf00      	nop
 801524c:	20400001 	.word	0x20400001

08015250 <_fflush_r>:
 8015250:	b538      	push	{r3, r4, r5, lr}
 8015252:	690b      	ldr	r3, [r1, #16]
 8015254:	4605      	mov	r5, r0
 8015256:	460c      	mov	r4, r1
 8015258:	b913      	cbnz	r3, 8015260 <_fflush_r+0x10>
 801525a:	2500      	movs	r5, #0
 801525c:	4628      	mov	r0, r5
 801525e:	bd38      	pop	{r3, r4, r5, pc}
 8015260:	b118      	cbz	r0, 801526a <_fflush_r+0x1a>
 8015262:	6983      	ldr	r3, [r0, #24]
 8015264:	b90b      	cbnz	r3, 801526a <_fflush_r+0x1a>
 8015266:	f000 f887 	bl	8015378 <__sinit>
 801526a:	4b14      	ldr	r3, [pc, #80]	; (80152bc <_fflush_r+0x6c>)
 801526c:	429c      	cmp	r4, r3
 801526e:	d11b      	bne.n	80152a8 <_fflush_r+0x58>
 8015270:	686c      	ldr	r4, [r5, #4]
 8015272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d0ef      	beq.n	801525a <_fflush_r+0xa>
 801527a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801527c:	07d0      	lsls	r0, r2, #31
 801527e:	d404      	bmi.n	801528a <_fflush_r+0x3a>
 8015280:	0599      	lsls	r1, r3, #22
 8015282:	d402      	bmi.n	801528a <_fflush_r+0x3a>
 8015284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015286:	f000 f91a 	bl	80154be <__retarget_lock_acquire_recursive>
 801528a:	4628      	mov	r0, r5
 801528c:	4621      	mov	r1, r4
 801528e:	f7ff ff59 	bl	8015144 <__sflush_r>
 8015292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015294:	07da      	lsls	r2, r3, #31
 8015296:	4605      	mov	r5, r0
 8015298:	d4e0      	bmi.n	801525c <_fflush_r+0xc>
 801529a:	89a3      	ldrh	r3, [r4, #12]
 801529c:	059b      	lsls	r3, r3, #22
 801529e:	d4dd      	bmi.n	801525c <_fflush_r+0xc>
 80152a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152a2:	f000 f90d 	bl	80154c0 <__retarget_lock_release_recursive>
 80152a6:	e7d9      	b.n	801525c <_fflush_r+0xc>
 80152a8:	4b05      	ldr	r3, [pc, #20]	; (80152c0 <_fflush_r+0x70>)
 80152aa:	429c      	cmp	r4, r3
 80152ac:	d101      	bne.n	80152b2 <_fflush_r+0x62>
 80152ae:	68ac      	ldr	r4, [r5, #8]
 80152b0:	e7df      	b.n	8015272 <_fflush_r+0x22>
 80152b2:	4b04      	ldr	r3, [pc, #16]	; (80152c4 <_fflush_r+0x74>)
 80152b4:	429c      	cmp	r4, r3
 80152b6:	bf08      	it	eq
 80152b8:	68ec      	ldreq	r4, [r5, #12]
 80152ba:	e7da      	b.n	8015272 <_fflush_r+0x22>
 80152bc:	08016b00 	.word	0x08016b00
 80152c0:	08016b20 	.word	0x08016b20
 80152c4:	08016ae0 	.word	0x08016ae0

080152c8 <std>:
 80152c8:	2300      	movs	r3, #0
 80152ca:	b510      	push	{r4, lr}
 80152cc:	4604      	mov	r4, r0
 80152ce:	e9c0 3300 	strd	r3, r3, [r0]
 80152d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152d6:	6083      	str	r3, [r0, #8]
 80152d8:	8181      	strh	r1, [r0, #12]
 80152da:	6643      	str	r3, [r0, #100]	; 0x64
 80152dc:	81c2      	strh	r2, [r0, #14]
 80152de:	6183      	str	r3, [r0, #24]
 80152e0:	4619      	mov	r1, r3
 80152e2:	2208      	movs	r2, #8
 80152e4:	305c      	adds	r0, #92	; 0x5c
 80152e6:	f7fe faf1 	bl	80138cc <memset>
 80152ea:	4b05      	ldr	r3, [pc, #20]	; (8015300 <std+0x38>)
 80152ec:	6263      	str	r3, [r4, #36]	; 0x24
 80152ee:	4b05      	ldr	r3, [pc, #20]	; (8015304 <std+0x3c>)
 80152f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80152f2:	4b05      	ldr	r3, [pc, #20]	; (8015308 <std+0x40>)
 80152f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80152f6:	4b05      	ldr	r3, [pc, #20]	; (801530c <std+0x44>)
 80152f8:	6224      	str	r4, [r4, #32]
 80152fa:	6323      	str	r3, [r4, #48]	; 0x30
 80152fc:	bd10      	pop	{r4, pc}
 80152fe:	bf00      	nop
 8015300:	08016165 	.word	0x08016165
 8015304:	08016187 	.word	0x08016187
 8015308:	080161bf 	.word	0x080161bf
 801530c:	080161e3 	.word	0x080161e3

08015310 <_cleanup_r>:
 8015310:	4901      	ldr	r1, [pc, #4]	; (8015318 <_cleanup_r+0x8>)
 8015312:	f000 b8af 	b.w	8015474 <_fwalk_reent>
 8015316:	bf00      	nop
 8015318:	08015251 	.word	0x08015251

0801531c <__sfmoreglue>:
 801531c:	b570      	push	{r4, r5, r6, lr}
 801531e:	2268      	movs	r2, #104	; 0x68
 8015320:	1e4d      	subs	r5, r1, #1
 8015322:	4355      	muls	r5, r2
 8015324:	460e      	mov	r6, r1
 8015326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801532a:	f000 fd3d 	bl	8015da8 <_malloc_r>
 801532e:	4604      	mov	r4, r0
 8015330:	b140      	cbz	r0, 8015344 <__sfmoreglue+0x28>
 8015332:	2100      	movs	r1, #0
 8015334:	e9c0 1600 	strd	r1, r6, [r0]
 8015338:	300c      	adds	r0, #12
 801533a:	60a0      	str	r0, [r4, #8]
 801533c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015340:	f7fe fac4 	bl	80138cc <memset>
 8015344:	4620      	mov	r0, r4
 8015346:	bd70      	pop	{r4, r5, r6, pc}

08015348 <__sfp_lock_acquire>:
 8015348:	4801      	ldr	r0, [pc, #4]	; (8015350 <__sfp_lock_acquire+0x8>)
 801534a:	f000 b8b8 	b.w	80154be <__retarget_lock_acquire_recursive>
 801534e:	bf00      	nop
 8015350:	20002485 	.word	0x20002485

08015354 <__sfp_lock_release>:
 8015354:	4801      	ldr	r0, [pc, #4]	; (801535c <__sfp_lock_release+0x8>)
 8015356:	f000 b8b3 	b.w	80154c0 <__retarget_lock_release_recursive>
 801535a:	bf00      	nop
 801535c:	20002485 	.word	0x20002485

08015360 <__sinit_lock_acquire>:
 8015360:	4801      	ldr	r0, [pc, #4]	; (8015368 <__sinit_lock_acquire+0x8>)
 8015362:	f000 b8ac 	b.w	80154be <__retarget_lock_acquire_recursive>
 8015366:	bf00      	nop
 8015368:	20002486 	.word	0x20002486

0801536c <__sinit_lock_release>:
 801536c:	4801      	ldr	r0, [pc, #4]	; (8015374 <__sinit_lock_release+0x8>)
 801536e:	f000 b8a7 	b.w	80154c0 <__retarget_lock_release_recursive>
 8015372:	bf00      	nop
 8015374:	20002486 	.word	0x20002486

08015378 <__sinit>:
 8015378:	b510      	push	{r4, lr}
 801537a:	4604      	mov	r4, r0
 801537c:	f7ff fff0 	bl	8015360 <__sinit_lock_acquire>
 8015380:	69a3      	ldr	r3, [r4, #24]
 8015382:	b11b      	cbz	r3, 801538c <__sinit+0x14>
 8015384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015388:	f7ff bff0 	b.w	801536c <__sinit_lock_release>
 801538c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015390:	6523      	str	r3, [r4, #80]	; 0x50
 8015392:	4b13      	ldr	r3, [pc, #76]	; (80153e0 <__sinit+0x68>)
 8015394:	4a13      	ldr	r2, [pc, #76]	; (80153e4 <__sinit+0x6c>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	62a2      	str	r2, [r4, #40]	; 0x28
 801539a:	42a3      	cmp	r3, r4
 801539c:	bf04      	itt	eq
 801539e:	2301      	moveq	r3, #1
 80153a0:	61a3      	streq	r3, [r4, #24]
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 f820 	bl	80153e8 <__sfp>
 80153a8:	6060      	str	r0, [r4, #4]
 80153aa:	4620      	mov	r0, r4
 80153ac:	f000 f81c 	bl	80153e8 <__sfp>
 80153b0:	60a0      	str	r0, [r4, #8]
 80153b2:	4620      	mov	r0, r4
 80153b4:	f000 f818 	bl	80153e8 <__sfp>
 80153b8:	2200      	movs	r2, #0
 80153ba:	60e0      	str	r0, [r4, #12]
 80153bc:	2104      	movs	r1, #4
 80153be:	6860      	ldr	r0, [r4, #4]
 80153c0:	f7ff ff82 	bl	80152c8 <std>
 80153c4:	68a0      	ldr	r0, [r4, #8]
 80153c6:	2201      	movs	r2, #1
 80153c8:	2109      	movs	r1, #9
 80153ca:	f7ff ff7d 	bl	80152c8 <std>
 80153ce:	68e0      	ldr	r0, [r4, #12]
 80153d0:	2202      	movs	r2, #2
 80153d2:	2112      	movs	r1, #18
 80153d4:	f7ff ff78 	bl	80152c8 <std>
 80153d8:	2301      	movs	r3, #1
 80153da:	61a3      	str	r3, [r4, #24]
 80153dc:	e7d2      	b.n	8015384 <__sinit+0xc>
 80153de:	bf00      	nop
 80153e0:	08016a18 	.word	0x08016a18
 80153e4:	08015311 	.word	0x08015311

080153e8 <__sfp>:
 80153e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ea:	4607      	mov	r7, r0
 80153ec:	f7ff ffac 	bl	8015348 <__sfp_lock_acquire>
 80153f0:	4b1e      	ldr	r3, [pc, #120]	; (801546c <__sfp+0x84>)
 80153f2:	681e      	ldr	r6, [r3, #0]
 80153f4:	69b3      	ldr	r3, [r6, #24]
 80153f6:	b913      	cbnz	r3, 80153fe <__sfp+0x16>
 80153f8:	4630      	mov	r0, r6
 80153fa:	f7ff ffbd 	bl	8015378 <__sinit>
 80153fe:	3648      	adds	r6, #72	; 0x48
 8015400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015404:	3b01      	subs	r3, #1
 8015406:	d503      	bpl.n	8015410 <__sfp+0x28>
 8015408:	6833      	ldr	r3, [r6, #0]
 801540a:	b30b      	cbz	r3, 8015450 <__sfp+0x68>
 801540c:	6836      	ldr	r6, [r6, #0]
 801540e:	e7f7      	b.n	8015400 <__sfp+0x18>
 8015410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015414:	b9d5      	cbnz	r5, 801544c <__sfp+0x64>
 8015416:	4b16      	ldr	r3, [pc, #88]	; (8015470 <__sfp+0x88>)
 8015418:	60e3      	str	r3, [r4, #12]
 801541a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801541e:	6665      	str	r5, [r4, #100]	; 0x64
 8015420:	f000 f84c 	bl	80154bc <__retarget_lock_init_recursive>
 8015424:	f7ff ff96 	bl	8015354 <__sfp_lock_release>
 8015428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801542c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015430:	6025      	str	r5, [r4, #0]
 8015432:	61a5      	str	r5, [r4, #24]
 8015434:	2208      	movs	r2, #8
 8015436:	4629      	mov	r1, r5
 8015438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801543c:	f7fe fa46 	bl	80138cc <memset>
 8015440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015448:	4620      	mov	r0, r4
 801544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801544c:	3468      	adds	r4, #104	; 0x68
 801544e:	e7d9      	b.n	8015404 <__sfp+0x1c>
 8015450:	2104      	movs	r1, #4
 8015452:	4638      	mov	r0, r7
 8015454:	f7ff ff62 	bl	801531c <__sfmoreglue>
 8015458:	4604      	mov	r4, r0
 801545a:	6030      	str	r0, [r6, #0]
 801545c:	2800      	cmp	r0, #0
 801545e:	d1d5      	bne.n	801540c <__sfp+0x24>
 8015460:	f7ff ff78 	bl	8015354 <__sfp_lock_release>
 8015464:	230c      	movs	r3, #12
 8015466:	603b      	str	r3, [r7, #0]
 8015468:	e7ee      	b.n	8015448 <__sfp+0x60>
 801546a:	bf00      	nop
 801546c:	08016a18 	.word	0x08016a18
 8015470:	ffff0001 	.word	0xffff0001

08015474 <_fwalk_reent>:
 8015474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015478:	4606      	mov	r6, r0
 801547a:	4688      	mov	r8, r1
 801547c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015480:	2700      	movs	r7, #0
 8015482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015486:	f1b9 0901 	subs.w	r9, r9, #1
 801548a:	d505      	bpl.n	8015498 <_fwalk_reent+0x24>
 801548c:	6824      	ldr	r4, [r4, #0]
 801548e:	2c00      	cmp	r4, #0
 8015490:	d1f7      	bne.n	8015482 <_fwalk_reent+0xe>
 8015492:	4638      	mov	r0, r7
 8015494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015498:	89ab      	ldrh	r3, [r5, #12]
 801549a:	2b01      	cmp	r3, #1
 801549c:	d907      	bls.n	80154ae <_fwalk_reent+0x3a>
 801549e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80154a2:	3301      	adds	r3, #1
 80154a4:	d003      	beq.n	80154ae <_fwalk_reent+0x3a>
 80154a6:	4629      	mov	r1, r5
 80154a8:	4630      	mov	r0, r6
 80154aa:	47c0      	blx	r8
 80154ac:	4307      	orrs	r7, r0
 80154ae:	3568      	adds	r5, #104	; 0x68
 80154b0:	e7e9      	b.n	8015486 <_fwalk_reent+0x12>
	...

080154b4 <_localeconv_r>:
 80154b4:	4800      	ldr	r0, [pc, #0]	; (80154b8 <_localeconv_r+0x4>)
 80154b6:	4770      	bx	lr
 80154b8:	200002d8 	.word	0x200002d8

080154bc <__retarget_lock_init_recursive>:
 80154bc:	4770      	bx	lr

080154be <__retarget_lock_acquire_recursive>:
 80154be:	4770      	bx	lr

080154c0 <__retarget_lock_release_recursive>:
 80154c0:	4770      	bx	lr

080154c2 <__swhatbuf_r>:
 80154c2:	b570      	push	{r4, r5, r6, lr}
 80154c4:	460e      	mov	r6, r1
 80154c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ca:	2900      	cmp	r1, #0
 80154cc:	b096      	sub	sp, #88	; 0x58
 80154ce:	4614      	mov	r4, r2
 80154d0:	461d      	mov	r5, r3
 80154d2:	da08      	bge.n	80154e6 <__swhatbuf_r+0x24>
 80154d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80154d8:	2200      	movs	r2, #0
 80154da:	602a      	str	r2, [r5, #0]
 80154dc:	061a      	lsls	r2, r3, #24
 80154de:	d410      	bmi.n	8015502 <__swhatbuf_r+0x40>
 80154e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154e4:	e00e      	b.n	8015504 <__swhatbuf_r+0x42>
 80154e6:	466a      	mov	r2, sp
 80154e8:	f000 fed2 	bl	8016290 <_fstat_r>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	dbf1      	blt.n	80154d4 <__swhatbuf_r+0x12>
 80154f0:	9a01      	ldr	r2, [sp, #4]
 80154f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80154f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80154fa:	425a      	negs	r2, r3
 80154fc:	415a      	adcs	r2, r3
 80154fe:	602a      	str	r2, [r5, #0]
 8015500:	e7ee      	b.n	80154e0 <__swhatbuf_r+0x1e>
 8015502:	2340      	movs	r3, #64	; 0x40
 8015504:	2000      	movs	r0, #0
 8015506:	6023      	str	r3, [r4, #0]
 8015508:	b016      	add	sp, #88	; 0x58
 801550a:	bd70      	pop	{r4, r5, r6, pc}

0801550c <__smakebuf_r>:
 801550c:	898b      	ldrh	r3, [r1, #12]
 801550e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015510:	079d      	lsls	r5, r3, #30
 8015512:	4606      	mov	r6, r0
 8015514:	460c      	mov	r4, r1
 8015516:	d507      	bpl.n	8015528 <__smakebuf_r+0x1c>
 8015518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801551c:	6023      	str	r3, [r4, #0]
 801551e:	6123      	str	r3, [r4, #16]
 8015520:	2301      	movs	r3, #1
 8015522:	6163      	str	r3, [r4, #20]
 8015524:	b002      	add	sp, #8
 8015526:	bd70      	pop	{r4, r5, r6, pc}
 8015528:	ab01      	add	r3, sp, #4
 801552a:	466a      	mov	r2, sp
 801552c:	f7ff ffc9 	bl	80154c2 <__swhatbuf_r>
 8015530:	9900      	ldr	r1, [sp, #0]
 8015532:	4605      	mov	r5, r0
 8015534:	4630      	mov	r0, r6
 8015536:	f000 fc37 	bl	8015da8 <_malloc_r>
 801553a:	b948      	cbnz	r0, 8015550 <__smakebuf_r+0x44>
 801553c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015540:	059a      	lsls	r2, r3, #22
 8015542:	d4ef      	bmi.n	8015524 <__smakebuf_r+0x18>
 8015544:	f023 0303 	bic.w	r3, r3, #3
 8015548:	f043 0302 	orr.w	r3, r3, #2
 801554c:	81a3      	strh	r3, [r4, #12]
 801554e:	e7e3      	b.n	8015518 <__smakebuf_r+0xc>
 8015550:	4b0d      	ldr	r3, [pc, #52]	; (8015588 <__smakebuf_r+0x7c>)
 8015552:	62b3      	str	r3, [r6, #40]	; 0x28
 8015554:	89a3      	ldrh	r3, [r4, #12]
 8015556:	6020      	str	r0, [r4, #0]
 8015558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801555c:	81a3      	strh	r3, [r4, #12]
 801555e:	9b00      	ldr	r3, [sp, #0]
 8015560:	6163      	str	r3, [r4, #20]
 8015562:	9b01      	ldr	r3, [sp, #4]
 8015564:	6120      	str	r0, [r4, #16]
 8015566:	b15b      	cbz	r3, 8015580 <__smakebuf_r+0x74>
 8015568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801556c:	4630      	mov	r0, r6
 801556e:	f000 fea1 	bl	80162b4 <_isatty_r>
 8015572:	b128      	cbz	r0, 8015580 <__smakebuf_r+0x74>
 8015574:	89a3      	ldrh	r3, [r4, #12]
 8015576:	f023 0303 	bic.w	r3, r3, #3
 801557a:	f043 0301 	orr.w	r3, r3, #1
 801557e:	81a3      	strh	r3, [r4, #12]
 8015580:	89a0      	ldrh	r0, [r4, #12]
 8015582:	4305      	orrs	r5, r0
 8015584:	81a5      	strh	r5, [r4, #12]
 8015586:	e7cd      	b.n	8015524 <__smakebuf_r+0x18>
 8015588:	08015311 	.word	0x08015311

0801558c <malloc>:
 801558c:	4b02      	ldr	r3, [pc, #8]	; (8015598 <malloc+0xc>)
 801558e:	4601      	mov	r1, r0
 8015590:	6818      	ldr	r0, [r3, #0]
 8015592:	f000 bc09 	b.w	8015da8 <_malloc_r>
 8015596:	bf00      	nop
 8015598:	20000184 	.word	0x20000184

0801559c <_Balloc>:
 801559c:	b570      	push	{r4, r5, r6, lr}
 801559e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80155a0:	4604      	mov	r4, r0
 80155a2:	460d      	mov	r5, r1
 80155a4:	b976      	cbnz	r6, 80155c4 <_Balloc+0x28>
 80155a6:	2010      	movs	r0, #16
 80155a8:	f7ff fff0 	bl	801558c <malloc>
 80155ac:	4602      	mov	r2, r0
 80155ae:	6260      	str	r0, [r4, #36]	; 0x24
 80155b0:	b920      	cbnz	r0, 80155bc <_Balloc+0x20>
 80155b2:	4b18      	ldr	r3, [pc, #96]	; (8015614 <_Balloc+0x78>)
 80155b4:	4818      	ldr	r0, [pc, #96]	; (8015618 <_Balloc+0x7c>)
 80155b6:	2166      	movs	r1, #102	; 0x66
 80155b8:	f000 fe2a 	bl	8016210 <__assert_func>
 80155bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155c0:	6006      	str	r6, [r0, #0]
 80155c2:	60c6      	str	r6, [r0, #12]
 80155c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80155c6:	68f3      	ldr	r3, [r6, #12]
 80155c8:	b183      	cbz	r3, 80155ec <_Balloc+0x50>
 80155ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155cc:	68db      	ldr	r3, [r3, #12]
 80155ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155d2:	b9b8      	cbnz	r0, 8015604 <_Balloc+0x68>
 80155d4:	2101      	movs	r1, #1
 80155d6:	fa01 f605 	lsl.w	r6, r1, r5
 80155da:	1d72      	adds	r2, r6, #5
 80155dc:	0092      	lsls	r2, r2, #2
 80155de:	4620      	mov	r0, r4
 80155e0:	f000 fb60 	bl	8015ca4 <_calloc_r>
 80155e4:	b160      	cbz	r0, 8015600 <_Balloc+0x64>
 80155e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155ea:	e00e      	b.n	801560a <_Balloc+0x6e>
 80155ec:	2221      	movs	r2, #33	; 0x21
 80155ee:	2104      	movs	r1, #4
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 fb57 	bl	8015ca4 <_calloc_r>
 80155f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155f8:	60f0      	str	r0, [r6, #12]
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d1e4      	bne.n	80155ca <_Balloc+0x2e>
 8015600:	2000      	movs	r0, #0
 8015602:	bd70      	pop	{r4, r5, r6, pc}
 8015604:	6802      	ldr	r2, [r0, #0]
 8015606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801560a:	2300      	movs	r3, #0
 801560c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015610:	e7f7      	b.n	8015602 <_Balloc+0x66>
 8015612:	bf00      	nop
 8015614:	08016a5d 	.word	0x08016a5d
 8015618:	08016b40 	.word	0x08016b40

0801561c <_Bfree>:
 801561c:	b570      	push	{r4, r5, r6, lr}
 801561e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015620:	4605      	mov	r5, r0
 8015622:	460c      	mov	r4, r1
 8015624:	b976      	cbnz	r6, 8015644 <_Bfree+0x28>
 8015626:	2010      	movs	r0, #16
 8015628:	f7ff ffb0 	bl	801558c <malloc>
 801562c:	4602      	mov	r2, r0
 801562e:	6268      	str	r0, [r5, #36]	; 0x24
 8015630:	b920      	cbnz	r0, 801563c <_Bfree+0x20>
 8015632:	4b09      	ldr	r3, [pc, #36]	; (8015658 <_Bfree+0x3c>)
 8015634:	4809      	ldr	r0, [pc, #36]	; (801565c <_Bfree+0x40>)
 8015636:	218a      	movs	r1, #138	; 0x8a
 8015638:	f000 fdea 	bl	8016210 <__assert_func>
 801563c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015640:	6006      	str	r6, [r0, #0]
 8015642:	60c6      	str	r6, [r0, #12]
 8015644:	b13c      	cbz	r4, 8015656 <_Bfree+0x3a>
 8015646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015648:	6862      	ldr	r2, [r4, #4]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015650:	6021      	str	r1, [r4, #0]
 8015652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015656:	bd70      	pop	{r4, r5, r6, pc}
 8015658:	08016a5d 	.word	0x08016a5d
 801565c:	08016b40 	.word	0x08016b40

08015660 <__multadd>:
 8015660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015664:	690d      	ldr	r5, [r1, #16]
 8015666:	4607      	mov	r7, r0
 8015668:	460c      	mov	r4, r1
 801566a:	461e      	mov	r6, r3
 801566c:	f101 0c14 	add.w	ip, r1, #20
 8015670:	2000      	movs	r0, #0
 8015672:	f8dc 3000 	ldr.w	r3, [ip]
 8015676:	b299      	uxth	r1, r3
 8015678:	fb02 6101 	mla	r1, r2, r1, r6
 801567c:	0c1e      	lsrs	r6, r3, #16
 801567e:	0c0b      	lsrs	r3, r1, #16
 8015680:	fb02 3306 	mla	r3, r2, r6, r3
 8015684:	b289      	uxth	r1, r1
 8015686:	3001      	adds	r0, #1
 8015688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801568c:	4285      	cmp	r5, r0
 801568e:	f84c 1b04 	str.w	r1, [ip], #4
 8015692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015696:	dcec      	bgt.n	8015672 <__multadd+0x12>
 8015698:	b30e      	cbz	r6, 80156de <__multadd+0x7e>
 801569a:	68a3      	ldr	r3, [r4, #8]
 801569c:	42ab      	cmp	r3, r5
 801569e:	dc19      	bgt.n	80156d4 <__multadd+0x74>
 80156a0:	6861      	ldr	r1, [r4, #4]
 80156a2:	4638      	mov	r0, r7
 80156a4:	3101      	adds	r1, #1
 80156a6:	f7ff ff79 	bl	801559c <_Balloc>
 80156aa:	4680      	mov	r8, r0
 80156ac:	b928      	cbnz	r0, 80156ba <__multadd+0x5a>
 80156ae:	4602      	mov	r2, r0
 80156b0:	4b0c      	ldr	r3, [pc, #48]	; (80156e4 <__multadd+0x84>)
 80156b2:	480d      	ldr	r0, [pc, #52]	; (80156e8 <__multadd+0x88>)
 80156b4:	21b5      	movs	r1, #181	; 0xb5
 80156b6:	f000 fdab 	bl	8016210 <__assert_func>
 80156ba:	6922      	ldr	r2, [r4, #16]
 80156bc:	3202      	adds	r2, #2
 80156be:	f104 010c 	add.w	r1, r4, #12
 80156c2:	0092      	lsls	r2, r2, #2
 80156c4:	300c      	adds	r0, #12
 80156c6:	f7fe f8f3 	bl	80138b0 <memcpy>
 80156ca:	4621      	mov	r1, r4
 80156cc:	4638      	mov	r0, r7
 80156ce:	f7ff ffa5 	bl	801561c <_Bfree>
 80156d2:	4644      	mov	r4, r8
 80156d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156d8:	3501      	adds	r5, #1
 80156da:	615e      	str	r6, [r3, #20]
 80156dc:	6125      	str	r5, [r4, #16]
 80156de:	4620      	mov	r0, r4
 80156e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e4:	08016acf 	.word	0x08016acf
 80156e8:	08016b40 	.word	0x08016b40

080156ec <__hi0bits>:
 80156ec:	0c03      	lsrs	r3, r0, #16
 80156ee:	041b      	lsls	r3, r3, #16
 80156f0:	b9d3      	cbnz	r3, 8015728 <__hi0bits+0x3c>
 80156f2:	0400      	lsls	r0, r0, #16
 80156f4:	2310      	movs	r3, #16
 80156f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80156fa:	bf04      	itt	eq
 80156fc:	0200      	lsleq	r0, r0, #8
 80156fe:	3308      	addeq	r3, #8
 8015700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015704:	bf04      	itt	eq
 8015706:	0100      	lsleq	r0, r0, #4
 8015708:	3304      	addeq	r3, #4
 801570a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801570e:	bf04      	itt	eq
 8015710:	0080      	lsleq	r0, r0, #2
 8015712:	3302      	addeq	r3, #2
 8015714:	2800      	cmp	r0, #0
 8015716:	db05      	blt.n	8015724 <__hi0bits+0x38>
 8015718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801571c:	f103 0301 	add.w	r3, r3, #1
 8015720:	bf08      	it	eq
 8015722:	2320      	moveq	r3, #32
 8015724:	4618      	mov	r0, r3
 8015726:	4770      	bx	lr
 8015728:	2300      	movs	r3, #0
 801572a:	e7e4      	b.n	80156f6 <__hi0bits+0xa>

0801572c <__lo0bits>:
 801572c:	6803      	ldr	r3, [r0, #0]
 801572e:	f013 0207 	ands.w	r2, r3, #7
 8015732:	4601      	mov	r1, r0
 8015734:	d00b      	beq.n	801574e <__lo0bits+0x22>
 8015736:	07da      	lsls	r2, r3, #31
 8015738:	d423      	bmi.n	8015782 <__lo0bits+0x56>
 801573a:	0798      	lsls	r0, r3, #30
 801573c:	bf49      	itett	mi
 801573e:	085b      	lsrmi	r3, r3, #1
 8015740:	089b      	lsrpl	r3, r3, #2
 8015742:	2001      	movmi	r0, #1
 8015744:	600b      	strmi	r3, [r1, #0]
 8015746:	bf5c      	itt	pl
 8015748:	600b      	strpl	r3, [r1, #0]
 801574a:	2002      	movpl	r0, #2
 801574c:	4770      	bx	lr
 801574e:	b298      	uxth	r0, r3
 8015750:	b9a8      	cbnz	r0, 801577e <__lo0bits+0x52>
 8015752:	0c1b      	lsrs	r3, r3, #16
 8015754:	2010      	movs	r0, #16
 8015756:	b2da      	uxtb	r2, r3
 8015758:	b90a      	cbnz	r2, 801575e <__lo0bits+0x32>
 801575a:	3008      	adds	r0, #8
 801575c:	0a1b      	lsrs	r3, r3, #8
 801575e:	071a      	lsls	r2, r3, #28
 8015760:	bf04      	itt	eq
 8015762:	091b      	lsreq	r3, r3, #4
 8015764:	3004      	addeq	r0, #4
 8015766:	079a      	lsls	r2, r3, #30
 8015768:	bf04      	itt	eq
 801576a:	089b      	lsreq	r3, r3, #2
 801576c:	3002      	addeq	r0, #2
 801576e:	07da      	lsls	r2, r3, #31
 8015770:	d403      	bmi.n	801577a <__lo0bits+0x4e>
 8015772:	085b      	lsrs	r3, r3, #1
 8015774:	f100 0001 	add.w	r0, r0, #1
 8015778:	d005      	beq.n	8015786 <__lo0bits+0x5a>
 801577a:	600b      	str	r3, [r1, #0]
 801577c:	4770      	bx	lr
 801577e:	4610      	mov	r0, r2
 8015780:	e7e9      	b.n	8015756 <__lo0bits+0x2a>
 8015782:	2000      	movs	r0, #0
 8015784:	4770      	bx	lr
 8015786:	2020      	movs	r0, #32
 8015788:	4770      	bx	lr
	...

0801578c <__i2b>:
 801578c:	b510      	push	{r4, lr}
 801578e:	460c      	mov	r4, r1
 8015790:	2101      	movs	r1, #1
 8015792:	f7ff ff03 	bl	801559c <_Balloc>
 8015796:	4602      	mov	r2, r0
 8015798:	b928      	cbnz	r0, 80157a6 <__i2b+0x1a>
 801579a:	4b05      	ldr	r3, [pc, #20]	; (80157b0 <__i2b+0x24>)
 801579c:	4805      	ldr	r0, [pc, #20]	; (80157b4 <__i2b+0x28>)
 801579e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80157a2:	f000 fd35 	bl	8016210 <__assert_func>
 80157a6:	2301      	movs	r3, #1
 80157a8:	6144      	str	r4, [r0, #20]
 80157aa:	6103      	str	r3, [r0, #16]
 80157ac:	bd10      	pop	{r4, pc}
 80157ae:	bf00      	nop
 80157b0:	08016acf 	.word	0x08016acf
 80157b4:	08016b40 	.word	0x08016b40

080157b8 <__multiply>:
 80157b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	4691      	mov	r9, r2
 80157be:	690a      	ldr	r2, [r1, #16]
 80157c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157c4:	429a      	cmp	r2, r3
 80157c6:	bfb8      	it	lt
 80157c8:	460b      	movlt	r3, r1
 80157ca:	460c      	mov	r4, r1
 80157cc:	bfbc      	itt	lt
 80157ce:	464c      	movlt	r4, r9
 80157d0:	4699      	movlt	r9, r3
 80157d2:	6927      	ldr	r7, [r4, #16]
 80157d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80157d8:	68a3      	ldr	r3, [r4, #8]
 80157da:	6861      	ldr	r1, [r4, #4]
 80157dc:	eb07 060a 	add.w	r6, r7, sl
 80157e0:	42b3      	cmp	r3, r6
 80157e2:	b085      	sub	sp, #20
 80157e4:	bfb8      	it	lt
 80157e6:	3101      	addlt	r1, #1
 80157e8:	f7ff fed8 	bl	801559c <_Balloc>
 80157ec:	b930      	cbnz	r0, 80157fc <__multiply+0x44>
 80157ee:	4602      	mov	r2, r0
 80157f0:	4b44      	ldr	r3, [pc, #272]	; (8015904 <__multiply+0x14c>)
 80157f2:	4845      	ldr	r0, [pc, #276]	; (8015908 <__multiply+0x150>)
 80157f4:	f240 115d 	movw	r1, #349	; 0x15d
 80157f8:	f000 fd0a 	bl	8016210 <__assert_func>
 80157fc:	f100 0514 	add.w	r5, r0, #20
 8015800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015804:	462b      	mov	r3, r5
 8015806:	2200      	movs	r2, #0
 8015808:	4543      	cmp	r3, r8
 801580a:	d321      	bcc.n	8015850 <__multiply+0x98>
 801580c:	f104 0314 	add.w	r3, r4, #20
 8015810:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015814:	f109 0314 	add.w	r3, r9, #20
 8015818:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801581c:	9202      	str	r2, [sp, #8]
 801581e:	1b3a      	subs	r2, r7, r4
 8015820:	3a15      	subs	r2, #21
 8015822:	f022 0203 	bic.w	r2, r2, #3
 8015826:	3204      	adds	r2, #4
 8015828:	f104 0115 	add.w	r1, r4, #21
 801582c:	428f      	cmp	r7, r1
 801582e:	bf38      	it	cc
 8015830:	2204      	movcc	r2, #4
 8015832:	9201      	str	r2, [sp, #4]
 8015834:	9a02      	ldr	r2, [sp, #8]
 8015836:	9303      	str	r3, [sp, #12]
 8015838:	429a      	cmp	r2, r3
 801583a:	d80c      	bhi.n	8015856 <__multiply+0x9e>
 801583c:	2e00      	cmp	r6, #0
 801583e:	dd03      	ble.n	8015848 <__multiply+0x90>
 8015840:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015844:	2b00      	cmp	r3, #0
 8015846:	d05a      	beq.n	80158fe <__multiply+0x146>
 8015848:	6106      	str	r6, [r0, #16]
 801584a:	b005      	add	sp, #20
 801584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015850:	f843 2b04 	str.w	r2, [r3], #4
 8015854:	e7d8      	b.n	8015808 <__multiply+0x50>
 8015856:	f8b3 a000 	ldrh.w	sl, [r3]
 801585a:	f1ba 0f00 	cmp.w	sl, #0
 801585e:	d024      	beq.n	80158aa <__multiply+0xf2>
 8015860:	f104 0e14 	add.w	lr, r4, #20
 8015864:	46a9      	mov	r9, r5
 8015866:	f04f 0c00 	mov.w	ip, #0
 801586a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801586e:	f8d9 1000 	ldr.w	r1, [r9]
 8015872:	fa1f fb82 	uxth.w	fp, r2
 8015876:	b289      	uxth	r1, r1
 8015878:	fb0a 110b 	mla	r1, sl, fp, r1
 801587c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015880:	f8d9 2000 	ldr.w	r2, [r9]
 8015884:	4461      	add	r1, ip
 8015886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801588a:	fb0a c20b 	mla	r2, sl, fp, ip
 801588e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015892:	b289      	uxth	r1, r1
 8015894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015898:	4577      	cmp	r7, lr
 801589a:	f849 1b04 	str.w	r1, [r9], #4
 801589e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80158a2:	d8e2      	bhi.n	801586a <__multiply+0xb2>
 80158a4:	9a01      	ldr	r2, [sp, #4]
 80158a6:	f845 c002 	str.w	ip, [r5, r2]
 80158aa:	9a03      	ldr	r2, [sp, #12]
 80158ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80158b0:	3304      	adds	r3, #4
 80158b2:	f1b9 0f00 	cmp.w	r9, #0
 80158b6:	d020      	beq.n	80158fa <__multiply+0x142>
 80158b8:	6829      	ldr	r1, [r5, #0]
 80158ba:	f104 0c14 	add.w	ip, r4, #20
 80158be:	46ae      	mov	lr, r5
 80158c0:	f04f 0a00 	mov.w	sl, #0
 80158c4:	f8bc b000 	ldrh.w	fp, [ip]
 80158c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80158cc:	fb09 220b 	mla	r2, r9, fp, r2
 80158d0:	4492      	add	sl, r2
 80158d2:	b289      	uxth	r1, r1
 80158d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80158d8:	f84e 1b04 	str.w	r1, [lr], #4
 80158dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80158e0:	f8be 1000 	ldrh.w	r1, [lr]
 80158e4:	0c12      	lsrs	r2, r2, #16
 80158e6:	fb09 1102 	mla	r1, r9, r2, r1
 80158ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80158ee:	4567      	cmp	r7, ip
 80158f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80158f4:	d8e6      	bhi.n	80158c4 <__multiply+0x10c>
 80158f6:	9a01      	ldr	r2, [sp, #4]
 80158f8:	50a9      	str	r1, [r5, r2]
 80158fa:	3504      	adds	r5, #4
 80158fc:	e79a      	b.n	8015834 <__multiply+0x7c>
 80158fe:	3e01      	subs	r6, #1
 8015900:	e79c      	b.n	801583c <__multiply+0x84>
 8015902:	bf00      	nop
 8015904:	08016acf 	.word	0x08016acf
 8015908:	08016b40 	.word	0x08016b40

0801590c <__pow5mult>:
 801590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015910:	4615      	mov	r5, r2
 8015912:	f012 0203 	ands.w	r2, r2, #3
 8015916:	4606      	mov	r6, r0
 8015918:	460f      	mov	r7, r1
 801591a:	d007      	beq.n	801592c <__pow5mult+0x20>
 801591c:	4c25      	ldr	r4, [pc, #148]	; (80159b4 <__pow5mult+0xa8>)
 801591e:	3a01      	subs	r2, #1
 8015920:	2300      	movs	r3, #0
 8015922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015926:	f7ff fe9b 	bl	8015660 <__multadd>
 801592a:	4607      	mov	r7, r0
 801592c:	10ad      	asrs	r5, r5, #2
 801592e:	d03d      	beq.n	80159ac <__pow5mult+0xa0>
 8015930:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015932:	b97c      	cbnz	r4, 8015954 <__pow5mult+0x48>
 8015934:	2010      	movs	r0, #16
 8015936:	f7ff fe29 	bl	801558c <malloc>
 801593a:	4602      	mov	r2, r0
 801593c:	6270      	str	r0, [r6, #36]	; 0x24
 801593e:	b928      	cbnz	r0, 801594c <__pow5mult+0x40>
 8015940:	4b1d      	ldr	r3, [pc, #116]	; (80159b8 <__pow5mult+0xac>)
 8015942:	481e      	ldr	r0, [pc, #120]	; (80159bc <__pow5mult+0xb0>)
 8015944:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015948:	f000 fc62 	bl	8016210 <__assert_func>
 801594c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015950:	6004      	str	r4, [r0, #0]
 8015952:	60c4      	str	r4, [r0, #12]
 8015954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801595c:	b94c      	cbnz	r4, 8015972 <__pow5mult+0x66>
 801595e:	f240 2171 	movw	r1, #625	; 0x271
 8015962:	4630      	mov	r0, r6
 8015964:	f7ff ff12 	bl	801578c <__i2b>
 8015968:	2300      	movs	r3, #0
 801596a:	f8c8 0008 	str.w	r0, [r8, #8]
 801596e:	4604      	mov	r4, r0
 8015970:	6003      	str	r3, [r0, #0]
 8015972:	f04f 0900 	mov.w	r9, #0
 8015976:	07eb      	lsls	r3, r5, #31
 8015978:	d50a      	bpl.n	8015990 <__pow5mult+0x84>
 801597a:	4639      	mov	r1, r7
 801597c:	4622      	mov	r2, r4
 801597e:	4630      	mov	r0, r6
 8015980:	f7ff ff1a 	bl	80157b8 <__multiply>
 8015984:	4639      	mov	r1, r7
 8015986:	4680      	mov	r8, r0
 8015988:	4630      	mov	r0, r6
 801598a:	f7ff fe47 	bl	801561c <_Bfree>
 801598e:	4647      	mov	r7, r8
 8015990:	106d      	asrs	r5, r5, #1
 8015992:	d00b      	beq.n	80159ac <__pow5mult+0xa0>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	b938      	cbnz	r0, 80159a8 <__pow5mult+0x9c>
 8015998:	4622      	mov	r2, r4
 801599a:	4621      	mov	r1, r4
 801599c:	4630      	mov	r0, r6
 801599e:	f7ff ff0b 	bl	80157b8 <__multiply>
 80159a2:	6020      	str	r0, [r4, #0]
 80159a4:	f8c0 9000 	str.w	r9, [r0]
 80159a8:	4604      	mov	r4, r0
 80159aa:	e7e4      	b.n	8015976 <__pow5mult+0x6a>
 80159ac:	4638      	mov	r0, r7
 80159ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159b2:	bf00      	nop
 80159b4:	08016c90 	.word	0x08016c90
 80159b8:	08016a5d 	.word	0x08016a5d
 80159bc:	08016b40 	.word	0x08016b40

080159c0 <__lshift>:
 80159c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159c4:	460c      	mov	r4, r1
 80159c6:	6849      	ldr	r1, [r1, #4]
 80159c8:	6923      	ldr	r3, [r4, #16]
 80159ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80159ce:	68a3      	ldr	r3, [r4, #8]
 80159d0:	4607      	mov	r7, r0
 80159d2:	4691      	mov	r9, r2
 80159d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159d8:	f108 0601 	add.w	r6, r8, #1
 80159dc:	42b3      	cmp	r3, r6
 80159de:	db0b      	blt.n	80159f8 <__lshift+0x38>
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7ff fddb 	bl	801559c <_Balloc>
 80159e6:	4605      	mov	r5, r0
 80159e8:	b948      	cbnz	r0, 80159fe <__lshift+0x3e>
 80159ea:	4602      	mov	r2, r0
 80159ec:	4b2a      	ldr	r3, [pc, #168]	; (8015a98 <__lshift+0xd8>)
 80159ee:	482b      	ldr	r0, [pc, #172]	; (8015a9c <__lshift+0xdc>)
 80159f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80159f4:	f000 fc0c 	bl	8016210 <__assert_func>
 80159f8:	3101      	adds	r1, #1
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	e7ee      	b.n	80159dc <__lshift+0x1c>
 80159fe:	2300      	movs	r3, #0
 8015a00:	f100 0114 	add.w	r1, r0, #20
 8015a04:	f100 0210 	add.w	r2, r0, #16
 8015a08:	4618      	mov	r0, r3
 8015a0a:	4553      	cmp	r3, sl
 8015a0c:	db37      	blt.n	8015a7e <__lshift+0xbe>
 8015a0e:	6920      	ldr	r0, [r4, #16]
 8015a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a14:	f104 0314 	add.w	r3, r4, #20
 8015a18:	f019 091f 	ands.w	r9, r9, #31
 8015a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015a24:	d02f      	beq.n	8015a86 <__lshift+0xc6>
 8015a26:	f1c9 0e20 	rsb	lr, r9, #32
 8015a2a:	468a      	mov	sl, r1
 8015a2c:	f04f 0c00 	mov.w	ip, #0
 8015a30:	681a      	ldr	r2, [r3, #0]
 8015a32:	fa02 f209 	lsl.w	r2, r2, r9
 8015a36:	ea42 020c 	orr.w	r2, r2, ip
 8015a3a:	f84a 2b04 	str.w	r2, [sl], #4
 8015a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a42:	4298      	cmp	r0, r3
 8015a44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015a48:	d8f2      	bhi.n	8015a30 <__lshift+0x70>
 8015a4a:	1b03      	subs	r3, r0, r4
 8015a4c:	3b15      	subs	r3, #21
 8015a4e:	f023 0303 	bic.w	r3, r3, #3
 8015a52:	3304      	adds	r3, #4
 8015a54:	f104 0215 	add.w	r2, r4, #21
 8015a58:	4290      	cmp	r0, r2
 8015a5a:	bf38      	it	cc
 8015a5c:	2304      	movcc	r3, #4
 8015a5e:	f841 c003 	str.w	ip, [r1, r3]
 8015a62:	f1bc 0f00 	cmp.w	ip, #0
 8015a66:	d001      	beq.n	8015a6c <__lshift+0xac>
 8015a68:	f108 0602 	add.w	r6, r8, #2
 8015a6c:	3e01      	subs	r6, #1
 8015a6e:	4638      	mov	r0, r7
 8015a70:	612e      	str	r6, [r5, #16]
 8015a72:	4621      	mov	r1, r4
 8015a74:	f7ff fdd2 	bl	801561c <_Bfree>
 8015a78:	4628      	mov	r0, r5
 8015a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a82:	3301      	adds	r3, #1
 8015a84:	e7c1      	b.n	8015a0a <__lshift+0x4a>
 8015a86:	3904      	subs	r1, #4
 8015a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a90:	4298      	cmp	r0, r3
 8015a92:	d8f9      	bhi.n	8015a88 <__lshift+0xc8>
 8015a94:	e7ea      	b.n	8015a6c <__lshift+0xac>
 8015a96:	bf00      	nop
 8015a98:	08016acf 	.word	0x08016acf
 8015a9c:	08016b40 	.word	0x08016b40

08015aa0 <__mcmp>:
 8015aa0:	b530      	push	{r4, r5, lr}
 8015aa2:	6902      	ldr	r2, [r0, #16]
 8015aa4:	690c      	ldr	r4, [r1, #16]
 8015aa6:	1b12      	subs	r2, r2, r4
 8015aa8:	d10e      	bne.n	8015ac8 <__mcmp+0x28>
 8015aaa:	f100 0314 	add.w	r3, r0, #20
 8015aae:	3114      	adds	r1, #20
 8015ab0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ab4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ab8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015abc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015ac0:	42a5      	cmp	r5, r4
 8015ac2:	d003      	beq.n	8015acc <__mcmp+0x2c>
 8015ac4:	d305      	bcc.n	8015ad2 <__mcmp+0x32>
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	4610      	mov	r0, r2
 8015aca:	bd30      	pop	{r4, r5, pc}
 8015acc:	4283      	cmp	r3, r0
 8015ace:	d3f3      	bcc.n	8015ab8 <__mcmp+0x18>
 8015ad0:	e7fa      	b.n	8015ac8 <__mcmp+0x28>
 8015ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ad6:	e7f7      	b.n	8015ac8 <__mcmp+0x28>

08015ad8 <__mdiff>:
 8015ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015adc:	460c      	mov	r4, r1
 8015ade:	4606      	mov	r6, r0
 8015ae0:	4611      	mov	r1, r2
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	4690      	mov	r8, r2
 8015ae6:	f7ff ffdb 	bl	8015aa0 <__mcmp>
 8015aea:	1e05      	subs	r5, r0, #0
 8015aec:	d110      	bne.n	8015b10 <__mdiff+0x38>
 8015aee:	4629      	mov	r1, r5
 8015af0:	4630      	mov	r0, r6
 8015af2:	f7ff fd53 	bl	801559c <_Balloc>
 8015af6:	b930      	cbnz	r0, 8015b06 <__mdiff+0x2e>
 8015af8:	4b3a      	ldr	r3, [pc, #232]	; (8015be4 <__mdiff+0x10c>)
 8015afa:	4602      	mov	r2, r0
 8015afc:	f240 2132 	movw	r1, #562	; 0x232
 8015b00:	4839      	ldr	r0, [pc, #228]	; (8015be8 <__mdiff+0x110>)
 8015b02:	f000 fb85 	bl	8016210 <__assert_func>
 8015b06:	2301      	movs	r3, #1
 8015b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b10:	bfa4      	itt	ge
 8015b12:	4643      	movge	r3, r8
 8015b14:	46a0      	movge	r8, r4
 8015b16:	4630      	mov	r0, r6
 8015b18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b1c:	bfa6      	itte	ge
 8015b1e:	461c      	movge	r4, r3
 8015b20:	2500      	movge	r5, #0
 8015b22:	2501      	movlt	r5, #1
 8015b24:	f7ff fd3a 	bl	801559c <_Balloc>
 8015b28:	b920      	cbnz	r0, 8015b34 <__mdiff+0x5c>
 8015b2a:	4b2e      	ldr	r3, [pc, #184]	; (8015be4 <__mdiff+0x10c>)
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015b32:	e7e5      	b.n	8015b00 <__mdiff+0x28>
 8015b34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015b38:	6926      	ldr	r6, [r4, #16]
 8015b3a:	60c5      	str	r5, [r0, #12]
 8015b3c:	f104 0914 	add.w	r9, r4, #20
 8015b40:	f108 0514 	add.w	r5, r8, #20
 8015b44:	f100 0e14 	add.w	lr, r0, #20
 8015b48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015b4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015b50:	f108 0210 	add.w	r2, r8, #16
 8015b54:	46f2      	mov	sl, lr
 8015b56:	2100      	movs	r1, #0
 8015b58:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015b60:	fa1f f883 	uxth.w	r8, r3
 8015b64:	fa11 f18b 	uxtah	r1, r1, fp
 8015b68:	0c1b      	lsrs	r3, r3, #16
 8015b6a:	eba1 0808 	sub.w	r8, r1, r8
 8015b6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b76:	fa1f f888 	uxth.w	r8, r8
 8015b7a:	1419      	asrs	r1, r3, #16
 8015b7c:	454e      	cmp	r6, r9
 8015b7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b82:	f84a 3b04 	str.w	r3, [sl], #4
 8015b86:	d8e7      	bhi.n	8015b58 <__mdiff+0x80>
 8015b88:	1b33      	subs	r3, r6, r4
 8015b8a:	3b15      	subs	r3, #21
 8015b8c:	f023 0303 	bic.w	r3, r3, #3
 8015b90:	3304      	adds	r3, #4
 8015b92:	3415      	adds	r4, #21
 8015b94:	42a6      	cmp	r6, r4
 8015b96:	bf38      	it	cc
 8015b98:	2304      	movcc	r3, #4
 8015b9a:	441d      	add	r5, r3
 8015b9c:	4473      	add	r3, lr
 8015b9e:	469e      	mov	lr, r3
 8015ba0:	462e      	mov	r6, r5
 8015ba2:	4566      	cmp	r6, ip
 8015ba4:	d30e      	bcc.n	8015bc4 <__mdiff+0xec>
 8015ba6:	f10c 0203 	add.w	r2, ip, #3
 8015baa:	1b52      	subs	r2, r2, r5
 8015bac:	f022 0203 	bic.w	r2, r2, #3
 8015bb0:	3d03      	subs	r5, #3
 8015bb2:	45ac      	cmp	ip, r5
 8015bb4:	bf38      	it	cc
 8015bb6:	2200      	movcc	r2, #0
 8015bb8:	441a      	add	r2, r3
 8015bba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015bbe:	b17b      	cbz	r3, 8015be0 <__mdiff+0x108>
 8015bc0:	6107      	str	r7, [r0, #16]
 8015bc2:	e7a3      	b.n	8015b0c <__mdiff+0x34>
 8015bc4:	f856 8b04 	ldr.w	r8, [r6], #4
 8015bc8:	fa11 f288 	uxtah	r2, r1, r8
 8015bcc:	1414      	asrs	r4, r2, #16
 8015bce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015bd2:	b292      	uxth	r2, r2
 8015bd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015bd8:	f84e 2b04 	str.w	r2, [lr], #4
 8015bdc:	1421      	asrs	r1, r4, #16
 8015bde:	e7e0      	b.n	8015ba2 <__mdiff+0xca>
 8015be0:	3f01      	subs	r7, #1
 8015be2:	e7ea      	b.n	8015bba <__mdiff+0xe2>
 8015be4:	08016acf 	.word	0x08016acf
 8015be8:	08016b40 	.word	0x08016b40

08015bec <__d2b>:
 8015bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bf0:	4689      	mov	r9, r1
 8015bf2:	2101      	movs	r1, #1
 8015bf4:	ec57 6b10 	vmov	r6, r7, d0
 8015bf8:	4690      	mov	r8, r2
 8015bfa:	f7ff fccf 	bl	801559c <_Balloc>
 8015bfe:	4604      	mov	r4, r0
 8015c00:	b930      	cbnz	r0, 8015c10 <__d2b+0x24>
 8015c02:	4602      	mov	r2, r0
 8015c04:	4b25      	ldr	r3, [pc, #148]	; (8015c9c <__d2b+0xb0>)
 8015c06:	4826      	ldr	r0, [pc, #152]	; (8015ca0 <__d2b+0xb4>)
 8015c08:	f240 310a 	movw	r1, #778	; 0x30a
 8015c0c:	f000 fb00 	bl	8016210 <__assert_func>
 8015c10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015c14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c18:	bb35      	cbnz	r5, 8015c68 <__d2b+0x7c>
 8015c1a:	2e00      	cmp	r6, #0
 8015c1c:	9301      	str	r3, [sp, #4]
 8015c1e:	d028      	beq.n	8015c72 <__d2b+0x86>
 8015c20:	4668      	mov	r0, sp
 8015c22:	9600      	str	r6, [sp, #0]
 8015c24:	f7ff fd82 	bl	801572c <__lo0bits>
 8015c28:	9900      	ldr	r1, [sp, #0]
 8015c2a:	b300      	cbz	r0, 8015c6e <__d2b+0x82>
 8015c2c:	9a01      	ldr	r2, [sp, #4]
 8015c2e:	f1c0 0320 	rsb	r3, r0, #32
 8015c32:	fa02 f303 	lsl.w	r3, r2, r3
 8015c36:	430b      	orrs	r3, r1
 8015c38:	40c2      	lsrs	r2, r0
 8015c3a:	6163      	str	r3, [r4, #20]
 8015c3c:	9201      	str	r2, [sp, #4]
 8015c3e:	9b01      	ldr	r3, [sp, #4]
 8015c40:	61a3      	str	r3, [r4, #24]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	bf14      	ite	ne
 8015c46:	2202      	movne	r2, #2
 8015c48:	2201      	moveq	r2, #1
 8015c4a:	6122      	str	r2, [r4, #16]
 8015c4c:	b1d5      	cbz	r5, 8015c84 <__d2b+0x98>
 8015c4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c52:	4405      	add	r5, r0
 8015c54:	f8c9 5000 	str.w	r5, [r9]
 8015c58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c5c:	f8c8 0000 	str.w	r0, [r8]
 8015c60:	4620      	mov	r0, r4
 8015c62:	b003      	add	sp, #12
 8015c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c6c:	e7d5      	b.n	8015c1a <__d2b+0x2e>
 8015c6e:	6161      	str	r1, [r4, #20]
 8015c70:	e7e5      	b.n	8015c3e <__d2b+0x52>
 8015c72:	a801      	add	r0, sp, #4
 8015c74:	f7ff fd5a 	bl	801572c <__lo0bits>
 8015c78:	9b01      	ldr	r3, [sp, #4]
 8015c7a:	6163      	str	r3, [r4, #20]
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	6122      	str	r2, [r4, #16]
 8015c80:	3020      	adds	r0, #32
 8015c82:	e7e3      	b.n	8015c4c <__d2b+0x60>
 8015c84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c8c:	f8c9 0000 	str.w	r0, [r9]
 8015c90:	6918      	ldr	r0, [r3, #16]
 8015c92:	f7ff fd2b 	bl	80156ec <__hi0bits>
 8015c96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c9a:	e7df      	b.n	8015c5c <__d2b+0x70>
 8015c9c:	08016acf 	.word	0x08016acf
 8015ca0:	08016b40 	.word	0x08016b40

08015ca4 <_calloc_r>:
 8015ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ca6:	fba1 2402 	umull	r2, r4, r1, r2
 8015caa:	b94c      	cbnz	r4, 8015cc0 <_calloc_r+0x1c>
 8015cac:	4611      	mov	r1, r2
 8015cae:	9201      	str	r2, [sp, #4]
 8015cb0:	f000 f87a 	bl	8015da8 <_malloc_r>
 8015cb4:	9a01      	ldr	r2, [sp, #4]
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	b930      	cbnz	r0, 8015cc8 <_calloc_r+0x24>
 8015cba:	4628      	mov	r0, r5
 8015cbc:	b003      	add	sp, #12
 8015cbe:	bd30      	pop	{r4, r5, pc}
 8015cc0:	220c      	movs	r2, #12
 8015cc2:	6002      	str	r2, [r0, #0]
 8015cc4:	2500      	movs	r5, #0
 8015cc6:	e7f8      	b.n	8015cba <_calloc_r+0x16>
 8015cc8:	4621      	mov	r1, r4
 8015cca:	f7fd fdff 	bl	80138cc <memset>
 8015cce:	e7f4      	b.n	8015cba <_calloc_r+0x16>

08015cd0 <_free_r>:
 8015cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	d044      	beq.n	8015d60 <_free_r+0x90>
 8015cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cda:	9001      	str	r0, [sp, #4]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	f1a1 0404 	sub.w	r4, r1, #4
 8015ce2:	bfb8      	it	lt
 8015ce4:	18e4      	addlt	r4, r4, r3
 8015ce6:	f000 fb19 	bl	801631c <__malloc_lock>
 8015cea:	4a1e      	ldr	r2, [pc, #120]	; (8015d64 <_free_r+0x94>)
 8015cec:	9801      	ldr	r0, [sp, #4]
 8015cee:	6813      	ldr	r3, [r2, #0]
 8015cf0:	b933      	cbnz	r3, 8015d00 <_free_r+0x30>
 8015cf2:	6063      	str	r3, [r4, #4]
 8015cf4:	6014      	str	r4, [r2, #0]
 8015cf6:	b003      	add	sp, #12
 8015cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cfc:	f000 bb14 	b.w	8016328 <__malloc_unlock>
 8015d00:	42a3      	cmp	r3, r4
 8015d02:	d908      	bls.n	8015d16 <_free_r+0x46>
 8015d04:	6825      	ldr	r5, [r4, #0]
 8015d06:	1961      	adds	r1, r4, r5
 8015d08:	428b      	cmp	r3, r1
 8015d0a:	bf01      	itttt	eq
 8015d0c:	6819      	ldreq	r1, [r3, #0]
 8015d0e:	685b      	ldreq	r3, [r3, #4]
 8015d10:	1949      	addeq	r1, r1, r5
 8015d12:	6021      	streq	r1, [r4, #0]
 8015d14:	e7ed      	b.n	8015cf2 <_free_r+0x22>
 8015d16:	461a      	mov	r2, r3
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	b10b      	cbz	r3, 8015d20 <_free_r+0x50>
 8015d1c:	42a3      	cmp	r3, r4
 8015d1e:	d9fa      	bls.n	8015d16 <_free_r+0x46>
 8015d20:	6811      	ldr	r1, [r2, #0]
 8015d22:	1855      	adds	r5, r2, r1
 8015d24:	42a5      	cmp	r5, r4
 8015d26:	d10b      	bne.n	8015d40 <_free_r+0x70>
 8015d28:	6824      	ldr	r4, [r4, #0]
 8015d2a:	4421      	add	r1, r4
 8015d2c:	1854      	adds	r4, r2, r1
 8015d2e:	42a3      	cmp	r3, r4
 8015d30:	6011      	str	r1, [r2, #0]
 8015d32:	d1e0      	bne.n	8015cf6 <_free_r+0x26>
 8015d34:	681c      	ldr	r4, [r3, #0]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	6053      	str	r3, [r2, #4]
 8015d3a:	4421      	add	r1, r4
 8015d3c:	6011      	str	r1, [r2, #0]
 8015d3e:	e7da      	b.n	8015cf6 <_free_r+0x26>
 8015d40:	d902      	bls.n	8015d48 <_free_r+0x78>
 8015d42:	230c      	movs	r3, #12
 8015d44:	6003      	str	r3, [r0, #0]
 8015d46:	e7d6      	b.n	8015cf6 <_free_r+0x26>
 8015d48:	6825      	ldr	r5, [r4, #0]
 8015d4a:	1961      	adds	r1, r4, r5
 8015d4c:	428b      	cmp	r3, r1
 8015d4e:	bf04      	itt	eq
 8015d50:	6819      	ldreq	r1, [r3, #0]
 8015d52:	685b      	ldreq	r3, [r3, #4]
 8015d54:	6063      	str	r3, [r4, #4]
 8015d56:	bf04      	itt	eq
 8015d58:	1949      	addeq	r1, r1, r5
 8015d5a:	6021      	streq	r1, [r4, #0]
 8015d5c:	6054      	str	r4, [r2, #4]
 8015d5e:	e7ca      	b.n	8015cf6 <_free_r+0x26>
 8015d60:	b003      	add	sp, #12
 8015d62:	bd30      	pop	{r4, r5, pc}
 8015d64:	20002488 	.word	0x20002488

08015d68 <sbrk_aligned>:
 8015d68:	b570      	push	{r4, r5, r6, lr}
 8015d6a:	4e0e      	ldr	r6, [pc, #56]	; (8015da4 <sbrk_aligned+0x3c>)
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	6831      	ldr	r1, [r6, #0]
 8015d70:	4605      	mov	r5, r0
 8015d72:	b911      	cbnz	r1, 8015d7a <sbrk_aligned+0x12>
 8015d74:	f000 f9e6 	bl	8016144 <_sbrk_r>
 8015d78:	6030      	str	r0, [r6, #0]
 8015d7a:	4621      	mov	r1, r4
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	f000 f9e1 	bl	8016144 <_sbrk_r>
 8015d82:	1c43      	adds	r3, r0, #1
 8015d84:	d00a      	beq.n	8015d9c <sbrk_aligned+0x34>
 8015d86:	1cc4      	adds	r4, r0, #3
 8015d88:	f024 0403 	bic.w	r4, r4, #3
 8015d8c:	42a0      	cmp	r0, r4
 8015d8e:	d007      	beq.n	8015da0 <sbrk_aligned+0x38>
 8015d90:	1a21      	subs	r1, r4, r0
 8015d92:	4628      	mov	r0, r5
 8015d94:	f000 f9d6 	bl	8016144 <_sbrk_r>
 8015d98:	3001      	adds	r0, #1
 8015d9a:	d101      	bne.n	8015da0 <sbrk_aligned+0x38>
 8015d9c:	f04f 34ff 	mov.w	r4, #4294967295
 8015da0:	4620      	mov	r0, r4
 8015da2:	bd70      	pop	{r4, r5, r6, pc}
 8015da4:	2000248c 	.word	0x2000248c

08015da8 <_malloc_r>:
 8015da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dac:	1ccd      	adds	r5, r1, #3
 8015dae:	f025 0503 	bic.w	r5, r5, #3
 8015db2:	3508      	adds	r5, #8
 8015db4:	2d0c      	cmp	r5, #12
 8015db6:	bf38      	it	cc
 8015db8:	250c      	movcc	r5, #12
 8015dba:	2d00      	cmp	r5, #0
 8015dbc:	4607      	mov	r7, r0
 8015dbe:	db01      	blt.n	8015dc4 <_malloc_r+0x1c>
 8015dc0:	42a9      	cmp	r1, r5
 8015dc2:	d905      	bls.n	8015dd0 <_malloc_r+0x28>
 8015dc4:	230c      	movs	r3, #12
 8015dc6:	603b      	str	r3, [r7, #0]
 8015dc8:	2600      	movs	r6, #0
 8015dca:	4630      	mov	r0, r6
 8015dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd0:	4e2e      	ldr	r6, [pc, #184]	; (8015e8c <_malloc_r+0xe4>)
 8015dd2:	f000 faa3 	bl	801631c <__malloc_lock>
 8015dd6:	6833      	ldr	r3, [r6, #0]
 8015dd8:	461c      	mov	r4, r3
 8015dda:	bb34      	cbnz	r4, 8015e2a <_malloc_r+0x82>
 8015ddc:	4629      	mov	r1, r5
 8015dde:	4638      	mov	r0, r7
 8015de0:	f7ff ffc2 	bl	8015d68 <sbrk_aligned>
 8015de4:	1c43      	adds	r3, r0, #1
 8015de6:	4604      	mov	r4, r0
 8015de8:	d14d      	bne.n	8015e86 <_malloc_r+0xde>
 8015dea:	6834      	ldr	r4, [r6, #0]
 8015dec:	4626      	mov	r6, r4
 8015dee:	2e00      	cmp	r6, #0
 8015df0:	d140      	bne.n	8015e74 <_malloc_r+0xcc>
 8015df2:	6823      	ldr	r3, [r4, #0]
 8015df4:	4631      	mov	r1, r6
 8015df6:	4638      	mov	r0, r7
 8015df8:	eb04 0803 	add.w	r8, r4, r3
 8015dfc:	f000 f9a2 	bl	8016144 <_sbrk_r>
 8015e00:	4580      	cmp	r8, r0
 8015e02:	d13a      	bne.n	8015e7a <_malloc_r+0xd2>
 8015e04:	6821      	ldr	r1, [r4, #0]
 8015e06:	3503      	adds	r5, #3
 8015e08:	1a6d      	subs	r5, r5, r1
 8015e0a:	f025 0503 	bic.w	r5, r5, #3
 8015e0e:	3508      	adds	r5, #8
 8015e10:	2d0c      	cmp	r5, #12
 8015e12:	bf38      	it	cc
 8015e14:	250c      	movcc	r5, #12
 8015e16:	4629      	mov	r1, r5
 8015e18:	4638      	mov	r0, r7
 8015e1a:	f7ff ffa5 	bl	8015d68 <sbrk_aligned>
 8015e1e:	3001      	adds	r0, #1
 8015e20:	d02b      	beq.n	8015e7a <_malloc_r+0xd2>
 8015e22:	6823      	ldr	r3, [r4, #0]
 8015e24:	442b      	add	r3, r5
 8015e26:	6023      	str	r3, [r4, #0]
 8015e28:	e00e      	b.n	8015e48 <_malloc_r+0xa0>
 8015e2a:	6822      	ldr	r2, [r4, #0]
 8015e2c:	1b52      	subs	r2, r2, r5
 8015e2e:	d41e      	bmi.n	8015e6e <_malloc_r+0xc6>
 8015e30:	2a0b      	cmp	r2, #11
 8015e32:	d916      	bls.n	8015e62 <_malloc_r+0xba>
 8015e34:	1961      	adds	r1, r4, r5
 8015e36:	42a3      	cmp	r3, r4
 8015e38:	6025      	str	r5, [r4, #0]
 8015e3a:	bf18      	it	ne
 8015e3c:	6059      	strne	r1, [r3, #4]
 8015e3e:	6863      	ldr	r3, [r4, #4]
 8015e40:	bf08      	it	eq
 8015e42:	6031      	streq	r1, [r6, #0]
 8015e44:	5162      	str	r2, [r4, r5]
 8015e46:	604b      	str	r3, [r1, #4]
 8015e48:	4638      	mov	r0, r7
 8015e4a:	f104 060b 	add.w	r6, r4, #11
 8015e4e:	f000 fa6b 	bl	8016328 <__malloc_unlock>
 8015e52:	f026 0607 	bic.w	r6, r6, #7
 8015e56:	1d23      	adds	r3, r4, #4
 8015e58:	1af2      	subs	r2, r6, r3
 8015e5a:	d0b6      	beq.n	8015dca <_malloc_r+0x22>
 8015e5c:	1b9b      	subs	r3, r3, r6
 8015e5e:	50a3      	str	r3, [r4, r2]
 8015e60:	e7b3      	b.n	8015dca <_malloc_r+0x22>
 8015e62:	6862      	ldr	r2, [r4, #4]
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	bf0c      	ite	eq
 8015e68:	6032      	streq	r2, [r6, #0]
 8015e6a:	605a      	strne	r2, [r3, #4]
 8015e6c:	e7ec      	b.n	8015e48 <_malloc_r+0xa0>
 8015e6e:	4623      	mov	r3, r4
 8015e70:	6864      	ldr	r4, [r4, #4]
 8015e72:	e7b2      	b.n	8015dda <_malloc_r+0x32>
 8015e74:	4634      	mov	r4, r6
 8015e76:	6876      	ldr	r6, [r6, #4]
 8015e78:	e7b9      	b.n	8015dee <_malloc_r+0x46>
 8015e7a:	230c      	movs	r3, #12
 8015e7c:	603b      	str	r3, [r7, #0]
 8015e7e:	4638      	mov	r0, r7
 8015e80:	f000 fa52 	bl	8016328 <__malloc_unlock>
 8015e84:	e7a1      	b.n	8015dca <_malloc_r+0x22>
 8015e86:	6025      	str	r5, [r4, #0]
 8015e88:	e7de      	b.n	8015e48 <_malloc_r+0xa0>
 8015e8a:	bf00      	nop
 8015e8c:	20002488 	.word	0x20002488

08015e90 <__sfputc_r>:
 8015e90:	6893      	ldr	r3, [r2, #8]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	b410      	push	{r4}
 8015e98:	6093      	str	r3, [r2, #8]
 8015e9a:	da08      	bge.n	8015eae <__sfputc_r+0x1e>
 8015e9c:	6994      	ldr	r4, [r2, #24]
 8015e9e:	42a3      	cmp	r3, r4
 8015ea0:	db01      	blt.n	8015ea6 <__sfputc_r+0x16>
 8015ea2:	290a      	cmp	r1, #10
 8015ea4:	d103      	bne.n	8015eae <__sfputc_r+0x1e>
 8015ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eaa:	f7fe ba0f 	b.w	80142cc <__swbuf_r>
 8015eae:	6813      	ldr	r3, [r2, #0]
 8015eb0:	1c58      	adds	r0, r3, #1
 8015eb2:	6010      	str	r0, [r2, #0]
 8015eb4:	7019      	strb	r1, [r3, #0]
 8015eb6:	4608      	mov	r0, r1
 8015eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <__sfputs_r>:
 8015ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	460f      	mov	r7, r1
 8015ec4:	4614      	mov	r4, r2
 8015ec6:	18d5      	adds	r5, r2, r3
 8015ec8:	42ac      	cmp	r4, r5
 8015eca:	d101      	bne.n	8015ed0 <__sfputs_r+0x12>
 8015ecc:	2000      	movs	r0, #0
 8015ece:	e007      	b.n	8015ee0 <__sfputs_r+0x22>
 8015ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ed4:	463a      	mov	r2, r7
 8015ed6:	4630      	mov	r0, r6
 8015ed8:	f7ff ffda 	bl	8015e90 <__sfputc_r>
 8015edc:	1c43      	adds	r3, r0, #1
 8015ede:	d1f3      	bne.n	8015ec8 <__sfputs_r+0xa>
 8015ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ee4 <_vfiprintf_r>:
 8015ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee8:	460d      	mov	r5, r1
 8015eea:	b09d      	sub	sp, #116	; 0x74
 8015eec:	4614      	mov	r4, r2
 8015eee:	4698      	mov	r8, r3
 8015ef0:	4606      	mov	r6, r0
 8015ef2:	b118      	cbz	r0, 8015efc <_vfiprintf_r+0x18>
 8015ef4:	6983      	ldr	r3, [r0, #24]
 8015ef6:	b90b      	cbnz	r3, 8015efc <_vfiprintf_r+0x18>
 8015ef8:	f7ff fa3e 	bl	8015378 <__sinit>
 8015efc:	4b89      	ldr	r3, [pc, #548]	; (8016124 <_vfiprintf_r+0x240>)
 8015efe:	429d      	cmp	r5, r3
 8015f00:	d11b      	bne.n	8015f3a <_vfiprintf_r+0x56>
 8015f02:	6875      	ldr	r5, [r6, #4]
 8015f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f06:	07d9      	lsls	r1, r3, #31
 8015f08:	d405      	bmi.n	8015f16 <_vfiprintf_r+0x32>
 8015f0a:	89ab      	ldrh	r3, [r5, #12]
 8015f0c:	059a      	lsls	r2, r3, #22
 8015f0e:	d402      	bmi.n	8015f16 <_vfiprintf_r+0x32>
 8015f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f12:	f7ff fad4 	bl	80154be <__retarget_lock_acquire_recursive>
 8015f16:	89ab      	ldrh	r3, [r5, #12]
 8015f18:	071b      	lsls	r3, r3, #28
 8015f1a:	d501      	bpl.n	8015f20 <_vfiprintf_r+0x3c>
 8015f1c:	692b      	ldr	r3, [r5, #16]
 8015f1e:	b9eb      	cbnz	r3, 8015f5c <_vfiprintf_r+0x78>
 8015f20:	4629      	mov	r1, r5
 8015f22:	4630      	mov	r0, r6
 8015f24:	f7fe fa24 	bl	8014370 <__swsetup_r>
 8015f28:	b1c0      	cbz	r0, 8015f5c <_vfiprintf_r+0x78>
 8015f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f2c:	07dc      	lsls	r4, r3, #31
 8015f2e:	d50e      	bpl.n	8015f4e <_vfiprintf_r+0x6a>
 8015f30:	f04f 30ff 	mov.w	r0, #4294967295
 8015f34:	b01d      	add	sp, #116	; 0x74
 8015f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3a:	4b7b      	ldr	r3, [pc, #492]	; (8016128 <_vfiprintf_r+0x244>)
 8015f3c:	429d      	cmp	r5, r3
 8015f3e:	d101      	bne.n	8015f44 <_vfiprintf_r+0x60>
 8015f40:	68b5      	ldr	r5, [r6, #8]
 8015f42:	e7df      	b.n	8015f04 <_vfiprintf_r+0x20>
 8015f44:	4b79      	ldr	r3, [pc, #484]	; (801612c <_vfiprintf_r+0x248>)
 8015f46:	429d      	cmp	r5, r3
 8015f48:	bf08      	it	eq
 8015f4a:	68f5      	ldreq	r5, [r6, #12]
 8015f4c:	e7da      	b.n	8015f04 <_vfiprintf_r+0x20>
 8015f4e:	89ab      	ldrh	r3, [r5, #12]
 8015f50:	0598      	lsls	r0, r3, #22
 8015f52:	d4ed      	bmi.n	8015f30 <_vfiprintf_r+0x4c>
 8015f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f56:	f7ff fab3 	bl	80154c0 <__retarget_lock_release_recursive>
 8015f5a:	e7e9      	b.n	8015f30 <_vfiprintf_r+0x4c>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f60:	2320      	movs	r3, #32
 8015f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f6a:	2330      	movs	r3, #48	; 0x30
 8015f6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016130 <_vfiprintf_r+0x24c>
 8015f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f74:	f04f 0901 	mov.w	r9, #1
 8015f78:	4623      	mov	r3, r4
 8015f7a:	469a      	mov	sl, r3
 8015f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f80:	b10a      	cbz	r2, 8015f86 <_vfiprintf_r+0xa2>
 8015f82:	2a25      	cmp	r2, #37	; 0x25
 8015f84:	d1f9      	bne.n	8015f7a <_vfiprintf_r+0x96>
 8015f86:	ebba 0b04 	subs.w	fp, sl, r4
 8015f8a:	d00b      	beq.n	8015fa4 <_vfiprintf_r+0xc0>
 8015f8c:	465b      	mov	r3, fp
 8015f8e:	4622      	mov	r2, r4
 8015f90:	4629      	mov	r1, r5
 8015f92:	4630      	mov	r0, r6
 8015f94:	f7ff ff93 	bl	8015ebe <__sfputs_r>
 8015f98:	3001      	adds	r0, #1
 8015f9a:	f000 80aa 	beq.w	80160f2 <_vfiprintf_r+0x20e>
 8015f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fa0:	445a      	add	r2, fp
 8015fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8015fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	f000 80a2 	beq.w	80160f2 <_vfiprintf_r+0x20e>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8015fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fb8:	f10a 0a01 	add.w	sl, sl, #1
 8015fbc:	9304      	str	r3, [sp, #16]
 8015fbe:	9307      	str	r3, [sp, #28]
 8015fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8015fc6:	4654      	mov	r4, sl
 8015fc8:	2205      	movs	r2, #5
 8015fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fce:	4858      	ldr	r0, [pc, #352]	; (8016130 <_vfiprintf_r+0x24c>)
 8015fd0:	f7ea f92e 	bl	8000230 <memchr>
 8015fd4:	9a04      	ldr	r2, [sp, #16]
 8015fd6:	b9d8      	cbnz	r0, 8016010 <_vfiprintf_r+0x12c>
 8015fd8:	06d1      	lsls	r1, r2, #27
 8015fda:	bf44      	itt	mi
 8015fdc:	2320      	movmi	r3, #32
 8015fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fe2:	0713      	lsls	r3, r2, #28
 8015fe4:	bf44      	itt	mi
 8015fe6:	232b      	movmi	r3, #43	; 0x2b
 8015fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fec:	f89a 3000 	ldrb.w	r3, [sl]
 8015ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8015ff2:	d015      	beq.n	8016020 <_vfiprintf_r+0x13c>
 8015ff4:	9a07      	ldr	r2, [sp, #28]
 8015ff6:	4654      	mov	r4, sl
 8015ff8:	2000      	movs	r0, #0
 8015ffa:	f04f 0c0a 	mov.w	ip, #10
 8015ffe:	4621      	mov	r1, r4
 8016000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016004:	3b30      	subs	r3, #48	; 0x30
 8016006:	2b09      	cmp	r3, #9
 8016008:	d94e      	bls.n	80160a8 <_vfiprintf_r+0x1c4>
 801600a:	b1b0      	cbz	r0, 801603a <_vfiprintf_r+0x156>
 801600c:	9207      	str	r2, [sp, #28]
 801600e:	e014      	b.n	801603a <_vfiprintf_r+0x156>
 8016010:	eba0 0308 	sub.w	r3, r0, r8
 8016014:	fa09 f303 	lsl.w	r3, r9, r3
 8016018:	4313      	orrs	r3, r2
 801601a:	9304      	str	r3, [sp, #16]
 801601c:	46a2      	mov	sl, r4
 801601e:	e7d2      	b.n	8015fc6 <_vfiprintf_r+0xe2>
 8016020:	9b03      	ldr	r3, [sp, #12]
 8016022:	1d19      	adds	r1, r3, #4
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	9103      	str	r1, [sp, #12]
 8016028:	2b00      	cmp	r3, #0
 801602a:	bfbb      	ittet	lt
 801602c:	425b      	neglt	r3, r3
 801602e:	f042 0202 	orrlt.w	r2, r2, #2
 8016032:	9307      	strge	r3, [sp, #28]
 8016034:	9307      	strlt	r3, [sp, #28]
 8016036:	bfb8      	it	lt
 8016038:	9204      	strlt	r2, [sp, #16]
 801603a:	7823      	ldrb	r3, [r4, #0]
 801603c:	2b2e      	cmp	r3, #46	; 0x2e
 801603e:	d10c      	bne.n	801605a <_vfiprintf_r+0x176>
 8016040:	7863      	ldrb	r3, [r4, #1]
 8016042:	2b2a      	cmp	r3, #42	; 0x2a
 8016044:	d135      	bne.n	80160b2 <_vfiprintf_r+0x1ce>
 8016046:	9b03      	ldr	r3, [sp, #12]
 8016048:	1d1a      	adds	r2, r3, #4
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	9203      	str	r2, [sp, #12]
 801604e:	2b00      	cmp	r3, #0
 8016050:	bfb8      	it	lt
 8016052:	f04f 33ff 	movlt.w	r3, #4294967295
 8016056:	3402      	adds	r4, #2
 8016058:	9305      	str	r3, [sp, #20]
 801605a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016140 <_vfiprintf_r+0x25c>
 801605e:	7821      	ldrb	r1, [r4, #0]
 8016060:	2203      	movs	r2, #3
 8016062:	4650      	mov	r0, sl
 8016064:	f7ea f8e4 	bl	8000230 <memchr>
 8016068:	b140      	cbz	r0, 801607c <_vfiprintf_r+0x198>
 801606a:	2340      	movs	r3, #64	; 0x40
 801606c:	eba0 000a 	sub.w	r0, r0, sl
 8016070:	fa03 f000 	lsl.w	r0, r3, r0
 8016074:	9b04      	ldr	r3, [sp, #16]
 8016076:	4303      	orrs	r3, r0
 8016078:	3401      	adds	r4, #1
 801607a:	9304      	str	r3, [sp, #16]
 801607c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016080:	482c      	ldr	r0, [pc, #176]	; (8016134 <_vfiprintf_r+0x250>)
 8016082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016086:	2206      	movs	r2, #6
 8016088:	f7ea f8d2 	bl	8000230 <memchr>
 801608c:	2800      	cmp	r0, #0
 801608e:	d03f      	beq.n	8016110 <_vfiprintf_r+0x22c>
 8016090:	4b29      	ldr	r3, [pc, #164]	; (8016138 <_vfiprintf_r+0x254>)
 8016092:	bb1b      	cbnz	r3, 80160dc <_vfiprintf_r+0x1f8>
 8016094:	9b03      	ldr	r3, [sp, #12]
 8016096:	3307      	adds	r3, #7
 8016098:	f023 0307 	bic.w	r3, r3, #7
 801609c:	3308      	adds	r3, #8
 801609e:	9303      	str	r3, [sp, #12]
 80160a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a2:	443b      	add	r3, r7
 80160a4:	9309      	str	r3, [sp, #36]	; 0x24
 80160a6:	e767      	b.n	8015f78 <_vfiprintf_r+0x94>
 80160a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80160ac:	460c      	mov	r4, r1
 80160ae:	2001      	movs	r0, #1
 80160b0:	e7a5      	b.n	8015ffe <_vfiprintf_r+0x11a>
 80160b2:	2300      	movs	r3, #0
 80160b4:	3401      	adds	r4, #1
 80160b6:	9305      	str	r3, [sp, #20]
 80160b8:	4619      	mov	r1, r3
 80160ba:	f04f 0c0a 	mov.w	ip, #10
 80160be:	4620      	mov	r0, r4
 80160c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160c4:	3a30      	subs	r2, #48	; 0x30
 80160c6:	2a09      	cmp	r2, #9
 80160c8:	d903      	bls.n	80160d2 <_vfiprintf_r+0x1ee>
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d0c5      	beq.n	801605a <_vfiprintf_r+0x176>
 80160ce:	9105      	str	r1, [sp, #20]
 80160d0:	e7c3      	b.n	801605a <_vfiprintf_r+0x176>
 80160d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80160d6:	4604      	mov	r4, r0
 80160d8:	2301      	movs	r3, #1
 80160da:	e7f0      	b.n	80160be <_vfiprintf_r+0x1da>
 80160dc:	ab03      	add	r3, sp, #12
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	462a      	mov	r2, r5
 80160e2:	4b16      	ldr	r3, [pc, #88]	; (801613c <_vfiprintf_r+0x258>)
 80160e4:	a904      	add	r1, sp, #16
 80160e6:	4630      	mov	r0, r6
 80160e8:	f7fd fc98 	bl	8013a1c <_printf_float>
 80160ec:	4607      	mov	r7, r0
 80160ee:	1c78      	adds	r0, r7, #1
 80160f0:	d1d6      	bne.n	80160a0 <_vfiprintf_r+0x1bc>
 80160f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160f4:	07d9      	lsls	r1, r3, #31
 80160f6:	d405      	bmi.n	8016104 <_vfiprintf_r+0x220>
 80160f8:	89ab      	ldrh	r3, [r5, #12]
 80160fa:	059a      	lsls	r2, r3, #22
 80160fc:	d402      	bmi.n	8016104 <_vfiprintf_r+0x220>
 80160fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016100:	f7ff f9de 	bl	80154c0 <__retarget_lock_release_recursive>
 8016104:	89ab      	ldrh	r3, [r5, #12]
 8016106:	065b      	lsls	r3, r3, #25
 8016108:	f53f af12 	bmi.w	8015f30 <_vfiprintf_r+0x4c>
 801610c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801610e:	e711      	b.n	8015f34 <_vfiprintf_r+0x50>
 8016110:	ab03      	add	r3, sp, #12
 8016112:	9300      	str	r3, [sp, #0]
 8016114:	462a      	mov	r2, r5
 8016116:	4b09      	ldr	r3, [pc, #36]	; (801613c <_vfiprintf_r+0x258>)
 8016118:	a904      	add	r1, sp, #16
 801611a:	4630      	mov	r0, r6
 801611c:	f7fd ff22 	bl	8013f64 <_printf_i>
 8016120:	e7e4      	b.n	80160ec <_vfiprintf_r+0x208>
 8016122:	bf00      	nop
 8016124:	08016b00 	.word	0x08016b00
 8016128:	08016b20 	.word	0x08016b20
 801612c:	08016ae0 	.word	0x08016ae0
 8016130:	08016c9c 	.word	0x08016c9c
 8016134:	08016ca6 	.word	0x08016ca6
 8016138:	08013a1d 	.word	0x08013a1d
 801613c:	08015ebf 	.word	0x08015ebf
 8016140:	08016ca2 	.word	0x08016ca2

08016144 <_sbrk_r>:
 8016144:	b538      	push	{r3, r4, r5, lr}
 8016146:	4d06      	ldr	r5, [pc, #24]	; (8016160 <_sbrk_r+0x1c>)
 8016148:	2300      	movs	r3, #0
 801614a:	4604      	mov	r4, r0
 801614c:	4608      	mov	r0, r1
 801614e:	602b      	str	r3, [r5, #0]
 8016150:	f7ef fe6a 	bl	8005e28 <_sbrk>
 8016154:	1c43      	adds	r3, r0, #1
 8016156:	d102      	bne.n	801615e <_sbrk_r+0x1a>
 8016158:	682b      	ldr	r3, [r5, #0]
 801615a:	b103      	cbz	r3, 801615e <_sbrk_r+0x1a>
 801615c:	6023      	str	r3, [r4, #0]
 801615e:	bd38      	pop	{r3, r4, r5, pc}
 8016160:	20002490 	.word	0x20002490

08016164 <__sread>:
 8016164:	b510      	push	{r4, lr}
 8016166:	460c      	mov	r4, r1
 8016168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801616c:	f000 f8e2 	bl	8016334 <_read_r>
 8016170:	2800      	cmp	r0, #0
 8016172:	bfab      	itete	ge
 8016174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016176:	89a3      	ldrhlt	r3, [r4, #12]
 8016178:	181b      	addge	r3, r3, r0
 801617a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801617e:	bfac      	ite	ge
 8016180:	6563      	strge	r3, [r4, #84]	; 0x54
 8016182:	81a3      	strhlt	r3, [r4, #12]
 8016184:	bd10      	pop	{r4, pc}

08016186 <__swrite>:
 8016186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801618a:	461f      	mov	r7, r3
 801618c:	898b      	ldrh	r3, [r1, #12]
 801618e:	05db      	lsls	r3, r3, #23
 8016190:	4605      	mov	r5, r0
 8016192:	460c      	mov	r4, r1
 8016194:	4616      	mov	r6, r2
 8016196:	d505      	bpl.n	80161a4 <__swrite+0x1e>
 8016198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801619c:	2302      	movs	r3, #2
 801619e:	2200      	movs	r2, #0
 80161a0:	f000 f898 	bl	80162d4 <_lseek_r>
 80161a4:	89a3      	ldrh	r3, [r4, #12]
 80161a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80161ae:	81a3      	strh	r3, [r4, #12]
 80161b0:	4632      	mov	r2, r6
 80161b2:	463b      	mov	r3, r7
 80161b4:	4628      	mov	r0, r5
 80161b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161ba:	f000 b817 	b.w	80161ec <_write_r>

080161be <__sseek>:
 80161be:	b510      	push	{r4, lr}
 80161c0:	460c      	mov	r4, r1
 80161c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161c6:	f000 f885 	bl	80162d4 <_lseek_r>
 80161ca:	1c43      	adds	r3, r0, #1
 80161cc:	89a3      	ldrh	r3, [r4, #12]
 80161ce:	bf15      	itete	ne
 80161d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80161d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80161d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80161da:	81a3      	strheq	r3, [r4, #12]
 80161dc:	bf18      	it	ne
 80161de:	81a3      	strhne	r3, [r4, #12]
 80161e0:	bd10      	pop	{r4, pc}

080161e2 <__sclose>:
 80161e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161e6:	f000 b831 	b.w	801624c <_close_r>
	...

080161ec <_write_r>:
 80161ec:	b538      	push	{r3, r4, r5, lr}
 80161ee:	4d07      	ldr	r5, [pc, #28]	; (801620c <_write_r+0x20>)
 80161f0:	4604      	mov	r4, r0
 80161f2:	4608      	mov	r0, r1
 80161f4:	4611      	mov	r1, r2
 80161f6:	2200      	movs	r2, #0
 80161f8:	602a      	str	r2, [r5, #0]
 80161fa:	461a      	mov	r2, r3
 80161fc:	f7ef fdb3 	bl	8005d66 <_write>
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	d102      	bne.n	801620a <_write_r+0x1e>
 8016204:	682b      	ldr	r3, [r5, #0]
 8016206:	b103      	cbz	r3, 801620a <_write_r+0x1e>
 8016208:	6023      	str	r3, [r4, #0]
 801620a:	bd38      	pop	{r3, r4, r5, pc}
 801620c:	20002490 	.word	0x20002490

08016210 <__assert_func>:
 8016210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016212:	4614      	mov	r4, r2
 8016214:	461a      	mov	r2, r3
 8016216:	4b09      	ldr	r3, [pc, #36]	; (801623c <__assert_func+0x2c>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4605      	mov	r5, r0
 801621c:	68d8      	ldr	r0, [r3, #12]
 801621e:	b14c      	cbz	r4, 8016234 <__assert_func+0x24>
 8016220:	4b07      	ldr	r3, [pc, #28]	; (8016240 <__assert_func+0x30>)
 8016222:	9100      	str	r1, [sp, #0]
 8016224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016228:	4906      	ldr	r1, [pc, #24]	; (8016244 <__assert_func+0x34>)
 801622a:	462b      	mov	r3, r5
 801622c:	f000 f81e 	bl	801626c <fiprintf>
 8016230:	f000 f89f 	bl	8016372 <abort>
 8016234:	4b04      	ldr	r3, [pc, #16]	; (8016248 <__assert_func+0x38>)
 8016236:	461c      	mov	r4, r3
 8016238:	e7f3      	b.n	8016222 <__assert_func+0x12>
 801623a:	bf00      	nop
 801623c:	20000184 	.word	0x20000184
 8016240:	08016cad 	.word	0x08016cad
 8016244:	08016cba 	.word	0x08016cba
 8016248:	08016ce8 	.word	0x08016ce8

0801624c <_close_r>:
 801624c:	b538      	push	{r3, r4, r5, lr}
 801624e:	4d06      	ldr	r5, [pc, #24]	; (8016268 <_close_r+0x1c>)
 8016250:	2300      	movs	r3, #0
 8016252:	4604      	mov	r4, r0
 8016254:	4608      	mov	r0, r1
 8016256:	602b      	str	r3, [r5, #0]
 8016258:	f7ef fdb2 	bl	8005dc0 <_close>
 801625c:	1c43      	adds	r3, r0, #1
 801625e:	d102      	bne.n	8016266 <_close_r+0x1a>
 8016260:	682b      	ldr	r3, [r5, #0]
 8016262:	b103      	cbz	r3, 8016266 <_close_r+0x1a>
 8016264:	6023      	str	r3, [r4, #0]
 8016266:	bd38      	pop	{r3, r4, r5, pc}
 8016268:	20002490 	.word	0x20002490

0801626c <fiprintf>:
 801626c:	b40e      	push	{r1, r2, r3}
 801626e:	b503      	push	{r0, r1, lr}
 8016270:	4601      	mov	r1, r0
 8016272:	ab03      	add	r3, sp, #12
 8016274:	4805      	ldr	r0, [pc, #20]	; (801628c <fiprintf+0x20>)
 8016276:	f853 2b04 	ldr.w	r2, [r3], #4
 801627a:	6800      	ldr	r0, [r0, #0]
 801627c:	9301      	str	r3, [sp, #4]
 801627e:	f7ff fe31 	bl	8015ee4 <_vfiprintf_r>
 8016282:	b002      	add	sp, #8
 8016284:	f85d eb04 	ldr.w	lr, [sp], #4
 8016288:	b003      	add	sp, #12
 801628a:	4770      	bx	lr
 801628c:	20000184 	.word	0x20000184

08016290 <_fstat_r>:
 8016290:	b538      	push	{r3, r4, r5, lr}
 8016292:	4d07      	ldr	r5, [pc, #28]	; (80162b0 <_fstat_r+0x20>)
 8016294:	2300      	movs	r3, #0
 8016296:	4604      	mov	r4, r0
 8016298:	4608      	mov	r0, r1
 801629a:	4611      	mov	r1, r2
 801629c:	602b      	str	r3, [r5, #0]
 801629e:	f7ef fd9b 	bl	8005dd8 <_fstat>
 80162a2:	1c43      	adds	r3, r0, #1
 80162a4:	d102      	bne.n	80162ac <_fstat_r+0x1c>
 80162a6:	682b      	ldr	r3, [r5, #0]
 80162a8:	b103      	cbz	r3, 80162ac <_fstat_r+0x1c>
 80162aa:	6023      	str	r3, [r4, #0]
 80162ac:	bd38      	pop	{r3, r4, r5, pc}
 80162ae:	bf00      	nop
 80162b0:	20002490 	.word	0x20002490

080162b4 <_isatty_r>:
 80162b4:	b538      	push	{r3, r4, r5, lr}
 80162b6:	4d06      	ldr	r5, [pc, #24]	; (80162d0 <_isatty_r+0x1c>)
 80162b8:	2300      	movs	r3, #0
 80162ba:	4604      	mov	r4, r0
 80162bc:	4608      	mov	r0, r1
 80162be:	602b      	str	r3, [r5, #0]
 80162c0:	f7ef fd9a 	bl	8005df8 <_isatty>
 80162c4:	1c43      	adds	r3, r0, #1
 80162c6:	d102      	bne.n	80162ce <_isatty_r+0x1a>
 80162c8:	682b      	ldr	r3, [r5, #0]
 80162ca:	b103      	cbz	r3, 80162ce <_isatty_r+0x1a>
 80162cc:	6023      	str	r3, [r4, #0]
 80162ce:	bd38      	pop	{r3, r4, r5, pc}
 80162d0:	20002490 	.word	0x20002490

080162d4 <_lseek_r>:
 80162d4:	b538      	push	{r3, r4, r5, lr}
 80162d6:	4d07      	ldr	r5, [pc, #28]	; (80162f4 <_lseek_r+0x20>)
 80162d8:	4604      	mov	r4, r0
 80162da:	4608      	mov	r0, r1
 80162dc:	4611      	mov	r1, r2
 80162de:	2200      	movs	r2, #0
 80162e0:	602a      	str	r2, [r5, #0]
 80162e2:	461a      	mov	r2, r3
 80162e4:	f7ef fd93 	bl	8005e0e <_lseek>
 80162e8:	1c43      	adds	r3, r0, #1
 80162ea:	d102      	bne.n	80162f2 <_lseek_r+0x1e>
 80162ec:	682b      	ldr	r3, [r5, #0]
 80162ee:	b103      	cbz	r3, 80162f2 <_lseek_r+0x1e>
 80162f0:	6023      	str	r3, [r4, #0]
 80162f2:	bd38      	pop	{r3, r4, r5, pc}
 80162f4:	20002490 	.word	0x20002490

080162f8 <__ascii_mbtowc>:
 80162f8:	b082      	sub	sp, #8
 80162fa:	b901      	cbnz	r1, 80162fe <__ascii_mbtowc+0x6>
 80162fc:	a901      	add	r1, sp, #4
 80162fe:	b142      	cbz	r2, 8016312 <__ascii_mbtowc+0x1a>
 8016300:	b14b      	cbz	r3, 8016316 <__ascii_mbtowc+0x1e>
 8016302:	7813      	ldrb	r3, [r2, #0]
 8016304:	600b      	str	r3, [r1, #0]
 8016306:	7812      	ldrb	r2, [r2, #0]
 8016308:	1e10      	subs	r0, r2, #0
 801630a:	bf18      	it	ne
 801630c:	2001      	movne	r0, #1
 801630e:	b002      	add	sp, #8
 8016310:	4770      	bx	lr
 8016312:	4610      	mov	r0, r2
 8016314:	e7fb      	b.n	801630e <__ascii_mbtowc+0x16>
 8016316:	f06f 0001 	mvn.w	r0, #1
 801631a:	e7f8      	b.n	801630e <__ascii_mbtowc+0x16>

0801631c <__malloc_lock>:
 801631c:	4801      	ldr	r0, [pc, #4]	; (8016324 <__malloc_lock+0x8>)
 801631e:	f7ff b8ce 	b.w	80154be <__retarget_lock_acquire_recursive>
 8016322:	bf00      	nop
 8016324:	20002484 	.word	0x20002484

08016328 <__malloc_unlock>:
 8016328:	4801      	ldr	r0, [pc, #4]	; (8016330 <__malloc_unlock+0x8>)
 801632a:	f7ff b8c9 	b.w	80154c0 <__retarget_lock_release_recursive>
 801632e:	bf00      	nop
 8016330:	20002484 	.word	0x20002484

08016334 <_read_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4d07      	ldr	r5, [pc, #28]	; (8016354 <_read_r+0x20>)
 8016338:	4604      	mov	r4, r0
 801633a:	4608      	mov	r0, r1
 801633c:	4611      	mov	r1, r2
 801633e:	2200      	movs	r2, #0
 8016340:	602a      	str	r2, [r5, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	f7ef fcf2 	bl	8005d2c <_read>
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	d102      	bne.n	8016352 <_read_r+0x1e>
 801634c:	682b      	ldr	r3, [r5, #0]
 801634e:	b103      	cbz	r3, 8016352 <_read_r+0x1e>
 8016350:	6023      	str	r3, [r4, #0]
 8016352:	bd38      	pop	{r3, r4, r5, pc}
 8016354:	20002490 	.word	0x20002490

08016358 <__ascii_wctomb>:
 8016358:	b149      	cbz	r1, 801636e <__ascii_wctomb+0x16>
 801635a:	2aff      	cmp	r2, #255	; 0xff
 801635c:	bf85      	ittet	hi
 801635e:	238a      	movhi	r3, #138	; 0x8a
 8016360:	6003      	strhi	r3, [r0, #0]
 8016362:	700a      	strbls	r2, [r1, #0]
 8016364:	f04f 30ff 	movhi.w	r0, #4294967295
 8016368:	bf98      	it	ls
 801636a:	2001      	movls	r0, #1
 801636c:	4770      	bx	lr
 801636e:	4608      	mov	r0, r1
 8016370:	4770      	bx	lr

08016372 <abort>:
 8016372:	b508      	push	{r3, lr}
 8016374:	2006      	movs	r0, #6
 8016376:	f000 f82b 	bl	80163d0 <raise>
 801637a:	2001      	movs	r0, #1
 801637c:	f7ef fccc 	bl	8005d18 <_exit>

08016380 <_raise_r>:
 8016380:	291f      	cmp	r1, #31
 8016382:	b538      	push	{r3, r4, r5, lr}
 8016384:	4604      	mov	r4, r0
 8016386:	460d      	mov	r5, r1
 8016388:	d904      	bls.n	8016394 <_raise_r+0x14>
 801638a:	2316      	movs	r3, #22
 801638c:	6003      	str	r3, [r0, #0]
 801638e:	f04f 30ff 	mov.w	r0, #4294967295
 8016392:	bd38      	pop	{r3, r4, r5, pc}
 8016394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016396:	b112      	cbz	r2, 801639e <_raise_r+0x1e>
 8016398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801639c:	b94b      	cbnz	r3, 80163b2 <_raise_r+0x32>
 801639e:	4620      	mov	r0, r4
 80163a0:	f000 f830 	bl	8016404 <_getpid_r>
 80163a4:	462a      	mov	r2, r5
 80163a6:	4601      	mov	r1, r0
 80163a8:	4620      	mov	r0, r4
 80163aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163ae:	f000 b817 	b.w	80163e0 <_kill_r>
 80163b2:	2b01      	cmp	r3, #1
 80163b4:	d00a      	beq.n	80163cc <_raise_r+0x4c>
 80163b6:	1c59      	adds	r1, r3, #1
 80163b8:	d103      	bne.n	80163c2 <_raise_r+0x42>
 80163ba:	2316      	movs	r3, #22
 80163bc:	6003      	str	r3, [r0, #0]
 80163be:	2001      	movs	r0, #1
 80163c0:	e7e7      	b.n	8016392 <_raise_r+0x12>
 80163c2:	2400      	movs	r4, #0
 80163c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80163c8:	4628      	mov	r0, r5
 80163ca:	4798      	blx	r3
 80163cc:	2000      	movs	r0, #0
 80163ce:	e7e0      	b.n	8016392 <_raise_r+0x12>

080163d0 <raise>:
 80163d0:	4b02      	ldr	r3, [pc, #8]	; (80163dc <raise+0xc>)
 80163d2:	4601      	mov	r1, r0
 80163d4:	6818      	ldr	r0, [r3, #0]
 80163d6:	f7ff bfd3 	b.w	8016380 <_raise_r>
 80163da:	bf00      	nop
 80163dc:	20000184 	.word	0x20000184

080163e0 <_kill_r>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	4d07      	ldr	r5, [pc, #28]	; (8016400 <_kill_r+0x20>)
 80163e4:	2300      	movs	r3, #0
 80163e6:	4604      	mov	r4, r0
 80163e8:	4608      	mov	r0, r1
 80163ea:	4611      	mov	r1, r2
 80163ec:	602b      	str	r3, [r5, #0]
 80163ee:	f7ef fc83 	bl	8005cf8 <_kill>
 80163f2:	1c43      	adds	r3, r0, #1
 80163f4:	d102      	bne.n	80163fc <_kill_r+0x1c>
 80163f6:	682b      	ldr	r3, [r5, #0]
 80163f8:	b103      	cbz	r3, 80163fc <_kill_r+0x1c>
 80163fa:	6023      	str	r3, [r4, #0]
 80163fc:	bd38      	pop	{r3, r4, r5, pc}
 80163fe:	bf00      	nop
 8016400:	20002490 	.word	0x20002490

08016404 <_getpid_r>:
 8016404:	f7ef bc70 	b.w	8005ce8 <_getpid>

08016408 <_init>:
 8016408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801640a:	bf00      	nop
 801640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801640e:	bc08      	pop	{r3}
 8016410:	469e      	mov	lr, r3
 8016412:	4770      	bx	lr

08016414 <_fini>:
 8016414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016416:	bf00      	nop
 8016418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801641a:	bc08      	pop	{r3}
 801641c:	469e      	mov	lr, r3
 801641e:	4770      	bx	lr
