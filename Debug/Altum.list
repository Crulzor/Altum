
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d68  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08015f48  08015f48  00025f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ba4  08016ba4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08016ba4  08016ba4  00026ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016bac  08016bac  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016bac  08016bac  00026bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bb0  08016bb0  00026bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08016bb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000354  08016f08  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002490  08016f08  00032490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044eee  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f17  00000000  00000000  00075272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  0007c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fc0  00000000  00000000  0007e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc6e  00000000  00000000  00080358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a2cd  00000000  00000000  000bcfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bd83  00000000  00000000  000f7293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a194  00000000  00000000  00273068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015f30 	.word	0x08015f30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08015f30 	.word	0x08015f30

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	6053      	str	r3, [r2, #4]
 8000f14:	6093      	str	r3, [r2, #8]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3314      	adds	r3, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	861a      	strh	r2, [r3, #48]	; 0x30
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fe0e 	bl	8004ba4 <_ZN10Components9get_ADC_1Ev>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f005 fb5f 	bl	8006650 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fe10 	bl	8004bbc <_ZN10Components9get_ADC_2Ev>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f005 fb54 	bl	8006650 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fe13 	bl	8004bd8 <_ZN10Components9get_ADC_5Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f005 fb49 	bl	8006650 <HAL_ADC_Start_DMA>



}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fe86 	bl	8003ce4 <_ZN4SBUS8B_buttonEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe8:	da01      	bge.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <_ZN9Convertor9updateLEDEv+0x2a>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d015      	beq.n	8001020 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	33fa      	adds	r3, #250	; 0xfa
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fa77 	bl	8002504 <_ZN11Initializer13get_LED_TimerEv>
 8001016:	4603      	mov	r3, r0
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4622      	mov	r2, r4
 800101c:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 800101e:	e026      	b.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fe03 	bl	8003c30 <_ZN4SBUS8A_buttonEv>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd01      	ble.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <_ZN9Convertor9updateLEDEv+0x7a>
 800103e:	2300      	movs	r3, #0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800104a:	b29b      	uxth	r3, r3
 800104c:	3bfa      	subs	r3, #250	; 0xfa
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fa4f 	bl	8002504 <_ZN11Initializer13get_LED_TimerEv>
 8001066:	4603      	mov	r3, r0
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4622      	mov	r2, r4
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}

08001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	460b      	mov	r3, r1
 8001084:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001086:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db76      	blt.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 8001094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e03c      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d109      	bne.n	80010c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 80010ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
 80010c0:	e02f      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d109      	bne.n	80010dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 80010c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010da:	e022      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d109      	bne.n	80010f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 80010e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfb8      	it	lt
 80010ea:	425b      	neglt	r3, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	e015      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d109      	bne.n	8001110 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 80010fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfb8      	it	lt
 8001104:	425b      	neglt	r3, r3
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
 800110e:	e008      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001110:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001114:	2b00      	cmp	r3, #0
 8001116:	bfb8      	it	lt
 8001118:	425b      	neglt	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 8001130:	e09e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b04      	cmp	r3, #4
 8001136:	d104      	bne.n	8001142 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001140:	e096      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d104      	bne.n	8001152 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001150:	e08e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d104      	bne.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001160:	e086      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d104      	bne.n	8001172 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001170:	e07e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800117a:	e079      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 800117c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da75      	bge.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e023      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d104      	bne.n	80011a4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	639a      	str	r2, [r3, #56]	; 0x38
 80011a2:	e01b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d104      	bne.n	80011b4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b2:	e013      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d104      	bne.n	80011c4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e00b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d104      	bne.n	80011d4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
 80011d2:	e003      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 80011e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011f4:	e03c      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d109      	bne.n	8001210 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 80011fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001200:	2b00      	cmp	r3, #0
 8001202:	bfb8      	it	lt
 8001204:	425b      	neglt	r3, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800120e:	e02f      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b08      	cmp	r3, #8
 8001214:	d109      	bne.n	800122a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 8001216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	425b      	neglt	r3, r3
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001228:	e022      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d109      	bne.n	8001244 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 8001230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bfb8      	it	lt
 8001238:	425b      	neglt	r3, r3
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001242:	e015      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d109      	bne.n	800125e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 800124a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	425b      	neglt	r3, r3
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800125c:	e008      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800125e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfb8      	it	lt
 8001266:	425b      	neglt	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fb96 	bl	80039c0 <_ZN4SBUS9getRightYEv>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	dd10      	ble.n	80012d2 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bfb8      	it	lt
 80012ba:	425b      	neglt	r3, r3
 80012bc:	b29c      	uxth	r4, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f94f 	bl	8002566 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4622      	mov	r2, r4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 80012d0:	e008      	b.n	80012e4 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f945 	bl	8002566 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012dc:	4603      	mov	r3, r0
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fbc9 	bl	8003a90 <_ZN4SBUS9getRightXEv>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	b21a      	sxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <_ZN9Convertor14updateSelectorEv+0x8c>)
 8001312:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <_ZN9Convertor14updateSelectorEv+0x90>)
 8001316:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd10      	ble.n	8001344 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f8f5 	bl	800251c <_ZN11Initializer18get_selector_TimerEv>
 8001332:	4602      	mov	r2, r0
 8001334:	2308      	movs	r3, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	230c      	movs	r3, #12
 800133a:	4621      	mov	r1, r4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe9a 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 8001342:	e014      	b.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	da0f      	bge.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f001 f8df 	bl	800251c <_ZN11Initializer18get_selector_TimerEv>
 800135e:	4602      	mov	r2, r0
 8001360:	2308      	movs	r3, #8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	230c      	movs	r3, #12
 8001366:	4621      	mov	r1, r4
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fe84 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	42dc0000 	.word	0x42dc0000
 800137c:	44700000 	.word	0x44700000

08001380 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fac5 	bl	800391c <_ZN4SBUS8getLeftYEv>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 3a90 	vmov	r3, s15
 800139e:	b21a      	sxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd10      	ble.n	80013d0 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f8bb 	bl	8002534 <_ZN11Initializer19get_pushMotor_TimerEv>
 80013be:	4602      	mov	r2, r0
 80013c0:	2308      	movs	r3, #8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2304      	movs	r3, #4
 80013c6:	4621      	mov	r1, r4
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe54 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 80013ce:	e014      	b.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0f      	bge.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f8a5 	bl	8002534 <_ZN11Initializer19get_pushMotor_TimerEv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	2308      	movs	r3, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2304      	movs	r3, #4
 80013f2:	4621      	mov	r1, r4
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fe3e 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 8001402:	b590      	push	{r4, r7, lr}
 8001404:	b085      	sub	sp, #20
 8001406:	af02      	add	r7, sp, #8
 8001408:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fba6 	bl	8003b60 <_ZN4SBUS11getJogWheelEv>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd10      	ble.n	8001452 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f886 	bl	800254c <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001440:	4602      	mov	r2, r0
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2304      	movs	r3, #4
 8001448:	4621      	mov	r1, r4
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe13 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 8001450:	e014      	b.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0f      	bge.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f870 	bl	800254c <_ZN11Initializer20get_fluidMotor_TimerEv>
 800146c:	4602      	mov	r2, r0
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2304      	movs	r3, #4
 8001474:	4621      	mov	r1, r4
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fdfd 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <_ZN9Convertor7processEv>:

	return ADC_5_Buffer[1] / 4.095;
}


void Convertor::process(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]


	this->updateLED();
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fd9a 	bl	8000fc6 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff2a 	bl	80012ec <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff71 	bl	8001380 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffaf 	bl	8001402 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fee9 	bl	800127c <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd63 	bl	8000f76 <_ZN9Convertor6getADCEv>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]

	this->_huart1 = huart1;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
	this->initClock();
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 ffb1 	bl	8002438 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 ff08 	bl	80022ec <_ZN11Initializer8initGPIOEv>
}
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]


	this->initDMA();
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fea6 	bl	8002240 <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f81f 	bl	8001538 <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f920 	bl	8001740 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f997 	bl	8001834 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa50 	bl	80019ac <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fb2f 	bl	8001b70 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc42 	bl	8001d9c <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fd09 	bl	8001f30 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fd76 	bl	8002010 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fdfb 	bl	8002120 <_ZN11Initializer11initUSART_2Ev>


    MX_USB_Device_Init();
 800152a:	f011 f9a5 	bl	8012878 <MX_USB_Device_Init>





}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <_ZN11Initializer9initTIM_1Ev>:

void Initializer::initTIM_1(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	b09e      	sub	sp, #120	; 0x78
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001540:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	4a7b      	ldr	r2, [pc, #492]	; (8001734 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154a:	6613      	str	r3, [r2, #96]	; 0x60
 800154c:	4b79      	ldr	r3, [pc, #484]	; (8001734 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001558:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2234      	movs	r2, #52	; 0x34
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f011 ff32 	bl	80133f8 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a68      	ldr	r2, [pc, #416]	; (8001738 <_ZN11Initializer9initTIM_1Ev+0x200>)
 8001598:	609a      	str	r2, [r3, #8]
	  htim1.Init.Prescaler = 8;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2208      	movs	r2, #8
 800159e:	60da      	str	r2, [r3, #12]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
	  htim1.Init.Period = 1080;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80015ac:	615a      	str	r2, [r3, #20]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
	  htim1.Init.RepetitionCounter = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3308      	adds	r3, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00a fab1 	bl	800bb2c <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ffd0 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80015e0:	4856      	ldr	r0, [pc, #344]	; (800173c <_ZN11Initializer9initTIM_1Ev+0x204>)
 80015e2:	f012 fb7b 	bl	8013cdc <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3308      	adds	r3, #8
 80015f0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00a fd6c 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 ffb7 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3308      	adds	r3, #8
 8001616:	4618      	mov	r0, r3
 8001618:	f00a fadf 	bl	800bbda <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 ffa7 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001632:	4842      	ldr	r0, [pc, #264]	; (800173c <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001634:	f012 fb52 	bl	8013cdc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3308      	adds	r3, #8
 8001648:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f00b fbac 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 ff8b 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	; 0x60
 800166c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3308      	adds	r3, #8
 800168a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800168e:	2208      	movs	r2, #8
 8001690:	4618      	mov	r0, r3
 8001692:	f00a fc0b 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 ff6a 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80016ac:	4823      	ldr	r0, [pc, #140]	; (800173c <_ZN11Initializer9initTIM_1Ev+0x204>)
 80016ae:	f012 fb15 	bl	8013cdc <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3308      	adds	r3, #8
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b fbef 	bl	800ced8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 ff38 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001710:	480a      	ldr	r0, [pc, #40]	; (800173c <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001712:	f012 fae3 	bl	8013cdc <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3308      	adds	r3, #8
 800171a:	4618      	mov	r0, r3
 800171c:	f003 ff5c 	bl	80055d8 <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3308      	adds	r3, #8
 8001724:	2108      	movs	r1, #8
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fa7e 	bl	800cc28 <HAL_TIMEx_PWMN_Start>


}
 800172c:	bf00      	nop
 800172e:	3778      	adds	r7, #120	; 0x78
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40012c00 	.word	0x40012c00
 800173c:	08015f48 	.word	0x08015f48

08001740 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001768:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	  htim2.Init.Prescaler = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.Period = 4.294967295E9;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 32ff 	mov.w	r2, #4294967295
 8001782:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800179c:	4618      	mov	r0, r3
 800179e:	f00a f9c5 	bl	800bb2c <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fee4 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017b8:	481d      	ldr	r0, [pc, #116]	; (8001830 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017ba:	f012 fa8f 	bl	8013cdc <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017ca:	f107 0218 	add.w	r2, r7, #24
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00a fc7f 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 feca 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017ee:	f012 fa75 	bl	8013cdc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f00b fad0 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 feaf 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001824:	f012 fa5a 	bl	8013cdc <iprintf>

	  }


}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08015f60 	.word	0x08015f60

08001834 <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	615a      	str	r2, [r3, #20]
 8001872:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <_ZN11Initializer9initTIM_3Ev+0x170>)
 8001878:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	  htim3.Init.Prescaler = 0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.Period = 1000;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001892:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a f994 	bl	800bbda <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fe5c 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80018c8:	4837      	ldr	r0, [pc, #220]	; (80019a8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 80018ca:	f012 fa07 	bl	8013cdc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80018dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b fa62 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fe41 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80018fe:	482a      	ldr	r0, [pc, #168]	; (80019a8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001900:	f012 f9ec 	bl	8013cdc <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001904:	2360      	movs	r3, #96	; 0x60
 8001906:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800191a:	f107 0110 	add.w	r1, r7, #16
 800191e:	2200      	movs	r2, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f00a fac3 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fe22 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 800193e:	f012 f9cd 	bl	8013cdc <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001948:	f107 0110 	add.w	r1, r7, #16
 800194c:	2204      	movs	r2, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f00a faac 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fe0b 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 800196c:	f012 f9b6 	bl	8013cdc <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fe2e 	bl	80055d8 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00a f97f 	bl	800bc88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001990:	2104      	movs	r1, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f00a f978 	bl	800bc88 <HAL_TIM_PWM_Start>



}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40000400 	.word	0x40000400
 80019a8:	08015f78 	.word	0x08015f78

080019ac <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b092      	sub	sp, #72	; 0x48
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
	  htim4.Init.Prescaler = 2;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.Period = 1000;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a12:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	66da      	str	r2, [r3, #108]	; 0x6c
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3354      	adds	r3, #84	; 0x54
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00a f881 	bl	800bb2c <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fda0 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a40:	484a      	ldr	r0, [pc, #296]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001a42:	f012 f94b 	bl	8013cdc <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3354      	adds	r3, #84	; 0x54
 8001a50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00a fb3c 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fd87 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a72:	483e      	ldr	r0, [pc, #248]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001a74:	f012 f932 	bl	8013cdc <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3354      	adds	r3, #84	; 0x54
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a f8ac 	bl	800bbda <HAL_TIM_PWM_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fd74 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a98:	4834      	ldr	r0, [pc, #208]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001a9a:	f012 f91f 	bl	8013cdc <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3354      	adds	r3, #84	; 0x54
 8001aaa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00b f97b 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fd5a 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001acc:	4827      	ldr	r0, [pc, #156]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001ace:	f012 f905 	bl	8013cdc <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad2:	2360      	movs	r3, #96	; 0x60
 8001ad4:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3354      	adds	r3, #84	; 0x54
 8001ae6:	f107 0110 	add.w	r1, r7, #16
 8001aea:	2204      	movs	r2, #4
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00a f9dd 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fd3c 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b08:	4818      	ldr	r0, [pc, #96]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b0a:	f012 f8e7 	bl	8013cdc <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3354      	adds	r3, #84	; 0x54
 8001b12:	f107 0110 	add.w	r1, r7, #16
 8001b16:	2208      	movs	r2, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a f9c7 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fd26 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b36:	f012 f8d1 	bl	8013cdc <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3354      	adds	r3, #84	; 0x54
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fd4a 	bl	80055d8 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3354      	adds	r3, #84	; 0x54
 8001b48:	2108      	movs	r1, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00a f89c 	bl	800bc88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3354      	adds	r3, #84	; 0x54
 8001b54:	2104      	movs	r1, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00a f896 	bl	800bc88 <HAL_TIM_PWM_Start>


}
 8001b5c:	bf00      	nop
 8001b5e:	3748      	adds	r7, #72	; 0x48
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40000800 	.word	0x40000800
 8001b6c:	08015f90 	.word	0x08015f90

08001b70 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09e      	sub	sp, #120	; 0x78
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001b78:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7c:	4a85      	ldr	r2, [pc, #532]	; (8001d94 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b82:	6613      	str	r3, [r2, #96]	; 0x60
 8001b84:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2234      	movs	r2, #52	; 0x34
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f011 fc16 	bl	80133f8 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001bd0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	  htim8.Init.Prescaler = 2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.Period = 1000;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.RepetitionCounter = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	33ec      	adds	r3, #236	; 0xec
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 ff8e 	bl	800bb2c <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fcad 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	33ec      	adds	r3, #236	; 0xec
 8001c30:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00a fa4c 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fc97 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	33ec      	adds	r3, #236	; 0xec
 8001c56:	4618      	mov	r0, r3
 8001c58:	f009 ffbf 	bl	800bbda <HAL_TIM_PWM_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fc87 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	33ec      	adds	r3, #236	; 0xec
 8001c82:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00b f88f 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fc6e 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	33ec      	adds	r3, #236	; 0xec
 8001cc4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00a f8ee 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fc4d 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	33ec      	adds	r3, #236	; 0xec
 8001cea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001cee:	220c      	movs	r2, #12
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a f8db 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fc3a 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d24:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	33ec      	adds	r3, #236	; 0xec
 8001d48:	f107 020c 	add.w	r2, r7, #12
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00b f8c2 	bl	800ced8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fc0b 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	33ec      	adds	r3, #236	; 0xec
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fc32 	bl	80055d8 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	33ec      	adds	r3, #236	; 0xec
 8001d78:	2108      	movs	r1, #8
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f009 ff84 	bl	800bc88 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	33ec      	adds	r3, #236	; 0xec
 8001d84:	210c      	movs	r1, #12
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00a ff4e 	bl	800cc28 <HAL_TIMEx_PWMN_Start>




}
 8001d8c:	bf00      	nop
 8001d8e:	3778      	adds	r7, #120	; 0x78
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40013400 	.word	0x40013400

08001d9c <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b098      	sub	sp, #96	; 0x60
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001da4:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	4a5e      	ldr	r2, [pc, #376]	; (8001f24 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dae:	6613      	str	r3, [r2, #96]	; 0x60
 8001db0:	4b5c      	ldr	r3, [pc, #368]	; (8001f24 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2234      	movs	r2, #52	; 0x34
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f011 fb0d 	bl	80133f8 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001de2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  htim16.Init.Prescaler = 128;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.Period = 1000;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.RepetitionCounter = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	33a0      	adds	r3, #160	; 0xa0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f009 fe85 	bl	800bb2c <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fba4 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e38:	483c      	ldr	r0, [pc, #240]	; (8001f2c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e3a:	f011 ff4f 	bl	8013cdc <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	33a0      	adds	r3, #160	; 0xa0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 fec9 	bl	800bbda <HAL_TIM_PWM_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb91 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e5e:	4833      	ldr	r0, [pc, #204]	; (8001f2c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e60:	f011 ff3c 	bl	8013cdc <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e64:	2360      	movs	r3, #96	; 0x60
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e70:	2300      	movs	r3, #0
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	33a0      	adds	r3, #160	; 0xa0
 8001e84:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00a f80e 	bl	800beac <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb6d 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001ea6:	4821      	ldr	r0, [pc, #132]	; (8001f2c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001ea8:	f011 ff18 	bl	8013cdc <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	33a0      	adds	r3, #160	; 0xa0
 8001ed2:	f107 0210 	add.w	r2, r7, #16
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00a fffd 	bl	800ced8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fb46 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001ef6:	f011 fef1 	bl	8013cdc <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	33a0      	adds	r3, #160	; 0xa0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fb6a 	bl	80055d8 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	33a0      	adds	r3, #160	; 0xa0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f009 febc 	bl	800bc88 <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f16:	2200      	movs	r2, #0
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34





}
 8001f1a:	bf00      	nop
 8001f1c:	3760      	adds	r7, #96	; 0x60
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40014400 	.word	0x40014400
 8001f2c:	08015fa8 	.word	0x08015fa8

08001f30 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09c      	sub	sp, #112	; 0x70
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <_ZN11Initializer10initTIM_20Ev+0xd8>)
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f009 fdd9 	bl	800bb2c <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 faf8 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f90:	481e      	ldr	r0, [pc, #120]	; (800200c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001f92:	f011 fea3 	bl	8013cdc <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9a:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001f9c:	f107 0214 	add.w	r2, r7, #20
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00a f894 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fadf 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fc2:	4812      	ldr	r0, [pc, #72]	; (800200c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001fc4:	f011 fe8a 	bl	8013cdc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001fd4:	f107 0208 	add.w	r2, r7, #8
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00a fee4 	bl	800cdac <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fac3 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001ffc:	f011 fe6e 	bl	8013cdc <iprintf>

	  }



}
 8002000:	bf00      	nop
 8002002:	3770      	adds	r7, #112	; 0x70
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40015000 	.word	0x40015000
 800200c:	08015fa8 	.word	0x08015fa8

08002010 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3e      	ldr	r2, [pc, #248]	; (8002118 <_ZN11Initializer11initUSART_1Ev+0x108>)
 800201e:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002028:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f00b f805 	bl	800d086 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa77 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002092:	4822      	ldr	r0, [pc, #136]	; (800211c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002094:	f011 fe22 	bl	8013cdc <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f00c fbac 	bl	800e7fc <HAL_UARTEx_SetTxFifoThreshold>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fa63 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020ba:	4818      	ldr	r0, [pc, #96]	; (800211c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020bc:	f011 fe0e 	bl	8013cdc <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00c fbd6 	bl	800e878 <HAL_UARTEx_SetRxFifoThreshold>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fa4f 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020e2:	480e      	ldr	r0, [pc, #56]	; (800211c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020e4:	f011 fdfa 	bl	8013cdc <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00c fb4c 	bl	800e78a <HAL_UARTEx_DisableFifoMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa3c 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800210a:	f011 fde7 	bl	8013cdc <iprintf>

	  }



}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013800 	.word	0x40013800
 800211c:	08015fc0 	.word	0x08015fc0

08002120 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <_ZN11Initializer11initUSART_2Ev+0x114>)
 800212e:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a40      	ldr	r2, [pc, #256]	; (8002238 <_ZN11Initializer11initUSART_2Ev+0x118>)
 8002136:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002140:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002152:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	220c      	movs	r2, #12
 800215a:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f00a ff77 	bl	800d086 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f9e9 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021ae:	4823      	ldr	r0, [pc, #140]	; (800223c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021b0:	f011 fd94 	bl	8013cdc <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00c fb1e 	bl	800e7fc <HAL_UARTEx_SetTxFifoThreshold>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f9d5 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021d6:	4819      	ldr	r0, [pc, #100]	; (800223c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021d8:	f011 fd80 	bl	8013cdc <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00c fb48 	bl	800e878 <HAL_UARTEx_SetRxFifoThreshold>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f9c1 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021fe:	480f      	ldr	r0, [pc, #60]	; (800223c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002200:	f011 fd6c 	bl	8013cdc <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	f00c fabe 	bl	800e78a <HAL_UARTEx_DisableFifoMode>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f9ae 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002226:	f011 fd59 	bl	8013cdc <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004400 	.word	0x40004400
 8002238:	000186a0 	.word	0x000186a0
 800223c:	08015fd4 	.word	0x08015fd4

08002240 <_ZN11Initializer7initDMAEv>:
}




void Initializer::initDMA(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6493      	str	r3, [r2, #72]	; 0x48
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6493      	str	r3, [r2, #72]	; 0x48
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	6493      	str	r3, [r2, #72]	; 0x48
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <_ZN11Initializer7initDMAEv+0xa8>)
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	200b      	movs	r0, #11
 8002296:	f005 fde4 	bl	8007e62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800229a:	200b      	movs	r0, #11
 800229c:	f005 fdfb 	bl	8007e96 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	200c      	movs	r0, #12
 80022a6:	f005 fddc 	bl	8007e62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022aa:	200c      	movs	r0, #12
 80022ac:	f005 fdf3 	bl	8007e96 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	200d      	movs	r0, #13
 80022b6:	f005 fdd4 	bl	8007e62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80022ba:	200d      	movs	r0, #13
 80022bc:	f005 fdeb 	bl	8007e96 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	200e      	movs	r0, #14
 80022c6:	f005 fdcc 	bl	8007e62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80022ca:	200e      	movs	r0, #14
 80022cc:	f005 fde3 	bl	8007e96 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	2038      	movs	r0, #56	; 0x38
 80022d6:	f005 fdc4 	bl	8007e62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80022da:	2038      	movs	r0, #56	; 0x38
 80022dc:	f005 fddb 	bl	8007e96 <HAL_NVIC_EnableIRQ>

}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000

080022ec <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002310:	4b45      	ldr	r3, [pc, #276]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231c:	4b42      	ldr	r3, [pc, #264]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	4a41      	ldr	r2, [pc, #260]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002322:	f043 0320 	orr.w	r3, r3, #32
 8002326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800233a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	4a35      	ldr	r2, [pc, #212]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002382:	482a      	ldr	r0, [pc, #168]	; (800242c <_ZN11Initializer8initGPIOEv+0x140>)
 8002384:	f006 fc20 	bl	8008bc8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	2102      	movs	r1, #2
 800238c:	4828      	ldr	r0, [pc, #160]	; (8002430 <_ZN11Initializer8initGPIOEv+0x144>)
 800238e:	f006 fc1b 	bl	8008bc8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 8002392:	2200      	movs	r2, #0
 8002394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002398:	4826      	ldr	r0, [pc, #152]	; (8002434 <_ZN11Initializer8initGPIOEv+0x148>)
 800239a:	f006 fc15 	bl	8008bc8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2110      	movs	r1, #16
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a6:	f006 fc0f 	bl	8008bc8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 80023aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ae:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	481a      	ldr	r0, [pc, #104]	; (800242c <_ZN11Initializer8initGPIOEv+0x140>)
 80023c4:	f006 fa7e 	bl	80088c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <_ZN11Initializer8initGPIOEv+0x144>)
 80023e0:	f006 fa70 	bl	80088c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 80023e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <_ZN11Initializer8initGPIOEv+0x148>)
 80023fe:	f006 fa61 	bl	80088c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002402:	2310      	movs	r3, #16
 8002404:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241c:	f006 fa52 	bl	80088c4 <HAL_GPIO_Init>

}
 8002420:	bf00      	nop
 8002422:	3730      	adds	r7, #48	; 0x30
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	48000800 	.word	0x48000800
 8002430:	48001400 	.word	0x48001400
 8002434:	48001800 	.word	0x48001800

08002438 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002438:	b580      	push	{r7, lr}
 800243a:	b096      	sub	sp, #88	; 0x58
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	2238      	movs	r2, #56	; 0x38
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f010 ffd5 	bl	80133f8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800245e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002462:	f008 fb3d 	bl	800aae0 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002466:	2322      	movs	r3, #34	; 0x22
 8002468:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800246a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002470:	2340      	movs	r3, #64	; 0x40
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002474:	2301      	movs	r3, #1
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002478:	2302      	movs	r3, #2
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800247c:	2302      	movs	r3, #2
 800247e:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002480:	2301      	movs	r3, #1
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002484:	2310      	movs	r3, #16
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002488:	2302      	movs	r3, #2
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800248c:	2302      	movs	r3, #2
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002490:	2302      	movs	r3, #2
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002494:	f107 0320 	add.w	r3, r7, #32
 8002498:	4618      	mov	r0, r3
 800249a:	f008 fbc5 	bl	800ac28 <HAL_RCC_OscConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f866 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80024b4:	4812      	ldr	r0, [pc, #72]	; (8002500 <_ZN11Initializer9initClockEv+0xc8>)
 80024b6:	f011 fc11 	bl	8013cdc <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ba:	230f      	movs	r3, #15
 80024bc:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024be:	2303      	movs	r3, #3
 80024c0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	2103      	movs	r1, #3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f008 febf 	bl	800b258 <HAL_RCC_ClockConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f848 	bl	8002580 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <_ZN11Initializer9initClockEv+0xc8>)
 80024f2:	f011 fbf3 	bl	8013cdc <iprintf>

	  }


}
 80024f6:	bf00      	nop
 80024f8:	3758      	adds	r7, #88	; 0x58
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	08015ffc 	.word	0x08015ffc

08002504 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

	return &htim16;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	33a0      	adds	r3, #160	; 0xa0

}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	return &htim8;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	33ec      	adds	r3, #236	; 0xec
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	return &htim4;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3354      	adds	r3, #84	; 0x54
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

	return &htim3;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 739c 	add.w	r3, r3, #312	; 0x138

}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]

	return &htim1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3308      	adds	r3, #8

}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <_ZN11Initializer13Error_HandlerEv>:


void Initializer::Error_Handler(void){
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b1d      	cmp	r3, #29
 8002590:	d80e      	bhi.n	80025b0 <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002596:	4808      	ldr	r0, [pc, #32]	; (80025b8 <_ZN11Initializer13Error_HandlerEv+0x38>)
 8002598:	f006 fb2e 	bl	8008bf8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800259c:	2064      	movs	r0, #100	; 0x64
 800259e:	f003 fc2b 	bl	8005df8 <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 80025a2:	4806      	ldr	r0, [pc, #24]	; (80025bc <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80025a4:	f011 fc20 	bl	8013de8 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e7ed      	b.n	800258c <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	48000800 	.word	0x48000800
 80025bc:	0801601c 	.word	0x0801601c

080025c0 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	4053      	eors	r3, r2
 80025d6:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4053      	eors	r3, r2
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4053      	eors	r3, r2
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	b21b      	sxth	r3, r3
 8002602:	4053      	eors	r3, r2
 8002604:	b21a      	sxth	r2, r3
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	b2db      	uxtb	r3, r3
 800260c:	b21b      	sxth	r3, r3
 800260e:	4053      	eors	r3, r2
 8002610:	b21b      	sxth	r3, r3
 8002612:	b29a      	uxth	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	801a      	strh	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002632:	801a      	strh	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800264c:	f107 030e 	add.w	r3, r7, #14
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ffe7 	bl	8002624 <crc_init>
	while (length--) {
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	807a      	strh	r2, [r7, #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f107 020e 	add.w	r2, r7, #14
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ffa1 	bl	80025c0 <crc_accumulate>
	while (length--) {
 800267e:	e7ea      	b.n	8002656 <crc_calculate+0x16>
        }
        return crcTmp;
 8002680:	89fb      	ldrh	r3, [r7, #14]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	617b      	str	r3, [r7, #20]
	while (length--) {
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	80fa      	strh	r2, [r7, #6]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	617a      	str	r2, [r7, #20]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff80 	bl	80025c0 <crc_accumulate>
	while (length--) {
 80026c0:	e7ec      	b.n	800269c <crc_accumulate_buffer+0x12>
        }
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <mavlink_sha256_init+0x50>)
 80026e4:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <mavlink_sha256_init+0x54>)
 80026ea:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <mavlink_sha256_init+0x58>)
 80026f0:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <mavlink_sha256_init+0x5c>)
 80026f6:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0c      	ldr	r2, [pc, #48]	; (800272c <mavlink_sha256_init+0x60>)
 80026fc:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <mavlink_sha256_init+0x64>)
 8002702:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <mavlink_sha256_init+0x68>)
 8002708:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <mavlink_sha256_init+0x6c>)
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	6a09e667 	.word	0x6a09e667
 8002720:	bb67ae85 	.word	0xbb67ae85
 8002724:	3c6ef372 	.word	0x3c6ef372
 8002728:	a54ff53a 	.word	0xa54ff53a
 800272c:	510e527f 	.word	0x510e527f
 8002730:	9b05688c 	.word	0x9b05688c
 8002734:	1f83d9ab 	.word	0x1f83d9ab
 8002738:	5be0cd19 	.word	0x5be0cd19

0800273c <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 800273c:	b480      	push	{r7}
 800273e:	b0cf      	sub	sp, #316	; 0x13c
 8002740:	af00      	add	r7, sp, #0
 8002742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002746:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800274a:	6018      	str	r0, [r3, #0]
 800274c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002750:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002754:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8002756:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800275a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8002766:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800276a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8002776:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800277a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8002786:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800278a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8002796:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800279a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80027a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80027b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80027c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	dc17      	bgt.n	8002814 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 80027e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80027ee:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002800:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280c:	3301      	adds	r3, #1
 800280e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002812:	e7e3      	b.n	80027dc <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002814:	2310      	movs	r3, #16
 8002816:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800281a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800281e:	2b3f      	cmp	r3, #63	; 0x3f
 8002820:	dc6a      	bgt.n	80028f8 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002826:	1e9a      	subs	r2, r3, #2
 8002828:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800282c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283c:	1e99      	subs	r1, r3, #2
 800283e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002846:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800284a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800284e:	405a      	eors	r2, r3
 8002850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002854:	1e99      	subs	r1, r3, #2
 8002856:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800285a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800285e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	405a      	eors	r2, r3
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800286a:	1fd9      	subs	r1, r3, #7
 800286c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002878:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800287a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287e:	f1a3 010f 	sub.w	r1, r3, #15
 8002882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800288a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800288e:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002896:	f1a3 000f 	sub.w	r0, r3, #15
 800289a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800289e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80028a6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80028aa:	4059      	eors	r1, r3
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b0:	f1a3 000f 	sub.w	r0, r3, #15
 80028b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80028c4:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ca:	f1a3 0110 	sub.w	r1, r3, #16
 80028ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028da:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80028dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80028ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f0:	3301      	adds	r3, #1
 80028f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80028f6:	e790      	b.n	800281a <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80028fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002902:	2b3f      	cmp	r3, #63	; 0x3f
 8002904:	dc79      	bgt.n	80029fa <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002906:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800290a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800290e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002912:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002916:	405a      	eors	r2, r3
 8002918:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800291c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002920:	405a      	eors	r2, r3
 8002922:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002926:	441a      	add	r2, r3
 8002928:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800292c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002930:	4019      	ands	r1, r3
 8002932:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002936:	43d8      	mvns	r0, r3
 8002938:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800293c:	4003      	ands	r3, r0
 800293e:	404b      	eors	r3, r1
 8002940:	441a      	add	r2, r3
 8002942:	496d      	ldr	r1, [pc, #436]	; (8002af8 <mavlink_sha256_calc+0x3bc>)
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800294c:	441a      	add	r2, r3
 800294e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002956:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800295a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800295e:	4413      	add	r3, r2
 8002960:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002968:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800296c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002970:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002974:	405a      	eors	r2, r3
 8002976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800297a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800297e:	405a      	eors	r2, r3
 8002980:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002988:	4059      	eors	r1, r3
 800298a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800298e:	4019      	ands	r1, r3
 8002990:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002998:	4003      	ands	r3, r0
 800299a:	404b      	eors	r3, r1
 800299c:	4413      	add	r3, r2
 800299e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80029a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80029aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80029b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80029ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80029be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029c2:	4413      	add	r3, r2
 80029c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80029c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80029d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80029d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80029e0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80029e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e8:	4413      	add	r3, r2
 80029ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80029ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f2:	3301      	adds	r3, #1
 80029f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029f8:	e781      	b.n	80028fe <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 80029fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a0a:	441a      	add	r2, r3
 8002a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a28:	441a      	add	r2, r3
 8002a2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002a36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a3a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a46:	441a      	add	r2, r3
 8002a48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002a54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a64:	441a      	add	r2, r3
 8002a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a82:	441a      	add	r2, r3
 8002a84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002a90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002aa0:	441a      	add	r2, r3
 8002aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aa6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002aae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ab2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002abe:	441a      	add	r2, r3
 8002ac0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ac4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002acc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ad0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002adc:	441a      	add	r2, r3
 8002ade:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ae2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002aea:	bf00      	nop
 8002aec:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	0801668c 	.word	0x0801668c

08002afc <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b09c      	sub	sp, #112	; 0x70
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d904      	bls.n	8002b34 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d058      	beq.n	8002bf6 <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b46:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b4a:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d201      	bcs.n	8002b58 <mavlink_sha256_update+0x5c>
            l = len;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b60:	4413      	add	r3, r2
 8002b62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f010 fc38 	bl	80133dc <memcpy>
	offset += l;
 8002b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b70:	4413      	add	r3, r2
 8002b72:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b78:	4413      	add	r3, r2
 8002b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d1d9      	bne.n	8002b3e <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3328      	adds	r3, #40	; 0x28
 8002b8e:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002b90:	2300      	movs	r3, #0
 8002b92:	663b      	str	r3, [r7, #96]	; 0x60
 8002b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	dc24      	bgt.n	8002be4 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ba0:	4413      	add	r3, r2
 8002ba2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002ba4:	f107 0210 	add.w	r2, r7, #16
 8002ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb8:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	3302      	adds	r3, #2
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	3303      	adds	r3, #3
 8002bd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bde:	3301      	adds	r3, #1
 8002be0:	663b      	str	r3, [r7, #96]	; 0x60
 8002be2:	e7d7      	b.n	8002b94 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fda6 	bl	800273c <mavlink_sha256_calc>
	    offset = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002bf4:	e7a3      	b.n	8002b3e <mavlink_sha256_update+0x42>
	}
    }
}
 8002bf6:	bf00      	nop
 8002bf8:	3770      	adds	r7, #112	; 0x70
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b098      	sub	sp, #96	; 0x60
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c16:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1e:	3301      	adds	r3, #1
 8002c20:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3308      	adds	r3, #8
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	3301      	adds	r3, #1
 8002c32:	2247      	movs	r2, #71	; 0x47
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f010 fbde 	bl	80133f8 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c42:	3307      	adds	r3, #7
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	443b      	add	r3, r7
 8002c4a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0a1a      	lsrs	r2, r3, #8
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	3306      	adds	r3, #6
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	3360      	adds	r3, #96	; 0x60
 8002c5c:	443b      	add	r3, r7
 8002c5e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0c1a      	lsrs	r2, r3, #16
 8002c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6a:	3305      	adds	r3, #5
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	443b      	add	r3, r7
 8002c72:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e1a      	lsrs	r2, r3, #24
 8002c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7e:	3304      	adds	r3, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	3360      	adds	r3, #96	; 0x60
 8002c84:	443b      	add	r3, r7
 8002c86:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c90:	3303      	adds	r3, #3
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	3360      	adds	r3, #96	; 0x60
 8002c96:	443b      	add	r3, r7
 8002c98:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0a1a      	lsrs	r2, r3, #8
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	443b      	add	r3, r7
 8002cac:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0c1a      	lsrs	r2, r3, #16
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	443b      	add	r3, r7
 8002cc0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0e1b      	lsrs	r3, r3, #24
 8002cca:	b2d9      	uxtb	r1, r3
 8002ccc:	f107 020c 	add.w	r2, r7, #12
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd2:	4413      	add	r3, r2
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cda:	f103 0208 	add.w	r2, r3, #8
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff09 	bl	8002afc <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	78da      	ldrb	r2, [r3, #3]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cf8:	7892      	ldrb	r2, [r2, #2]
 8002cfa:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d02:	7852      	ldrb	r2, [r2, #1]
 8002d04:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3303      	adds	r3, #3
 8002d0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3304      	adds	r3, #4
 8002d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d16:	79d2      	ldrb	r2, [r2, #7]
 8002d18:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	3305      	adds	r3, #5
 8002d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d20:	7992      	ldrb	r2, [r2, #6]
 8002d22:	701a      	strb	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3760      	adds	r7, #96	; 0x60
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <mavlink_get_channel_status+0x24>)
 8002d42:	4413      	add	r3, r2
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	20000370 	.word	0x20000370

08002d54 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b0a0      	sub	sp, #128	; 0x80
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <mavlink_sign_packet+0x20>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <mavlink_sign_packet+0x24>
	    return 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e04f      	b.n	8002e18 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	785a      	ldrb	r2, [r3, #1]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f107 0110 	add.w	r1, r7, #16
 8002d92:	2206      	movs	r2, #6
 8002d94:	4618      	mov	r0, r3
 8002d96:	f010 fb21 	bl	80133dc <memcpy>
	signing->timestamp++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002da0:	1c54      	adds	r4, r2, #1
 8002da2:	f143 0500 	adc.w	r5, r3, #0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002dac:	f107 0318 	add.w	r3, r7, #24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc8b 	bl	80026cc <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f103 0110 	add.w	r1, r3, #16
 8002dbc:	f107 0318 	add.w	r3, r7, #24
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fe9a 	bl	8002afc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	f107 0318 	add.w	r3, r7, #24
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fe93 	bl	8002afc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8002dd6:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fe8a 	bl	8002afc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	2202      	movs	r2, #2
 8002dee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe82 	bl	8002afc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fe7b 	bl	8002afc <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1dda      	adds	r2, r3, #7
 8002e0a:	f107 0318 	add.w	r3, r7, #24
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fef4 	bl	8002bfe <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8002e16:	230d      	movs	r3, #13
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3780      	adds	r7, #128	; 0x80
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bdb0      	pop	{r4, r5, r7, pc}

08002e20 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d90a      	bls.n	8002e48 <_mav_trim_payload+0x28>
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <_mav_trim_payload+0x28>
		length--;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002e46:	e7f1      	b.n	8002e2c <_mav_trim_payload+0xc>
	}
	return length;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8002e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e58:	b08f      	sub	sp, #60	; 0x3c
 8002e5a:	af04      	add	r7, sp, #16
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	72fb      	strb	r3, [r7, #11]
 8002e64:	4613      	mov	r3, r2
 8002e66:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7b1b      	ldrb	r3, [r3, #12]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <mavlink_finalize_message_buffer+0x4e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <mavlink_finalize_message_buffer+0x4e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <mavlink_finalize_message_buffer+0x4e>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <mavlink_finalize_message_buffer+0x50>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8002eaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <mavlink_finalize_message_buffer+0x60>
 8002eb2:	230d      	movs	r3, #13
 8002eb4:	e000      	b.n	8002eb8 <mavlink_finalize_message_buffer+0x62>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8002ebc:	230a      	movs	r3, #10
 8002ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8002ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22fe      	movs	r2, #254	; 0xfe
 8002ece:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8002ed0:	2306      	movs	r3, #6
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ed6:	e002      	b.n	8002ede <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	22fd      	movs	r2, #253	; 0xfd
 8002edc:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <mavlink_finalize_message_buffer+0x96>
 8002ee6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002eea:	e009      	b.n	8002f00 <mavlink_finalize_message_buffer+0xaa>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff92 	bl	8002e20 <_mav_trim_payload>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	7afa      	ldrb	r2, [r7, #11]
 8002f08:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	7aba      	ldrb	r2, [r7, #10]
 8002f0e:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8002f16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	791b      	ldrb	r3, [r3, #4]
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	799a      	ldrb	r2, [r3, #6]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	799b      	ldrb	r3, [r3, #6]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	789b      	ldrb	r3, [r3, #2]
 8002f4a:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	78db      	ldrb	r3, [r3, #3]
 8002f50:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8002f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d013      	beq.n	8002f82 <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	799b      	ldrb	r3, [r3, #6]
 8002f5e:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	79db      	ldrb	r3, [r3, #7]
 8002f64:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	7a5a      	ldrb	r2, [r3, #9]
 8002f70:	7a99      	ldrb	r1, [r3, #10]
 8002f72:	0209      	lsls	r1, r1, #8
 8002f74:	430a      	orrs	r2, r1
 8002f76:	7adb      	ldrb	r3, [r3, #11]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	777b      	strb	r3, [r7, #29]
 8002f80:	e030      	b.n	8002fe4 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	795b      	ldrb	r3, [r3, #5]
 8002f8c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	799b      	ldrb	r3, [r3, #6]
 8002f92:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	79db      	ldrb	r3, [r3, #7]
 8002f98:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	7a1b      	ldrb	r3, [r3, #8]
 8002f9e:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	7a5a      	ldrb	r2, [r3, #9]
 8002fa4:	7a99      	ldrb	r1, [r3, #10]
 8002fa6:	0209      	lsls	r1, r1, #8
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	7adb      	ldrb	r3, [r3, #11]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	7a5a      	ldrb	r2, [r3, #9]
 8002fb8:	7a99      	ldrb	r1, [r3, #10]
 8002fba:	0209      	lsls	r1, r1, #8
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	7adb      	ldrb	r3, [r3, #11]
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	121b      	asrs	r3, r3, #8
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	7a5a      	ldrb	r2, [r3, #9]
 8002fd0:	7a99      	ldrb	r1, [r3, #10]
 8002fd2:	0209      	lsls	r1, r1, #8
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	7adb      	ldrb	r3, [r3, #11]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	141b      	asrs	r3, r3, #16
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8002fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f107 0318 	add.w	r3, r7, #24
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb22 	bl	8002640 <crc_calculate>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f103 010c 	add.w	r1, r3, #12
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	b29a      	uxth	r2, r3
 800300c:	f107 0316 	add.w	r3, r7, #22
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fb3a 	bl	800268a <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8003016:	f107 0216 	add.w	r2, r7, #22
 800301a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff facd 	bl	80025c0 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003026:	8af9      	ldrh	r1, [r7, #22]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	330c      	adds	r3, #12
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	78d2      	ldrb	r2, [r2, #3]
 8003030:	4413      	add	r3, r2
 8003032:	b2ca      	uxtb	r2, r1
 8003034:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8003036:	8afb      	ldrh	r3, [r7, #22]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	b299      	uxth	r1, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f103 020c 	add.w	r2, r3, #12
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	3301      	adds	r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 800304e:	8afa      	ldrh	r2, [r7, #22]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8003054:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01a      	beq.n	8003092 <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	310c      	adds	r1, #12
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8003076:	4401      	add	r1, r0
 8003078:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800307c:	f107 0018 	add.w	r0, r7, #24
 8003080:	9102      	str	r1, [sp, #8]
 8003082:	9201      	str	r2, [sp, #4]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4633      	mov	r3, r6
 8003088:	4602      	mov	r2, r0
 800308a:	4629      	mov	r1, r5
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff fe61 	bl	8002d54 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	78db      	ldrb	r3, [r3, #3]
 8003096:	b29a      	uxth	r2, r3
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800309c:	b29b      	uxth	r3, r3
 800309e:	4413      	add	r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3302      	adds	r3, #2
 80030ae:	b29b      	uxth	r3, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	372c      	adds	r7, #44	; 0x2c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b8 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af04      	add	r7, sp, #16
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	70fb      	strb	r3, [r7, #3]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70bb      	strb	r3, [r7, #2]
 80030ce:	4613      	mov	r3, r2
 80030d0:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80030d2:	787b      	ldrb	r3, [r7, #1]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe29 	bl	8002d2c <mavlink_get_channel_status>
 80030da:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80030dc:	78ba      	ldrb	r2, [r7, #2]
 80030de:	78f9      	ldrb	r1, [r7, #3]
 80030e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	7f3b      	ldrb	r3, [r7, #28]
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	7e3b      	ldrb	r3, [r7, #24]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff feb0 	bl	8002e56 <mavlink_finalize_message_buffer>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af04      	add	r7, sp, #16
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	70fb      	strb	r3, [r7, #3]
 8003112:	460b      	mov	r3, r1
 8003114:	70bb      	strb	r3, [r7, #2]
 8003116:	4613      	mov	r3, r2
 8003118:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 800311a:	78ba      	ldrb	r2, [r7, #2]
 800311c:	78f9      	ldrb	r1, [r7, #3]
 800311e:	7d3b      	ldrb	r3, [r7, #20]
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	7c3b      	ldrb	r3, [r7, #16]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	787b      	ldrb	r3, [r7, #1]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ffc3 	bl	80030b8 <mavlink_finalize_message_chan>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	78db      	ldrb	r3, [r3, #3]
 800314a:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	789b      	ldrb	r3, [r3, #2]
 8003150:	2bfe      	cmp	r3, #254	; 0xfe
 8003152:	d13a      	bne.n	80031ca <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8003158:	2305      	movs	r3, #5
 800315a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	789a      	ldrb	r2, [r3, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3302      	adds	r3, #2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	7992      	ldrb	r2, [r2, #6]
 8003174:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3303      	adds	r3, #3
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	79d2      	ldrb	r2, [r2, #7]
 800317e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	7a12      	ldrb	r2, [r2, #8]
 8003188:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	7a5a      	ldrb	r2, [r3, #9]
 800318e:	7a99      	ldrb	r1, [r3, #10]
 8003190:	0209      	lsls	r1, r1, #8
 8003192:	430a      	orrs	r2, r1
 8003194:	7adb      	ldrb	r3, [r3, #11]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	4313      	orrs	r3, r2
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3305      	adds	r3, #5
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1d98      	adds	r0, r3, #6
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f103 010c 	add.w	r1, r3, #12
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	78db      	ldrb	r3, [r3, #3]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f010 f912 	bl	80133dc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80031b8:	7dbb      	ldrb	r3, [r7, #22]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	78d2      	ldrb	r2, [r2, #3]
 80031be:	4413      	add	r3, r2
 80031c0:	3301      	adds	r3, #1
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e06c      	b.n	80032a4 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe24 	bl	8002e20 <_mav_trim_payload>
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80031dc:	2309      	movs	r3, #9
 80031de:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	789a      	ldrb	r2, [r3, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3302      	adds	r3, #2
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	7912      	ldrb	r2, [r2, #4]
 80031f8:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3303      	adds	r3, #3
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	7952      	ldrb	r2, [r2, #5]
 8003202:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	7992      	ldrb	r2, [r2, #6]
 800320c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3305      	adds	r3, #5
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	79d2      	ldrb	r2, [r2, #7]
 8003216:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3306      	adds	r3, #6
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	7a12      	ldrb	r2, [r2, #8]
 8003220:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	7a5a      	ldrb	r2, [r3, #9]
 8003226:	7a99      	ldrb	r1, [r3, #10]
 8003228:	0209      	lsls	r1, r1, #8
 800322a:	430a      	orrs	r2, r1
 800322c:	7adb      	ldrb	r3, [r3, #11]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	4313      	orrs	r3, r2
 8003232:	461a      	mov	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3307      	adds	r3, #7
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	7a5a      	ldrb	r2, [r3, #9]
 8003240:	7a99      	ldrb	r1, [r3, #10]
 8003242:	0209      	lsls	r1, r1, #8
 8003244:	430a      	orrs	r2, r1
 8003246:	7adb      	ldrb	r3, [r3, #11]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	4313      	orrs	r3, r2
 800324c:	121a      	asrs	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3308      	adds	r3, #8
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7a5a      	ldrb	r2, [r3, #9]
 800325a:	7a99      	ldrb	r1, [r3, #10]
 800325c:	0209      	lsls	r1, r1, #8
 800325e:	430a      	orrs	r2, r1
 8003260:	7adb      	ldrb	r3, [r3, #11]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	4313      	orrs	r3, r2
 8003266:	141a      	asrs	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3309      	adds	r3, #9
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f103 000a 	add.w	r0, r3, #10
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	4619      	mov	r1, r3
 800327e:	f010 f8ad 	bl	80133dc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003282:	7dba      	ldrb	r2, [r7, #22]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	4413      	add	r3, r2
 8003288:	3301      	adds	r3, #1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <mavlink_msg_to_send_buffer+0x164>
 800329c:	230d      	movs	r3, #13
 800329e:	e000      	b.n	80032a2 <mavlink_msg_to_send_buffer+0x166>
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3301      	adds	r3, #1
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1c98      	adds	r0, r3, #2
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80032d2:	7dfa      	ldrb	r2, [r7, #23]
 80032d4:	4619      	mov	r1, r3
 80032d6:	f010 f881 	bl	80133dc <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80032da:	7dbb      	ldrb	r3, [r7, #22]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3303      	adds	r3, #3
 80032f0:	b29b      	uxth	r3, r3
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af02      	add	r7, sp, #8
 8003300:	603a      	str	r2, [r7, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
 8003308:	460b      	mov	r3, r1
 800330a:	71bb      	strb	r3, [r7, #6]
 800330c:	4613      	mov	r3, r2
 800330e:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8003314:	797b      	ldrb	r3, [r7, #5]
 8003316:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8003318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331c:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 800331e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003322:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8003324:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003328:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 800332a:	2303      	movs	r3, #3
 800332c:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	f107 010c 	add.w	r1, r7, #12
 8003336:	2209      	movs	r2, #9
 8003338:	4618      	mov	r0, r3
 800333a:	f010 f84f 	bl	80133dc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	725a      	strb	r2, [r3, #9]
 8003344:	2200      	movs	r2, #0
 8003346:	729a      	strb	r2, [r3, #10]
 8003348:	2200      	movs	r2, #0
 800334a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 800334c:	79ba      	ldrb	r2, [r7, #6]
 800334e:	79f9      	ldrb	r1, [r7, #7]
 8003350:	2332      	movs	r3, #50	; 0x32
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	2309      	movs	r3, #9
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2309      	movs	r3, #9
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f7ff fed0 	bl	8003100 <mavlink_finalize_message>
 8003360:	4603      	mov	r3, r0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 800336a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336c:	b089      	sub	sp, #36	; 0x24
 800336e:	af04      	add	r7, sp, #16
 8003370:	60ba      	str	r2, [r7, #8]
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	460b      	mov	r3, r1
 800337a:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	791e      	ldrb	r6, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	795b      	ldrb	r3, [r3, #5]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	7992      	ldrb	r2, [r2, #6]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	6809      	ldr	r1, [r1, #0]
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	79c0      	ldrb	r0, [r0, #7]
 8003390:	7bbd      	ldrb	r5, [r7, #14]
 8003392:	7bfc      	ldrb	r4, [r7, #15]
 8003394:	9003      	str	r0, [sp, #12]
 8003396:	9102      	str	r1, [sp, #8]
 8003398:	9201      	str	r2, [sp, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4633      	mov	r3, r6
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4629      	mov	r1, r5
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff ffa9 	bl	80032fa <mavlink_msg_heartbeat_pack>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b2 <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t payload_len = 0;
	        uint8_t sequence_num = 0;
	        uint8_t sys_id = 0;
	        uint8_t comp_id = 0;
	        uint8_t msg_id = 0;
	    } mavlink_header_t;
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	705a      	strb	r2, [r3, #1]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	709a      	strb	r2, [r3, #2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	70da      	strb	r2, [r3, #3]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	711a      	strb	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	715a      	strb	r2, [r3, #5]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <_ZN14MavlinkControlC1EP20__UART_HandleTypeDef>:
#include "MavlinkControl.h"

MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart) : _huart_mavlink(huart) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	731a      	strb	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	81da      	strh	r2, [r3, #14]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDef+0xb4>)
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	220a      	movs	r2, #10
 800342a:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8003444:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f00f ffd4 	bl	80133f8 <memset>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003456:	f44f 728c 	mov.w	r2, #280	; 0x118
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f00f ffcb 	bl	80133f8 <memset>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 8003468:	f44f 728c 	mov.w	r2, #280	; 0x118
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f00f ffc2 	bl	80133f8 <memset>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff99 	bl	80033b2 <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, 279);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800348a:	f240 1217 	movw	r2, #279	; 0x117
 800348e:	4619      	mov	r1, r3
 8003490:	f00b fa30 	bl	800e8f4 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	08016040 	.word	0x08016040

080034a4 <_ZN14MavlinkControl6updateEv>:




void MavlinkControl::update(void){
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	//blocks the SBUS protocol




	if(HAL_GetTick() % 500 == 0){
 80034ac:	f002 fc98 	bl	8005de0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <_ZN14MavlinkControl6updateEv+0x3c>)
 80034b4:	fba3 1302 	umull	r1, r3, r3, r2
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <_ZN14MavlinkControl6updateEv+0x34>

		this->heartbeat();
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f83e 	bl	8003554 <_ZN14MavlinkControl9heartbeatEv>

	}



}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <_ZN14MavlinkControl21processReceivedBufferEv>:


void MavlinkControl::processReceivedBuffer(void){
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

	//Mavlink headers are 6 bytes long and contain the fields defined in the header struct (see .h file).



	if(_receiveBuffer_1[0] == 0xFD || _receiveBuffer_1[0] == 0xFE ){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80034f2:	2bfd      	cmp	r3, #253	; 0xfd
 80034f4:	d004      	beq.n	8003500 <_ZN14MavlinkControl21processReceivedBufferEv+0x1c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80034fc:	2bfe      	cmp	r3, #254	; 0xfe
 80034fe:	d123      	bne.n	8003548 <_ZN14MavlinkControl21processReceivedBufferEv+0x64>
		//printf("testing something %d \r\n", *tempBuffer);



		//printf("PROCESSING BUFFERRRR \r\n");
		_mavlink_received_header.start_of_msg = _receiveBuffer_1[0];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
		_mavlink_received_header.payload_len = _receiveBuffer_1[1];
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 22ad 	ldrb.w	r2, [r3, #685]	; 0x2ad
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f883 25f5 	strb.w	r2, [r3, #1525]	; 0x5f5
		_mavlink_received_header.sequence_num = _receiveBuffer_1[2];
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
		_mavlink_received_header.sys_id = _receiveBuffer_1[3];
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 22af 	ldrb.w	r2, [r3, #687]	; 0x2af
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
		_mavlink_received_header.comp_id = _receiveBuffer_1[4];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 22b0 	ldrb.w	r2, [r3, #688]	; 0x2b0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
		_mavlink_received_header.msg_id = _receiveBuffer_1[5];
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 22b1 	ldrb.w	r2, [r3, #689]	; 0x2b1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9

	}



}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZN14MavlinkControl9heartbeatEv>:

}



void MavlinkControl::heartbeat(void){
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af04      	add	r7, sp, #16
 800355a:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 8003574:	f7ff fef9 	bl	800336a <mavlink_msg_heartbeat_encode>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f203 1233 	addw	r2, r3, #307	; 0x133
 8003592:	2303      	movs	r3, #3
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	230a      	movs	r3, #10
 80035a4:	f7ff fea9 	bl	80032fa <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedForUart, &_mavlinkSend);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f203 42dc 	addw	r2, r3, #1244	; 0x4dc
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 1333 	addw	r3, r3, #307	; 0x133
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7ff fdc0 	bl	800313c <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedForUart, _bufferLength, 100) != HAL_OK){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f203 41dc 	addw	r1, r3, #1244	; 0x4dc
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	89da      	ldrh	r2, [r3, #14]
 80035ca:	2364      	movs	r3, #100	; 0x64
 80035cc:	f009 fdab 	bl	800d126 <HAL_UART_Transmit>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 80035e0:	4803      	ldr	r0, [pc, #12]	; (80035f0 <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 80035e2:	f010 fc01 	bl	8013de8 <puts>
	}
	//sendPackage(_bufferPackedForUart, _bufferLength);


}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	08016044 	.word	0x08016044

080035f4 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	615a      	str	r2, [r3, #20]
 8003610:	761a      	strb	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	331e      	adds	r3, #30
 8003616:	2220      	movs	r2, #32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f00f feec 	bl	80133f8 <memset>

	this->_huart_sbus = huart_sbus;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]





}
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	2219      	movs	r2, #25
 8003642:	4619      	mov	r1, r3
 8003644:	f00b f956 	bl	800e8f4 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f804 	bl	8003656 <_ZN4SBUS8readSBUSEv>




}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	795b      	ldrb	r3, [r3, #5]
 8003662:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	799b      	ldrb	r3, [r3, #6]
 8003668:	b29b      	uxth	r3, r3
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 800366e:	89fa      	ldrh	r2, [r7, #14]
 8003670:	89bb      	ldrh	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	799b      	ldrb	r3, [r3, #6]
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	79db      	ldrb	r3, [r3, #7]
 800368e:	b29b      	uxth	r3, r3
 8003690:	015b      	lsls	r3, r3, #5
 8003692:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8003694:	89fa      	ldrh	r2, [r7, #14]
 8003696:	89bb      	ldrh	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	79db      	ldrb	r3, [r3, #7]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7a1b      	ldrb	r3, [r3, #8]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7a5b      	ldrb	r3, [r3, #9]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	029b      	lsls	r3, r3, #10
 80036c2:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 80036c4:	89fa      	ldrh	r2, [r7, #14]
 80036c6:	89bb      	ldrh	r3, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7a5b      	ldrb	r3, [r3, #9]
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7a9b      	ldrb	r3, [r3, #10]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	01db      	lsls	r3, r3, #7
 80036ee:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 80036f0:	89fa      	ldrh	r2, [r7, #14]
 80036f2:	89bb      	ldrh	r3, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7a9b      	ldrb	r3, [r3, #10]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	b2db      	uxtb	r3, r3
 800370a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7adb      	ldrb	r3, [r3, #11]
 8003710:	b29b      	uxth	r3, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8003716:	89fa      	ldrh	r2, [r7, #14]
 8003718:	89bb      	ldrh	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7adb      	ldrb	r3, [r3, #11]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	b2db      	uxtb	r3, r3
 8003730:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7b1b      	ldrb	r3, [r3, #12]
 8003736:	b29b      	uxth	r3, r3
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7b5b      	ldrb	r3, [r3, #13]
 8003740:	b29b      	uxth	r3, r3
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8003746:	89fa      	ldrh	r2, [r7, #14]
 8003748:	89bb      	ldrh	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	b29a      	uxth	r2, r3
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	4313      	orrs	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b5b      	ldrb	r3, [r3, #13]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	b2db      	uxtb	r3, r3
 8003766:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7b9b      	ldrb	r3, [r3, #14]
 800376c:	b29b      	uxth	r3, r3
 800376e:	019b      	lsls	r3, r3, #6
 8003770:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003772:	89fa      	ldrh	r2, [r7, #14]
 8003774:	89bb      	ldrh	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7b9b      	ldrb	r3, [r3, #14]
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	b2db      	uxtb	r3, r3
 800378c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7bdb      	ldrb	r3, [r3, #15]
 8003792:	b29b      	uxth	r3, r3
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8003798:	89fa      	ldrh	r2, [r7, #14]
 800379a:	89bb      	ldrh	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7c1b      	ldrb	r3, [r3, #16]
 80037ae:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7c5b      	ldrb	r3, [r3, #17]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	89bb      	ldrh	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7c5b      	ldrb	r3, [r3, #17]
 80037d0:	08db      	lsrs	r3, r3, #3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7c9b      	ldrb	r3, [r3, #18]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	015b      	lsls	r3, r3, #5
 80037de:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 80037e0:	89fa      	ldrh	r2, [r7, #14]
 80037e2:	89bb      	ldrh	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7c9b      	ldrb	r3, [r3, #18]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7cdb      	ldrb	r3, [r3, #19]
 8003800:	b29b      	uxth	r3, r3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7d1b      	ldrb	r3, [r3, #20]
 800380a:	b29b      	uxth	r3, r3
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003810:	89fa      	ldrh	r2, [r7, #14]
 8003812:	89bb      	ldrh	r3, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	4313      	orrs	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7d1b      	ldrb	r3, [r3, #20]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7d5b      	ldrb	r3, [r3, #21]
 8003836:	b29b      	uxth	r3, r3
 8003838:	01db      	lsls	r3, r3, #7
 800383a:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 800383c:	89fa      	ldrh	r2, [r7, #14]
 800383e:	89bb      	ldrh	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7d5b      	ldrb	r3, [r3, #21]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	b2db      	uxtb	r3, r3
 8003856:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7d9b      	ldrb	r3, [r3, #22]
 800385c:	b29b      	uxth	r3, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003862:	89fa      	ldrh	r2, [r7, #14]
 8003864:	89bb      	ldrh	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7d9b      	ldrb	r3, [r3, #22]
 8003878:	09db      	lsrs	r3, r3, #7
 800387a:	b2db      	uxtb	r3, r3
 800387c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7ddb      	ldrb	r3, [r3, #23]
 8003882:	b29b      	uxth	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7e1b      	ldrb	r3, [r3, #24]
 800388c:	125b      	asrs	r3, r3, #9
 800388e:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003890:	89fa      	ldrh	r2, [r7, #14]
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	b29a      	uxth	r2, r3
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	4313      	orrs	r3, r2
 800389c:	b29b      	uxth	r3, r3
 800389e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7e1b      	ldrb	r3, [r3, #24]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7e5b      	ldrb	r3, [r3, #25]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 80038bc:	89fa      	ldrh	r2, [r7, #14]
 80038be:	89bb      	ldrh	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7e5b      	ldrb	r3, [r3, #25]
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7e9b      	ldrb	r3, [r3, #26]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 80038e2:	89fa      	ldrh	r2, [r7, #14]
 80038e4:	89bb      	ldrh	r3, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7edb      	ldrb	r3, [r3, #27]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <_ZN4SBUS8readSBUSEv+0x2b0>
 8003900:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003904:	e000      	b.n	8003908 <_ZN4SBUS8readSBUSEv+0x2b2>
 8003906:	2200      	movs	r2, #0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 800390c:	2301      	movs	r3, #1


}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003928:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 800392a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800392e:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003930:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003934:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003936:	f240 6394 	movw	r3, #1684	; 0x694
 800393a:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 800393c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003940:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	da14      	bge.n	8003972 <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003948:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800394c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003956:	fb03 f202 	mul.w	r2, r3, r2
 800395a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800395e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003962:	1acb      	subs	r3, r1, r3
 8003964:	fb92 f3f3 	sdiv	r3, r2, r3
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003970:	e01b      	b.n	80039aa <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003972:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800397a:	429a      	cmp	r2, r3
 800397c:	dd13      	ble.n	80039a6 <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 800397e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003982:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <_ZN4SBUS8getLeftYEv+0x9c>)
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003992:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	fb92 f3f3 	sdiv	r3, r2, r3
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a4:	e001      	b.n	80039aa <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 80039a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80039bc <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	fffffc18 	.word	0xfffffc18
 80039bc:	00000000 	.word	0x00000000

080039c0 <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8c1b      	ldrh	r3, [r3, #32]
 80039cc:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 80039ce:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80039d2:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <_ZN4SBUS9getRightYEv+0xc0>)
 80039d6:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <_ZN4SBUS9getRightYEv+0xc4>)
 80039da:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 80039dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80039ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	dd16      	ble.n	8003a24 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 80039f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003a88 <_ZN4SBUS9getRightYEv+0xc8>
 8003a0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003a12:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a22:	e025      	b.n	8003a70 <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8003a24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a30:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	d516      	bpl.n	8003a6c <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8003a3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a52:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003a88 <_ZN4SBUS9getRightYEv+0xc8>
 8003a56:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	e001      	b.n	8003a70 <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8003a6c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003a8c <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8003a70:	eeb0 0a67 	vmov.f32	s0, s15
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	43b60000 	.word	0x43b60000
 8003a84:	44d28000 	.word	0x44d28000
 8003a88:	447a0000 	.word	0x447a0000
 8003a8c:	00000000 	.word	0x00000000

08003a90 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8bdb      	ldrh	r3, [r3, #30]
 8003a9c:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003a9e:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003aa2:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <_ZN4SBUS9getRightXEv+0xc0>)
 8003aa6:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <_ZN4SBUS9getRightXEv+0xc4>)
 8003aaa:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8003aac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	dd16      	ble.n	8003af4 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003ac6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ad2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ada:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003b58 <_ZN4SBUS9getRightXEv+0xc8>
 8003ade:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ae2:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003af2:	e025      	b.n	8003b40 <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8003af4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b00:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	d516      	bpl.n	8003b3c <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8003b0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b22:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003b58 <_ZN4SBUS9getRightXEv+0xc8>
 8003b26:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003b2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3a:	e001      	b.n	8003b40 <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8003b3c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003b5c <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8003b40:	eeb0 0a67 	vmov.f32	s0, s15
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	43b60000 	.word	0x43b60000
 8003b54:	44d28000 	.word	0x44d28000
 8003b58:	447a0000 	.word	0x447a0000
 8003b5c:	00000000 	.word	0x00000000

08003b60 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b6c:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8003b6e:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003b72:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <_ZN4SBUS11getJogWheelEv+0xc0>)
 8003b76:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8003b7a:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8003b7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b88:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b94:	dd16      	ble.n	8003bc4 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8003b96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ba2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003baa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003c28 <_ZN4SBUS11getJogWheelEv+0xc8>
 8003bae:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003bb2:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc2:	e025      	b.n	8003c10 <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8003bc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d516      	bpl.n	8003c0c <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8003bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003c28 <_ZN4SBUS11getJogWheelEv+0xc8>
 8003bf6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003bfa:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0a:	e001      	b.n	8003c10 <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8003c0c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003c2c <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 8003c10:	eeb0 0a67 	vmov.f32	s0, s15
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	44d28000 	.word	0x44d28000
 8003c24:	43b60000 	.word	0x43b60000
 8003c28:	447a0000 	.word	0x447a0000
 8003c2c:	00000000 	.word	0x00000000

08003c30 <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c40:	bf8c      	ite	hi
 8003c42:	2301      	movhi	r3, #1
 8003c44:	2300      	movls	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <_ZN4SBUS8A_buttonEv+0xac>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d02d      	beq.n	8003cac <_ZN4SBUS8A_buttonEv+0x7c>
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	dc3b      	bgt.n	8003ccc <_ZN4SBUS8A_buttonEv+0x9c>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <_ZN4SBUS8A_buttonEv+0x2e>
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d00a      	beq.n	8003c72 <_ZN4SBUS8A_buttonEv+0x42>
 8003c5c:	e036      	b.n	8003ccc <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02e      	beq.n	8003cc2 <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <_ZN4SBUS8A_buttonEv+0xac>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003c70:	e027      	b.n	8003cc2 <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <_ZN4SBUS8A_buttonEv+0xac>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8003c84:	e01f      	b.n	8003cc6 <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b31      	cmp	r3, #49	; 0x31
 8003c98:	bf8c      	ite	hi
 8003c9a:	2301      	movhi	r3, #1
 8003c9c:	2300      	movls	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <_ZN4SBUS8A_buttonEv+0xac>)
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]
	      break;
 8003caa:	e00c      	b.n	8003cc6 <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	f083 0301 	eor.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8003cb8:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <_ZN4SBUS8A_buttonEv+0xac>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
	        return true;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e005      	b.n	8003cce <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8003cca:	bf00      	nop
	  }

	  return false;
 8003ccc:	2300      	movs	r3, #0

}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200003d0 	.word	0x200003d0
 8003ce0:	200003d1 	.word	0x200003d1

08003ce4 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf4:	bf8c      	ite	hi
 8003cf6:	2301      	movhi	r3, #1
 8003cf8:	2300      	movls	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <_ZN4SBUS8B_buttonEv+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d02d      	beq.n	8003d60 <_ZN4SBUS8B_buttonEv+0x7c>
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	dc3b      	bgt.n	8003d80 <_ZN4SBUS8B_buttonEv+0x9c>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <_ZN4SBUS8B_buttonEv+0x2e>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d00a      	beq.n	8003d26 <_ZN4SBUS8B_buttonEv+0x42>
 8003d10:	e036      	b.n	8003d80 <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d02e      	beq.n	8003d76 <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <_ZN4SBUS8B_buttonEv+0xac>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003d24:	e027      	b.n	8003d76 <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	f083 0301 	eor.w	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <_ZN4SBUS8B_buttonEv+0xac>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8003d38:	e01f      	b.n	8003d7a <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8003d3a:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_ZN4SBUS8B_buttonEv+0xb0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b31      	cmp	r3, #49	; 0x31
 8003d4c:	bf8c      	ite	hi
 8003d4e:	2301      	movhi	r3, #1
 8003d50:	2300      	movls	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <_ZN4SBUS8B_buttonEv+0xac>)
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
	      break;
 8003d5e:	e00c      	b.n	8003d7a <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <_ZN4SBUS8B_buttonEv+0xac>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
	        return true;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e005      	b.n	8003d82 <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 8003d76:	bf00      	nop
 8003d78:	e002      	b.n	8003d80 <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 8003d7e:	bf00      	nop
	  }

	  return false;
 8003d80:	2300      	movs	r3, #0


}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	200003d2 	.word	0x200003d2
 8003d94:	200003d3 	.word	0x200003d3

08003d98 <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b1d      	cmp	r3, #29
 8003da8:	d80e      	bhi.n	8003dc8 <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8003daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dae:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <_ZN10Components13Error_HandlerEv+0x38>)
 8003db0:	f004 ff22 	bl	8008bf8 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8003db4:	20c8      	movs	r0, #200	; 0xc8
 8003db6:	f002 f81f 	bl	8005df8 <HAL_Delay>
		printf("Components error handler !! \r\n");
 8003dba:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <_ZN10Components13Error_HandlerEv+0x3c>)
 8003dbc:	f010 f814 	bl	8013de8 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e7ed      	b.n	8003da4 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	48000800 	.word	0x48000800
 8003dd4:	08016098 	.word	0x08016098

08003dd8 <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb09 	bl	80043f8 <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fb42 	bl	8004470 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb7b 	bl	80044e8 <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fbb0 	bl	8004558 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fbe9 	bl	80045d0 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f86a 	bl	8003ed8 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fc19 	bl	800463c <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fc7e 	bl	800470c <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fccf 	bl	80047b4 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fd1e 	bl	8004858 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fd6d 	bl	80048fc <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fdae 	bl	8004984 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f95f 	bl	80040ec <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fdec 	bl	8004a0c <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fe2d 	bl	8004a94 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa1a 	bl	8004274 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fe6b 	bl	8004b1c <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f004 ffbe 	bl	8008dcc <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 ffb9 	bl	8008dcc <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 ffb4 	bl	8008dcc <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 ffaf 	bl	8008dcc <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	4618      	mov	r0, r3
 8003e74:	f004 ffaa 	bl	8008dcc <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f004 ffd6 	bl	8008e2e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	4618      	mov	r0, r3
 8003e88:	f004 ffd1 	bl	8008e2e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4618      	mov	r0, r3
 8003e92:	f004 ffcc 	bl	8008e2e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 ffc7 	bl	8008e2e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f004 ffc2 	bl	8008e2e <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	217f      	movs	r1, #127	; 0x7f
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 faa7 	bl	8007404 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	217f      	movs	r1, #127	; 0x7f
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 faa1 	bl	8007404 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	217f      	movs	r1, #127	; 0x7f
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 fa9b 	bl	8007404 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	; 0x38
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 8003ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f00f fa7f 	bl	80133f8 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003f02:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f0c:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	2208      	movs	r2, #8
 8003f34:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	2200      	movs	r2, #0
 8003f44:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	221c      	movs	r2, #28
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f94:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 f98e 	bl	80062cc <HAL_ADC_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fee9 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 8003fc6:	4842      	ldr	r0, [pc, #264]	; (80040d0 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 8003fc8:	f00f fe88 	bl	8013cdc <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f003 fa74 	bl	80074c8 <HAL_ADCEx_MultiModeConfigChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fed1 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8003ff6:	4837      	ldr	r0, [pc, #220]	; (80040d4 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 8003ff8:	f00f fe70 	bl	8013cdc <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <_ZN10Components10init_ADC_1Ev+0x200>)
 8003ffe:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004000:	2306      	movs	r3, #6
 8004002:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004004:	2304      	movs	r3, #4
 8004006:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004008:	237f      	movs	r3, #127	; 0x7f
 800400a:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800400c:	2304      	movs	r3, #4
 800400e:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	f107 020c 	add.w	r2, r7, #12
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f002 fc08 	bl	8006834 <HAL_ADC_ConfigChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff feaf 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 800403a:	4828      	ldr	r0, [pc, #160]	; (80040dc <_ZN10Components10init_ADC_1Ev+0x204>)
 800403c:	f00f fe4e 	bl	8013cdc <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <_ZN10Components10init_ADC_1Ev+0x208>)
 8004042:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004044:	2312      	movs	r3, #18
 8004046:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004048:	2304      	movs	r3, #4
 800404a:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800404c:	237f      	movs	r3, #127	; 0x7f
 800404e:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004050:	2304      	movs	r3, #4
 8004052:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f107 020c 	add.w	r2, r7, #12
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fbe6 	bl	8006834 <HAL_ADC_ConfigChannel>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fe8d 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 800407e:	4819      	ldr	r0, [pc, #100]	; (80040e4 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004080:	f00f fe2c 	bl	8013cdc <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <_ZN10Components10init_ADC_1Ev+0x210>)
 8004086:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004088:	2318      	movs	r3, #24
 800408a:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800408c:	2304      	movs	r3, #4
 800408e:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004090:	237f      	movs	r3, #127	; 0x7f
 8004092:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004094:	2304      	movs	r3, #4
 8004096:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f107 020c 	add.w	r2, r7, #12
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f002 fbc4 	bl	8006834 <HAL_ADC_ConfigChannel>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fe6b 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 80040c2:	4808      	ldr	r0, [pc, #32]	; (80040e4 <_ZN10Components10init_ADC_1Ev+0x20c>)
 80040c4:	f00f fe0a 	bl	8013cdc <iprintf>
		  }


}
 80040c8:	bf00      	nop
 80040ca:	3738      	adds	r7, #56	; 0x38
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	080160b8 	.word	0x080160b8
 80040d4:	080160cc 	.word	0x080160cc
 80040d8:	2e300800 	.word	0x2e300800
 80040dc:	080160fc 	.word	0x080160fc
 80040e0:	3ac04000 	.word	0x3ac04000
 80040e4:	08016120 	.word	0x08016120
 80040e8:	32601000 	.word	0x32601000

080040ec <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	2220      	movs	r2, #32
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f00f f97b 	bl	80133f8 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	4a55      	ldr	r2, [pc, #340]	; (800425c <_ZN10Components10init_ADC_2Ev+0x170>)
 8004108:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004112:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2200      	movs	r2, #0
 8004122:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	2201      	movs	r2, #1
 8004132:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	2208      	movs	r2, #8
 800413a:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2200      	movs	r2, #0
 800414a:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	2202      	movs	r2, #2
 8004152:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2200      	movs	r2, #0
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	2200      	movs	r2, #0
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	2218      	movs	r2, #24
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	22e0      	movs	r2, #224	; 0xe0
 8004198:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	2200      	movs	r2, #0
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2201      	movs	r2, #1
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f88c 	bl	80062cc <HAL_ADC_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fde7 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 80041ca:	4825      	ldr	r0, [pc, #148]	; (8004260 <_ZN10Components10init_ADC_2Ev+0x174>)
 80041cc:	f00f fe0c 	bl	8013de8 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <_ZN10Components10init_ADC_2Ev+0x178>)
 80041d2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041d4:	2306      	movs	r3, #6
 80041d6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041dc:	237f      	movs	r3, #127	; 0x7f
 80041de:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041e0:	2304      	movs	r3, #4
 80041e2:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	f107 0208 	add.w	r2, r7, #8
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 fb1e 	bl	8006834 <HAL_ADC_ConfigChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fdc5 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 800420e:	4816      	ldr	r0, [pc, #88]	; (8004268 <_ZN10Components10init_ADC_2Ev+0x17c>)
 8004210:	f00f fdea 	bl	8013de8 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <_ZN10Components10init_ADC_2Ev+0x180>)
 8004216:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004218:	230c      	movs	r3, #12
 800421a:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800421c:	2304      	movs	r3, #4
 800421e:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004220:	237f      	movs	r3, #127	; 0x7f
 8004222:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004224:	2304      	movs	r3, #4
 8004226:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	f107 0208 	add.w	r2, r7, #8
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fafe 	bl	8006834 <HAL_ADC_ConfigChannel>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fda5 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 800424e:	4808      	ldr	r0, [pc, #32]	; (8004270 <_ZN10Components10init_ADC_2Ev+0x184>)
 8004250:	f00f fdca 	bl	8013de8 <puts>

	  }


}
 8004254:	bf00      	nop
 8004256:	3728      	adds	r7, #40	; 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	50000100 	.word	0x50000100
 8004260:	0801614c 	.word	0x0801614c
 8004264:	c3290000 	.word	0xc3290000
 8004268:	08016168 	.word	0x08016168
 800426c:	cb8c0000 	.word	0xcb8c0000
 8004270:	08016190 	.word	0x08016190

08004274 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	2220      	movs	r2, #32
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f00f f8b7 	bl	80133f8 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a55      	ldr	r2, [pc, #340]	; (80043e4 <_ZN10Components10init_ADC_5Ev+0x170>)
 8004290:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800429a:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2201      	movs	r2, #1
 80042ba:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2208      	movs	r2, #8
 80042c2:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2200      	movs	r2, #0
 80042d2:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2202      	movs	r2, #2
 80042da:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2200      	movs	r2, #0
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2200      	movs	r2, #0
 8004306:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2218      	movs	r2, #24
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	22e0      	movs	r2, #224	; 0xe0
 8004320:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2200      	movs	r2, #0
 8004328:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2201      	movs	r2, #1
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4618      	mov	r0, r3
 8004338:	f001 ffc8 	bl	80062cc <HAL_ADC_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fd23 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8004352:	4825      	ldr	r0, [pc, #148]	; (80043e8 <_ZN10Components10init_ADC_5Ev+0x174>)
 8004354:	f00f fcc2 	bl	8013cdc <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <_ZN10Components10init_ADC_5Ev+0x178>)
 800435a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800435c:	2306      	movs	r3, #6
 800435e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004364:	237f      	movs	r3, #127	; 0x7f
 8004366:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004368:	2304      	movs	r3, #4
 800436a:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f107 0208 	add.w	r2, r7, #8
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f002 fa5a 	bl	8006834 <HAL_ADC_ConfigChannel>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fd01 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8004396:	4816      	ldr	r0, [pc, #88]	; (80043f0 <_ZN10Components10init_ADC_5Ev+0x17c>)
 8004398:	f00f fca0 	bl	8013cdc <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <_ZN10Components10init_ADC_5Ev+0x180>)
 800439e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80043a0:	230c      	movs	r3, #12
 80043a2:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80043a4:	2304      	movs	r3, #4
 80043a6:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043a8:	237f      	movs	r3, #127	; 0x7f
 80043aa:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043ac:	2304      	movs	r3, #4
 80043ae:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f107 0208 	add.w	r2, r7, #8
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f002 fa3a 	bl	8006834 <HAL_ADC_ConfigChannel>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fce1 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80043d6:	4806      	ldr	r0, [pc, #24]	; (80043f0 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80043d8:	f00f fc80 	bl	8013cdc <iprintf>
	  }




}
 80043dc:	bf00      	nop
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	50000600 	.word	0x50000600
 80043e8:	080161b8 	.word	0x080161b8
 80043ec:	94f00020 	.word	0x94f00020
 80043f0:	080161d0 	.word	0x080161d0
 80043f4:	8c900008 	.word	0x8c900008

080043f8 <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <_ZN10Components11init_COMP_1Ev+0x70>)
 8004406:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2250      	movs	r2, #80	; 0x50
 8004416:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f003 fa9b 	bl	8007978 <HAL_COMP_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fca0 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 8004458:	4804      	ldr	r0, [pc, #16]	; (800446c <_ZN10Components11init_COMP_1Ev+0x74>)
 800445a:	f00f fc3f 	bl	8013cdc <iprintf>

	  }
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40010200 	.word	0x40010200
 800446c:	080161f4 	.word	0x080161f4

08004470 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <_ZN10Components11init_COMP_2Ev+0x70>)
 800447e:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2250      	movs	r2, #80	; 0x50
 800448e:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 fa5f 	bl	8007978 <HAL_COMP_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fc64 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <_ZN10Components11init_COMP_2Ev+0x74>)
 80044d2:	f00f fc03 	bl	8013cdc <iprintf>
	    }




}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40010204 	.word	0x40010204
 80044e4:	0801620c 	.word	0x0801620c

080044e8 <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <_ZN10Components11init_COMP_4Ev+0x68>)
 80044f6:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 fa27 	bl	8007978 <HAL_COMP_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fc2c 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8004540:	4804      	ldr	r0, [pc, #16]	; (8004554 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8004542:	f00f fbcb 	bl	8013cdc <iprintf>
    }
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	4001020c 	.word	0x4001020c
 8004554:	08016224 	.word	0x08016224

08004558 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <_ZN10Components11init_COMP_5Ev+0x70>)
 8004566:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f003 f9eb 	bl	8007978 <HAL_COMP_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fbf0 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 80045b8:	4804      	ldr	r0, [pc, #16]	; (80045cc <_ZN10Components11init_COMP_5Ev+0x74>)
 80045ba:	f00f fb8f 	bl	8013cdc <iprintf>

	  }

}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40010210 	.word	0x40010210
 80045cc:	0801623c 	.word	0x0801623c

080045d0 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <_ZN10Components11init_COMP_7Ev+0x68>)
 80045de:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2250      	movs	r2, #80	; 0x50
 80045ee:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2200      	movs	r2, #0
 80045fe:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2200      	movs	r2, #0
 8004606:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2200      	movs	r2, #0
 800460e:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	4618      	mov	r0, r3
 8004616:	f003 f9af 	bl	8007978 <HAL_COMP_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fbb4 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	   }



}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40010218 	.word	0x40010218

0800463c <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	; 0x38
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	2230      	movs	r2, #48	; 0x30
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f00e fed3 	bl	80133f8 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <_ZN10Components10init_DAC_1Ev+0xc8>)
 8004658:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	4618      	mov	r0, r3
 8004660:	f003 fc33 	bl	8007eca <HAL_DAC_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fb8f 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800467a:	4823      	ldr	r0, [pc, #140]	; (8004708 <_ZN10Components10init_DAC_1Ev+0xcc>)
 800467c:	f00f fb2e 	bl	8013cdc <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004680:	2302      	movs	r3, #2
 8004682:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 8004688:	2300      	movs	r3, #0
 800468a:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004698:	2302      	movs	r3, #2
 800469a:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800469c:	2302      	movs	r3, #2
 800469e:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80046a0:	2300      	movs	r3, #0
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f107 0108 	add.w	r1, r7, #8
 80046ac:	2200      	movs	r2, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fc2e 	bl	8007f10 <HAL_DAC_ConfigChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fb67 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80046ca:	480f      	ldr	r0, [pc, #60]	; (8004708 <_ZN10Components10init_DAC_1Ev+0xcc>)
 80046cc:	f00f fb06 	bl	8013cdc <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f107 0108 	add.w	r1, r7, #8
 80046d8:	2210      	movs	r2, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fc18 	bl	8007f10 <HAL_DAC_ConfigChannel>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fb51 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80046f6:	4804      	ldr	r0, [pc, #16]	; (8004708 <_ZN10Components10init_DAC_1Ev+0xcc>)
 80046f8:	f00f faf0 	bl	8013cdc <iprintf>

    }

}
 80046fc:	bf00      	nop
 80046fe:	3738      	adds	r7, #56	; 0x38
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	50000800 	.word	0x50000800
 8004708:	08016254 	.word	0x08016254

0800470c <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 800470c:	b580      	push	{r7, lr}
 800470e:	b08e      	sub	sp, #56	; 0x38
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	2230      	movs	r2, #48	; 0x30
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f00e fe6b 	bl	80133f8 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4a20      	ldr	r2, [pc, #128]	; (80047a8 <_ZN10Components10init_DAC_2Ev+0x9c>)
 8004728:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fbcb 	bl	8007eca <HAL_DAC_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fb27 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800474a:	4818      	ldr	r0, [pc, #96]	; (80047ac <_ZN10Components10init_DAC_2Ev+0xa0>)
 800474c:	f00f fac6 	bl	8013cdc <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004750:	2302      	movs	r3, #2
 8004752:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004768:	2302      	movs	r3, #2
 800476a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800476c:	2302      	movs	r3, #2
 800476e:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	2200      	movs	r2, #0
 800477a:	4619      	mov	r1, r3
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <_ZN10Components10init_DAC_2Ev+0xa4>)
 800477e:	f003 fbc7 	bl	8007f10 <HAL_DAC_ConfigChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fb00 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8004798:	4804      	ldr	r0, [pc, #16]	; (80047ac <_ZN10Components10init_DAC_2Ev+0xa0>)
 800479a:	f00f fa9f 	bl	8013cdc <iprintf>

	  }


}
 800479e:	bf00      	nop
 80047a0:	3738      	adds	r7, #56	; 0x38
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	50000c00 	.word	0x50000c00
 80047ac:	0801626c 	.word	0x0801626c
 80047b0:	2000049c 	.word	0x2000049c

080047b4 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	2230      	movs	r2, #48	; 0x30
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f00e fe17 	bl	80133f8 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4a20      	ldr	r2, [pc, #128]	; (8004850 <_ZN10Components10init_DAC_3Ev+0x9c>)
 80047d0:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 fb77 	bl	8007eca <HAL_DAC_Init>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fad3 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 80047f2:	4818      	ldr	r0, [pc, #96]	; (8004854 <_ZN10Components10init_DAC_3Ev+0xa0>)
 80047f4:	f00f fa72 	bl	8013cdc <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80047f8:	2302      	movs	r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004810:	2302      	movs	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004814:	2302      	movs	r3, #2
 8004816:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f107 0108 	add.w	r1, r7, #8
 8004824:	2210      	movs	r2, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f003 fb72 	bl	8007f10 <HAL_DAC_ConfigChannel>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff faab 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004842:	4804      	ldr	r0, [pc, #16]	; (8004854 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004844:	f00f fa4a 	bl	8013cdc <iprintf>

	  }



}
 8004848:	bf00      	nop
 800484a:	3738      	adds	r7, #56	; 0x38
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	50001000 	.word	0x50001000
 8004854:	08016284 	.word	0x08016284

08004858 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8004858:	b580      	push	{r7, lr}
 800485a:	b08e      	sub	sp, #56	; 0x38
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	2230      	movs	r2, #48	; 0x30
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f00e fdc5 	bl	80133f8 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <_ZN10Components10init_DAC_4Ev+0x9c>)
 8004874:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4618      	mov	r0, r3
 800487c:	f003 fb25 	bl	8007eca <HAL_DAC_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fa81 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004896:	4818      	ldr	r0, [pc, #96]	; (80048f8 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004898:	f00f fa20 	bl	8013cdc <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800489c:	2302      	movs	r3, #2
 800489e:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80048a0:	2300      	movs	r3, #0
 80048a2:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80048b4:	2302      	movs	r3, #2
 80048b6:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80048b8:	2302      	movs	r3, #2
 80048ba:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f107 0108 	add.w	r1, r7, #8
 80048c8:	2200      	movs	r2, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 fb20 	bl	8007f10 <HAL_DAC_ConfigChannel>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fa59 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 80048e6:	4804      	ldr	r0, [pc, #16]	; (80048f8 <_ZN10Components10init_DAC_4Ev+0xa0>)
 80048e8:	f00f f9f8 	bl	8013cdc <iprintf>

	  }


}
 80048ec:	bf00      	nop
 80048ee:	3738      	adds	r7, #56	; 0x38
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	50001400 	.word	0x50001400
 80048f8:	0801629c 	.word	0x0801629c

080048fc <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <_ZN10Components9init_OA_1Ev+0x80>)
 800490a:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2240      	movs	r2, #64	; 0x40
 800491a:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2201      	movs	r2, #1
 800492a:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2200      	movs	r2, #0
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2200      	movs	r2, #0
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2200      	movs	r2, #0
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	4618      	mov	r0, r3
 8004952:	f004 f96b 	bl	8008c2c <HAL_OPAMP_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fa16 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 800496c:	4804      	ldr	r0, [pc, #16]	; (8004980 <_ZN10Components9init_OA_1Ev+0x84>)
 800496e:	f00f f9b5 	bl	8013cdc <iprintf>
	  }


}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40010300 	.word	0x40010300
 8004980:	080162b4 	.word	0x080162b4

08004984 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <_ZN10Components9init_OA_2Ev+0x80>)
 8004992:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	2201      	movs	r2, #1
 80049b2:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2200      	movs	r2, #0
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	2200      	movs	r2, #0
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 f926 	bl	8008c2c <HAL_OPAMP_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff f9d1 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 80049f6:	4804      	ldr	r0, [pc, #16]	; (8004a08 <_ZN10Components9init_OA_2Ev+0x84>)
 80049f8:	f00f f970 	bl	8013cdc <iprintf>

	    }


}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40010304 	.word	0x40010304
 8004a08:	080162cc 	.word	0x080162cc

08004a0c <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <_ZN10Components9init_OA_3Ev+0x80>)
 8004a1a:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	2240      	movs	r2, #64	; 0x40
 8004a2a:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2200      	movs	r2, #0
 8004a32:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	2200      	movs	r2, #0
 8004a42:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2200      	movs	r2, #0
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2200      	movs	r2, #0
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f004 f8e3 	bl	8008c2c <HAL_OPAMP_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff f98e 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 8004a7c:	4804      	ldr	r0, [pc, #16]	; (8004a90 <_ZN10Components9init_OA_3Ev+0x84>)
 8004a7e:	f00f f92d 	bl	8013cdc <iprintf>

	   }

}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40010308 	.word	0x40010308
 8004a90:	080162e4 	.word	0x080162e4

08004a94 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <_ZN10Components9init_OA_4Ev+0x80>)
 8004aa2:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 f89e 	bl	8008c2c <HAL_OPAMP_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bf14      	ite	ne
 8004af6:	2301      	movne	r3, #1
 8004af8:	2300      	moveq	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff f949 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 8004b06:	4804      	ldr	r0, [pc, #16]	; (8004b18 <_ZN10Components9init_OA_4Ev+0x84>)
 8004b08:	f00f f8e8 	bl	8013cdc <iprintf>

	  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	4001030c 	.word	0x4001030c
 8004b18:	080162fc 	.word	0x080162fc

08004b1c <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <_ZN10Components9init_OA_5Ev+0x80>)
 8004b2a:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	2201      	movs	r2, #1
 8004b4a:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	2200      	movs	r2, #0
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 f85a 	bl	8008c2c <HAL_OPAMP_Init>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff f905 	bl	8003d98 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 8004b8e:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <_ZN10Components9init_OA_5Ev+0x84>)
 8004b90:	f00f f8a4 	bl	8013cdc <iprintf>

	  }

}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40010310 	.word	0x40010310
 8004ba0:	08016314 	.word	0x08016314

08004ba4 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000670 	.word	0x20000670

08004bd8 <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

	return &hadc5;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	200006dc 	.word	0x200006dc

08004bf4 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor){
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]

}
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <_ZN8Debugger21displayMavlink_headerEv>:

	}

}

void Debugger::displayMavlink_header(void){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]



	if(HAL_GetTick() % 100 == 0){
 8004c2c:	f001 f8d8 	bl	8005de0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <_ZN8Debugger21displayMavlink_headerEv+0xa0>)
 8004c34:	fba3 1302 	umull	r1, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d035      	beq.n	8004cbc <_ZN8Debugger21displayMavlink_headerEv+0x98>
		printf("Mavlink start of message: %d \r\n", _mavlink->_mavlink_received_header.start_of_msg);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f893 35f4 	ldrb.w	r3, [r3, #1524]	; 0x5f4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	481b      	ldr	r0, [pc, #108]	; (8004cc8 <_ZN8Debugger21displayMavlink_headerEv+0xa4>)
 8004c5c:	f00f f83e 	bl	8013cdc <iprintf>
		printf("Mavlink payload length: %d \r\n", _mavlink->_mavlink_received_header.payload_len);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f893 35f5 	ldrb.w	r3, [r3, #1525]	; 0x5f5
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4818      	ldr	r0, [pc, #96]	; (8004ccc <_ZN8Debugger21displayMavlink_headerEv+0xa8>)
 8004c6c:	f00f f836 	bl	8013cdc <iprintf>
		printf("Mavlink sequence number: %d \r\n", _mavlink->_mavlink_received_header.sequence_num);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f893 35f6 	ldrb.w	r3, [r3, #1526]	; 0x5f6
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4815      	ldr	r0, [pc, #84]	; (8004cd0 <_ZN8Debugger21displayMavlink_headerEv+0xac>)
 8004c7c:	f00f f82e 	bl	8013cdc <iprintf>
		printf("Mavlink system id: %d \r\n", _mavlink->_mavlink_received_header.sys_id);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f893 35f7 	ldrb.w	r3, [r3, #1527]	; 0x5f7
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4812      	ldr	r0, [pc, #72]	; (8004cd4 <_ZN8Debugger21displayMavlink_headerEv+0xb0>)
 8004c8c:	f00f f826 	bl	8013cdc <iprintf>
		printf("Mavlink comp id: %d \r\n", _mavlink->_mavlink_received_header.comp_id);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f893 35f8 	ldrb.w	r3, [r3, #1528]	; 0x5f8
 8004c98:	4619      	mov	r1, r3
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <_ZN8Debugger21displayMavlink_headerEv+0xb4>)
 8004c9c:	f00f f81e 	bl	8013cdc <iprintf>
		printf("Mavlink msg id: %d \r\n", _mavlink->_mavlink_received_header.msg_id);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f893 35f9 	ldrb.w	r3, [r3, #1529]	; 0x5f9
 8004ca8:	4619      	mov	r1, r3
 8004caa:	480c      	ldr	r0, [pc, #48]	; (8004cdc <_ZN8Debugger21displayMavlink_headerEv+0xb8>)
 8004cac:	f00f f816 	bl	8013cdc <iprintf>

		printf("\r\n");
 8004cb0:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <_ZN8Debugger21displayMavlink_headerEv+0xbc>)
 8004cb2:	f00f f899 	bl	8013de8 <puts>
		printf("\r\n");
 8004cb6:	480a      	ldr	r0, [pc, #40]	; (8004ce0 <_ZN8Debugger21displayMavlink_headerEv+0xbc>)
 8004cb8:	f00f f896 	bl	8013de8 <puts>

	}



}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	51eb851f 	.word	0x51eb851f
 8004cc8:	080164e8 	.word	0x080164e8
 8004ccc:	08016508 	.word	0x08016508
 8004cd0:	08016528 	.word	0x08016528
 8004cd4:	08016548 	.word	0x08016548
 8004cd8:	08016564 	.word	0x08016564
 8004cdc:	0801657c 	.word	0x0801657c
 8004ce0:	08016344 	.word	0x08016344

08004ce4 <main>:

uint8_t receiveBuffer_1[64];



int main(void){
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	f5ad 6d09 	sub.w	sp, sp, #2192	; 0x890
 8004cea:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8004cec:	f001 f813 	bl	8005d16 <HAL_Init>
	//Initialize clock/DMA/... configurations and components.

	HAL_Delay(100);
 8004cf0:	2064      	movs	r0, #100	; 0x64
 8004cf2:	f001 f881 	bl	8005df8 <HAL_Delay>
	Initializer init(&huart1, &huart2);
 8004cf6:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8004cfa:	4a3a      	ldr	r2, [pc, #232]	; (8004de4 <main+0x100>)
 8004cfc:	493a      	ldr	r1, [pc, #232]	; (8004de8 <main+0x104>)
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fbda 	bl	80014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8004d04:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fc fbec 	bl	80014e6 <_ZN11Initializer12init_ConfigsEv>

	HAL_Delay(100);
 8004d0e:	2064      	movs	r0, #100	; 0x64
 8004d10:	f001 f872 	bl	8005df8 <HAL_Delay>
	Components components;
 8004d14:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8004d18:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004d1c:	4a33      	ldr	r2, [pc, #204]	; (8004dec <main+0x108>)
 8004d1e:	4618      	mov	r0, r3
 8004d20:	4611      	mov	r1, r2
 8004d22:	2344      	movs	r3, #68	; 0x44
 8004d24:	461a      	mov	r2, r3
 8004d26:	f00e fb59 	bl	80133dc <memcpy>
	components.init_Components();
 8004d2a:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f852 	bl	8003dd8 <_ZN10Components15init_ComponentsEv>


	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8004d34:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8004d38:	492a      	ldr	r1, [pc, #168]	; (8004de4 <main+0x100>)
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fc5a 	bl	80035f4 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1);
 8004d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d44:	4928      	ldr	r1, [pc, #160]	; (8004de8 <main+0x104>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fb50 	bl	80033ec <_ZN14MavlinkControlC1EP20__UART_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 8004d4c:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 8004d50:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8004d54:	f207 613c 	addw	r1, r7, #1596	; 0x63c
 8004d58:	f107 000c 	add.w	r0, r7, #12
 8004d5c:	f7fc f8ce 	bl	8000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Debugger debugger(&sbus, &mavlink, &convertor);
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d68:	f207 613c 	addw	r1, r7, #1596	; 0x63c
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f7ff ff41 	bl	8004bf4 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>

	HAL_Delay(500);
 8004d72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d76:	f001 f83f 	bl	8005df8 <HAL_Delay>
	printf(" sanity check \r \n");
 8004d7a:	481d      	ldr	r0, [pc, #116]	; (8004df0 <main+0x10c>)
 8004d7c:	f00f f834 	bl	8013de8 <puts>

	/* Main loop */
	while (1){

		//signal led
		if(HAL_GetTick() % 1000 == 0){
 8004d80:	f001 f82e 	bl	8005de0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <main+0x110>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <main+0xcc>

			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 8004da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004daa:	4813      	ldr	r0, [pc, #76]	; (8004df8 <main+0x114>)
 8004dac:	f003 ff24 	bl	8008bf8 <HAL_GPIO_TogglePin>

		}


		  sbus.update();
 8004db0:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fc3b 	bl	8003630 <_ZN4SBUS6updateEv>
		  convertor.process();
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc fb60 	bl	8001484 <_ZN9Convertor7processEv>
		  mavlink.update();
 8004dc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fb6b 	bl	80034a4 <_ZN14MavlinkControl6updateEv>
		  mavlink.processReceivedBuffer();
 8004dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fb86 	bl	80034e4 <_ZN14MavlinkControl21processReceivedBufferEv>
		  //debugger.displaySBUS_channels();
		  //debugger.displayMavlink_RAW();
		  //debugger.displayDebugInfo();
		  debugger.displayMavlink_header();
 8004dd8:	463b      	mov	r3, r7
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ff22 	bl	8004c24 <_ZN8Debugger21displayMavlink_headerEv>
		if(HAL_GetTick() % 1000 == 0){
 8004de0:	e7ce      	b.n	8004d80 <main+0x9c>
 8004de2:	bf00      	nop
 8004de4:	200007d8 	.word	0x200007d8
 8004de8:	20000748 	.word	0x20000748
 8004dec:	080165c0 	.word	0x080165c0
 8004df0:	080165ac 	.word	0x080165ac
 8004df4:	10624dd3 	.word	0x10624dd3
 8004df8:	48000800 	.word	0x48000800

08004dfc <Error_Handler>:
//        }
//    }
//}


void Error_Handler(void){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004e02:	2300      	movs	r3, #0
 8004e04:	71fb      	strb	r3, [r7, #7]
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b1d      	cmp	r3, #29
 8004e0a:	d80e      	bhi.n	8004e2a <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e10:	4808      	ldr	r0, [pc, #32]	; (8004e34 <Error_Handler+0x38>)
 8004e12:	f003 fef1 	bl	8008bf8 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8004e16:	4808      	ldr	r0, [pc, #32]	; (8004e38 <Error_Handler+0x3c>)
 8004e18:	f00e ffe6 	bl	8013de8 <puts>
		HAL_Delay(100);
 8004e1c:	2064      	movs	r0, #100	; 0x64
 8004e1e:	f000 ffeb 	bl	8005df8 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	3301      	adds	r3, #1
 8004e26:	71fb      	strb	r3, [r7, #7]
 8004e28:	e7ed      	b.n	8004e06 <Error_Handler+0xa>
	}

}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	48000800 	.word	0x48000800
 8004e38:	08016604 	.word	0x08016604

08004e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_MspInit+0x44>)
 8004e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e46:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_MspInit+0x44>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_MspInit+0x44>)
 8004e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_MspInit+0x44>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_MspInit+0x44>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_MspInit+0x44>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b0a2      	sub	sp, #136	; 0x88
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e9c:	f107 0320 	add.w	r3, r7, #32
 8004ea0:	2254      	movs	r2, #84	; 0x54
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f00e faa7 	bl	80133f8 <memset>
  if(hadc->Instance==ADC1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb2:	f040 8086 	bne.w	8004fc2 <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ebc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ec0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ec2:	f107 0320 	add.w	r3, r7, #32
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f006 fbe2 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004ed2:	f7ff ff93 	bl	8004dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ed6:	4b8e      	ldr	r3, [pc, #568]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	4a8c      	ldr	r2, [pc, #560]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ee0:	4b8b      	ldr	r3, [pc, #556]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10b      	bne.n	8004f00 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eec:	4a89      	ldr	r2, [pc, #548]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ef4:	4b87      	ldr	r3, [pc, #540]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f00:	4b84      	ldr	r3, [pc, #528]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	4a83      	ldr	r2, [pc, #524]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f0c:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f18:	4b7e      	ldr	r3, [pc, #504]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1c:	4a7d      	ldr	r2, [pc, #500]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f24:	4b7b      	ldr	r3, [pc, #492]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8004f30:	2301      	movs	r3, #1
 8004f32:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f34:	2303      	movs	r3, #3
 8004f36:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8004f3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f40:	4619      	mov	r1, r3
 8004f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f46:	f003 fcbd 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8004f4a:	f641 0302 	movw	r3, #6146	; 0x1802
 8004f4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f50:	2303      	movs	r3, #3
 8004f52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	486e      	ldr	r0, [pc, #440]	; (8005118 <HAL_ADC_MspInit+0x294>)
 8004f60:	f003 fcb0 	bl	80088c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8004f64:	4b6d      	ldr	r3, [pc, #436]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f66:	4a6e      	ldr	r2, [pc, #440]	; (8005120 <HAL_ADC_MspInit+0x29c>)
 8004f68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004f6a:	4b6c      	ldr	r3, [pc, #432]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f6c:	2205      	movs	r2, #5
 8004f6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f76:	4b69      	ldr	r3, [pc, #420]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f7c:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f82:	4b66      	ldr	r3, [pc, #408]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f8a:	4b64      	ldr	r3, [pc, #400]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004f92:	4b62      	ldr	r3, [pc, #392]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f98:	4b60      	ldr	r3, [pc, #384]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f9e:	485f      	ldr	r0, [pc, #380]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004fa0:	f003 f95e 	bl	8008260 <HAL_DMA_Init>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8004faa:	f7ff ff27 	bl	8004dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a5a      	ldr	r2, [pc, #360]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
 8004fb4:	4a59      	ldr	r2, [pc, #356]	; (800511c <HAL_ADC_MspInit+0x298>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8004fba:	485a      	ldr	r0, [pc, #360]	; (8005124 <HAL_ADC_MspInit+0x2a0>)
 8004fbc:	f00e ff14 	bl	8013de8 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8004fc0:	e0a1      	b.n	8005106 <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a58      	ldr	r2, [pc, #352]	; (8005128 <HAL_ADC_MspInit+0x2a4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d150      	bne.n	800506e <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004fd2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004fd6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fd8:	f107 0320 	add.w	r3, r7, #32
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f006 fb57 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8004fe8:	f7ff ff08 	bl	8004dfc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fec:	4b48      	ldr	r3, [pc, #288]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	4a47      	ldr	r2, [pc, #284]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004ff4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ff6:	4b46      	ldr	r3, [pc, #280]	; (8005110 <HAL_ADC_MspInit+0x28c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004ffe:	4b45      	ldr	r3, [pc, #276]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4a44      	ldr	r2, [pc, #272]	; (8005114 <HAL_ADC_MspInit+0x290>)
 8005004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800500a:	4b42      	ldr	r3, [pc, #264]	; (8005114 <HAL_ADC_MspInit+0x290>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8005016:	4b45      	ldr	r3, [pc, #276]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005018:	4a45      	ldr	r2, [pc, #276]	; (8005130 <HAL_ADC_MspInit+0x2ac>)
 800501a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005022:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005028:	4b40      	ldr	r3, [pc, #256]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 800502a:	2200      	movs	r2, #0
 800502c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800502e:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005034:	4b3d      	ldr	r3, [pc, #244]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800503a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800503c:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 800503e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005042:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800504a:	4b38      	ldr	r3, [pc, #224]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 800504c:	2200      	movs	r2, #0
 800504e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005050:	4836      	ldr	r0, [pc, #216]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005052:	f003 f905 	bl	8008260 <HAL_DMA_Init>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 800505c:	f7ff fece 	bl	8004dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a32      	ldr	r2, [pc, #200]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
 8005066:	4a31      	ldr	r2, [pc, #196]	; (800512c <HAL_ADC_MspInit+0x2a8>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800506c:	e04b      	b.n	8005106 <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC5)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_ADC_MspInit+0x2b0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d146      	bne.n	8005106 <HAL_ADC_MspInit+0x282>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800507c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800507e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005082:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005084:	f107 0320 	add.w	r3, r7, #32
 8005088:	4618      	mov	r0, r3
 800508a:	f006 fb01 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 8005094:	f7ff feb2 	bl	8004dfc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8005098:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <HAL_ADC_MspInit+0x290>)
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <HAL_ADC_MspInit+0x290>)
 800509e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050a4:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_ADC_MspInit+0x290>)
 80050a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 80050b0:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050b2:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_ADC_MspInit+0x2b8>)
 80050b4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050b8:	2227      	movs	r2, #39	; 0x27
 80050ba:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d4:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050dc:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80050ea:	4813      	ldr	r0, [pc, #76]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050ec:	f003 f8b8 	bl	8008260 <HAL_DMA_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_ADC_MspInit+0x276>
      Error_Handler();
 80050f6:	f7ff fe81 	bl	8004dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_ADC_MspInit+0x2b4>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005106:	bf00      	nop
 8005108:	3788      	adds	r7, #136	; 0x88
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000a48 	.word	0x20000a48
 8005114:	40021000 	.word	0x40021000
 8005118:	48000400 	.word	0x48000400
 800511c:	20000868 	.word	0x20000868
 8005120:	4002001c 	.word	0x4002001c
 8005124:	08016628 	.word	0x08016628
 8005128:	50000100 	.word	0x50000100
 800512c:	200008c8 	.word	0x200008c8
 8005130:	40020030 	.word	0x40020030
 8005134:	50000600 	.word	0x50000600
 8005138:	20000928 	.word	0x20000928
 800513c:	40020044 	.word	0x40020044

08005140 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005148:	f107 031c 	add.w	r3, r7, #28
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <HAL_COMP_MspInit+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d119      	bne.n	8005196 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005162:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_COMP_MspInit+0x118>)
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <HAL_COMP_MspInit+0x118>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800516e:	4b3a      	ldr	r3, [pc, #232]	; (8005258 <HAL_COMP_MspInit+0x118>)
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800517e:	2303      	movs	r3, #3
 8005180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005186:	f107 031c 	add.w	r3, r7, #28
 800518a:	4619      	mov	r1, r3
 800518c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005190:	f003 fb98 	bl	80088c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8005194:	e05a      	b.n	800524c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a30      	ldr	r2, [pc, #192]	; (800525c <HAL_COMP_MspInit+0x11c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d118      	bne.n	80051d2 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a0:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051a6:	f043 0302 	orr.w	r3, r3, #2
 80051aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 80051b8:	2301      	movs	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051bc:	2303      	movs	r3, #3
 80051be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 80051c4:	f107 031c 	add.w	r3, r7, #28
 80051c8:	4619      	mov	r1, r3
 80051ca:	4825      	ldr	r0, [pc, #148]	; (8005260 <HAL_COMP_MspInit+0x120>)
 80051cc:	f003 fb7a 	bl	80088c4 <HAL_GPIO_Init>
}
 80051d0:	e03c      	b.n	800524c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a23      	ldr	r2, [pc, #140]	; (8005264 <HAL_COMP_MspInit+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d119      	bne.n	8005210 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_COMP_MspInit+0x118>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 80051f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051fa:	2303      	movs	r3, #3
 80051fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8005202:	f107 031c 	add.w	r3, r7, #28
 8005206:	4619      	mov	r1, r3
 8005208:	4815      	ldr	r0, [pc, #84]	; (8005260 <HAL_COMP_MspInit+0x120>)
 800520a:	f003 fb5b 	bl	80088c4 <HAL_GPIO_Init>
}
 800520e:	e01d      	b.n	800524c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a14      	ldr	r2, [pc, #80]	; (8005268 <HAL_COMP_MspInit+0x128>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d118      	bne.n	800524c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <HAL_COMP_MspInit+0x118>)
 800521c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <HAL_COMP_MspInit+0x118>)
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_COMP_MspInit+0x118>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8005232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005238:	2303      	movs	r3, #3
 800523a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8005240:	f107 031c 	add.w	r3, r7, #28
 8005244:	4619      	mov	r1, r3
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <HAL_COMP_MspInit+0x120>)
 8005248:	f003 fb3c 	bl	80088c4 <HAL_GPIO_Init>
}
 800524c:	bf00      	nop
 800524e:	3730      	adds	r7, #48	; 0x30
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40010204 	.word	0x40010204
 8005258:	40021000 	.word	0x40021000
 800525c:	4001020c 	.word	0x4001020c
 8005260:	48000400 	.word	0x48000400
 8005264:	40010210 	.word	0x40010210
 8005268:	40010218 	.word	0x40010218

0800526c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a25      	ldr	r2, [pc, #148]	; (8005310 <HAL_DAC_MspInit+0xa4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10c      	bne.n	8005298 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800527e:	4b25      	ldr	r3, [pc, #148]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	4a24      	ldr	r2, [pc, #144]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800528a:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8005296:	e034      	b.n	8005302 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_DAC_MspInit+0xac>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ae:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
}
 80052ba:	e022      	b.n	8005302 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a16      	ldr	r2, [pc, #88]	; (800531c <HAL_DAC_MspInit+0xb0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	e010      	b.n	8005302 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <HAL_DAC_MspInit+0xb4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10b      	bne.n	8005302 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <HAL_DAC_MspInit+0xa8>)
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	50000800 	.word	0x50000800
 8005314:	40021000 	.word	0x40021000
 8005318:	50000c00 	.word	0x50000c00
 800531c:	50001000 	.word	0x50001000
 8005320:	50001400 	.word	0x50001400

08005324 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532c:	f107 031c 	add.w	r3, r7, #28
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a4d      	ldr	r2, [pc, #308]	; (8005478 <HAL_OPAMP_MspInit+0x154>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d119      	bne.n	800537a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005346:	4b4d      	ldr	r3, [pc, #308]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534a:	4a4c      	ldr	r2, [pc, #304]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005352:	4b4a      	ldr	r3, [pc, #296]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 800535e:	230a      	movs	r3, #10
 8005360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005362:	2303      	movs	r3, #3
 8005364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536a:	f107 031c 	add.w	r3, r7, #28
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005374:	f003 faa6 	bl	80088c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8005378:	e079      	b.n	800546e <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a40      	ldr	r2, [pc, #256]	; (8005480 <HAL_OPAMP_MspInit+0x15c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d119      	bne.n	80053b8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005384:	4b3d      	ldr	r3, [pc, #244]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	4a3c      	ldr	r2, [pc, #240]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005390:	4b3a      	ldr	r3, [pc, #232]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800539c:	23a0      	movs	r3, #160	; 0xa0
 800539e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053a0:	2303      	movs	r3, #3
 80053a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a8:	f107 031c 	add.w	r3, r7, #28
 80053ac:	4619      	mov	r1, r3
 80053ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053b2:	f003 fa87 	bl	80088c4 <HAL_GPIO_Init>
}
 80053b6:	e05a      	b.n	800546e <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a31      	ldr	r2, [pc, #196]	; (8005484 <HAL_OPAMP_MspInit+0x160>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d118      	bne.n	80053f4 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c2:	4b2e      	ldr	r3, [pc, #184]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	4a2d      	ldr	r2, [pc, #180]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 80053c8:	f043 0302 	orr.w	r3, r3, #2
 80053cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 80053da:	2305      	movs	r3, #5
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053de:	2303      	movs	r3, #3
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	4619      	mov	r1, r3
 80053ec:	4826      	ldr	r0, [pc, #152]	; (8005488 <HAL_OPAMP_MspInit+0x164>)
 80053ee:	f003 fa69 	bl	80088c4 <HAL_GPIO_Init>
}
 80053f2:	e03c      	b.n	800546e <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <HAL_OPAMP_MspInit+0x168>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d119      	bne.n	8005432 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fe:	4b1f      	ldr	r3, [pc, #124]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800540a:	4b1c      	ldr	r3, [pc, #112]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8005416:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800541a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800541c:	2303      	movs	r3, #3
 800541e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005424:	f107 031c 	add.w	r3, r7, #28
 8005428:	4619      	mov	r1, r3
 800542a:	4817      	ldr	r0, [pc, #92]	; (8005488 <HAL_OPAMP_MspInit+0x164>)
 800542c:	f003 fa4a 	bl	80088c4 <HAL_GPIO_Init>
}
 8005430:	e01d      	b.n	800546e <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_OPAMP_MspInit+0x16c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d118      	bne.n	800546e <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	4a0e      	ldr	r2, [pc, #56]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <HAL_OPAMP_MspInit+0x158>)
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8005454:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800545a:	2303      	movs	r3, #3
 800545c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005462:	f107 031c 	add.w	r3, r7, #28
 8005466:	4619      	mov	r1, r3
 8005468:	4807      	ldr	r0, [pc, #28]	; (8005488 <HAL_OPAMP_MspInit+0x164>)
 800546a:	f003 fa2b 	bl	80088c4 <HAL_GPIO_Init>
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010300 	.word	0x40010300
 800547c:	40021000 	.word	0x40021000
 8005480:	40010304 	.word	0x40010304
 8005484:	40010308 	.word	0x40010308
 8005488:	48000400 	.word	0x48000400
 800548c:	4001030c 	.word	0x4001030c
 8005490:	40010310 	.word	0x40010310

08005494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	; 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a37      	ldr	r2, [pc, #220]	; (8005580 <HAL_TIM_Base_MspInit+0xec>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054a6:	4b37      	ldr	r3, [pc, #220]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054aa:	4a36      	ldr	r2, [pc, #216]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054b0:	6613      	str	r3, [r2, #96]	; 0x60
 80054b2:	4b34      	ldr	r3, [pc, #208]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80054be:	e058      	b.n	8005572 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d10c      	bne.n	80054e4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ca:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
 80054d6:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]
}
 80054e2:	e046      	b.n	8005572 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <HAL_TIM_Base_MspInit+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10c      	bne.n	8005508 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	6593      	str	r3, [r2, #88]	; 0x58
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697b      	ldr	r3, [r7, #20]
}
 8005506:	e034      	b.n	8005572 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <HAL_TIM_Base_MspInit+0xf8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800551c:	6613      	str	r3, [r2, #96]	; 0x60
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	693b      	ldr	r3, [r7, #16]
}
 800552a:	e022      	b.n	8005572 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIM_Base_MspInit+0xfc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	4a12      	ldr	r2, [pc, #72]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 800553c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005540:	6613      	str	r3, [r2, #96]	; 0x60
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
}
 800554e:	e010      	b.n	8005572 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_TIM_Base_MspInit+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10b      	bne.n	8005572 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005564:	6613      	str	r3, [r2, #96]	; 0x60
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <HAL_TIM_Base_MspInit+0xf0>)
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
}
 8005572:	bf00      	nop
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40021000 	.word	0x40021000
 8005588:	40000800 	.word	0x40000800
 800558c:	40013400 	.word	0x40013400
 8005590:	40014400 	.word	0x40014400
 8005594:	40015000 	.word	0x40015000

08005598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <HAL_TIM_PWM_MspInit+0x38>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10b      	bne.n	80055c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40021000 	.word	0x40021000

080055d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a65      	ldr	r2, [pc, #404]	; (800578c <HAL_TIM_MspPostInit+0x1b4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d11c      	bne.n	8005634 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80055fa:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	4a64      	ldr	r2, [pc, #400]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005606:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005616:	2302      	movs	r3, #2
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561e:	2300      	movs	r3, #0
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005622:	2306      	movs	r3, #6
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8005626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562a:	4619      	mov	r1, r3
 800562c:	4859      	ldr	r0, [pc, #356]	; (8005794 <HAL_TIM_MspPostInit+0x1bc>)
 800562e:	f003 f949 	bl	80088c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005632:	e0a6      	b.n	8005782 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a57      	ldr	r2, [pc, #348]	; (8005798 <HAL_TIM_MspPostInit+0x1c0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d11c      	bne.n	8005678 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563e:	4b54      	ldr	r3, [pc, #336]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	4a53      	ldr	r2, [pc, #332]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 8005656:	2330      	movs	r3, #48	; 0x30
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	2300      	movs	r3, #0
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005666:	2302      	movs	r3, #2
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800566a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566e:	4619      	mov	r1, r3
 8005670:	484a      	ldr	r0, [pc, #296]	; (800579c <HAL_TIM_MspPostInit+0x1c4>)
 8005672:	f003 f927 	bl	80088c4 <HAL_GPIO_Init>
}
 8005676:	e084      	b.n	8005782 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a48      	ldr	r2, [pc, #288]	; (80057a0 <HAL_TIM_MspPostInit+0x1c8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d11d      	bne.n	80056be <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005682:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005688:	f043 0302 	orr.w	r3, r3, #2
 800568c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 800569a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a0:	2302      	movs	r3, #2
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a8:	2300      	movs	r3, #0
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80056ac:	2302      	movs	r3, #2
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b4:	4619      	mov	r1, r3
 80056b6:	4839      	ldr	r0, [pc, #228]	; (800579c <HAL_TIM_MspPostInit+0x1c4>)
 80056b8:	f003 f904 	bl	80088c4 <HAL_GPIO_Init>
}
 80056bc:	e061      	b.n	8005782 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a38      	ldr	r2, [pc, #224]	; (80057a4 <HAL_TIM_MspPostInit+0x1cc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d13a      	bne.n	800573e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c8:	4b31      	ldr	r3, [pc, #196]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	4a30      	ldr	r2, [pc, #192]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056d4:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056e6:	f043 0302 	orr.w	r3, r3, #2
 80056ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 80056f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fe:	2302      	movs	r3, #2
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005702:	2300      	movs	r3, #0
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005706:	2300      	movs	r3, #0
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 800570a:	2306      	movs	r3, #6
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 800570e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005712:	4619      	mov	r1, r3
 8005714:	4824      	ldr	r0, [pc, #144]	; (80057a8 <HAL_TIM_MspPostInit+0x1d0>)
 8005716:	f003 f8d5 	bl	80088c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 800571a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005720:	2302      	movs	r3, #2
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	2300      	movs	r3, #0
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800572c:	230a      	movs	r3, #10
 800572e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8005730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005734:	4619      	mov	r1, r3
 8005736:	4819      	ldr	r0, [pc, #100]	; (800579c <HAL_TIM_MspPostInit+0x1c4>)
 8005738:	f003 f8c4 	bl	80088c4 <HAL_GPIO_Init>
}
 800573c:	e021      	b.n	8005782 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_TIM_MspPostInit+0x1d4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d11c      	bne.n	8005782 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	4a10      	ldr	r2, [pc, #64]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_TIM_MspPostInit+0x1b8>)
 8005756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005764:	2302      	movs	r3, #2
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005768:	2300      	movs	r3, #0
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576c:	2300      	movs	r3, #0
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8005770:	2301      	movs	r3, #1
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8005774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005778:	4619      	mov	r1, r3
 800577a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800577e:	f003 f8a1 	bl	80088c4 <HAL_GPIO_Init>
}
 8005782:	bf00      	nop
 8005784:	3738      	adds	r7, #56	; 0x38
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40021000 	.word	0x40021000
 8005794:	48001400 	.word	0x48001400
 8005798:	40000400 	.word	0x40000400
 800579c:	48000400 	.word	0x48000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40013400 	.word	0x40013400
 80057a8:	48000800 	.word	0x48000800
 80057ac:	40014400 	.word	0x40014400

080057b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0a2      	sub	sp, #136	; 0x88
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057c8:	f107 0320 	add.w	r3, r7, #32
 80057cc:	2254      	movs	r2, #84	; 0x54
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f00d fe11 	bl	80133f8 <memset>
  if(huart->Instance==USART1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a81      	ldr	r2, [pc, #516]	; (80059e0 <HAL_UART_MspInit+0x230>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	f040 808a 	bne.w	80058f6 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057ea:	f107 0320 	add.w	r3, r7, #32
 80057ee:	4618      	mov	r0, r3
 80057f0:	f005 ff4e 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80057fa:	f7ff faff 	bl	8004dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057fe:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	4a78      	ldr	r2, [pc, #480]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005808:	6613      	str	r3, [r2, #96]	; 0x60
 800580a:	4b76      	ldr	r3, [pc, #472]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005816:	4b73      	ldr	r3, [pc, #460]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	4a72      	ldr	r2, [pc, #456]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005822:	4b70      	ldr	r3, [pc, #448]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582e:	4b6d      	ldr	r3, [pc, #436]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	4a6c      	ldr	r2, [pc, #432]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800584a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584c:	2302      	movs	r3, #2
 800584e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800585a:	2307      	movs	r3, #7
 800585c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005860:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005864:	4619      	mov	r1, r3
 8005866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800586a:	f003 f82b 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005872:	2302      	movs	r3, #2
 8005874:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005876:	2300      	movs	r3, #0
 8005878:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005880:	2307      	movs	r3, #7
 8005882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005886:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800588a:	4619      	mov	r1, r3
 800588c:	4856      	ldr	r0, [pc, #344]	; (80059e8 <HAL_UART_MspInit+0x238>)
 800588e:	f003 f819 	bl	80088c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005892:	4b56      	ldr	r3, [pc, #344]	; (80059ec <HAL_UART_MspInit+0x23c>)
 8005894:	4a56      	ldr	r2, [pc, #344]	; (80059f0 <HAL_UART_MspInit+0x240>)
 8005896:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005898:	4b54      	ldr	r3, [pc, #336]	; (80059ec <HAL_UART_MspInit+0x23c>)
 800589a:	2218      	movs	r2, #24
 800589c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800589e:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058a4:	4b51      	ldr	r3, [pc, #324]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058aa:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058b0:	4b4e      	ldr	r3, [pc, #312]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058b6:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80058bc:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058be:	2220      	movs	r2, #32
 80058c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058c2:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80058c8:	4848      	ldr	r0, [pc, #288]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058ca:	f002 fcc9 	bl	8008260 <HAL_DMA_Init>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80058d4:	f7ff fa92 	bl	8004dfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a44      	ldr	r2, [pc, #272]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80058de:	4a43      	ldr	r2, [pc, #268]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80058e4:	2200      	movs	r2, #0
 80058e6:	2100      	movs	r1, #0
 80058e8:	2025      	movs	r0, #37	; 0x25
 80058ea:	f002 faba 	bl	8007e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058ee:	2025      	movs	r0, #37	; 0x25
 80058f0:	f002 fad1 	bl	8007e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80058f4:	e06f      	b.n	80059d6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <HAL_UART_MspInit+0x244>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d16a      	bne.n	80059d6 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005900:	2302      	movs	r3, #2
 8005902:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005904:	2300      	movs	r3, #0
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005908:	f107 0320 	add.w	r3, r7, #32
 800590c:	4618      	mov	r0, r3
 800590e:	f005 febf 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8005918:	f7ff fa70 	bl	8004dfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800591c:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005926:	6593      	str	r3, [r2, #88]	; 0x58
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005938:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <HAL_UART_MspInit+0x234>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005940:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <HAL_UART_MspInit+0x234>)
 8005942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800594c:	f248 0304 	movw	r3, #32772	; 0x8004
 8005950:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005952:	2302      	movs	r3, #2
 8005954:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005960:	2307      	movs	r3, #7
 8005962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005966:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800596a:	4619      	mov	r1, r3
 800596c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005970:	f002 ffa8 	bl	80088c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8005974:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_UART_MspInit+0x248>)
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <HAL_UART_MspInit+0x24c>)
 8005978:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <HAL_UART_MspInit+0x248>)
 800597c:	221a      	movs	r2, #26
 800597e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005980:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_UART_MspInit+0x248>)
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005986:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <HAL_UART_MspInit+0x248>)
 8005988:	2200      	movs	r2, #0
 800598a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <HAL_UART_MspInit+0x248>)
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005992:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_UART_MspInit+0x248>)
 8005994:	2200      	movs	r2, #0
 8005996:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_UART_MspInit+0x248>)
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <HAL_UART_MspInit+0x248>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059a4:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <HAL_UART_MspInit+0x248>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80059aa:	4813      	ldr	r0, [pc, #76]	; (80059f8 <HAL_UART_MspInit+0x248>)
 80059ac:	f002 fc58 	bl	8008260 <HAL_DMA_Init>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80059b6:	f7ff fa21 	bl	8004dfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <HAL_UART_MspInit+0x248>)
 80059be:	67da      	str	r2, [r3, #124]	; 0x7c
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <HAL_UART_MspInit+0x248>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059c6:	2200      	movs	r2, #0
 80059c8:	2100      	movs	r1, #0
 80059ca:	2026      	movs	r0, #38	; 0x26
 80059cc:	f002 fa49 	bl	8007e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059d0:	2026      	movs	r0, #38	; 0x26
 80059d2:	f002 fa60 	bl	8007e96 <HAL_NVIC_EnableIRQ>
}
 80059d6:	bf00      	nop
 80059d8:	3788      	adds	r7, #136	; 0x88
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	48000400 	.word	0x48000400
 80059ec:	20000988 	.word	0x20000988
 80059f0:	40020008 	.word	0x40020008
 80059f4:	40004400 	.word	0x40004400
 80059f8:	200009e8 	.word	0x200009e8
 80059fc:	40020408 	.word	0x40020408

08005a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a04:	e7fe      	b.n	8005a04 <NMI_Handler+0x4>

08005a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a06:	b480      	push	{r7}
 8005a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a0a:	e7fe      	b.n	8005a0a <HardFault_Handler+0x4>

08005a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a10:	e7fe      	b.n	8005a10 <MemManage_Handler+0x4>

08005a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a12:	b480      	push	{r7}
 8005a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a16:	e7fe      	b.n	8005a16 <BusFault_Handler+0x4>

08005a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a1c:	e7fe      	b.n	8005a1c <UsageFault_Handler+0x4>

08005a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a4c:	f000 f9b6 	bl	8005dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005a58:	4802      	ldr	r0, [pc, #8]	; (8005a64 <DMA1_Channel1_IRQHandler+0x10>)
 8005a5a:	f002 fde4 	bl	8008626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000988 	.word	0x20000988

08005a68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a6c:	4802      	ldr	r0, [pc, #8]	; (8005a78 <DMA1_Channel2_IRQHandler+0x10>)
 8005a6e:	f002 fdda 	bl	8008626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000868 	.word	0x20000868

08005a7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005a80:	4802      	ldr	r0, [pc, #8]	; (8005a8c <DMA1_Channel3_IRQHandler+0x10>)
 8005a82:	f002 fdd0 	bl	8008626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200008c8 	.word	0x200008c8

08005a90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005a94:	4802      	ldr	r0, [pc, #8]	; (8005aa0 <DMA1_Channel4_IRQHandler+0x10>)
 8005a96:	f002 fdc6 	bl	8008626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000928 	.word	0x20000928

08005aa4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005aa8:	4802      	ldr	r0, [pc, #8]	; (8005ab4 <USB_LP_IRQHandler+0x10>)
 8005aaa:	f003 fbec 	bl	8009286 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20001f6c 	.word	0x20001f6c

08005ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005abc:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <USART1_IRQHandler+0x10>)
 8005abe:	f007 fbc9 	bl	800d254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000748 	.word	0x20000748

08005acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ad0:	4802      	ldr	r0, [pc, #8]	; (8005adc <USART2_IRQHandler+0x10>)
 8005ad2:	f007 fbbf 	bl	800d254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200007d8 	.word	0x200007d8

08005ae0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005ae4:	4802      	ldr	r0, [pc, #8]	; (8005af0 <DMA2_Channel1_IRQHandler+0x10>)
 8005ae6:	f002 fd9e 	bl	8008626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200009e8 	.word	0x200009e8

08005af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return 1;
 8005af8:	2301      	movs	r3, #1
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_kill>:

int _kill(int pid, int sig)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b0e:	f00d fc3b 	bl	8013388 <__errno>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2216      	movs	r2, #22
 8005b16:	601a      	str	r2, [r3, #0]
  return -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_exit>:

void _exit (int status)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ffe7 	bl	8005b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b36:	e7fe      	b.n	8005b36 <_exit+0x12>

08005b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e00a      	b.n	8005b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b4a:	f3af 8000 	nop.w
 8005b4e:	4601      	mov	r1, r0
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	60ba      	str	r2, [r7, #8]
 8005b56:	b2ca      	uxtb	r2, r1
 8005b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	dbf0      	blt.n	8005b4a <_read+0x12>
  }

  return len;
 8005b68:	687b      	ldr	r3, [r7, #4]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d002      	beq.n	8005b8a <_write+0x18>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d115      	bne.n	8005bb6 <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f00c ff59 	bl	8012a44 <CDC_Transmit_FS>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d0f6      	beq.n	8005b8a <_write+0x18>
		        if (result != USBD_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <_write+0x40>
		        {
		            errno = EIO;
 8005ba2:	f00d fbf1 	bl	8013388 <__errno>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2205      	movs	r2, #5
 8005baa:	601a      	str	r2, [r3, #0]
		            return -1;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	e008      	b.n	8005bc4 <_write+0x52>
		        }
		        return len;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	e006      	b.n	8005bc4 <_write+0x52>
		    }
		    errno = EBADF;
 8005bb6:	f00d fbe7 	bl	8013388 <__errno>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2209      	movs	r2, #9
 8005bbe:	601a      	str	r2, [r3, #0]
		    return -1;
 8005bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_close>:

int _close(int file)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bf4:	605a      	str	r2, [r3, #4]
  return 0;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <_isatty>:

int _isatty(int file)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c0c:	2301      	movs	r3, #1
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c3c:	4a14      	ldr	r2, [pc, #80]	; (8005c90 <_sbrk+0x5c>)
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <_sbrk+0x60>)
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <_sbrk+0x64>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <_sbrk+0x64>)
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <_sbrk+0x68>)
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <_sbrk+0x64>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d207      	bcs.n	8005c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c64:	f00d fb90 	bl	8013388 <__errno>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	220c      	movs	r2, #12
 8005c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e009      	b.n	8005c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <_sbrk+0x64>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <_sbrk+0x64>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <_sbrk+0x64>)
 8005c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20020000 	.word	0x20020000
 8005c94:	00000400 	.word	0x00000400
 8005c98:	20000a4c 	.word	0x20000a4c
 8005c9c:	20002490 	.word	0x20002490

08005ca0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <SystemInit+0x20>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	4a05      	ldr	r2, [pc, #20]	; (8005cc0 <SystemInit+0x20>)
 8005cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cc4:	480d      	ldr	r0, [pc, #52]	; (8005cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cc8:	480d      	ldr	r0, [pc, #52]	; (8005d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cca:	490e      	ldr	r1, [pc, #56]	; (8005d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <LoopForever+0xe>)
  movs r3, #0
 8005cce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005cd0:	e002      	b.n	8005cd8 <LoopCopyDataInit>

08005cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cd6:	3304      	adds	r3, #4

08005cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cdc:	d3f9      	bcc.n	8005cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cde:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ce0:	4c0b      	ldr	r4, [pc, #44]	; (8005d10 <LoopForever+0x16>)
  movs r3, #0
 8005ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce4:	e001      	b.n	8005cea <LoopFillZerobss>

08005ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ce8:	3204      	adds	r2, #4

08005cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cec:	d3fb      	bcc.n	8005ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005cee:	f7ff ffd7 	bl	8005ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cf2:	f00d fb4f 	bl	8013394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005cf6:	f7fe fff5 	bl	8004ce4 <main>

08005cfa <LoopForever>:

LoopForever:
    b LoopForever
 8005cfa:	e7fe      	b.n	8005cfa <LoopForever>
  ldr   r0, =_estack
 8005cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d04:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8005d08:	08016bb4 	.word	0x08016bb4
  ldr r2, =_sbss
 8005d0c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8005d10:	20002490 	.word	0x20002490

08005d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d14:	e7fe      	b.n	8005d14 <ADC1_2_IRQHandler>

08005d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d20:	2003      	movs	r0, #3
 8005d22:	f002 f893 	bl	8007e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d26:	200f      	movs	r0, #15
 8005d28:	f000 f80e 	bl	8005d48 <HAL_InitTick>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	71fb      	strb	r3, [r7, #7]
 8005d36:	e001      	b.n	8005d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d38:	f7ff f880 	bl	8004e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d3c:	79fb      	ldrb	r3, [r7, #7]

}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <HAL_InitTick+0x68>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d022      	beq.n	8005da2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d5c:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_InitTick+0x6c>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <HAL_InitTick+0x68>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 f89e 	bl	8007eb2 <HAL_SYSTICK_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10f      	bne.n	8005d9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d809      	bhi.n	8005d96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d82:	2200      	movs	r2, #0
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8a:	f002 f86a 	bl	8007e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d8e:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <HAL_InitTick+0x70>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e007      	b.n	8005da6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	e004      	b.n	8005da6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	e001      	b.n	8005da6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000008 	.word	0x20000008
 8005db4:	20000000 	.word	0x20000000
 8005db8:	20000004 	.word	0x20000004

08005dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_IncTick+0x1c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_IncTick+0x20>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	4a03      	ldr	r2, [pc, #12]	; (8005dd8 <HAL_IncTick+0x1c>)
 8005dcc:	6013      	str	r3, [r2, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000a50 	.word	0x20000a50
 8005ddc:	20000008 	.word	0x20000008

08005de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return uwTick;
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HAL_GetTick+0x14>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000a50 	.word	0x20000a50

08005df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e00:	f7ff ffee 	bl	8005de0 <HAL_GetTick>
 8005e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d004      	beq.n	8005e1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_Delay+0x40>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e1c:	bf00      	nop
 8005e1e:	f7ff ffdf 	bl	8005de0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d8f7      	bhi.n	8005e1e <HAL_Delay+0x26>
  {
  }
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000008 	.word	0x20000008

08005e3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3360      	adds	r3, #96	; 0x60
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <LL_ADC_SetOffset+0x44>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	03fff000 	.word	0x03fff000

08005eec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3360      	adds	r3, #96	; 0x60
 8005efa:	461a      	mov	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3360      	adds	r3, #96	; 0x60
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3360      	adds	r3, #96	; 0x60
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3360      	adds	r3, #96	; 0x60
 8005f94:	461a      	mov	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	615a      	str	r2, [r3, #20]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3330      	adds	r3, #48	; 0x30
 8006016:	461a      	mov	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	4413      	add	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	211f      	movs	r1, #31
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	401a      	ands	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0e9b      	lsrs	r3, r3, #26
 800603e:	f003 011f 	and.w	r1, r3, #31
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	431a      	orrs	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3314      	adds	r3, #20
 800606e:	461a      	mov	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0e5b      	lsrs	r3, r3, #25
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	4413      	add	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	0d1b      	lsrs	r3, r3, #20
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2107      	movs	r1, #7
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	401a      	ands	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	0d1b      	lsrs	r3, r3, #20
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	431a      	orrs	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10a      	bne.n	80060de <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80060dc:	e00a      	b.n	80060f4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ea:	43db      	mvns	r3, r3
 80060ec:	401a      	ands	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	407f0000 	.word	0x407f0000

08006104 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 031f 	and.w	r3, r3, #31
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6093      	str	r3, [r2, #8]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006158:	d101      	bne.n	800615e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800617c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a8:	d101      	bne.n	80061ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061d0:	f043 0201 	orr.w	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061f8:	f043 0202 	orr.w	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <LL_ADC_IsEnabled+0x18>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <LL_ADC_IsEnabled+0x1a>
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b02      	cmp	r3, #2
 8006244:	d101      	bne.n	800624a <LL_ADC_IsDisableOngoing+0x18>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <LL_ADC_IsDisableOngoing+0x1a>
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d101      	bne.n	8006298 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d101      	bne.n	80062be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80062d8:	2300      	movs	r3, #0
 80062da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e1af      	b.n	8006646 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fe fdc5 	bl	8004e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff19 	bl	8006144 <LL_ADC_IsDeepPowerDownEnabled>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff feff 	bl	8006120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff34 	bl	8006194 <LL_ADC_IsInternalRegulatorEnabled>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d115      	bne.n	800635e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff ff18 	bl	800616c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800633c:	4b9f      	ldr	r3, [pc, #636]	; (80065bc <HAL_ADC_Init+0x2f0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	099b      	lsrs	r3, r3, #6
 8006342:	4a9f      	ldr	r2, [pc, #636]	; (80065c0 <HAL_ADC_Init+0x2f4>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	099b      	lsrs	r3, r3, #6
 800634a:	3301      	adds	r3, #1
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006350:	e002      	b.n	8006358 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3b01      	subs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f9      	bne.n	8006352 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ff16 	bl	8006194 <LL_ADC_IsInternalRegulatorEnabled>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	f043 0210 	orr.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637e:	f043 0201 	orr.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff ff76 	bl	8006280 <LL_ADC_REG_IsConversionOngoing>
 8006394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 8148 	bne.w	8006634 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 8144 	bne.w	8006634 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80063b4:	f043 0202 	orr.w	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff ff23 	bl	800620c <LL_ADC_IsEnabled>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d141      	bne.n	8006450 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d4:	d004      	beq.n	80063e0 <HAL_ADC_Init+0x114>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a7a      	ldr	r2, [pc, #488]	; (80065c4 <HAL_ADC_Init+0x2f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10f      	bne.n	8006400 <HAL_ADC_Init+0x134>
 80063e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80063e4:	f7ff ff12 	bl	800620c <LL_ADC_IsEnabled>
 80063e8:	4604      	mov	r4, r0
 80063ea:	4876      	ldr	r0, [pc, #472]	; (80065c4 <HAL_ADC_Init+0x2f8>)
 80063ec:	f7ff ff0e 	bl	800620c <LL_ADC_IsEnabled>
 80063f0:	4603      	mov	r3, r0
 80063f2:	4323      	orrs	r3, r4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e012      	b.n	8006426 <HAL_ADC_Init+0x15a>
 8006400:	4871      	ldr	r0, [pc, #452]	; (80065c8 <HAL_ADC_Init+0x2fc>)
 8006402:	f7ff ff03 	bl	800620c <LL_ADC_IsEnabled>
 8006406:	4604      	mov	r4, r0
 8006408:	4870      	ldr	r0, [pc, #448]	; (80065cc <HAL_ADC_Init+0x300>)
 800640a:	f7ff feff 	bl	800620c <LL_ADC_IsEnabled>
 800640e:	4603      	mov	r3, r0
 8006410:	431c      	orrs	r4, r3
 8006412:	486f      	ldr	r0, [pc, #444]	; (80065d0 <HAL_ADC_Init+0x304>)
 8006414:	f7ff fefa 	bl	800620c <LL_ADC_IsEnabled>
 8006418:	4603      	mov	r3, r0
 800641a:	4323      	orrs	r3, r4
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d012      	beq.n	8006450 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006432:	d004      	beq.n	800643e <HAL_ADC_Init+0x172>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a62      	ldr	r2, [pc, #392]	; (80065c4 <HAL_ADC_Init+0x2f8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d101      	bne.n	8006442 <HAL_ADC_Init+0x176>
 800643e:	4a65      	ldr	r2, [pc, #404]	; (80065d4 <HAL_ADC_Init+0x308>)
 8006440:	e000      	b.n	8006444 <HAL_ADC_Init+0x178>
 8006442:	4a65      	ldr	r2, [pc, #404]	; (80065d8 <HAL_ADC_Init+0x30c>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f7ff fcf6 	bl	8005e3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7f5b      	ldrb	r3, [r3, #29]
 8006454:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800645a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006460:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006466:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800646e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800647a:	2b01      	cmp	r3, #1
 800647c:	d106      	bne.n	800648c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	045b      	lsls	r3, r3, #17
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	4b4b      	ldr	r3, [pc, #300]	; (80065dc <HAL_ADC_Init+0x310>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	69b9      	ldr	r1, [r7, #24]
 80064b8:	430b      	orrs	r3, r1
 80064ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fed2 	bl	8006280 <LL_ADC_REG_IsConversionOngoing>
 80064dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fedf 	bl	80062a6 <LL_ADC_INJ_IsConversionOngoing>
 80064e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d17f      	bne.n	80065f0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d17c      	bne.n	80065f0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80064fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006502:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006512:	f023 0302 	bic.w	r3, r3, #2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	69b9      	ldr	r1, [r7, #24]
 800651c:	430b      	orrs	r3, r1
 800651e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d017      	beq.n	8006558 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006536:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006540:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6911      	ldr	r1, [r2, #16]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	430b      	orrs	r3, r1
 8006552:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006556:	e013      	b.n	8006580 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006566:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800657c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006586:	2b01      	cmp	r3, #1
 8006588:	d12a      	bne.n	80065e0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80065a6:	4311      	orrs	r1, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065ac:	430a      	orrs	r2, r1
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	611a      	str	r2, [r3, #16]
 80065ba:	e019      	b.n	80065f0 <HAL_ADC_Init+0x324>
 80065bc:	20000000 	.word	0x20000000
 80065c0:	053e2d63 	.word	0x053e2d63
 80065c4:	50000100 	.word	0x50000100
 80065c8:	50000400 	.word	0x50000400
 80065cc:	50000500 	.word	0x50000500
 80065d0:	50000600 	.word	0x50000600
 80065d4:	50000300 	.word	0x50000300
 80065d8:	50000700 	.word	0x50000700
 80065dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10c      	bne.n	8006612 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	f023 010f 	bic.w	r1, r3, #15
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	1e5a      	subs	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
 8006610:	e007      	b.n	8006622 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 020f 	bic.w	r2, r2, #15
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	f043 0201 	orr.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	65da      	str	r2, [r3, #92]	; 0x5c
 8006632:	e007      	b.n	8006644 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006638:	f043 0210 	orr.w	r2, r3, #16
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006644:	7ffb      	ldrb	r3, [r7, #31]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3724      	adds	r7, #36	; 0x24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd90      	pop	{r4, r7, pc}
 800664e:	bf00      	nop

08006650 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006664:	d004      	beq.n	8006670 <HAL_ADC_Start_DMA+0x20>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5a      	ldr	r2, [pc, #360]	; (80067d4 <HAL_ADC_Start_DMA+0x184>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d101      	bne.n	8006674 <HAL_ADC_Start_DMA+0x24>
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_ADC_Start_DMA+0x188>)
 8006672:	e000      	b.n	8006676 <HAL_ADC_Start_DMA+0x26>
 8006674:	4b59      	ldr	r3, [pc, #356]	; (80067dc <HAL_ADC_Start_DMA+0x18c>)
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fd44 	bl	8006104 <LL_ADC_GetMultimode>
 800667c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fdfc 	bl	8006280 <LL_ADC_REG_IsConversionOngoing>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 809b 	bne.w	80067c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_ADC_Start_DMA+0x4e>
 800669a:	2302      	movs	r3, #2
 800669c:	e096      	b.n	80067cc <HAL_ADC_Start_DMA+0x17c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a4d      	ldr	r2, [pc, #308]	; (80067e0 <HAL_ADC_Start_DMA+0x190>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d008      	beq.n	80066c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d002      	beq.n	80066c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d17a      	bne.n	80067b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fcf6 	bl	80070b4 <ADC_Enable>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d16d      	bne.n	80067ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a3a      	ldr	r2, [pc, #232]	; (80067d4 <HAL_ADC_Start_DMA+0x184>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_ADC_Start_DMA+0xb4>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3b      	ldr	r2, [pc, #236]	; (80067e4 <HAL_ADC_Start_DMA+0x194>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d002      	beq.n	8006700 <HAL_ADC_Start_DMA+0xb0>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	e003      	b.n	8006708 <HAL_ADC_Start_DMA+0xb8>
 8006700:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <HAL_ADC_Start_DMA+0x198>)
 8006702:	e001      	b.n	8006708 <HAL_ADC_Start_DMA+0xb8>
 8006704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	4293      	cmp	r3, r2
 800670e:	d002      	beq.n	8006716 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d105      	bne.n	8006722 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	f023 0206 	bic.w	r2, r3, #6
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
 800673a:	e002      	b.n	8006742 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	4a29      	ldr	r2, [pc, #164]	; (80067ec <HAL_ADC_Start_DMA+0x19c>)
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <HAL_ADC_Start_DMA+0x1a0>)
 8006750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <HAL_ADC_Start_DMA+0x1a4>)
 8006758:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	221c      	movs	r2, #28
 8006760:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0210 	orr.w	r2, r2, #16
 8006778:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3340      	adds	r3, #64	; 0x40
 8006794:	4619      	mov	r1, r3
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f001 fe09 	bl	80083b0 <HAL_DMA_Start_IT>
 800679e:	4603      	mov	r3, r0
 80067a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fd56 	bl	8006258 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80067ac:	e00d      	b.n	80067ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80067b6:	e008      	b.n	80067ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80067c4:	e001      	b.n	80067ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
 80067c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	50000100 	.word	0x50000100
 80067d8:	50000300 	.word	0x50000300
 80067dc:	50000700 	.word	0x50000700
 80067e0:	50000600 	.word	0x50000600
 80067e4:	50000500 	.word	0x50000500
 80067e8:	50000400 	.word	0x50000400
 80067ec:	08007237 	.word	0x08007237
 80067f0:	0800730f 	.word	0x0800730f
 80067f4:	0800732b 	.word	0x0800732b

080067f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b0b6      	sub	sp, #216	; 0xd8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800684e:	2b01      	cmp	r3, #1
 8006850:	d102      	bne.n	8006858 <HAL_ADC_ConfigChannel+0x24>
 8006852:	2302      	movs	r3, #2
 8006854:	f000 bc13 	b.w	800707e <HAL_ADC_ConfigChannel+0x84a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fd0b 	bl	8006280 <LL_ADC_REG_IsConversionOngoing>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 83f3 	bne.w	8007058 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7ff fbc1 	bl	8006006 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fcf9 	bl	8006280 <LL_ADC_REG_IsConversionOngoing>
 800688e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fd05 	bl	80062a6 <LL_ADC_INJ_IsConversionOngoing>
 800689c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 81d9 	bne.w	8006c5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 81d4 	bne.w	8006c5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068bc:	d10f      	bne.n	80068de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	4619      	mov	r1, r3
 80068ca:	f7ff fbc8 	bl	800605e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fb6f 	bl	8005fba <LL_ADC_SetSamplingTimeCommonConfig>
 80068dc:	e00e      	b.n	80068fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7ff fbb7 	bl	800605e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fb5f 	bl	8005fba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	08db      	lsrs	r3, r3, #3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b04      	cmp	r3, #4
 800691c:	d022      	beq.n	8006964 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6919      	ldr	r1, [r3, #16]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800692e:	f7ff fab9 	bl	8005ea4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6919      	ldr	r1, [r3, #16]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	461a      	mov	r2, r3
 8006940:	f7ff fb05 	bl	8005f4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	6919      	ldr	r1, [r3, #16]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	7f1b      	ldrb	r3, [r3, #28]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <HAL_ADC_ConfigChannel+0x126>
 8006954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006958:	e000      	b.n	800695c <HAL_ADC_ConfigChannel+0x128>
 800695a:	2300      	movs	r3, #0
 800695c:	461a      	mov	r2, r3
 800695e:	f7ff fb11 	bl	8005f84 <LL_ADC_SetOffsetSaturation>
 8006962:	e17b      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fabe 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006970:	4603      	mov	r3, r0
 8006972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x15c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fab3 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006986:	4603      	mov	r3, r0
 8006988:	0e9b      	lsrs	r3, r3, #26
 800698a:	f003 021f 	and.w	r2, r3, #31
 800698e:	e01e      	b.n	80069ce <HAL_ADC_ConfigChannel+0x19a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff faa8 	bl	8005eec <LL_ADC_GetOffsetChannel>
 800699c:	4603      	mov	r3, r0
 800699e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069a6:	fa93 f3a3 	rbit	r3, r3
 80069aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80069be:	2320      	movs	r3, #32
 80069c0:	e004      	b.n	80069cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80069c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069c6:	fab3 f383 	clz	r3, r3
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x1b2>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	0e9b      	lsrs	r3, r3, #26
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	e018      	b.n	8006a18 <HAL_ADC_ConfigChannel+0x1e4>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069f2:	fa93 f3a3 	rbit	r3, r3
 80069f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80069fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006a0a:	2320      	movs	r3, #32
 8006a0c:	e004      	b.n	8006a18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a12:	fab3 f383 	clz	r3, r3
 8006a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d106      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fa77 	bl	8005f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fa5b 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0x222>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2101      	movs	r1, #1
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fa50 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	0e9b      	lsrs	r3, r3, #26
 8006a50:	f003 021f 	and.w	r2, r3, #31
 8006a54:	e01e      	b.n	8006a94 <HAL_ADC_ConfigChannel+0x260>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fa45 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a6c:	fa93 f3a3 	rbit	r3, r3
 8006a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006a84:	2320      	movs	r3, #32
 8006a86:	e004      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a8c:	fab3 f383 	clz	r3, r3
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x278>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0e9b      	lsrs	r3, r3, #26
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	e018      	b.n	8006ade <HAL_ADC_ConfigChannel+0x2aa>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab8:	fa93 f3a3 	rbit	r3, r3
 8006abc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	e004      	b.n	8006ade <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ad8:	fab3 f383 	clz	r3, r3
 8006adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d106      	bne.n	8006af0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fa14 	bl	8005f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2102      	movs	r1, #2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff f9f8 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x2e8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff f9ed 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006b12:	4603      	mov	r3, r0
 8006b14:	0e9b      	lsrs	r3, r3, #26
 8006b16:	f003 021f 	and.w	r2, r3, #31
 8006b1a:	e01e      	b.n	8006b5a <HAL_ADC_ConfigChannel+0x326>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2102      	movs	r1, #2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff f9e2 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b32:	fa93 f3a3 	rbit	r3, r3
 8006b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	e004      	b.n	8006b58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b52:	fab3 f383 	clz	r3, r3
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <HAL_ADC_ConfigChannel+0x33e>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	0e9b      	lsrs	r3, r3, #26
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	e016      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x36c>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006b92:	2320      	movs	r3, #32
 8006b94:	e004      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b9a:	fab3 f383 	clz	r3, r3
 8006b9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d106      	bne.n	8006bb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2102      	movs	r1, #2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff f9b3 	bl	8005f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2103      	movs	r1, #3
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f997 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <HAL_ADC_ConfigChannel+0x3aa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2103      	movs	r1, #3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff f98c 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	0e9b      	lsrs	r3, r3, #26
 8006bd8:	f003 021f 	and.w	r2, r3, #31
 8006bdc:	e017      	b.n	8006c0e <HAL_ADC_ConfigChannel+0x3da>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2103      	movs	r1, #3
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff f981 	bl	8005eec <LL_ADC_GetOffsetChannel>
 8006bea:	4603      	mov	r3, r0
 8006bec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf0:	fa93 f3a3 	rbit	r3, r3
 8006bf4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006c00:	2320      	movs	r3, #32
 8006c02:	e003      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c06:	fab3 f383 	clz	r3, r3
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <HAL_ADC_ConfigChannel+0x3f2>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	0e9b      	lsrs	r3, r3, #26
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	e011      	b.n	8006c4a <HAL_ADC_ConfigChannel+0x416>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c2e:	fa93 f3a3 	rbit	r3, r3
 8006c32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006c3e:	2320      	movs	r3, #32
 8006c40:	e003      	b.n	8006c4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	fab3 f383 	clz	r3, r3
 8006c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d106      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	2103      	movs	r1, #3
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff f95e 	bl	8005f18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fad3 	bl	800620c <LL_ADC_IsEnabled>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 813d 	bne.w	8006ee8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6819      	ldr	r1, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7ff fa1a 	bl	80060b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4aa2      	ldr	r2, [pc, #648]	; (8006f10 <HAL_ADC_ConfigChannel+0x6dc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	f040 812e 	bne.w	8006ee8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x480>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	0e9b      	lsrs	r3, r3, #26
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2b09      	cmp	r3, #9
 8006caa:	bf94      	ite	ls
 8006cac:	2301      	movls	r3, #1
 8006cae:	2300      	movhi	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	e019      	b.n	8006ce8 <HAL_ADC_ConfigChannel+0x4b4>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	fa93 f3a3 	rbit	r3, r3
 8006cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006ccc:	2320      	movs	r3, #32
 8006cce:	e003      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd2:	fab3 f383 	clz	r3, r3
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	bf94      	ite	ls
 8006ce2:	2301      	movls	r3, #1
 8006ce4:	2300      	movhi	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d079      	beq.n	8006de0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d107      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x4d4>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	0e9b      	lsrs	r3, r3, #26
 8006cfe:	3301      	adds	r3, #1
 8006d00:	069b      	lsls	r3, r3, #26
 8006d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d06:	e015      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x500>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d10:	fa93 f3a3 	rbit	r3, r3
 8006d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006d20:	2320      	movs	r3, #32
 8006d22:	e003      	b.n	8006d2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	fab3 f383 	clz	r3, r3
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	069b      	lsls	r3, r3, #26
 8006d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x520>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0e9b      	lsrs	r3, r3, #26
 8006d46:	3301      	adds	r3, #1
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d52:	e017      	b.n	8006d84 <HAL_ADC_ConfigChannel+0x550>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	fa93 f3a3 	rbit	r3, r3
 8006d60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	e003      	b.n	8006d78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d72:	fab3 f383 	clz	r3, r3
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	3301      	adds	r3, #1
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2101      	movs	r1, #1
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	ea42 0103 	orr.w	r1, r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x576>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	0e9b      	lsrs	r3, r3, #26
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	f003 021f 	and.w	r2, r3, #31
 8006da0:	4613      	mov	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	4413      	add	r3, r2
 8006da6:	051b      	lsls	r3, r3, #20
 8006da8:	e018      	b.n	8006ddc <HAL_ADC_ConfigChannel+0x5a8>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	fa93 f3a3 	rbit	r3, r3
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	e003      	b.n	8006dce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	fab3 f383 	clz	r3, r3
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	e07e      	b.n	8006ede <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x5c8>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	0e9b      	lsrs	r3, r3, #26
 8006df2:	3301      	adds	r3, #1
 8006df4:	069b      	lsls	r3, r3, #26
 8006df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dfa:	e015      	b.n	8006e28 <HAL_ADC_ConfigChannel+0x5f4>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	fa93 f3a3 	rbit	r3, r3
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006e14:	2320      	movs	r3, #32
 8006e16:	e003      	b.n	8006e20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	3301      	adds	r3, #1
 8006e22:	069b      	lsls	r3, r3, #26
 8006e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d109      	bne.n	8006e48 <HAL_ADC_ConfigChannel+0x614>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	0e9b      	lsrs	r3, r3, #26
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	e017      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x644>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	fa93 f3a3 	rbit	r3, r3
 8006e54:	61fb      	str	r3, [r7, #28]
  return result;
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006e60:	2320      	movs	r3, #32
 8006e62:	e003      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	fab3 f383 	clz	r3, r3
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	2101      	movs	r1, #1
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	ea42 0103 	orr.w	r1, r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_ADC_ConfigChannel+0x670>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	0e9b      	lsrs	r3, r3, #26
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f003 021f 	and.w	r2, r3, #31
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	3b1e      	subs	r3, #30
 8006e9c:	051b      	lsls	r3, r3, #20
 8006e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ea2:	e01b      	b.n	8006edc <HAL_ADC_ConfigChannel+0x6a8>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	fa93 f3a3 	rbit	r3, r3
 8006eb0:	613b      	str	r3, [r7, #16]
  return result;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	e003      	b.n	8006ec8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	fab3 f383 	clz	r3, r3
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	3301      	adds	r3, #1
 8006eca:	f003 021f 	and.w	r2, r3, #31
 8006ece:	4613      	mov	r3, r2
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3b1e      	subs	r3, #30
 8006ed6:	051b      	lsls	r3, r3, #20
 8006ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006edc:	430b      	orrs	r3, r1
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f7ff f8bb 	bl	800605e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_ADC_ConfigChannel+0x6e0>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80be 	beq.w	8007072 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006efe:	d004      	beq.n	8006f0a <HAL_ADC_ConfigChannel+0x6d6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <HAL_ADC_ConfigChannel+0x6e4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10a      	bne.n	8006f20 <HAL_ADC_ConfigChannel+0x6ec>
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <HAL_ADC_ConfigChannel+0x6e8>)
 8006f0c:	e009      	b.n	8006f22 <HAL_ADC_ConfigChannel+0x6ee>
 8006f0e:	bf00      	nop
 8006f10:	407f0000 	.word	0x407f0000
 8006f14:	80080000 	.word	0x80080000
 8006f18:	50000100 	.word	0x50000100
 8006f1c:	50000300 	.word	0x50000300
 8006f20:	4b59      	ldr	r3, [pc, #356]	; (8007088 <HAL_ADC_ConfigChannel+0x854>)
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe ffb0 	bl	8005e88 <LL_ADC_GetCommonPathInternalCh>
 8006f28:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a56      	ldr	r2, [pc, #344]	; (800708c <HAL_ADC_ConfigChannel+0x858>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_ADC_ConfigChannel+0x70c>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a55      	ldr	r2, [pc, #340]	; (8007090 <HAL_ADC_ConfigChannel+0x85c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d13a      	bne.n	8006fb6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d134      	bne.n	8006fb6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f54:	d005      	beq.n	8006f62 <HAL_ADC_ConfigChannel+0x72e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a4e      	ldr	r2, [pc, #312]	; (8007094 <HAL_ADC_ConfigChannel+0x860>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	f040 8085 	bne.w	800706c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f6a:	d004      	beq.n	8006f76 <HAL_ADC_ConfigChannel+0x742>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a49      	ldr	r2, [pc, #292]	; (8007098 <HAL_ADC_ConfigChannel+0x864>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d101      	bne.n	8006f7a <HAL_ADC_ConfigChannel+0x746>
 8006f76:	4a49      	ldr	r2, [pc, #292]	; (800709c <HAL_ADC_ConfigChannel+0x868>)
 8006f78:	e000      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x748>
 8006f7a:	4a43      	ldr	r2, [pc, #268]	; (8007088 <HAL_ADC_ConfigChannel+0x854>)
 8006f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f7fe ff6b 	bl	8005e62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f8c:	4b44      	ldr	r3, [pc, #272]	; (80070a0 <HAL_ADC_ConfigChannel+0x86c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	099b      	lsrs	r3, r3, #6
 8006f92:	4a44      	ldr	r2, [pc, #272]	; (80070a4 <HAL_ADC_ConfigChannel+0x870>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	099b      	lsrs	r3, r3, #6
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006fa6:	e002      	b.n	8006fae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f9      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006fb4:	e05a      	b.n	800706c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3b      	ldr	r2, [pc, #236]	; (80070a8 <HAL_ADC_ConfigChannel+0x874>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d125      	bne.n	800700c <HAL_ADC_ConfigChannel+0x7d8>
 8006fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11f      	bne.n	800700c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a31      	ldr	r2, [pc, #196]	; (8007098 <HAL_ADC_ConfigChannel+0x864>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d104      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x7ac>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a34      	ldr	r2, [pc, #208]	; (80070ac <HAL_ADC_ConfigChannel+0x878>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d047      	beq.n	8007070 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe8:	d004      	beq.n	8006ff4 <HAL_ADC_ConfigChannel+0x7c0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2a      	ldr	r2, [pc, #168]	; (8007098 <HAL_ADC_ConfigChannel+0x864>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_ADC_ConfigChannel+0x7c4>
 8006ff4:	4a29      	ldr	r2, [pc, #164]	; (800709c <HAL_ADC_ConfigChannel+0x868>)
 8006ff6:	e000      	b.n	8006ffa <HAL_ADC_ConfigChannel+0x7c6>
 8006ff8:	4a23      	ldr	r2, [pc, #140]	; (8007088 <HAL_ADC_ConfigChannel+0x854>)
 8006ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fe ff2c 	bl	8005e62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800700a:	e031      	b.n	8007070 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <HAL_ADC_ConfigChannel+0x87c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d12d      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800701a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d127      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <HAL_ADC_ConfigChannel+0x864>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d022      	beq.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007034:	d004      	beq.n	8007040 <HAL_ADC_ConfigChannel+0x80c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_ADC_ConfigChannel+0x864>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d101      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x810>
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_ADC_ConfigChannel+0x868>)
 8007042:	e000      	b.n	8007046 <HAL_ADC_ConfigChannel+0x812>
 8007044:	4a10      	ldr	r2, [pc, #64]	; (8007088 <HAL_ADC_ConfigChannel+0x854>)
 8007046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800704a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f7fe ff06 	bl	8005e62 <LL_ADC_SetCommonPathInternalCh>
 8007056:	e00c      	b.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800706a:	e002      	b.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800707a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800707e:	4618      	mov	r0, r3
 8007080:	37d8      	adds	r7, #216	; 0xd8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	50000700 	.word	0x50000700
 800708c:	c3210000 	.word	0xc3210000
 8007090:	90c00010 	.word	0x90c00010
 8007094:	50000600 	.word	0x50000600
 8007098:	50000100 	.word	0x50000100
 800709c:	50000300 	.word	0x50000300
 80070a0:	20000000 	.word	0x20000000
 80070a4:	053e2d63 	.word	0x053e2d63
 80070a8:	c7520000 	.word	0xc7520000
 80070ac:	50000500 	.word	0x50000500
 80070b0:	cb840000 	.word	0xcb840000

080070b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f8a3 	bl	800620c <LL_ADC_IsEnabled>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d14d      	bne.n	8007168 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	4b28      	ldr	r3, [pc, #160]	; (8007174 <ADC_Enable+0xc0>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070de:	f043 0210 	orr.w	r2, r3, #16
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	f043 0201 	orr.w	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e039      	b.n	800716a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff f85e 	bl	80061bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007100:	f7fe fe6e 	bl	8005de0 <HAL_GetTick>
 8007104:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007106:	e028      	b.n	800715a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff f87d 	bl	800620c <LL_ADC_IsEnabled>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff f84d 	bl	80061bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007122:	f7fe fe5d 	bl	8005de0 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d914      	bls.n	800715a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b01      	cmp	r3, #1
 800713c:	d00d      	beq.n	800715a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f043 0210 	orr.w	r2, r3, #16
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e007      	b.n	800716a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d1cf      	bne.n	8007108 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	8000003f 	.word	0x8000003f

08007178 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f854 	bl	8006232 <LL_ADC_IsDisableOngoing>
 800718a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff f83b 	bl	800620c <LL_ADC_IsEnabled>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d047      	beq.n	800722c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d144      	bne.n	800722c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030d 	and.w	r3, r3, #13
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10c      	bne.n	80071ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff f815 	bl	80061e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2203      	movs	r2, #3
 80071c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80071c2:	f7fe fe0d 	bl	8005de0 <HAL_GetTick>
 80071c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071c8:	e029      	b.n	800721e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	f043 0210 	orr.w	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071da:	f043 0201 	orr.w	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e023      	b.n	800722e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80071e6:	f7fe fdfb 	bl	8005de0 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d914      	bls.n	800721e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f043 0210 	orr.w	r2, r3, #16
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	f043 0201 	orr.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e007      	b.n	800722e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1dc      	bne.n	80071e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800724c:	2b00      	cmp	r3, #0
 800724e:	d14b      	bne.n	80072e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d021      	beq.n	80072ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe feb6 	bl	8005fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d032      	beq.n	80072e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d12b      	bne.n	80072e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d11f      	bne.n	80072e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f043 0201 	orr.w	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80072ac:	e018      	b.n	80072e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d111      	bne.n	80072e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f043 0201 	orr.w	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fa89 	bl	80067f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072e6:	e00e      	b.n	8007306 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fa93 	bl	8006820 <HAL_ADC_ErrorCallback>
}
 80072fa:	e004      	b.n	8007306 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fa75 	bl	800680c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fa65 	bl	8006820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <LL_ADC_IsEnabled>:
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <LL_ADC_IsEnabled+0x18>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <LL_ADC_IsEnabled+0x1a>
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <LL_ADC_StartCalibration>:
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ca:	d101      	bne.n	80073d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e000      	b.n	80073d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <LL_ADC_REG_IsConversionOngoing>:
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d101      	bne.n	80073f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_ADCEx_Calibration_Start+0x1c>
 800741c:	2302      	movs	r3, #2
 800741e:	e04d      	b.n	80074bc <HAL_ADCEx_Calibration_Start+0xb8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fea5 	bl	8007178 <ADC_Disable>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d136      	bne.n	80074a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007440:	f023 0302 	bic.w	r3, r3, #2
 8007444:	f043 0202 	orr.w	r2, r3, #2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff ff96 	bl	8007384 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007458:	e014      	b.n	8007484 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3301      	adds	r3, #1
 800745e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d90d      	bls.n	8007484 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746c:	f023 0312 	bic.w	r3, r3, #18
 8007470:	f043 0210 	orr.w	r2, r3, #16
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e01b      	b.n	80074bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ff94 	bl	80073b6 <LL_ADC_IsCalibrationOnGoing>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e2      	bne.n	800745a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	f023 0303 	bic.w	r3, r3, #3
 800749c:	f043 0201 	orr.w	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80074a4:	e005      	b.n	80074b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	f043 0210 	orr.w	r2, r3, #16
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	0004de01 	.word	0x0004de01

080074c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b0a1      	sub	sp, #132	; 0x84
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d101      	bne.n	80074e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e0e7      	b.n	80076b6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80074ee:	2300      	movs	r3, #0
 80074f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80074f2:	2300      	movs	r3, #0
 80074f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fe:	d102      	bne.n	8007506 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007500:	4b6f      	ldr	r3, [pc, #444]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	e009      	b.n	800751a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a6e      	ldr	r2, [pc, #440]	; (80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d102      	bne.n	8007516 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007510:	4b6d      	ldr	r3, [pc, #436]	; (80076c8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	e001      	b.n	800751a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0be      	b.n	80076b6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ff4f 	bl	80073de <LL_ADC_REG_IsConversionOngoing>
 8007540:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff ff49 	bl	80073de <LL_ADC_REG_IsConversionOngoing>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	f040 80a0 	bne.w	8007694 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 809c 	bne.w	8007694 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007564:	d004      	beq.n	8007570 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a55      	ldr	r2, [pc, #340]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d101      	bne.n	8007574 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007570:	4b56      	ldr	r3, [pc, #344]	; (80076cc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007572:	e000      	b.n	8007576 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007574:	4b56      	ldr	r3, [pc, #344]	; (80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007576:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d04b      	beq.n	8007618 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007592:	035b      	lsls	r3, r3, #13
 8007594:	430b      	orrs	r3, r1
 8007596:	431a      	orrs	r2, r3
 8007598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800759a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a4:	d004      	beq.n	80075b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a45      	ldr	r2, [pc, #276]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10f      	bne.n	80075d0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80075b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80075b4:	f7ff fed3 	bl	800735e <LL_ADC_IsEnabled>
 80075b8:	4604      	mov	r4, r0
 80075ba:	4841      	ldr	r0, [pc, #260]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075bc:	f7ff fecf 	bl	800735e <LL_ADC_IsEnabled>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4323      	orrs	r3, r4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e012      	b.n	80075f6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80075d0:	483c      	ldr	r0, [pc, #240]	; (80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075d2:	f7ff fec4 	bl	800735e <LL_ADC_IsEnabled>
 80075d6:	4604      	mov	r4, r0
 80075d8:	483b      	ldr	r0, [pc, #236]	; (80076c8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80075da:	f7ff fec0 	bl	800735e <LL_ADC_IsEnabled>
 80075de:	4603      	mov	r3, r0
 80075e0:	431c      	orrs	r4, r3
 80075e2:	483c      	ldr	r0, [pc, #240]	; (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80075e4:	f7ff febb 	bl	800735e <LL_ADC_IsEnabled>
 80075e8:	4603      	mov	r3, r0
 80075ea:	4323      	orrs	r3, r4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bf0c      	ite	eq
 80075f0:	2301      	moveq	r3, #1
 80075f2:	2300      	movne	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d056      	beq.n	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80075fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007602:	f023 030f 	bic.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	430a      	orrs	r2, r1
 8007610:	431a      	orrs	r2, r3
 8007612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007614:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007616:	e047      	b.n	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007622:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762c:	d004      	beq.n	8007638 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10f      	bne.n	8007658 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800763c:	f7ff fe8f 	bl	800735e <LL_ADC_IsEnabled>
 8007640:	4604      	mov	r4, r0
 8007642:	481f      	ldr	r0, [pc, #124]	; (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007644:	f7ff fe8b 	bl	800735e <LL_ADC_IsEnabled>
 8007648:	4603      	mov	r3, r0
 800764a:	4323      	orrs	r3, r4
 800764c:	2b00      	cmp	r3, #0
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e012      	b.n	800767e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007658:	481a      	ldr	r0, [pc, #104]	; (80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800765a:	f7ff fe80 	bl	800735e <LL_ADC_IsEnabled>
 800765e:	4604      	mov	r4, r0
 8007660:	4819      	ldr	r0, [pc, #100]	; (80076c8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007662:	f7ff fe7c 	bl	800735e <LL_ADC_IsEnabled>
 8007666:	4603      	mov	r3, r0
 8007668:	431c      	orrs	r4, r3
 800766a:	481a      	ldr	r0, [pc, #104]	; (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800766c:	f7ff fe77 	bl	800735e <LL_ADC_IsEnabled>
 8007670:	4603      	mov	r3, r0
 8007672:	4323      	orrs	r3, r4
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d012      	beq.n	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800768a:	f023 030f 	bic.w	r3, r3, #15
 800768e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007690:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007692:	e009      	b.n	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80076a6:	e000      	b.n	80076aa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3784      	adds	r7, #132	; 0x84
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}
 80076be:	bf00      	nop
 80076c0:	50000100 	.word	0x50000100
 80076c4:	50000400 	.word	0x50000400
 80076c8:	50000500 	.word	0x50000500
 80076cc:	50000300 	.word	0x50000300
 80076d0:	50000700 	.word	0x50000700
 80076d4:	50000600 	.word	0x50000600

080076d8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	4904      	ldr	r1, [pc, #16]	; (80076f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	600b      	str	r3, [r1, #0]
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	40010400 	.word	0x40010400

080076fc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <LL_EXTI_EnableIT_32_63+0x20>)
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	4904      	ldr	r1, [pc, #16]	; (800771c <LL_EXTI_EnableIT_32_63+0x20>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4313      	orrs	r3, r2
 800770e:	620b      	str	r3, [r1, #32]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010400 	.word	0x40010400

08007720 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <LL_EXTI_DisableIT_0_31+0x24>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	43db      	mvns	r3, r3
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <LL_EXTI_DisableIT_0_31+0x24>)
 8007732:	4013      	ands	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	40010400 	.word	0x40010400

08007748 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <LL_EXTI_DisableIT_32_63+0x24>)
 8007752:	6a1a      	ldr	r2, [r3, #32]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	43db      	mvns	r3, r3
 8007758:	4904      	ldr	r1, [pc, #16]	; (800776c <LL_EXTI_DisableIT_32_63+0x24>)
 800775a:	4013      	ands	r3, r2
 800775c:	620b      	str	r3, [r1, #32]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40010400 	.word	0x40010400

08007770 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <LL_EXTI_EnableEvent_0_31+0x20>)
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4904      	ldr	r1, [pc, #16]	; (8007790 <LL_EXTI_EnableEvent_0_31+0x20>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4313      	orrs	r3, r2
 8007782:	604b      	str	r3, [r1, #4]

}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40010400 	.word	0x40010400

08007794 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800779e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a0:	4904      	ldr	r1, [pc, #16]	; (80077b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40010400 	.word	0x40010400

080077b8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	4904      	ldr	r1, [pc, #16]	; (80077dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	604b      	str	r3, [r1, #4]
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010400 	.word	0x40010400

080077e0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80077e8:	4b06      	ldr	r3, [pc, #24]	; (8007804 <LL_EXTI_DisableEvent_32_63+0x24>)
 80077ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	43db      	mvns	r3, r3
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <LL_EXTI_DisableEvent_32_63+0x24>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40010400 	.word	0x40010400

08007808 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]

}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	40010400 	.word	0x40010400

0800782c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007838:	4904      	ldr	r1, [pc, #16]	; (800784c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4313      	orrs	r3, r2
 800783e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40010400 	.word	0x40010400

08007850 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	43db      	mvns	r3, r3
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007862:	4013      	ands	r3, r2
 8007864:	608b      	str	r3, [r1, #8]

}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010400 	.word	0x40010400

08007878 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	43db      	mvns	r3, r3
 8007888:	4904      	ldr	r1, [pc, #16]	; (800789c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800788a:	4013      	ands	r3, r2
 800788c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40010400 	.word	0x40010400

080078a0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	4904      	ldr	r1, [pc, #16]	; (80078c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60cb      	str	r3, [r1, #12]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40010400 	.word	0x40010400

080078c4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	4904      	ldr	r1, [pc, #16]	; (80078e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40010400 	.word	0x40010400

080078e8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80078f0:	4b06      	ldr	r3, [pc, #24]	; (800790c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	43db      	mvns	r3, r3
 80078f8:	4904      	ldr	r1, [pc, #16]	; (800790c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	60cb      	str	r3, [r1, #12]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40010400 	.word	0x40010400

08007910 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	43db      	mvns	r3, r3
 8007920:	4904      	ldr	r1, [pc, #16]	; (8007934 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007922:	4013      	ands	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40010400 	.word	0x40010400

08007938 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007940:	4a04      	ldr	r2, [pc, #16]	; (8007954 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6153      	str	r3, [r2, #20]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40010400 	.word	0x40010400

08007958 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40010400 	.word	0x40010400

08007978 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e181      	b.n	8007c98 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800799e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a2:	d102      	bne.n	80079aa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e176      	b.n	8007c98 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7f5b      	ldrb	r3, [r3, #29]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d108      	bne.n	80079c6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7fd fbbd 	bl	8005140 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b90      	ldr	r3, [pc, #576]	; (8007c38 <HAL_COMP_Init+0x2c0>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <HAL_COMP_Init+0xc8>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d113      	bne.n	8007a40 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a18:	4b88      	ldr	r3, [pc, #544]	; (8007c3c <HAL_COMP_Init+0x2c4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	099b      	lsrs	r3, r3, #6
 8007a1e:	4a88      	ldr	r2, [pc, #544]	; (8007c40 <HAL_COMP_Init+0x2c8>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	099b      	lsrs	r3, r3, #6
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007a32:	e002      	b.n	8007a3a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f9      	bne.n	8007a34 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a7f      	ldr	r2, [pc, #508]	; (8007c44 <HAL_COMP_Init+0x2cc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d028      	beq.n	8007a9c <HAL_COMP_Init+0x124>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a7e      	ldr	r2, [pc, #504]	; (8007c48 <HAL_COMP_Init+0x2d0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d020      	beq.n	8007a96 <HAL_COMP_Init+0x11e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a7c      	ldr	r2, [pc, #496]	; (8007c4c <HAL_COMP_Init+0x2d4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d018      	beq.n	8007a90 <HAL_COMP_Init+0x118>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a7b      	ldr	r2, [pc, #492]	; (8007c50 <HAL_COMP_Init+0x2d8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d010      	beq.n	8007a8a <HAL_COMP_Init+0x112>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a79      	ldr	r2, [pc, #484]	; (8007c54 <HAL_COMP_Init+0x2dc>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d008      	beq.n	8007a84 <HAL_COMP_Init+0x10c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a78      	ldr	r2, [pc, #480]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d101      	bne.n	8007a80 <HAL_COMP_Init+0x108>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e00f      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e00d      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a88:	e00a      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a8e:	e007      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a90:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007a94:	e004      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a9a:	e001      	b.n	8007aa0 <HAL_COMP_Init+0x128>
 8007a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007aa0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80b6 	beq.w	8007c1c <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d011      	beq.n	8007ae0 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d004      	beq.n	8007ad0 <HAL_COMP_Init+0x158>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a64      	ldr	r2, [pc, #400]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d103      	bne.n	8007ad8 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8007ad0:	6938      	ldr	r0, [r7, #16]
 8007ad2:	f7ff feab 	bl	800782c <LL_EXTI_EnableRisingTrig_32_63>
 8007ad6:	e014      	b.n	8007b02 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007ad8:	6938      	ldr	r0, [r7, #16]
 8007ada:	f7ff fe95 	bl	8007808 <LL_EXTI_EnableRisingTrig_0_31>
 8007ade:	e010      	b.n	8007b02 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5c      	ldr	r2, [pc, #368]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_COMP_Init+0x17c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a5b      	ldr	r2, [pc, #364]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d103      	bne.n	8007afc <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8007af4:	6938      	ldr	r0, [r7, #16]
 8007af6:	f7ff febf 	bl	8007878 <LL_EXTI_DisableRisingTrig_32_63>
 8007afa:	e002      	b.n	8007b02 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007afc:	6938      	ldr	r0, [r7, #16]
 8007afe:	f7ff fea7 	bl	8007850 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d011      	beq.n	8007b32 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a51      	ldr	r2, [pc, #324]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_COMP_Init+0x1aa>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a4f      	ldr	r2, [pc, #316]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d103      	bne.n	8007b2a <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f7ff fece 	bl	80078c4 <LL_EXTI_EnableFallingTrig_32_63>
 8007b28:	e014      	b.n	8007b54 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007b2a:	6938      	ldr	r0, [r7, #16]
 8007b2c:	f7ff feb8 	bl	80078a0 <LL_EXTI_EnableFallingTrig_0_31>
 8007b30:	e010      	b.n	8007b54 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a48      	ldr	r2, [pc, #288]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_COMP_Init+0x1ce>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a46      	ldr	r2, [pc, #280]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d103      	bne.n	8007b4e <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8007b46:	6938      	ldr	r0, [r7, #16]
 8007b48:	f7ff fee2 	bl	8007910 <LL_EXTI_DisableFallingTrig_32_63>
 8007b4c:	e002      	b.n	8007b54 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f7ff feca 	bl	80078e8 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a3f      	ldr	r2, [pc, #252]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <HAL_COMP_Init+0x1f0>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a3e      	ldr	r2, [pc, #248]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d103      	bne.n	8007b70 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8007b68:	6938      	ldr	r0, [r7, #16]
 8007b6a:	f7ff fef5 	bl	8007958 <LL_EXTI_ClearFlag_32_63>
 8007b6e:	e002      	b.n	8007b76 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f7ff fee1 	bl	8007938 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a34      	ldr	r2, [pc, #208]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_COMP_Init+0x21e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a32      	ldr	r2, [pc, #200]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d103      	bne.n	8007b9e <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007b96:	6938      	ldr	r0, [r7, #16]
 8007b98:	f7ff fdfc 	bl	8007794 <LL_EXTI_EnableEvent_32_63>
 8007b9c:	e014      	b.n	8007bc8 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8007b9e:	6938      	ldr	r0, [r7, #16]
 8007ba0:	f7ff fde6 	bl	8007770 <LL_EXTI_EnableEvent_0_31>
 8007ba4:	e010      	b.n	8007bc8 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_COMP_Init+0x242>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d103      	bne.n	8007bc2 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8007bba:	6938      	ldr	r0, [r7, #16]
 8007bbc:	f7ff fe10 	bl	80077e0 <LL_EXTI_DisableEvent_32_63>
 8007bc0:	e002      	b.n	8007bc8 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007bc2:	6938      	ldr	r0, [r7, #16]
 8007bc4:	f7ff fdf8 	bl	80077b8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d011      	beq.n	8007bf8 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1f      	ldr	r2, [pc, #124]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_COMP_Init+0x270>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d103      	bne.n	8007bf0 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007be8:	6938      	ldr	r0, [r7, #16]
 8007bea:	f7ff fd87 	bl	80076fc <LL_EXTI_EnableIT_32_63>
 8007bee:	e04b      	b.n	8007c88 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8007bf0:	6938      	ldr	r0, [r7, #16]
 8007bf2:	f7ff fd71 	bl	80076d8 <LL_EXTI_EnableIT_0_31>
 8007bf6:	e047      	b.n	8007c88 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_COMP_Init+0x294>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d103      	bne.n	8007c14 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007c0c:	6938      	ldr	r0, [r7, #16]
 8007c0e:	f7ff fd9b 	bl	8007748 <LL_EXTI_DisableIT_32_63>
 8007c12:	e039      	b.n	8007c88 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8007c14:	6938      	ldr	r0, [r7, #16]
 8007c16:	f7ff fd83 	bl	8007720 <LL_EXTI_DisableIT_0_31>
 8007c1a:	e035      	b.n	8007c88 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0d      	ldr	r2, [pc, #52]	; (8007c58 <HAL_COMP_Init+0x2e0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d004      	beq.n	8007c30 <HAL_COMP_Init+0x2b8>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0c      	ldr	r2, [pc, #48]	; (8007c5c <HAL_COMP_Init+0x2e4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d117      	bne.n	8007c60 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007c30:	6938      	ldr	r0, [r7, #16]
 8007c32:	f7ff fdd5 	bl	80077e0 <LL_EXTI_DisableEvent_32_63>
 8007c36:	e016      	b.n	8007c66 <HAL_COMP_Init+0x2ee>
 8007c38:	ff007e0f 	.word	0xff007e0f
 8007c3c:	20000000 	.word	0x20000000
 8007c40:	053e2d63 	.word	0x053e2d63
 8007c44:	40010200 	.word	0x40010200
 8007c48:	40010204 	.word	0x40010204
 8007c4c:	40010208 	.word	0x40010208
 8007c50:	4001020c 	.word	0x4001020c
 8007c54:	40010210 	.word	0x40010210
 8007c58:	40010214 	.word	0x40010214
 8007c5c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f7ff fda9 	bl	80077b8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ca4 <HAL_COMP_Init+0x32c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_COMP_Init+0x302>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <HAL_COMP_Init+0x330>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d103      	bne.n	8007c82 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f7ff fd64 	bl	8007748 <LL_EXTI_DisableIT_32_63>
 8007c80:	e002      	b.n	8007c88 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f7ff fd4c 	bl	8007720 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7f5b      	ldrb	r3, [r3, #29]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8007c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40010214 	.word	0x40010214
 8007ca8:	40010218 	.word	0x40010218

08007cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cc8:	4013      	ands	r3, r2
 8007cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cde:	4a04      	ldr	r2, [pc, #16]	; (8007cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	60d3      	str	r3, [r2, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <__NVIC_GetPriorityGrouping+0x18>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	f003 0307 	and.w	r3, r3, #7
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	e000ed00 	.word	0xe000ed00

08007d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	db0b      	blt.n	8007d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	f003 021f 	and.w	r2, r3, #31
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <__NVIC_EnableIRQ+0x38>)
 8007d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	2001      	movs	r0, #1
 8007d32:	fa00 f202 	lsl.w	r2, r0, r2
 8007d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	e000e100 	.word	0xe000e100

08007d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	6039      	str	r1, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	db0a      	blt.n	8007d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	490c      	ldr	r1, [pc, #48]	; (8007d98 <__NVIC_SetPriority+0x4c>)
 8007d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6a:	0112      	lsls	r2, r2, #4
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	440b      	add	r3, r1
 8007d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d74:	e00a      	b.n	8007d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	4908      	ldr	r1, [pc, #32]	; (8007d9c <__NVIC_SetPriority+0x50>)
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	3b04      	subs	r3, #4
 8007d84:	0112      	lsls	r2, r2, #4
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	440b      	add	r3, r1
 8007d8a:	761a      	strb	r2, [r3, #24]
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	e000e100 	.word	0xe000e100
 8007d9c:	e000ed00 	.word	0xe000ed00

08007da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f1c3 0307 	rsb	r3, r3, #7
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	bf28      	it	cs
 8007dbe:	2304      	movcs	r3, #4
 8007dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	2b06      	cmp	r3, #6
 8007dc8:	d902      	bls.n	8007dd0 <NVIC_EncodePriority+0x30>
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	3b03      	subs	r3, #3
 8007dce:	e000      	b.n	8007dd2 <NVIC_EncodePriority+0x32>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43da      	mvns	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	401a      	ands	r2, r3
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007de8:	f04f 31ff 	mov.w	r1, #4294967295
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	fa01 f303 	lsl.w	r3, r1, r3
 8007df2:	43d9      	mvns	r1, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007df8:	4313      	orrs	r3, r2
         );
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3724      	adds	r7, #36	; 0x24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e18:	d301      	bcc.n	8007e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e00f      	b.n	8007e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <SysTick_Config+0x40>)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e26:	210f      	movs	r1, #15
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	f7ff ff8e 	bl	8007d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <SysTick_Config+0x40>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <SysTick_Config+0x40>)
 8007e38:	2207      	movs	r2, #7
 8007e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	e000e010 	.word	0xe000e010

08007e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff ff29 	bl	8007cac <__NVIC_SetPriorityGrouping>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	4603      	mov	r3, r0
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007e70:	f7ff ff40 	bl	8007cf4 <__NVIC_GetPriorityGrouping>
 8007e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	6978      	ldr	r0, [r7, #20]
 8007e7c:	f7ff ff90 	bl	8007da0 <NVIC_EncodePriority>
 8007e80:	4602      	mov	r2, r0
 8007e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e86:	4611      	mov	r1, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff ff5f 	bl	8007d4c <__NVIC_SetPriority>
}
 8007e8e:	bf00      	nop
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff ff33 	bl	8007d10 <__NVIC_EnableIRQ>
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff ffa4 	bl	8007e08 <SysTick_Config>
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e014      	b.n	8007f06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	791b      	ldrb	r3, [r3, #4]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d105      	bne.n	8007ef2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7fd f9bd 	bl	800526c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	795b      	ldrb	r3, [r3, #5]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_DAC_ConfigChannel+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e192      	b.n	800824e <HAL_DAC_ConfigChannel+0x33e>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d174      	bne.n	8008026 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007f3c:	f7fd ff50 	bl	8005de0 <HAL_GetTick>
 8007f40:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d134      	bne.n	8007fb2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f48:	e011      	b.n	8007f6e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f4a:	f7fd ff49 	bl	8005de0 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d90a      	bls.n	8007f6e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f043 0208 	orr.w	r2, r3, #8
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2203      	movs	r2, #3
 8007f68:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e16f      	b.n	800824e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	f7fd ff3b 	bl	8005df8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8007f8c:	e01e      	b.n	8007fcc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f8e:	f7fd ff27 	bl	8005de0 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d90a      	bls.n	8007fb2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f043 0208 	orr.w	r2, r3, #8
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2203      	movs	r2, #3
 8007fac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e14d      	b.n	800824e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dbe8      	blt.n	8007f8e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7fd ff1b 	bl	8005df8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	ea02 0103 	and.w	r1, r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f003 0310 	and.w	r3, r3, #16
 8008006:	21ff      	movs	r1, #255	; 0xff
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	ea02 0103 	and.w	r1, r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	409a      	lsls	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d11d      	bne.n	800806a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	221f      	movs	r2, #31
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43db      	mvns	r3, r3
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	4013      	ands	r3, r2
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	4313      	orrs	r3, r2
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2207      	movs	r2, #7
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	4013      	ands	r3, r2
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d102      	bne.n	8008094 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800808e:	2300      	movs	r3, #0
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e00f      	b.n	80080b4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d102      	bne.n	80080a2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800809c:	2301      	movs	r3, #1
 800809e:	623b      	str	r3, [r7, #32]
 80080a0:	e008      	b.n	80080b4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80080aa:	2301      	movs	r3, #1
 80080ac:	623b      	str	r3, [r7, #32]
 80080ae:	e001      	b.n	80080b4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	6a3a      	ldr	r2, [r7, #32]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43db      	mvns	r3, r3
 80080d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d6:	4013      	ands	r3, r2
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d102      	bne.n	80080e8 <HAL_DAC_ConfigChannel+0x1d8>
 80080e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e6:	e000      	b.n	80080ea <HAL_DAC_ConfigChannel+0x1da>
 80080e8:	2300      	movs	r3, #0
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008102:	4013      	ands	r3, r2
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	795b      	ldrb	r3, [r3, #5]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d102      	bne.n	8008114 <HAL_DAC_ConfigChannel+0x204>
 800810e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008112:	e000      	b.n	8008116 <HAL_DAC_ConfigChannel+0x206>
 8008114:	2300      	movs	r3, #0
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	4313      	orrs	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d114      	bne.n	8008156 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800812c:	f003 fa32 	bl	800b594 <HAL_RCC_GetHCLKFreq>
 8008130:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4a48      	ldr	r2, [pc, #288]	; (8008258 <HAL_DAC_ConfigChannel+0x348>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d904      	bls.n	8008144 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
 8008142:	e00f      	b.n	8008164 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	4a45      	ldr	r2, [pc, #276]	; (800825c <HAL_DAC_ConfigChannel+0x34c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d90a      	bls.n	8008162 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
 8008154:	e006      	b.n	8008164 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815c:	4313      	orrs	r3, r2
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
 8008160:	e000      	b.n	8008164 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008162:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	4313      	orrs	r3, r2
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f003 0310 	and.w	r3, r3, #16
 800818a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	43da      	mvns	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	400a      	ands	r2, r1
 800819a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80081ae:	fa02 f303 	lsl.w	r3, r2, r3
 80081b2:	43db      	mvns	r3, r3
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	4013      	ands	r3, r2
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ce:	4313      	orrs	r3, r2
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	22c0      	movs	r2, #192	; 0xc0
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43da      	mvns	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	400a      	ands	r2, r1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	089b      	lsrs	r3, r3, #2
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	089b      	lsrs	r3, r3, #2
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	43db      	mvns	r3, r3
 800822a:	ea02 0103 	and.w	r1, r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	409a      	lsls	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3728      	adds	r7, #40	; 0x28
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	09896800 	.word	0x09896800
 800825c:	04c4b400 	.word	0x04c4b400

08008260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e08d      	b.n	800838e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	4b47      	ldr	r3, [pc, #284]	; (8008398 <HAL_DMA_Init+0x138>)
 800827a:	429a      	cmp	r2, r3
 800827c:	d80f      	bhi.n	800829e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	4b45      	ldr	r3, [pc, #276]	; (800839c <HAL_DMA_Init+0x13c>)
 8008286:	4413      	add	r3, r2
 8008288:	4a45      	ldr	r2, [pc, #276]	; (80083a0 <HAL_DMA_Init+0x140>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	091b      	lsrs	r3, r3, #4
 8008290:	009a      	lsls	r2, r3, #2
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a42      	ldr	r2, [pc, #264]	; (80083a4 <HAL_DMA_Init+0x144>)
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
 800829c:	e00e      	b.n	80082bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	4b40      	ldr	r3, [pc, #256]	; (80083a8 <HAL_DMA_Init+0x148>)
 80082a6:	4413      	add	r3, r2
 80082a8:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <HAL_DMA_Init+0x140>)
 80082aa:	fba2 2303 	umull	r2, r3, r2, r3
 80082ae:	091b      	lsrs	r3, r3, #4
 80082b0:	009a      	lsls	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a3c      	ldr	r2, [pc, #240]	; (80083ac <HAL_DMA_Init+0x14c>)
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa76 	bl	8008800 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831c:	d102      	bne.n	8008324 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008338:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d010      	beq.n	8008364 <HAL_DMA_Init+0x104>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b04      	cmp	r3, #4
 8008348:	d80c      	bhi.n	8008364 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa96 	bl	800887c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	e008      	b.n	8008376 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40020407 	.word	0x40020407
 800839c:	bffdfff8 	.word	0xbffdfff8
 80083a0:	cccccccd 	.word	0xcccccccd
 80083a4:	40020000 	.word	0x40020000
 80083a8:	bffdfbf8 	.word	0xbffdfbf8
 80083ac:	40020400 	.word	0x40020400

080083b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_DMA_Start_IT+0x20>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e066      	b.n	800849e <HAL_DMA_Start_IT+0xee>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d155      	bne.n	8008490 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0201 	bic.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f9bb 	bl	8008784 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 020e 	orr.w	r2, r2, #14
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e00f      	b.n	8008448 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0204 	bic.w	r2, r2, #4
 8008436:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 020a 	orr.w	r2, r2, #10
 8008446:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008464:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800847c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0201 	orr.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e005      	b.n	800849c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008498:	2302      	movs	r3, #2
 800849a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d005      	beq.n	80084ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
 80084c8:	e037      	b.n	800853a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 020e 	bic.w	r2, r2, #14
 80084d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	f003 021f 	and.w	r2, r3, #31
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	2101      	movs	r1, #1
 8008508:	fa01 f202 	lsl.w	r2, r1, r2
 800850c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008516:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00c      	beq.n	800853a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800852e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008538:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d00d      	beq.n	800858c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2204      	movs	r2, #4
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	e047      	b.n	800861c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 020e 	bic.w	r2, r2, #14
 800859a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	f003 021f 	and.w	r2, r3, #31
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2101      	movs	r1, #1
 80085ca:	fa01 f202 	lsl.w	r2, r1, r2
 80085ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80085fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
    }
  }
  return status;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	2204      	movs	r2, #4
 8008648:	409a      	lsls	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4013      	ands	r3, r2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d026      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x7a>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d021      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d107      	bne.n	800867a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0204 	bic.w	r2, r2, #4
 8008678:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867e:	f003 021f 	and.w	r2, r3, #31
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	2104      	movs	r1, #4
 8008688:	fa01 f202 	lsl.w	r2, r1, r2
 800868c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	2b00      	cmp	r3, #0
 8008694:	d071      	beq.n	800877a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800869e:	e06c      	b.n	800877a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2202      	movs	r2, #2
 80086aa:	409a      	lsls	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02e      	beq.n	8008712 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d029      	beq.n	8008712 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10b      	bne.n	80086e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 020a 	bic.w	r2, r2, #10
 80086da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e8:	f003 021f 	and.w	r2, r3, #31
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	2102      	movs	r1, #2
 80086f2:	fa01 f202 	lsl.w	r2, r1, r2
 80086f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d038      	beq.n	800877a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008710:	e033      	b.n	800877a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	2208      	movs	r2, #8
 800871c:	409a      	lsls	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4013      	ands	r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d02a      	beq.n	800877c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d025      	beq.n	800877c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 020e 	bic.w	r2, r2, #14
 800873e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008744:	f003 021f 	and.w	r2, r3, #31
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2101      	movs	r1, #1
 800874e:	fa01 f202 	lsl.w	r2, r1, r2
 8008752:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800877a:	bf00      	nop
 800877c:	bf00      	nop
}
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800879a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	f003 021f 	and.w	r2, r3, #31
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	2101      	movs	r1, #1
 80087bc:	fa01 f202 	lsl.w	r2, r1, r2
 80087c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b10      	cmp	r3, #16
 80087d0:	d108      	bne.n	80087e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087e2:	e007      	b.n	80087f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	60da      	str	r2, [r3, #12]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	4b16      	ldr	r3, [pc, #88]	; (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008810:	429a      	cmp	r2, r3
 8008812:	d802      	bhi.n	800881a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008814:	4b15      	ldr	r3, [pc, #84]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e001      	b.n	800881e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800881a:	4b15      	ldr	r3, [pc, #84]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800881c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	3b08      	subs	r3, #8
 800882a:	4a12      	ldr	r2, [pc, #72]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800882c:	fba2 2303 	umull	r2, r3, r2, r3
 8008830:	091b      	lsrs	r3, r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	009a      	lsls	r2, r3, #2
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4413      	add	r3, r2
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a0b      	ldr	r2, [pc, #44]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800884a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 031f 	and.w	r3, r3, #31
 8008852:	2201      	movs	r2, #1
 8008854:	409a      	lsls	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40020407 	.word	0x40020407
 800886c:	40020800 	.word	0x40020800
 8008870:	40020820 	.word	0x40020820
 8008874:	cccccccd 	.word	0xcccccccd
 8008878:	40020880 	.word	0x40020880

0800887c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	461a      	mov	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a08      	ldr	r2, [pc, #32]	; (80088c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800889e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	f003 031f 	and.w	r3, r3, #31
 80088a8:	2201      	movs	r2, #1
 80088aa:	409a      	lsls	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	1000823f 	.word	0x1000823f
 80088c0:	40020940 	.word	0x40020940

080088c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088d2:	e15a      	b.n	8008b8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	2101      	movs	r1, #1
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	4013      	ands	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 814c 	beq.w	8008b84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d005      	beq.n	8008904 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008900:	2b02      	cmp	r3, #2
 8008902:	d130      	bne.n	8008966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	2203      	movs	r2, #3
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	43db      	mvns	r3, r3
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4013      	ands	r3, r2
 800891a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800893a:	2201      	movs	r2, #1
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	43db      	mvns	r3, r3
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4013      	ands	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	091b      	lsrs	r3, r3, #4
 8008950:	f003 0201 	and.w	r2, r3, #1
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	fa02 f303 	lsl.w	r3, r2, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b03      	cmp	r3, #3
 8008970:	d017      	beq.n	80089a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	2203      	movs	r2, #3
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43db      	mvns	r3, r3
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4013      	ands	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d123      	bne.n	80089f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	08da      	lsrs	r2, r3, #3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3208      	adds	r2, #8
 80089b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	220f      	movs	r2, #15
 80089c6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4013      	ands	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	fa02 f303 	lsl.w	r3, r2, r3
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	08da      	lsrs	r2, r3, #3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3208      	adds	r2, #8
 80089f0:	6939      	ldr	r1, [r7, #16]
 80089f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	2203      	movs	r2, #3
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	43db      	mvns	r3, r3
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f003 0203 	and.w	r2, r3, #3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80a6 	beq.w	8008b84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a38:	4b5b      	ldr	r3, [pc, #364]	; (8008ba8 <HAL_GPIO_Init+0x2e4>)
 8008a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3c:	4a5a      	ldr	r2, [pc, #360]	; (8008ba8 <HAL_GPIO_Init+0x2e4>)
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	6613      	str	r3, [r2, #96]	; 0x60
 8008a44:	4b58      	ldr	r3, [pc, #352]	; (8008ba8 <HAL_GPIO_Init+0x2e4>)
 8008a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a50:	4a56      	ldr	r2, [pc, #344]	; (8008bac <HAL_GPIO_Init+0x2e8>)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	3302      	adds	r3, #2
 8008a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	220f      	movs	r2, #15
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4013      	ands	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008a7a:	d01f      	beq.n	8008abc <HAL_GPIO_Init+0x1f8>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a4c      	ldr	r2, [pc, #304]	; (8008bb0 <HAL_GPIO_Init+0x2ec>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d019      	beq.n	8008ab8 <HAL_GPIO_Init+0x1f4>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a4b      	ldr	r2, [pc, #300]	; (8008bb4 <HAL_GPIO_Init+0x2f0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <HAL_GPIO_Init+0x1f0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a4a      	ldr	r2, [pc, #296]	; (8008bb8 <HAL_GPIO_Init+0x2f4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00d      	beq.n	8008ab0 <HAL_GPIO_Init+0x1ec>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a49      	ldr	r2, [pc, #292]	; (8008bbc <HAL_GPIO_Init+0x2f8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <HAL_GPIO_Init+0x1e8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a48      	ldr	r2, [pc, #288]	; (8008bc0 <HAL_GPIO_Init+0x2fc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d101      	bne.n	8008aa8 <HAL_GPIO_Init+0x1e4>
 8008aa4:	2305      	movs	r3, #5
 8008aa6:	e00a      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008aa8:	2306      	movs	r3, #6
 8008aaa:	e008      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008aac:	2304      	movs	r3, #4
 8008aae:	e006      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e004      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e002      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <HAL_GPIO_Init+0x1fa>
 8008abc:	2300      	movs	r3, #0
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	f002 0203 	and.w	r2, r2, #3
 8008ac4:	0092      	lsls	r2, r2, #2
 8008ac6:	4093      	lsls	r3, r2
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ace:	4937      	ldr	r1, [pc, #220]	; (8008bac <HAL_GPIO_Init+0x2e8>)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	089b      	lsrs	r3, r3, #2
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008adc:	4b39      	ldr	r3, [pc, #228]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008b00:	4a30      	ldr	r2, [pc, #192]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008b06:	4b2f      	ldr	r3, [pc, #188]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4013      	ands	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b2a:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008b30:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b54:	4a1b      	ldr	r2, [pc, #108]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b5a:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	43db      	mvns	r3, r3
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4013      	ands	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b7e:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <HAL_GPIO_Init+0x300>)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	3301      	adds	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f47f ae9d 	bne.w	80088d4 <HAL_GPIO_Init+0x10>
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	48000400 	.word	0x48000400
 8008bb4:	48000800 	.word	0x48000800
 8008bb8:	48000c00 	.word	0x48000c00
 8008bbc:	48001000 	.word	0x48001000
 8008bc0:	48001400 	.word	0x48001400
 8008bc4:	40010400 	.word	0x40010400

08008bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bd8:	787b      	ldrb	r3, [r7, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008be4:	e002      	b.n	8008bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008be6:	887a      	ldrh	r2, [r7, #2]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c0a:	887a      	ldrh	r2, [r7, #2]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	041a      	lsls	r2, r3, #16
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	43d9      	mvns	r1, r3
 8008c16:	887b      	ldrh	r3, [r7, #2]
 8008c18:	400b      	ands	r3, r1
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	619a      	str	r2, [r3, #24]
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e0bb      	b.n	8008dba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d101      	bne.n	8008c52 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e0b3      	b.n	8008dba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d101      	bne.n	8008c62 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e0ab      	b.n	8008dba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c62:	4b58      	ldr	r3, [pc, #352]	; (8008dc4 <HAL_OPAMP_Init+0x198>)
 8008c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c66:	4a57      	ldr	r2, [pc, #348]	; (8008dc4 <HAL_OPAMP_Init+0x198>)
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8008c6e:	4b55      	ldr	r3, [pc, #340]	; (8008dc4 <HAL_OPAMP_Init+0x198>)
 8008c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	60bb      	str	r3, [r7, #8]
 8008c78:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7fc fb48 	bl	8005324 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d003      	beq.n	8008ca4 <HAL_OPAMP_Init+0x78>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	2b60      	cmp	r3, #96	; 0x60
 8008ca2:	d133      	bne.n	8008d0c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f023 0110 	bic.w	r1, r3, #16
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	4b41      	ldr	r3, [pc, #260]	; (8008dc8 <HAL_OPAMP_Init+0x19c>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6851      	ldr	r1, [r2, #4]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6892      	ldr	r2, [r2, #8]
 8008ccc:	4311      	orrs	r1, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6912      	ldr	r2, [r2, #16]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	7d09      	ldrb	r1, [r1, #20]
 8008cd8:	2901      	cmp	r1, #1
 8008cda:	d102      	bne.n	8008ce2 <HAL_OPAMP_Init+0xb6>
 8008cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ce0:	e000      	b.n	8008ce4 <HAL_OPAMP_Init+0xb8>
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4311      	orrs	r1, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cea:	4311      	orrs	r1, r2
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008cf0:	4311      	orrs	r1, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008cf6:	04d2      	lsls	r2, r2, #19
 8008cf8:	4311      	orrs	r1, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cfe:	0612      	lsls	r2, r2, #24
 8008d00:	4311      	orrs	r1, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6812      	ldr	r2, [r2, #0]
 8008d06:	430b      	orrs	r3, r1
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	e035      	b.n	8008d78 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f023 0110 	bic.w	r1, r3, #16
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <HAL_OPAMP_Init+0x19c>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6851      	ldr	r1, [r2, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6892      	ldr	r2, [r2, #8]
 8008d34:	4311      	orrs	r1, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68d2      	ldr	r2, [r2, #12]
 8008d3a:	4311      	orrs	r1, r2
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	6912      	ldr	r2, [r2, #16]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	7d09      	ldrb	r1, [r1, #20]
 8008d46:	2901      	cmp	r1, #1
 8008d48:	d102      	bne.n	8008d50 <HAL_OPAMP_Init+0x124>
 8008d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d4e:	e000      	b.n	8008d52 <HAL_OPAMP_Init+0x126>
 8008d50:	2100      	movs	r1, #0
 8008d52:	4311      	orrs	r1, r2
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d58:	4311      	orrs	r1, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008d5e:	4311      	orrs	r1, r2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d64:	04d2      	lsls	r2, r2, #19
 8008d66:	4311      	orrs	r1, r2
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d6c:	0612      	lsls	r2, r2, #24
 8008d6e:	4311      	orrs	r1, r2
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	db10      	blt.n	8008da4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	e0003e11 	.word	0xe0003e11

08008dcc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	73fb      	strb	r3, [r7, #15]
 8008de2:	e01d      	b.n	8008e20 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b05      	cmp	r3, #5
 8008dee:	d102      	bne.n	8008df6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]
 8008df4:	e014      	b.n	8008e20 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d10c      	bne.n	8008e1c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2204      	movs	r2, #4
 8008e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008e1a:	e001      	b.n	8008e20 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
 8008e44:	e113      	b.n	800906e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d102      	bne.n	8008e58 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	75fb      	strb	r3, [r7, #23]
 8008e56:	e10a      	b.n	800906e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	f040 8102 	bne.w	800906a <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0202 	orr.w	r2, r2, #2
 8008e74:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0210 	orr.w	r2, r2, #16
 8008e84:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e94:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8008ea4:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0201 	orr.w	r2, r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 8008eba:	2308      	movs	r3, #8
 8008ebc:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 8008ebe:	e020      	b.n	8008f02 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	061a      	lsls	r2, r3, #24
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8008ed6:	2002      	movs	r0, #2
 8008ed8:	f7fc ff8e 	bl	8005df8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d004      	beq.n	8008ef4 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4413      	add	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e003      	b.n	8008efc <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	085b      	lsrs	r3, r3, #1
 8008f00:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1db      	bne.n	8008ec0 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	061a      	lsls	r2, r3, #24
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8008f1e:	2002      	movs	r0, #2
 8008f20:	f7fc ff6a 	bl	8005df8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3301      	adds	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	061a      	lsls	r2, r3, #24
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f60:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 8008f62:	2310      	movs	r3, #16
 8008f64:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 8008f66:	2308      	movs	r3, #8
 8008f68:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 8008f6a:	e020      	b.n	8008fae <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	04da      	lsls	r2, r3, #19
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8008f82:	2002      	movs	r0, #2
 8008f84:	f7fc ff38 	bl	8005df8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e003      	b.n	8008fa8 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1db      	bne.n	8008f6c <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	04da      	lsls	r2, r3, #19
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8008fca:	2002      	movs	r0, #2
 8008fcc:	f7fc ff14 	bl	8005df8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	04da      	lsls	r2, r3, #19
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009008:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0201 	bic.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0202 	bic.w	r2, r2, #2
 8009028:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2210      	movs	r2, #16
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	04da      	lsls	r2, r3, #19
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	061a      	lsls	r2, r3, #24
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e001      	b.n	800906e <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907a:	b08b      	sub	sp, #44	; 0x2c
 800907c:	af06      	add	r7, sp, #24
 800907e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e0d7      	b.n	800923a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f009 fe24 	bl	8012cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2203      	movs	r2, #3
 80090a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f005 fce0 	bl	800ea76 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
 80090ba:	e04c      	b.n	8009156 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	440b      	add	r3, r1
 80090cc:	3301      	adds	r3, #1
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	440b      	add	r3, r1
 80090e2:	7bfa      	ldrb	r2, [r7, #15]
 80090e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80090e6:	7bfa      	ldrb	r2, [r7, #15]
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	b298      	uxth	r0, r3
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	440b      	add	r3, r1
 80090f8:	3336      	adds	r3, #54	; 0x36
 80090fa:	4602      	mov	r2, r0
 80090fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	3303      	adds	r3, #3
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009114:	7bfa      	ldrb	r2, [r7, #15]
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	440b      	add	r3, r1
 8009122:	3338      	adds	r3, #56	; 0x38
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009128:	7bfa      	ldrb	r2, [r7, #15]
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	440b      	add	r3, r1
 8009136:	333c      	adds	r3, #60	; 0x3c
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800913c:	7bfa      	ldrb	r2, [r7, #15]
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	440b      	add	r3, r1
 800914a:	3340      	adds	r3, #64	; 0x40
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	3301      	adds	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
 8009156:	7bfa      	ldrb	r2, [r7, #15]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d3ad      	bcc.n	80090bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e044      	b.n	80091f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009166:	7bfa      	ldrb	r2, [r7, #15]
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	440b      	add	r3, r1
 8009174:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800917c:	7bfa      	ldrb	r2, [r7, #15]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	440b      	add	r3, r1
 800918a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800918e:	7bfa      	ldrb	r2, [r7, #15]
 8009190:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	440b      	add	r3, r1
 80091a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	440b      	add	r3, r1
 80091b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80091be:	7bfa      	ldrb	r2, [r7, #15]
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	440b      	add	r3, r1
 80091cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80091d4:	7bfa      	ldrb	r2, [r7, #15]
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	440b      	add	r3, r1
 80091e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3301      	adds	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
 80091f0:	7bfa      	ldrb	r2, [r7, #15]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d3b5      	bcc.n	8009166 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	687e      	ldr	r6, [r7, #4]
 8009202:	466d      	mov	r5, sp
 8009204:	f106 0410 	add.w	r4, r6, #16
 8009208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800920a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	1d33      	adds	r3, r6, #4
 8009212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009214:	6838      	ldr	r0, [r7, #0]
 8009216:	f005 fc49 	bl	800eaac <USB_DevInit>

  hpcd->USB_Address = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d102      	bne.n	8009238 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fc29 	bl	800aa8a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_PCD_Start+0x16>
 8009254:	2302      	movs	r3, #2
 8009256:	e012      	b.n	800927e <HAL_PCD_Start+0x3c>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f005 fbef 	bl	800ea48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f007 fe08 	bl	8010e84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f007 fe0d 	bl	8010eb2 <USB_ReadInterrupts>
 8009298:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb26 	bl	80098f6 <PCD_EP_ISR_Handler>

    return;
 80092aa:	e110      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d013      	beq.n	80092de <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c8:	b292      	uxth	r2, r2
 80092ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f009 fd9d 	bl	8012e0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80092d4:	2100      	movs	r1, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8fc 	bl	80094d4 <HAL_PCD_SetAddress>

    return;
 80092dc:	e0f7      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00c      	beq.n	8009302 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092fa:	b292      	uxth	r2, r2
 80092fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009300:	e0e5      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800931e:	b292      	uxth	r2, r2
 8009320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009324:	e0d3      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d034      	beq.n	800939a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0204 	bic.w	r2, r2, #4
 8009342:	b292      	uxth	r2, r2
 8009344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0208 	bic.w	r2, r2, #8
 800935a:	b292      	uxth	r2, r2
 800935c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009366:	2b01      	cmp	r3, #1
 8009368:	d107      	bne.n	800937a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009372:	2100      	movs	r1, #0
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f009 ff3f 	bl	80131f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f009 fd80 	bl	8012e80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009388:	b29a      	uxth	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009392:	b292      	uxth	r2, r2
 8009394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009398:	e099      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d027      	beq.n	80093f4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0208 	orr.w	r2, r2, #8
 80093b6:	b292      	uxth	r2, r2
 80093b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093ce:	b292      	uxth	r2, r2
 80093d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093dc:	b29a      	uxth	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0204 	orr.w	r2, r2, #4
 80093e6:	b292      	uxth	r2, r2
 80093e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f009 fd2d 	bl	8012e4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80093f2:	e06c      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d040      	beq.n	8009480 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009410:	b292      	uxth	r2, r2
 8009412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d12b      	bne.n	8009478 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0204 	orr.w	r2, r2, #4
 8009432:	b292      	uxth	r2, r2
 8009434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0208 	orr.w	r2, r2, #8
 800944a:	b292      	uxth	r2, r2
 800944c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009460:	b29b      	uxth	r3, r3
 8009462:	089b      	lsrs	r3, r3, #2
 8009464:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800946e:	2101      	movs	r1, #1
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f009 fec1 	bl	80131f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009476:	e02a      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f009 fce7 	bl	8012e4c <HAL_PCD_SuspendCallback>
    return;
 800947e:	e026      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00f      	beq.n	80094aa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800949c:	b292      	uxth	r2, r2
 800949e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f009 fca5 	bl	8012df2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80094a8:	e011      	b.n	80094ce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094c6:	b292      	uxth	r2, r2
 80094c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80094cc:	bf00      	nop
  }
}
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_PCD_SetAddress+0x1a>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e013      	b.n	8009516 <HAL_PCD_SetAddress+0x42>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f007 fca8 	bl	8010e5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	461a      	mov	r2, r3
 800952c:	4603      	mov	r3, r0
 800952e:	70fb      	strb	r3, [r7, #3]
 8009530:	460b      	mov	r3, r1
 8009532:	803b      	strh	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800953c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0e      	bge.n	8009562 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	705a      	strb	r2, [r3, #1]
 8009560:	e00e      	b.n	8009580 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	f003 0207 	and.w	r2, r3, #7
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	b2da      	uxtb	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800958c:	883a      	ldrh	r2, [r7, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	78ba      	ldrb	r2, [r7, #2]
 8009596:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80095aa:	78bb      	ldrb	r3, [r7, #2]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d102      	bne.n	80095b6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_PCD_EP_Open+0xa6>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e00e      	b.n	80095e2 <HAL_PCD_EP_Open+0xc4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68f9      	ldr	r1, [r7, #12]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f005 fa8c 	bl	800eaf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80095f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da0e      	bge.n	800961c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	705a      	strb	r2, [r3, #1]
 800961a:	e00e      	b.n	800963a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	f003 0207 	and.w	r2, r3, #7
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_PCD_EP_Close+0x6a>
 8009650:	2302      	movs	r3, #2
 8009652:	e00e      	b.n	8009672 <HAL_PCD_EP_Close+0x88>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68f9      	ldr	r1, [r7, #12]
 8009662:	4618      	mov	r0, r3
 8009664:	f005 fdd8 	bl	800f218 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	460b      	mov	r3, r1
 8009688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	f003 0207 	and.w	r2, r3, #7
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2200      	movs	r2, #0
 80096b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2200      	movs	r2, #0
 80096b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6979      	ldr	r1, [r7, #20]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f005 ff8b 	bl	800f5f2 <USB_EPStartXfer>
 80096dc:	e005      	b.n	80096ea <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6979      	ldr	r1, [r7, #20]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f005 ff84 	bl	800f5f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	f003 0207 	and.w	r2, r3, #7
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	440b      	add	r3, r1
 8009712:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009716:	681b      	ldr	r3, [r3, #0]
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	460b      	mov	r3, r1
 8009732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2200      	movs	r2, #0
 8009768:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2201      	movs	r2, #1
 800976e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009770:	7afb      	ldrb	r3, [r7, #11]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	b2da      	uxtb	r2, r3
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6979      	ldr	r1, [r7, #20]
 800978c:	4618      	mov	r0, r3
 800978e:	f005 ff30 	bl	800f5f2 <USB_EPStartXfer>
 8009792:	e005      	b.n	80097a0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6979      	ldr	r1, [r7, #20]
 800979a:	4618      	mov	r0, r3
 800979c:	f005 ff29 	bl	800f5f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	f003 0207 	and.w	r2, r3, #7
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d901      	bls.n	80097c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e03e      	b.n	8009846 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da0e      	bge.n	80097ee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4413      	add	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	705a      	strb	r2, [r3, #1]
 80097ec:	e00c      	b.n	8009808 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	4413      	add	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	f003 0307 	and.w	r3, r3, #7
 8009814:	b2da      	uxtb	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_PCD_EP_SetStall+0x7e>
 8009824:	2302      	movs	r3, #2
 8009826:	e00e      	b.n	8009846 <HAL_PCD_EP_SetStall+0x9c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	4618      	mov	r0, r3
 8009838:	f007 fa11 	bl	8010c5e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f003 020f 	and.w	r2, r3, #15
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d901      	bls.n	800986c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e040      	b.n	80098ee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800986c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009870:	2b00      	cmp	r3, #0
 8009872:	da0e      	bge.n	8009892 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	4413      	add	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	705a      	strb	r2, [r3, #1]
 8009890:	e00e      	b.n	80098b0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	f003 0207 	and.w	r2, r3, #7
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4413      	add	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_PCD_EP_ClrStall+0x82>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e00e      	b.n	80098ee <HAL_PCD_EP_ClrStall+0xa0>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68f9      	ldr	r1, [r7, #12]
 80098de:	4618      	mov	r0, r3
 80098e0:	f007 fa0e 	bl	8010d00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b096      	sub	sp, #88	; 0x58
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80098fe:	e39c      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009908:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800990c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800991a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 815e 	bne.w	8009be0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009924:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	2b00      	cmp	r3, #0
 800992e:	d150      	bne.n	80099d2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800993c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009940:	81fb      	strh	r3, [r7, #14]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	89fb      	ldrh	r3, [r7, #14]
 8009948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009950:	b29b      	uxth	r3, r3
 8009952:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3328      	adds	r3, #40	; 0x28
 8009958:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009962:	b29b      	uxth	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	4413      	add	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6812      	ldr	r2, [r2, #0]
 8009972:	4413      	add	r3, r2
 8009974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800997e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009980:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009984:	695a      	ldr	r2, [r3, #20]
 8009986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	441a      	add	r2, r3
 800998c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009990:	2100      	movs	r1, #0
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f009 fa13 	bl	8012dbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 834a 	beq.w	800a03a <PCD_EP_ISR_Handler+0x744>
 80099a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 8345 	bne.w	800a03a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b292      	uxth	r2, r2
 80099c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80099d0:	e333      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80099d8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80099e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d032      	beq.n	8009a56 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	4413      	add	r3, r2
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a16:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a24:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a28:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	f007 fa93 	bl	8010f56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	823b      	strh	r3, [r7, #16]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	8a3a      	ldrh	r2, [r7, #16]
 8009a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f009 f988 	bl	8012d64 <HAL_PCD_SetupStageCallback>
 8009a54:	e2f1      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009a56:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f280 82ed 	bge.w	800a03a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	83fb      	strh	r3, [r7, #30]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	8bfa      	ldrh	r2, [r7, #30]
 8009a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	4413      	add	r3, r2
 8009a98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d019      	beq.n	8009ae2 <PCD_EP_ISR_Handler+0x1ec>
 8009aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d015      	beq.n	8009ae2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abc:	6959      	ldr	r1, [r3, #20]
 8009abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f007 fa45 	bl	8010f56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ace:	695a      	ldr	r2, [r3, #20]
 8009ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	441a      	add	r2, r3
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f009 f953 	bl	8012d88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f040 82a3 	bne.w	800a03a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	461a      	mov	r2, r3
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	4413      	add	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b3e      	cmp	r3, #62	; 0x3e
 8009b1a:	d918      	bls.n	8009b4e <PCD_EP_ISR_Handler+0x258>
 8009b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	095b      	lsrs	r3, r3, #5
 8009b22:	647b      	str	r3, [r7, #68]	; 0x44
 8009b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <PCD_EP_ISR_Handler+0x240>
 8009b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b32:	3b01      	subs	r3, #1
 8009b34:	647b      	str	r3, [r7, #68]	; 0x44
 8009b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	029b      	lsls	r3, r3, #10
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	e029      	b.n	8009ba2 <PCD_EP_ISR_Handler+0x2ac>
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d112      	bne.n	8009b7c <PCD_EP_ISR_Handler+0x286>
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	801a      	strh	r2, [r3, #0]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	e012      	b.n	8009ba2 <PCD_EP_ISR_Handler+0x2ac>
 8009b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	085b      	lsrs	r3, r3, #1
 8009b82:	647b      	str	r3, [r7, #68]	; 0x44
 8009b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <PCD_EP_ISR_Handler+0x2a0>
 8009b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b92:	3301      	adds	r3, #1
 8009b94:	647b      	str	r3, [r7, #68]	; 0x44
 8009b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	029b      	lsls	r3, r3, #10
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb2:	827b      	strh	r3, [r7, #18]
 8009bb4:	8a7b      	ldrh	r3, [r7, #18]
 8009bb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bba:	827b      	strh	r3, [r7, #18]
 8009bbc:	8a7b      	ldrh	r3, [r7, #18]
 8009bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bc2:	827b      	strh	r3, [r7, #18]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	8a7b      	ldrh	r3, [r7, #18]
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]
 8009bde:	e22c      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009bf4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f280 80f6 	bge.w	8009dea <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009c14:	4013      	ands	r3, r2
 8009c16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c30:	b292      	uxth	r2, r2
 8009c32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009c34:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4413      	add	r3, r2
 8009c48:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4c:	7b1b      	ldrb	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d123      	bne.n	8009c9a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4413      	add	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8009c7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 808e 	beq.w	8009da0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8a:	6959      	ldr	r1, [r3, #20]
 8009c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8e:	88da      	ldrh	r2, [r3, #6]
 8009c90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c94:	f007 f95f 	bl	8010f56 <USB_ReadPMA>
 8009c98:	e082      	b.n	8009da0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9c:	78db      	ldrb	r3, [r3, #3]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d10a      	bne.n	8009cb8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009ca2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9d3 	bl	800a056 <HAL_PCD_EP_DB_Receive>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009cb6:	e073      	b.n	8009da0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	441a      	add	r2, r3
 8009ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d022      	beq.n	8009d5c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	461a      	mov	r2, r3
 8009d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	4413      	add	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6812      	ldr	r2, [r2, #0]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8009d3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d02c      	beq.n	8009da0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4c:	6959      	ldr	r1, [r3, #20]
 8009d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d50:	891a      	ldrh	r2, [r3, #8]
 8009d52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d56:	f007 f8fe 	bl	8010f56 <USB_ReadPMA>
 8009d5a:	e021      	b.n	8009da0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4413      	add	r3, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d80:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8009d84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d009      	beq.n	8009da0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d92:	6959      	ldr	r1, [r3, #20]
 8009d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d96:	895a      	ldrh	r2, [r3, #10]
 8009d98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d9c:	f007 f8db 	bl	8010f56 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	69da      	ldr	r2, [r3, #28]
 8009da4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009da8:	441a      	add	r2, r3
 8009daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db0:	695a      	ldr	r2, [r3, #20]
 8009db2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009db6:	441a      	add	r2, r3
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <PCD_EP_ISR_Handler+0x4da>
 8009dc4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d206      	bcs.n	8009dde <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f008 ffd6 	bl	8012d88 <HAL_PCD_DataOutStageCallback>
 8009ddc:	e005      	b.n	8009dea <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009de4:	4618      	mov	r0, r3
 8009de6:	f005 fc04 	bl	800f5f2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009dea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 8121 	beq.w	800a03a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8009df8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	00db      	lsls	r3, r3, #3
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	4413      	add	r3, r2
 8009e0a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	441a      	add	r2, r3
 8009e38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8009e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4a:	78db      	ldrb	r3, [r3, #3]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	f000 80a2 	beq.w	8009f96 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8009e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e54:	2200      	movs	r2, #0
 8009e56:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5a:	7b1b      	ldrb	r3, [r3, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8093 	beq.w	8009f88 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009e62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d046      	beq.n	8009efc <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d126      	bne.n	8009ec4 <PCD_EP_ISR_Handler+0x5ce>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	4413      	add	r3, r2
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	00da      	lsls	r2, r3, #3
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	4413      	add	r3, r2
 8009e98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e9c:	623b      	str	r3, [r7, #32]
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e061      	b.n	8009f88 <PCD_EP_ISR_Handler+0x692>
 8009ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d15d      	bne.n	8009f88 <PCD_EP_ISR_Handler+0x692>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	4413      	add	r3, r2
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	00da      	lsls	r2, r3, #3
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	4413      	add	r3, r2
 8009eee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	e045      	b.n	8009f88 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d126      	bne.n	8009f58 <PCD_EP_ISR_Handler+0x662>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1e:	4413      	add	r3, r2
 8009f20:	637b      	str	r3, [r7, #52]	; 0x34
 8009f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	00da      	lsls	r2, r3, #3
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f30:	633b      	str	r3, [r7, #48]	; 0x30
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	801a      	strh	r2, [r3, #0]
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	801a      	strh	r2, [r3, #0]
 8009f56:	e017      	b.n	8009f88 <PCD_EP_ISR_Handler+0x692>
 8009f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d113      	bne.n	8009f88 <PCD_EP_ISR_Handler+0x692>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6e:	4413      	add	r3, r2
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	00da      	lsls	r2, r3, #3
 8009f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	2200      	movs	r2, #0
 8009f86:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f008 ff15 	bl	8012dbe <HAL_PCD_DataInStageCallback>
 8009f94:	e051      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009f96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d144      	bne.n	800a02c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	461a      	mov	r2, r3
 8009fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	6812      	ldr	r2, [r2, #0]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d907      	bls.n	8009fe6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd8:	699a      	ldr	r2, [r3, #24]
 8009fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe2:	619a      	str	r2, [r3, #24]
 8009fe4:	e002      	b.n	8009fec <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8009fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe8:	2200      	movs	r2, #0
 8009fea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f008 fedf 	bl	8012dbe <HAL_PCD_DataInStageCallback>
 800a000:	e01b      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	695a      	ldr	r2, [r3, #20]
 800a006:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a00a:	441a      	add	r2, r3
 800a00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a00e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a012:	69da      	ldr	r2, [r3, #28]
 800a014:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a018:	441a      	add	r2, r3
 800a01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a024:	4618      	mov	r0, r3
 800a026:	f005 fae4 	bl	800f5f2 <USB_EPStartXfer>
 800a02a:	e006      	b.n	800a03a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a02c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a030:	461a      	mov	r2, r3
 800a032:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f917 	bl	800a268 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a042:	b29b      	uxth	r3, r3
 800a044:	b21b      	sxth	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	f6ff ac5a 	blt.w	8009900 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3758      	adds	r7, #88	; 0x58
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b088      	sub	sp, #32
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	4613      	mov	r3, r2
 800a062:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d07c      	beq.n	800a168 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a076:	b29b      	uxth	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	4413      	add	r3, r2
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	4413      	add	r3, r2
 800a088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a092:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	8b7b      	ldrh	r3, [r7, #26]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d306      	bcc.n	800a0ac <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	8b7b      	ldrh	r3, [r7, #26]
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	619a      	str	r2, [r3, #24]
 800a0aa:	e002      	b.n	800a0b2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d123      	bne.n	800a102 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d4:	833b      	strh	r3, [r7, #24]
 800a0d6:	8b3b      	ldrh	r3, [r7, #24]
 800a0d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0dc:	833b      	strh	r3, [r7, #24]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	441a      	add	r2, r3
 800a0ec:	8b3b      	ldrh	r3, [r7, #24]
 800a0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01f      	beq.n	800a14c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a126:	82fb      	strh	r3, [r7, #22]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	441a      	add	r2, r3
 800a136:	8afb      	ldrh	r3, [r7, #22]
 800a138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a148:	b29b      	uxth	r3, r3
 800a14a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a14c:	8b7b      	ldrh	r3, [r7, #26]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8085 	beq.w	800a25e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	6959      	ldr	r1, [r3, #20]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	891a      	ldrh	r2, [r3, #8]
 800a160:	8b7b      	ldrh	r3, [r7, #26]
 800a162:	f006 fef8 	bl	8010f56 <USB_ReadPMA>
 800a166:	e07a      	b.n	800a25e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a170:	b29b      	uxth	r3, r3
 800a172:	461a      	mov	r2, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	4413      	add	r3, r2
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	4413      	add	r3, r2
 800a182:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a18c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	8b7b      	ldrh	r3, [r7, #26]
 800a194:	429a      	cmp	r2, r3
 800a196:	d306      	bcc.n	800a1a6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	8b7b      	ldrh	r3, [r7, #26]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	619a      	str	r2, [r3, #24]
 800a1a4:	e002      	b.n	800a1ac <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d123      	bne.n	800a1fc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	83fb      	strh	r3, [r7, #30]
 800a1d0:	8bfb      	ldrh	r3, [r7, #30]
 800a1d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1d6:	83fb      	strh	r3, [r7, #30]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	441a      	add	r2, r3
 800a1e6:	8bfb      	ldrh	r3, [r7, #30]
 800a1e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	d11f      	bne.n	800a246 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a220:	83bb      	strh	r3, [r7, #28]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	441a      	add	r2, r3
 800a230:	8bbb      	ldrh	r3, [r7, #28]
 800a232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a242:	b29b      	uxth	r3, r3
 800a244:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a246:	8b7b      	ldrh	r3, [r7, #26]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	6959      	ldr	r1, [r3, #20]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	895a      	ldrh	r2, [r3, #10]
 800a258:	8b7b      	ldrh	r3, [r7, #26]
 800a25a:	f006 fe7c 	bl	8010f56 <USB_ReadPMA>
    }
  }

  return count;
 800a25e:	8b7b      	ldrh	r3, [r7, #26]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b0a2      	sub	sp, #136	; 0x88
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 81c5 	beq.w	800a60c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	461a      	mov	r2, r3
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4413      	add	r3, r2
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	4413      	add	r3, r2
 800a29c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d907      	bls.n	800a2c6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	619a      	str	r2, [r3, #24]
 800a2c4:	e002      	b.n	800a2cc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 80b9 	bne.w	800a448 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d126      	bne.n	800a32c <HAL_PCD_EP_DB_Transmit+0xc4>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	4413      	add	r3, r2
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	00da      	lsls	r2, r3, #3
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	4413      	add	r3, r2
 800a300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a310:	b29a      	uxth	r2, r3
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a324:	b29a      	uxth	r2, r3
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	e01a      	b.n	800a362 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d116      	bne.n	800a362 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	633b      	str	r3, [r7, #48]	; 0x30
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a342:	b29b      	uxth	r3, r3
 800a344:	461a      	mov	r2, r3
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	4413      	add	r3, r2
 800a34a:	633b      	str	r3, [r7, #48]	; 0x30
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	00da      	lsls	r2, r3, #3
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	4413      	add	r3, r2
 800a356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	2200      	movs	r2, #0
 800a360:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	623b      	str	r3, [r7, #32]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d126      	bne.n	800a3be <HAL_PCD_EP_DB_Transmit+0x156>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a37e:	b29b      	uxth	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	4413      	add	r3, r2
 800a386:	61bb      	str	r3, [r7, #24]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	00da      	lsls	r2, r3, #3
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	4413      	add	r3, r2
 800a392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	801a      	strh	r2, [r3, #0]
 800a3bc:	e017      	b.n	800a3ee <HAL_PCD_EP_DB_Transmit+0x186>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d113      	bne.n	800a3ee <HAL_PCD_EP_DB_Transmit+0x186>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	623b      	str	r3, [r7, #32]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	00da      	lsls	r2, r3, #3
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f008 fce2 	bl	8012dbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 82d2 	beq.w	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a420:	827b      	strh	r3, [r7, #18]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	441a      	add	r2, r3
 800a430:	8a7b      	ldrh	r3, [r7, #18]
 800a432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a442:	b29b      	uxth	r3, r3
 800a444:	8013      	strh	r3, [r2, #0]
 800a446:	e2b0      	b.n	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d021      	beq.n	800a496 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	b29b      	uxth	r3, r3
 800a464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a46c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	441a      	add	r2, r3
 800a47e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a48a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a492:	b29b      	uxth	r3, r3
 800a494:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	f040 8284 	bne.w	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	695a      	ldr	r2, [r3, #20]
 800a4a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4aa:	441a      	add	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	69da      	ldr	r2, [r3, #28]
 800a4b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4b8:	441a      	add	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6a1a      	ldr	r2, [r3, #32]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d309      	bcc.n	800a4de <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6a1a      	ldr	r2, [r3, #32]
 800a4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	621a      	str	r2, [r3, #32]
 800a4dc:	e015      	b.n	800a50a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d107      	bne.n	800a4f6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800a4e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a4f4:	e009      	b.n	800a50a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2200      	movs	r2, #0
 800a508:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d155      	bne.n	800a5be <HAL_PCD_EP_DB_Transmit+0x356>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	63bb      	str	r3, [r7, #56]	; 0x38
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a520:	b29b      	uxth	r3, r3
 800a522:	461a      	mov	r2, r3
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	4413      	add	r3, r2
 800a528:	63bb      	str	r3, [r7, #56]	; 0x38
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	00da      	lsls	r2, r3, #3
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	4413      	add	r3, r2
 800a534:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
 800a53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a53c:	2b3e      	cmp	r3, #62	; 0x3e
 800a53e:	d916      	bls.n	800a56e <HAL_PCD_EP_DB_Transmit+0x306>
 800a540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a542:	095b      	lsrs	r3, r3, #5
 800a544:	64bb      	str	r3, [r7, #72]	; 0x48
 800a546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a548:	f003 031f 	and.w	r3, r3, #31
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800a550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a552:	3b01      	subs	r3, #1
 800a554:	64bb      	str	r3, [r7, #72]	; 0x48
 800a556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a558:	b29b      	uxth	r3, r3
 800a55a:	029b      	lsls	r3, r3, #10
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a566:	b29a      	uxth	r2, r3
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	e043      	b.n	800a5f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a570:	2b00      	cmp	r3, #0
 800a572:	d112      	bne.n	800a59a <HAL_PCD_EP_DB_Transmit+0x332>
 800a574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a57e:	b29a      	uxth	r2, r3
 800a580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a582:	801a      	strh	r2, [r3, #0]
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a592:	b29a      	uxth	r2, r3
 800a594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a596:	801a      	strh	r2, [r3, #0]
 800a598:	e02d      	b.n	800a5f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <HAL_PCD_EP_DB_Transmit+0x348>
 800a5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ba:	801a      	strh	r2, [r3, #0]
 800a5bc:	e01b      	b.n	800a5f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d117      	bne.n	800a5f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5da:	4413      	add	r3, r2
 800a5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	00da      	lsls	r2, r3, #3
 800a5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	6959      	ldr	r1, [r3, #20]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	891a      	ldrh	r2, [r3, #8]
 800a602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a604:	b29b      	uxth	r3, r3
 800a606:	f006 fc64 	bl	8010ed2 <USB_WritePMA>
 800a60a:	e1ce      	b.n	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a614:	b29b      	uxth	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	4413      	add	r3, r2
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	4413      	add	r3, r2
 800a626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a630:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d307      	bcc.n	800a650 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a648:	1ad2      	subs	r2, r2, r3
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	619a      	str	r2, [r3, #24]
 800a64e:	e002      	b.n	800a656 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f040 80c4 	bne.w	800a7e8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d126      	bne.n	800a6b6 <HAL_PCD_EP_DB_Transmit+0x44e>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a67c:	4413      	add	r3, r2
 800a67e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	00da      	lsls	r2, r3, #3
 800a686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a688:	4413      	add	r3, r2
 800a68a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a68e:	667b      	str	r3, [r7, #100]	; 0x64
 800a690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b29b      	uxth	r3, r3
 800a696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	e01a      	b.n	800a6ec <HAL_PCD_EP_DB_Transmit+0x484>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d116      	bne.n	800a6ec <HAL_PCD_EP_DB_Transmit+0x484>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	673b      	str	r3, [r7, #112]	; 0x70
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6d2:	4413      	add	r3, r2
 800a6d4:	673b      	str	r3, [r7, #112]	; 0x70
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	00da      	lsls	r2, r3, #3
 800a6dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6de:	4413      	add	r3, r2
 800a6e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	785b      	ldrb	r3, [r3, #1]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d12f      	bne.n	800a75a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a712:	4413      	add	r3, r2
 800a714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	00da      	lsls	r2, r3, #3
 800a71e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a722:	4413      	add	r3, r2
 800a724:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a72c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a756:	801a      	strh	r2, [r3, #0]
 800a758:	e017      	b.n	800a78a <HAL_PCD_EP_DB_Transmit+0x522>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	785b      	ldrb	r3, [r3, #1]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d113      	bne.n	800a78a <HAL_PCD_EP_DB_Transmit+0x522>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a770:	4413      	add	r3, r2
 800a772:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	00da      	lsls	r2, r3, #3
 800a77a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a77c:	4413      	add	r3, r2
 800a77e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a782:	67bb      	str	r3, [r7, #120]	; 0x78
 800a784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a786:	2200      	movs	r2, #0
 800a788:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	4619      	mov	r1, r3
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f008 fb14 	bl	8012dbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f040 8104 	bne.w	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	441a      	add	r2, r3
 800a7ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]
 800a7e6:	e0e0      	b.n	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d121      	bne.n	800a836 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a80c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	441a      	add	r2, r3
 800a81e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a82a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a832:	b29b      	uxth	r3, r3
 800a834:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	f040 80b4 	bne.w	800a9aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	695a      	ldr	r2, [r3, #20]
 800a846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a84a:	441a      	add	r2, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a858:	441a      	add	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6a1a      	ldr	r2, [r3, #32]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	429a      	cmp	r2, r3
 800a868:	d309      	bcc.n	800a87e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	621a      	str	r2, [r3, #32]
 800a87c:	e015      	b.n	800a8aa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d107      	bne.n	800a896 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800a886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a88a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a894:	e009      	b.n	800a8aa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	785b      	ldrb	r3, [r3, #1]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d155      	bne.n	800a964 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8cc:	4413      	add	r3, r2
 800a8ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	00da      	lsls	r2, r3, #3
 800a8d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8d8:	4413      	add	r3, r2
 800a8da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e2:	2b3e      	cmp	r3, #62	; 0x3e
 800a8e4:	d916      	bls.n	800a914 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800a8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	677b      	str	r3, [r7, #116]	; 0x74
 800a8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ee:	f003 031f 	and.w	r3, r3, #31
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <HAL_PCD_EP_DB_Transmit+0x694>
 800a8f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	677b      	str	r3, [r7, #116]	; 0x74
 800a8fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	029b      	lsls	r3, r3, #10
 800a902:	b29b      	uxth	r3, r3
 800a904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a910:	801a      	strh	r2, [r3, #0]
 800a912:	e040      	b.n	800a996 <HAL_PCD_EP_DB_Transmit+0x72e>
 800a914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a916:	2b00      	cmp	r3, #0
 800a918:	d112      	bne.n	800a940 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800a91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a924:	b29a      	uxth	r2, r3
 800a926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a938:	b29a      	uxth	r2, r3
 800a93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93c:	801a      	strh	r2, [r3, #0]
 800a93e:	e02a      	b.n	800a996 <HAL_PCD_EP_DB_Transmit+0x72e>
 800a940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	677b      	str	r3, [r7, #116]	; 0x74
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800a950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a952:	3301      	adds	r3, #1
 800a954:	677b      	str	r3, [r7, #116]	; 0x74
 800a956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a958:	b29b      	uxth	r3, r3
 800a95a:	029b      	lsls	r3, r3, #10
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a960:	801a      	strh	r2, [r3, #0]
 800a962:	e018      	b.n	800a996 <HAL_PCD_EP_DB_Transmit+0x72e>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d114      	bne.n	800a996 <HAL_PCD_EP_DB_Transmit+0x72e>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a974:	b29b      	uxth	r3, r3
 800a976:	461a      	mov	r2, r3
 800a978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a97a:	4413      	add	r3, r2
 800a97c:	663b      	str	r3, [r7, #96]	; 0x60
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	00da      	lsls	r2, r3, #3
 800a984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a986:	4413      	add	r3, r2
 800a988:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a98c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a990:	b29a      	uxth	r2, r3
 800a992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a994:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	6959      	ldr	r1, [r3, #20]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	895a      	ldrh	r2, [r3, #10]
 800a9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f006 fa94 	bl	8010ed2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c4:	823b      	strh	r3, [r7, #16]
 800a9c6:	8a3b      	ldrh	r3, [r7, #16]
 800a9c8:	f083 0310 	eor.w	r3, r3, #16
 800a9cc:	823b      	strh	r3, [r7, #16]
 800a9ce:	8a3b      	ldrh	r3, [r7, #16]
 800a9d0:	f083 0320 	eor.w	r3, r3, #32
 800a9d4:	823b      	strh	r3, [r7, #16]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	441a      	add	r2, r3
 800a9e4:	8a3b      	ldrh	r3, [r7, #16]
 800a9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3788      	adds	r7, #136	; 0x88
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	817b      	strh	r3, [r7, #10]
 800aa12:	4613      	mov	r3, r2
 800aa14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800aa16:	897b      	ldrh	r3, [r7, #10]
 800aa18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00b      	beq.n	800aa3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa22:	897b      	ldrh	r3, [r7, #10]
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	e009      	b.n	800aa4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aa3a:	897a      	ldrh	r2, [r7, #10]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800aa4e:	893b      	ldrh	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2200      	movs	r2, #0
 800aa58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	80da      	strh	r2, [r3, #6]
 800aa62:	e00b      	b.n	800aa7c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2201      	movs	r2, #1
 800aa68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	0c1b      	lsrs	r3, r3, #16
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	371c      	adds	r7, #28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f043 0301 	orr.w	r3, r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	f043 0302 	orr.w	r3, r3, #2
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
	...

0800aae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d141      	bne.n	800ab72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aaee:	4b4b      	ldr	r3, [pc, #300]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aaf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafa:	d131      	bne.n	800ab60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aafc:	4b47      	ldr	r3, [pc, #284]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab02:	4a46      	ldr	r2, [pc, #280]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab0c:	4b43      	ldr	r3, [pc, #268]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab14:	4a41      	ldr	r2, [pc, #260]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab1c:	4b40      	ldr	r3, [pc, #256]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2232      	movs	r2, #50	; 0x32
 800ab22:	fb02 f303 	mul.w	r3, r2, r3
 800ab26:	4a3f      	ldr	r2, [pc, #252]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab28:	fba2 2303 	umull	r2, r3, r2, r3
 800ab2c:	0c9b      	lsrs	r3, r3, #18
 800ab2e:	3301      	adds	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab32:	e002      	b.n	800ab3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab3a:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab46:	d102      	bne.n	800ab4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1f2      	bne.n	800ab34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab4e:	4b33      	ldr	r3, [pc, #204]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab5a:	d158      	bne.n	800ac0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e057      	b.n	800ac10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab60:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab66:	4a2d      	ldr	r2, [pc, #180]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab70:	e04d      	b.n	800ac0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab78:	d141      	bne.n	800abfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab7a:	4b28      	ldr	r3, [pc, #160]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab86:	d131      	bne.n	800abec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab88:	4b24      	ldr	r3, [pc, #144]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8e:	4a23      	ldr	r2, [pc, #140]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab98:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aba0:	4a1e      	ldr	r2, [pc, #120]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aba8:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2232      	movs	r2, #50	; 0x32
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	4a1c      	ldr	r2, [pc, #112]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800abb4:	fba2 2303 	umull	r2, r3, r2, r3
 800abb8:	0c9b      	lsrs	r3, r3, #18
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abbe:	e002      	b.n	800abc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd2:	d102      	bne.n	800abda <HAL_PWREx_ControlVoltageScaling+0xfa>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f2      	bne.n	800abc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800abda:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abe6:	d112      	bne.n	800ac0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e011      	b.n	800ac10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abec:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abf2:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800abfc:	e007      	b.n	800ac0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800abfe:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	40007000 	.word	0x40007000
 800ac20:	20000000 	.word	0x20000000
 800ac24:	431bde83 	.word	0x431bde83

0800ac28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e306      	b.n	800b248 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d075      	beq.n	800ad32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac46:	4b97      	ldr	r3, [pc, #604]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f003 030c 	and.w	r3, r3, #12
 800ac4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac50:	4b94      	ldr	r3, [pc, #592]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b0c      	cmp	r3, #12
 800ac5e:	d102      	bne.n	800ac66 <HAL_RCC_OscConfig+0x3e>
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d002      	beq.n	800ac6c <HAL_RCC_OscConfig+0x44>
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d10b      	bne.n	800ac84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac6c:	4b8d      	ldr	r3, [pc, #564]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d05b      	beq.n	800ad30 <HAL_RCC_OscConfig+0x108>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d157      	bne.n	800ad30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e2e1      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8c:	d106      	bne.n	800ac9c <HAL_RCC_OscConfig+0x74>
 800ac8e:	4b85      	ldr	r3, [pc, #532]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a84      	ldr	r2, [pc, #528]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ac94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	e01d      	b.n	800acd8 <HAL_RCC_OscConfig+0xb0>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca4:	d10c      	bne.n	800acc0 <HAL_RCC_OscConfig+0x98>
 800aca6:	4b7f      	ldr	r3, [pc, #508]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a7e      	ldr	r2, [pc, #504]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	4b7c      	ldr	r3, [pc, #496]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a7b      	ldr	r2, [pc, #492]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	e00b      	b.n	800acd8 <HAL_RCC_OscConfig+0xb0>
 800acc0:	4b78      	ldr	r3, [pc, #480]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a77      	ldr	r2, [pc, #476]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	4b75      	ldr	r3, [pc, #468]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a74      	ldr	r2, [pc, #464]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d013      	beq.n	800ad08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace0:	f7fb f87e 	bl	8005de0 <HAL_GetTick>
 800ace4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ace6:	e008      	b.n	800acfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ace8:	f7fb f87a 	bl	8005de0 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b64      	cmp	r3, #100	; 0x64
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e2a6      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acfa:	4b6a      	ldr	r3, [pc, #424]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0f0      	beq.n	800ace8 <HAL_RCC_OscConfig+0xc0>
 800ad06:	e014      	b.n	800ad32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad08:	f7fb f86a 	bl	8005de0 <HAL_GetTick>
 800ad0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad0e:	e008      	b.n	800ad22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad10:	f7fb f866 	bl	8005de0 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	2b64      	cmp	r3, #100	; 0x64
 800ad1c:	d901      	bls.n	800ad22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e292      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad22:	4b60      	ldr	r3, [pc, #384]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f0      	bne.n	800ad10 <HAL_RCC_OscConfig+0xe8>
 800ad2e:	e000      	b.n	800ad32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d075      	beq.n	800ae2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad3e:	4b59      	ldr	r3, [pc, #356]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f003 030c 	and.w	r3, r3, #12
 800ad46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad48:	4b56      	ldr	r3, [pc, #344]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	f003 0303 	and.w	r3, r3, #3
 800ad50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b0c      	cmp	r3, #12
 800ad56:	d102      	bne.n	800ad5e <HAL_RCC_OscConfig+0x136>
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d002      	beq.n	800ad64 <HAL_RCC_OscConfig+0x13c>
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b04      	cmp	r3, #4
 800ad62:	d11f      	bne.n	800ada4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad64:	4b4f      	ldr	r3, [pc, #316]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_RCC_OscConfig+0x154>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e265      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad7c:	4b49      	ldr	r3, [pc, #292]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	061b      	lsls	r3, r3, #24
 800ad8a:	4946      	ldr	r1, [pc, #280]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ad90:	4b45      	ldr	r3, [pc, #276]	; (800aea8 <HAL_RCC_OscConfig+0x280>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fa ffd7 	bl	8005d48 <HAL_InitTick>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d043      	beq.n	800ae28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e251      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d023      	beq.n	800adf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adac:	4b3d      	ldr	r3, [pc, #244]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a3c      	ldr	r2, [pc, #240]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800adb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb8:	f7fb f812 	bl	8005de0 <HAL_GetTick>
 800adbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc0:	f7fb f80e 	bl	8005de0 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e23a      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800add2:	4b34      	ldr	r3, [pc, #208]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0f0      	beq.n	800adc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adde:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	061b      	lsls	r3, r3, #24
 800adec:	492d      	ldr	r1, [pc, #180]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800adee:	4313      	orrs	r3, r2
 800adf0:	604b      	str	r3, [r1, #4]
 800adf2:	e01a      	b.n	800ae2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adf4:	4b2b      	ldr	r3, [pc, #172]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a2a      	ldr	r2, [pc, #168]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800adfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae00:	f7fa ffee 	bl	8005de0 <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae08:	f7fa ffea 	bl	8005de0 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e216      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae1a:	4b22      	ldr	r3, [pc, #136]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f0      	bne.n	800ae08 <HAL_RCC_OscConfig+0x1e0>
 800ae26:	e000      	b.n	800ae2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d041      	beq.n	800aeba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01c      	beq.n	800ae78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae3e:	4b19      	ldr	r3, [pc, #100]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae44:	4a17      	ldr	r2, [pc, #92]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae4e:	f7fa ffc7 	bl	8005de0 <HAL_GetTick>
 800ae52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae54:	e008      	b.n	800ae68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae56:	f7fa ffc3 	bl	8005de0 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d901      	bls.n	800ae68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e1ef      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae68:	4b0e      	ldr	r3, [pc, #56]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0ef      	beq.n	800ae56 <HAL_RCC_OscConfig+0x22e>
 800ae76:	e020      	b.n	800aeba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <HAL_RCC_OscConfig+0x27c>)
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae88:	f7fa ffaa 	bl	8005de0 <HAL_GetTick>
 800ae8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae8e:	e00d      	b.n	800aeac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae90:	f7fa ffa6 	bl	8005de0 <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d906      	bls.n	800aeac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	e1d2      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
 800aea2:	bf00      	nop
 800aea4:	40021000 	.word	0x40021000
 800aea8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aeac:	4b8c      	ldr	r3, [pc, #560]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aeae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1ea      	bne.n	800ae90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80a6 	beq.w	800b014 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aec8:	2300      	movs	r3, #0
 800aeca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aecc:	4b84      	ldr	r3, [pc, #528]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_RCC_OscConfig+0x2b4>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e000      	b.n	800aede <HAL_RCC_OscConfig+0x2b6>
 800aedc:	2300      	movs	r3, #0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00d      	beq.n	800aefe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aee2:	4b7f      	ldr	r3, [pc, #508]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee6:	4a7e      	ldr	r2, [pc, #504]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeec:	6593      	str	r3, [r2, #88]	; 0x58
 800aeee:	4b7c      	ldr	r3, [pc, #496]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aefa:	2301      	movs	r3, #1
 800aefc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aefe:	4b79      	ldr	r3, [pc, #484]	; (800b0e4 <HAL_RCC_OscConfig+0x4bc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af06:	2b00      	cmp	r3, #0
 800af08:	d118      	bne.n	800af3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af0a:	4b76      	ldr	r3, [pc, #472]	; (800b0e4 <HAL_RCC_OscConfig+0x4bc>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a75      	ldr	r2, [pc, #468]	; (800b0e4 <HAL_RCC_OscConfig+0x4bc>)
 800af10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af16:	f7fa ff63 	bl	8005de0 <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af1e:	f7fa ff5f 	bl	8005de0 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e18b      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af30:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <HAL_RCC_OscConfig+0x4bc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d108      	bne.n	800af56 <HAL_RCC_OscConfig+0x32e>
 800af44:	4b66      	ldr	r3, [pc, #408]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4a:	4a65      	ldr	r2, [pc, #404]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af54:	e024      	b.n	800afa0 <HAL_RCC_OscConfig+0x378>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d110      	bne.n	800af80 <HAL_RCC_OscConfig+0x358>
 800af5e:	4b60      	ldr	r3, [pc, #384]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af64:	4a5e      	ldr	r2, [pc, #376]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af66:	f043 0304 	orr.w	r3, r3, #4
 800af6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af6e:	4b5c      	ldr	r3, [pc, #368]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af74:	4a5a      	ldr	r2, [pc, #360]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af7e:	e00f      	b.n	800afa0 <HAL_RCC_OscConfig+0x378>
 800af80:	4b57      	ldr	r3, [pc, #348]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af86:	4a56      	ldr	r2, [pc, #344]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af88:	f023 0301 	bic.w	r3, r3, #1
 800af8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af90:	4b53      	ldr	r3, [pc, #332]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af96:	4a52      	ldr	r2, [pc, #328]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800af98:	f023 0304 	bic.w	r3, r3, #4
 800af9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d016      	beq.n	800afd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afa8:	f7fa ff1a 	bl	8005de0 <HAL_GetTick>
 800afac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afae:	e00a      	b.n	800afc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afb0:	f7fa ff16 	bl	8005de0 <HAL_GetTick>
 800afb4:	4602      	mov	r2, r0
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	f241 3288 	movw	r2, #5000	; 0x1388
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e140      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afc6:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800afc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0ed      	beq.n	800afb0 <HAL_RCC_OscConfig+0x388>
 800afd4:	e015      	b.n	800b002 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd6:	f7fa ff03 	bl	8005de0 <HAL_GetTick>
 800afda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800afdc:	e00a      	b.n	800aff4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afde:	f7fa feff 	bl	8005de0 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afec:	4293      	cmp	r3, r2
 800afee:	d901      	bls.n	800aff4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e129      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aff4:	4b3a      	ldr	r3, [pc, #232]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800aff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1ed      	bne.n	800afde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b002:	7ffb      	ldrb	r3, [r7, #31]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d105      	bne.n	800b014 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b008:	4b35      	ldr	r3, [pc, #212]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00c:	4a34      	ldr	r2, [pc, #208]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b00e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d03c      	beq.n	800b09a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01c      	beq.n	800b062 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b028:	4b2d      	ldr	r3, [pc, #180]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b02a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b02e:	4a2c      	ldr	r2, [pc, #176]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b030:	f043 0301 	orr.w	r3, r3, #1
 800b034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b038:	f7fa fed2 	bl	8005de0 <HAL_GetTick>
 800b03c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b03e:	e008      	b.n	800b052 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b040:	f7fa fece 	bl	8005de0 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e0fa      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b052:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0ef      	beq.n	800b040 <HAL_RCC_OscConfig+0x418>
 800b060:	e01b      	b.n	800b09a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b062:	4b1f      	ldr	r3, [pc, #124]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b068:	4a1d      	ldr	r2, [pc, #116]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b06a:	f023 0301 	bic.w	r3, r3, #1
 800b06e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b072:	f7fa feb5 	bl	8005de0 <HAL_GetTick>
 800b076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b078:	e008      	b.n	800b08c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b07a:	f7fa feb1 	bl	8005de0 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	2b02      	cmp	r3, #2
 800b086:	d901      	bls.n	800b08c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e0dd      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b08c:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b08e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1ef      	bne.n	800b07a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80d1 	beq.w	800b246 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0a4:	4b0e      	ldr	r3, [pc, #56]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f003 030c 	and.w	r3, r3, #12
 800b0ac:	2b0c      	cmp	r3, #12
 800b0ae:	f000 808b 	beq.w	800b1c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d15e      	bne.n	800b178 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a08      	ldr	r2, [pc, #32]	; (800b0e0 <HAL_RCC_OscConfig+0x4b8>)
 800b0c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c6:	f7fa fe8b 	bl	8005de0 <HAL_GetTick>
 800b0ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0cc:	e00c      	b.n	800b0e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0ce:	f7fa fe87 	bl	8005de0 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d905      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e0b3      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
 800b0e0:	40021000 	.word	0x40021000
 800b0e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0e8:	4b59      	ldr	r3, [pc, #356]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1ec      	bne.n	800b0ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0f4:	4b56      	ldr	r3, [pc, #344]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	4b56      	ldr	r3, [pc, #344]	; (800b254 <HAL_RCC_OscConfig+0x62c>)
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6a11      	ldr	r1, [r2, #32]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b104:	3a01      	subs	r2, #1
 800b106:	0112      	lsls	r2, r2, #4
 800b108:	4311      	orrs	r1, r2
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b10e:	0212      	lsls	r2, r2, #8
 800b110:	4311      	orrs	r1, r2
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b116:	0852      	lsrs	r2, r2, #1
 800b118:	3a01      	subs	r2, #1
 800b11a:	0552      	lsls	r2, r2, #21
 800b11c:	4311      	orrs	r1, r2
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b122:	0852      	lsrs	r2, r2, #1
 800b124:	3a01      	subs	r2, #1
 800b126:	0652      	lsls	r2, r2, #25
 800b128:	4311      	orrs	r1, r2
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b12e:	06d2      	lsls	r2, r2, #27
 800b130:	430a      	orrs	r2, r1
 800b132:	4947      	ldr	r1, [pc, #284]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b134:	4313      	orrs	r3, r2
 800b136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b138:	4b45      	ldr	r3, [pc, #276]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a44      	ldr	r2, [pc, #272]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b13e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b144:	4b42      	ldr	r3, [pc, #264]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	4a41      	ldr	r2, [pc, #260]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b14a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b14e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b150:	f7fa fe46 	bl	8005de0 <HAL_GetTick>
 800b154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b156:	e008      	b.n	800b16a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b158:	f7fa fe42 	bl	8005de0 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	2b02      	cmp	r3, #2
 800b164:	d901      	bls.n	800b16a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e06e      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b16a:	4b39      	ldr	r3, [pc, #228]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0f0      	beq.n	800b158 <HAL_RCC_OscConfig+0x530>
 800b176:	e066      	b.n	800b246 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b178:	4b35      	ldr	r3, [pc, #212]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a34      	ldr	r2, [pc, #208]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b17e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b182:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b184:	4b32      	ldr	r3, [pc, #200]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	4a31      	ldr	r2, [pc, #196]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b190:	4b2f      	ldr	r3, [pc, #188]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4a2e      	ldr	r2, [pc, #184]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b196:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a0:	f7fa fe1e 	bl	8005de0 <HAL_GetTick>
 800b1a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1a8:	f7fa fe1a 	bl	8005de0 <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e046      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1ba:	4b25      	ldr	r3, [pc, #148]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1f0      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x580>
 800b1c6:	e03e      	b.n	800b246 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d101      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e039      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b1d4:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <HAL_RCC_OscConfig+0x628>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f003 0203 	and.w	r2, r3, #3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d12c      	bne.n	800b242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d123      	bne.n	800b242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b206:	429a      	cmp	r2, r3
 800b208:	d11b      	bne.n	800b242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b216:	429a      	cmp	r2, r3
 800b218:	d113      	bne.n	800b242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	085b      	lsrs	r3, r3, #1
 800b226:	3b01      	subs	r3, #1
 800b228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d109      	bne.n	800b242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b238:	085b      	lsrs	r3, r3, #1
 800b23a:	3b01      	subs	r3, #1
 800b23c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b23e:	429a      	cmp	r2, r3
 800b240:	d001      	beq.n	800b246 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	40021000 	.word	0x40021000
 800b254:	019f800c 	.word	0x019f800c

0800b258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b262:	2300      	movs	r3, #0
 800b264:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e11e      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b270:	4b91      	ldr	r3, [pc, #580]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d910      	bls.n	800b2a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b27e:	4b8e      	ldr	r3, [pc, #568]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f023 020f 	bic.w	r2, r3, #15
 800b286:	498c      	ldr	r1, [pc, #560]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b28e:	4b8a      	ldr	r3, [pc, #552]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d001      	beq.n	800b2a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e106      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d073      	beq.n	800b394 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d129      	bne.n	800b308 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2b4:	4b81      	ldr	r3, [pc, #516]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e0f4      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b2c4:	f000 f99e 	bl	800b604 <RCC_GetSysClockFreqFromPLLSource>
 800b2c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	4a7c      	ldr	r2, [pc, #496]	; (800b4c0 <HAL_RCC_ClockConfig+0x268>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d93f      	bls.n	800b352 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b2d2:	4b7a      	ldr	r3, [pc, #488]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d033      	beq.n	800b352 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d12f      	bne.n	800b352 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b2f2:	4b72      	ldr	r3, [pc, #456]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2fa:	4a70      	ldr	r2, [pc, #448]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b302:	2380      	movs	r3, #128	; 0x80
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	e024      	b.n	800b352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d107      	bne.n	800b320 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b310:	4b6a      	ldr	r3, [pc, #424]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e0c6      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b320:	4b66      	ldr	r3, [pc, #408]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e0be      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b330:	f000 f8ce 	bl	800b4d0 <HAL_RCC_GetSysClockFreq>
 800b334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	4a61      	ldr	r2, [pc, #388]	; (800b4c0 <HAL_RCC_ClockConfig+0x268>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d909      	bls.n	800b352 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b33e:	4b5f      	ldr	r3, [pc, #380]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b346:	4a5d      	ldr	r2, [pc, #372]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b34c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b34e:	2380      	movs	r3, #128	; 0x80
 800b350:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b352:	4b5a      	ldr	r3, [pc, #360]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f023 0203 	bic.w	r2, r3, #3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4957      	ldr	r1, [pc, #348]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b360:	4313      	orrs	r3, r2
 800b362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b364:	f7fa fd3c 	bl	8005de0 <HAL_GetTick>
 800b368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b36a:	e00a      	b.n	800b382 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b36c:	f7fa fd38 	bl	8005de0 <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	f241 3288 	movw	r2, #5000	; 0x1388
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d901      	bls.n	800b382 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e095      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b382:	4b4e      	ldr	r3, [pc, #312]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 020c 	and.w	r2, r3, #12
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	429a      	cmp	r2, r3
 800b392:	d1eb      	bne.n	800b36c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d023      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d005      	beq.n	800b3b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3ac:	4b43      	ldr	r3, [pc, #268]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	4a42      	ldr	r2, [pc, #264]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0308 	and.w	r3, r3, #8
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d007      	beq.n	800b3d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b3c4:	4b3d      	ldr	r3, [pc, #244]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3cc:	4a3b      	ldr	r2, [pc, #236]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3d4:	4b39      	ldr	r3, [pc, #228]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	4936      	ldr	r1, [pc, #216]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	608b      	str	r3, [r1, #8]
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b80      	cmp	r3, #128	; 0x80
 800b3ec:	d105      	bne.n	800b3fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b3ee:	4b33      	ldr	r3, [pc, #204]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	4a32      	ldr	r2, [pc, #200]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b3f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3fa:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 030f 	and.w	r3, r3, #15
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d21d      	bcs.n	800b444 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b408:	4b2b      	ldr	r3, [pc, #172]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f023 020f 	bic.w	r2, r3, #15
 800b410:	4929      	ldr	r1, [pc, #164]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	4313      	orrs	r3, r2
 800b416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b418:	f7fa fce2 	bl	8005de0 <HAL_GetTick>
 800b41c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b41e:	e00a      	b.n	800b436 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b420:	f7fa fcde 	bl	8005de0 <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42e:	4293      	cmp	r3, r2
 800b430:	d901      	bls.n	800b436 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e03b      	b.n	800b4ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b436:	4b20      	ldr	r3, [pc, #128]	; (800b4b8 <HAL_RCC_ClockConfig+0x260>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 030f 	and.w	r3, r3, #15
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d1ed      	bne.n	800b420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d008      	beq.n	800b462 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b450:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	4917      	ldr	r1, [pc, #92]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	490f      	ldr	r1, [pc, #60]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b482:	f000 f825 	bl	800b4d0 <HAL_RCC_GetSysClockFreq>
 800b486:	4602      	mov	r2, r0
 800b488:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <HAL_RCC_ClockConfig+0x264>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	091b      	lsrs	r3, r3, #4
 800b48e:	f003 030f 	and.w	r3, r3, #15
 800b492:	490c      	ldr	r1, [pc, #48]	; (800b4c4 <HAL_RCC_ClockConfig+0x26c>)
 800b494:	5ccb      	ldrb	r3, [r1, r3]
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	fa22 f303 	lsr.w	r3, r2, r3
 800b49e:	4a0a      	ldr	r2, [pc, #40]	; (800b4c8 <HAL_RCC_ClockConfig+0x270>)
 800b4a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <HAL_RCC_ClockConfig+0x274>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fa fc4e 	bl	8005d48 <HAL_InitTick>
 800b4ac:	4603      	mov	r3, r0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	40022000 	.word	0x40022000
 800b4bc:	40021000 	.word	0x40021000
 800b4c0:	04c4b400 	.word	0x04c4b400
 800b4c4:	0801678c 	.word	0x0801678c
 800b4c8:	20000000 	.word	0x20000000
 800b4cc:	20000004 	.word	0x20000004

0800b4d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b4d6:	4b2c      	ldr	r3, [pc, #176]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f003 030c 	and.w	r3, r3, #12
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d102      	bne.n	800b4e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b4e2:	4b2a      	ldr	r3, [pc, #168]	; (800b58c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4e4:	613b      	str	r3, [r7, #16]
 800b4e6:	e047      	b.n	800b578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b4e8:	4b27      	ldr	r3, [pc, #156]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f003 030c 	and.w	r3, r3, #12
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d102      	bne.n	800b4fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b4f4:	4b26      	ldr	r3, [pc, #152]	; (800b590 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	e03e      	b.n	800b578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b4fa:	4b23      	ldr	r3, [pc, #140]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f003 030c 	and.w	r3, r3, #12
 800b502:	2b0c      	cmp	r3, #12
 800b504:	d136      	bne.n	800b574 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b506:	4b20      	ldr	r3, [pc, #128]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b510:	4b1d      	ldr	r3, [pc, #116]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	091b      	lsrs	r3, r3, #4
 800b516:	f003 030f 	and.w	r3, r3, #15
 800b51a:	3301      	adds	r3, #1
 800b51c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b03      	cmp	r3, #3
 800b522:	d10c      	bne.n	800b53e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b524:	4a1a      	ldr	r2, [pc, #104]	; (800b590 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52c:	4a16      	ldr	r2, [pc, #88]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b52e:	68d2      	ldr	r2, [r2, #12]
 800b530:	0a12      	lsrs	r2, r2, #8
 800b532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b536:	fb02 f303 	mul.w	r3, r2, r3
 800b53a:	617b      	str	r3, [r7, #20]
      break;
 800b53c:	e00c      	b.n	800b558 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b53e:	4a13      	ldr	r2, [pc, #76]	; (800b58c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	fbb2 f3f3 	udiv	r3, r2, r3
 800b546:	4a10      	ldr	r2, [pc, #64]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b548:	68d2      	ldr	r2, [r2, #12]
 800b54a:	0a12      	lsrs	r2, r2, #8
 800b54c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b550:	fb02 f303 	mul.w	r3, r2, r3
 800b554:	617b      	str	r3, [r7, #20]
      break;
 800b556:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b558:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	0e5b      	lsrs	r3, r3, #25
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	3301      	adds	r3, #1
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b570:	613b      	str	r3, [r7, #16]
 800b572:	e001      	b.n	800b578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b578:	693b      	ldr	r3, [r7, #16]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	371c      	adds	r7, #28
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	40021000 	.word	0x40021000
 800b58c:	00f42400 	.word	0x00f42400
 800b590:	007a1200 	.word	0x007a1200

0800b594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b598:	4b03      	ldr	r3, [pc, #12]	; (800b5a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b59a:	681b      	ldr	r3, [r3, #0]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	20000000 	.word	0x20000000

0800b5ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b5b0:	f7ff fff0 	bl	800b594 <HAL_RCC_GetHCLKFreq>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	4b06      	ldr	r3, [pc, #24]	; (800b5d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	0a1b      	lsrs	r3, r3, #8
 800b5bc:	f003 0307 	and.w	r3, r3, #7
 800b5c0:	4904      	ldr	r1, [pc, #16]	; (800b5d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5c2:	5ccb      	ldrb	r3, [r1, r3]
 800b5c4:	f003 031f 	and.w	r3, r3, #31
 800b5c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	40021000 	.word	0x40021000
 800b5d4:	0801679c 	.word	0x0801679c

0800b5d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b5dc:	f7ff ffda 	bl	800b594 <HAL_RCC_GetHCLKFreq>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	4b06      	ldr	r3, [pc, #24]	; (800b5fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	0adb      	lsrs	r3, r3, #11
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	4904      	ldr	r1, [pc, #16]	; (800b600 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5ee:	5ccb      	ldrb	r3, [r1, r3]
 800b5f0:	f003 031f 	and.w	r3, r3, #31
 800b5f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	40021000 	.word	0x40021000
 800b600:	0801679c 	.word	0x0801679c

0800b604 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b604:	b480      	push	{r7}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b60a:	4b1e      	ldr	r3, [pc, #120]	; (800b684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b614:	4b1b      	ldr	r3, [pc, #108]	; (800b684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	091b      	lsrs	r3, r3, #4
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	3301      	adds	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2b03      	cmp	r3, #3
 800b626:	d10c      	bne.n	800b642 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b628:	4a17      	ldr	r2, [pc, #92]	; (800b688 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b630:	4a14      	ldr	r2, [pc, #80]	; (800b684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b632:	68d2      	ldr	r2, [r2, #12]
 800b634:	0a12      	lsrs	r2, r2, #8
 800b636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b63a:	fb02 f303 	mul.w	r3, r2, r3
 800b63e:	617b      	str	r3, [r7, #20]
    break;
 800b640:	e00c      	b.n	800b65c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b642:	4a12      	ldr	r2, [pc, #72]	; (800b68c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64a:	4a0e      	ldr	r2, [pc, #56]	; (800b684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b64c:	68d2      	ldr	r2, [r2, #12]
 800b64e:	0a12      	lsrs	r2, r2, #8
 800b650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b654:	fb02 f303 	mul.w	r3, r2, r3
 800b658:	617b      	str	r3, [r7, #20]
    break;
 800b65a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b65c:	4b09      	ldr	r3, [pc, #36]	; (800b684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	0e5b      	lsrs	r3, r3, #25
 800b662:	f003 0303 	and.w	r3, r3, #3
 800b666:	3301      	adds	r3, #1
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	fbb2 f3f3 	udiv	r3, r2, r3
 800b674:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b676:	687b      	ldr	r3, [r7, #4]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	40021000 	.word	0x40021000
 800b688:	007a1200 	.word	0x007a1200
 800b68c:	00f42400 	.word	0x00f42400

0800b690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b698:	2300      	movs	r3, #0
 800b69a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b69c:	2300      	movs	r3, #0
 800b69e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 8098 	beq.w	800b7de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6b2:	4b43      	ldr	r3, [pc, #268]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10d      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6be:	4b40      	ldr	r3, [pc, #256]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c2:	4a3f      	ldr	r2, [pc, #252]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ca:	4b3d      	ldr	r3, [pc, #244]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6d2:	60bb      	str	r3, [r7, #8]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6da:	4b3a      	ldr	r3, [pc, #232]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a39      	ldr	r2, [pc, #228]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6e6:	f7fa fb7b 	bl	8005de0 <HAL_GetTick>
 800b6ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ec:	e009      	b.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6ee:	f7fa fb77 	bl	8005de0 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d902      	bls.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	74fb      	strb	r3, [r7, #19]
        break;
 800b700:	e005      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b702:	4b30      	ldr	r3, [pc, #192]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0ef      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b70e:	7cfb      	ldrb	r3, [r7, #19]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d159      	bne.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b714:	4b2a      	ldr	r3, [pc, #168]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b71e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d01e      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d019      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b730:	4b23      	ldr	r3, [pc, #140]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b73a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b73c:	4b20      	ldr	r3, [pc, #128]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b742:	4a1f      	ldr	r2, [pc, #124]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b74c:	4b1c      	ldr	r3, [pc, #112]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b752:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b75c:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d016      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b76e:	f7fa fb37 	bl	8005de0 <HAL_GetTick>
 800b772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b774:	e00b      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b776:	f7fa fb33 	bl	8005de0 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	f241 3288 	movw	r2, #5000	; 0x1388
 800b784:	4293      	cmp	r3, r2
 800b786:	d902      	bls.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	74fb      	strb	r3, [r7, #19]
            break;
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0ec      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b79c:	7cfb      	ldrb	r3, [r7, #19]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10b      	bne.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7a2:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b0:	4903      	ldr	r1, [pc, #12]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7b8:	e008      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7ba:	7cfb      	ldrb	r3, [r7, #19]
 800b7bc:	74bb      	strb	r3, [r7, #18]
 800b7be:	e005      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b7c0:	40021000 	.word	0x40021000
 800b7c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7cc:	7c7b      	ldrb	r3, [r7, #17]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d105      	bne.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7d2:	4ba7      	ldr	r3, [pc, #668]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d6:	4aa6      	ldr	r2, [pc, #664]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b7ea:	4ba1      	ldr	r3, [pc, #644]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7f0:	f023 0203 	bic.w	r2, r3, #3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	499d      	ldr	r1, [pc, #628]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b80c:	4b98      	ldr	r3, [pc, #608]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b812:	f023 020c 	bic.w	r2, r3, #12
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	4995      	ldr	r1, [pc, #596]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b82e:	4b90      	ldr	r3, [pc, #576]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	498c      	ldr	r1, [pc, #560]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b850:	4b87      	ldr	r3, [pc, #540]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	4984      	ldr	r1, [pc, #528]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b860:	4313      	orrs	r3, r2
 800b862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0310 	and.w	r3, r3, #16
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b872:	4b7f      	ldr	r3, [pc, #508]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	497b      	ldr	r1, [pc, #492]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b882:	4313      	orrs	r3, r2
 800b884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b894:	4b76      	ldr	r3, [pc, #472]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	4973      	ldr	r1, [pc, #460]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b8b6:	4b6e      	ldr	r3, [pc, #440]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	496a      	ldr	r1, [pc, #424]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b8d8:	4b65      	ldr	r3, [pc, #404]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	4962      	ldr	r1, [pc, #392]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8fa:	4b5d      	ldr	r3, [pc, #372]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	4959      	ldr	r1, [pc, #356]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b91c:	4b54      	ldr	r3, [pc, #336]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b91e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b922:	f023 0203 	bic.w	r2, r3, #3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92a:	4951      	ldr	r1, [pc, #324]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b93e:	4b4c      	ldr	r3, [pc, #304]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	4948      	ldr	r1, [pc, #288]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d015      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b960:	4b43      	ldr	r3, [pc, #268]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96e:	4940      	ldr	r1, [pc, #256]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b970:	4313      	orrs	r3, r2
 800b972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b97e:	d105      	bne.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b980:	4b3b      	ldr	r3, [pc, #236]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	4a3a      	ldr	r2, [pc, #232]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b98a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b994:	2b00      	cmp	r3, #0
 800b996:	d015      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b998:	4b35      	ldr	r3, [pc, #212]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b99e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	4932      	ldr	r1, [pc, #200]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b6:	d105      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9b8:	4b2d      	ldr	r3, [pc, #180]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4a2c      	ldr	r2, [pc, #176]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d015      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9d0:	4b27      	ldr	r3, [pc, #156]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9de:	4924      	ldr	r1, [pc, #144]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9ee:	d105      	bne.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9f0:	4b1f      	ldr	r3, [pc, #124]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	4a1e      	ldr	r2, [pc, #120]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d015      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba08:	4b19      	ldr	r3, [pc, #100]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba16:	4916      	ldr	r1, [pc, #88]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba26:	d105      	bne.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba28:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	4a10      	ldr	r2, [pc, #64]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d019      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba40:	4b0b      	ldr	r3, [pc, #44]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4e:	4908      	ldr	r1, [pc, #32]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba5e:	d109      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba60:	4b03      	ldr	r3, [pc, #12]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4a02      	ldr	r2, [pc, #8]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba6a:	60d3      	str	r3, [r2, #12]
 800ba6c:	e002      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ba6e:	bf00      	nop
 800ba70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d015      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ba80:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ba82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	4926      	ldr	r1, [pc, #152]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ba90:	4313      	orrs	r3, r2
 800ba92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba9e:	d105      	bne.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800baa0:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	4a20      	ldr	r2, [pc, #128]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800baa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baaa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d015      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bab8:	4b1b      	ldr	r3, [pc, #108]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800baba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800babe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac6:	4918      	ldr	r1, [pc, #96]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad6:	d105      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bad8:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	4a12      	ldr	r2, [pc, #72]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bae2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d015      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800baf0:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800baf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bafe:	490a      	ldr	r1, [pc, #40]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb0e:	d105      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb10:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bb1c:	7cbb      	ldrb	r3, [r7, #18]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	40021000 	.word	0x40021000

0800bb2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e049      	b.n	800bbd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7f9 fc9e 	bl	8005494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	f000 fbc8 	bl	800c300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e049      	b.n	800bc80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d106      	bne.n	800bc06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7f9 fcc9 	bl	8005598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2202      	movs	r2, #2
 800bc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3304      	adds	r3, #4
 800bc16:	4619      	mov	r1, r3
 800bc18:	4610      	mov	r0, r2
 800bc1a:	f000 fb71 	bl	800c300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d109      	bne.n	800bcac <HAL_TIM_PWM_Start+0x24>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	bf14      	ite	ne
 800bca4:	2301      	movne	r3, #1
 800bca6:	2300      	moveq	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	e03c      	b.n	800bd26 <HAL_TIM_PWM_Start+0x9e>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d109      	bne.n	800bcc6 <HAL_TIM_PWM_Start+0x3e>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	bf14      	ite	ne
 800bcbe:	2301      	movne	r3, #1
 800bcc0:	2300      	moveq	r3, #0
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	e02f      	b.n	800bd26 <HAL_TIM_PWM_Start+0x9e>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d109      	bne.n	800bce0 <HAL_TIM_PWM_Start+0x58>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	e022      	b.n	800bd26 <HAL_TIM_PWM_Start+0x9e>
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2b0c      	cmp	r3, #12
 800bce4:	d109      	bne.n	800bcfa <HAL_TIM_PWM_Start+0x72>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	bf14      	ite	ne
 800bcf2:	2301      	movne	r3, #1
 800bcf4:	2300      	moveq	r3, #0
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	e015      	b.n	800bd26 <HAL_TIM_PWM_Start+0x9e>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b10      	cmp	r3, #16
 800bcfe:	d109      	bne.n	800bd14 <HAL_TIM_PWM_Start+0x8c>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	bf14      	ite	ne
 800bd0c:	2301      	movne	r3, #1
 800bd0e:	2300      	moveq	r3, #0
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	e008      	b.n	800bd26 <HAL_TIM_PWM_Start+0x9e>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	bf14      	ite	ne
 800bd20:	2301      	movne	r3, #1
 800bd22:	2300      	moveq	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e0a6      	b.n	800be7c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d104      	bne.n	800bd3e <HAL_TIM_PWM_Start+0xb6>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd3c:	e023      	b.n	800bd86 <HAL_TIM_PWM_Start+0xfe>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	d104      	bne.n	800bd4e <HAL_TIM_PWM_Start+0xc6>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2202      	movs	r2, #2
 800bd48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd4c:	e01b      	b.n	800bd86 <HAL_TIM_PWM_Start+0xfe>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d104      	bne.n	800bd5e <HAL_TIM_PWM_Start+0xd6>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2202      	movs	r2, #2
 800bd58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd5c:	e013      	b.n	800bd86 <HAL_TIM_PWM_Start+0xfe>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b0c      	cmp	r3, #12
 800bd62:	d104      	bne.n	800bd6e <HAL_TIM_PWM_Start+0xe6>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2202      	movs	r2, #2
 800bd68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd6c:	e00b      	b.n	800bd86 <HAL_TIM_PWM_Start+0xfe>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2b10      	cmp	r3, #16
 800bd72:	d104      	bne.n	800bd7e <HAL_TIM_PWM_Start+0xf6>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2202      	movs	r2, #2
 800bd78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd7c:	e003      	b.n	800bd86 <HAL_TIM_PWM_Start+0xfe>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2202      	movs	r2, #2
 800bd82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 ff24 	bl	800cbdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a3a      	ldr	r2, [pc, #232]	; (800be84 <HAL_TIM_PWM_Start+0x1fc>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d018      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x148>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a39      	ldr	r2, [pc, #228]	; (800be88 <HAL_TIM_PWM_Start+0x200>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d013      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x148>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a37      	ldr	r2, [pc, #220]	; (800be8c <HAL_TIM_PWM_Start+0x204>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00e      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x148>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a36      	ldr	r2, [pc, #216]	; (800be90 <HAL_TIM_PWM_Start+0x208>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d009      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x148>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a34      	ldr	r2, [pc, #208]	; (800be94 <HAL_TIM_PWM_Start+0x20c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d004      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x148>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a33      	ldr	r2, [pc, #204]	; (800be98 <HAL_TIM_PWM_Start+0x210>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d101      	bne.n	800bdd4 <HAL_TIM_PWM_Start+0x14c>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e000      	b.n	800bdd6 <HAL_TIM_PWM_Start+0x14e>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bde8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a25      	ldr	r2, [pc, #148]	; (800be84 <HAL_TIM_PWM_Start+0x1fc>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d022      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfc:	d01d      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a26      	ldr	r2, [pc, #152]	; (800be9c <HAL_TIM_PWM_Start+0x214>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d018      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a24      	ldr	r2, [pc, #144]	; (800bea0 <HAL_TIM_PWM_Start+0x218>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d013      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a23      	ldr	r2, [pc, #140]	; (800bea4 <HAL_TIM_PWM_Start+0x21c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d00e      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a19      	ldr	r2, [pc, #100]	; (800be88 <HAL_TIM_PWM_Start+0x200>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d009      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a18      	ldr	r2, [pc, #96]	; (800be8c <HAL_TIM_PWM_Start+0x204>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d004      	beq.n	800be3a <HAL_TIM_PWM_Start+0x1b2>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a18      	ldr	r2, [pc, #96]	; (800be98 <HAL_TIM_PWM_Start+0x210>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d115      	bne.n	800be66 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	4b19      	ldr	r3, [pc, #100]	; (800bea8 <HAL_TIM_PWM_Start+0x220>)
 800be42:	4013      	ands	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b06      	cmp	r3, #6
 800be4a:	d015      	beq.n	800be78 <HAL_TIM_PWM_Start+0x1f0>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be52:	d011      	beq.n	800be78 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be64:	e008      	b.n	800be78 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0201 	orr.w	r2, r2, #1
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	e000      	b.n	800be7a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	40012c00 	.word	0x40012c00
 800be88:	40013400 	.word	0x40013400
 800be8c:	40014000 	.word	0x40014000
 800be90:	40014400 	.word	0x40014400
 800be94:	40014800 	.word	0x40014800
 800be98:	40015000 	.word	0x40015000
 800be9c:	40000400 	.word	0x40000400
 800bea0:	40000800 	.word	0x40000800
 800bea4:	40000c00 	.word	0x40000c00
 800bea8:	00010007 	.word	0x00010007

0800beac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d101      	bne.n	800beca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e0ff      	b.n	800c0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b14      	cmp	r3, #20
 800bed6:	f200 80f0 	bhi.w	800c0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800beda:	a201      	add	r2, pc, #4	; (adr r2, 800bee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bf35 	.word	0x0800bf35
 800bee4:	0800c0bb 	.word	0x0800c0bb
 800bee8:	0800c0bb 	.word	0x0800c0bb
 800beec:	0800c0bb 	.word	0x0800c0bb
 800bef0:	0800bf75 	.word	0x0800bf75
 800bef4:	0800c0bb 	.word	0x0800c0bb
 800bef8:	0800c0bb 	.word	0x0800c0bb
 800befc:	0800c0bb 	.word	0x0800c0bb
 800bf00:	0800bfb7 	.word	0x0800bfb7
 800bf04:	0800c0bb 	.word	0x0800c0bb
 800bf08:	0800c0bb 	.word	0x0800c0bb
 800bf0c:	0800c0bb 	.word	0x0800c0bb
 800bf10:	0800bff7 	.word	0x0800bff7
 800bf14:	0800c0bb 	.word	0x0800c0bb
 800bf18:	0800c0bb 	.word	0x0800c0bb
 800bf1c:	0800c0bb 	.word	0x0800c0bb
 800bf20:	0800c039 	.word	0x0800c039
 800bf24:	0800c0bb 	.word	0x0800c0bb
 800bf28:	0800c0bb 	.word	0x0800c0bb
 800bf2c:	0800c0bb 	.word	0x0800c0bb
 800bf30:	0800c079 	.word	0x0800c079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fa88 	bl	800c450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699a      	ldr	r2, [r3, #24]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f042 0208 	orr.w	r2, r2, #8
 800bf4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699a      	ldr	r2, [r3, #24]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0204 	bic.w	r2, r2, #4
 800bf5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6999      	ldr	r1, [r3, #24]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	691a      	ldr	r2, [r3, #16]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	619a      	str	r2, [r3, #24]
      break;
 800bf72:	e0a5      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68b9      	ldr	r1, [r7, #8]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fb02 	bl	800c584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	699a      	ldr	r2, [r3, #24]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	699a      	ldr	r2, [r3, #24]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6999      	ldr	r1, [r3, #24]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	021a      	lsls	r2, r3, #8
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	619a      	str	r2, [r3, #24]
      break;
 800bfb4:	e084      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68b9      	ldr	r1, [r7, #8]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 fb75 	bl	800c6ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	69da      	ldr	r2, [r3, #28]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f042 0208 	orr.w	r2, r2, #8
 800bfd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	69da      	ldr	r2, [r3, #28]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f022 0204 	bic.w	r2, r2, #4
 800bfe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69d9      	ldr	r1, [r3, #28]
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	691a      	ldr	r2, [r3, #16]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	430a      	orrs	r2, r1
 800bff2:	61da      	str	r2, [r3, #28]
      break;
 800bff4:	e064      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fbe7 	bl	800c7d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	69da      	ldr	r2, [r3, #28]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69da      	ldr	r2, [r3, #28]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	69d9      	ldr	r1, [r3, #28]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	021a      	lsls	r2, r3, #8
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	430a      	orrs	r2, r1
 800c034:	61da      	str	r2, [r3, #28]
      break;
 800c036:	e043      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fc5a 	bl	800c8f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 0208 	orr.w	r2, r2, #8
 800c052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0204 	bic.w	r2, r2, #4
 800c062:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	691a      	ldr	r2, [r3, #16]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c076:	e023      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 fca4 	bl	800c9cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	021a      	lsls	r2, r3, #8
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c0b8:	e002      	b.n	800c0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop

0800c0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d101      	bne.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	e0f6      	b.n	800c2de <HAL_TIM_ConfigClockSource+0x20a>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c10e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c11a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a6f      	ldr	r2, [pc, #444]	; (800c2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	f000 80c1 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c130:	4a6d      	ldr	r2, [pc, #436]	; (800c2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800c132:	4293      	cmp	r3, r2
 800c134:	f200 80c6 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c138:	4a6c      	ldr	r2, [pc, #432]	; (800c2ec <HAL_TIM_ConfigClockSource+0x218>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	f000 80b9 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c140:	4a6a      	ldr	r2, [pc, #424]	; (800c2ec <HAL_TIM_ConfigClockSource+0x218>)
 800c142:	4293      	cmp	r3, r2
 800c144:	f200 80be 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c148:	4a69      	ldr	r2, [pc, #420]	; (800c2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	f000 80b1 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c150:	4a67      	ldr	r2, [pc, #412]	; (800c2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800c152:	4293      	cmp	r3, r2
 800c154:	f200 80b6 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c158:	4a66      	ldr	r2, [pc, #408]	; (800c2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	f000 80a9 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c160:	4a64      	ldr	r2, [pc, #400]	; (800c2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800c162:	4293      	cmp	r3, r2
 800c164:	f200 80ae 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c168:	4a63      	ldr	r2, [pc, #396]	; (800c2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	f000 80a1 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c170:	4a61      	ldr	r2, [pc, #388]	; (800c2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800c172:	4293      	cmp	r3, r2
 800c174:	f200 80a6 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c178:	4a60      	ldr	r2, [pc, #384]	; (800c2fc <HAL_TIM_ConfigClockSource+0x228>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	f000 8099 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c180:	4a5e      	ldr	r2, [pc, #376]	; (800c2fc <HAL_TIM_ConfigClockSource+0x228>)
 800c182:	4293      	cmp	r3, r2
 800c184:	f200 809e 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c18c:	f000 8091 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c190:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c194:	f200 8096 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c19c:	f000 8089 	beq.w	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c1a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1a4:	f200 808e 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1ac:	d03e      	beq.n	800c22c <HAL_TIM_ConfigClockSource+0x158>
 800c1ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b2:	f200 8087 	bhi.w	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ba:	f000 8086 	beq.w	800c2ca <HAL_TIM_ConfigClockSource+0x1f6>
 800c1be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c2:	d87f      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1c4:	2b70      	cmp	r3, #112	; 0x70
 800c1c6:	d01a      	beq.n	800c1fe <HAL_TIM_ConfigClockSource+0x12a>
 800c1c8:	2b70      	cmp	r3, #112	; 0x70
 800c1ca:	d87b      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1cc:	2b60      	cmp	r3, #96	; 0x60
 800c1ce:	d050      	beq.n	800c272 <HAL_TIM_ConfigClockSource+0x19e>
 800c1d0:	2b60      	cmp	r3, #96	; 0x60
 800c1d2:	d877      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1d4:	2b50      	cmp	r3, #80	; 0x50
 800c1d6:	d03c      	beq.n	800c252 <HAL_TIM_ConfigClockSource+0x17e>
 800c1d8:	2b50      	cmp	r3, #80	; 0x50
 800c1da:	d873      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1dc:	2b40      	cmp	r3, #64	; 0x40
 800c1de:	d058      	beq.n	800c292 <HAL_TIM_ConfigClockSource+0x1be>
 800c1e0:	2b40      	cmp	r3, #64	; 0x40
 800c1e2:	d86f      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1e4:	2b30      	cmp	r3, #48	; 0x30
 800c1e6:	d064      	beq.n	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c1e8:	2b30      	cmp	r3, #48	; 0x30
 800c1ea:	d86b      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1ec:	2b20      	cmp	r3, #32
 800c1ee:	d060      	beq.n	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	d867      	bhi.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d05c      	beq.n	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c1f8:	2b10      	cmp	r3, #16
 800c1fa:	d05a      	beq.n	800c2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c1fc:	e062      	b.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	6899      	ldr	r1, [r3, #8]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	f000 fcc5 	bl	800cb9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	609a      	str	r2, [r3, #8]
      break;
 800c22a:	e04f      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6818      	ldr	r0, [r3, #0]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	6899      	ldr	r1, [r3, #8]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f000 fcae 	bl	800cb9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c24e:	609a      	str	r2, [r3, #8]
      break;
 800c250:	e03c      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	6859      	ldr	r1, [r3, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	461a      	mov	r2, r3
 800c260:	f000 fc20 	bl	800caa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2150      	movs	r1, #80	; 0x50
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 fc79 	bl	800cb62 <TIM_ITRx_SetConfig>
      break;
 800c270:	e02c      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	6859      	ldr	r1, [r3, #4]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	461a      	mov	r2, r3
 800c280:	f000 fc3f 	bl	800cb02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2160      	movs	r1, #96	; 0x60
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 fc69 	bl	800cb62 <TIM_ITRx_SetConfig>
      break;
 800c290:	e01c      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6818      	ldr	r0, [r3, #0]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	6859      	ldr	r1, [r3, #4]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f000 fc00 	bl	800caa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2140      	movs	r1, #64	; 0x40
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fc59 	bl	800cb62 <TIM_ITRx_SetConfig>
      break;
 800c2b0:	e00c      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f000 fc50 	bl	800cb62 <TIM_ITRx_SetConfig>
      break;
 800c2c2:	e003      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c8:	e000      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c2ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	00100070 	.word	0x00100070
 800c2ec:	00100060 	.word	0x00100060
 800c2f0:	00100050 	.word	0x00100050
 800c2f4:	00100040 	.word	0x00100040
 800c2f8:	00100030 	.word	0x00100030
 800c2fc:	00100020 	.word	0x00100020

0800c300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a46      	ldr	r2, [pc, #280]	; (800c42c <TIM_Base_SetConfig+0x12c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d017      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c31e:	d013      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a43      	ldr	r2, [pc, #268]	; (800c430 <TIM_Base_SetConfig+0x130>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d00f      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a42      	ldr	r2, [pc, #264]	; (800c434 <TIM_Base_SetConfig+0x134>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d00b      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a41      	ldr	r2, [pc, #260]	; (800c438 <TIM_Base_SetConfig+0x138>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d007      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a40      	ldr	r2, [pc, #256]	; (800c43c <TIM_Base_SetConfig+0x13c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d003      	beq.n	800c348 <TIM_Base_SetConfig+0x48>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a3f      	ldr	r2, [pc, #252]	; (800c440 <TIM_Base_SetConfig+0x140>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d108      	bne.n	800c35a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c34e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a33      	ldr	r2, [pc, #204]	; (800c42c <TIM_Base_SetConfig+0x12c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d023      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c368:	d01f      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a30      	ldr	r2, [pc, #192]	; (800c430 <TIM_Base_SetConfig+0x130>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d01b      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a2f      	ldr	r2, [pc, #188]	; (800c434 <TIM_Base_SetConfig+0x134>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d017      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a2e      	ldr	r2, [pc, #184]	; (800c438 <TIM_Base_SetConfig+0x138>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d013      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a2d      	ldr	r2, [pc, #180]	; (800c43c <TIM_Base_SetConfig+0x13c>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d00f      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a2d      	ldr	r2, [pc, #180]	; (800c444 <TIM_Base_SetConfig+0x144>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d00b      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a2c      	ldr	r2, [pc, #176]	; (800c448 <TIM_Base_SetConfig+0x148>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d007      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a2b      	ldr	r2, [pc, #172]	; (800c44c <TIM_Base_SetConfig+0x14c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d003      	beq.n	800c3aa <TIM_Base_SetConfig+0xaa>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a26      	ldr	r2, [pc, #152]	; (800c440 <TIM_Base_SetConfig+0x140>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d108      	bne.n	800c3bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a12      	ldr	r2, [pc, #72]	; (800c42c <TIM_Base_SetConfig+0x12c>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d013      	beq.n	800c410 <TIM_Base_SetConfig+0x110>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a14      	ldr	r2, [pc, #80]	; (800c43c <TIM_Base_SetConfig+0x13c>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d00f      	beq.n	800c410 <TIM_Base_SetConfig+0x110>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a14      	ldr	r2, [pc, #80]	; (800c444 <TIM_Base_SetConfig+0x144>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d00b      	beq.n	800c410 <TIM_Base_SetConfig+0x110>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a13      	ldr	r2, [pc, #76]	; (800c448 <TIM_Base_SetConfig+0x148>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d007      	beq.n	800c410 <TIM_Base_SetConfig+0x110>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a12      	ldr	r2, [pc, #72]	; (800c44c <TIM_Base_SetConfig+0x14c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d003      	beq.n	800c410 <TIM_Base_SetConfig+0x110>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a0d      	ldr	r2, [pc, #52]	; (800c440 <TIM_Base_SetConfig+0x140>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d103      	bne.n	800c418 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	615a      	str	r2, [r3, #20]
}
 800c41e:	bf00      	nop
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	40012c00 	.word	0x40012c00
 800c430:	40000400 	.word	0x40000400
 800c434:	40000800 	.word	0x40000800
 800c438:	40000c00 	.word	0x40000c00
 800c43c:	40013400 	.word	0x40013400
 800c440:	40015000 	.word	0x40015000
 800c444:	40014000 	.word	0x40014000
 800c448:	40014400 	.word	0x40014400
 800c44c:	40014800 	.word	0x40014800

0800c450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	f023 0201 	bic.w	r2, r3, #1
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f023 0302 	bic.w	r3, r3, #2
 800c49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a30      	ldr	r2, [pc, #192]	; (800c56c <TIM_OC1_SetConfig+0x11c>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d013      	beq.n	800c4d8 <TIM_OC1_SetConfig+0x88>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a2f      	ldr	r2, [pc, #188]	; (800c570 <TIM_OC1_SetConfig+0x120>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00f      	beq.n	800c4d8 <TIM_OC1_SetConfig+0x88>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a2e      	ldr	r2, [pc, #184]	; (800c574 <TIM_OC1_SetConfig+0x124>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00b      	beq.n	800c4d8 <TIM_OC1_SetConfig+0x88>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a2d      	ldr	r2, [pc, #180]	; (800c578 <TIM_OC1_SetConfig+0x128>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d007      	beq.n	800c4d8 <TIM_OC1_SetConfig+0x88>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a2c      	ldr	r2, [pc, #176]	; (800c57c <TIM_OC1_SetConfig+0x12c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d003      	beq.n	800c4d8 <TIM_OC1_SetConfig+0x88>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a2b      	ldr	r2, [pc, #172]	; (800c580 <TIM_OC1_SetConfig+0x130>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d10c      	bne.n	800c4f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f023 0308 	bic.w	r3, r3, #8
 800c4de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f023 0304 	bic.w	r3, r3, #4
 800c4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a1d      	ldr	r2, [pc, #116]	; (800c56c <TIM_OC1_SetConfig+0x11c>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d013      	beq.n	800c522 <TIM_OC1_SetConfig+0xd2>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a1c      	ldr	r2, [pc, #112]	; (800c570 <TIM_OC1_SetConfig+0x120>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d00f      	beq.n	800c522 <TIM_OC1_SetConfig+0xd2>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a1b      	ldr	r2, [pc, #108]	; (800c574 <TIM_OC1_SetConfig+0x124>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d00b      	beq.n	800c522 <TIM_OC1_SetConfig+0xd2>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a1a      	ldr	r2, [pc, #104]	; (800c578 <TIM_OC1_SetConfig+0x128>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d007      	beq.n	800c522 <TIM_OC1_SetConfig+0xd2>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a19      	ldr	r2, [pc, #100]	; (800c57c <TIM_OC1_SetConfig+0x12c>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d003      	beq.n	800c522 <TIM_OC1_SetConfig+0xd2>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a18      	ldr	r2, [pc, #96]	; (800c580 <TIM_OC1_SetConfig+0x130>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d111      	bne.n	800c546 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	4313      	orrs	r3, r2
 800c53a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	4313      	orrs	r3, r2
 800c544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	621a      	str	r2, [r3, #32]
}
 800c560:	bf00      	nop
 800c562:	371c      	adds	r7, #28
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	40012c00 	.word	0x40012c00
 800c570:	40013400 	.word	0x40013400
 800c574:	40014000 	.word	0x40014000
 800c578:	40014400 	.word	0x40014400
 800c57c:	40014800 	.word	0x40014800
 800c580:	40015000 	.word	0x40015000

0800c584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	f023 0210 	bic.w	r2, r3, #16
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f023 0320 	bic.w	r3, r3, #32
 800c5d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	011b      	lsls	r3, r3, #4
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a2c      	ldr	r2, [pc, #176]	; (800c694 <TIM_OC2_SetConfig+0x110>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d007      	beq.n	800c5f8 <TIM_OC2_SetConfig+0x74>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a2b      	ldr	r2, [pc, #172]	; (800c698 <TIM_OC2_SetConfig+0x114>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d003      	beq.n	800c5f8 <TIM_OC2_SetConfig+0x74>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a2a      	ldr	r2, [pc, #168]	; (800c69c <TIM_OC2_SetConfig+0x118>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d10d      	bne.n	800c614 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	011b      	lsls	r3, r3, #4
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	4313      	orrs	r3, r2
 800c60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a1f      	ldr	r2, [pc, #124]	; (800c694 <TIM_OC2_SetConfig+0x110>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d013      	beq.n	800c644 <TIM_OC2_SetConfig+0xc0>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a1e      	ldr	r2, [pc, #120]	; (800c698 <TIM_OC2_SetConfig+0x114>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d00f      	beq.n	800c644 <TIM_OC2_SetConfig+0xc0>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a1e      	ldr	r2, [pc, #120]	; (800c6a0 <TIM_OC2_SetConfig+0x11c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00b      	beq.n	800c644 <TIM_OC2_SetConfig+0xc0>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <TIM_OC2_SetConfig+0x120>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d007      	beq.n	800c644 <TIM_OC2_SetConfig+0xc0>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a1c      	ldr	r2, [pc, #112]	; (800c6a8 <TIM_OC2_SetConfig+0x124>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d003      	beq.n	800c644 <TIM_OC2_SetConfig+0xc0>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a17      	ldr	r2, [pc, #92]	; (800c69c <TIM_OC2_SetConfig+0x118>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d113      	bne.n	800c66c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c64a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	4313      	orrs	r3, r2
 800c66a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	621a      	str	r2, [r3, #32]
}
 800c686:	bf00      	nop
 800c688:	371c      	adds	r7, #28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	40012c00 	.word	0x40012c00
 800c698:	40013400 	.word	0x40013400
 800c69c:	40015000 	.word	0x40015000
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	40014400 	.word	0x40014400
 800c6a8:	40014800 	.word	0x40014800

0800c6ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	021b      	lsls	r3, r3, #8
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	4313      	orrs	r3, r2
 800c704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a2b      	ldr	r2, [pc, #172]	; (800c7b8 <TIM_OC3_SetConfig+0x10c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d007      	beq.n	800c71e <TIM_OC3_SetConfig+0x72>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a2a      	ldr	r2, [pc, #168]	; (800c7bc <TIM_OC3_SetConfig+0x110>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d003      	beq.n	800c71e <TIM_OC3_SetConfig+0x72>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a29      	ldr	r2, [pc, #164]	; (800c7c0 <TIM_OC3_SetConfig+0x114>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d10d      	bne.n	800c73a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4313      	orrs	r3, r2
 800c730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a1e      	ldr	r2, [pc, #120]	; (800c7b8 <TIM_OC3_SetConfig+0x10c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d013      	beq.n	800c76a <TIM_OC3_SetConfig+0xbe>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a1d      	ldr	r2, [pc, #116]	; (800c7bc <TIM_OC3_SetConfig+0x110>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d00f      	beq.n	800c76a <TIM_OC3_SetConfig+0xbe>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a1d      	ldr	r2, [pc, #116]	; (800c7c4 <TIM_OC3_SetConfig+0x118>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d00b      	beq.n	800c76a <TIM_OC3_SetConfig+0xbe>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a1c      	ldr	r2, [pc, #112]	; (800c7c8 <TIM_OC3_SetConfig+0x11c>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d007      	beq.n	800c76a <TIM_OC3_SetConfig+0xbe>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a1b      	ldr	r2, [pc, #108]	; (800c7cc <TIM_OC3_SetConfig+0x120>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d003      	beq.n	800c76a <TIM_OC3_SetConfig+0xbe>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a16      	ldr	r2, [pc, #88]	; (800c7c0 <TIM_OC3_SetConfig+0x114>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d113      	bne.n	800c792 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	011b      	lsls	r3, r3, #4
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4313      	orrs	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	621a      	str	r2, [r3, #32]
}
 800c7ac:	bf00      	nop
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	40012c00 	.word	0x40012c00
 800c7bc:	40013400 	.word	0x40013400
 800c7c0:	40015000 	.word	0x40015000
 800c7c4:	40014000 	.word	0x40014000
 800c7c8:	40014400 	.word	0x40014400
 800c7cc:	40014800 	.word	0x40014800

0800c7d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	021b      	lsls	r3, r3, #8
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	4313      	orrs	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c81e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	031b      	lsls	r3, r3, #12
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4313      	orrs	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a2c      	ldr	r2, [pc, #176]	; (800c8e0 <TIM_OC4_SetConfig+0x110>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d007      	beq.n	800c844 <TIM_OC4_SetConfig+0x74>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a2b      	ldr	r2, [pc, #172]	; (800c8e4 <TIM_OC4_SetConfig+0x114>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d003      	beq.n	800c844 <TIM_OC4_SetConfig+0x74>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a2a      	ldr	r2, [pc, #168]	; (800c8e8 <TIM_OC4_SetConfig+0x118>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d10d      	bne.n	800c860 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c84a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	031b      	lsls	r3, r3, #12
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	4313      	orrs	r3, r2
 800c856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c85e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a1f      	ldr	r2, [pc, #124]	; (800c8e0 <TIM_OC4_SetConfig+0x110>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d013      	beq.n	800c890 <TIM_OC4_SetConfig+0xc0>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a1e      	ldr	r2, [pc, #120]	; (800c8e4 <TIM_OC4_SetConfig+0x114>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d00f      	beq.n	800c890 <TIM_OC4_SetConfig+0xc0>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a1e      	ldr	r2, [pc, #120]	; (800c8ec <TIM_OC4_SetConfig+0x11c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d00b      	beq.n	800c890 <TIM_OC4_SetConfig+0xc0>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a1d      	ldr	r2, [pc, #116]	; (800c8f0 <TIM_OC4_SetConfig+0x120>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d007      	beq.n	800c890 <TIM_OC4_SetConfig+0xc0>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a1c      	ldr	r2, [pc, #112]	; (800c8f4 <TIM_OC4_SetConfig+0x124>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d003      	beq.n	800c890 <TIM_OC4_SetConfig+0xc0>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <TIM_OC4_SetConfig+0x118>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d113      	bne.n	800c8b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c896:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c89e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	019b      	lsls	r3, r3, #6
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	019b      	lsls	r3, r3, #6
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	621a      	str	r2, [r3, #32]
}
 800c8d2:	bf00      	nop
 800c8d4:	371c      	adds	r7, #28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	40012c00 	.word	0x40012c00
 800c8e4:	40013400 	.word	0x40013400
 800c8e8:	40015000 	.word	0x40015000
 800c8ec:	40014000 	.word	0x40014000
 800c8f0:	40014400 	.word	0x40014400
 800c8f4:	40014800 	.word	0x40014800

0800c8f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c93c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	041b      	lsls	r3, r3, #16
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4313      	orrs	r3, r2
 800c948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a19      	ldr	r2, [pc, #100]	; (800c9b4 <TIM_OC5_SetConfig+0xbc>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d013      	beq.n	800c97a <TIM_OC5_SetConfig+0x82>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <TIM_OC5_SetConfig+0xc0>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d00f      	beq.n	800c97a <TIM_OC5_SetConfig+0x82>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a17      	ldr	r2, [pc, #92]	; (800c9bc <TIM_OC5_SetConfig+0xc4>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d00b      	beq.n	800c97a <TIM_OC5_SetConfig+0x82>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a16      	ldr	r2, [pc, #88]	; (800c9c0 <TIM_OC5_SetConfig+0xc8>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d007      	beq.n	800c97a <TIM_OC5_SetConfig+0x82>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a15      	ldr	r2, [pc, #84]	; (800c9c4 <TIM_OC5_SetConfig+0xcc>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d003      	beq.n	800c97a <TIM_OC5_SetConfig+0x82>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a14      	ldr	r2, [pc, #80]	; (800c9c8 <TIM_OC5_SetConfig+0xd0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d109      	bne.n	800c98e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	021b      	lsls	r3, r3, #8
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	621a      	str	r2, [r3, #32]
}
 800c9a8:	bf00      	nop
 800c9aa:	371c      	adds	r7, #28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	40012c00 	.word	0x40012c00
 800c9b8:	40013400 	.word	0x40013400
 800c9bc:	40014000 	.word	0x40014000
 800c9c0:	40014400 	.word	0x40014400
 800c9c4:	40014800 	.word	0x40014800
 800c9c8:	40015000 	.word	0x40015000

0800c9cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	051b      	lsls	r3, r3, #20
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <TIM_OC6_SetConfig+0xc0>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d013      	beq.n	800ca50 <TIM_OC6_SetConfig+0x84>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a19      	ldr	r2, [pc, #100]	; (800ca90 <TIM_OC6_SetConfig+0xc4>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d00f      	beq.n	800ca50 <TIM_OC6_SetConfig+0x84>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a18      	ldr	r2, [pc, #96]	; (800ca94 <TIM_OC6_SetConfig+0xc8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d00b      	beq.n	800ca50 <TIM_OC6_SetConfig+0x84>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <TIM_OC6_SetConfig+0xcc>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d007      	beq.n	800ca50 <TIM_OC6_SetConfig+0x84>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a16      	ldr	r2, [pc, #88]	; (800ca9c <TIM_OC6_SetConfig+0xd0>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d003      	beq.n	800ca50 <TIM_OC6_SetConfig+0x84>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a15      	ldr	r2, [pc, #84]	; (800caa0 <TIM_OC6_SetConfig+0xd4>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d109      	bne.n	800ca64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	029b      	lsls	r3, r3, #10
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	40012c00 	.word	0x40012c00
 800ca90:	40013400 	.word	0x40013400
 800ca94:	40014000 	.word	0x40014000
 800ca98:	40014400 	.word	0x40014400
 800ca9c:	40014800 	.word	0x40014800
 800caa0:	40015000 	.word	0x40015000

0800caa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6a1b      	ldr	r3, [r3, #32]
 800cab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	f023 0201 	bic.w	r2, r3, #1
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	011b      	lsls	r3, r3, #4
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f023 030a 	bic.w	r3, r3, #10
 800cae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	621a      	str	r2, [r3, #32]
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b087      	sub	sp, #28
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	f023 0210 	bic.w	r2, r3, #16
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6a1b      	ldr	r3, [r3, #32]
 800cb24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	031b      	lsls	r3, r3, #12
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	011b      	lsls	r3, r3, #4
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	621a      	str	r2, [r3, #32]
}
 800cb56:	bf00      	nop
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cb78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	f043 0307 	orr.w	r3, r3, #7
 800cb88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	609a      	str	r2, [r3, #8]
}
 800cb90:	bf00      	nop
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	021a      	lsls	r2, r3, #8
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	609a      	str	r2, [r3, #8]
}
 800cbd0:	bf00      	nop
 800cbd2:	371c      	adds	r7, #28
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f003 031f 	and.w	r3, r3, #31
 800cbee:	2201      	movs	r2, #1
 800cbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a1a      	ldr	r2, [r3, #32]
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	43db      	mvns	r3, r3
 800cbfe:	401a      	ands	r2, r3
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6a1a      	ldr	r2, [r3, #32]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	f003 031f 	and.w	r3, r3, #31
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	fa01 f303 	lsl.w	r3, r1, r3
 800cc14:	431a      	orrs	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	621a      	str	r2, [r3, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
	...

0800cc28 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d109      	bne.n	800cc4c <HAL_TIMEx_PWMN_Start+0x24>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	bf14      	ite	ne
 800cc44:	2301      	movne	r3, #1
 800cc46:	2300      	moveq	r3, #0
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	e022      	b.n	800cc92 <HAL_TIMEx_PWMN_Start+0x6a>
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d109      	bne.n	800cc66 <HAL_TIMEx_PWMN_Start+0x3e>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	bf14      	ite	ne
 800cc5e:	2301      	movne	r3, #1
 800cc60:	2300      	moveq	r3, #0
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	e015      	b.n	800cc92 <HAL_TIMEx_PWMN_Start+0x6a>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d109      	bne.n	800cc80 <HAL_TIMEx_PWMN_Start+0x58>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	bf14      	ite	ne
 800cc78:	2301      	movne	r3, #1
 800cc7a:	2300      	moveq	r3, #0
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	e008      	b.n	800cc92 <HAL_TIMEx_PWMN_Start+0x6a>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	bf14      	ite	ne
 800cc8c:	2301      	movne	r3, #1
 800cc8e:	2300      	moveq	r3, #0
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e073      	b.n	800cd82 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d104      	bne.n	800ccaa <HAL_TIMEx_PWMN_Start+0x82>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2202      	movs	r2, #2
 800cca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca8:	e013      	b.n	800ccd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d104      	bne.n	800ccba <HAL_TIMEx_PWMN_Start+0x92>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccb8:	e00b      	b.n	800ccd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b08      	cmp	r3, #8
 800ccbe:	d104      	bne.n	800ccca <HAL_TIMEx_PWMN_Start+0xa2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ccc8:	e003      	b.n	800ccd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2202      	movs	r2, #2
 800ccce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2204      	movs	r2, #4
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 f9ae 	bl	800d03c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a25      	ldr	r2, [pc, #148]	; (800cd8c <HAL_TIMEx_PWMN_Start+0x164>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d022      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd02:	d01d      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a21      	ldr	r2, [pc, #132]	; (800cd90 <HAL_TIMEx_PWMN_Start+0x168>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d018      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a20      	ldr	r2, [pc, #128]	; (800cd94 <HAL_TIMEx_PWMN_Start+0x16c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d013      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1e      	ldr	r2, [pc, #120]	; (800cd98 <HAL_TIMEx_PWMN_Start+0x170>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00e      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a1d      	ldr	r2, [pc, #116]	; (800cd9c <HAL_TIMEx_PWMN_Start+0x174>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d009      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1b      	ldr	r2, [pc, #108]	; (800cda0 <HAL_TIMEx_PWMN_Start+0x178>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d004      	beq.n	800cd40 <HAL_TIMEx_PWMN_Start+0x118>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a1a      	ldr	r2, [pc, #104]	; (800cda4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d115      	bne.n	800cd6c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689a      	ldr	r2, [r3, #8]
 800cd46:	4b18      	ldr	r3, [pc, #96]	; (800cda8 <HAL_TIMEx_PWMN_Start+0x180>)
 800cd48:	4013      	ands	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b06      	cmp	r3, #6
 800cd50:	d015      	beq.n	800cd7e <HAL_TIMEx_PWMN_Start+0x156>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd58:	d011      	beq.n	800cd7e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f042 0201 	orr.w	r2, r2, #1
 800cd68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6a:	e008      	b.n	800cd7e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0201 	orr.w	r2, r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e000      	b.n	800cd80 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	40012c00 	.word	0x40012c00
 800cd90:	40000400 	.word	0x40000400
 800cd94:	40000800 	.word	0x40000800
 800cd98:	40000c00 	.word	0x40000c00
 800cd9c:	40013400 	.word	0x40013400
 800cda0:	40014000 	.word	0x40014000
 800cda4:	40015000 	.word	0x40015000
 800cda8:	00010007 	.word	0x00010007

0800cdac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d101      	bne.n	800cdc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e074      	b.n	800ceae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a34      	ldr	r2, [pc, #208]	; (800cebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d009      	beq.n	800ce02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a33      	ldr	r2, [pc, #204]	; (800cec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d004      	beq.n	800ce02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a31      	ldr	r2, [pc, #196]	; (800cec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d108      	bne.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ce1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a21      	ldr	r2, [pc, #132]	; (800cebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d022      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce44:	d01d      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a1f      	ldr	r2, [pc, #124]	; (800cec8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d018      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a1d      	ldr	r2, [pc, #116]	; (800cecc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d013      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a1c      	ldr	r2, [pc, #112]	; (800ced0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d00e      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a15      	ldr	r2, [pc, #84]	; (800cec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d009      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a18      	ldr	r2, [pc, #96]	; (800ced4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d004      	beq.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a11      	ldr	r2, [pc, #68]	; (800cec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d10c      	bne.n	800ce9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	40012c00 	.word	0x40012c00
 800cec0:	40013400 	.word	0x40013400
 800cec4:	40015000 	.word	0x40015000
 800cec8:	40000400 	.word	0x40000400
 800cecc:	40000800 	.word	0x40000800
 800ced0:	40000c00 	.word	0x40000c00
 800ced4:	40014000 	.word	0x40014000

0800ced8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d101      	bne.n	800cef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e096      	b.n	800d022 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	695b      	ldr	r3, [r3, #20]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	041b      	lsls	r3, r3, #16
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a2f      	ldr	r2, [pc, #188]	; (800d030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d009      	beq.n	800cf8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a2d      	ldr	r2, [pc, #180]	; (800d034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d004      	beq.n	800cf8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a2c      	ldr	r2, [pc, #176]	; (800d038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d106      	bne.n	800cf9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a24      	ldr	r2, [pc, #144]	; (800d030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d009      	beq.n	800cfb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a22      	ldr	r2, [pc, #136]	; (800d034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d004      	beq.n	800cfb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a21      	ldr	r2, [pc, #132]	; (800d038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d12b      	bne.n	800d010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc2:	051b      	lsls	r3, r3, #20
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a11      	ldr	r2, [pc, #68]	; (800d030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d009      	beq.n	800d002 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a10      	ldr	r2, [pc, #64]	; (800d034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d004      	beq.n	800d002 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a0e      	ldr	r2, [pc, #56]	; (800d038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d106      	bne.n	800d010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00c:	4313      	orrs	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	40012c00 	.word	0x40012c00
 800d034:	40013400 	.word	0x40013400
 800d038:	40015000 	.word	0x40015000

0800d03c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f003 031f 	and.w	r3, r3, #31
 800d04e:	2204      	movs	r2, #4
 800d050:	fa02 f303 	lsl.w	r3, r2, r3
 800d054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6a1a      	ldr	r2, [r3, #32]
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	43db      	mvns	r3, r3
 800d05e:	401a      	ands	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6a1a      	ldr	r2, [r3, #32]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f003 031f 	and.w	r3, r3, #31
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	fa01 f303 	lsl.w	r3, r1, r3
 800d074:	431a      	orrs	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	621a      	str	r2, [r3, #32]
}
 800d07a:	bf00      	nop
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e042      	b.n	800d11e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7f8 fb80 	bl	80057b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2224      	movs	r2, #36	; 0x24
 800d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f022 0201 	bic.w	r2, r2, #1
 800d0c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc0f 	bl	800d8ec <UART_SetConfig>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d101      	bne.n	800d0d8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e022      	b.n	800d11e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 feff 	bl	800dee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d104:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f042 0201 	orr.w	r2, r2, #1
 800d114:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 ff86 	bl	800e028 <UART_CheckIdleState>
 800d11c:	4603      	mov	r3, r0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b08a      	sub	sp, #40	; 0x28
 800d12a:	af02      	add	r7, sp, #8
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	603b      	str	r3, [r7, #0]
 800d132:	4613      	mov	r3, r2
 800d134:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d13c:	2b20      	cmp	r3, #32
 800d13e:	f040 8083 	bne.w	800d248 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <HAL_UART_Transmit+0x28>
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e07b      	b.n	800d24a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d101      	bne.n	800d160 <HAL_UART_Transmit+0x3a>
 800d15c:	2302      	movs	r3, #2
 800d15e:	e074      	b.n	800d24a <HAL_UART_Transmit+0x124>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2221      	movs	r2, #33	; 0x21
 800d174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d178:	f7f8 fe32 	bl	8005de0 <HAL_GetTick>
 800d17c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	88fa      	ldrh	r2, [r7, #6]
 800d182:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	88fa      	ldrh	r2, [r7, #6]
 800d18a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d196:	d108      	bne.n	800d1aa <HAL_UART_Transmit+0x84>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d104      	bne.n	800d1aa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	61bb      	str	r3, [r7, #24]
 800d1a8:	e003      	b.n	800d1b2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d1ba:	e02c      	b.n	800d216 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2180      	movs	r1, #128	; 0x80
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f000 ff79 	bl	800e0be <UART_WaitOnFlagUntilTimeout>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e039      	b.n	800d24a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10b      	bne.n	800d1f4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	61bb      	str	r3, [r7, #24]
 800d1f2:	e007      	b.n	800d204 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	3301      	adds	r3, #1
 800d202:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1cc      	bne.n	800d1bc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2200      	movs	r2, #0
 800d22a:	2140      	movs	r1, #64	; 0x40
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 ff46 	bl	800e0be <UART_WaitOnFlagUntilTimeout>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	e006      	b.n	800d24a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2220      	movs	r2, #32
 800d240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	e000      	b.n	800d24a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d248:	2302      	movs	r3, #2
  }
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3720      	adds	r7, #32
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b0ba      	sub	sp, #232	; 0xe8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	69db      	ldr	r3, [r3, #28]
 800d262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d27a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d27e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d282:	4013      	ands	r3, r2
 800d284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11b      	bne.n	800d2c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d294:	f003 0320 	and.w	r3, r3, #32
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d015      	beq.n	800d2c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2a0:	f003 0320 	and.w	r3, r3, #32
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d009      	beq.n	800d2c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f000 82d6 	beq.w	800d86a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	4798      	blx	r3
      }
      return;
 800d2c6:	e2d0      	b.n	800d86a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 811f 	beq.w	800d510 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2d6:	4b8b      	ldr	r3, [pc, #556]	; (800d504 <HAL_UART_IRQHandler+0x2b0>)
 800d2d8:	4013      	ands	r3, r2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d2de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2e2:	4b89      	ldr	r3, [pc, #548]	; (800d508 <HAL_UART_IRQHandler+0x2b4>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 8112 	beq.w	800d510 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d011      	beq.n	800d31c <HAL_UART_IRQHandler+0xc8>
 800d2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00b      	beq.n	800d31c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2201      	movs	r2, #1
 800d30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d312:	f043 0201 	orr.w	r2, r3, #1
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d011      	beq.n	800d34c <HAL_UART_IRQHandler+0xf8>
 800d328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2202      	movs	r2, #2
 800d33a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d342:	f043 0204 	orr.w	r2, r3, #4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d350:	f003 0304 	and.w	r3, r3, #4
 800d354:	2b00      	cmp	r3, #0
 800d356:	d011      	beq.n	800d37c <HAL_UART_IRQHandler+0x128>
 800d358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00b      	beq.n	800d37c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2204      	movs	r2, #4
 800d36a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d372:	f043 0202 	orr.w	r2, r3, #2
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d380:	f003 0308 	and.w	r3, r3, #8
 800d384:	2b00      	cmp	r3, #0
 800d386:	d017      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d38c:	f003 0320 	and.w	r3, r3, #32
 800d390:	2b00      	cmp	r3, #0
 800d392:	d105      	bne.n	800d3a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d394:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d398:	4b5a      	ldr	r3, [pc, #360]	; (800d504 <HAL_UART_IRQHandler+0x2b0>)
 800d39a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2208      	movs	r2, #8
 800d3a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ae:	f043 0208 	orr.w	r2, r3, #8
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d012      	beq.n	800d3ea <HAL_UART_IRQHandler+0x196>
 800d3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00c      	beq.n	800d3ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3e0:	f043 0220 	orr.w	r2, r3, #32
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 823c 	beq.w	800d86e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fa:	f003 0320 	and.w	r3, r3, #32
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d013      	beq.n	800d42a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d406:	f003 0320 	and.w	r3, r3, #32
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d105      	bne.n	800d41a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43e:	2b40      	cmp	r3, #64	; 0x40
 800d440:	d005      	beq.n	800d44e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d446:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d04f      	beq.n	800d4ee <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 ffe7 	bl	800e422 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d45e:	2b40      	cmp	r3, #64	; 0x40
 800d460:	d141      	bne.n	800d4e6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3308      	adds	r3, #8
 800d468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d48e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d49a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d9      	bne.n	800d462 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d013      	beq.n	800d4de <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ba:	4a14      	ldr	r2, [pc, #80]	; (800d50c <HAL_UART_IRQHandler+0x2b8>)
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fb f848 	bl	8008558 <HAL_DMA_Abort_IT>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d017      	beq.n	800d4fe <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4dc:	e00f      	b.n	800d4fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f9ee 	bl	800d8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4e4:	e00b      	b.n	800d4fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f9ea 	bl	800d8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ec:	e007      	b.n	800d4fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9e6 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d4fc:	e1b7      	b.n	800d86e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4fe:	bf00      	nop
    return;
 800d500:	e1b5      	b.n	800d86e <HAL_UART_IRQHandler+0x61a>
 800d502:	bf00      	nop
 800d504:	10000001 	.word	0x10000001
 800d508:	04000120 	.word	0x04000120
 800d50c:	0800e6cd 	.word	0x0800e6cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d514:	2b01      	cmp	r3, #1
 800d516:	f040 814a 	bne.w	800d7ae <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d51e:	f003 0310 	and.w	r3, r3, #16
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 8143 	beq.w	800d7ae <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d52c:	f003 0310 	and.w	r3, r3, #16
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 813c 	beq.w	800d7ae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2210      	movs	r2, #16
 800d53c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d548:	2b40      	cmp	r3, #64	; 0x40
 800d54a:	f040 80b5 	bne.w	800d6b8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d55a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 8187 	beq.w	800d872 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d56a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d56e:	429a      	cmp	r2, r3
 800d570:	f080 817f 	bcs.w	800d872 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d57a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0320 	and.w	r3, r3, #32
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f040 8086 	bne.w	800d69c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5ca:	e841 2300 	strex	r3, r2, [r1]
 800d5ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d5d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1da      	bne.n	800d590 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d5ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5ec:	f023 0301 	bic.w	r3, r3, #1
 800d5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3308      	adds	r3, #8
 800d5fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d5fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d60a:	e841 2300 	strex	r3, r2, [r1]
 800d60e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e1      	bne.n	800d5da <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3308      	adds	r3, #8
 800d61c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d620:	e853 3f00 	ldrex	r3, [r3]
 800d624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d62c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3308      	adds	r3, #8
 800d636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d63a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d63c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d642:	e841 2300 	strex	r3, r2, [r1]
 800d646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1e3      	bne.n	800d616 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2220      	movs	r2, #32
 800d652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d664:	e853 3f00 	ldrex	r3, [r3]
 800d668:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d66a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66c:	f023 0310 	bic.w	r3, r3, #16
 800d670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	461a      	mov	r2, r3
 800d67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d67e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d680:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d682:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d686:	e841 2300 	strex	r3, r2, [r1]
 800d68a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e4      	bne.n	800d65c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d696:	4618      	mov	r0, r3
 800d698:	f7fa ff05 	bl	80084a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f90f 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6b6:	e0dc      	b.n	800d872 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80ce 	beq.w	800d876 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d6da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 80c9 	beq.w	800d876 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d706:	647b      	str	r3, [r7, #68]	; 0x44
 800d708:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d70c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1e4      	bne.n	800d6e4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	e853 3f00 	ldrex	r3, [r3]
 800d728:	623b      	str	r3, [r7, #32]
   return(result);
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d730:	f023 0301 	bic.w	r3, r3, #1
 800d734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d742:	633a      	str	r2, [r7, #48]	; 0x30
 800d744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e1      	bne.n	800d71a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2220      	movs	r2, #32
 800d75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	e853 3f00 	ldrex	r3, [r3]
 800d776:	60fb      	str	r3, [r7, #12]
   return(result);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0310 	bic.w	r3, r3, #16
 800d77e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d78c:	61fb      	str	r3, [r7, #28]
 800d78e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d790:	69b9      	ldr	r1, [r7, #24]
 800d792:	69fa      	ldr	r2, [r7, #28]
 800d794:	e841 2300 	strex	r3, r2, [r1]
 800d798:	617b      	str	r3, [r7, #20]
   return(result);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1e4      	bne.n	800d76a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f894 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7ac:	e063      	b.n	800d876 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00e      	beq.n	800d7d8 <HAL_UART_IRQHandler+0x584>
 800d7ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d008      	beq.n	800d7d8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d7ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 ffbc 	bl	800e74e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7d6:	e051      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d014      	beq.n	800d80e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d105      	bne.n	800d7fc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d008      	beq.n	800d80e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d800:	2b00      	cmp	r3, #0
 800d802:	d03a      	beq.n	800d87a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	4798      	blx	r3
    }
    return;
 800d80c:	e035      	b.n	800d87a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	d009      	beq.n	800d82e <HAL_UART_IRQHandler+0x5da>
 800d81a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 ff66 	bl	800e6f8 <UART_EndTransmit_IT>
    return;
 800d82c:	e026      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d836:	2b00      	cmp	r3, #0
 800d838:	d009      	beq.n	800d84e <HAL_UART_IRQHandler+0x5fa>
 800d83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d83e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d003      	beq.n	800d84e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 ff95 	bl	800e776 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d84c:	e016      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d856:	2b00      	cmp	r3, #0
 800d858:	d010      	beq.n	800d87c <HAL_UART_IRQHandler+0x628>
 800d85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	da0c      	bge.n	800d87c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 ff7d 	bl	800e762 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d868:	e008      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
      return;
 800d86a:	bf00      	nop
 800d86c:	e006      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
    return;
 800d86e:	bf00      	nop
 800d870:	e004      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
      return;
 800d872:	bf00      	nop
 800d874:	e002      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
      return;
 800d876:	bf00      	nop
 800d878:	e000      	b.n	800d87c <HAL_UART_IRQHandler+0x628>
    return;
 800d87a:	bf00      	nop
  }
}
 800d87c:	37e8      	adds	r7, #232	; 0xe8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop

0800d884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d8a0:	bf00      	nop
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8f0:	b08c      	sub	sp, #48	; 0x30
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	431a      	orrs	r2, r3
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	431a      	orrs	r2, r3
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	69db      	ldr	r3, [r3, #28]
 800d910:	4313      	orrs	r3, r2
 800d912:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4baa      	ldr	r3, [pc, #680]	; (800dbc4 <UART_SetConfig+0x2d8>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	6812      	ldr	r2, [r2, #0]
 800d922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d924:	430b      	orrs	r3, r1
 800d926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	68da      	ldr	r2, [r3, #12]
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a9f      	ldr	r2, [pc, #636]	; (800dbc8 <UART_SetConfig+0x2dc>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d004      	beq.n	800d958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d954:	4313      	orrs	r3, r2
 800d956:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d962:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	6812      	ldr	r2, [r2, #0]
 800d96a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d96c:	430b      	orrs	r3, r1
 800d96e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	f023 010f 	bic.w	r1, r3, #15
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	430a      	orrs	r2, r1
 800d984:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a90      	ldr	r2, [pc, #576]	; (800dbcc <UART_SetConfig+0x2e0>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d125      	bne.n	800d9dc <UART_SetConfig+0xf0>
 800d990:	4b8f      	ldr	r3, [pc, #572]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800d992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d996:	f003 0303 	and.w	r3, r3, #3
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d81a      	bhi.n	800d9d4 <UART_SetConfig+0xe8>
 800d99e:	a201      	add	r2, pc, #4	; (adr r2, 800d9a4 <UART_SetConfig+0xb8>)
 800d9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a4:	0800d9b5 	.word	0x0800d9b5
 800d9a8:	0800d9c5 	.word	0x0800d9c5
 800d9ac:	0800d9bd 	.word	0x0800d9bd
 800d9b0:	0800d9cd 	.word	0x0800d9cd
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9ba:	e116      	b.n	800dbea <UART_SetConfig+0x2fe>
 800d9bc:	2302      	movs	r3, #2
 800d9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9c2:	e112      	b.n	800dbea <UART_SetConfig+0x2fe>
 800d9c4:	2304      	movs	r3, #4
 800d9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9ca:	e10e      	b.n	800dbea <UART_SetConfig+0x2fe>
 800d9cc:	2308      	movs	r3, #8
 800d9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9d2:	e10a      	b.n	800dbea <UART_SetConfig+0x2fe>
 800d9d4:	2310      	movs	r3, #16
 800d9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9da:	e106      	b.n	800dbea <UART_SetConfig+0x2fe>
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a7c      	ldr	r2, [pc, #496]	; (800dbd4 <UART_SetConfig+0x2e8>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d138      	bne.n	800da58 <UART_SetConfig+0x16c>
 800d9e6:	4b7a      	ldr	r3, [pc, #488]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800d9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ec:	f003 030c 	and.w	r3, r3, #12
 800d9f0:	2b0c      	cmp	r3, #12
 800d9f2:	d82d      	bhi.n	800da50 <UART_SetConfig+0x164>
 800d9f4:	a201      	add	r2, pc, #4	; (adr r2, 800d9fc <UART_SetConfig+0x110>)
 800d9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fa:	bf00      	nop
 800d9fc:	0800da31 	.word	0x0800da31
 800da00:	0800da51 	.word	0x0800da51
 800da04:	0800da51 	.word	0x0800da51
 800da08:	0800da51 	.word	0x0800da51
 800da0c:	0800da41 	.word	0x0800da41
 800da10:	0800da51 	.word	0x0800da51
 800da14:	0800da51 	.word	0x0800da51
 800da18:	0800da51 	.word	0x0800da51
 800da1c:	0800da39 	.word	0x0800da39
 800da20:	0800da51 	.word	0x0800da51
 800da24:	0800da51 	.word	0x0800da51
 800da28:	0800da51 	.word	0x0800da51
 800da2c:	0800da49 	.word	0x0800da49
 800da30:	2300      	movs	r3, #0
 800da32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da36:	e0d8      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da38:	2302      	movs	r3, #2
 800da3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da3e:	e0d4      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da40:	2304      	movs	r3, #4
 800da42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da46:	e0d0      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da48:	2308      	movs	r3, #8
 800da4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da4e:	e0cc      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da50:	2310      	movs	r3, #16
 800da52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da56:	e0c8      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a5e      	ldr	r2, [pc, #376]	; (800dbd8 <UART_SetConfig+0x2ec>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d125      	bne.n	800daae <UART_SetConfig+0x1c2>
 800da62:	4b5b      	ldr	r3, [pc, #364]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800da64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da6c:	2b30      	cmp	r3, #48	; 0x30
 800da6e:	d016      	beq.n	800da9e <UART_SetConfig+0x1b2>
 800da70:	2b30      	cmp	r3, #48	; 0x30
 800da72:	d818      	bhi.n	800daa6 <UART_SetConfig+0x1ba>
 800da74:	2b20      	cmp	r3, #32
 800da76:	d00a      	beq.n	800da8e <UART_SetConfig+0x1a2>
 800da78:	2b20      	cmp	r3, #32
 800da7a:	d814      	bhi.n	800daa6 <UART_SetConfig+0x1ba>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <UART_SetConfig+0x19a>
 800da80:	2b10      	cmp	r3, #16
 800da82:	d008      	beq.n	800da96 <UART_SetConfig+0x1aa>
 800da84:	e00f      	b.n	800daa6 <UART_SetConfig+0x1ba>
 800da86:	2300      	movs	r3, #0
 800da88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da8c:	e0ad      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da8e:	2302      	movs	r3, #2
 800da90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da94:	e0a9      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da96:	2304      	movs	r3, #4
 800da98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da9c:	e0a5      	b.n	800dbea <UART_SetConfig+0x2fe>
 800da9e:	2308      	movs	r3, #8
 800daa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daa4:	e0a1      	b.n	800dbea <UART_SetConfig+0x2fe>
 800daa6:	2310      	movs	r3, #16
 800daa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daac:	e09d      	b.n	800dbea <UART_SetConfig+0x2fe>
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a4a      	ldr	r2, [pc, #296]	; (800dbdc <UART_SetConfig+0x2f0>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d125      	bne.n	800db04 <UART_SetConfig+0x218>
 800dab8:	4b45      	ldr	r3, [pc, #276]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800daba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dabe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dac2:	2bc0      	cmp	r3, #192	; 0xc0
 800dac4:	d016      	beq.n	800daf4 <UART_SetConfig+0x208>
 800dac6:	2bc0      	cmp	r3, #192	; 0xc0
 800dac8:	d818      	bhi.n	800dafc <UART_SetConfig+0x210>
 800daca:	2b80      	cmp	r3, #128	; 0x80
 800dacc:	d00a      	beq.n	800dae4 <UART_SetConfig+0x1f8>
 800dace:	2b80      	cmp	r3, #128	; 0x80
 800dad0:	d814      	bhi.n	800dafc <UART_SetConfig+0x210>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <UART_SetConfig+0x1f0>
 800dad6:	2b40      	cmp	r3, #64	; 0x40
 800dad8:	d008      	beq.n	800daec <UART_SetConfig+0x200>
 800dada:	e00f      	b.n	800dafc <UART_SetConfig+0x210>
 800dadc:	2300      	movs	r3, #0
 800dade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dae2:	e082      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dae4:	2302      	movs	r3, #2
 800dae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daea:	e07e      	b.n	800dbea <UART_SetConfig+0x2fe>
 800daec:	2304      	movs	r3, #4
 800daee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daf2:	e07a      	b.n	800dbea <UART_SetConfig+0x2fe>
 800daf4:	2308      	movs	r3, #8
 800daf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dafa:	e076      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dafc:	2310      	movs	r3, #16
 800dafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db02:	e072      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a35      	ldr	r2, [pc, #212]	; (800dbe0 <UART_SetConfig+0x2f4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d12a      	bne.n	800db64 <UART_SetConfig+0x278>
 800db0e:	4b30      	ldr	r3, [pc, #192]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800db10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db1c:	d01a      	beq.n	800db54 <UART_SetConfig+0x268>
 800db1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db22:	d81b      	bhi.n	800db5c <UART_SetConfig+0x270>
 800db24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db28:	d00c      	beq.n	800db44 <UART_SetConfig+0x258>
 800db2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db2e:	d815      	bhi.n	800db5c <UART_SetConfig+0x270>
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <UART_SetConfig+0x250>
 800db34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db38:	d008      	beq.n	800db4c <UART_SetConfig+0x260>
 800db3a:	e00f      	b.n	800db5c <UART_SetConfig+0x270>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db42:	e052      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db44:	2302      	movs	r3, #2
 800db46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db4a:	e04e      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db4c:	2304      	movs	r3, #4
 800db4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db52:	e04a      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db54:	2308      	movs	r3, #8
 800db56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db5a:	e046      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db5c:	2310      	movs	r3, #16
 800db5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db62:	e042      	b.n	800dbea <UART_SetConfig+0x2fe>
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a17      	ldr	r2, [pc, #92]	; (800dbc8 <UART_SetConfig+0x2dc>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d13a      	bne.n	800dbe4 <UART_SetConfig+0x2f8>
 800db6e:	4b18      	ldr	r3, [pc, #96]	; (800dbd0 <UART_SetConfig+0x2e4>)
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db7c:	d01a      	beq.n	800dbb4 <UART_SetConfig+0x2c8>
 800db7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db82:	d81b      	bhi.n	800dbbc <UART_SetConfig+0x2d0>
 800db84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db88:	d00c      	beq.n	800dba4 <UART_SetConfig+0x2b8>
 800db8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db8e:	d815      	bhi.n	800dbbc <UART_SetConfig+0x2d0>
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <UART_SetConfig+0x2b0>
 800db94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db98:	d008      	beq.n	800dbac <UART_SetConfig+0x2c0>
 800db9a:	e00f      	b.n	800dbbc <UART_SetConfig+0x2d0>
 800db9c:	2300      	movs	r3, #0
 800db9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dba2:	e022      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dba4:	2302      	movs	r3, #2
 800dba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbaa:	e01e      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dbac:	2304      	movs	r3, #4
 800dbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbb2:	e01a      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dbb4:	2308      	movs	r3, #8
 800dbb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbba:	e016      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dbbc:	2310      	movs	r3, #16
 800dbbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbc2:	e012      	b.n	800dbea <UART_SetConfig+0x2fe>
 800dbc4:	cfff69f3 	.word	0xcfff69f3
 800dbc8:	40008000 	.word	0x40008000
 800dbcc:	40013800 	.word	0x40013800
 800dbd0:	40021000 	.word	0x40021000
 800dbd4:	40004400 	.word	0x40004400
 800dbd8:	40004800 	.word	0x40004800
 800dbdc:	40004c00 	.word	0x40004c00
 800dbe0:	40005000 	.word	0x40005000
 800dbe4:	2310      	movs	r3, #16
 800dbe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4aae      	ldr	r2, [pc, #696]	; (800dea8 <UART_SetConfig+0x5bc>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	f040 8097 	bne.w	800dd24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dbf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbfa:	2b08      	cmp	r3, #8
 800dbfc:	d823      	bhi.n	800dc46 <UART_SetConfig+0x35a>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <UART_SetConfig+0x318>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800dc29 	.word	0x0800dc29
 800dc08:	0800dc47 	.word	0x0800dc47
 800dc0c:	0800dc31 	.word	0x0800dc31
 800dc10:	0800dc47 	.word	0x0800dc47
 800dc14:	0800dc37 	.word	0x0800dc37
 800dc18:	0800dc47 	.word	0x0800dc47
 800dc1c:	0800dc47 	.word	0x0800dc47
 800dc20:	0800dc47 	.word	0x0800dc47
 800dc24:	0800dc3f 	.word	0x0800dc3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc28:	f7fd fcc0 	bl	800b5ac <HAL_RCC_GetPCLK1Freq>
 800dc2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dc2e:	e010      	b.n	800dc52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc30:	4b9e      	ldr	r3, [pc, #632]	; (800deac <UART_SetConfig+0x5c0>)
 800dc32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dc34:	e00d      	b.n	800dc52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc36:	f7fd fc4b 	bl	800b4d0 <HAL_RCC_GetSysClockFreq>
 800dc3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dc3c:	e009      	b.n	800dc52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dc44:	e005      	b.n	800dc52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800dc46:	2300      	movs	r3, #0
 800dc48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dc50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f000 8130 	beq.w	800deba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	4a94      	ldr	r2, [pc, #592]	; (800deb0 <UART_SetConfig+0x5c4>)
 800dc60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc64:	461a      	mov	r2, r3
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d305      	bcc.n	800dc8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d903      	bls.n	800dc92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dc90:	e113      	b.n	800deba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	2200      	movs	r2, #0
 800dc96:	60bb      	str	r3, [r7, #8]
 800dc98:	60fa      	str	r2, [r7, #12]
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	4a84      	ldr	r2, [pc, #528]	; (800deb0 <UART_SetConfig+0x5c4>)
 800dca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	2200      	movs	r2, #0
 800dca8:	603b      	str	r3, [r7, #0]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcb4:	f7f2 ffa0 	bl	8000bf8 <__aeabi_uldivmod>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	f04f 0200 	mov.w	r2, #0
 800dcc4:	f04f 0300 	mov.w	r3, #0
 800dcc8:	020b      	lsls	r3, r1, #8
 800dcca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcce:	0202      	lsls	r2, r0, #8
 800dcd0:	6979      	ldr	r1, [r7, #20]
 800dcd2:	6849      	ldr	r1, [r1, #4]
 800dcd4:	0849      	lsrs	r1, r1, #1
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	460c      	mov	r4, r1
 800dcda:	4605      	mov	r5, r0
 800dcdc:	eb12 0804 	adds.w	r8, r2, r4
 800dce0:	eb43 0905 	adc.w	r9, r3, r5
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	469a      	mov	sl, r3
 800dcec:	4693      	mov	fp, r2
 800dcee:	4652      	mov	r2, sl
 800dcf0:	465b      	mov	r3, fp
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	f7f2 ff7f 	bl	8000bf8 <__aeabi_uldivmod>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4613      	mov	r3, r2
 800dd00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd08:	d308      	bcc.n	800dd1c <UART_SetConfig+0x430>
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd10:	d204      	bcs.n	800dd1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6a3a      	ldr	r2, [r7, #32]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	e0ce      	b.n	800deba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dd22:	e0ca      	b.n	800deba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	69db      	ldr	r3, [r3, #28]
 800dd28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd2c:	d166      	bne.n	800ddfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dd2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd32:	2b08      	cmp	r3, #8
 800dd34:	d827      	bhi.n	800dd86 <UART_SetConfig+0x49a>
 800dd36:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <UART_SetConfig+0x450>)
 800dd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3c:	0800dd61 	.word	0x0800dd61
 800dd40:	0800dd69 	.word	0x0800dd69
 800dd44:	0800dd71 	.word	0x0800dd71
 800dd48:	0800dd87 	.word	0x0800dd87
 800dd4c:	0800dd77 	.word	0x0800dd77
 800dd50:	0800dd87 	.word	0x0800dd87
 800dd54:	0800dd87 	.word	0x0800dd87
 800dd58:	0800dd87 	.word	0x0800dd87
 800dd5c:	0800dd7f 	.word	0x0800dd7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd60:	f7fd fc24 	bl	800b5ac <HAL_RCC_GetPCLK1Freq>
 800dd64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd66:	e014      	b.n	800dd92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd68:	f7fd fc36 	bl	800b5d8 <HAL_RCC_GetPCLK2Freq>
 800dd6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd6e:	e010      	b.n	800dd92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd70:	4b4e      	ldr	r3, [pc, #312]	; (800deac <UART_SetConfig+0x5c0>)
 800dd72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd74:	e00d      	b.n	800dd92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd76:	f7fd fbab 	bl	800b4d0 <HAL_RCC_GetSysClockFreq>
 800dd7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd7c:	e009      	b.n	800dd92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd84:	e005      	b.n	800dd92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dd90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 8090 	beq.w	800deba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	4a44      	ldr	r2, [pc, #272]	; (800deb0 <UART_SetConfig+0x5c4>)
 800dda0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dda4:	461a      	mov	r2, r3
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddac:	005a      	lsls	r2, r3, #1
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	085b      	lsrs	r3, r3, #1
 800ddb4:	441a      	add	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	2b0f      	cmp	r3, #15
 800ddc4:	d916      	bls.n	800ddf4 <UART_SetConfig+0x508>
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddcc:	d212      	bcs.n	800ddf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddce:	6a3b      	ldr	r3, [r7, #32]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	f023 030f 	bic.w	r3, r3, #15
 800ddd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	085b      	lsrs	r3, r3, #1
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	8bfb      	ldrh	r3, [r7, #30]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	8bfa      	ldrh	r2, [r7, #30]
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	e062      	b.n	800deba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ddfa:	e05e      	b.n	800deba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de00:	2b08      	cmp	r3, #8
 800de02:	d828      	bhi.n	800de56 <UART_SetConfig+0x56a>
 800de04:	a201      	add	r2, pc, #4	; (adr r2, 800de0c <UART_SetConfig+0x520>)
 800de06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0a:	bf00      	nop
 800de0c:	0800de31 	.word	0x0800de31
 800de10:	0800de39 	.word	0x0800de39
 800de14:	0800de41 	.word	0x0800de41
 800de18:	0800de57 	.word	0x0800de57
 800de1c:	0800de47 	.word	0x0800de47
 800de20:	0800de57 	.word	0x0800de57
 800de24:	0800de57 	.word	0x0800de57
 800de28:	0800de57 	.word	0x0800de57
 800de2c:	0800de4f 	.word	0x0800de4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de30:	f7fd fbbc 	bl	800b5ac <HAL_RCC_GetPCLK1Freq>
 800de34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de36:	e014      	b.n	800de62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de38:	f7fd fbce 	bl	800b5d8 <HAL_RCC_GetPCLK2Freq>
 800de3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de3e:	e010      	b.n	800de62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de40:	4b1a      	ldr	r3, [pc, #104]	; (800deac <UART_SetConfig+0x5c0>)
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de44:	e00d      	b.n	800de62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de46:	f7fd fb43 	bl	800b4d0 <HAL_RCC_GetSysClockFreq>
 800de4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de4c:	e009      	b.n	800de62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de54:	e005      	b.n	800de62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800de56:	2300      	movs	r3, #0
 800de58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800de60:	bf00      	nop
    }

    if (pclk != 0U)
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	2b00      	cmp	r3, #0
 800de66:	d028      	beq.n	800deba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6c:	4a10      	ldr	r2, [pc, #64]	; (800deb0 <UART_SetConfig+0x5c4>)
 800de6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de72:	461a      	mov	r2, r3
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	fbb3 f2f2 	udiv	r2, r3, r2
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	085b      	lsrs	r3, r3, #1
 800de80:	441a      	add	r2, r3
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	fbb2 f3f3 	udiv	r3, r2, r3
 800de8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	2b0f      	cmp	r3, #15
 800de90:	d910      	bls.n	800deb4 <UART_SetConfig+0x5c8>
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de98:	d20c      	bcs.n	800deb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	60da      	str	r2, [r3, #12]
 800dea4:	e009      	b.n	800deba <UART_SetConfig+0x5ce>
 800dea6:	bf00      	nop
 800dea8:	40008000 	.word	0x40008000
 800deac:	00f42400 	.word	0x00f42400
 800deb0:	080167a4 	.word	0x080167a4
      }
      else
      {
        ret = HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2201      	movs	r2, #1
 800debe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2201      	movs	r2, #1
 800dec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2200      	movs	r2, #0
 800dece:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2200      	movs	r2, #0
 800ded4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ded6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3730      	adds	r7, #48	; 0x30
 800dede:	46bd      	mov	sp, r7
 800dee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	430a      	orrs	r2, r1
 800df2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df34:	f003 0304 	and.w	r3, r3, #4
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00a      	beq.n	800df52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	430a      	orrs	r2, r1
 800df50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df56:	f003 0308 	and.w	r3, r3, #8
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00a      	beq.n	800df74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df78:	f003 0310 	and.w	r3, r3, #16
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00a      	beq.n	800df96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9a:	f003 0320 	and.w	r3, r3, #32
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d01a      	beq.n	800dffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	430a      	orrs	r2, r1
 800dfd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfe2:	d10a      	bne.n	800dffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	430a      	orrs	r2, r1
 800dff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	430a      	orrs	r2, r1
 800e01a:	605a      	str	r2, [r3, #4]
  }
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e038:	f7f7 fed2 	bl	8005de0 <HAL_GetTick>
 800e03c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 0308 	and.w	r3, r3, #8
 800e048:	2b08      	cmp	r3, #8
 800e04a:	d10e      	bne.n	800e06a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f82f 	bl	800e0be <UART_WaitOnFlagUntilTimeout>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e066:	2303      	movs	r3, #3
 800e068:	e025      	b.n	800e0b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 0304 	and.w	r3, r3, #4
 800e074:	2b04      	cmp	r3, #4
 800e076:	d10e      	bne.n	800e096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f819 	bl	800e0be <UART_WaitOnFlagUntilTimeout>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e00f      	b.n	800e0b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2220      	movs	r2, #32
 800e09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2220      	movs	r2, #32
 800e0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b09c      	sub	sp, #112	; 0x70
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	60f8      	str	r0, [r7, #12]
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	603b      	str	r3, [r7, #0]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0ce:	e0a9      	b.n	800e224 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d6:	f000 80a5 	beq.w	800e224 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0da:	f7f7 fe81 	bl	8005de0 <HAL_GetTick>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d302      	bcc.n	800e0f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d140      	bne.n	800e172 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f8:	e853 3f00 	ldrex	r3, [r3]
 800e0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e104:	667b      	str	r3, [r7, #100]	; 0x64
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e10e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e110:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e6      	bne.n	800e0f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3308      	adds	r3, #8
 800e128:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12c:	e853 3f00 	ldrex	r3, [r3]
 800e130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	f023 0301 	bic.w	r3, r3, #1
 800e138:	663b      	str	r3, [r7, #96]	; 0x60
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3308      	adds	r3, #8
 800e140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e142:	64ba      	str	r2, [r7, #72]	; 0x48
 800e144:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e14a:	e841 2300 	strex	r3, r2, [r1]
 800e14e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1e5      	bne.n	800e122 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2220      	movs	r2, #32
 800e15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2220      	movs	r2, #32
 800e162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e069      	b.n	800e246 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f003 0304 	and.w	r3, r3, #4
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d051      	beq.n	800e224 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e18e:	d149      	bne.n	800e224 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e198:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	e853 3f00 	ldrex	r3, [r3]
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c0:	e841 2300 	strex	r3, r2, [r1]
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e6      	bne.n	800e19a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3308      	adds	r3, #8
 800e1d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	613b      	str	r3, [r7, #16]
   return(result);
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f023 0301 	bic.w	r3, r3, #1
 800e1e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1ec:	623a      	str	r2, [r7, #32]
 800e1ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	69f9      	ldr	r1, [r7, #28]
 800e1f2:	6a3a      	ldr	r2, [r7, #32]
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e5      	bne.n	800e1cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2220      	movs	r2, #32
 800e204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2220      	movs	r2, #32
 800e20c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2220      	movs	r2, #32
 800e214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e220:	2303      	movs	r3, #3
 800e222:	e010      	b.n	800e246 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	69da      	ldr	r2, [r3, #28]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	4013      	ands	r3, r2
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	429a      	cmp	r2, r3
 800e232:	bf0c      	ite	eq
 800e234:	2301      	moveq	r3, #1
 800e236:	2300      	movne	r3, #0
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	461a      	mov	r2, r3
 800e23c:	79fb      	ldrb	r3, [r7, #7]
 800e23e:	429a      	cmp	r2, r3
 800e240:	f43f af46 	beq.w	800e0d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3770      	adds	r7, #112	; 0x70
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b096      	sub	sp, #88	; 0x58
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	4613      	mov	r3, r2
 800e25c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	88fa      	ldrh	r2, [r7, #6]
 800e268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2222      	movs	r2, #34	; 0x22
 800e278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d02c      	beq.n	800e2de <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e288:	4a42      	ldr	r2, [pc, #264]	; (800e394 <UART_Start_Receive_DMA+0x144>)
 800e28a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e290:	4a41      	ldr	r2, [pc, #260]	; (800e398 <UART_Start_Receive_DMA+0x148>)
 800e292:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e298:	4a40      	ldr	r2, [pc, #256]	; (800e39c <UART_Start_Receive_DMA+0x14c>)
 800e29a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3324      	adds	r3, #36	; 0x24
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	88fb      	ldrh	r3, [r7, #6]
 800e2b8:	f7fa f87a 	bl	80083b0 <HAL_DMA_Start_IT>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00d      	beq.n	800e2de <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2210      	movs	r2, #16
 800e2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e055      	b.n	800e38a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d018      	beq.n	800e320 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f6:	e853 3f00 	ldrex	r3, [r3]
 800e2fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e302:	657b      	str	r3, [r7, #84]	; 0x54
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	461a      	mov	r2, r3
 800e30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e30e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e310:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e314:	e841 2300 	strex	r3, r2, [r1]
 800e318:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1e6      	bne.n	800e2ee <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3308      	adds	r3, #8
 800e326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	e853 3f00 	ldrex	r3, [r3]
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	f043 0301 	orr.w	r3, r3, #1
 800e336:	653b      	str	r3, [r7, #80]	; 0x50
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3308      	adds	r3, #8
 800e33e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e340:	637a      	str	r2, [r7, #52]	; 0x34
 800e342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e348:	e841 2300 	strex	r3, r2, [r1]
 800e34c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1e5      	bne.n	800e320 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3308      	adds	r3, #8
 800e35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	e853 3f00 	ldrex	r3, [r3]
 800e362:	613b      	str	r3, [r7, #16]
   return(result);
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e36a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3308      	adds	r3, #8
 800e372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e374:	623a      	str	r2, [r7, #32]
 800e376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e378:	69f9      	ldr	r1, [r7, #28]
 800e37a:	6a3a      	ldr	r2, [r7, #32]
 800e37c:	e841 2300 	strex	r3, r2, [r1]
 800e380:	61bb      	str	r3, [r7, #24]
   return(result);
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1e5      	bne.n	800e354 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3758      	adds	r7, #88	; 0x58
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0800e4ef 	.word	0x0800e4ef
 800e398:	0800e615 	.word	0x0800e615
 800e39c:	0800e64d 	.word	0x0800e64d

0800e3a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b08f      	sub	sp, #60	; 0x3c
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	e853 3f00 	ldrex	r3, [r3]
 800e3b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3c8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3ce:	e841 2300 	strex	r3, r2, [r1]
 800e3d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1e6      	bne.n	800e3a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3308      	adds	r3, #8
 800e3e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	e853 3f00 	ldrex	r3, [r3]
 800e3e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e3f0:	633b      	str	r3, [r7, #48]	; 0x30
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3fa:	61ba      	str	r2, [r7, #24]
 800e3fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fe:	6979      	ldr	r1, [r7, #20]
 800e400:	69ba      	ldr	r2, [r7, #24]
 800e402:	e841 2300 	strex	r3, r2, [r1]
 800e406:	613b      	str	r3, [r7, #16]
   return(result);
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1e5      	bne.n	800e3da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2220      	movs	r2, #32
 800e412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e416:	bf00      	nop
 800e418:	373c      	adds	r7, #60	; 0x3c
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e422:	b480      	push	{r7}
 800e424:	b095      	sub	sp, #84	; 0x54
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e43e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	461a      	mov	r2, r3
 800e446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e448:	643b      	str	r3, [r7, #64]	; 0x40
 800e44a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e44e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e6      	bne.n	800e42a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3308      	adds	r3, #8
 800e462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	6a3b      	ldr	r3, [r7, #32]
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e472:	f023 0301 	bic.w	r3, r3, #1
 800e476:	64bb      	str	r3, [r7, #72]	; 0x48
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3308      	adds	r3, #8
 800e47e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e480:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e488:	e841 2300 	strex	r3, r2, [r1]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e3      	bne.n	800e45c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d118      	bne.n	800e4ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	f023 0310 	bic.w	r3, r3, #16
 800e4b0:	647b      	str	r3, [r7, #68]	; 0x44
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4ba:	61bb      	str	r3, [r7, #24]
 800e4bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	6979      	ldr	r1, [r7, #20]
 800e4c0:	69ba      	ldr	r2, [r7, #24]
 800e4c2:	e841 2300 	strex	r3, r2, [r1]
 800e4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e6      	bne.n	800e49c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e4e2:	bf00      	nop
 800e4e4:	3754      	adds	r7, #84	; 0x54
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b09c      	sub	sp, #112	; 0x70
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0320 	and.w	r3, r3, #32
 800e506:	2b00      	cmp	r3, #0
 800e508:	d171      	bne.n	800e5ee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50c:	2200      	movs	r2, #0
 800e50e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e51a:	e853 3f00 	ldrex	r3, [r3]
 800e51e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e526:	66bb      	str	r3, [r7, #104]	; 0x68
 800e528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	461a      	mov	r2, r3
 800e52e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e530:	65bb      	str	r3, [r7, #88]	; 0x58
 800e532:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e538:	e841 2300 	strex	r3, r2, [r1]
 800e53c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e6      	bne.n	800e512 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3308      	adds	r3, #8
 800e54a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	e853 3f00 	ldrex	r3, [r3]
 800e552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e556:	f023 0301 	bic.w	r3, r3, #1
 800e55a:	667b      	str	r3, [r7, #100]	; 0x64
 800e55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3308      	adds	r3, #8
 800e562:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e564:	647a      	str	r2, [r7, #68]	; 0x44
 800e566:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e56c:	e841 2300 	strex	r3, r2, [r1]
 800e570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e5      	bne.n	800e544 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3308      	adds	r3, #8
 800e57e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	e853 3f00 	ldrex	r3, [r3]
 800e586:	623b      	str	r3, [r7, #32]
   return(result);
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e58e:	663b      	str	r3, [r7, #96]	; 0x60
 800e590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3308      	adds	r3, #8
 800e596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e598:	633a      	str	r2, [r7, #48]	; 0x30
 800e59a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a0:	e841 2300 	strex	r3, r2, [r1]
 800e5a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e5      	bne.n	800e578 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ae:	2220      	movs	r2, #32
 800e5b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d118      	bne.n	800e5ee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	e853 3f00 	ldrex	r3, [r3]
 800e5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f023 0310 	bic.w	r3, r3, #16
 800e5d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5da:	61fb      	str	r3, [r7, #28]
 800e5dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5de:	69b9      	ldr	r1, [r7, #24]
 800e5e0:	69fa      	ldr	r2, [r7, #28]
 800e5e2:	e841 2300 	strex	r3, r2, [r1]
 800e5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1e6      	bne.n	800e5bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d107      	bne.n	800e606 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e600:	f7ff f968 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e604:	e002      	b.n	800e60c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e606:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e608:	f7ff f946 	bl	800d898 <HAL_UART_RxCpltCallback>
}
 800e60c:	bf00      	nop
 800e60e:	3770      	adds	r7, #112	; 0x70
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e620:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e626:	2b01      	cmp	r3, #1
 800e628:	d109      	bne.n	800e63e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e630:	085b      	lsrs	r3, r3, #1
 800e632:	b29b      	uxth	r3, r3
 800e634:	4619      	mov	r1, r3
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff f94c 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e63c:	e002      	b.n	800e644 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff f934 	bl	800d8ac <HAL_UART_RxHalfCpltCallback>
}
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e658:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e660:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e668:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e674:	2b80      	cmp	r3, #128	; 0x80
 800e676:	d109      	bne.n	800e68c <UART_DMAError+0x40>
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2b21      	cmp	r3, #33	; 0x21
 800e67c:	d106      	bne.n	800e68c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	2200      	movs	r2, #0
 800e682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f7ff fe8a 	bl	800e3a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e696:	2b40      	cmp	r3, #64	; 0x40
 800e698:	d109      	bne.n	800e6ae <UART_DMAError+0x62>
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b22      	cmp	r3, #34	; 0x22
 800e69e:	d106      	bne.n	800e6ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e6a8:	6978      	ldr	r0, [r7, #20]
 800e6aa:	f7ff feba 	bl	800e422 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6b4:	f043 0210 	orr.w	r2, r3, #16
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6be:	6978      	ldr	r0, [r7, #20]
 800e6c0:	f7ff f8fe 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6c4:	bf00      	nop
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff f8e8 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6f0:	bf00      	nop
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b088      	sub	sp, #32
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	e853 3f00 	ldrex	r3, [r3]
 800e70c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e714:	61fb      	str	r3, [r7, #28]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	61bb      	str	r3, [r7, #24]
 800e720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	6979      	ldr	r1, [r7, #20]
 800e724:	69ba      	ldr	r2, [r7, #24]
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	613b      	str	r3, [r7, #16]
   return(result);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e6      	bne.n	800e700 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2220      	movs	r2, #32
 800e736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7ff f89f 	bl	800d884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e746:	bf00      	nop
 800e748:	3720      	adds	r7, #32
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e756:	bf00      	nop
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e77e:	bf00      	nop
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b085      	sub	sp, #20
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d101      	bne.n	800e7a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800e79c:	2302      	movs	r3, #2
 800e79e:	e027      	b.n	800e7f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2224      	movs	r2, #36	; 0x24
 800e7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0201 	bic.w	r2, r2, #1
 800e7c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2220      	movs	r2, #32
 800e7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d101      	bne.n	800e814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e810:	2302      	movs	r3, #2
 800e812:	e02d      	b.n	800e870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2201      	movs	r2, #1
 800e818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2224      	movs	r2, #36	; 0x24
 800e820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f022 0201 	bic.w	r2, r2, #1
 800e83a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	430a      	orrs	r2, r1
 800e84e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f8ab 	bl	800e9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2220      	movs	r2, #32
 800e862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d101      	bne.n	800e890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e88c:	2302      	movs	r3, #2
 800e88e:	e02d      	b.n	800e8ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2224      	movs	r2, #36	; 0x24
 800e89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0201 	bic.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f86d 	bl	800e9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08c      	sub	sp, #48	; 0x30
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	4613      	mov	r3, r2
 800e900:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e908:	2b20      	cmp	r3, #32
 800e90a:	d14a      	bne.n	800e9a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d002      	beq.n	800e918 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e912:	88fb      	ldrh	r3, [r7, #6]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	e043      	b.n	800e9a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e922:	2b01      	cmp	r3, #1
 800e924:	d101      	bne.n	800e92a <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800e926:	2302      	movs	r3, #2
 800e928:	e03c      	b.n	800e9a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2201      	movs	r2, #1
 800e936:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e938:	88fb      	ldrh	r3, [r7, #6]
 800e93a:	461a      	mov	r2, r3
 800e93c:	68b9      	ldr	r1, [r7, #8]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f7ff fc86 	bl	800e250 <UART_Start_Receive_DMA>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d124      	bne.n	800e99c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e956:	2b01      	cmp	r3, #1
 800e958:	d11d      	bne.n	800e996 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2210      	movs	r2, #16
 800e960:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	617b      	str	r3, [r7, #20]
   return(result);
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f043 0310 	orr.w	r3, r3, #16
 800e976:	62bb      	str	r3, [r7, #40]	; 0x28
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
 800e982:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e984:	6a39      	ldr	r1, [r7, #32]
 800e986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e988:	e841 2300 	strex	r3, r2, [r1]
 800e98c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e6      	bne.n	800e962 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800e994:	e002      	b.n	800e99c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800e99c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9a0:	e000      	b.n	800e9a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800e9a2:	2302      	movs	r3, #2
  }
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3730      	adds	r7, #48	; 0x30
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d108      	bne.n	800e9ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9cc:	e031      	b.n	800ea32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9ce:	2308      	movs	r3, #8
 800e9d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9d2:	2308      	movs	r3, #8
 800e9d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	0e5b      	lsrs	r3, r3, #25
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	f003 0307 	and.w	r3, r3, #7
 800e9e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	0f5b      	lsrs	r3, r3, #29
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	f003 0307 	and.w	r3, r3, #7
 800e9f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
 800e9f8:	7b3a      	ldrb	r2, [r7, #12]
 800e9fa:	4911      	ldr	r1, [pc, #68]	; (800ea40 <UARTEx_SetNbDataToProcess+0x94>)
 800e9fc:	5c8a      	ldrb	r2, [r1, r2]
 800e9fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea02:	7b3a      	ldrb	r2, [r7, #12]
 800ea04:	490f      	ldr	r1, [pc, #60]	; (800ea44 <UARTEx_SetNbDataToProcess+0x98>)
 800ea06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea14:	7bfb      	ldrb	r3, [r7, #15]
 800ea16:	7b7a      	ldrb	r2, [r7, #13]
 800ea18:	4909      	ldr	r1, [pc, #36]	; (800ea40 <UARTEx_SetNbDataToProcess+0x94>)
 800ea1a:	5c8a      	ldrb	r2, [r1, r2]
 800ea1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea20:	7b7a      	ldrb	r2, [r7, #13]
 800ea22:	4908      	ldr	r1, [pc, #32]	; (800ea44 <UARTEx_SetNbDataToProcess+0x98>)
 800ea24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea32:	bf00      	nop
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	080167bc 	.word	0x080167bc
 800ea44:	080167c4 	.word	0x080167c4

0800ea48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ea58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ea5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ea7e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ea82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	43db      	mvns	r3, r3
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4013      	ands	r3, r2
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800eaac:	b084      	sub	sp, #16
 800eaae:	b480      	push	{r7}
 800eab0:	b083      	sub	sp, #12
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	f107 0014 	add.w	r0, r7, #20
 800eaba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	b004      	add	sp, #16
 800eaec:	4770      	bx	lr
	...

0800eaf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b09d      	sub	sp, #116	; 0x74
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	881b      	ldrh	r3, [r3, #0]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800eb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	78db      	ldrb	r3, [r3, #3]
 800eb1e:	2b03      	cmp	r3, #3
 800eb20:	d81f      	bhi.n	800eb62 <USB_ActivateEndpoint+0x72>
 800eb22:	a201      	add	r2, pc, #4	; (adr r2, 800eb28 <USB_ActivateEndpoint+0x38>)
 800eb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb28:	0800eb39 	.word	0x0800eb39
 800eb2c:	0800eb55 	.word	0x0800eb55
 800eb30:	0800eb6b 	.word	0x0800eb6b
 800eb34:	0800eb47 	.word	0x0800eb47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800eb38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eb44:	e012      	b.n	800eb6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800eb46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800eb4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eb52:	e00b      	b.n	800eb6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800eb54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eb5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eb60:	e004      	b.n	800eb6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800eb62:	2301      	movs	r3, #1
 800eb64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800eb68:	e000      	b.n	800eb6c <USB_ActivateEndpoint+0x7c>
      break;
 800eb6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	441a      	add	r2, r3
 800eb76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4413      	add	r3, r2
 800eb98:	881b      	ldrh	r3, [r3, #0]
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	b21b      	sxth	r3, r3
 800eb9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eba6:	b21a      	sxth	r2, r3
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	b21b      	sxth	r3, r3
 800ebb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	441a      	add	r2, r3
 800ebc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ebc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	7b1b      	ldrb	r3, [r3, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f040 8149 	bne.w	800ee74 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	785b      	ldrb	r3, [r3, #1]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 8084 	beq.w	800ecf4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	61bb      	str	r3, [r7, #24]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	61bb      	str	r3, [r7, #24]
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	00da      	lsls	r2, r3, #3
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec0e:	617b      	str	r3, [r7, #20]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	88db      	ldrh	r3, [r3, #6]
 800ec14:	085b      	lsrs	r3, r3, #1
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	827b      	strh	r3, [r7, #18]
 800ec2e:	8a7b      	ldrh	r3, [r7, #18]
 800ec30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d01b      	beq.n	800ec70 <USB_ActivateEndpoint+0x180>
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4413      	add	r3, r2
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec4e:	823b      	strh	r3, [r7, #16]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	441a      	add	r2, r3
 800ec5a:	8a3b      	ldrh	r3, [r7, #16]
 800ec5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	78db      	ldrb	r3, [r3, #3]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d020      	beq.n	800ecba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec8e:	81bb      	strh	r3, [r7, #12]
 800ec90:	89bb      	ldrh	r3, [r7, #12]
 800ec92:	f083 0320 	eor.w	r3, r3, #32
 800ec96:	81bb      	strh	r3, [r7, #12]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	441a      	add	r2, r3
 800eca2:	89bb      	ldrh	r3, [r7, #12]
 800eca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	8013      	strh	r3, [r2, #0]
 800ecb8:	e2a6      	b.n	800f208 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecd0:	81fb      	strh	r3, [r7, #14]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	441a      	add	r2, r3
 800ecdc:	89fb      	ldrh	r3, [r7, #14]
 800ecde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ece2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ece6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	8013      	strh	r3, [r2, #0]
 800ecf2:	e289      	b.n	800f208 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	633b      	str	r3, [r7, #48]	; 0x30
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	461a      	mov	r2, r3
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	4413      	add	r3, r2
 800ed06:	633b      	str	r3, [r7, #48]	; 0x30
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	00da      	lsls	r2, r3, #3
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	4413      	add	r3, r2
 800ed12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	085b      	lsrs	r3, r3, #1
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	005b      	lsls	r3, r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	461a      	mov	r2, r3
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	4413      	add	r3, r2
 800ed3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	00da      	lsls	r2, r3, #3
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	4413      	add	r3, r2
 800ed46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	2b3e      	cmp	r3, #62	; 0x3e
 800ed52:	d918      	bls.n	800ed86 <USB_ActivateEndpoint+0x296>
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	095b      	lsrs	r3, r3, #5
 800ed5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	f003 031f 	and.w	r3, r3, #31
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <USB_ActivateEndpoint+0x27e>
 800ed68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	029b      	lsls	r3, r3, #10
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	801a      	strh	r2, [r3, #0]
 800ed84:	e029      	b.n	800edda <USB_ActivateEndpoint+0x2ea>
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d112      	bne.n	800edb4 <USB_ActivateEndpoint+0x2c4>
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	801a      	strh	r2, [r3, #0]
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eda8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edac:	b29a      	uxth	r2, r3
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	e012      	b.n	800edda <USB_ActivateEndpoint+0x2ea>
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	085b      	lsrs	r3, r3, #1
 800edba:	66bb      	str	r3, [r7, #104]	; 0x68
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	f003 0301 	and.w	r3, r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <USB_ActivateEndpoint+0x2de>
 800edc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edca:	3301      	adds	r3, #1
 800edcc:	66bb      	str	r3, [r7, #104]	; 0x68
 800edce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	029b      	lsls	r3, r3, #10
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4413      	add	r3, r2
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	847b      	strh	r3, [r7, #34]	; 0x22
 800ede8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01b      	beq.n	800ee2a <USB_ActivateEndpoint+0x33a>
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee08:	843b      	strh	r3, [r7, #32]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	441a      	add	r2, r3
 800ee14:	8c3b      	ldrh	r3, [r7, #32]
 800ee16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee40:	83fb      	strh	r3, [r7, #30]
 800ee42:	8bfb      	ldrh	r3, [r7, #30]
 800ee44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ee48:	83fb      	strh	r3, [r7, #30]
 800ee4a:	8bfb      	ldrh	r3, [r7, #30]
 800ee4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ee50:	83fb      	strh	r3, [r7, #30]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	441a      	add	r2, r3
 800ee5c:	8bfb      	ldrh	r3, [r7, #30]
 800ee5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	8013      	strh	r3, [r2, #0]
 800ee72:	e1c9      	b.n	800f208 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	78db      	ldrb	r3, [r3, #3]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d11e      	bne.n	800eeba <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	441a      	add	r2, r3
 800eea0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800eea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800eeb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	8013      	strh	r3, [r2, #0]
 800eeb8:	e01d      	b.n	800eef6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800eecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eed0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	441a      	add	r2, r3
 800eede:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800eee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	461a      	mov	r2, r3
 800ef04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef06:	4413      	add	r3, r2
 800ef08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	00da      	lsls	r2, r3, #3
 800ef10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef12:	4413      	add	r3, r2
 800ef14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef18:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	891b      	ldrh	r3, [r3, #8]
 800ef1e:	085b      	lsrs	r3, r3, #1
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef28:	801a      	strh	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	461a      	mov	r2, r3
 800ef38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef3a:	4413      	add	r3, r2
 800ef3c:	657b      	str	r3, [r7, #84]	; 0x54
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	00da      	lsls	r2, r3, #3
 800ef44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef46:	4413      	add	r3, r2
 800ef48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef4c:	653b      	str	r3, [r7, #80]	; 0x50
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	895b      	ldrh	r3, [r3, #10]
 800ef52:	085b      	lsrs	r3, r3, #1
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	b29a      	uxth	r2, r3
 800ef5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef5c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	785b      	ldrb	r3, [r3, #1]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f040 8093 	bne.w	800f08e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	4413      	add	r3, r2
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ef78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ef7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d01b      	beq.n	800efbc <USB_ActivateEndpoint+0x4cc>
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	881b      	ldrh	r3, [r3, #0]
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	441a      	add	r2, r3
 800efa6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800efb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efb8:	b29b      	uxth	r3, r3
 800efba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800efca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d01b      	beq.n	800f00c <USB_ActivateEndpoint+0x51c>
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efea:	877b      	strh	r3, [r7, #58]	; 0x3a
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	441a      	add	r2, r3
 800eff6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800effc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f008:	b29b      	uxth	r3, r3
 800f00a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	4413      	add	r3, r2
 800f016:	881b      	ldrh	r3, [r3, #0]
 800f018:	b29b      	uxth	r3, r3
 800f01a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f022:	873b      	strh	r3, [r7, #56]	; 0x38
 800f024:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f026:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f02a:	873b      	strh	r3, [r7, #56]	; 0x38
 800f02c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f02e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f032:	873b      	strh	r3, [r7, #56]	; 0x38
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	441a      	add	r2, r3
 800f03e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f050:	b29b      	uxth	r3, r3
 800f052:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	b29b      	uxth	r3, r3
 800f062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f06a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	441a      	add	r2, r3
 800f076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f088:	b29b      	uxth	r3, r3
 800f08a:	8013      	strh	r3, [r2, #0]
 800f08c:	e0bc      	b.n	800f208 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4413      	add	r3, r2
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f09e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01d      	beq.n	800f0e6 <USB_ActivateEndpoint+0x5f6>
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	441a      	add	r2, r3
 800f0ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f0f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d01d      	beq.n	800f13e <USB_ActivateEndpoint+0x64e>
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f118:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	441a      	add	r2, r3
 800f126:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f12a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f12e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	78db      	ldrb	r3, [r3, #3]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d024      	beq.n	800f190 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	b29b      	uxth	r3, r3
 800f154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f15c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f160:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f164:	f083 0320 	eor.w	r3, r3, #32
 800f168:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	441a      	add	r2, r3
 800f176:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f17a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f17e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	8013      	strh	r3, [r2, #0]
 800f18e:	e01d      	b.n	800f1cc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4413      	add	r3, r2
 800f19a:	881b      	ldrh	r3, [r3, #0]
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	441a      	add	r2, r3
 800f1b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f1b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4413      	add	r3, r2
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	441a      	add	r2, r3
 800f1f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f204:	b29b      	uxth	r3, r3
 800f206:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f208:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3774      	adds	r7, #116	; 0x74
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f218:	b480      	push	{r7}
 800f21a:	b08d      	sub	sp, #52	; 0x34
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	7b1b      	ldrb	r3, [r3, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	f040 808e 	bne.w	800f348 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	785b      	ldrb	r3, [r3, #1]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d044      	beq.n	800f2be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4413      	add	r3, r2
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	81bb      	strh	r3, [r7, #12]
 800f242:	89bb      	ldrh	r3, [r7, #12]
 800f244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d01b      	beq.n	800f284 <USB_DeactivateEndpoint+0x6c>
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	b29b      	uxth	r3, r3
 800f25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f262:	817b      	strh	r3, [r7, #10]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	441a      	add	r2, r3
 800f26e:	897b      	ldrh	r3, [r7, #10]
 800f270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f27c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f280:	b29b      	uxth	r3, r3
 800f282:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	b29b      	uxth	r3, r3
 800f292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f29a:	813b      	strh	r3, [r7, #8]
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	441a      	add	r2, r3
 800f2a6:	893b      	ldrh	r3, [r7, #8]
 800f2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	8013      	strh	r3, [r2, #0]
 800f2bc:	e192      	b.n	800f5e4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	827b      	strh	r3, [r7, #18]
 800f2cc:	8a7b      	ldrh	r3, [r7, #18]
 800f2ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d01b      	beq.n	800f30e <USB_DeactivateEndpoint+0xf6>
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ec:	823b      	strh	r3, [r7, #16]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	441a      	add	r2, r3
 800f2f8:	8a3b      	ldrh	r3, [r7, #16]
 800f2fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f324:	81fb      	strh	r3, [r7, #14]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	441a      	add	r2, r3
 800f330:	89fb      	ldrh	r3, [r7, #14]
 800f332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f342:	b29b      	uxth	r3, r3
 800f344:	8013      	strh	r3, [r2, #0]
 800f346:	e14d      	b.n	800f5e4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	785b      	ldrb	r3, [r3, #1]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f040 80a5 	bne.w	800f49c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	843b      	strh	r3, [r7, #32]
 800f360:	8c3b      	ldrh	r3, [r7, #32]
 800f362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f366:	2b00      	cmp	r3, #0
 800f368:	d01b      	beq.n	800f3a2 <USB_DeactivateEndpoint+0x18a>
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4413      	add	r3, r2
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	b29b      	uxth	r3, r3
 800f378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f37c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f380:	83fb      	strh	r3, [r7, #30]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	441a      	add	r2, r3
 800f38c:	8bfb      	ldrh	r3, [r7, #30]
 800f38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	881b      	ldrh	r3, [r3, #0]
 800f3ae:	83bb      	strh	r3, [r7, #28]
 800f3b0:	8bbb      	ldrh	r3, [r7, #28]
 800f3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d01b      	beq.n	800f3f2 <USB_DeactivateEndpoint+0x1da>
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4413      	add	r3, r2
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3d0:	837b      	strh	r3, [r7, #26]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	441a      	add	r2, r3
 800f3dc:	8b7b      	ldrh	r3, [r7, #26]
 800f3de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f408:	833b      	strh	r3, [r7, #24]
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	441a      	add	r2, r3
 800f414:	8b3b      	ldrh	r3, [r7, #24]
 800f416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f41a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f41e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f422:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f426:	b29b      	uxth	r3, r3
 800f428:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	b29b      	uxth	r3, r3
 800f438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f440:	82fb      	strh	r3, [r7, #22]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	441a      	add	r2, r3
 800f44c:	8afb      	ldrh	r3, [r7, #22]
 800f44e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f45e:	b29b      	uxth	r3, r3
 800f460:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	b29b      	uxth	r3, r3
 800f470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f478:	82bb      	strh	r3, [r7, #20]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	441a      	add	r2, r3
 800f484:	8abb      	ldrh	r3, [r7, #20]
 800f486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f48a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f48e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f496:	b29b      	uxth	r3, r3
 800f498:	8013      	strh	r3, [r2, #0]
 800f49a:	e0a3      	b.n	800f5e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f4aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01b      	beq.n	800f4ec <USB_DeactivateEndpoint+0x2d4>
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	441a      	add	r2, r3
 800f4d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4413      	add	r3, r2
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f4fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f500:	2b00      	cmp	r3, #0
 800f502:	d01b      	beq.n	800f53c <USB_DeactivateEndpoint+0x324>
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	b29b      	uxth	r3, r3
 800f512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f51a:	853b      	strh	r3, [r7, #40]	; 0x28
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	441a      	add	r2, r3
 800f526:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f52c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f538:	b29b      	uxth	r3, r3
 800f53a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f552:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	441a      	add	r2, r3
 800f55e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f570:	b29b      	uxth	r3, r3
 800f572:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	4413      	add	r3, r2
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b29b      	uxth	r3, r3
 800f582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f58a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	441a      	add	r2, r3
 800f596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f59c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	4413      	add	r3, r2
 800f5b6:	881b      	ldrh	r3, [r3, #0]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	441a      	add	r2, r3
 800f5ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3734      	adds	r7, #52	; 0x34
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b0c2      	sub	sp, #264	; 0x108
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f600:	6018      	str	r0, [r3, #0]
 800f602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f60a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	785b      	ldrb	r3, [r3, #1]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	f040 867b 	bne.w	8010314 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	699a      	ldr	r2, [r3, #24]
 800f62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	691b      	ldr	r3, [r3, #16]
 800f636:	429a      	cmp	r2, r3
 800f638:	d908      	bls.n	800f64c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f64a:	e007      	b.n	800f65c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	699b      	ldr	r3, [r3, #24]
 800f658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	7b1b      	ldrb	r3, [r3, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d13a      	bne.n	800f6e2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6959      	ldr	r1, [r3, #20]
 800f678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	88da      	ldrh	r2, [r3, #6]
 800f684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f688:	b29b      	uxth	r3, r3
 800f68a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f68e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f692:	6800      	ldr	r0, [r0, #0]
 800f694:	f001 fc1d 	bl	8010ed2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	613b      	str	r3, [r7, #16]
 800f6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	613b      	str	r3, [r7, #16]
 800f6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	00da      	lsls	r2, r3, #3
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	801a      	strh	r2, [r3, #0]
 800f6de:	f000 bde3 	b.w	80102a8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	78db      	ldrb	r3, [r3, #3]
 800f6ee:	2b02      	cmp	r3, #2
 800f6f0:	f040 843a 	bne.w	800ff68 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6a1a      	ldr	r2, [r3, #32]
 800f700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	f240 83b7 	bls.w	800fe80 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	4413      	add	r3, r2
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f738:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	441a      	add	r2, r3
 800f756:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f75a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f75e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f762:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6a1a      	ldr	r2, [r3, #32]
 800f77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f77e:	1ad2      	subs	r2, r2, r3
 800f780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 81b3 	beq.w	800fb1a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	633b      	str	r3, [r7, #48]	; 0x30
 800f7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	785b      	ldrb	r3, [r3, #1]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d16d      	bne.n	800f8ac <USB_EPStartXfer+0x2ba>
 800f7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f0:	4413      	add	r3, r2
 800f7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	00da      	lsls	r2, r3, #3
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	4413      	add	r3, r2
 800f806:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
 800f80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f810:	2b3e      	cmp	r3, #62	; 0x3e
 800f812:	d91c      	bls.n	800f84e <USB_EPStartXfer+0x25c>
 800f814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f818:	095b      	lsrs	r3, r3, #5
 800f81a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f822:	f003 031f 	and.w	r3, r3, #31
 800f826:	2b00      	cmp	r3, #0
 800f828:	d104      	bne.n	800f834 <USB_EPStartXfer+0x242>
 800f82a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f82e:	3b01      	subs	r3, #1
 800f830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f834:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f838:	b29b      	uxth	r3, r3
 800f83a:	029b      	lsls	r3, r3, #10
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f846:	b29a      	uxth	r2, r3
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	801a      	strh	r2, [r3, #0]
 800f84c:	e053      	b.n	800f8f6 <USB_EPStartXfer+0x304>
 800f84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f852:	2b00      	cmp	r3, #0
 800f854:	d112      	bne.n	800f87c <USB_EPStartXfer+0x28a>
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f860:	b29a      	uxth	r2, r3
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	801a      	strh	r2, [r3, #0]
 800f866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f874:	b29a      	uxth	r2, r3
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	801a      	strh	r2, [r3, #0]
 800f87a:	e03c      	b.n	800f8f6 <USB_EPStartXfer+0x304>
 800f87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f880:	085b      	lsrs	r3, r3, #1
 800f882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f88a:	f003 0301 	and.w	r3, r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d004      	beq.n	800f89c <USB_EPStartXfer+0x2aa>
 800f892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f896:	3301      	adds	r3, #1
 800f898:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f89c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	029b      	lsls	r3, r3, #10
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	801a      	strh	r2, [r3, #0]
 800f8aa:	e024      	b.n	800f8f6 <USB_EPStartXfer+0x304>
 800f8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	785b      	ldrb	r3, [r3, #1]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d11c      	bne.n	800f8f6 <USB_EPStartXfer+0x304>
 800f8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	4413      	add	r3, r2
 800f8d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	00da      	lsls	r2, r3, #3
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	895b      	ldrh	r3, [r3, #10]
 800f902:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	6959      	ldr	r1, [r3, #20]
 800f912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f916:	b29b      	uxth	r3, r3
 800f918:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f91c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f920:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f924:	6800      	ldr	r0, [r0, #0]
 800f926:	f001 fad4 	bl	8010ed2 <USB_WritePMA>
            ep->xfer_buff += len;
 800f92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f92e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	695a      	ldr	r2, [r3, #20]
 800f936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f93a:	441a      	add	r2, r3
 800f93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f94c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	6a1a      	ldr	r2, [r3, #32]
 800f954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	691b      	ldr	r3, [r3, #16]
 800f960:	429a      	cmp	r2, r3
 800f962:	d90f      	bls.n	800f984 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800f964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6a1a      	ldr	r2, [r3, #32]
 800f970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f974:	1ad2      	subs	r2, r2, r3
 800f976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	621a      	str	r2, [r3, #32]
 800f982:	e00e      	b.n	800f9a2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800f984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	6a1b      	ldr	r3, [r3, #32]
 800f990:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	785b      	ldrb	r3, [r3, #1]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d16d      	bne.n	800fa8e <USB_EPStartXfer+0x49c>
 800f9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	61bb      	str	r3, [r7, #24]
 800f9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	61bb      	str	r3, [r7, #24]
 800f9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	00da      	lsls	r2, r3, #3
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9f2:	2b3e      	cmp	r3, #62	; 0x3e
 800f9f4:	d91c      	bls.n	800fa30 <USB_EPStartXfer+0x43e>
 800f9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9fa:	095b      	lsrs	r3, r3, #5
 800f9fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa04:	f003 031f 	and.w	r3, r3, #31
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d104      	bne.n	800fa16 <USB_EPStartXfer+0x424>
 800fa0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa10:	3b01      	subs	r3, #1
 800fa12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	029b      	lsls	r3, r3, #10
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	801a      	strh	r2, [r3, #0]
 800fa2e:	e059      	b.n	800fae4 <USB_EPStartXfer+0x4f2>
 800fa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d112      	bne.n	800fa5e <USB_EPStartXfer+0x46c>
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	881b      	ldrh	r3, [r3, #0]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	801a      	strh	r2, [r3, #0]
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	801a      	strh	r2, [r3, #0]
 800fa5c:	e042      	b.n	800fae4 <USB_EPStartXfer+0x4f2>
 800fa5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa62:	085b      	lsrs	r3, r3, #1
 800fa64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa6c:	f003 0301 	and.w	r3, r3, #1
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <USB_EPStartXfer+0x48c>
 800fa74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa78:	3301      	adds	r3, #1
 800fa7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	029b      	lsls	r3, r3, #10
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	801a      	strh	r2, [r3, #0]
 800fa8c:	e02a      	b.n	800fae4 <USB_EPStartXfer+0x4f2>
 800fa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	785b      	ldrb	r3, [r3, #1]
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d122      	bne.n	800fae4 <USB_EPStartXfer+0x4f2>
 800fa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	623b      	str	r3, [r7, #32]
 800faaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fab8:	b29b      	uxth	r3, r3
 800faba:	461a      	mov	r2, r3
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	4413      	add	r3, r2
 800fac0:	623b      	str	r3, [r7, #32]
 800fac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	00da      	lsls	r2, r3, #3
 800fad0:	6a3b      	ldr	r3, [r7, #32]
 800fad2:	4413      	add	r3, r2
 800fad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fade:	b29a      	uxth	r2, r3
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	891b      	ldrh	r3, [r3, #8]
 800faf0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800faf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	6959      	ldr	r1, [r3, #20]
 800fb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fb0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fb0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fb12:	6800      	ldr	r0, [r0, #0]
 800fb14:	f001 f9dd 	bl	8010ed2 <USB_WritePMA>
 800fb18:	e3c6      	b.n	80102a8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	785b      	ldrb	r3, [r3, #1]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d16d      	bne.n	800fc06 <USB_EPStartXfer+0x614>
 800fb2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	461a      	mov	r2, r3
 800fb48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb4a:	4413      	add	r3, r2
 800fb4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	00da      	lsls	r2, r3, #3
 800fb5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb5e:	4413      	add	r3, r2
 800fb60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fb64:	647b      	str	r3, [r7, #68]	; 0x44
 800fb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb6a:	2b3e      	cmp	r3, #62	; 0x3e
 800fb6c:	d91c      	bls.n	800fba8 <USB_EPStartXfer+0x5b6>
 800fb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb72:	095b      	lsrs	r3, r3, #5
 800fb74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7c:	f003 031f 	and.w	r3, r3, #31
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d104      	bne.n	800fb8e <USB_EPStartXfer+0x59c>
 800fb84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fb8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	029b      	lsls	r3, r3, #10
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba4:	801a      	strh	r2, [r3, #0]
 800fba6:	e059      	b.n	800fc5c <USB_EPStartXfer+0x66a>
 800fba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d112      	bne.n	800fbd6 <USB_EPStartXfer+0x5e4>
 800fbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbbe:	801a      	strh	r2, [r3, #0]
 800fbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd2:	801a      	strh	r2, [r3, #0]
 800fbd4:	e042      	b.n	800fc5c <USB_EPStartXfer+0x66a>
 800fbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbda:	085b      	lsrs	r3, r3, #1
 800fbdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbe4:	f003 0301 	and.w	r3, r3, #1
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d004      	beq.n	800fbf6 <USB_EPStartXfer+0x604>
 800fbec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fbf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	029b      	lsls	r3, r3, #10
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc02:	801a      	strh	r2, [r3, #0]
 800fc04:	e02a      	b.n	800fc5c <USB_EPStartXfer+0x66a>
 800fc06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	785b      	ldrb	r3, [r3, #1]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d122      	bne.n	800fc5c <USB_EPStartXfer+0x66a>
 800fc16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	653b      	str	r3, [r7, #80]	; 0x50
 800fc22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	461a      	mov	r2, r3
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	4413      	add	r3, r2
 800fc38:	653b      	str	r3, [r7, #80]	; 0x50
 800fc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	00da      	lsls	r2, r3, #3
 800fc48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fc50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fc5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	891b      	ldrh	r3, [r3, #8]
 800fc68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	6959      	ldr	r1, [r3, #20]
 800fc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc8a:	6800      	ldr	r0, [r0, #0]
 800fc8c:	f001 f921 	bl	8010ed2 <USB_WritePMA>
            ep->xfer_buff += len;
 800fc90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	695a      	ldr	r2, [r3, #20]
 800fc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fca0:	441a      	add	r2, r3
 800fca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fcae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	6a1a      	ldr	r2, [r3, #32]
 800fcba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d90f      	bls.n	800fcea <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800fcca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	6a1a      	ldr	r2, [r3, #32]
 800fcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcda:	1ad2      	subs	r2, r2, r3
 800fcdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	621a      	str	r2, [r3, #32]
 800fce8:	e00e      	b.n	800fd08 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800fcea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fcfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2200      	movs	r2, #0
 800fd06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fd08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	643b      	str	r3, [r7, #64]	; 0x40
 800fd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	785b      	ldrb	r3, [r3, #1]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d16d      	bne.n	800fe00 <USB_EPStartXfer+0x80e>
 800fd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	461a      	mov	r2, r3
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	4413      	add	r3, r2
 800fd46:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	00da      	lsls	r2, r3, #3
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	4413      	add	r3, r2
 800fd5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fd5e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd64:	2b3e      	cmp	r3, #62	; 0x3e
 800fd66:	d91c      	bls.n	800fda2 <USB_EPStartXfer+0x7b0>
 800fd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd6c:	095b      	lsrs	r3, r3, #5
 800fd6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd76:	f003 031f 	and.w	r3, r3, #31
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d104      	bne.n	800fd88 <USB_EPStartXfer+0x796>
 800fd7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fd82:	3b01      	subs	r3, #1
 800fd84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	029b      	lsls	r3, r3, #10
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9e:	801a      	strh	r2, [r3, #0]
 800fda0:	e053      	b.n	800fe4a <USB_EPStartXfer+0x858>
 800fda2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d112      	bne.n	800fdd0 <USB_EPStartXfer+0x7de>
 800fdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb8:	801a      	strh	r2, [r3, #0]
 800fdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbc:	881b      	ldrh	r3, [r3, #0]
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdcc:	801a      	strh	r2, [r3, #0]
 800fdce:	e03c      	b.n	800fe4a <USB_EPStartXfer+0x858>
 800fdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdd4:	085b      	lsrs	r3, r3, #1
 800fdd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdde:	f003 0301 	and.w	r3, r3, #1
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d004      	beq.n	800fdf0 <USB_EPStartXfer+0x7fe>
 800fde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fdea:	3301      	adds	r3, #1
 800fdec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	029b      	lsls	r3, r3, #10
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfc:	801a      	strh	r2, [r3, #0]
 800fdfe:	e024      	b.n	800fe4a <USB_EPStartXfer+0x858>
 800fe00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d11c      	bne.n	800fe4a <USB_EPStartXfer+0x858>
 800fe10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	461a      	mov	r2, r3
 800fe22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe24:	4413      	add	r3, r2
 800fe26:	643b      	str	r3, [r7, #64]	; 0x40
 800fe28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	00da      	lsls	r2, r3, #3
 800fe36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe38:	4413      	add	r3, r2
 800fe3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fe4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	895b      	ldrh	r3, [r3, #10]
 800fe56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6959      	ldr	r1, [r3, #20]
 800fe66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fe74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fe78:	6800      	ldr	r0, [r0, #0]
 800fe7a:	f001 f82a 	bl	8010ed2 <USB_WritePMA>
 800fe7e:	e213      	b.n	80102a8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fe80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	6a1b      	ldr	r3, [r3, #32]
 800fe8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fe90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	b29b      	uxth	r3, r3
 800feae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800feb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feb6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800feba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800febe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	441a      	add	r2, r3
 800fed4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fedc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fee8:	b29b      	uxth	r3, r3
 800feea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800feec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fefc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	461a      	mov	r2, r3
 800ff0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff0c:	4413      	add	r3, r2
 800ff0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	00da      	lsls	r2, r3, #3
 800ff1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff20:	4413      	add	r3, r2
 800ff22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff26:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ff32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	891b      	ldrh	r3, [r3, #8]
 800ff3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ff42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	6959      	ldr	r1, [r3, #20]
 800ff4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ff5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ff60:	6800      	ldr	r0, [r0, #0]
 800ff62:	f000 ffb6 	bl	8010ed2 <USB_WritePMA>
 800ff66:	e19f      	b.n	80102a8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ff68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6a1a      	ldr	r2, [r3, #32]
 800ff74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff78:	1ad2      	subs	r2, r2, r3
 800ff7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ff86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 80bc 	beq.w	8010126 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ffae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	673b      	str	r3, [r7, #112]	; 0x70
 800ffba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	785b      	ldrb	r3, [r3, #1]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d16d      	bne.n	80100a6 <USB_EPStartXfer+0xab4>
 800ffca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffea:	4413      	add	r3, r2
 800ffec:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	00da      	lsls	r2, r3, #3
 800fffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fffe:	4413      	add	r3, r2
 8010000:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010004:	667b      	str	r3, [r7, #100]	; 0x64
 8010006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801000a:	2b3e      	cmp	r3, #62	; 0x3e
 801000c:	d91c      	bls.n	8010048 <USB_EPStartXfer+0xa56>
 801000e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010012:	095b      	lsrs	r3, r3, #5
 8010014:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801001c:	f003 031f 	and.w	r3, r3, #31
 8010020:	2b00      	cmp	r3, #0
 8010022:	d104      	bne.n	801002e <USB_EPStartXfer+0xa3c>
 8010024:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010028:	3b01      	subs	r3, #1
 801002a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801002e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010032:	b29b      	uxth	r3, r3
 8010034:	029b      	lsls	r3, r3, #10
 8010036:	b29b      	uxth	r3, r3
 8010038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801003c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010040:	b29a      	uxth	r2, r3
 8010042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010044:	801a      	strh	r2, [r3, #0]
 8010046:	e053      	b.n	80100f0 <USB_EPStartXfer+0xafe>
 8010048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801004c:	2b00      	cmp	r3, #0
 801004e:	d112      	bne.n	8010076 <USB_EPStartXfer+0xa84>
 8010050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	b29b      	uxth	r3, r3
 8010056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801005a:	b29a      	uxth	r2, r3
 801005c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801005e:	801a      	strh	r2, [r3, #0]
 8010060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	b29b      	uxth	r3, r3
 8010066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801006a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801006e:	b29a      	uxth	r2, r3
 8010070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010072:	801a      	strh	r2, [r3, #0]
 8010074:	e03c      	b.n	80100f0 <USB_EPStartXfer+0xafe>
 8010076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801007a:	085b      	lsrs	r3, r3, #1
 801007c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010084:	f003 0301 	and.w	r3, r3, #1
 8010088:	2b00      	cmp	r3, #0
 801008a:	d004      	beq.n	8010096 <USB_EPStartXfer+0xaa4>
 801008c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010090:	3301      	adds	r3, #1
 8010092:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010096:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801009a:	b29b      	uxth	r3, r3
 801009c:	029b      	lsls	r3, r3, #10
 801009e:	b29a      	uxth	r2, r3
 80100a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100a2:	801a      	strh	r2, [r3, #0]
 80100a4:	e024      	b.n	80100f0 <USB_EPStartXfer+0xafe>
 80100a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	785b      	ldrb	r3, [r3, #1]
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d11c      	bne.n	80100f0 <USB_EPStartXfer+0xafe>
 80100b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	461a      	mov	r2, r3
 80100c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100ca:	4413      	add	r3, r2
 80100cc:	673b      	str	r3, [r7, #112]	; 0x70
 80100ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	00da      	lsls	r2, r3, #3
 80100dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100de:	4413      	add	r3, r2
 80100e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80100e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80100f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	895b      	ldrh	r3, [r3, #10]
 80100fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	6959      	ldr	r1, [r3, #20]
 801010c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010110:	b29b      	uxth	r3, r3
 8010112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010116:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801011a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801011e:	6800      	ldr	r0, [r0, #0]
 8010120:	f000 fed7 	bl	8010ed2 <USB_WritePMA>
 8010124:	e0c0      	b.n	80102a8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801012a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	785b      	ldrb	r3, [r3, #1]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d16d      	bne.n	8010212 <USB_EPStartXfer+0xc20>
 8010136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801013a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010150:	b29b      	uxth	r3, r3
 8010152:	461a      	mov	r2, r3
 8010154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010156:	4413      	add	r3, r2
 8010158:	67fb      	str	r3, [r7, #124]	; 0x7c
 801015a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801015e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	00da      	lsls	r2, r3, #3
 8010168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801016a:	4413      	add	r3, r2
 801016c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010170:	67bb      	str	r3, [r7, #120]	; 0x78
 8010172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010176:	2b3e      	cmp	r3, #62	; 0x3e
 8010178:	d91c      	bls.n	80101b4 <USB_EPStartXfer+0xbc2>
 801017a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801017e:	095b      	lsrs	r3, r3, #5
 8010180:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010188:	f003 031f 	and.w	r3, r3, #31
 801018c:	2b00      	cmp	r3, #0
 801018e:	d104      	bne.n	801019a <USB_EPStartXfer+0xba8>
 8010190:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010194:	3b01      	subs	r3, #1
 8010196:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801019a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801019e:	b29b      	uxth	r3, r3
 80101a0:	029b      	lsls	r3, r3, #10
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101b0:	801a      	strh	r2, [r3, #0]
 80101b2:	e05f      	b.n	8010274 <USB_EPStartXfer+0xc82>
 80101b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d112      	bne.n	80101e2 <USB_EPStartXfer+0xbf0>
 80101bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101ca:	801a      	strh	r2, [r3, #0]
 80101cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101da:	b29a      	uxth	r2, r3
 80101dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101de:	801a      	strh	r2, [r3, #0]
 80101e0:	e048      	b.n	8010274 <USB_EPStartXfer+0xc82>
 80101e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101e6:	085b      	lsrs	r3, r3, #1
 80101e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80101ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d004      	beq.n	8010202 <USB_EPStartXfer+0xc10>
 80101f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80101fc:	3301      	adds	r3, #1
 80101fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010206:	b29b      	uxth	r3, r3
 8010208:	029b      	lsls	r3, r3, #10
 801020a:	b29a      	uxth	r2, r3
 801020c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801020e:	801a      	strh	r2, [r3, #0]
 8010210:	e030      	b.n	8010274 <USB_EPStartXfer+0xc82>
 8010212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	785b      	ldrb	r3, [r3, #1]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d128      	bne.n	8010274 <USB_EPStartXfer+0xc82>
 8010222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801023e:	b29b      	uxth	r3, r3
 8010240:	461a      	mov	r2, r3
 8010242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010246:	4413      	add	r3, r2
 8010248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801024c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	00da      	lsls	r2, r3, #3
 801025a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801025e:	4413      	add	r3, r2
 8010260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801026c:	b29a      	uxth	r2, r3
 801026e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010272:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	891b      	ldrh	r3, [r3, #8]
 8010280:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	6959      	ldr	r1, [r3, #20]
 8010290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010294:	b29b      	uxth	r3, r3
 8010296:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801029a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801029e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80102a2:	6800      	ldr	r0, [r0, #0]
 80102a4:	f000 fe15 	bl	8010ed2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80102a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	4413      	add	r3, r2
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102ce:	817b      	strh	r3, [r7, #10]
 80102d0:	897b      	ldrh	r3, [r7, #10]
 80102d2:	f083 0310 	eor.w	r3, r3, #16
 80102d6:	817b      	strh	r3, [r7, #10]
 80102d8:	897b      	ldrh	r3, [r7, #10]
 80102da:	f083 0320 	eor.w	r3, r3, #32
 80102de:	817b      	strh	r3, [r7, #10]
 80102e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	441a      	add	r2, r3
 80102fa:	897b      	ldrh	r3, [r7, #10]
 80102fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801030c:	b29b      	uxth	r3, r3
 801030e:	8013      	strh	r3, [r2, #0]
 8010310:	f000 bc9f 	b.w	8010c52 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	7b1b      	ldrb	r3, [r3, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	f040 80ae 	bne.w	8010482 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801032a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	699a      	ldr	r2, [r3, #24]
 8010332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	429a      	cmp	r2, r3
 8010340:	d917      	bls.n	8010372 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8010342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	699a      	ldr	r2, [r3, #24]
 801035e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010362:	1ad2      	subs	r2, r2, r3
 8010364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	619a      	str	r2, [r3, #24]
 8010370:	e00e      	b.n	8010390 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8010372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2200      	movs	r2, #0
 801038e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801039e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	461a      	mov	r2, r3
 80103b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103b4:	4413      	add	r3, r2
 80103b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	00da      	lsls	r2, r3, #3
 80103c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103cc:	4413      	add	r3, r2
 80103ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80103d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80103d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103da:	2b3e      	cmp	r3, #62	; 0x3e
 80103dc:	d91d      	bls.n	801041a <USB_EPStartXfer+0xe28>
 80103de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103e2:	095b      	lsrs	r3, r3, #5
 80103e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80103e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103ec:	f003 031f 	and.w	r3, r3, #31
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d104      	bne.n	80103fe <USB_EPStartXfer+0xe0c>
 80103f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80103f8:	3b01      	subs	r3, #1
 80103fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80103fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010402:	b29b      	uxth	r3, r3
 8010404:	029b      	lsls	r3, r3, #10
 8010406:	b29b      	uxth	r3, r3
 8010408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801040c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010410:	b29a      	uxth	r2, r3
 8010412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010416:	801a      	strh	r2, [r3, #0]
 8010418:	e3e1      	b.n	8010bde <USB_EPStartXfer+0x15ec>
 801041a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801041e:	2b00      	cmp	r3, #0
 8010420:	d116      	bne.n	8010450 <USB_EPStartXfer+0xe5e>
 8010422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	b29b      	uxth	r3, r3
 801042a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801042e:	b29a      	uxth	r2, r3
 8010430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010434:	801a      	strh	r2, [r3, #0]
 8010436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	b29b      	uxth	r3, r3
 801043e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010446:	b29a      	uxth	r2, r3
 8010448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	e3c6      	b.n	8010bde <USB_EPStartXfer+0x15ec>
 8010450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010454:	085b      	lsrs	r3, r3, #1
 8010456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801045a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801045e:	f003 0301 	and.w	r3, r3, #1
 8010462:	2b00      	cmp	r3, #0
 8010464:	d004      	beq.n	8010470 <USB_EPStartXfer+0xe7e>
 8010466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801046a:	3301      	adds	r3, #1
 801046c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010470:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010474:	b29b      	uxth	r3, r3
 8010476:	029b      	lsls	r3, r3, #10
 8010478:	b29a      	uxth	r2, r3
 801047a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801047e:	801a      	strh	r2, [r3, #0]
 8010480:	e3ad      	b.n	8010bde <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	78db      	ldrb	r3, [r3, #3]
 801048e:	2b02      	cmp	r3, #2
 8010490:	f040 8200 	bne.w	8010894 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	785b      	ldrb	r3, [r3, #1]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f040 8091 	bne.w	80105c8 <USB_EPStartXfer+0xfd6>
 80104a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80104b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	461a      	mov	r2, r3
 80104c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104ca:	4413      	add	r3, r2
 80104cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80104d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	00da      	lsls	r2, r3, #3
 80104de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104e2:	4413      	add	r3, r2
 80104e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80104ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	691b      	ldr	r3, [r3, #16]
 80104f8:	2b3e      	cmp	r3, #62	; 0x3e
 80104fa:	d925      	bls.n	8010548 <USB_EPStartXfer+0xf56>
 80104fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	095b      	lsrs	r3, r3, #5
 801050a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801050e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	f003 031f 	and.w	r3, r3, #31
 801051e:	2b00      	cmp	r3, #0
 8010520:	d104      	bne.n	801052c <USB_EPStartXfer+0xf3a>
 8010522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010526:	3b01      	subs	r3, #1
 8010528:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801052c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010530:	b29b      	uxth	r3, r3
 8010532:	029b      	lsls	r3, r3, #10
 8010534:	b29b      	uxth	r3, r3
 8010536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801053a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801053e:	b29a      	uxth	r2, r3
 8010540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010544:	801a      	strh	r2, [r3, #0]
 8010546:	e074      	b.n	8010632 <USB_EPStartXfer+0x1040>
 8010548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801054c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d116      	bne.n	8010586 <USB_EPStartXfer+0xf94>
 8010558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	b29b      	uxth	r3, r3
 8010560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010564:	b29a      	uxth	r2, r3
 8010566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801056a:	801a      	strh	r2, [r3, #0]
 801056c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010570:	881b      	ldrh	r3, [r3, #0]
 8010572:	b29b      	uxth	r3, r3
 8010574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801057c:	b29a      	uxth	r2, r3
 801057e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010582:	801a      	strh	r2, [r3, #0]
 8010584:	e055      	b.n	8010632 <USB_EPStartXfer+0x1040>
 8010586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801058a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	085b      	lsrs	r3, r3, #1
 8010594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801059c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	f003 0301 	and.w	r3, r3, #1
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <USB_EPStartXfer+0xfc4>
 80105ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105b0:	3301      	adds	r3, #1
 80105b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80105b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	029b      	lsls	r3, r3, #10
 80105be:	b29a      	uxth	r2, r3
 80105c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105c4:	801a      	strh	r2, [r3, #0]
 80105c6:	e034      	b.n	8010632 <USB_EPStartXfer+0x1040>
 80105c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	785b      	ldrb	r3, [r3, #1]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d12c      	bne.n	8010632 <USB_EPStartXfer+0x1040>
 80105d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80105e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	461a      	mov	r2, r3
 80105f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105fc:	4413      	add	r3, r2
 80105fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	00da      	lsls	r2, r3, #3
 8010610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010614:	4413      	add	r3, r2
 8010616:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801061a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801061e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	b29a      	uxth	r2, r3
 801062c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010630:	801a      	strh	r2, [r3, #0]
 8010632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	785b      	ldrb	r3, [r3, #1]
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 8091 	bne.w	8010774 <USB_EPStartXfer+0x1182>
 8010652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801066e:	b29b      	uxth	r3, r3
 8010670:	461a      	mov	r2, r3
 8010672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010676:	4413      	add	r3, r2
 8010678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801067c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	00da      	lsls	r2, r3, #3
 801068a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801068e:	4413      	add	r3, r2
 8010690:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801069c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	2b3e      	cmp	r3, #62	; 0x3e
 80106a6:	d925      	bls.n	80106f4 <USB_EPStartXfer+0x1102>
 80106a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	095b      	lsrs	r3, r3, #5
 80106b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80106ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	f003 031f 	and.w	r3, r3, #31
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d104      	bne.n	80106d8 <USB_EPStartXfer+0x10e6>
 80106ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106d2:	3b01      	subs	r3, #1
 80106d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80106d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106dc:	b29b      	uxth	r3, r3
 80106de:	029b      	lsls	r3, r3, #10
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80106f0:	801a      	strh	r2, [r3, #0]
 80106f2:	e06d      	b.n	80107d0 <USB_EPStartXfer+0x11de>
 80106f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d116      	bne.n	8010732 <USB_EPStartXfer+0x1140>
 8010704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	b29b      	uxth	r3, r3
 801070c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010710:	b29a      	uxth	r2, r3
 8010712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010716:	801a      	strh	r2, [r3, #0]
 8010718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	b29b      	uxth	r3, r3
 8010720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010728:	b29a      	uxth	r2, r3
 801072a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801072e:	801a      	strh	r2, [r3, #0]
 8010730:	e04e      	b.n	80107d0 <USB_EPStartXfer+0x11de>
 8010732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	085b      	lsrs	r3, r3, #1
 8010740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	691b      	ldr	r3, [r3, #16]
 8010750:	f003 0301 	and.w	r3, r3, #1
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <USB_EPStartXfer+0x1170>
 8010758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801075c:	3301      	adds	r3, #1
 801075e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010766:	b29b      	uxth	r3, r3
 8010768:	029b      	lsls	r3, r3, #10
 801076a:	b29a      	uxth	r2, r3
 801076c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010770:	801a      	strh	r2, [r3, #0]
 8010772:	e02d      	b.n	80107d0 <USB_EPStartXfer+0x11de>
 8010774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	785b      	ldrb	r3, [r3, #1]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d125      	bne.n	80107d0 <USB_EPStartXfer+0x11de>
 8010784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010792:	b29b      	uxth	r3, r3
 8010794:	461a      	mov	r2, r3
 8010796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801079a:	4413      	add	r3, r2
 801079c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80107a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	00da      	lsls	r2, r3, #3
 80107ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80107b2:	4413      	add	r3, r2
 80107b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80107bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	691b      	ldr	r3, [r3, #16]
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80107d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	69db      	ldr	r3, [r3, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 81fe 	beq.w	8010bde <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80107e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801080a:	2b00      	cmp	r3, #0
 801080c:	d005      	beq.n	801081a <USB_EPStartXfer+0x1228>
 801080e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10d      	bne.n	8010836 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801081a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010822:	2b00      	cmp	r3, #0
 8010824:	f040 81db 	bne.w	8010bde <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010828:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010830:	2b00      	cmp	r3, #0
 8010832:	f040 81d4 	bne.w	8010bde <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	4413      	add	r3, r2
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	b29b      	uxth	r3, r3
 8010854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801085c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	441a      	add	r2, r3
 801087a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801087e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801088a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801088e:	b29b      	uxth	r3, r3
 8010890:	8013      	strh	r3, [r2, #0]
 8010892:	e1a4      	b.n	8010bde <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	78db      	ldrb	r3, [r3, #3]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	f040 819a 	bne.w	8010bda <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80108a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	699a      	ldr	r2, [r3, #24]
 80108b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	691b      	ldr	r3, [r3, #16]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d917      	bls.n	80108f2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80108c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80108d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	699a      	ldr	r2, [r3, #24]
 80108de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108e2:	1ad2      	subs	r2, r2, r3
 80108e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	619a      	str	r2, [r3, #24]
 80108f0:	e00e      	b.n	8010910 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80108f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2200      	movs	r2, #0
 801090e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d178      	bne.n	8010a12 <USB_EPStartXfer+0x1420>
 8010920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801092e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801093c:	b29b      	uxth	r3, r3
 801093e:	461a      	mov	r2, r3
 8010940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010944:	4413      	add	r3, r2
 8010946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801094a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801094e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	00da      	lsls	r2, r3, #3
 8010958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801095c:	4413      	add	r3, r2
 801095e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801096a:	2b3e      	cmp	r3, #62	; 0x3e
 801096c:	d91d      	bls.n	80109aa <USB_EPStartXfer+0x13b8>
 801096e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010972:	095b      	lsrs	r3, r3, #5
 8010974:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801097c:	f003 031f 	and.w	r3, r3, #31
 8010980:	2b00      	cmp	r3, #0
 8010982:	d104      	bne.n	801098e <USB_EPStartXfer+0x139c>
 8010984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010988:	3b01      	subs	r3, #1
 801098a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801098e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010992:	b29b      	uxth	r3, r3
 8010994:	029b      	lsls	r3, r3, #10
 8010996:	b29b      	uxth	r3, r3
 8010998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801099c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80109a6:	801a      	strh	r2, [r3, #0]
 80109a8:	e064      	b.n	8010a74 <USB_EPStartXfer+0x1482>
 80109aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d116      	bne.n	80109e0 <USB_EPStartXfer+0x13ee>
 80109b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80109be:	b29a      	uxth	r2, r3
 80109c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80109c4:	801a      	strh	r2, [r3, #0]
 80109c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80109dc:	801a      	strh	r2, [r3, #0]
 80109de:	e049      	b.n	8010a74 <USB_EPStartXfer+0x1482>
 80109e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109e4:	085b      	lsrs	r3, r3, #1
 80109e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80109ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109ee:	f003 0301 	and.w	r3, r3, #1
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d004      	beq.n	8010a00 <USB_EPStartXfer+0x140e>
 80109f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109fa:	3301      	adds	r3, #1
 80109fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	029b      	lsls	r3, r3, #10
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a0e:	801a      	strh	r2, [r3, #0]
 8010a10:	e030      	b.n	8010a74 <USB_EPStartXfer+0x1482>
 8010a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	785b      	ldrb	r3, [r3, #1]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d128      	bne.n	8010a74 <USB_EPStartXfer+0x1482>
 8010a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	461a      	mov	r2, r3
 8010a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a46:	4413      	add	r3, r2
 8010a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	00da      	lsls	r2, r3, #3
 8010a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a5e:	4413      	add	r3, r2
 8010a60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a72:	801a      	strh	r2, [r3, #0]
 8010a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	785b      	ldrb	r3, [r3, #1]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d178      	bne.n	8010b84 <USB_EPStartXfer+0x1592>
 8010a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	00da      	lsls	r2, r3, #3
 8010aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ace:	4413      	add	r3, r2
 8010ad0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010adc:	2b3e      	cmp	r3, #62	; 0x3e
 8010ade:	d91d      	bls.n	8010b1c <USB_EPStartXfer+0x152a>
 8010ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ae4:	095b      	lsrs	r3, r3, #5
 8010ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aee:	f003 031f 	and.w	r3, r3, #31
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d104      	bne.n	8010b00 <USB_EPStartXfer+0x150e>
 8010af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010afa:	3b01      	subs	r3, #1
 8010afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	029b      	lsls	r3, r3, #10
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b18:	801a      	strh	r2, [r3, #0]
 8010b1a:	e060      	b.n	8010bde <USB_EPStartXfer+0x15ec>
 8010b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d116      	bne.n	8010b52 <USB_EPStartXfer+0x1560>
 8010b24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b36:	801a      	strh	r2, [r3, #0]
 8010b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b4e:	801a      	strh	r2, [r3, #0]
 8010b50:	e045      	b.n	8010bde <USB_EPStartXfer+0x15ec>
 8010b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b56:	085b      	lsrs	r3, r3, #1
 8010b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d004      	beq.n	8010b72 <USB_EPStartXfer+0x1580>
 8010b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	029b      	lsls	r3, r3, #10
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b80:	801a      	strh	r2, [r3, #0]
 8010b82:	e02c      	b.n	8010bde <USB_EPStartXfer+0x15ec>
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	785b      	ldrb	r3, [r3, #1]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d124      	bne.n	8010bde <USB_EPStartXfer+0x15ec>
 8010b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010baa:	4413      	add	r3, r2
 8010bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	00da      	lsls	r2, r3, #3
 8010bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010bc2:	4413      	add	r3, r2
 8010bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bd6:	801a      	strh	r2, [r3, #0]
 8010bd8:	e001      	b.n	8010bde <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e03a      	b.n	8010c54 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	4413      	add	r3, r2
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010c10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010c14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010c1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	441a      	add	r2, r3
 8010c3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010c5e:	b480      	push	{r7}
 8010c60:	b085      	sub	sp, #20
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	785b      	ldrb	r3, [r3, #1]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d020      	beq.n	8010cb2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	4413      	add	r3, r2
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c86:	81bb      	strh	r3, [r7, #12]
 8010c88:	89bb      	ldrh	r3, [r7, #12]
 8010c8a:	f083 0310 	eor.w	r3, r3, #16
 8010c8e:	81bb      	strh	r3, [r7, #12]
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	441a      	add	r2, r3
 8010c9a:	89bb      	ldrh	r3, [r7, #12]
 8010c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	8013      	strh	r3, [r2, #0]
 8010cb0:	e01f      	b.n	8010cf2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	4413      	add	r3, r2
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cc8:	81fb      	strh	r3, [r7, #14]
 8010cca:	89fb      	ldrh	r3, [r7, #14]
 8010ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010cd0:	81fb      	strh	r3, [r7, #14]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	441a      	add	r2, r3
 8010cdc:	89fb      	ldrh	r3, [r7, #14]
 8010cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3714      	adds	r7, #20
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b087      	sub	sp, #28
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	7b1b      	ldrb	r3, [r3, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f040 809d 	bne.w	8010e4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	785b      	ldrb	r3, [r3, #1]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d04c      	beq.n	8010db6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	4413      	add	r3, r2
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	823b      	strh	r3, [r7, #16]
 8010d2a:	8a3b      	ldrh	r3, [r7, #16]
 8010d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d01b      	beq.n	8010d6c <USB_EPClearStall+0x6c>
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	4413      	add	r3, r2
 8010d3e:	881b      	ldrh	r3, [r3, #0]
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d4a:	81fb      	strh	r3, [r7, #14]
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	441a      	add	r2, r3
 8010d56:	89fb      	ldrh	r3, [r7, #14]
 8010d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	78db      	ldrb	r3, [r3, #3]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d06c      	beq.n	8010e4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4413      	add	r3, r2
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d8a:	81bb      	strh	r3, [r7, #12]
 8010d8c:	89bb      	ldrh	r3, [r7, #12]
 8010d8e:	f083 0320 	eor.w	r3, r3, #32
 8010d92:	81bb      	strh	r3, [r7, #12]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	441a      	add	r2, r3
 8010d9e:	89bb      	ldrh	r3, [r7, #12]
 8010da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	8013      	strh	r3, [r2, #0]
 8010db4:	e04b      	b.n	8010e4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	4413      	add	r3, r2
 8010dc0:	881b      	ldrh	r3, [r3, #0]
 8010dc2:	82fb      	strh	r3, [r7, #22]
 8010dc4:	8afb      	ldrh	r3, [r7, #22]
 8010dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01b      	beq.n	8010e06 <USB_EPClearStall+0x106>
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4413      	add	r3, r2
 8010dd8:	881b      	ldrh	r3, [r3, #0]
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010de4:	82bb      	strh	r3, [r7, #20]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	441a      	add	r2, r3
 8010df0:	8abb      	ldrh	r3, [r7, #20]
 8010df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4413      	add	r3, r2
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e1c:	827b      	strh	r3, [r7, #18]
 8010e1e:	8a7b      	ldrh	r3, [r7, #18]
 8010e20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010e24:	827b      	strh	r3, [r7, #18]
 8010e26:	8a7b      	ldrh	r3, [r7, #18]
 8010e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010e2c:	827b      	strh	r3, [r7, #18]
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	441a      	add	r2, r3
 8010e38:	8a7b      	ldrh	r3, [r7, #18]
 8010e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010e4e:	2300      	movs	r3, #0
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	371c      	adds	r7, #28
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010e68:	78fb      	ldrb	r3, [r7, #3]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d103      	bne.n	8010e76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2280      	movs	r2, #128	; 0x80
 8010e72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b085      	sub	sp, #20
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b08d      	sub	sp, #52	; 0x34
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	60f8      	str	r0, [r7, #12]
 8010eda:	60b9      	str	r1, [r7, #8]
 8010edc:	4611      	mov	r1, r2
 8010ede:	461a      	mov	r2, r3
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	80fb      	strh	r3, [r7, #6]
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010ee8:	88bb      	ldrh	r3, [r7, #4]
 8010eea:	3301      	adds	r3, #1
 8010eec:	085b      	lsrs	r3, r3, #1
 8010eee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010ef8:	88fa      	ldrh	r2, [r7, #6]
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	4413      	add	r3, r2
 8010efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f02:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f08:	e01b      	b.n	8010f42 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	3301      	adds	r3, #1
 8010f14:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	021b      	lsls	r3, r3, #8
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	461a      	mov	r2, r3
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	4313      	orrs	r3, r2
 8010f26:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f32:	3302      	adds	r3, #2
 8010f34:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	3301      	adds	r3, #1
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1e0      	bne.n	8010f0a <USB_WritePMA+0x38>
  }
}
 8010f48:	bf00      	nop
 8010f4a:	bf00      	nop
 8010f4c:	3734      	adds	r7, #52	; 0x34
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b08b      	sub	sp, #44	; 0x2c
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	60f8      	str	r0, [r7, #12]
 8010f5e:	60b9      	str	r1, [r7, #8]
 8010f60:	4611      	mov	r1, r2
 8010f62:	461a      	mov	r2, r3
 8010f64:	460b      	mov	r3, r1
 8010f66:	80fb      	strh	r3, [r7, #6]
 8010f68:	4613      	mov	r3, r2
 8010f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010f6c:	88bb      	ldrh	r3, [r7, #4]
 8010f6e:	085b      	lsrs	r3, r3, #1
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	4413      	add	r3, r2
 8010f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f86:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8010f8c:	e018      	b.n	8010fc0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010f96:	6a3b      	ldr	r3, [r7, #32]
 8010f98:	3302      	adds	r3, #2
 8010f9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	0a1b      	lsrs	r3, r3, #8
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1e3      	bne.n	8010f8e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010fc6:	88bb      	ldrh	r3, [r7, #4]
 8010fc8:	f003 0301 	and.w	r3, r3, #1
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d007      	beq.n	8010fe2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	881b      	ldrh	r3, [r3, #0]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	701a      	strb	r2, [r3, #0]
  }
}
 8010fe2:	bf00      	nop
 8010fe4:	372c      	adds	r7, #44	; 0x2c
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr

08010fee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b084      	sub	sp, #16
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010ffa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010ffe:	f002 f931 	bl	8013264 <USBD_static_malloc>
 8011002:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d105      	bne.n	8011016 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011012:	2302      	movs	r3, #2
 8011014:	e066      	b.n	80110e4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	7c1b      	ldrb	r3, [r3, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d119      	bne.n	801105a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011026:	f44f 7300 	mov.w	r3, #512	; 0x200
 801102a:	2202      	movs	r2, #2
 801102c:	2181      	movs	r1, #129	; 0x81
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f001 ffbd 	bl	8012fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801103a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801103e:	2202      	movs	r2, #2
 8011040:	2101      	movs	r1, #1
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f001 ffb3 	bl	8012fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2201      	movs	r2, #1
 801104c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2210      	movs	r2, #16
 8011054:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011058:	e016      	b.n	8011088 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801105a:	2340      	movs	r3, #64	; 0x40
 801105c:	2202      	movs	r2, #2
 801105e:	2181      	movs	r1, #129	; 0x81
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f001 ffa4 	bl	8012fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801106c:	2340      	movs	r3, #64	; 0x40
 801106e:	2202      	movs	r2, #2
 8011070:	2101      	movs	r1, #1
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f001 ff9b 	bl	8012fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2210      	movs	r2, #16
 8011084:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011088:	2308      	movs	r3, #8
 801108a:	2203      	movs	r2, #3
 801108c:	2182      	movs	r1, #130	; 0x82
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f001 ff8d 	bl	8012fae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2201      	movs	r2, #1
 8011098:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2200      	movs	r2, #0
 80110b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	7c1b      	ldrb	r3, [r3, #16]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d109      	bne.n	80110d2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110c8:	2101      	movs	r1, #1
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f002 f85f 	bl	801318e <USBD_LL_PrepareReceive>
 80110d0:	e007      	b.n	80110e2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110d8:	2340      	movs	r3, #64	; 0x40
 80110da:	2101      	movs	r1, #1
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f002 f856 	bl	801318e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80110f8:	2181      	movs	r1, #129	; 0x81
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f001 ff7d 	bl	8012ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011106:	2101      	movs	r1, #1
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f001 ff76 	bl	8012ffa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011116:	2182      	movs	r1, #130	; 0x82
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f001 ff6e 	bl	8012ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00e      	beq.n	8011156 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011148:	4618      	mov	r0, r3
 801114a:	f002 f899 	bl	8013280 <USBD_static_free>
    pdev->pClassData = NULL;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011156:	2300      	movs	r3, #0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011172:	2300      	movs	r3, #0
 8011174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011176:	2300      	movs	r3, #0
 8011178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801117a:	2300      	movs	r3, #0
 801117c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011184:	2303      	movs	r3, #3
 8011186:	e0af      	b.n	80112e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011190:	2b00      	cmp	r3, #0
 8011192:	d03f      	beq.n	8011214 <USBD_CDC_Setup+0xb4>
 8011194:	2b20      	cmp	r3, #32
 8011196:	f040 809f 	bne.w	80112d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	88db      	ldrh	r3, [r3, #6]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d02e      	beq.n	8011200 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	b25b      	sxtb	r3, r3
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	da16      	bge.n	80111da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	683a      	ldr	r2, [r7, #0]
 80111b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80111b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111ba:	683a      	ldr	r2, [r7, #0]
 80111bc:	88d2      	ldrh	r2, [r2, #6]
 80111be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	88db      	ldrh	r3, [r3, #6]
 80111c4:	2b07      	cmp	r3, #7
 80111c6:	bf28      	it	cs
 80111c8:	2307      	movcs	r3, #7
 80111ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	89fa      	ldrh	r2, [r7, #14]
 80111d0:	4619      	mov	r1, r3
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f001 facf 	bl	8012776 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80111d8:	e085      	b.n	80112e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	785a      	ldrb	r2, [r3, #1]
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	88db      	ldrh	r3, [r3, #6]
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80111f0:	6939      	ldr	r1, [r7, #16]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	88db      	ldrh	r3, [r3, #6]
 80111f6:	461a      	mov	r2, r3
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f001 fae8 	bl	80127ce <USBD_CtlPrepareRx>
      break;
 80111fe:	e072      	b.n	80112e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	683a      	ldr	r2, [r7, #0]
 801120a:	7850      	ldrb	r0, [r2, #1]
 801120c:	2200      	movs	r2, #0
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	4798      	blx	r3
      break;
 8011212:	e068      	b.n	80112e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	785b      	ldrb	r3, [r3, #1]
 8011218:	2b0b      	cmp	r3, #11
 801121a:	d852      	bhi.n	80112c2 <USBD_CDC_Setup+0x162>
 801121c:	a201      	add	r2, pc, #4	; (adr r2, 8011224 <USBD_CDC_Setup+0xc4>)
 801121e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011222:	bf00      	nop
 8011224:	08011255 	.word	0x08011255
 8011228:	080112d1 	.word	0x080112d1
 801122c:	080112c3 	.word	0x080112c3
 8011230:	080112c3 	.word	0x080112c3
 8011234:	080112c3 	.word	0x080112c3
 8011238:	080112c3 	.word	0x080112c3
 801123c:	080112c3 	.word	0x080112c3
 8011240:	080112c3 	.word	0x080112c3
 8011244:	080112c3 	.word	0x080112c3
 8011248:	080112c3 	.word	0x080112c3
 801124c:	0801127f 	.word	0x0801127f
 8011250:	080112a9 	.word	0x080112a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b03      	cmp	r3, #3
 801125e:	d107      	bne.n	8011270 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011260:	f107 030a 	add.w	r3, r7, #10
 8011264:	2202      	movs	r2, #2
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f001 fa84 	bl	8012776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801126e:	e032      	b.n	80112d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011270:	6839      	ldr	r1, [r7, #0]
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f001 fa0e 	bl	8012694 <USBD_CtlError>
            ret = USBD_FAIL;
 8011278:	2303      	movs	r3, #3
 801127a:	75fb      	strb	r3, [r7, #23]
          break;
 801127c:	e02b      	b.n	80112d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011284:	b2db      	uxtb	r3, r3
 8011286:	2b03      	cmp	r3, #3
 8011288:	d107      	bne.n	801129a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801128a:	f107 030d 	add.w	r3, r7, #13
 801128e:	2201      	movs	r2, #1
 8011290:	4619      	mov	r1, r3
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f001 fa6f 	bl	8012776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011298:	e01d      	b.n	80112d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801129a:	6839      	ldr	r1, [r7, #0]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f001 f9f9 	bl	8012694 <USBD_CtlError>
            ret = USBD_FAIL;
 80112a2:	2303      	movs	r3, #3
 80112a4:	75fb      	strb	r3, [r7, #23]
          break;
 80112a6:	e016      	b.n	80112d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d00f      	beq.n	80112d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80112b4:	6839      	ldr	r1, [r7, #0]
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f001 f9ec 	bl	8012694 <USBD_CtlError>
            ret = USBD_FAIL;
 80112bc:	2303      	movs	r3, #3
 80112be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80112c0:	e008      	b.n	80112d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f001 f9e5 	bl	8012694 <USBD_CtlError>
          ret = USBD_FAIL;
 80112ca:	2303      	movs	r3, #3
 80112cc:	75fb      	strb	r3, [r7, #23]
          break;
 80112ce:	e002      	b.n	80112d6 <USBD_CDC_Setup+0x176>
          break;
 80112d0:	bf00      	nop
 80112d2:	e008      	b.n	80112e6 <USBD_CDC_Setup+0x186>
          break;
 80112d4:	bf00      	nop
      }
      break;
 80112d6:	e006      	b.n	80112e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80112d8:	6839      	ldr	r1, [r7, #0]
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f001 f9da 	bl	8012694 <USBD_CtlError>
      ret = USBD_FAIL;
 80112e0:	2303      	movs	r3, #3
 80112e2:	75fb      	strb	r3, [r7, #23]
      break;
 80112e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80112e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3718      	adds	r7, #24
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	460b      	mov	r3, r1
 80112fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801130e:	2303      	movs	r3, #3
 8011310:	e04f      	b.n	80113b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801131a:	78fa      	ldrb	r2, [r7, #3]
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	4613      	mov	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4413      	add	r3, r2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	440b      	add	r3, r1
 8011328:	3318      	adds	r3, #24
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d029      	beq.n	8011384 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011330:	78fa      	ldrb	r2, [r7, #3]
 8011332:	6879      	ldr	r1, [r7, #4]
 8011334:	4613      	mov	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	440b      	add	r3, r1
 801133e:	3318      	adds	r3, #24
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	78f9      	ldrb	r1, [r7, #3]
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	460b      	mov	r3, r1
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	440b      	add	r3, r1
 801134c:	00db      	lsls	r3, r3, #3
 801134e:	4403      	add	r3, r0
 8011350:	3338      	adds	r3, #56	; 0x38
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	fbb2 f1f3 	udiv	r1, r2, r3
 8011358:	fb01 f303 	mul.w	r3, r1, r3
 801135c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801135e:	2b00      	cmp	r3, #0
 8011360:	d110      	bne.n	8011384 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011362:	78fa      	ldrb	r2, [r7, #3]
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	4613      	mov	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4413      	add	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	440b      	add	r3, r1
 8011370:	3318      	adds	r3, #24
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011376:	78f9      	ldrb	r1, [r7, #3]
 8011378:	2300      	movs	r3, #0
 801137a:	2200      	movs	r2, #0
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f001 fee5 	bl	801314c <USBD_LL_Transmit>
 8011382:	e015      	b.n	80113b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011392:	691b      	ldr	r3, [r3, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00b      	beq.n	80113b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80113ac:	78fa      	ldrb	r2, [r7, #3]
 80113ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b084      	sub	sp, #16
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d101      	bne.n	80113dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80113d8:	2303      	movs	r3, #3
 80113da:	e015      	b.n	8011408 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80113dc:	78fb      	ldrb	r3, [r7, #3]
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f001 fef5 	bl	80131d0 <USBD_LL_GetRxDataSize>
 80113e6:	4602      	mov	r2, r0
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011402:	4611      	mov	r1, r2
 8011404:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011406:	2300      	movs	r3, #0
}
 8011408:	4618      	mov	r0, r3
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801141e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d101      	bne.n	801142a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011426:	2303      	movs	r3, #3
 8011428:	e01b      	b.n	8011462 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d015      	beq.n	8011460 <USBD_CDC_EP0_RxReady+0x50>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801143a:	2bff      	cmp	r3, #255	; 0xff
 801143c:	d010      	beq.n	8011460 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801144c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011454:	b292      	uxth	r2, r2
 8011456:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	22ff      	movs	r2, #255	; 0xff
 801145c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
	...

0801146c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2243      	movs	r2, #67	; 0x43
 8011478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801147a:	4b03      	ldr	r3, [pc, #12]	; (8011488 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801147c:	4618      	mov	r0, r3
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr
 8011488:	20000094 	.word	0x20000094

0801148c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2243      	movs	r2, #67	; 0x43
 8011498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801149a:	4b03      	ldr	r3, [pc, #12]	; (80114a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801149c:	4618      	mov	r0, r3
 801149e:	370c      	adds	r7, #12
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	20000050 	.word	0x20000050

080114ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2243      	movs	r2, #67	; 0x43
 80114b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80114ba:	4b03      	ldr	r3, [pc, #12]	; (80114c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr
 80114c8:	200000d8 	.word	0x200000d8

080114cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	220a      	movs	r2, #10
 80114d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80114da:	4b03      	ldr	r3, [pc, #12]	; (80114e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80114dc:	4618      	mov	r0, r3
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	2000000c 	.word	0x2000000c

080114ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80114fc:	2303      	movs	r3, #3
 80114fe:	e004      	b.n	801150a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011508:	2300      	movs	r3, #0
}
 801150a:	4618      	mov	r0, r3
 801150c:	370c      	adds	r7, #12
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr

08011516 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011516:	b480      	push	{r7}
 8011518:	b087      	sub	sp, #28
 801151a:	af00      	add	r7, sp, #0
 801151c:	60f8      	str	r0, [r7, #12]
 801151e:	60b9      	str	r1, [r7, #8]
 8011520:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011528:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011530:	2303      	movs	r3, #3
 8011532:	e008      	b.n	8011546 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr

08011552 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011552:	b480      	push	{r7}
 8011554:	b085      	sub	sp, #20
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
 801155a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011562:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801156a:	2303      	movs	r3, #3
 801156c:	e004      	b.n	8011578 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011592:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011594:	2301      	movs	r3, #1
 8011596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d101      	bne.n	80115a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115a2:	2303      	movs	r3, #3
 80115a4:	e01a      	b.n	80115dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d114      	bne.n	80115da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2201      	movs	r2, #1
 80115b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80115ce:	2181      	movs	r1, #129	; 0x81
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f001 fdbb 	bl	801314c <USBD_LL_Transmit>

    ret = USBD_OK;
 80115d6:	2300      	movs	r3, #0
 80115d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80115da:	7bfb      	ldrb	r3, [r7, #15]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d101      	bne.n	8011602 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80115fe:	2303      	movs	r3, #3
 8011600:	e016      	b.n	8011630 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	7c1b      	ldrb	r3, [r3, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d109      	bne.n	801161e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011614:	2101      	movs	r1, #1
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f001 fdb9 	bl	801318e <USBD_LL_PrepareReceive>
 801161c:	e007      	b.n	801162e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011624:	2340      	movs	r3, #64	; 0x40
 8011626:	2101      	movs	r1, #1
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f001 fdb0 	bl	801318e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801164c:	2303      	movs	r3, #3
 801164e:	e01f      	b.n	8011690 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2200      	movs	r2, #0
 801165c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2200      	movs	r2, #0
 8011664:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	79fa      	ldrb	r2, [r7, #7]
 8011682:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011684:	68f8      	ldr	r0, [r7, #12]
 8011686:	f001 fc17 	bl	8012eb8 <USBD_LL_Init>
 801168a:	4603      	mov	r3, r0
 801168c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801168e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116a2:	2300      	movs	r3, #0
 80116a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80116ac:	2303      	movs	r3, #3
 80116ae:	e016      	b.n	80116de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00b      	beq.n	80116dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116cc:	f107 020e 	add.w	r2, r7, #14
 80116d0:	4610      	mov	r0, r2
 80116d2:	4798      	blx	r3
 80116d4:	4602      	mov	r2, r0
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b082      	sub	sp, #8
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f001 fc42 	bl	8012f78 <USBD_LL_Start>
 80116f4:	4603      	mov	r3, r0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011720:	2303      	movs	r3, #3
 8011722:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801172a:	2b00      	cmp	r3, #0
 801172c:	d009      	beq.n	8011742 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	78fa      	ldrb	r2, [r7, #3]
 8011738:	4611      	mov	r1, r2
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	4798      	blx	r3
 801173e:	4603      	mov	r3, r0
 8011740:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	460b      	mov	r3, r1
 8011756:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801175e:	2b00      	cmp	r3, #0
 8011760:	d007      	beq.n	8011772 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	78fa      	ldrb	r2, [r7, #3]
 801176c:	4611      	mov	r1, r2
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	4798      	blx	r3
  }

  return USBD_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801178c:	6839      	ldr	r1, [r7, #0]
 801178e:	4618      	mov	r0, r3
 8011790:	f000 ff46 	bl	8012620 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2201      	movs	r2, #1
 8011798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80117a2:	461a      	mov	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80117b0:	f003 031f 	and.w	r3, r3, #31
 80117b4:	2b02      	cmp	r3, #2
 80117b6:	d01a      	beq.n	80117ee <USBD_LL_SetupStage+0x72>
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	d822      	bhi.n	8011802 <USBD_LL_SetupStage+0x86>
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d002      	beq.n	80117c6 <USBD_LL_SetupStage+0x4a>
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d00a      	beq.n	80117da <USBD_LL_SetupStage+0x5e>
 80117c4:	e01d      	b.n	8011802 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 f9ee 	bl	8011bb0 <USBD_StdDevReq>
 80117d4:	4603      	mov	r3, r0
 80117d6:	73fb      	strb	r3, [r7, #15]
      break;
 80117d8:	e020      	b.n	801181c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117e0:	4619      	mov	r1, r3
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f000 fa52 	bl	8011c8c <USBD_StdItfReq>
 80117e8:	4603      	mov	r3, r0
 80117ea:	73fb      	strb	r3, [r7, #15]
      break;
 80117ec:	e016      	b.n	801181c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117f4:	4619      	mov	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fa91 	bl	8011d1e <USBD_StdEPReq>
 80117fc:	4603      	mov	r3, r0
 80117fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011800:	e00c      	b.n	801181c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801180c:	b2db      	uxtb	r3, r3
 801180e:	4619      	mov	r1, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f001 fc11 	bl	8013038 <USBD_LL_StallEP>
 8011816:	4603      	mov	r3, r0
 8011818:	73fb      	strb	r3, [r7, #15]
      break;
 801181a:	bf00      	nop
  }

  return ret;
 801181c:	7bfb      	ldrb	r3, [r7, #15]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b086      	sub	sp, #24
 801182a:	af00      	add	r7, sp, #0
 801182c:	60f8      	str	r0, [r7, #12]
 801182e:	460b      	mov	r3, r1
 8011830:	607a      	str	r2, [r7, #4]
 8011832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011834:	7afb      	ldrb	r3, [r7, #11]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d138      	bne.n	80118ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011848:	2b03      	cmp	r3, #3
 801184a:	d14a      	bne.n	80118e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	689a      	ldr	r2, [r3, #8]
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	429a      	cmp	r2, r3
 8011856:	d913      	bls.n	8011880 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	689a      	ldr	r2, [r3, #8]
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	1ad2      	subs	r2, r2, r3
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	68da      	ldr	r2, [r3, #12]
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	4293      	cmp	r3, r2
 8011870:	bf28      	it	cs
 8011872:	4613      	movcs	r3, r2
 8011874:	461a      	mov	r2, r3
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 ffc5 	bl	8012808 <USBD_CtlContinueRx>
 801187e:	e030      	b.n	80118e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b03      	cmp	r3, #3
 801188a:	d10b      	bne.n	80118a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011892:	691b      	ldr	r3, [r3, #16]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d005      	beq.n	80118a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f000 ffc0 	bl	801282a <USBD_CtlSendStatus>
 80118aa:	e01a      	b.n	80118e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	2b03      	cmp	r3, #3
 80118b6:	d114      	bne.n	80118e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118be:	699b      	ldr	r3, [r3, #24]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00e      	beq.n	80118e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	699b      	ldr	r3, [r3, #24]
 80118cc:	7afa      	ldrb	r2, [r7, #11]
 80118ce:	4611      	mov	r1, r2
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	4798      	blx	r3
 80118d4:	4603      	mov	r3, r0
 80118d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	e000      	b.n	80118e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	460b      	mov	r3, r1
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80118fa:	7afb      	ldrb	r3, [r7, #11]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d16b      	bne.n	80119d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	3314      	adds	r3, #20
 8011904:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801190c:	2b02      	cmp	r3, #2
 801190e:	d156      	bne.n	80119be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	689a      	ldr	r2, [r3, #8]
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	429a      	cmp	r2, r3
 801191a:	d914      	bls.n	8011946 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	689a      	ldr	r2, [r3, #8]
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	1ad2      	subs	r2, r2, r3
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	461a      	mov	r2, r3
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	f000 ff3a 	bl	80127ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011938:	2300      	movs	r3, #0
 801193a:	2200      	movs	r2, #0
 801193c:	2100      	movs	r1, #0
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f001 fc25 	bl	801318e <USBD_LL_PrepareReceive>
 8011944:	e03b      	b.n	80119be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	68da      	ldr	r2, [r3, #12]
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	429a      	cmp	r2, r3
 8011950:	d11c      	bne.n	801198c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	685a      	ldr	r2, [r3, #4]
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801195a:	429a      	cmp	r2, r3
 801195c:	d316      	bcc.n	801198c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	685a      	ldr	r2, [r3, #4]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011968:	429a      	cmp	r2, r3
 801196a:	d20f      	bcs.n	801198c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801196c:	2200      	movs	r2, #0
 801196e:	2100      	movs	r1, #0
 8011970:	68f8      	ldr	r0, [r7, #12]
 8011972:	f000 ff1b 	bl	80127ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2200      	movs	r2, #0
 801197a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801197e:	2300      	movs	r3, #0
 8011980:	2200      	movs	r2, #0
 8011982:	2100      	movs	r1, #0
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f001 fc02 	bl	801318e <USBD_LL_PrepareReceive>
 801198a:	e018      	b.n	80119be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b03      	cmp	r3, #3
 8011996:	d10b      	bne.n	80119b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d005      	beq.n	80119b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119b0:	2180      	movs	r1, #128	; 0x80
 80119b2:	68f8      	ldr	r0, [r7, #12]
 80119b4:	f001 fb40 	bl	8013038 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f000 ff49 	bl	8012850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d122      	bne.n	8011a0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f7ff fe98 	bl	80116fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2200      	movs	r2, #0
 80119d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80119d6:	e01a      	b.n	8011a0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	2b03      	cmp	r3, #3
 80119e2:	d114      	bne.n	8011a0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ea:	695b      	ldr	r3, [r3, #20]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00e      	beq.n	8011a0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119f6:	695b      	ldr	r3, [r3, #20]
 80119f8:	7afa      	ldrb	r2, [r7, #11]
 80119fa:	4611      	mov	r1, r2
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	4798      	blx	r3
 8011a00:	4603      	mov	r3, r0
 8011a02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011a04:	7dfb      	ldrb	r3, [r7, #23]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011a0a:	7dfb      	ldrb	r3, [r7, #23]
 8011a0c:	e000      	b.n	8011a10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3718      	adds	r7, #24
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2201      	movs	r2, #1
 8011a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2200      	movs	r2, #0
 8011a34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d101      	bne.n	8011a4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	e02f      	b.n	8011aac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00f      	beq.n	8011a76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d009      	beq.n	8011a76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	6852      	ldr	r2, [r2, #4]
 8011a6e:	b2d2      	uxtb	r2, r2
 8011a70:	4611      	mov	r1, r2
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a76:	2340      	movs	r3, #64	; 0x40
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f001 fa96 	bl	8012fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2201      	movs	r2, #1
 8011a86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2240      	movs	r2, #64	; 0x40
 8011a8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a92:	2340      	movs	r3, #64	; 0x40
 8011a94:	2200      	movs	r2, #0
 8011a96:	2180      	movs	r1, #128	; 0x80
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f001 fa88 	bl	8012fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2240      	movs	r2, #64	; 0x40
 8011aa8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011aaa:	2300      	movs	r3, #0
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	460b      	mov	r3, r1
 8011abe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	78fa      	ldrb	r2, [r7, #3]
 8011ac4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ac6:	2300      	movs	r3, #0
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2204      	movs	r2, #4
 8011aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	2b04      	cmp	r3, #4
 8011b12:	d106      	bne.n	8011b22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011b42:	2303      	movs	r3, #3
 8011b44:	e012      	b.n	8011b6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	d10b      	bne.n	8011b6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b58:	69db      	ldr	r3, [r3, #28]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d005      	beq.n	8011b6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b087      	sub	sp, #28
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011b92:	8a3b      	ldrh	r3, [r7, #16]
 8011b94:	021b      	lsls	r3, r3, #8
 8011b96:	b21a      	sxth	r2, r3
 8011b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	b21b      	sxth	r3, r3
 8011ba0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	371c      	adds	r7, #28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bc6:	2b40      	cmp	r3, #64	; 0x40
 8011bc8:	d005      	beq.n	8011bd6 <USBD_StdDevReq+0x26>
 8011bca:	2b40      	cmp	r3, #64	; 0x40
 8011bcc:	d853      	bhi.n	8011c76 <USBD_StdDevReq+0xc6>
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00b      	beq.n	8011bea <USBD_StdDevReq+0x3a>
 8011bd2:	2b20      	cmp	r3, #32
 8011bd4:	d14f      	bne.n	8011c76 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	6839      	ldr	r1, [r7, #0]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	4798      	blx	r3
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]
      break;
 8011be8:	e04a      	b.n	8011c80 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	785b      	ldrb	r3, [r3, #1]
 8011bee:	2b09      	cmp	r3, #9
 8011bf0:	d83b      	bhi.n	8011c6a <USBD_StdDevReq+0xba>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <USBD_StdDevReq+0x48>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c4d 	.word	0x08011c4d
 8011bfc:	08011c61 	.word	0x08011c61
 8011c00:	08011c6b 	.word	0x08011c6b
 8011c04:	08011c57 	.word	0x08011c57
 8011c08:	08011c6b 	.word	0x08011c6b
 8011c0c:	08011c2b 	.word	0x08011c2b
 8011c10:	08011c21 	.word	0x08011c21
 8011c14:	08011c6b 	.word	0x08011c6b
 8011c18:	08011c43 	.word	0x08011c43
 8011c1c:	08011c35 	.word	0x08011c35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011c20:	6839      	ldr	r1, [r7, #0]
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 f9de 	bl	8011fe4 <USBD_GetDescriptor>
          break;
 8011c28:	e024      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 fb6d 	bl	801230c <USBD_SetAddress>
          break;
 8011c32:	e01f      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fbac 	bl	8012394 <USBD_SetConfig>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8011c40:	e018      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 fc4b 	bl	80124e0 <USBD_GetConfig>
          break;
 8011c4a:	e013      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fc7c 	bl	801254c <USBD_GetStatus>
          break;
 8011c54:	e00e      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 fcab 	bl	80125b4 <USBD_SetFeature>
          break;
 8011c5e:	e009      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011c60:	6839      	ldr	r1, [r7, #0]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 fcba 	bl	80125dc <USBD_ClrFeature>
          break;
 8011c68:	e004      	b.n	8011c74 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fd11 	bl	8012694 <USBD_CtlError>
          break;
 8011c72:	bf00      	nop
      }
      break;
 8011c74:	e004      	b.n	8011c80 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 fd0b 	bl	8012694 <USBD_CtlError>
      break;
 8011c7e:	bf00      	nop
  }

  return ret;
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3710      	adds	r7, #16
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop

08011c8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c96:	2300      	movs	r3, #0
 8011c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ca2:	2b40      	cmp	r3, #64	; 0x40
 8011ca4:	d005      	beq.n	8011cb2 <USBD_StdItfReq+0x26>
 8011ca6:	2b40      	cmp	r3, #64	; 0x40
 8011ca8:	d82f      	bhi.n	8011d0a <USBD_StdItfReq+0x7e>
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d001      	beq.n	8011cb2 <USBD_StdItfReq+0x26>
 8011cae:	2b20      	cmp	r3, #32
 8011cb0:	d12b      	bne.n	8011d0a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	d81d      	bhi.n	8011cfc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	889b      	ldrh	r3, [r3, #4]
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d813      	bhi.n	8011cf2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	6839      	ldr	r1, [r7, #0]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	4798      	blx	r3
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	88db      	ldrh	r3, [r3, #6]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d110      	bne.n	8011d06 <USBD_StdItfReq+0x7a>
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10d      	bne.n	8011d06 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fd9d 	bl	801282a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011cf0:	e009      	b.n	8011d06 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011cf2:	6839      	ldr	r1, [r7, #0]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fccd 	bl	8012694 <USBD_CtlError>
          break;
 8011cfa:	e004      	b.n	8011d06 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011cfc:	6839      	ldr	r1, [r7, #0]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 fcc8 	bl	8012694 <USBD_CtlError>
          break;
 8011d04:	e000      	b.n	8011d08 <USBD_StdItfReq+0x7c>
          break;
 8011d06:	bf00      	nop
      }
      break;
 8011d08:	e004      	b.n	8011d14 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f000 fcc1 	bl	8012694 <USBD_CtlError>
      break;
 8011d12:	bf00      	nop
  }

  return ret;
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b084      	sub	sp, #16
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	889b      	ldrh	r3, [r3, #4]
 8011d30:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d3a:	2b40      	cmp	r3, #64	; 0x40
 8011d3c:	d007      	beq.n	8011d4e <USBD_StdEPReq+0x30>
 8011d3e:	2b40      	cmp	r3, #64	; 0x40
 8011d40:	f200 8145 	bhi.w	8011fce <USBD_StdEPReq+0x2b0>
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d00c      	beq.n	8011d62 <USBD_StdEPReq+0x44>
 8011d48:	2b20      	cmp	r3, #32
 8011d4a:	f040 8140 	bne.w	8011fce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	4798      	blx	r3
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d60:	e13a      	b.n	8011fd8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	785b      	ldrb	r3, [r3, #1]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	d007      	beq.n	8011d7a <USBD_StdEPReq+0x5c>
 8011d6a:	2b03      	cmp	r3, #3
 8011d6c:	f300 8129 	bgt.w	8011fc2 <USBD_StdEPReq+0x2a4>
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d07f      	beq.n	8011e74 <USBD_StdEPReq+0x156>
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d03c      	beq.n	8011df2 <USBD_StdEPReq+0xd4>
 8011d78:	e123      	b.n	8011fc2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d002      	beq.n	8011d8c <USBD_StdEPReq+0x6e>
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d016      	beq.n	8011db8 <USBD_StdEPReq+0x9a>
 8011d8a:	e02c      	b.n	8011de6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d8c:	7bbb      	ldrb	r3, [r7, #14]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00d      	beq.n	8011dae <USBD_StdEPReq+0x90>
 8011d92:	7bbb      	ldrb	r3, [r7, #14]
 8011d94:	2b80      	cmp	r3, #128	; 0x80
 8011d96:	d00a      	beq.n	8011dae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d98:	7bbb      	ldrb	r3, [r7, #14]
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f001 f94b 	bl	8013038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011da2:	2180      	movs	r1, #128	; 0x80
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f001 f947 	bl	8013038 <USBD_LL_StallEP>
 8011daa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011dac:	e020      	b.n	8011df0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011dae:	6839      	ldr	r1, [r7, #0]
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fc6f 	bl	8012694 <USBD_CtlError>
              break;
 8011db6:	e01b      	b.n	8011df0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	885b      	ldrh	r3, [r3, #2]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10e      	bne.n	8011dde <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011dc0:	7bbb      	ldrb	r3, [r7, #14]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00b      	beq.n	8011dde <USBD_StdEPReq+0xc0>
 8011dc6:	7bbb      	ldrb	r3, [r7, #14]
 8011dc8:	2b80      	cmp	r3, #128	; 0x80
 8011dca:	d008      	beq.n	8011dde <USBD_StdEPReq+0xc0>
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	88db      	ldrh	r3, [r3, #6]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d104      	bne.n	8011dde <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011dd4:	7bbb      	ldrb	r3, [r7, #14]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f001 f92d 	bl	8013038 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 fd23 	bl	801282a <USBD_CtlSendStatus>

              break;
 8011de4:	e004      	b.n	8011df0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011de6:	6839      	ldr	r1, [r7, #0]
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 fc53 	bl	8012694 <USBD_CtlError>
              break;
 8011dee:	bf00      	nop
          }
          break;
 8011df0:	e0ec      	b.n	8011fcc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	2b02      	cmp	r3, #2
 8011dfc:	d002      	beq.n	8011e04 <USBD_StdEPReq+0xe6>
 8011dfe:	2b03      	cmp	r3, #3
 8011e00:	d016      	beq.n	8011e30 <USBD_StdEPReq+0x112>
 8011e02:	e030      	b.n	8011e66 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e04:	7bbb      	ldrb	r3, [r7, #14]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00d      	beq.n	8011e26 <USBD_StdEPReq+0x108>
 8011e0a:	7bbb      	ldrb	r3, [r7, #14]
 8011e0c:	2b80      	cmp	r3, #128	; 0x80
 8011e0e:	d00a      	beq.n	8011e26 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e10:	7bbb      	ldrb	r3, [r7, #14]
 8011e12:	4619      	mov	r1, r3
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f001 f90f 	bl	8013038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e1a:	2180      	movs	r1, #128	; 0x80
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f001 f90b 	bl	8013038 <USBD_LL_StallEP>
 8011e22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011e24:	e025      	b.n	8011e72 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011e26:	6839      	ldr	r1, [r7, #0]
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 fc33 	bl	8012694 <USBD_CtlError>
              break;
 8011e2e:	e020      	b.n	8011e72 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	885b      	ldrh	r3, [r3, #2]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11b      	bne.n	8011e70 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011e38:	7bbb      	ldrb	r3, [r7, #14]
 8011e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d004      	beq.n	8011e4c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011e42:	7bbb      	ldrb	r3, [r7, #14]
 8011e44:	4619      	mov	r1, r3
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f001 f915 	bl	8013076 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 fcec 	bl	801282a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	6839      	ldr	r1, [r7, #0]
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	4798      	blx	r3
 8011e60:	4603      	mov	r3, r0
 8011e62:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011e64:	e004      	b.n	8011e70 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011e66:	6839      	ldr	r1, [r7, #0]
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fc13 	bl	8012694 <USBD_CtlError>
              break;
 8011e6e:	e000      	b.n	8011e72 <USBD_StdEPReq+0x154>
              break;
 8011e70:	bf00      	nop
          }
          break;
 8011e72:	e0ab      	b.n	8011fcc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d002      	beq.n	8011e86 <USBD_StdEPReq+0x168>
 8011e80:	2b03      	cmp	r3, #3
 8011e82:	d032      	beq.n	8011eea <USBD_StdEPReq+0x1cc>
 8011e84:	e097      	b.n	8011fb6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e86:	7bbb      	ldrb	r3, [r7, #14]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d007      	beq.n	8011e9c <USBD_StdEPReq+0x17e>
 8011e8c:	7bbb      	ldrb	r3, [r7, #14]
 8011e8e:	2b80      	cmp	r3, #128	; 0x80
 8011e90:	d004      	beq.n	8011e9c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011e92:	6839      	ldr	r1, [r7, #0]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 fbfd 	bl	8012694 <USBD_CtlError>
                break;
 8011e9a:	e091      	b.n	8011fc0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	da0b      	bge.n	8011ebc <USBD_StdEPReq+0x19e>
 8011ea4:	7bbb      	ldrb	r3, [r7, #14]
 8011ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011eaa:	4613      	mov	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	4413      	add	r3, r2
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	3310      	adds	r3, #16
 8011eb4:	687a      	ldr	r2, [r7, #4]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	3304      	adds	r3, #4
 8011eba:	e00b      	b.n	8011ed4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ebc:	7bbb      	ldrb	r3, [r7, #14]
 8011ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	4413      	add	r3, r2
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2202      	movs	r2, #2
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fc47 	bl	8012776 <USBD_CtlSendData>
              break;
 8011ee8:	e06a      	b.n	8011fc0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	da11      	bge.n	8011f16 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ef2:	7bbb      	ldrb	r3, [r7, #14]
 8011ef4:	f003 020f 	and.w	r2, r3, #15
 8011ef8:	6879      	ldr	r1, [r7, #4]
 8011efa:	4613      	mov	r3, r2
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	4413      	add	r3, r2
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	440b      	add	r3, r1
 8011f04:	3324      	adds	r3, #36	; 0x24
 8011f06:	881b      	ldrh	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d117      	bne.n	8011f3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fbc0 	bl	8012694 <USBD_CtlError>
                  break;
 8011f14:	e054      	b.n	8011fc0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f16:	7bbb      	ldrb	r3, [r7, #14]
 8011f18:	f003 020f 	and.w	r2, r3, #15
 8011f1c:	6879      	ldr	r1, [r7, #4]
 8011f1e:	4613      	mov	r3, r2
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	4413      	add	r3, r2
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	440b      	add	r3, r1
 8011f28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011f2c:	881b      	ldrh	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d104      	bne.n	8011f3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011f32:	6839      	ldr	r1, [r7, #0]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fbad 	bl	8012694 <USBD_CtlError>
                  break;
 8011f3a:	e041      	b.n	8011fc0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	da0b      	bge.n	8011f5c <USBD_StdEPReq+0x23e>
 8011f44:	7bbb      	ldrb	r3, [r7, #14]
 8011f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	4413      	add	r3, r2
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	3310      	adds	r3, #16
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	4413      	add	r3, r2
 8011f58:	3304      	adds	r3, #4
 8011f5a:	e00b      	b.n	8011f74 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011f5c:	7bbb      	ldrb	r3, [r7, #14]
 8011f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f62:	4613      	mov	r3, r2
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	4413      	add	r3, r2
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	4413      	add	r3, r2
 8011f72:	3304      	adds	r3, #4
 8011f74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f76:	7bbb      	ldrb	r3, [r7, #14]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <USBD_StdEPReq+0x264>
 8011f7c:	7bbb      	ldrb	r3, [r7, #14]
 8011f7e:	2b80      	cmp	r3, #128	; 0x80
 8011f80:	d103      	bne.n	8011f8a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	2200      	movs	r2, #0
 8011f86:	601a      	str	r2, [r3, #0]
 8011f88:	e00e      	b.n	8011fa8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011f8a:	7bbb      	ldrb	r3, [r7, #14]
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f001 f890 	bl	80130b4 <USBD_LL_IsStallEP>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d003      	beq.n	8011fa2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	e002      	b.n	8011fa8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	2202      	movs	r2, #2
 8011fac:	4619      	mov	r1, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fbe1 	bl	8012776 <USBD_CtlSendData>
              break;
 8011fb4:	e004      	b.n	8011fc0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011fb6:	6839      	ldr	r1, [r7, #0]
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 fb6b 	bl	8012694 <USBD_CtlError>
              break;
 8011fbe:	bf00      	nop
          }
          break;
 8011fc0:	e004      	b.n	8011fcc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fb65 	bl	8012694 <USBD_CtlError>
          break;
 8011fca:	bf00      	nop
      }
      break;
 8011fcc:	e004      	b.n	8011fd8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fb5f 	bl	8012694 <USBD_CtlError>
      break;
 8011fd6:	bf00      	nop
  }

  return ret;
 8011fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3710      	adds	r7, #16
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	885b      	ldrh	r3, [r3, #2]
 8011ffe:	0a1b      	lsrs	r3, r3, #8
 8012000:	b29b      	uxth	r3, r3
 8012002:	3b01      	subs	r3, #1
 8012004:	2b0e      	cmp	r3, #14
 8012006:	f200 8152 	bhi.w	80122ae <USBD_GetDescriptor+0x2ca>
 801200a:	a201      	add	r2, pc, #4	; (adr r2, 8012010 <USBD_GetDescriptor+0x2c>)
 801200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012010:	08012081 	.word	0x08012081
 8012014:	08012099 	.word	0x08012099
 8012018:	080120d9 	.word	0x080120d9
 801201c:	080122af 	.word	0x080122af
 8012020:	080122af 	.word	0x080122af
 8012024:	0801224f 	.word	0x0801224f
 8012028:	0801227b 	.word	0x0801227b
 801202c:	080122af 	.word	0x080122af
 8012030:	080122af 	.word	0x080122af
 8012034:	080122af 	.word	0x080122af
 8012038:	080122af 	.word	0x080122af
 801203c:	080122af 	.word	0x080122af
 8012040:	080122af 	.word	0x080122af
 8012044:	080122af 	.word	0x080122af
 8012048:	0801204d 	.word	0x0801204d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012052:	69db      	ldr	r3, [r3, #28]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00b      	beq.n	8012070 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801205e:	69db      	ldr	r3, [r3, #28]
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	7c12      	ldrb	r2, [r2, #16]
 8012064:	f107 0108 	add.w	r1, r7, #8
 8012068:	4610      	mov	r0, r2
 801206a:	4798      	blx	r3
 801206c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801206e:	e126      	b.n	80122be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012070:	6839      	ldr	r1, [r7, #0]
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 fb0e 	bl	8012694 <USBD_CtlError>
        err++;
 8012078:	7afb      	ldrb	r3, [r7, #11]
 801207a:	3301      	adds	r3, #1
 801207c:	72fb      	strb	r3, [r7, #11]
      break;
 801207e:	e11e      	b.n	80122be <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	7c12      	ldrb	r2, [r2, #16]
 801208c:	f107 0108 	add.w	r1, r7, #8
 8012090:	4610      	mov	r0, r2
 8012092:	4798      	blx	r3
 8012094:	60f8      	str	r0, [r7, #12]
      break;
 8012096:	e112      	b.n	80122be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7c1b      	ldrb	r3, [r3, #16]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10d      	bne.n	80120bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120a8:	f107 0208 	add.w	r2, r7, #8
 80120ac:	4610      	mov	r0, r2
 80120ae:	4798      	blx	r3
 80120b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	3301      	adds	r3, #1
 80120b6:	2202      	movs	r2, #2
 80120b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80120ba:	e100      	b.n	80122be <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c4:	f107 0208 	add.w	r2, r7, #8
 80120c8:	4610      	mov	r0, r2
 80120ca:	4798      	blx	r3
 80120cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	3301      	adds	r3, #1
 80120d2:	2202      	movs	r2, #2
 80120d4:	701a      	strb	r2, [r3, #0]
      break;
 80120d6:	e0f2      	b.n	80122be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	885b      	ldrh	r3, [r3, #2]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b05      	cmp	r3, #5
 80120e0:	f200 80ac 	bhi.w	801223c <USBD_GetDescriptor+0x258>
 80120e4:	a201      	add	r2, pc, #4	; (adr r2, 80120ec <USBD_GetDescriptor+0x108>)
 80120e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ea:	bf00      	nop
 80120ec:	08012105 	.word	0x08012105
 80120f0:	08012139 	.word	0x08012139
 80120f4:	0801216d 	.word	0x0801216d
 80120f8:	080121a1 	.word	0x080121a1
 80120fc:	080121d5 	.word	0x080121d5
 8012100:	08012209 	.word	0x08012209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00b      	beq.n	8012128 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	7c12      	ldrb	r2, [r2, #16]
 801211c:	f107 0108 	add.w	r1, r7, #8
 8012120:	4610      	mov	r0, r2
 8012122:	4798      	blx	r3
 8012124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012126:	e091      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012128:	6839      	ldr	r1, [r7, #0]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fab2 	bl	8012694 <USBD_CtlError>
            err++;
 8012130:	7afb      	ldrb	r3, [r7, #11]
 8012132:	3301      	adds	r3, #1
 8012134:	72fb      	strb	r3, [r7, #11]
          break;
 8012136:	e089      	b.n	801224c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00b      	beq.n	801215c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	7c12      	ldrb	r2, [r2, #16]
 8012150:	f107 0108 	add.w	r1, r7, #8
 8012154:	4610      	mov	r0, r2
 8012156:	4798      	blx	r3
 8012158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801215a:	e077      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 fa98 	bl	8012694 <USBD_CtlError>
            err++;
 8012164:	7afb      	ldrb	r3, [r7, #11]
 8012166:	3301      	adds	r3, #1
 8012168:	72fb      	strb	r3, [r7, #11]
          break;
 801216a:	e06f      	b.n	801224c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00b      	beq.n	8012190 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	7c12      	ldrb	r2, [r2, #16]
 8012184:	f107 0108 	add.w	r1, r7, #8
 8012188:	4610      	mov	r0, r2
 801218a:	4798      	blx	r3
 801218c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801218e:	e05d      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012190:	6839      	ldr	r1, [r7, #0]
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 fa7e 	bl	8012694 <USBD_CtlError>
            err++;
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	3301      	adds	r3, #1
 801219c:	72fb      	strb	r3, [r7, #11]
          break;
 801219e:	e055      	b.n	801224c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00b      	beq.n	80121c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	7c12      	ldrb	r2, [r2, #16]
 80121b8:	f107 0108 	add.w	r1, r7, #8
 80121bc:	4610      	mov	r0, r2
 80121be:	4798      	blx	r3
 80121c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121c2:	e043      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121c4:	6839      	ldr	r1, [r7, #0]
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fa64 	bl	8012694 <USBD_CtlError>
            err++;
 80121cc:	7afb      	ldrb	r3, [r7, #11]
 80121ce:	3301      	adds	r3, #1
 80121d0:	72fb      	strb	r3, [r7, #11]
          break;
 80121d2:	e03b      	b.n	801224c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121da:	695b      	ldr	r3, [r3, #20]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00b      	beq.n	80121f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	7c12      	ldrb	r2, [r2, #16]
 80121ec:	f107 0108 	add.w	r1, r7, #8
 80121f0:	4610      	mov	r0, r2
 80121f2:	4798      	blx	r3
 80121f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121f6:	e029      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fa4a 	bl	8012694 <USBD_CtlError>
            err++;
 8012200:	7afb      	ldrb	r3, [r7, #11]
 8012202:	3301      	adds	r3, #1
 8012204:	72fb      	strb	r3, [r7, #11]
          break;
 8012206:	e021      	b.n	801224c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801220e:	699b      	ldr	r3, [r3, #24]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00b      	beq.n	801222c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221a:	699b      	ldr	r3, [r3, #24]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	7c12      	ldrb	r2, [r2, #16]
 8012220:	f107 0108 	add.w	r1, r7, #8
 8012224:	4610      	mov	r0, r2
 8012226:	4798      	blx	r3
 8012228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801222a:	e00f      	b.n	801224c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 fa30 	bl	8012694 <USBD_CtlError>
            err++;
 8012234:	7afb      	ldrb	r3, [r7, #11]
 8012236:	3301      	adds	r3, #1
 8012238:	72fb      	strb	r3, [r7, #11]
          break;
 801223a:	e007      	b.n	801224c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801223c:	6839      	ldr	r1, [r7, #0]
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 fa28 	bl	8012694 <USBD_CtlError>
          err++;
 8012244:	7afb      	ldrb	r3, [r7, #11]
 8012246:	3301      	adds	r3, #1
 8012248:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801224a:	bf00      	nop
      }
      break;
 801224c:	e037      	b.n	80122be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	7c1b      	ldrb	r3, [r3, #16]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d109      	bne.n	801226a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801225e:	f107 0208 	add.w	r2, r7, #8
 8012262:	4610      	mov	r0, r2
 8012264:	4798      	blx	r3
 8012266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012268:	e029      	b.n	80122be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fa11 	bl	8012694 <USBD_CtlError>
        err++;
 8012272:	7afb      	ldrb	r3, [r7, #11]
 8012274:	3301      	adds	r3, #1
 8012276:	72fb      	strb	r3, [r7, #11]
      break;
 8012278:	e021      	b.n	80122be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	7c1b      	ldrb	r3, [r3, #16]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d10d      	bne.n	801229e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801228a:	f107 0208 	add.w	r2, r7, #8
 801228e:	4610      	mov	r0, r2
 8012290:	4798      	blx	r3
 8012292:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	3301      	adds	r3, #1
 8012298:	2207      	movs	r2, #7
 801229a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801229c:	e00f      	b.n	80122be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801229e:	6839      	ldr	r1, [r7, #0]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f9f7 	bl	8012694 <USBD_CtlError>
        err++;
 80122a6:	7afb      	ldrb	r3, [r7, #11]
 80122a8:	3301      	adds	r3, #1
 80122aa:	72fb      	strb	r3, [r7, #11]
      break;
 80122ac:	e007      	b.n	80122be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f9ef 	bl	8012694 <USBD_CtlError>
      err++;
 80122b6:	7afb      	ldrb	r3, [r7, #11]
 80122b8:	3301      	adds	r3, #1
 80122ba:	72fb      	strb	r3, [r7, #11]
      break;
 80122bc:	bf00      	nop
  }

  if (err != 0U)
 80122be:	7afb      	ldrb	r3, [r7, #11]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d11e      	bne.n	8012302 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	88db      	ldrh	r3, [r3, #6]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d016      	beq.n	80122fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80122cc:	893b      	ldrh	r3, [r7, #8]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00e      	beq.n	80122f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	88da      	ldrh	r2, [r3, #6]
 80122d6:	893b      	ldrh	r3, [r7, #8]
 80122d8:	4293      	cmp	r3, r2
 80122da:	bf28      	it	cs
 80122dc:	4613      	movcs	r3, r2
 80122de:	b29b      	uxth	r3, r3
 80122e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80122e2:	893b      	ldrh	r3, [r7, #8]
 80122e4:	461a      	mov	r2, r3
 80122e6:	68f9      	ldr	r1, [r7, #12]
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 fa44 	bl	8012776 <USBD_CtlSendData>
 80122ee:	e009      	b.n	8012304 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 f9ce 	bl	8012694 <USBD_CtlError>
 80122f8:	e004      	b.n	8012304 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 fa95 	bl	801282a <USBD_CtlSendStatus>
 8012300:	e000      	b.n	8012304 <USBD_GetDescriptor+0x320>
    return;
 8012302:	bf00      	nop
  }
}
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop

0801230c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	889b      	ldrh	r3, [r3, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d131      	bne.n	8012382 <USBD_SetAddress+0x76>
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	88db      	ldrh	r3, [r3, #6]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d12d      	bne.n	8012382 <USBD_SetAddress+0x76>
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	885b      	ldrh	r3, [r3, #2]
 801232a:	2b7f      	cmp	r3, #127	; 0x7f
 801232c:	d829      	bhi.n	8012382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	885b      	ldrh	r3, [r3, #2]
 8012332:	b2db      	uxtb	r3, r3
 8012334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012340:	b2db      	uxtb	r3, r3
 8012342:	2b03      	cmp	r3, #3
 8012344:	d104      	bne.n	8012350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012346:	6839      	ldr	r1, [r7, #0]
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 f9a3 	bl	8012694 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801234e:	e01d      	b.n	801238c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	7bfa      	ldrb	r2, [r7, #15]
 8012354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012358:	7bfb      	ldrb	r3, [r7, #15]
 801235a:	4619      	mov	r1, r3
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 fed6 	bl	801310e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 fa61 	bl	801282a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2202      	movs	r2, #2
 8012372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012376:	e009      	b.n	801238c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2201      	movs	r2, #1
 801237c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012380:	e004      	b.n	801238c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 f985 	bl	8012694 <USBD_CtlError>
  }
}
 801238a:	bf00      	nop
 801238c:	bf00      	nop
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801239e:	2300      	movs	r3, #0
 80123a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	885b      	ldrh	r3, [r3, #2]
 80123a6:	b2da      	uxtb	r2, r3
 80123a8:	4b4c      	ldr	r3, [pc, #304]	; (80124dc <USBD_SetConfig+0x148>)
 80123aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123ac:	4b4b      	ldr	r3, [pc, #300]	; (80124dc <USBD_SetConfig+0x148>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d905      	bls.n	80123c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f96c 	bl	8012694 <USBD_CtlError>
    return USBD_FAIL;
 80123bc:	2303      	movs	r3, #3
 80123be:	e088      	b.n	80124d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	2b02      	cmp	r3, #2
 80123ca:	d002      	beq.n	80123d2 <USBD_SetConfig+0x3e>
 80123cc:	2b03      	cmp	r3, #3
 80123ce:	d025      	beq.n	801241c <USBD_SetConfig+0x88>
 80123d0:	e071      	b.n	80124b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80123d2:	4b42      	ldr	r3, [pc, #264]	; (80124dc <USBD_SetConfig+0x148>)
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d01c      	beq.n	8012414 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80123da:	4b40      	ldr	r3, [pc, #256]	; (80124dc <USBD_SetConfig+0x148>)
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	461a      	mov	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80123e4:	4b3d      	ldr	r3, [pc, #244]	; (80124dc <USBD_SetConfig+0x148>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	4619      	mov	r1, r3
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff f992 	bl	8011714 <USBD_SetClassConfig>
 80123f0:	4603      	mov	r3, r0
 80123f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d004      	beq.n	8012404 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80123fa:	6839      	ldr	r1, [r7, #0]
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f000 f949 	bl	8012694 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012402:	e065      	b.n	80124d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 fa10 	bl	801282a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2203      	movs	r2, #3
 801240e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012412:	e05d      	b.n	80124d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fa08 	bl	801282a <USBD_CtlSendStatus>
      break;
 801241a:	e059      	b.n	80124d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801241c:	4b2f      	ldr	r3, [pc, #188]	; (80124dc <USBD_SetConfig+0x148>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d112      	bne.n	801244a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2202      	movs	r2, #2
 8012428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801242c:	4b2b      	ldr	r3, [pc, #172]	; (80124dc <USBD_SetConfig+0x148>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	461a      	mov	r2, r3
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012436:	4b29      	ldr	r3, [pc, #164]	; (80124dc <USBD_SetConfig+0x148>)
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	4619      	mov	r1, r3
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7ff f985 	bl	801174c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f9f1 	bl	801282a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012448:	e042      	b.n	80124d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801244a:	4b24      	ldr	r3, [pc, #144]	; (80124dc <USBD_SetConfig+0x148>)
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	429a      	cmp	r2, r3
 8012456:	d02a      	beq.n	80124ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	b2db      	uxtb	r3, r3
 801245e:	4619      	mov	r1, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff f973 	bl	801174c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012466:	4b1d      	ldr	r3, [pc, #116]	; (80124dc <USBD_SetConfig+0x148>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	461a      	mov	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012470:	4b1a      	ldr	r3, [pc, #104]	; (80124dc <USBD_SetConfig+0x148>)
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7ff f94c 	bl	8011714 <USBD_SetClassConfig>
 801247c:	4603      	mov	r3, r0
 801247e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012480:	7bfb      	ldrb	r3, [r7, #15]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00f      	beq.n	80124a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012486:	6839      	ldr	r1, [r7, #0]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f903 	bl	8012694 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	b2db      	uxtb	r3, r3
 8012494:	4619      	mov	r1, r3
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7ff f958 	bl	801174c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2202      	movs	r2, #2
 80124a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80124a4:	e014      	b.n	80124d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f000 f9bf 	bl	801282a <USBD_CtlSendStatus>
      break;
 80124ac:	e010      	b.n	80124d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f9bb 	bl	801282a <USBD_CtlSendStatus>
      break;
 80124b4:	e00c      	b.n	80124d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 f8eb 	bl	8012694 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80124be:	4b07      	ldr	r3, [pc, #28]	; (80124dc <USBD_SetConfig+0x148>)
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	4619      	mov	r1, r3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7ff f941 	bl	801174c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80124ca:	2303      	movs	r3, #3
 80124cc:	73fb      	strb	r3, [r7, #15]
      break;
 80124ce:	bf00      	nop
  }

  return ret;
 80124d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3710      	adds	r7, #16
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	20000a54 	.word	0x20000a54

080124e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	88db      	ldrh	r3, [r3, #6]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d004      	beq.n	80124fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80124f2:	6839      	ldr	r1, [r7, #0]
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f8cd 	bl	8012694 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80124fa:	e023      	b.n	8012544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b02      	cmp	r3, #2
 8012506:	dc02      	bgt.n	801250e <USBD_GetConfig+0x2e>
 8012508:	2b00      	cmp	r3, #0
 801250a:	dc03      	bgt.n	8012514 <USBD_GetConfig+0x34>
 801250c:	e015      	b.n	801253a <USBD_GetConfig+0x5a>
 801250e:	2b03      	cmp	r3, #3
 8012510:	d00b      	beq.n	801252a <USBD_GetConfig+0x4a>
 8012512:	e012      	b.n	801253a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3308      	adds	r3, #8
 801251e:	2201      	movs	r2, #1
 8012520:	4619      	mov	r1, r3
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 f927 	bl	8012776 <USBD_CtlSendData>
        break;
 8012528:	e00c      	b.n	8012544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	3304      	adds	r3, #4
 801252e:	2201      	movs	r2, #1
 8012530:	4619      	mov	r1, r3
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 f91f 	bl	8012776 <USBD_CtlSendData>
        break;
 8012538:	e004      	b.n	8012544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801253a:	6839      	ldr	r1, [r7, #0]
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 f8a9 	bl	8012694 <USBD_CtlError>
        break;
 8012542:	bf00      	nop
}
 8012544:	bf00      	nop
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801255c:	b2db      	uxtb	r3, r3
 801255e:	3b01      	subs	r3, #1
 8012560:	2b02      	cmp	r3, #2
 8012562:	d81e      	bhi.n	80125a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	88db      	ldrh	r3, [r3, #6]
 8012568:	2b02      	cmp	r3, #2
 801256a:	d004      	beq.n	8012576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801256c:	6839      	ldr	r1, [r7, #0]
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 f890 	bl	8012694 <USBD_CtlError>
        break;
 8012574:	e01a      	b.n	80125ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2201      	movs	r2, #1
 801257a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012582:	2b00      	cmp	r3, #0
 8012584:	d005      	beq.n	8012592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	f043 0202 	orr.w	r2, r3, #2
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	330c      	adds	r3, #12
 8012596:	2202      	movs	r2, #2
 8012598:	4619      	mov	r1, r3
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 f8eb 	bl	8012776 <USBD_CtlSendData>
      break;
 80125a0:	e004      	b.n	80125ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 f875 	bl	8012694 <USBD_CtlError>
      break;
 80125aa:	bf00      	nop
  }
}
 80125ac:	bf00      	nop
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	885b      	ldrh	r3, [r3, #2]
 80125c2:	2b01      	cmp	r3, #1
 80125c4:	d106      	bne.n	80125d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2201      	movs	r2, #1
 80125ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 f92b 	bl	801282a <USBD_CtlSendStatus>
  }
}
 80125d4:	bf00      	nop
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	3b01      	subs	r3, #1
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	d80b      	bhi.n	801260c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	885b      	ldrh	r3, [r3, #2]
 80125f8:	2b01      	cmp	r3, #1
 80125fa:	d10c      	bne.n	8012616 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2200      	movs	r2, #0
 8012600:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f000 f910 	bl	801282a <USBD_CtlSendStatus>
      }
      break;
 801260a:	e004      	b.n	8012616 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801260c:	6839      	ldr	r1, [r7, #0]
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f000 f840 	bl	8012694 <USBD_CtlError>
      break;
 8012614:	e000      	b.n	8012618 <USBD_ClrFeature+0x3c>
      break;
 8012616:	bf00      	nop
  }
}
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	781a      	ldrb	r2, [r3, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	3301      	adds	r3, #1
 801263a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	781a      	ldrb	r2, [r3, #0]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	3301      	adds	r3, #1
 8012648:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff fa92 	bl	8011b74 <SWAPBYTE>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	3301      	adds	r3, #1
 801265c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3301      	adds	r3, #1
 8012662:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f7ff fa85 	bl	8011b74 <SWAPBYTE>
 801266a:	4603      	mov	r3, r0
 801266c:	461a      	mov	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3301      	adds	r3, #1
 8012676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3301      	adds	r3, #1
 801267c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f7ff fa78 	bl	8011b74 <SWAPBYTE>
 8012684:	4603      	mov	r3, r0
 8012686:	461a      	mov	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	80da      	strh	r2, [r3, #6]
}
 801268c:	bf00      	nop
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801269e:	2180      	movs	r1, #128	; 0x80
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 fcc9 	bl	8013038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126a6:	2100      	movs	r1, #0
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 fcc5 	bl	8013038 <USBD_LL_StallEP>
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b086      	sub	sp, #24
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	60f8      	str	r0, [r7, #12]
 80126be:	60b9      	str	r1, [r7, #8]
 80126c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80126c2:	2300      	movs	r3, #0
 80126c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d036      	beq.n	801273a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80126d0:	6938      	ldr	r0, [r7, #16]
 80126d2:	f000 f836 	bl	8012742 <USBD_GetLen>
 80126d6:	4603      	mov	r3, r0
 80126d8:	3301      	adds	r3, #1
 80126da:	b29b      	uxth	r3, r3
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	b29a      	uxth	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	4413      	add	r3, r2
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	7812      	ldrb	r2, [r2, #0]
 80126ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
 80126f2:	3301      	adds	r3, #1
 80126f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80126f6:	7dfb      	ldrb	r3, [r7, #23]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	4413      	add	r3, r2
 80126fc:	2203      	movs	r2, #3
 80126fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8012700:	7dfb      	ldrb	r3, [r7, #23]
 8012702:	3301      	adds	r3, #1
 8012704:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012706:	e013      	b.n	8012730 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012708:	7dfb      	ldrb	r3, [r7, #23]
 801270a:	68ba      	ldr	r2, [r7, #8]
 801270c:	4413      	add	r3, r2
 801270e:	693a      	ldr	r2, [r7, #16]
 8012710:	7812      	ldrb	r2, [r2, #0]
 8012712:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	3301      	adds	r3, #1
 8012718:	613b      	str	r3, [r7, #16]
    idx++;
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	3301      	adds	r3, #1
 801271e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012720:	7dfb      	ldrb	r3, [r7, #23]
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	4413      	add	r3, r2
 8012726:	2200      	movs	r2, #0
 8012728:	701a      	strb	r2, [r3, #0]
    idx++;
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	3301      	adds	r3, #1
 801272e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1e7      	bne.n	8012708 <USBD_GetString+0x52>
 8012738:	e000      	b.n	801273c <USBD_GetString+0x86>
    return;
 801273a:	bf00      	nop
  }
}
 801273c:	3718      	adds	r7, #24
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}

08012742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012742:	b480      	push	{r7}
 8012744:	b085      	sub	sp, #20
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801274a:	2300      	movs	r3, #0
 801274c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012752:	e005      	b.n	8012760 <USBD_GetLen+0x1e>
  {
    len++;
 8012754:	7bfb      	ldrb	r3, [r7, #15]
 8012756:	3301      	adds	r3, #1
 8012758:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	3301      	adds	r3, #1
 801275e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d1f5      	bne.n	8012754 <USBD_GetLen+0x12>
  }

  return len;
 8012768:	7bfb      	ldrb	r3, [r7, #15]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3714      	adds	r7, #20
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr

08012776 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b084      	sub	sp, #16
 801277a:	af00      	add	r7, sp, #0
 801277c:	60f8      	str	r0, [r7, #12]
 801277e:	60b9      	str	r1, [r7, #8]
 8012780:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2202      	movs	r2, #2
 8012786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	2100      	movs	r1, #0
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f000 fcd5 	bl	801314c <USBD_LL_Transmit>

  return USBD_OK;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	68ba      	ldr	r2, [r7, #8]
 80127bc:	2100      	movs	r1, #0
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f000 fcc4 	bl	801314c <USBD_LL_Transmit>

  return USBD_OK;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3710      	adds	r7, #16
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b084      	sub	sp, #16
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	60f8      	str	r0, [r7, #12]
 80127d6:	60b9      	str	r1, [r7, #8]
 80127d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2203      	movs	r2, #3
 80127de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	2100      	movs	r1, #0
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f000 fcc8 	bl	801318e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127fe:	2300      	movs	r3, #0
}
 8012800:	4618      	mov	r0, r3
 8012802:	3710      	adds	r7, #16
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	2100      	movs	r1, #0
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f000 fcb7 	bl	801318e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012820:	2300      	movs	r3, #0
}
 8012822:	4618      	mov	r0, r3
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2204      	movs	r2, #4
 8012836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801283a:	2300      	movs	r3, #0
 801283c:	2200      	movs	r2, #0
 801283e:	2100      	movs	r1, #0
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f000 fc83 	bl	801314c <USBD_LL_Transmit>

  return USBD_OK;
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2205      	movs	r2, #5
 801285c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012860:	2300      	movs	r3, #0
 8012862:	2200      	movs	r2, #0
 8012864:	2100      	movs	r1, #0
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 fc91 	bl	801318e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801286c:	2300      	movs	r3, #0
}
 801286e:	4618      	mov	r0, r3
 8012870:	3708      	adds	r7, #8
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
	...

08012878 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801287c:	2200      	movs	r2, #0
 801287e:	4912      	ldr	r1, [pc, #72]	; (80128c8 <MX_USB_Device_Init+0x50>)
 8012880:	4812      	ldr	r0, [pc, #72]	; (80128cc <MX_USB_Device_Init+0x54>)
 8012882:	f7fe fed9 	bl	8011638 <USBD_Init>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d001      	beq.n	8012890 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801288c:	f7f2 fab6 	bl	8004dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012890:	490f      	ldr	r1, [pc, #60]	; (80128d0 <MX_USB_Device_Init+0x58>)
 8012892:	480e      	ldr	r0, [pc, #56]	; (80128cc <MX_USB_Device_Init+0x54>)
 8012894:	f7fe ff00 	bl	8011698 <USBD_RegisterClass>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801289e:	f7f2 faad 	bl	8004dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80128a2:	490c      	ldr	r1, [pc, #48]	; (80128d4 <MX_USB_Device_Init+0x5c>)
 80128a4:	4809      	ldr	r0, [pc, #36]	; (80128cc <MX_USB_Device_Init+0x54>)
 80128a6:	f7fe fe21 	bl	80114ec <USBD_CDC_RegisterInterface>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80128b0:	f7f2 faa4 	bl	8004dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80128b4:	4805      	ldr	r0, [pc, #20]	; (80128cc <MX_USB_Device_Init+0x54>)
 80128b6:	f7fe ff16 	bl	80116e6 <USBD_Start>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d001      	beq.n	80128c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80128c0:	f7f2 fa9c 	bl	8004dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80128c4:	bf00      	nop
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20000130 	.word	0x20000130
 80128cc:	20000a58 	.word	0x20000a58
 80128d0:	20000018 	.word	0x20000018
 80128d4:	2000011c 	.word	0x2000011c

080128d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80128dc:	2200      	movs	r2, #0
 80128de:	4905      	ldr	r1, [pc, #20]	; (80128f4 <CDC_Init_FS+0x1c>)
 80128e0:	4805      	ldr	r0, [pc, #20]	; (80128f8 <CDC_Init_FS+0x20>)
 80128e2:	f7fe fe18 	bl	8011516 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80128e6:	4905      	ldr	r1, [pc, #20]	; (80128fc <CDC_Init_FS+0x24>)
 80128e8:	4803      	ldr	r0, [pc, #12]	; (80128f8 <CDC_Init_FS+0x20>)
 80128ea:	f7fe fe32 	bl	8011552 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80128ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	20001568 	.word	0x20001568
 80128f8:	20000a58 	.word	0x20000a58
 80128fc:	20000d68 	.word	0x20000d68

08012900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012900:	b480      	push	{r7}
 8012902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8012904:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012906:	4618      	mov	r0, r3
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	6039      	str	r1, [r7, #0]
 801291a:	71fb      	strb	r3, [r7, #7]
 801291c:	4613      	mov	r3, r2
 801291e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8012920:	79fb      	ldrb	r3, [r7, #7]
 8012922:	2b23      	cmp	r3, #35	; 0x23
 8012924:	d85a      	bhi.n	80129dc <CDC_Control_FS+0xcc>
 8012926:	a201      	add	r2, pc, #4	; (adr r2, 801292c <CDC_Control_FS+0x1c>)
 8012928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801292c:	080129dd 	.word	0x080129dd
 8012930:	080129dd 	.word	0x080129dd
 8012934:	080129dd 	.word	0x080129dd
 8012938:	080129dd 	.word	0x080129dd
 801293c:	080129dd 	.word	0x080129dd
 8012940:	080129dd 	.word	0x080129dd
 8012944:	080129dd 	.word	0x080129dd
 8012948:	080129dd 	.word	0x080129dd
 801294c:	080129dd 	.word	0x080129dd
 8012950:	080129dd 	.word	0x080129dd
 8012954:	080129dd 	.word	0x080129dd
 8012958:	080129dd 	.word	0x080129dd
 801295c:	080129dd 	.word	0x080129dd
 8012960:	080129dd 	.word	0x080129dd
 8012964:	080129dd 	.word	0x080129dd
 8012968:	080129dd 	.word	0x080129dd
 801296c:	080129dd 	.word	0x080129dd
 8012970:	080129dd 	.word	0x080129dd
 8012974:	080129dd 	.word	0x080129dd
 8012978:	080129dd 	.word	0x080129dd
 801297c:	080129dd 	.word	0x080129dd
 8012980:	080129dd 	.word	0x080129dd
 8012984:	080129dd 	.word	0x080129dd
 8012988:	080129dd 	.word	0x080129dd
 801298c:	080129dd 	.word	0x080129dd
 8012990:	080129dd 	.word	0x080129dd
 8012994:	080129dd 	.word	0x080129dd
 8012998:	080129dd 	.word	0x080129dd
 801299c:	080129dd 	.word	0x080129dd
 80129a0:	080129dd 	.word	0x080129dd
 80129a4:	080129dd 	.word	0x080129dd
 80129a8:	080129dd 	.word	0x080129dd
 80129ac:	080129dd 	.word	0x080129dd
 80129b0:	080129dd 	.word	0x080129dd
 80129b4:	080129bd 	.word	0x080129bd
 80129b8:	080129dd 	.word	0x080129dd

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	885b      	ldrh	r3, [r3, #2]
 80129c4:	f003 0301 	and.w	r3, r3, #1
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 80129cc:	4b07      	ldr	r3, [pc, #28]	; (80129ec <CDC_Control_FS+0xdc>)
 80129ce:	2201      	movs	r2, #1
 80129d0:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 80129d2:	e004      	b.n	80129de <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 80129d4:	4b05      	ldr	r3, [pc, #20]	; (80129ec <CDC_Control_FS+0xdc>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	701a      	strb	r2, [r3, #0]
		break;
 80129da:	e000      	b.n	80129de <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80129dc:	bf00      	nop
	}

	return (USBD_OK);
 80129de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3714      	adds	r7, #20
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	20001d68 	.word	0x20001d68

080129f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80129fa:	6879      	ldr	r1, [r7, #4]
 80129fc:	480f      	ldr	r0, [pc, #60]	; (8012a3c <CDC_Receive_FS+0x4c>)
 80129fe:	f7fe fda8 	bl	8011552 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012a02:	480e      	ldr	r0, [pc, #56]	; (8012a3c <CDC_Receive_FS+0x4c>)
 8012a04:	f7fe fdee 	bl	80115e4 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8012a08:	2240      	movs	r2, #64	; 0x40
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	480c      	ldr	r0, [pc, #48]	; (8012a40 <CDC_Receive_FS+0x50>)
 8012a0e:	f000 fcf3 	bl	80133f8 <memset>
	uint8_t len = (uint8_t) *Len;
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	6879      	ldr	r1, [r7, #4]
 8012a1e:	4808      	ldr	r0, [pc, #32]	; (8012a40 <CDC_Receive_FS+0x50>)
 8012a20:	f000 fcdc 	bl	80133dc <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8012a24:	7bfb      	ldrb	r3, [r7, #15]
 8012a26:	461a      	mov	r2, r3
 8012a28:	2100      	movs	r1, #0
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 fce4 	bl	80133f8 <memset>

	return (USBD_OK);
 8012a30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20000a58 	.word	0x20000a58
 8012a40:	20000d28 	.word	0x20000d28

08012a44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012a50:	2300      	movs	r3, #0
 8012a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8012a54:	4b12      	ldr	r3, [pc, #72]	; (8012aa0 <CDC_Transmit_FS+0x5c>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d01b      	beq.n	8012a94 <CDC_Transmit_FS+0x50>
 8012a5c:	4b11      	ldr	r3, [pc, #68]	; (8012aa4 <CDC_Transmit_FS+0x60>)
 8012a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b03      	cmp	r3, #3
 8012a66:	d115      	bne.n	8012a94 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8012a68:	4b0e      	ldr	r3, [pc, #56]	; (8012aa4 <CDC_Transmit_FS+0x60>)
 8012a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a6e:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d001      	beq.n	8012a7e <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e00b      	b.n	8012a96 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012a7e:	887b      	ldrh	r3, [r7, #2]
 8012a80:	461a      	mov	r2, r3
 8012a82:	6879      	ldr	r1, [r7, #4]
 8012a84:	4807      	ldr	r0, [pc, #28]	; (8012aa4 <CDC_Transmit_FS+0x60>)
 8012a86:	f7fe fd46 	bl	8011516 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012a8a:	4806      	ldr	r0, [pc, #24]	; (8012aa4 <CDC_Transmit_FS+0x60>)
 8012a8c:	f7fe fd7a 	bl	8011584 <USBD_CDC_TransmitPacket>
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8012a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20001d68 	.word	0x20001d68
 8012aa4:	20000a58 	.word	0x20000a58

08012aa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b087      	sub	sp, #28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr
	...

08012acc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	6039      	str	r1, [r7, #0]
 8012ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	2212      	movs	r2, #18
 8012adc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012ade:	4b03      	ldr	r3, [pc, #12]	; (8012aec <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr
 8012aec:	20000150 	.word	0x20000150

08012af0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	6039      	str	r1, [r7, #0]
 8012afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	2204      	movs	r2, #4
 8012b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012b02:	4b03      	ldr	r3, [pc, #12]	; (8012b10 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	20000164 	.word	0x20000164

08012b14 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	6039      	str	r1, [r7, #0]
 8012b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012b20:	79fb      	ldrb	r3, [r7, #7]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d105      	bne.n	8012b32 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012b26:	683a      	ldr	r2, [r7, #0]
 8012b28:	4907      	ldr	r1, [pc, #28]	; (8012b48 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012b2a:	4808      	ldr	r0, [pc, #32]	; (8012b4c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012b2c:	f7ff fdc3 	bl	80126b6 <USBD_GetString>
 8012b30:	e004      	b.n	8012b3c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012b32:	683a      	ldr	r2, [r7, #0]
 8012b34:	4904      	ldr	r1, [pc, #16]	; (8012b48 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012b36:	4805      	ldr	r0, [pc, #20]	; (8012b4c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012b38:	f7ff fdbd 	bl	80126b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b3c:	4b02      	ldr	r3, [pc, #8]	; (8012b48 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	20001d6c 	.word	0x20001d6c
 8012b4c:	08016644 	.word	0x08016644

08012b50 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	6039      	str	r1, [r7, #0]
 8012b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	4904      	ldr	r1, [pc, #16]	; (8012b70 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012b60:	4804      	ldr	r0, [pc, #16]	; (8012b74 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012b62:	f7ff fda8 	bl	80126b6 <USBD_GetString>
  return USBD_StrDesc;
 8012b66:	4b02      	ldr	r3, [pc, #8]	; (8012b70 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	20001d6c 	.word	0x20001d6c
 8012b74:	0801665c 	.word	0x0801665c

08012b78 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	6039      	str	r1, [r7, #0]
 8012b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	221a      	movs	r2, #26
 8012b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012b8a:	f000 f843 	bl	8012c14 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012b8e:	4b02      	ldr	r3, [pc, #8]	; (8012b98 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	20000168 	.word	0x20000168

08012b9c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	6039      	str	r1, [r7, #0]
 8012ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012ba8:	79fb      	ldrb	r3, [r7, #7]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d105      	bne.n	8012bba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	4907      	ldr	r1, [pc, #28]	; (8012bd0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012bb2:	4808      	ldr	r0, [pc, #32]	; (8012bd4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012bb4:	f7ff fd7f 	bl	80126b6 <USBD_GetString>
 8012bb8:	e004      	b.n	8012bc4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012bba:	683a      	ldr	r2, [r7, #0]
 8012bbc:	4904      	ldr	r1, [pc, #16]	; (8012bd0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012bbe:	4805      	ldr	r0, [pc, #20]	; (8012bd4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012bc0:	f7ff fd79 	bl	80126b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bc4:	4b02      	ldr	r3, [pc, #8]	; (8012bd0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3708      	adds	r7, #8
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	20001d6c 	.word	0x20001d6c
 8012bd4:	08016670 	.word	0x08016670

08012bd8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	4603      	mov	r3, r0
 8012be0:	6039      	str	r1, [r7, #0]
 8012be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012be4:	79fb      	ldrb	r3, [r7, #7]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d105      	bne.n	8012bf6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012bea:	683a      	ldr	r2, [r7, #0]
 8012bec:	4907      	ldr	r1, [pc, #28]	; (8012c0c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012bee:	4808      	ldr	r0, [pc, #32]	; (8012c10 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012bf0:	f7ff fd61 	bl	80126b6 <USBD_GetString>
 8012bf4:	e004      	b.n	8012c00 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	4904      	ldr	r1, [pc, #16]	; (8012c0c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012bfa:	4805      	ldr	r0, [pc, #20]	; (8012c10 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012bfc:	f7ff fd5b 	bl	80126b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c00:	4b02      	ldr	r3, [pc, #8]	; (8012c0c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	20001d6c 	.word	0x20001d6c
 8012c10:	0801667c 	.word	0x0801667c

08012c14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012c1a:	4b0f      	ldr	r3, [pc, #60]	; (8012c58 <Get_SerialNum+0x44>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012c20:	4b0e      	ldr	r3, [pc, #56]	; (8012c5c <Get_SerialNum+0x48>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012c26:	4b0e      	ldr	r3, [pc, #56]	; (8012c60 <Get_SerialNum+0x4c>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4413      	add	r3, r2
 8012c32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d009      	beq.n	8012c4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012c3a:	2208      	movs	r2, #8
 8012c3c:	4909      	ldr	r1, [pc, #36]	; (8012c64 <Get_SerialNum+0x50>)
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f000 f814 	bl	8012c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012c44:	2204      	movs	r2, #4
 8012c46:	4908      	ldr	r1, [pc, #32]	; (8012c68 <Get_SerialNum+0x54>)
 8012c48:	68b8      	ldr	r0, [r7, #8]
 8012c4a:	f000 f80f 	bl	8012c6c <IntToUnicode>
  }
}
 8012c4e:	bf00      	nop
 8012c50:	3710      	adds	r7, #16
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	1fff7590 	.word	0x1fff7590
 8012c5c:	1fff7594 	.word	0x1fff7594
 8012c60:	1fff7598 	.word	0x1fff7598
 8012c64:	2000016a 	.word	0x2000016a
 8012c68:	2000017a 	.word	0x2000017a

08012c6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b087      	sub	sp, #28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	4613      	mov	r3, r2
 8012c78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012c7e:	2300      	movs	r3, #0
 8012c80:	75fb      	strb	r3, [r7, #23]
 8012c82:	e027      	b.n	8012cd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	0f1b      	lsrs	r3, r3, #28
 8012c88:	2b09      	cmp	r3, #9
 8012c8a:	d80b      	bhi.n	8012ca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	0f1b      	lsrs	r3, r3, #28
 8012c90:	b2da      	uxtb	r2, r3
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	4619      	mov	r1, r3
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	440b      	add	r3, r1
 8012c9c:	3230      	adds	r2, #48	; 0x30
 8012c9e:	b2d2      	uxtb	r2, r2
 8012ca0:	701a      	strb	r2, [r3, #0]
 8012ca2:	e00a      	b.n	8012cba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	0f1b      	lsrs	r3, r3, #28
 8012ca8:	b2da      	uxtb	r2, r3
 8012caa:	7dfb      	ldrb	r3, [r7, #23]
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	4619      	mov	r1, r3
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	440b      	add	r3, r1
 8012cb4:	3237      	adds	r2, #55	; 0x37
 8012cb6:	b2d2      	uxtb	r2, r2
 8012cb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	011b      	lsls	r3, r3, #4
 8012cbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012cc0:	7dfb      	ldrb	r3, [r7, #23]
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	68ba      	ldr	r2, [r7, #8]
 8012cc8:	4413      	add	r3, r2
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012cce:	7dfb      	ldrb	r3, [r7, #23]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	75fb      	strb	r3, [r7, #23]
 8012cd4:	7dfa      	ldrb	r2, [r7, #23]
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d3d3      	bcc.n	8012c84 <IntToUnicode+0x18>
  }
}
 8012cdc:	bf00      	nop
 8012cde:	bf00      	nop
 8012ce0:	371c      	adds	r7, #28
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr
	...

08012cec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b098      	sub	sp, #96	; 0x60
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012cf4:	f107 030c 	add.w	r3, r7, #12
 8012cf8:	2254      	movs	r2, #84	; 0x54
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f000 fb7b 	bl	80133f8 <memset>
  if(pcdHandle->Instance==USB)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4a15      	ldr	r2, [pc, #84]	; (8012d5c <HAL_PCD_MspInit+0x70>)
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d122      	bne.n	8012d52 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012d12:	2300      	movs	r3, #0
 8012d14:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012d16:	f107 030c 	add.w	r3, r7, #12
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7f8 fcb8 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8012d26:	f7f2 f869 	bl	8004dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012d2a:	4b0d      	ldr	r3, [pc, #52]	; (8012d60 <HAL_PCD_MspInit+0x74>)
 8012d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d2e:	4a0c      	ldr	r2, [pc, #48]	; (8012d60 <HAL_PCD_MspInit+0x74>)
 8012d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012d34:	6593      	str	r3, [r2, #88]	; 0x58
 8012d36:	4b0a      	ldr	r3, [pc, #40]	; (8012d60 <HAL_PCD_MspInit+0x74>)
 8012d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d3e:	60bb      	str	r3, [r7, #8]
 8012d40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012d42:	2200      	movs	r2, #0
 8012d44:	2100      	movs	r1, #0
 8012d46:	2014      	movs	r0, #20
 8012d48:	f7f5 f88b 	bl	8007e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012d4c:	2014      	movs	r0, #20
 8012d4e:	f7f5 f8a2 	bl	8007e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012d52:	bf00      	nop
 8012d54:	3760      	adds	r7, #96	; 0x60
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	40005c00 	.word	0x40005c00
 8012d60:	40021000 	.word	0x40021000

08012d64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012d78:	4619      	mov	r1, r3
 8012d7a:	4610      	mov	r0, r2
 8012d7c:	f7fe fcfe 	bl	801177c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012d80:	bf00      	nop
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012d9a:	78fa      	ldrb	r2, [r7, #3]
 8012d9c:	6879      	ldr	r1, [r7, #4]
 8012d9e:	4613      	mov	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	4413      	add	r3, r2
 8012da4:	00db      	lsls	r3, r3, #3
 8012da6:	440b      	add	r3, r1
 8012da8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	78fb      	ldrb	r3, [r7, #3]
 8012db0:	4619      	mov	r1, r3
 8012db2:	f7fe fd38 	bl	8011826 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012db6:	bf00      	nop
 8012db8:	3708      	adds	r7, #8
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b082      	sub	sp, #8
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012dd0:	78fa      	ldrb	r2, [r7, #3]
 8012dd2:	6879      	ldr	r1, [r7, #4]
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	4413      	add	r3, r2
 8012dda:	00db      	lsls	r3, r3, #3
 8012ddc:	440b      	add	r3, r1
 8012dde:	333c      	adds	r3, #60	; 0x3c
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	78fb      	ldrb	r3, [r7, #3]
 8012de4:	4619      	mov	r1, r3
 8012de6:	f7fe fd81 	bl	80118ec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012dea:	bf00      	nop
 8012dec:	3708      	adds	r7, #8
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b082      	sub	sp, #8
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fe fe95 	bl	8011b30 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012e06:	bf00      	nop
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012e16:	2301      	movs	r3, #1
 8012e18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	2b02      	cmp	r3, #2
 8012e20:	d001      	beq.n	8012e26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012e22:	f7f1 ffeb 	bl	8004dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012e2c:	7bfa      	ldrb	r2, [r7, #15]
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe fe3f 	bl	8011ab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fe fdeb 	bl	8011a18 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012e42:	bf00      	nop
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
	...

08012e4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe fe3a 	bl	8011ad4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	699b      	ldr	r3, [r3, #24]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d005      	beq.n	8012e74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e68:	4b04      	ldr	r3, [pc, #16]	; (8012e7c <HAL_PCD_SuspendCallback+0x30>)
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	4a03      	ldr	r2, [pc, #12]	; (8012e7c <HAL_PCD_SuspendCallback+0x30>)
 8012e6e:	f043 0306 	orr.w	r3, r3, #6
 8012e72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	e000ed00 	.word	0xe000ed00

08012e80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	699b      	ldr	r3, [r3, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d007      	beq.n	8012ea0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e90:	4b08      	ldr	r3, [pc, #32]	; (8012eb4 <HAL_PCD_ResumeCallback+0x34>)
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	4a07      	ldr	r2, [pc, #28]	; (8012eb4 <HAL_PCD_ResumeCallback+0x34>)
 8012e96:	f023 0306 	bic.w	r3, r3, #6
 8012e9a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012e9c:	f000 f9fa 	bl	8013294 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fe2a 	bl	8011b00 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012eac:	bf00      	nop
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	e000ed00 	.word	0xe000ed00

08012eb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012ec0:	4a2b      	ldr	r2, [pc, #172]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	4a29      	ldr	r2, [pc, #164]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ecc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012ed0:	4b27      	ldr	r3, [pc, #156]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ed2:	4a28      	ldr	r2, [pc, #160]	; (8012f74 <USBD_LL_Init+0xbc>)
 8012ed4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012ed6:	4b26      	ldr	r3, [pc, #152]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ed8:	2208      	movs	r2, #8
 8012eda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012edc:	4b24      	ldr	r3, [pc, #144]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ede:	2202      	movs	r2, #2
 8012ee0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012ee2:	4b23      	ldr	r3, [pc, #140]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ee4:	2202      	movs	r2, #2
 8012ee6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012ee8:	4b21      	ldr	r3, [pc, #132]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012eee:	4b20      	ldr	r3, [pc, #128]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012ef4:	4b1e      	ldr	r3, [pc, #120]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012efa:	4b1d      	ldr	r3, [pc, #116]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012efc:	2200      	movs	r2, #0
 8012efe:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012f00:	481b      	ldr	r0, [pc, #108]	; (8012f70 <USBD_LL_Init+0xb8>)
 8012f02:	f7f6 f8b9 	bl	8009078 <HAL_PCD_Init>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8012f0c:	f7f1 ff76 	bl	8004dfc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012f16:	2318      	movs	r3, #24
 8012f18:	2200      	movs	r2, #0
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	f7f7 fd72 	bl	800aa04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012f26:	2358      	movs	r3, #88	; 0x58
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2180      	movs	r1, #128	; 0x80
 8012f2c:	f7f7 fd6a 	bl	800aa04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012f36:	23c0      	movs	r3, #192	; 0xc0
 8012f38:	2200      	movs	r2, #0
 8012f3a:	2181      	movs	r1, #129	; 0x81
 8012f3c:	f7f7 fd62 	bl	800aa04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012f46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	2101      	movs	r1, #1
 8012f4e:	f7f7 fd59 	bl	800aa04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2182      	movs	r1, #130	; 0x82
 8012f60:	f7f7 fd50 	bl	800aa04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20001f6c 	.word	0x20001f6c
 8012f74:	40005c00 	.word	0x40005c00

08012f78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f80:	2300      	movs	r3, #0
 8012f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f84:	2300      	movs	r3, #0
 8012f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7f6 f957 	bl	8009242 <HAL_PCD_Start>
 8012f94:	4603      	mov	r3, r0
 8012f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f98:	7bfb      	ldrb	r3, [r7, #15]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f000 f9c8 	bl	8013330 <USBD_Get_USB_Status>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b084      	sub	sp, #16
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	4608      	mov	r0, r1
 8012fb8:	4611      	mov	r1, r2
 8012fba:	461a      	mov	r2, r3
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	70fb      	strb	r3, [r7, #3]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70bb      	strb	r3, [r7, #2]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012fd6:	78bb      	ldrb	r3, [r7, #2]
 8012fd8:	883a      	ldrh	r2, [r7, #0]
 8012fda:	78f9      	ldrb	r1, [r7, #3]
 8012fdc:	f7f6 fa9f 	bl	800951e <HAL_PCD_EP_Open>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f000 f9a2 	bl	8013330 <USBD_Get_USB_Status>
 8012fec:	4603      	mov	r3, r0
 8012fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b084      	sub	sp, #16
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	460b      	mov	r3, r1
 8013004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013006:	2300      	movs	r3, #0
 8013008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801300a:	2300      	movs	r3, #0
 801300c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013014:	78fa      	ldrb	r2, [r7, #3]
 8013016:	4611      	mov	r1, r2
 8013018:	4618      	mov	r0, r3
 801301a:	f7f6 fae6 	bl	80095ea <HAL_PCD_EP_Close>
 801301e:	4603      	mov	r3, r0
 8013020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013022:	7bfb      	ldrb	r3, [r7, #15]
 8013024:	4618      	mov	r0, r3
 8013026:	f000 f983 	bl	8013330 <USBD_Get_USB_Status>
 801302a:	4603      	mov	r3, r0
 801302c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801302e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	460b      	mov	r3, r1
 8013042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013044:	2300      	movs	r3, #0
 8013046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013048:	2300      	movs	r3, #0
 801304a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013052:	78fa      	ldrb	r2, [r7, #3]
 8013054:	4611      	mov	r1, r2
 8013056:	4618      	mov	r0, r3
 8013058:	f7f6 fba7 	bl	80097aa <HAL_PCD_EP_SetStall>
 801305c:	4603      	mov	r3, r0
 801305e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013060:	7bfb      	ldrb	r3, [r7, #15]
 8013062:	4618      	mov	r0, r3
 8013064:	f000 f964 	bl	8013330 <USBD_Get_USB_Status>
 8013068:	4603      	mov	r3, r0
 801306a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801306c:	7bbb      	ldrb	r3, [r7, #14]
}
 801306e:	4618      	mov	r0, r3
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013076:	b580      	push	{r7, lr}
 8013078:	b084      	sub	sp, #16
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
 801307e:	460b      	mov	r3, r1
 8013080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013082:	2300      	movs	r3, #0
 8013084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013086:	2300      	movs	r3, #0
 8013088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013090:	78fa      	ldrb	r2, [r7, #3]
 8013092:	4611      	mov	r1, r2
 8013094:	4618      	mov	r0, r3
 8013096:	f7f6 fbda 	bl	800984e <HAL_PCD_EP_ClrStall>
 801309a:	4603      	mov	r3, r0
 801309c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801309e:	7bfb      	ldrb	r3, [r7, #15]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f000 f945 	bl	8013330 <USBD_Get_USB_Status>
 80130a6:	4603      	mov	r3, r0
 80130a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	460b      	mov	r3, r1
 80130be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80130c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80130c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	da0c      	bge.n	80130ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80130d0:	78fb      	ldrb	r3, [r7, #3]
 80130d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130d6:	68f9      	ldr	r1, [r7, #12]
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	4613      	mov	r3, r2
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	4413      	add	r3, r2
 80130e0:	00db      	lsls	r3, r3, #3
 80130e2:	440b      	add	r3, r1
 80130e4:	3302      	adds	r3, #2
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	e00b      	b.n	8013102 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80130ea:	78fb      	ldrb	r3, [r7, #3]
 80130ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80130f0:	68f9      	ldr	r1, [r7, #12]
 80130f2:	4613      	mov	r3, r2
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	4413      	add	r3, r2
 80130f8:	00db      	lsls	r3, r3, #3
 80130fa:	440b      	add	r3, r1
 80130fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013100:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013102:	4618      	mov	r0, r3
 8013104:	3714      	adds	r7, #20
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr

0801310e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b084      	sub	sp, #16
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
 8013116:	460b      	mov	r3, r1
 8013118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801311a:	2300      	movs	r3, #0
 801311c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801311e:	2300      	movs	r3, #0
 8013120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013128:	78fa      	ldrb	r2, [r7, #3]
 801312a:	4611      	mov	r1, r2
 801312c:	4618      	mov	r0, r3
 801312e:	f7f6 f9d1 	bl	80094d4 <HAL_PCD_SetAddress>
 8013132:	4603      	mov	r3, r0
 8013134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013136:	7bfb      	ldrb	r3, [r7, #15]
 8013138:	4618      	mov	r0, r3
 801313a:	f000 f8f9 	bl	8013330 <USBD_Get_USB_Status>
 801313e:	4603      	mov	r3, r0
 8013140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013142:	7bbb      	ldrb	r3, [r7, #14]
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	607a      	str	r2, [r7, #4]
 8013156:	603b      	str	r3, [r7, #0]
 8013158:	460b      	mov	r3, r1
 801315a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801315c:	2300      	movs	r3, #0
 801315e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013160:	2300      	movs	r3, #0
 8013162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801316a:	7af9      	ldrb	r1, [r7, #11]
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	f7f6 fad8 	bl	8009724 <HAL_PCD_EP_Transmit>
 8013174:	4603      	mov	r3, r0
 8013176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013178:	7dfb      	ldrb	r3, [r7, #23]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 f8d8 	bl	8013330 <USBD_Get_USB_Status>
 8013180:	4603      	mov	r3, r0
 8013182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013184:	7dbb      	ldrb	r3, [r7, #22]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3718      	adds	r7, #24
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b086      	sub	sp, #24
 8013192:	af00      	add	r7, sp, #0
 8013194:	60f8      	str	r0, [r7, #12]
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
 801319a:	460b      	mov	r3, r1
 801319c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131a2:	2300      	movs	r3, #0
 80131a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80131ac:	7af9      	ldrb	r1, [r7, #11]
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	f7f6 fa62 	bl	800967a <HAL_PCD_EP_Receive>
 80131b6:	4603      	mov	r3, r0
 80131b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131ba:	7dfb      	ldrb	r3, [r7, #23]
 80131bc:	4618      	mov	r0, r3
 80131be:	f000 f8b7 	bl	8013330 <USBD_Get_USB_Status>
 80131c2:	4603      	mov	r3, r0
 80131c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80131c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3718      	adds	r7, #24
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	460b      	mov	r3, r1
 80131da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131e2:	78fa      	ldrb	r2, [r7, #3]
 80131e4:	4611      	mov	r1, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7f6 fa84 	bl	80096f4 <HAL_PCD_EP_GetRxCount>
 80131ec:	4603      	mov	r3, r0
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
	...

080131f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d002      	beq.n	8013210 <HAL_PCDEx_LPM_Callback+0x18>
 801320a:	2b01      	cmp	r3, #1
 801320c:	d013      	beq.n	8013236 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801320e:	e023      	b.n	8013258 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d007      	beq.n	8013228 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013218:	f000 f83c 	bl	8013294 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801321c:	4b10      	ldr	r3, [pc, #64]	; (8013260 <HAL_PCDEx_LPM_Callback+0x68>)
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	4a0f      	ldr	r2, [pc, #60]	; (8013260 <HAL_PCDEx_LPM_Callback+0x68>)
 8013222:	f023 0306 	bic.w	r3, r3, #6
 8013226:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801322e:	4618      	mov	r0, r3
 8013230:	f7fe fc66 	bl	8011b00 <USBD_LL_Resume>
    break;
 8013234:	e010      	b.n	8013258 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801323c:	4618      	mov	r0, r3
 801323e:	f7fe fc49 	bl	8011ad4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	699b      	ldr	r3, [r3, #24]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d005      	beq.n	8013256 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801324a:	4b05      	ldr	r3, [pc, #20]	; (8013260 <HAL_PCDEx_LPM_Callback+0x68>)
 801324c:	691b      	ldr	r3, [r3, #16]
 801324e:	4a04      	ldr	r2, [pc, #16]	; (8013260 <HAL_PCDEx_LPM_Callback+0x68>)
 8013250:	f043 0306 	orr.w	r3, r3, #6
 8013254:	6113      	str	r3, [r2, #16]
    break;
 8013256:	bf00      	nop
}
 8013258:	bf00      	nop
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	e000ed00 	.word	0xe000ed00

08013264 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801326c:	4b03      	ldr	r3, [pc, #12]	; (801327c <USBD_static_malloc+0x18>)
}
 801326e:	4618      	mov	r0, r3
 8013270:	370c      	adds	r7, #12
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	20002260 	.word	0x20002260

08013280 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]

}
 8013288:	bf00      	nop
 801328a:	370c      	adds	r7, #12
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b094      	sub	sp, #80	; 0x50
 8013298:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801329a:	f107 0318 	add.w	r3, r7, #24
 801329e:	2238      	movs	r2, #56	; 0x38
 80132a0:	2100      	movs	r1, #0
 80132a2:	4618      	mov	r0, r3
 80132a4:	f000 f8a8 	bl	80133f8 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80132a8:	1d3b      	adds	r3, r7, #4
 80132aa:	2200      	movs	r2, #0
 80132ac:	601a      	str	r2, [r3, #0]
 80132ae:	605a      	str	r2, [r3, #4]
 80132b0:	609a      	str	r2, [r3, #8]
 80132b2:	60da      	str	r2, [r3, #12]
 80132b4:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80132b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80132ba:	f7f7 fc11 	bl	800aae0 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80132be:	2322      	movs	r3, #34	; 0x22
 80132c0:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80132c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132c6:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80132c8:	2340      	movs	r3, #64	; 0x40
 80132ca:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80132cc:	2301      	movs	r3, #1
 80132ce:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80132d0:	2302      	movs	r3, #2
 80132d2:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80132d4:	2302      	movs	r3, #2
 80132d6:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80132d8:	2301      	movs	r3, #1
 80132da:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 80132dc:	2310      	movs	r3, #16
 80132de:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80132e0:	2302      	movs	r3, #2
 80132e2:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80132e4:	2302      	movs	r3, #2
 80132e6:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80132e8:	2302      	movs	r3, #2
 80132ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80132ec:	f107 0318 	add.w	r3, r7, #24
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7f7 fc99 	bl	800ac28 <HAL_RCC_OscConfig>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d001      	beq.n	8013300 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 80132fc:	f7f1 fd7e 	bl	8004dfc <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013300:	230f      	movs	r3, #15
 8013302:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013304:	2303      	movs	r3, #3
 8013306:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013308:	2300      	movs	r3, #0
 801330a:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801330c:	2300      	movs	r3, #0
 801330e:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013310:	2300      	movs	r3, #0
 8013312:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8013314:	1d3b      	adds	r3, r7, #4
 8013316:	2103      	movs	r1, #3
 8013318:	4618      	mov	r0, r3
 801331a:	f7f7 ff9d 	bl	800b258 <HAL_RCC_ClockConfig>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8013324:	f7f1 fd6a 	bl	8004dfc <Error_Handler>
		  }

}
 8013328:	bf00      	nop
 801332a:	3750      	adds	r7, #80	; 0x50
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013330:	b480      	push	{r7}
 8013332:	b085      	sub	sp, #20
 8013334:	af00      	add	r7, sp, #0
 8013336:	4603      	mov	r3, r0
 8013338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801333a:	2300      	movs	r3, #0
 801333c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	2b03      	cmp	r3, #3
 8013342:	d817      	bhi.n	8013374 <USBD_Get_USB_Status+0x44>
 8013344:	a201      	add	r2, pc, #4	; (adr r2, 801334c <USBD_Get_USB_Status+0x1c>)
 8013346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334a:	bf00      	nop
 801334c:	0801335d 	.word	0x0801335d
 8013350:	08013363 	.word	0x08013363
 8013354:	08013369 	.word	0x08013369
 8013358:	0801336f 	.word	0x0801336f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801335c:	2300      	movs	r3, #0
 801335e:	73fb      	strb	r3, [r7, #15]
    break;
 8013360:	e00b      	b.n	801337a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013362:	2303      	movs	r3, #3
 8013364:	73fb      	strb	r3, [r7, #15]
    break;
 8013366:	e008      	b.n	801337a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013368:	2301      	movs	r3, #1
 801336a:	73fb      	strb	r3, [r7, #15]
    break;
 801336c:	e005      	b.n	801337a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801336e:	2303      	movs	r3, #3
 8013370:	73fb      	strb	r3, [r7, #15]
    break;
 8013372:	e002      	b.n	801337a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013374:	2303      	movs	r3, #3
 8013376:	73fb      	strb	r3, [r7, #15]
    break;
 8013378:	bf00      	nop
  }
  return usb_status;
 801337a:	7bfb      	ldrb	r3, [r7, #15]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3714      	adds	r7, #20
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <__errno>:
 8013388:	4b01      	ldr	r3, [pc, #4]	; (8013390 <__errno+0x8>)
 801338a:	6818      	ldr	r0, [r3, #0]
 801338c:	4770      	bx	lr
 801338e:	bf00      	nop
 8013390:	20000184 	.word	0x20000184

08013394 <__libc_init_array>:
 8013394:	b570      	push	{r4, r5, r6, lr}
 8013396:	4d0d      	ldr	r5, [pc, #52]	; (80133cc <__libc_init_array+0x38>)
 8013398:	4c0d      	ldr	r4, [pc, #52]	; (80133d0 <__libc_init_array+0x3c>)
 801339a:	1b64      	subs	r4, r4, r5
 801339c:	10a4      	asrs	r4, r4, #2
 801339e:	2600      	movs	r6, #0
 80133a0:	42a6      	cmp	r6, r4
 80133a2:	d109      	bne.n	80133b8 <__libc_init_array+0x24>
 80133a4:	4d0b      	ldr	r5, [pc, #44]	; (80133d4 <__libc_init_array+0x40>)
 80133a6:	4c0c      	ldr	r4, [pc, #48]	; (80133d8 <__libc_init_array+0x44>)
 80133a8:	f002 fdc2 	bl	8015f30 <_init>
 80133ac:	1b64      	subs	r4, r4, r5
 80133ae:	10a4      	asrs	r4, r4, #2
 80133b0:	2600      	movs	r6, #0
 80133b2:	42a6      	cmp	r6, r4
 80133b4:	d105      	bne.n	80133c2 <__libc_init_array+0x2e>
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80133bc:	4798      	blx	r3
 80133be:	3601      	adds	r6, #1
 80133c0:	e7ee      	b.n	80133a0 <__libc_init_array+0xc>
 80133c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80133c6:	4798      	blx	r3
 80133c8:	3601      	adds	r6, #1
 80133ca:	e7f2      	b.n	80133b2 <__libc_init_array+0x1e>
 80133cc:	08016bac 	.word	0x08016bac
 80133d0:	08016bac 	.word	0x08016bac
 80133d4:	08016bac 	.word	0x08016bac
 80133d8:	08016bb0 	.word	0x08016bb0

080133dc <memcpy>:
 80133dc:	440a      	add	r2, r1
 80133de:	4291      	cmp	r1, r2
 80133e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80133e4:	d100      	bne.n	80133e8 <memcpy+0xc>
 80133e6:	4770      	bx	lr
 80133e8:	b510      	push	{r4, lr}
 80133ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133f2:	4291      	cmp	r1, r2
 80133f4:	d1f9      	bne.n	80133ea <memcpy+0xe>
 80133f6:	bd10      	pop	{r4, pc}

080133f8 <memset>:
 80133f8:	4402      	add	r2, r0
 80133fa:	4603      	mov	r3, r0
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d100      	bne.n	8013402 <memset+0xa>
 8013400:	4770      	bx	lr
 8013402:	f803 1b01 	strb.w	r1, [r3], #1
 8013406:	e7f9      	b.n	80133fc <memset+0x4>

08013408 <__cvt>:
 8013408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801340c:	ec55 4b10 	vmov	r4, r5, d0
 8013410:	2d00      	cmp	r5, #0
 8013412:	460e      	mov	r6, r1
 8013414:	4619      	mov	r1, r3
 8013416:	462b      	mov	r3, r5
 8013418:	bfbb      	ittet	lt
 801341a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801341e:	461d      	movlt	r5, r3
 8013420:	2300      	movge	r3, #0
 8013422:	232d      	movlt	r3, #45	; 0x2d
 8013424:	700b      	strb	r3, [r1, #0]
 8013426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801342c:	4691      	mov	r9, r2
 801342e:	f023 0820 	bic.w	r8, r3, #32
 8013432:	bfbc      	itt	lt
 8013434:	4622      	movlt	r2, r4
 8013436:	4614      	movlt	r4, r2
 8013438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801343c:	d005      	beq.n	801344a <__cvt+0x42>
 801343e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013442:	d100      	bne.n	8013446 <__cvt+0x3e>
 8013444:	3601      	adds	r6, #1
 8013446:	2102      	movs	r1, #2
 8013448:	e000      	b.n	801344c <__cvt+0x44>
 801344a:	2103      	movs	r1, #3
 801344c:	ab03      	add	r3, sp, #12
 801344e:	9301      	str	r3, [sp, #4]
 8013450:	ab02      	add	r3, sp, #8
 8013452:	9300      	str	r3, [sp, #0]
 8013454:	ec45 4b10 	vmov	d0, r4, r5
 8013458:	4653      	mov	r3, sl
 801345a:	4632      	mov	r2, r6
 801345c:	f000 fe18 	bl	8014090 <_dtoa_r>
 8013460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013464:	4607      	mov	r7, r0
 8013466:	d102      	bne.n	801346e <__cvt+0x66>
 8013468:	f019 0f01 	tst.w	r9, #1
 801346c:	d022      	beq.n	80134b4 <__cvt+0xac>
 801346e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013472:	eb07 0906 	add.w	r9, r7, r6
 8013476:	d110      	bne.n	801349a <__cvt+0x92>
 8013478:	783b      	ldrb	r3, [r7, #0]
 801347a:	2b30      	cmp	r3, #48	; 0x30
 801347c:	d10a      	bne.n	8013494 <__cvt+0x8c>
 801347e:	2200      	movs	r2, #0
 8013480:	2300      	movs	r3, #0
 8013482:	4620      	mov	r0, r4
 8013484:	4629      	mov	r1, r5
 8013486:	f7ed fb47 	bl	8000b18 <__aeabi_dcmpeq>
 801348a:	b918      	cbnz	r0, 8013494 <__cvt+0x8c>
 801348c:	f1c6 0601 	rsb	r6, r6, #1
 8013490:	f8ca 6000 	str.w	r6, [sl]
 8013494:	f8da 3000 	ldr.w	r3, [sl]
 8013498:	4499      	add	r9, r3
 801349a:	2200      	movs	r2, #0
 801349c:	2300      	movs	r3, #0
 801349e:	4620      	mov	r0, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	f7ed fb39 	bl	8000b18 <__aeabi_dcmpeq>
 80134a6:	b108      	cbz	r0, 80134ac <__cvt+0xa4>
 80134a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80134ac:	2230      	movs	r2, #48	; 0x30
 80134ae:	9b03      	ldr	r3, [sp, #12]
 80134b0:	454b      	cmp	r3, r9
 80134b2:	d307      	bcc.n	80134c4 <__cvt+0xbc>
 80134b4:	9b03      	ldr	r3, [sp, #12]
 80134b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134b8:	1bdb      	subs	r3, r3, r7
 80134ba:	4638      	mov	r0, r7
 80134bc:	6013      	str	r3, [r2, #0]
 80134be:	b004      	add	sp, #16
 80134c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c4:	1c59      	adds	r1, r3, #1
 80134c6:	9103      	str	r1, [sp, #12]
 80134c8:	701a      	strb	r2, [r3, #0]
 80134ca:	e7f0      	b.n	80134ae <__cvt+0xa6>

080134cc <__exponent>:
 80134cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134ce:	4603      	mov	r3, r0
 80134d0:	2900      	cmp	r1, #0
 80134d2:	bfb8      	it	lt
 80134d4:	4249      	neglt	r1, r1
 80134d6:	f803 2b02 	strb.w	r2, [r3], #2
 80134da:	bfb4      	ite	lt
 80134dc:	222d      	movlt	r2, #45	; 0x2d
 80134de:	222b      	movge	r2, #43	; 0x2b
 80134e0:	2909      	cmp	r1, #9
 80134e2:	7042      	strb	r2, [r0, #1]
 80134e4:	dd2a      	ble.n	801353c <__exponent+0x70>
 80134e6:	f10d 0407 	add.w	r4, sp, #7
 80134ea:	46a4      	mov	ip, r4
 80134ec:	270a      	movs	r7, #10
 80134ee:	46a6      	mov	lr, r4
 80134f0:	460a      	mov	r2, r1
 80134f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80134f6:	fb07 1516 	mls	r5, r7, r6, r1
 80134fa:	3530      	adds	r5, #48	; 0x30
 80134fc:	2a63      	cmp	r2, #99	; 0x63
 80134fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8013502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013506:	4631      	mov	r1, r6
 8013508:	dcf1      	bgt.n	80134ee <__exponent+0x22>
 801350a:	3130      	adds	r1, #48	; 0x30
 801350c:	f1ae 0502 	sub.w	r5, lr, #2
 8013510:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013514:	1c44      	adds	r4, r0, #1
 8013516:	4629      	mov	r1, r5
 8013518:	4561      	cmp	r1, ip
 801351a:	d30a      	bcc.n	8013532 <__exponent+0x66>
 801351c:	f10d 0209 	add.w	r2, sp, #9
 8013520:	eba2 020e 	sub.w	r2, r2, lr
 8013524:	4565      	cmp	r5, ip
 8013526:	bf88      	it	hi
 8013528:	2200      	movhi	r2, #0
 801352a:	4413      	add	r3, r2
 801352c:	1a18      	subs	r0, r3, r0
 801352e:	b003      	add	sp, #12
 8013530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013536:	f804 2f01 	strb.w	r2, [r4, #1]!
 801353a:	e7ed      	b.n	8013518 <__exponent+0x4c>
 801353c:	2330      	movs	r3, #48	; 0x30
 801353e:	3130      	adds	r1, #48	; 0x30
 8013540:	7083      	strb	r3, [r0, #2]
 8013542:	70c1      	strb	r1, [r0, #3]
 8013544:	1d03      	adds	r3, r0, #4
 8013546:	e7f1      	b.n	801352c <__exponent+0x60>

08013548 <_printf_float>:
 8013548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	ed2d 8b02 	vpush	{d8}
 8013550:	b08d      	sub	sp, #52	; 0x34
 8013552:	460c      	mov	r4, r1
 8013554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013558:	4616      	mov	r6, r2
 801355a:	461f      	mov	r7, r3
 801355c:	4605      	mov	r5, r0
 801355e:	f001 fd3d 	bl	8014fdc <_localeconv_r>
 8013562:	f8d0 a000 	ldr.w	sl, [r0]
 8013566:	4650      	mov	r0, sl
 8013568:	f7ec fe5a 	bl	8000220 <strlen>
 801356c:	2300      	movs	r3, #0
 801356e:	930a      	str	r3, [sp, #40]	; 0x28
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	9305      	str	r3, [sp, #20]
 8013574:	f8d8 3000 	ldr.w	r3, [r8]
 8013578:	f894 b018 	ldrb.w	fp, [r4, #24]
 801357c:	3307      	adds	r3, #7
 801357e:	f023 0307 	bic.w	r3, r3, #7
 8013582:	f103 0208 	add.w	r2, r3, #8
 8013586:	f8c8 2000 	str.w	r2, [r8]
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013592:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801359a:	9307      	str	r3, [sp, #28]
 801359c:	f8cd 8018 	str.w	r8, [sp, #24]
 80135a0:	ee08 0a10 	vmov	s16, r0
 80135a4:	4b9f      	ldr	r3, [pc, #636]	; (8013824 <_printf_float+0x2dc>)
 80135a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135aa:	f04f 32ff 	mov.w	r2, #4294967295
 80135ae:	f7ed fae5 	bl	8000b7c <__aeabi_dcmpun>
 80135b2:	bb88      	cbnz	r0, 8013618 <_printf_float+0xd0>
 80135b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135b8:	4b9a      	ldr	r3, [pc, #616]	; (8013824 <_printf_float+0x2dc>)
 80135ba:	f04f 32ff 	mov.w	r2, #4294967295
 80135be:	f7ed fabf 	bl	8000b40 <__aeabi_dcmple>
 80135c2:	bb48      	cbnz	r0, 8013618 <_printf_float+0xd0>
 80135c4:	2200      	movs	r2, #0
 80135c6:	2300      	movs	r3, #0
 80135c8:	4640      	mov	r0, r8
 80135ca:	4649      	mov	r1, r9
 80135cc:	f7ed faae 	bl	8000b2c <__aeabi_dcmplt>
 80135d0:	b110      	cbz	r0, 80135d8 <_printf_float+0x90>
 80135d2:	232d      	movs	r3, #45	; 0x2d
 80135d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135d8:	4b93      	ldr	r3, [pc, #588]	; (8013828 <_printf_float+0x2e0>)
 80135da:	4894      	ldr	r0, [pc, #592]	; (801382c <_printf_float+0x2e4>)
 80135dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80135e0:	bf94      	ite	ls
 80135e2:	4698      	movls	r8, r3
 80135e4:	4680      	movhi	r8, r0
 80135e6:	2303      	movs	r3, #3
 80135e8:	6123      	str	r3, [r4, #16]
 80135ea:	9b05      	ldr	r3, [sp, #20]
 80135ec:	f023 0204 	bic.w	r2, r3, #4
 80135f0:	6022      	str	r2, [r4, #0]
 80135f2:	f04f 0900 	mov.w	r9, #0
 80135f6:	9700      	str	r7, [sp, #0]
 80135f8:	4633      	mov	r3, r6
 80135fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80135fc:	4621      	mov	r1, r4
 80135fe:	4628      	mov	r0, r5
 8013600:	f000 f9d8 	bl	80139b4 <_printf_common>
 8013604:	3001      	adds	r0, #1
 8013606:	f040 8090 	bne.w	801372a <_printf_float+0x1e2>
 801360a:	f04f 30ff 	mov.w	r0, #4294967295
 801360e:	b00d      	add	sp, #52	; 0x34
 8013610:	ecbd 8b02 	vpop	{d8}
 8013614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013618:	4642      	mov	r2, r8
 801361a:	464b      	mov	r3, r9
 801361c:	4640      	mov	r0, r8
 801361e:	4649      	mov	r1, r9
 8013620:	f7ed faac 	bl	8000b7c <__aeabi_dcmpun>
 8013624:	b140      	cbz	r0, 8013638 <_printf_float+0xf0>
 8013626:	464b      	mov	r3, r9
 8013628:	2b00      	cmp	r3, #0
 801362a:	bfbc      	itt	lt
 801362c:	232d      	movlt	r3, #45	; 0x2d
 801362e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013632:	487f      	ldr	r0, [pc, #508]	; (8013830 <_printf_float+0x2e8>)
 8013634:	4b7f      	ldr	r3, [pc, #508]	; (8013834 <_printf_float+0x2ec>)
 8013636:	e7d1      	b.n	80135dc <_printf_float+0x94>
 8013638:	6863      	ldr	r3, [r4, #4]
 801363a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801363e:	9206      	str	r2, [sp, #24]
 8013640:	1c5a      	adds	r2, r3, #1
 8013642:	d13f      	bne.n	80136c4 <_printf_float+0x17c>
 8013644:	2306      	movs	r3, #6
 8013646:	6063      	str	r3, [r4, #4]
 8013648:	9b05      	ldr	r3, [sp, #20]
 801364a:	6861      	ldr	r1, [r4, #4]
 801364c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013650:	2300      	movs	r3, #0
 8013652:	9303      	str	r3, [sp, #12]
 8013654:	ab0a      	add	r3, sp, #40	; 0x28
 8013656:	e9cd b301 	strd	fp, r3, [sp, #4]
 801365a:	ab09      	add	r3, sp, #36	; 0x24
 801365c:	ec49 8b10 	vmov	d0, r8, r9
 8013660:	9300      	str	r3, [sp, #0]
 8013662:	6022      	str	r2, [r4, #0]
 8013664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013668:	4628      	mov	r0, r5
 801366a:	f7ff fecd 	bl	8013408 <__cvt>
 801366e:	9b06      	ldr	r3, [sp, #24]
 8013670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013672:	2b47      	cmp	r3, #71	; 0x47
 8013674:	4680      	mov	r8, r0
 8013676:	d108      	bne.n	801368a <_printf_float+0x142>
 8013678:	1cc8      	adds	r0, r1, #3
 801367a:	db02      	blt.n	8013682 <_printf_float+0x13a>
 801367c:	6863      	ldr	r3, [r4, #4]
 801367e:	4299      	cmp	r1, r3
 8013680:	dd41      	ble.n	8013706 <_printf_float+0x1be>
 8013682:	f1ab 0b02 	sub.w	fp, fp, #2
 8013686:	fa5f fb8b 	uxtb.w	fp, fp
 801368a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801368e:	d820      	bhi.n	80136d2 <_printf_float+0x18a>
 8013690:	3901      	subs	r1, #1
 8013692:	465a      	mov	r2, fp
 8013694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013698:	9109      	str	r1, [sp, #36]	; 0x24
 801369a:	f7ff ff17 	bl	80134cc <__exponent>
 801369e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136a0:	1813      	adds	r3, r2, r0
 80136a2:	2a01      	cmp	r2, #1
 80136a4:	4681      	mov	r9, r0
 80136a6:	6123      	str	r3, [r4, #16]
 80136a8:	dc02      	bgt.n	80136b0 <_printf_float+0x168>
 80136aa:	6822      	ldr	r2, [r4, #0]
 80136ac:	07d2      	lsls	r2, r2, #31
 80136ae:	d501      	bpl.n	80136b4 <_printf_float+0x16c>
 80136b0:	3301      	adds	r3, #1
 80136b2:	6123      	str	r3, [r4, #16]
 80136b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d09c      	beq.n	80135f6 <_printf_float+0xae>
 80136bc:	232d      	movs	r3, #45	; 0x2d
 80136be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136c2:	e798      	b.n	80135f6 <_printf_float+0xae>
 80136c4:	9a06      	ldr	r2, [sp, #24]
 80136c6:	2a47      	cmp	r2, #71	; 0x47
 80136c8:	d1be      	bne.n	8013648 <_printf_float+0x100>
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d1bc      	bne.n	8013648 <_printf_float+0x100>
 80136ce:	2301      	movs	r3, #1
 80136d0:	e7b9      	b.n	8013646 <_printf_float+0xfe>
 80136d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80136d6:	d118      	bne.n	801370a <_printf_float+0x1c2>
 80136d8:	2900      	cmp	r1, #0
 80136da:	6863      	ldr	r3, [r4, #4]
 80136dc:	dd0b      	ble.n	80136f6 <_printf_float+0x1ae>
 80136de:	6121      	str	r1, [r4, #16]
 80136e0:	b913      	cbnz	r3, 80136e8 <_printf_float+0x1a0>
 80136e2:	6822      	ldr	r2, [r4, #0]
 80136e4:	07d0      	lsls	r0, r2, #31
 80136e6:	d502      	bpl.n	80136ee <_printf_float+0x1a6>
 80136e8:	3301      	adds	r3, #1
 80136ea:	440b      	add	r3, r1
 80136ec:	6123      	str	r3, [r4, #16]
 80136ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80136f0:	f04f 0900 	mov.w	r9, #0
 80136f4:	e7de      	b.n	80136b4 <_printf_float+0x16c>
 80136f6:	b913      	cbnz	r3, 80136fe <_printf_float+0x1b6>
 80136f8:	6822      	ldr	r2, [r4, #0]
 80136fa:	07d2      	lsls	r2, r2, #31
 80136fc:	d501      	bpl.n	8013702 <_printf_float+0x1ba>
 80136fe:	3302      	adds	r3, #2
 8013700:	e7f4      	b.n	80136ec <_printf_float+0x1a4>
 8013702:	2301      	movs	r3, #1
 8013704:	e7f2      	b.n	80136ec <_printf_float+0x1a4>
 8013706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801370a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801370c:	4299      	cmp	r1, r3
 801370e:	db05      	blt.n	801371c <_printf_float+0x1d4>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	6121      	str	r1, [r4, #16]
 8013714:	07d8      	lsls	r0, r3, #31
 8013716:	d5ea      	bpl.n	80136ee <_printf_float+0x1a6>
 8013718:	1c4b      	adds	r3, r1, #1
 801371a:	e7e7      	b.n	80136ec <_printf_float+0x1a4>
 801371c:	2900      	cmp	r1, #0
 801371e:	bfd4      	ite	le
 8013720:	f1c1 0202 	rsble	r2, r1, #2
 8013724:	2201      	movgt	r2, #1
 8013726:	4413      	add	r3, r2
 8013728:	e7e0      	b.n	80136ec <_printf_float+0x1a4>
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	055a      	lsls	r2, r3, #21
 801372e:	d407      	bmi.n	8013740 <_printf_float+0x1f8>
 8013730:	6923      	ldr	r3, [r4, #16]
 8013732:	4642      	mov	r2, r8
 8013734:	4631      	mov	r1, r6
 8013736:	4628      	mov	r0, r5
 8013738:	47b8      	blx	r7
 801373a:	3001      	adds	r0, #1
 801373c:	d12c      	bne.n	8013798 <_printf_float+0x250>
 801373e:	e764      	b.n	801360a <_printf_float+0xc2>
 8013740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013744:	f240 80e0 	bls.w	8013908 <_printf_float+0x3c0>
 8013748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801374c:	2200      	movs	r2, #0
 801374e:	2300      	movs	r3, #0
 8013750:	f7ed f9e2 	bl	8000b18 <__aeabi_dcmpeq>
 8013754:	2800      	cmp	r0, #0
 8013756:	d034      	beq.n	80137c2 <_printf_float+0x27a>
 8013758:	4a37      	ldr	r2, [pc, #220]	; (8013838 <_printf_float+0x2f0>)
 801375a:	2301      	movs	r3, #1
 801375c:	4631      	mov	r1, r6
 801375e:	4628      	mov	r0, r5
 8013760:	47b8      	blx	r7
 8013762:	3001      	adds	r0, #1
 8013764:	f43f af51 	beq.w	801360a <_printf_float+0xc2>
 8013768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801376c:	429a      	cmp	r2, r3
 801376e:	db02      	blt.n	8013776 <_printf_float+0x22e>
 8013770:	6823      	ldr	r3, [r4, #0]
 8013772:	07d8      	lsls	r0, r3, #31
 8013774:	d510      	bpl.n	8013798 <_printf_float+0x250>
 8013776:	ee18 3a10 	vmov	r3, s16
 801377a:	4652      	mov	r2, sl
 801377c:	4631      	mov	r1, r6
 801377e:	4628      	mov	r0, r5
 8013780:	47b8      	blx	r7
 8013782:	3001      	adds	r0, #1
 8013784:	f43f af41 	beq.w	801360a <_printf_float+0xc2>
 8013788:	f04f 0800 	mov.w	r8, #0
 801378c:	f104 091a 	add.w	r9, r4, #26
 8013790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013792:	3b01      	subs	r3, #1
 8013794:	4543      	cmp	r3, r8
 8013796:	dc09      	bgt.n	80137ac <_printf_float+0x264>
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	079b      	lsls	r3, r3, #30
 801379c:	f100 8105 	bmi.w	80139aa <_printf_float+0x462>
 80137a0:	68e0      	ldr	r0, [r4, #12]
 80137a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137a4:	4298      	cmp	r0, r3
 80137a6:	bfb8      	it	lt
 80137a8:	4618      	movlt	r0, r3
 80137aa:	e730      	b.n	801360e <_printf_float+0xc6>
 80137ac:	2301      	movs	r3, #1
 80137ae:	464a      	mov	r2, r9
 80137b0:	4631      	mov	r1, r6
 80137b2:	4628      	mov	r0, r5
 80137b4:	47b8      	blx	r7
 80137b6:	3001      	adds	r0, #1
 80137b8:	f43f af27 	beq.w	801360a <_printf_float+0xc2>
 80137bc:	f108 0801 	add.w	r8, r8, #1
 80137c0:	e7e6      	b.n	8013790 <_printf_float+0x248>
 80137c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dc39      	bgt.n	801383c <_printf_float+0x2f4>
 80137c8:	4a1b      	ldr	r2, [pc, #108]	; (8013838 <_printf_float+0x2f0>)
 80137ca:	2301      	movs	r3, #1
 80137cc:	4631      	mov	r1, r6
 80137ce:	4628      	mov	r0, r5
 80137d0:	47b8      	blx	r7
 80137d2:	3001      	adds	r0, #1
 80137d4:	f43f af19 	beq.w	801360a <_printf_float+0xc2>
 80137d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137dc:	4313      	orrs	r3, r2
 80137de:	d102      	bne.n	80137e6 <_printf_float+0x29e>
 80137e0:	6823      	ldr	r3, [r4, #0]
 80137e2:	07d9      	lsls	r1, r3, #31
 80137e4:	d5d8      	bpl.n	8013798 <_printf_float+0x250>
 80137e6:	ee18 3a10 	vmov	r3, s16
 80137ea:	4652      	mov	r2, sl
 80137ec:	4631      	mov	r1, r6
 80137ee:	4628      	mov	r0, r5
 80137f0:	47b8      	blx	r7
 80137f2:	3001      	adds	r0, #1
 80137f4:	f43f af09 	beq.w	801360a <_printf_float+0xc2>
 80137f8:	f04f 0900 	mov.w	r9, #0
 80137fc:	f104 0a1a 	add.w	sl, r4, #26
 8013800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013802:	425b      	negs	r3, r3
 8013804:	454b      	cmp	r3, r9
 8013806:	dc01      	bgt.n	801380c <_printf_float+0x2c4>
 8013808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801380a:	e792      	b.n	8013732 <_printf_float+0x1ea>
 801380c:	2301      	movs	r3, #1
 801380e:	4652      	mov	r2, sl
 8013810:	4631      	mov	r1, r6
 8013812:	4628      	mov	r0, r5
 8013814:	47b8      	blx	r7
 8013816:	3001      	adds	r0, #1
 8013818:	f43f aef7 	beq.w	801360a <_printf_float+0xc2>
 801381c:	f109 0901 	add.w	r9, r9, #1
 8013820:	e7ee      	b.n	8013800 <_printf_float+0x2b8>
 8013822:	bf00      	nop
 8013824:	7fefffff 	.word	0x7fefffff
 8013828:	080167d0 	.word	0x080167d0
 801382c:	080167d4 	.word	0x080167d4
 8013830:	080167dc 	.word	0x080167dc
 8013834:	080167d8 	.word	0x080167d8
 8013838:	080167e0 	.word	0x080167e0
 801383c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801383e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013840:	429a      	cmp	r2, r3
 8013842:	bfa8      	it	ge
 8013844:	461a      	movge	r2, r3
 8013846:	2a00      	cmp	r2, #0
 8013848:	4691      	mov	r9, r2
 801384a:	dc37      	bgt.n	80138bc <_printf_float+0x374>
 801384c:	f04f 0b00 	mov.w	fp, #0
 8013850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013854:	f104 021a 	add.w	r2, r4, #26
 8013858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801385a:	9305      	str	r3, [sp, #20]
 801385c:	eba3 0309 	sub.w	r3, r3, r9
 8013860:	455b      	cmp	r3, fp
 8013862:	dc33      	bgt.n	80138cc <_printf_float+0x384>
 8013864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013868:	429a      	cmp	r2, r3
 801386a:	db3b      	blt.n	80138e4 <_printf_float+0x39c>
 801386c:	6823      	ldr	r3, [r4, #0]
 801386e:	07da      	lsls	r2, r3, #31
 8013870:	d438      	bmi.n	80138e4 <_printf_float+0x39c>
 8013872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013874:	9a05      	ldr	r2, [sp, #20]
 8013876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013878:	1a9a      	subs	r2, r3, r2
 801387a:	eba3 0901 	sub.w	r9, r3, r1
 801387e:	4591      	cmp	r9, r2
 8013880:	bfa8      	it	ge
 8013882:	4691      	movge	r9, r2
 8013884:	f1b9 0f00 	cmp.w	r9, #0
 8013888:	dc35      	bgt.n	80138f6 <_printf_float+0x3ae>
 801388a:	f04f 0800 	mov.w	r8, #0
 801388e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013892:	f104 0a1a 	add.w	sl, r4, #26
 8013896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801389a:	1a9b      	subs	r3, r3, r2
 801389c:	eba3 0309 	sub.w	r3, r3, r9
 80138a0:	4543      	cmp	r3, r8
 80138a2:	f77f af79 	ble.w	8013798 <_printf_float+0x250>
 80138a6:	2301      	movs	r3, #1
 80138a8:	4652      	mov	r2, sl
 80138aa:	4631      	mov	r1, r6
 80138ac:	4628      	mov	r0, r5
 80138ae:	47b8      	blx	r7
 80138b0:	3001      	adds	r0, #1
 80138b2:	f43f aeaa 	beq.w	801360a <_printf_float+0xc2>
 80138b6:	f108 0801 	add.w	r8, r8, #1
 80138ba:	e7ec      	b.n	8013896 <_printf_float+0x34e>
 80138bc:	4613      	mov	r3, r2
 80138be:	4631      	mov	r1, r6
 80138c0:	4642      	mov	r2, r8
 80138c2:	4628      	mov	r0, r5
 80138c4:	47b8      	blx	r7
 80138c6:	3001      	adds	r0, #1
 80138c8:	d1c0      	bne.n	801384c <_printf_float+0x304>
 80138ca:	e69e      	b.n	801360a <_printf_float+0xc2>
 80138cc:	2301      	movs	r3, #1
 80138ce:	4631      	mov	r1, r6
 80138d0:	4628      	mov	r0, r5
 80138d2:	9205      	str	r2, [sp, #20]
 80138d4:	47b8      	blx	r7
 80138d6:	3001      	adds	r0, #1
 80138d8:	f43f ae97 	beq.w	801360a <_printf_float+0xc2>
 80138dc:	9a05      	ldr	r2, [sp, #20]
 80138de:	f10b 0b01 	add.w	fp, fp, #1
 80138e2:	e7b9      	b.n	8013858 <_printf_float+0x310>
 80138e4:	ee18 3a10 	vmov	r3, s16
 80138e8:	4652      	mov	r2, sl
 80138ea:	4631      	mov	r1, r6
 80138ec:	4628      	mov	r0, r5
 80138ee:	47b8      	blx	r7
 80138f0:	3001      	adds	r0, #1
 80138f2:	d1be      	bne.n	8013872 <_printf_float+0x32a>
 80138f4:	e689      	b.n	801360a <_printf_float+0xc2>
 80138f6:	9a05      	ldr	r2, [sp, #20]
 80138f8:	464b      	mov	r3, r9
 80138fa:	4442      	add	r2, r8
 80138fc:	4631      	mov	r1, r6
 80138fe:	4628      	mov	r0, r5
 8013900:	47b8      	blx	r7
 8013902:	3001      	adds	r0, #1
 8013904:	d1c1      	bne.n	801388a <_printf_float+0x342>
 8013906:	e680      	b.n	801360a <_printf_float+0xc2>
 8013908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801390a:	2a01      	cmp	r2, #1
 801390c:	dc01      	bgt.n	8013912 <_printf_float+0x3ca>
 801390e:	07db      	lsls	r3, r3, #31
 8013910:	d538      	bpl.n	8013984 <_printf_float+0x43c>
 8013912:	2301      	movs	r3, #1
 8013914:	4642      	mov	r2, r8
 8013916:	4631      	mov	r1, r6
 8013918:	4628      	mov	r0, r5
 801391a:	47b8      	blx	r7
 801391c:	3001      	adds	r0, #1
 801391e:	f43f ae74 	beq.w	801360a <_printf_float+0xc2>
 8013922:	ee18 3a10 	vmov	r3, s16
 8013926:	4652      	mov	r2, sl
 8013928:	4631      	mov	r1, r6
 801392a:	4628      	mov	r0, r5
 801392c:	47b8      	blx	r7
 801392e:	3001      	adds	r0, #1
 8013930:	f43f ae6b 	beq.w	801360a <_printf_float+0xc2>
 8013934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013938:	2200      	movs	r2, #0
 801393a:	2300      	movs	r3, #0
 801393c:	f7ed f8ec 	bl	8000b18 <__aeabi_dcmpeq>
 8013940:	b9d8      	cbnz	r0, 801397a <_printf_float+0x432>
 8013942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013944:	f108 0201 	add.w	r2, r8, #1
 8013948:	3b01      	subs	r3, #1
 801394a:	4631      	mov	r1, r6
 801394c:	4628      	mov	r0, r5
 801394e:	47b8      	blx	r7
 8013950:	3001      	adds	r0, #1
 8013952:	d10e      	bne.n	8013972 <_printf_float+0x42a>
 8013954:	e659      	b.n	801360a <_printf_float+0xc2>
 8013956:	2301      	movs	r3, #1
 8013958:	4652      	mov	r2, sl
 801395a:	4631      	mov	r1, r6
 801395c:	4628      	mov	r0, r5
 801395e:	47b8      	blx	r7
 8013960:	3001      	adds	r0, #1
 8013962:	f43f ae52 	beq.w	801360a <_printf_float+0xc2>
 8013966:	f108 0801 	add.w	r8, r8, #1
 801396a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801396c:	3b01      	subs	r3, #1
 801396e:	4543      	cmp	r3, r8
 8013970:	dcf1      	bgt.n	8013956 <_printf_float+0x40e>
 8013972:	464b      	mov	r3, r9
 8013974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013978:	e6dc      	b.n	8013734 <_printf_float+0x1ec>
 801397a:	f04f 0800 	mov.w	r8, #0
 801397e:	f104 0a1a 	add.w	sl, r4, #26
 8013982:	e7f2      	b.n	801396a <_printf_float+0x422>
 8013984:	2301      	movs	r3, #1
 8013986:	4642      	mov	r2, r8
 8013988:	e7df      	b.n	801394a <_printf_float+0x402>
 801398a:	2301      	movs	r3, #1
 801398c:	464a      	mov	r2, r9
 801398e:	4631      	mov	r1, r6
 8013990:	4628      	mov	r0, r5
 8013992:	47b8      	blx	r7
 8013994:	3001      	adds	r0, #1
 8013996:	f43f ae38 	beq.w	801360a <_printf_float+0xc2>
 801399a:	f108 0801 	add.w	r8, r8, #1
 801399e:	68e3      	ldr	r3, [r4, #12]
 80139a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139a2:	1a5b      	subs	r3, r3, r1
 80139a4:	4543      	cmp	r3, r8
 80139a6:	dcf0      	bgt.n	801398a <_printf_float+0x442>
 80139a8:	e6fa      	b.n	80137a0 <_printf_float+0x258>
 80139aa:	f04f 0800 	mov.w	r8, #0
 80139ae:	f104 0919 	add.w	r9, r4, #25
 80139b2:	e7f4      	b.n	801399e <_printf_float+0x456>

080139b4 <_printf_common>:
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b8:	4616      	mov	r6, r2
 80139ba:	4699      	mov	r9, r3
 80139bc:	688a      	ldr	r2, [r1, #8]
 80139be:	690b      	ldr	r3, [r1, #16]
 80139c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139c4:	4293      	cmp	r3, r2
 80139c6:	bfb8      	it	lt
 80139c8:	4613      	movlt	r3, r2
 80139ca:	6033      	str	r3, [r6, #0]
 80139cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139d0:	4607      	mov	r7, r0
 80139d2:	460c      	mov	r4, r1
 80139d4:	b10a      	cbz	r2, 80139da <_printf_common+0x26>
 80139d6:	3301      	adds	r3, #1
 80139d8:	6033      	str	r3, [r6, #0]
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	0699      	lsls	r1, r3, #26
 80139de:	bf42      	ittt	mi
 80139e0:	6833      	ldrmi	r3, [r6, #0]
 80139e2:	3302      	addmi	r3, #2
 80139e4:	6033      	strmi	r3, [r6, #0]
 80139e6:	6825      	ldr	r5, [r4, #0]
 80139e8:	f015 0506 	ands.w	r5, r5, #6
 80139ec:	d106      	bne.n	80139fc <_printf_common+0x48>
 80139ee:	f104 0a19 	add.w	sl, r4, #25
 80139f2:	68e3      	ldr	r3, [r4, #12]
 80139f4:	6832      	ldr	r2, [r6, #0]
 80139f6:	1a9b      	subs	r3, r3, r2
 80139f8:	42ab      	cmp	r3, r5
 80139fa:	dc26      	bgt.n	8013a4a <_printf_common+0x96>
 80139fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a00:	1e13      	subs	r3, r2, #0
 8013a02:	6822      	ldr	r2, [r4, #0]
 8013a04:	bf18      	it	ne
 8013a06:	2301      	movne	r3, #1
 8013a08:	0692      	lsls	r2, r2, #26
 8013a0a:	d42b      	bmi.n	8013a64 <_printf_common+0xb0>
 8013a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a10:	4649      	mov	r1, r9
 8013a12:	4638      	mov	r0, r7
 8013a14:	47c0      	blx	r8
 8013a16:	3001      	adds	r0, #1
 8013a18:	d01e      	beq.n	8013a58 <_printf_common+0xa4>
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	68e5      	ldr	r5, [r4, #12]
 8013a1e:	6832      	ldr	r2, [r6, #0]
 8013a20:	f003 0306 	and.w	r3, r3, #6
 8013a24:	2b04      	cmp	r3, #4
 8013a26:	bf08      	it	eq
 8013a28:	1aad      	subeq	r5, r5, r2
 8013a2a:	68a3      	ldr	r3, [r4, #8]
 8013a2c:	6922      	ldr	r2, [r4, #16]
 8013a2e:	bf0c      	ite	eq
 8013a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a34:	2500      	movne	r5, #0
 8013a36:	4293      	cmp	r3, r2
 8013a38:	bfc4      	itt	gt
 8013a3a:	1a9b      	subgt	r3, r3, r2
 8013a3c:	18ed      	addgt	r5, r5, r3
 8013a3e:	2600      	movs	r6, #0
 8013a40:	341a      	adds	r4, #26
 8013a42:	42b5      	cmp	r5, r6
 8013a44:	d11a      	bne.n	8013a7c <_printf_common+0xc8>
 8013a46:	2000      	movs	r0, #0
 8013a48:	e008      	b.n	8013a5c <_printf_common+0xa8>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	4652      	mov	r2, sl
 8013a4e:	4649      	mov	r1, r9
 8013a50:	4638      	mov	r0, r7
 8013a52:	47c0      	blx	r8
 8013a54:	3001      	adds	r0, #1
 8013a56:	d103      	bne.n	8013a60 <_printf_common+0xac>
 8013a58:	f04f 30ff 	mov.w	r0, #4294967295
 8013a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a60:	3501      	adds	r5, #1
 8013a62:	e7c6      	b.n	80139f2 <_printf_common+0x3e>
 8013a64:	18e1      	adds	r1, r4, r3
 8013a66:	1c5a      	adds	r2, r3, #1
 8013a68:	2030      	movs	r0, #48	; 0x30
 8013a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a6e:	4422      	add	r2, r4
 8013a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a78:	3302      	adds	r3, #2
 8013a7a:	e7c7      	b.n	8013a0c <_printf_common+0x58>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	4622      	mov	r2, r4
 8013a80:	4649      	mov	r1, r9
 8013a82:	4638      	mov	r0, r7
 8013a84:	47c0      	blx	r8
 8013a86:	3001      	adds	r0, #1
 8013a88:	d0e6      	beq.n	8013a58 <_printf_common+0xa4>
 8013a8a:	3601      	adds	r6, #1
 8013a8c:	e7d9      	b.n	8013a42 <_printf_common+0x8e>
	...

08013a90 <_printf_i>:
 8013a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	7e0f      	ldrb	r7, [r1, #24]
 8013a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a98:	2f78      	cmp	r7, #120	; 0x78
 8013a9a:	4691      	mov	r9, r2
 8013a9c:	4680      	mov	r8, r0
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	469a      	mov	sl, r3
 8013aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013aa6:	d807      	bhi.n	8013ab8 <_printf_i+0x28>
 8013aa8:	2f62      	cmp	r7, #98	; 0x62
 8013aaa:	d80a      	bhi.n	8013ac2 <_printf_i+0x32>
 8013aac:	2f00      	cmp	r7, #0
 8013aae:	f000 80d8 	beq.w	8013c62 <_printf_i+0x1d2>
 8013ab2:	2f58      	cmp	r7, #88	; 0x58
 8013ab4:	f000 80a3 	beq.w	8013bfe <_printf_i+0x16e>
 8013ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ac0:	e03a      	b.n	8013b38 <_printf_i+0xa8>
 8013ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ac6:	2b15      	cmp	r3, #21
 8013ac8:	d8f6      	bhi.n	8013ab8 <_printf_i+0x28>
 8013aca:	a101      	add	r1, pc, #4	; (adr r1, 8013ad0 <_printf_i+0x40>)
 8013acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ad0:	08013b29 	.word	0x08013b29
 8013ad4:	08013b3d 	.word	0x08013b3d
 8013ad8:	08013ab9 	.word	0x08013ab9
 8013adc:	08013ab9 	.word	0x08013ab9
 8013ae0:	08013ab9 	.word	0x08013ab9
 8013ae4:	08013ab9 	.word	0x08013ab9
 8013ae8:	08013b3d 	.word	0x08013b3d
 8013aec:	08013ab9 	.word	0x08013ab9
 8013af0:	08013ab9 	.word	0x08013ab9
 8013af4:	08013ab9 	.word	0x08013ab9
 8013af8:	08013ab9 	.word	0x08013ab9
 8013afc:	08013c49 	.word	0x08013c49
 8013b00:	08013b6d 	.word	0x08013b6d
 8013b04:	08013c2b 	.word	0x08013c2b
 8013b08:	08013ab9 	.word	0x08013ab9
 8013b0c:	08013ab9 	.word	0x08013ab9
 8013b10:	08013c6b 	.word	0x08013c6b
 8013b14:	08013ab9 	.word	0x08013ab9
 8013b18:	08013b6d 	.word	0x08013b6d
 8013b1c:	08013ab9 	.word	0x08013ab9
 8013b20:	08013ab9 	.word	0x08013ab9
 8013b24:	08013c33 	.word	0x08013c33
 8013b28:	682b      	ldr	r3, [r5, #0]
 8013b2a:	1d1a      	adds	r2, r3, #4
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	602a      	str	r2, [r5, #0]
 8013b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e0a3      	b.n	8013c84 <_printf_i+0x1f4>
 8013b3c:	6820      	ldr	r0, [r4, #0]
 8013b3e:	6829      	ldr	r1, [r5, #0]
 8013b40:	0606      	lsls	r6, r0, #24
 8013b42:	f101 0304 	add.w	r3, r1, #4
 8013b46:	d50a      	bpl.n	8013b5e <_printf_i+0xce>
 8013b48:	680e      	ldr	r6, [r1, #0]
 8013b4a:	602b      	str	r3, [r5, #0]
 8013b4c:	2e00      	cmp	r6, #0
 8013b4e:	da03      	bge.n	8013b58 <_printf_i+0xc8>
 8013b50:	232d      	movs	r3, #45	; 0x2d
 8013b52:	4276      	negs	r6, r6
 8013b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b58:	485e      	ldr	r0, [pc, #376]	; (8013cd4 <_printf_i+0x244>)
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	e019      	b.n	8013b92 <_printf_i+0x102>
 8013b5e:	680e      	ldr	r6, [r1, #0]
 8013b60:	602b      	str	r3, [r5, #0]
 8013b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b66:	bf18      	it	ne
 8013b68:	b236      	sxthne	r6, r6
 8013b6a:	e7ef      	b.n	8013b4c <_printf_i+0xbc>
 8013b6c:	682b      	ldr	r3, [r5, #0]
 8013b6e:	6820      	ldr	r0, [r4, #0]
 8013b70:	1d19      	adds	r1, r3, #4
 8013b72:	6029      	str	r1, [r5, #0]
 8013b74:	0601      	lsls	r1, r0, #24
 8013b76:	d501      	bpl.n	8013b7c <_printf_i+0xec>
 8013b78:	681e      	ldr	r6, [r3, #0]
 8013b7a:	e002      	b.n	8013b82 <_printf_i+0xf2>
 8013b7c:	0646      	lsls	r6, r0, #25
 8013b7e:	d5fb      	bpl.n	8013b78 <_printf_i+0xe8>
 8013b80:	881e      	ldrh	r6, [r3, #0]
 8013b82:	4854      	ldr	r0, [pc, #336]	; (8013cd4 <_printf_i+0x244>)
 8013b84:	2f6f      	cmp	r7, #111	; 0x6f
 8013b86:	bf0c      	ite	eq
 8013b88:	2308      	moveq	r3, #8
 8013b8a:	230a      	movne	r3, #10
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b92:	6865      	ldr	r5, [r4, #4]
 8013b94:	60a5      	str	r5, [r4, #8]
 8013b96:	2d00      	cmp	r5, #0
 8013b98:	bfa2      	ittt	ge
 8013b9a:	6821      	ldrge	r1, [r4, #0]
 8013b9c:	f021 0104 	bicge.w	r1, r1, #4
 8013ba0:	6021      	strge	r1, [r4, #0]
 8013ba2:	b90e      	cbnz	r6, 8013ba8 <_printf_i+0x118>
 8013ba4:	2d00      	cmp	r5, #0
 8013ba6:	d04d      	beq.n	8013c44 <_printf_i+0x1b4>
 8013ba8:	4615      	mov	r5, r2
 8013baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8013bae:	fb03 6711 	mls	r7, r3, r1, r6
 8013bb2:	5dc7      	ldrb	r7, [r0, r7]
 8013bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013bb8:	4637      	mov	r7, r6
 8013bba:	42bb      	cmp	r3, r7
 8013bbc:	460e      	mov	r6, r1
 8013bbe:	d9f4      	bls.n	8013baa <_printf_i+0x11a>
 8013bc0:	2b08      	cmp	r3, #8
 8013bc2:	d10b      	bne.n	8013bdc <_printf_i+0x14c>
 8013bc4:	6823      	ldr	r3, [r4, #0]
 8013bc6:	07de      	lsls	r6, r3, #31
 8013bc8:	d508      	bpl.n	8013bdc <_printf_i+0x14c>
 8013bca:	6923      	ldr	r3, [r4, #16]
 8013bcc:	6861      	ldr	r1, [r4, #4]
 8013bce:	4299      	cmp	r1, r3
 8013bd0:	bfde      	ittt	le
 8013bd2:	2330      	movle	r3, #48	; 0x30
 8013bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013bdc:	1b52      	subs	r2, r2, r5
 8013bde:	6122      	str	r2, [r4, #16]
 8013be0:	f8cd a000 	str.w	sl, [sp]
 8013be4:	464b      	mov	r3, r9
 8013be6:	aa03      	add	r2, sp, #12
 8013be8:	4621      	mov	r1, r4
 8013bea:	4640      	mov	r0, r8
 8013bec:	f7ff fee2 	bl	80139b4 <_printf_common>
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	d14c      	bne.n	8013c8e <_printf_i+0x1fe>
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	b004      	add	sp, #16
 8013bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfe:	4835      	ldr	r0, [pc, #212]	; (8013cd4 <_printf_i+0x244>)
 8013c00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013c04:	6829      	ldr	r1, [r5, #0]
 8013c06:	6823      	ldr	r3, [r4, #0]
 8013c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8013c0c:	6029      	str	r1, [r5, #0]
 8013c0e:	061d      	lsls	r5, r3, #24
 8013c10:	d514      	bpl.n	8013c3c <_printf_i+0x1ac>
 8013c12:	07df      	lsls	r7, r3, #31
 8013c14:	bf44      	itt	mi
 8013c16:	f043 0320 	orrmi.w	r3, r3, #32
 8013c1a:	6023      	strmi	r3, [r4, #0]
 8013c1c:	b91e      	cbnz	r6, 8013c26 <_printf_i+0x196>
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	f023 0320 	bic.w	r3, r3, #32
 8013c24:	6023      	str	r3, [r4, #0]
 8013c26:	2310      	movs	r3, #16
 8013c28:	e7b0      	b.n	8013b8c <_printf_i+0xfc>
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	f043 0320 	orr.w	r3, r3, #32
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	2378      	movs	r3, #120	; 0x78
 8013c34:	4828      	ldr	r0, [pc, #160]	; (8013cd8 <_printf_i+0x248>)
 8013c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c3a:	e7e3      	b.n	8013c04 <_printf_i+0x174>
 8013c3c:	0659      	lsls	r1, r3, #25
 8013c3e:	bf48      	it	mi
 8013c40:	b2b6      	uxthmi	r6, r6
 8013c42:	e7e6      	b.n	8013c12 <_printf_i+0x182>
 8013c44:	4615      	mov	r5, r2
 8013c46:	e7bb      	b.n	8013bc0 <_printf_i+0x130>
 8013c48:	682b      	ldr	r3, [r5, #0]
 8013c4a:	6826      	ldr	r6, [r4, #0]
 8013c4c:	6961      	ldr	r1, [r4, #20]
 8013c4e:	1d18      	adds	r0, r3, #4
 8013c50:	6028      	str	r0, [r5, #0]
 8013c52:	0635      	lsls	r5, r6, #24
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	d501      	bpl.n	8013c5c <_printf_i+0x1cc>
 8013c58:	6019      	str	r1, [r3, #0]
 8013c5a:	e002      	b.n	8013c62 <_printf_i+0x1d2>
 8013c5c:	0670      	lsls	r0, r6, #25
 8013c5e:	d5fb      	bpl.n	8013c58 <_printf_i+0x1c8>
 8013c60:	8019      	strh	r1, [r3, #0]
 8013c62:	2300      	movs	r3, #0
 8013c64:	6123      	str	r3, [r4, #16]
 8013c66:	4615      	mov	r5, r2
 8013c68:	e7ba      	b.n	8013be0 <_printf_i+0x150>
 8013c6a:	682b      	ldr	r3, [r5, #0]
 8013c6c:	1d1a      	adds	r2, r3, #4
 8013c6e:	602a      	str	r2, [r5, #0]
 8013c70:	681d      	ldr	r5, [r3, #0]
 8013c72:	6862      	ldr	r2, [r4, #4]
 8013c74:	2100      	movs	r1, #0
 8013c76:	4628      	mov	r0, r5
 8013c78:	f7ec fada 	bl	8000230 <memchr>
 8013c7c:	b108      	cbz	r0, 8013c82 <_printf_i+0x1f2>
 8013c7e:	1b40      	subs	r0, r0, r5
 8013c80:	6060      	str	r0, [r4, #4]
 8013c82:	6863      	ldr	r3, [r4, #4]
 8013c84:	6123      	str	r3, [r4, #16]
 8013c86:	2300      	movs	r3, #0
 8013c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c8c:	e7a8      	b.n	8013be0 <_printf_i+0x150>
 8013c8e:	6923      	ldr	r3, [r4, #16]
 8013c90:	462a      	mov	r2, r5
 8013c92:	4649      	mov	r1, r9
 8013c94:	4640      	mov	r0, r8
 8013c96:	47d0      	blx	sl
 8013c98:	3001      	adds	r0, #1
 8013c9a:	d0ab      	beq.n	8013bf4 <_printf_i+0x164>
 8013c9c:	6823      	ldr	r3, [r4, #0]
 8013c9e:	079b      	lsls	r3, r3, #30
 8013ca0:	d413      	bmi.n	8013cca <_printf_i+0x23a>
 8013ca2:	68e0      	ldr	r0, [r4, #12]
 8013ca4:	9b03      	ldr	r3, [sp, #12]
 8013ca6:	4298      	cmp	r0, r3
 8013ca8:	bfb8      	it	lt
 8013caa:	4618      	movlt	r0, r3
 8013cac:	e7a4      	b.n	8013bf8 <_printf_i+0x168>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	4632      	mov	r2, r6
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	4640      	mov	r0, r8
 8013cb6:	47d0      	blx	sl
 8013cb8:	3001      	adds	r0, #1
 8013cba:	d09b      	beq.n	8013bf4 <_printf_i+0x164>
 8013cbc:	3501      	adds	r5, #1
 8013cbe:	68e3      	ldr	r3, [r4, #12]
 8013cc0:	9903      	ldr	r1, [sp, #12]
 8013cc2:	1a5b      	subs	r3, r3, r1
 8013cc4:	42ab      	cmp	r3, r5
 8013cc6:	dcf2      	bgt.n	8013cae <_printf_i+0x21e>
 8013cc8:	e7eb      	b.n	8013ca2 <_printf_i+0x212>
 8013cca:	2500      	movs	r5, #0
 8013ccc:	f104 0619 	add.w	r6, r4, #25
 8013cd0:	e7f5      	b.n	8013cbe <_printf_i+0x22e>
 8013cd2:	bf00      	nop
 8013cd4:	080167e2 	.word	0x080167e2
 8013cd8:	080167f3 	.word	0x080167f3

08013cdc <iprintf>:
 8013cdc:	b40f      	push	{r0, r1, r2, r3}
 8013cde:	4b0a      	ldr	r3, [pc, #40]	; (8013d08 <iprintf+0x2c>)
 8013ce0:	b513      	push	{r0, r1, r4, lr}
 8013ce2:	681c      	ldr	r4, [r3, #0]
 8013ce4:	b124      	cbz	r4, 8013cf0 <iprintf+0x14>
 8013ce6:	69a3      	ldr	r3, [r4, #24]
 8013ce8:	b913      	cbnz	r3, 8013cf0 <iprintf+0x14>
 8013cea:	4620      	mov	r0, r4
 8013cec:	f001 f8d8 	bl	8014ea0 <__sinit>
 8013cf0:	ab05      	add	r3, sp, #20
 8013cf2:	9a04      	ldr	r2, [sp, #16]
 8013cf4:	68a1      	ldr	r1, [r4, #8]
 8013cf6:	9301      	str	r3, [sp, #4]
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f001 fe87 	bl	8015a0c <_vfiprintf_r>
 8013cfe:	b002      	add	sp, #8
 8013d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d04:	b004      	add	sp, #16
 8013d06:	4770      	bx	lr
 8013d08:	20000184 	.word	0x20000184

08013d0c <_puts_r>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	460e      	mov	r6, r1
 8013d10:	4605      	mov	r5, r0
 8013d12:	b118      	cbz	r0, 8013d1c <_puts_r+0x10>
 8013d14:	6983      	ldr	r3, [r0, #24]
 8013d16:	b90b      	cbnz	r3, 8013d1c <_puts_r+0x10>
 8013d18:	f001 f8c2 	bl	8014ea0 <__sinit>
 8013d1c:	69ab      	ldr	r3, [r5, #24]
 8013d1e:	68ac      	ldr	r4, [r5, #8]
 8013d20:	b913      	cbnz	r3, 8013d28 <_puts_r+0x1c>
 8013d22:	4628      	mov	r0, r5
 8013d24:	f001 f8bc 	bl	8014ea0 <__sinit>
 8013d28:	4b2c      	ldr	r3, [pc, #176]	; (8013ddc <_puts_r+0xd0>)
 8013d2a:	429c      	cmp	r4, r3
 8013d2c:	d120      	bne.n	8013d70 <_puts_r+0x64>
 8013d2e:	686c      	ldr	r4, [r5, #4]
 8013d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d32:	07db      	lsls	r3, r3, #31
 8013d34:	d405      	bmi.n	8013d42 <_puts_r+0x36>
 8013d36:	89a3      	ldrh	r3, [r4, #12]
 8013d38:	0598      	lsls	r0, r3, #22
 8013d3a:	d402      	bmi.n	8013d42 <_puts_r+0x36>
 8013d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d3e:	f001 f952 	bl	8014fe6 <__retarget_lock_acquire_recursive>
 8013d42:	89a3      	ldrh	r3, [r4, #12]
 8013d44:	0719      	lsls	r1, r3, #28
 8013d46:	d51d      	bpl.n	8013d84 <_puts_r+0x78>
 8013d48:	6923      	ldr	r3, [r4, #16]
 8013d4a:	b1db      	cbz	r3, 8013d84 <_puts_r+0x78>
 8013d4c:	3e01      	subs	r6, #1
 8013d4e:	68a3      	ldr	r3, [r4, #8]
 8013d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013d54:	3b01      	subs	r3, #1
 8013d56:	60a3      	str	r3, [r4, #8]
 8013d58:	bb39      	cbnz	r1, 8013daa <_puts_r+0x9e>
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	da38      	bge.n	8013dd0 <_puts_r+0xc4>
 8013d5e:	4622      	mov	r2, r4
 8013d60:	210a      	movs	r1, #10
 8013d62:	4628      	mov	r0, r5
 8013d64:	f000 f848 	bl	8013df8 <__swbuf_r>
 8013d68:	3001      	adds	r0, #1
 8013d6a:	d011      	beq.n	8013d90 <_puts_r+0x84>
 8013d6c:	250a      	movs	r5, #10
 8013d6e:	e011      	b.n	8013d94 <_puts_r+0x88>
 8013d70:	4b1b      	ldr	r3, [pc, #108]	; (8013de0 <_puts_r+0xd4>)
 8013d72:	429c      	cmp	r4, r3
 8013d74:	d101      	bne.n	8013d7a <_puts_r+0x6e>
 8013d76:	68ac      	ldr	r4, [r5, #8]
 8013d78:	e7da      	b.n	8013d30 <_puts_r+0x24>
 8013d7a:	4b1a      	ldr	r3, [pc, #104]	; (8013de4 <_puts_r+0xd8>)
 8013d7c:	429c      	cmp	r4, r3
 8013d7e:	bf08      	it	eq
 8013d80:	68ec      	ldreq	r4, [r5, #12]
 8013d82:	e7d5      	b.n	8013d30 <_puts_r+0x24>
 8013d84:	4621      	mov	r1, r4
 8013d86:	4628      	mov	r0, r5
 8013d88:	f000 f888 	bl	8013e9c <__swsetup_r>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d0dd      	beq.n	8013d4c <_puts_r+0x40>
 8013d90:	f04f 35ff 	mov.w	r5, #4294967295
 8013d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d96:	07da      	lsls	r2, r3, #31
 8013d98:	d405      	bmi.n	8013da6 <_puts_r+0x9a>
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	059b      	lsls	r3, r3, #22
 8013d9e:	d402      	bmi.n	8013da6 <_puts_r+0x9a>
 8013da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013da2:	f001 f921 	bl	8014fe8 <__retarget_lock_release_recursive>
 8013da6:	4628      	mov	r0, r5
 8013da8:	bd70      	pop	{r4, r5, r6, pc}
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	da04      	bge.n	8013db8 <_puts_r+0xac>
 8013dae:	69a2      	ldr	r2, [r4, #24]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	dc06      	bgt.n	8013dc2 <_puts_r+0xb6>
 8013db4:	290a      	cmp	r1, #10
 8013db6:	d004      	beq.n	8013dc2 <_puts_r+0xb6>
 8013db8:	6823      	ldr	r3, [r4, #0]
 8013dba:	1c5a      	adds	r2, r3, #1
 8013dbc:	6022      	str	r2, [r4, #0]
 8013dbe:	7019      	strb	r1, [r3, #0]
 8013dc0:	e7c5      	b.n	8013d4e <_puts_r+0x42>
 8013dc2:	4622      	mov	r2, r4
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	f000 f817 	bl	8013df8 <__swbuf_r>
 8013dca:	3001      	adds	r0, #1
 8013dcc:	d1bf      	bne.n	8013d4e <_puts_r+0x42>
 8013dce:	e7df      	b.n	8013d90 <_puts_r+0x84>
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	250a      	movs	r5, #10
 8013dd4:	1c5a      	adds	r2, r3, #1
 8013dd6:	6022      	str	r2, [r4, #0]
 8013dd8:	701d      	strb	r5, [r3, #0]
 8013dda:	e7db      	b.n	8013d94 <_puts_r+0x88>
 8013ddc:	080168b4 	.word	0x080168b4
 8013de0:	080168d4 	.word	0x080168d4
 8013de4:	08016894 	.word	0x08016894

08013de8 <puts>:
 8013de8:	4b02      	ldr	r3, [pc, #8]	; (8013df4 <puts+0xc>)
 8013dea:	4601      	mov	r1, r0
 8013dec:	6818      	ldr	r0, [r3, #0]
 8013dee:	f7ff bf8d 	b.w	8013d0c <_puts_r>
 8013df2:	bf00      	nop
 8013df4:	20000184 	.word	0x20000184

08013df8 <__swbuf_r>:
 8013df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dfa:	460e      	mov	r6, r1
 8013dfc:	4614      	mov	r4, r2
 8013dfe:	4605      	mov	r5, r0
 8013e00:	b118      	cbz	r0, 8013e0a <__swbuf_r+0x12>
 8013e02:	6983      	ldr	r3, [r0, #24]
 8013e04:	b90b      	cbnz	r3, 8013e0a <__swbuf_r+0x12>
 8013e06:	f001 f84b 	bl	8014ea0 <__sinit>
 8013e0a:	4b21      	ldr	r3, [pc, #132]	; (8013e90 <__swbuf_r+0x98>)
 8013e0c:	429c      	cmp	r4, r3
 8013e0e:	d12b      	bne.n	8013e68 <__swbuf_r+0x70>
 8013e10:	686c      	ldr	r4, [r5, #4]
 8013e12:	69a3      	ldr	r3, [r4, #24]
 8013e14:	60a3      	str	r3, [r4, #8]
 8013e16:	89a3      	ldrh	r3, [r4, #12]
 8013e18:	071a      	lsls	r2, r3, #28
 8013e1a:	d52f      	bpl.n	8013e7c <__swbuf_r+0x84>
 8013e1c:	6923      	ldr	r3, [r4, #16]
 8013e1e:	b36b      	cbz	r3, 8013e7c <__swbuf_r+0x84>
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	6820      	ldr	r0, [r4, #0]
 8013e24:	1ac0      	subs	r0, r0, r3
 8013e26:	6963      	ldr	r3, [r4, #20]
 8013e28:	b2f6      	uxtb	r6, r6
 8013e2a:	4283      	cmp	r3, r0
 8013e2c:	4637      	mov	r7, r6
 8013e2e:	dc04      	bgt.n	8013e3a <__swbuf_r+0x42>
 8013e30:	4621      	mov	r1, r4
 8013e32:	4628      	mov	r0, r5
 8013e34:	f000 ffa0 	bl	8014d78 <_fflush_r>
 8013e38:	bb30      	cbnz	r0, 8013e88 <__swbuf_r+0x90>
 8013e3a:	68a3      	ldr	r3, [r4, #8]
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	60a3      	str	r3, [r4, #8]
 8013e40:	6823      	ldr	r3, [r4, #0]
 8013e42:	1c5a      	adds	r2, r3, #1
 8013e44:	6022      	str	r2, [r4, #0]
 8013e46:	701e      	strb	r6, [r3, #0]
 8013e48:	6963      	ldr	r3, [r4, #20]
 8013e4a:	3001      	adds	r0, #1
 8013e4c:	4283      	cmp	r3, r0
 8013e4e:	d004      	beq.n	8013e5a <__swbuf_r+0x62>
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	07db      	lsls	r3, r3, #31
 8013e54:	d506      	bpl.n	8013e64 <__swbuf_r+0x6c>
 8013e56:	2e0a      	cmp	r6, #10
 8013e58:	d104      	bne.n	8013e64 <__swbuf_r+0x6c>
 8013e5a:	4621      	mov	r1, r4
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f000 ff8b 	bl	8014d78 <_fflush_r>
 8013e62:	b988      	cbnz	r0, 8013e88 <__swbuf_r+0x90>
 8013e64:	4638      	mov	r0, r7
 8013e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e68:	4b0a      	ldr	r3, [pc, #40]	; (8013e94 <__swbuf_r+0x9c>)
 8013e6a:	429c      	cmp	r4, r3
 8013e6c:	d101      	bne.n	8013e72 <__swbuf_r+0x7a>
 8013e6e:	68ac      	ldr	r4, [r5, #8]
 8013e70:	e7cf      	b.n	8013e12 <__swbuf_r+0x1a>
 8013e72:	4b09      	ldr	r3, [pc, #36]	; (8013e98 <__swbuf_r+0xa0>)
 8013e74:	429c      	cmp	r4, r3
 8013e76:	bf08      	it	eq
 8013e78:	68ec      	ldreq	r4, [r5, #12]
 8013e7a:	e7ca      	b.n	8013e12 <__swbuf_r+0x1a>
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	4628      	mov	r0, r5
 8013e80:	f000 f80c 	bl	8013e9c <__swsetup_r>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	d0cb      	beq.n	8013e20 <__swbuf_r+0x28>
 8013e88:	f04f 37ff 	mov.w	r7, #4294967295
 8013e8c:	e7ea      	b.n	8013e64 <__swbuf_r+0x6c>
 8013e8e:	bf00      	nop
 8013e90:	080168b4 	.word	0x080168b4
 8013e94:	080168d4 	.word	0x080168d4
 8013e98:	08016894 	.word	0x08016894

08013e9c <__swsetup_r>:
 8013e9c:	4b32      	ldr	r3, [pc, #200]	; (8013f68 <__swsetup_r+0xcc>)
 8013e9e:	b570      	push	{r4, r5, r6, lr}
 8013ea0:	681d      	ldr	r5, [r3, #0]
 8013ea2:	4606      	mov	r6, r0
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	b125      	cbz	r5, 8013eb2 <__swsetup_r+0x16>
 8013ea8:	69ab      	ldr	r3, [r5, #24]
 8013eaa:	b913      	cbnz	r3, 8013eb2 <__swsetup_r+0x16>
 8013eac:	4628      	mov	r0, r5
 8013eae:	f000 fff7 	bl	8014ea0 <__sinit>
 8013eb2:	4b2e      	ldr	r3, [pc, #184]	; (8013f6c <__swsetup_r+0xd0>)
 8013eb4:	429c      	cmp	r4, r3
 8013eb6:	d10f      	bne.n	8013ed8 <__swsetup_r+0x3c>
 8013eb8:	686c      	ldr	r4, [r5, #4]
 8013eba:	89a3      	ldrh	r3, [r4, #12]
 8013ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ec0:	0719      	lsls	r1, r3, #28
 8013ec2:	d42c      	bmi.n	8013f1e <__swsetup_r+0x82>
 8013ec4:	06dd      	lsls	r5, r3, #27
 8013ec6:	d411      	bmi.n	8013eec <__swsetup_r+0x50>
 8013ec8:	2309      	movs	r3, #9
 8013eca:	6033      	str	r3, [r6, #0]
 8013ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ed0:	81a3      	strh	r3, [r4, #12]
 8013ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed6:	e03e      	b.n	8013f56 <__swsetup_r+0xba>
 8013ed8:	4b25      	ldr	r3, [pc, #148]	; (8013f70 <__swsetup_r+0xd4>)
 8013eda:	429c      	cmp	r4, r3
 8013edc:	d101      	bne.n	8013ee2 <__swsetup_r+0x46>
 8013ede:	68ac      	ldr	r4, [r5, #8]
 8013ee0:	e7eb      	b.n	8013eba <__swsetup_r+0x1e>
 8013ee2:	4b24      	ldr	r3, [pc, #144]	; (8013f74 <__swsetup_r+0xd8>)
 8013ee4:	429c      	cmp	r4, r3
 8013ee6:	bf08      	it	eq
 8013ee8:	68ec      	ldreq	r4, [r5, #12]
 8013eea:	e7e6      	b.n	8013eba <__swsetup_r+0x1e>
 8013eec:	0758      	lsls	r0, r3, #29
 8013eee:	d512      	bpl.n	8013f16 <__swsetup_r+0x7a>
 8013ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ef2:	b141      	cbz	r1, 8013f06 <__swsetup_r+0x6a>
 8013ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ef8:	4299      	cmp	r1, r3
 8013efa:	d002      	beq.n	8013f02 <__swsetup_r+0x66>
 8013efc:	4630      	mov	r0, r6
 8013efe:	f001 fc7b 	bl	80157f8 <_free_r>
 8013f02:	2300      	movs	r3, #0
 8013f04:	6363      	str	r3, [r4, #52]	; 0x34
 8013f06:	89a3      	ldrh	r3, [r4, #12]
 8013f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	2300      	movs	r3, #0
 8013f10:	6063      	str	r3, [r4, #4]
 8013f12:	6923      	ldr	r3, [r4, #16]
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	89a3      	ldrh	r3, [r4, #12]
 8013f18:	f043 0308 	orr.w	r3, r3, #8
 8013f1c:	81a3      	strh	r3, [r4, #12]
 8013f1e:	6923      	ldr	r3, [r4, #16]
 8013f20:	b94b      	cbnz	r3, 8013f36 <__swsetup_r+0x9a>
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f2c:	d003      	beq.n	8013f36 <__swsetup_r+0x9a>
 8013f2e:	4621      	mov	r1, r4
 8013f30:	4630      	mov	r0, r6
 8013f32:	f001 f87f 	bl	8015034 <__smakebuf_r>
 8013f36:	89a0      	ldrh	r0, [r4, #12]
 8013f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f3c:	f010 0301 	ands.w	r3, r0, #1
 8013f40:	d00a      	beq.n	8013f58 <__swsetup_r+0xbc>
 8013f42:	2300      	movs	r3, #0
 8013f44:	60a3      	str	r3, [r4, #8]
 8013f46:	6963      	ldr	r3, [r4, #20]
 8013f48:	425b      	negs	r3, r3
 8013f4a:	61a3      	str	r3, [r4, #24]
 8013f4c:	6923      	ldr	r3, [r4, #16]
 8013f4e:	b943      	cbnz	r3, 8013f62 <__swsetup_r+0xc6>
 8013f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f54:	d1ba      	bne.n	8013ecc <__swsetup_r+0x30>
 8013f56:	bd70      	pop	{r4, r5, r6, pc}
 8013f58:	0781      	lsls	r1, r0, #30
 8013f5a:	bf58      	it	pl
 8013f5c:	6963      	ldrpl	r3, [r4, #20]
 8013f5e:	60a3      	str	r3, [r4, #8]
 8013f60:	e7f4      	b.n	8013f4c <__swsetup_r+0xb0>
 8013f62:	2000      	movs	r0, #0
 8013f64:	e7f7      	b.n	8013f56 <__swsetup_r+0xba>
 8013f66:	bf00      	nop
 8013f68:	20000184 	.word	0x20000184
 8013f6c:	080168b4 	.word	0x080168b4
 8013f70:	080168d4 	.word	0x080168d4
 8013f74:	08016894 	.word	0x08016894

08013f78 <quorem>:
 8013f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	6903      	ldr	r3, [r0, #16]
 8013f7e:	690c      	ldr	r4, [r1, #16]
 8013f80:	42a3      	cmp	r3, r4
 8013f82:	4607      	mov	r7, r0
 8013f84:	f2c0 8081 	blt.w	801408a <quorem+0x112>
 8013f88:	3c01      	subs	r4, #1
 8013f8a:	f101 0814 	add.w	r8, r1, #20
 8013f8e:	f100 0514 	add.w	r5, r0, #20
 8013f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f96:	9301      	str	r3, [sp, #4]
 8013f98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8013fb0:	d331      	bcc.n	8014016 <quorem+0x9e>
 8013fb2:	f04f 0e00 	mov.w	lr, #0
 8013fb6:	4640      	mov	r0, r8
 8013fb8:	46ac      	mov	ip, r5
 8013fba:	46f2      	mov	sl, lr
 8013fbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8013fc0:	b293      	uxth	r3, r2
 8013fc2:	fb06 e303 	mla	r3, r6, r3, lr
 8013fc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8013fd0:	f8dc a000 	ldr.w	sl, [ip]
 8013fd4:	0c12      	lsrs	r2, r2, #16
 8013fd6:	fa13 f38a 	uxtah	r3, r3, sl
 8013fda:	fb06 e202 	mla	r2, r6, r2, lr
 8013fde:	9300      	str	r3, [sp, #0]
 8013fe0:	9b00      	ldr	r3, [sp, #0]
 8013fe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013fe6:	b292      	uxth	r2, r2
 8013fe8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ff0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ff4:	4581      	cmp	r9, r0
 8013ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ffa:	f84c 3b04 	str.w	r3, [ip], #4
 8013ffe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014002:	d2db      	bcs.n	8013fbc <quorem+0x44>
 8014004:	f855 300b 	ldr.w	r3, [r5, fp]
 8014008:	b92b      	cbnz	r3, 8014016 <quorem+0x9e>
 801400a:	9b01      	ldr	r3, [sp, #4]
 801400c:	3b04      	subs	r3, #4
 801400e:	429d      	cmp	r5, r3
 8014010:	461a      	mov	r2, r3
 8014012:	d32e      	bcc.n	8014072 <quorem+0xfa>
 8014014:	613c      	str	r4, [r7, #16]
 8014016:	4638      	mov	r0, r7
 8014018:	f001 fad6 	bl	80155c8 <__mcmp>
 801401c:	2800      	cmp	r0, #0
 801401e:	db24      	blt.n	801406a <quorem+0xf2>
 8014020:	3601      	adds	r6, #1
 8014022:	4628      	mov	r0, r5
 8014024:	f04f 0c00 	mov.w	ip, #0
 8014028:	f858 2b04 	ldr.w	r2, [r8], #4
 801402c:	f8d0 e000 	ldr.w	lr, [r0]
 8014030:	b293      	uxth	r3, r2
 8014032:	ebac 0303 	sub.w	r3, ip, r3
 8014036:	0c12      	lsrs	r2, r2, #16
 8014038:	fa13 f38e 	uxtah	r3, r3, lr
 801403c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014044:	b29b      	uxth	r3, r3
 8014046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801404a:	45c1      	cmp	r9, r8
 801404c:	f840 3b04 	str.w	r3, [r0], #4
 8014050:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014054:	d2e8      	bcs.n	8014028 <quorem+0xb0>
 8014056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801405a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801405e:	b922      	cbnz	r2, 801406a <quorem+0xf2>
 8014060:	3b04      	subs	r3, #4
 8014062:	429d      	cmp	r5, r3
 8014064:	461a      	mov	r2, r3
 8014066:	d30a      	bcc.n	801407e <quorem+0x106>
 8014068:	613c      	str	r4, [r7, #16]
 801406a:	4630      	mov	r0, r6
 801406c:	b003      	add	sp, #12
 801406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014072:	6812      	ldr	r2, [r2, #0]
 8014074:	3b04      	subs	r3, #4
 8014076:	2a00      	cmp	r2, #0
 8014078:	d1cc      	bne.n	8014014 <quorem+0x9c>
 801407a:	3c01      	subs	r4, #1
 801407c:	e7c7      	b.n	801400e <quorem+0x96>
 801407e:	6812      	ldr	r2, [r2, #0]
 8014080:	3b04      	subs	r3, #4
 8014082:	2a00      	cmp	r2, #0
 8014084:	d1f0      	bne.n	8014068 <quorem+0xf0>
 8014086:	3c01      	subs	r4, #1
 8014088:	e7eb      	b.n	8014062 <quorem+0xea>
 801408a:	2000      	movs	r0, #0
 801408c:	e7ee      	b.n	801406c <quorem+0xf4>
	...

08014090 <_dtoa_r>:
 8014090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	ed2d 8b04 	vpush	{d8-d9}
 8014098:	ec57 6b10 	vmov	r6, r7, d0
 801409c:	b093      	sub	sp, #76	; 0x4c
 801409e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80140a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80140a4:	9106      	str	r1, [sp, #24]
 80140a6:	ee10 aa10 	vmov	sl, s0
 80140aa:	4604      	mov	r4, r0
 80140ac:	9209      	str	r2, [sp, #36]	; 0x24
 80140ae:	930c      	str	r3, [sp, #48]	; 0x30
 80140b0:	46bb      	mov	fp, r7
 80140b2:	b975      	cbnz	r5, 80140d2 <_dtoa_r+0x42>
 80140b4:	2010      	movs	r0, #16
 80140b6:	f000 fffd 	bl	80150b4 <malloc>
 80140ba:	4602      	mov	r2, r0
 80140bc:	6260      	str	r0, [r4, #36]	; 0x24
 80140be:	b920      	cbnz	r0, 80140ca <_dtoa_r+0x3a>
 80140c0:	4ba7      	ldr	r3, [pc, #668]	; (8014360 <_dtoa_r+0x2d0>)
 80140c2:	21ea      	movs	r1, #234	; 0xea
 80140c4:	48a7      	ldr	r0, [pc, #668]	; (8014364 <_dtoa_r+0x2d4>)
 80140c6:	f001 fe37 	bl	8015d38 <__assert_func>
 80140ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80140ce:	6005      	str	r5, [r0, #0]
 80140d0:	60c5      	str	r5, [r0, #12]
 80140d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140d4:	6819      	ldr	r1, [r3, #0]
 80140d6:	b151      	cbz	r1, 80140ee <_dtoa_r+0x5e>
 80140d8:	685a      	ldr	r2, [r3, #4]
 80140da:	604a      	str	r2, [r1, #4]
 80140dc:	2301      	movs	r3, #1
 80140de:	4093      	lsls	r3, r2
 80140e0:	608b      	str	r3, [r1, #8]
 80140e2:	4620      	mov	r0, r4
 80140e4:	f001 f82e 	bl	8015144 <_Bfree>
 80140e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140ea:	2200      	movs	r2, #0
 80140ec:	601a      	str	r2, [r3, #0]
 80140ee:	1e3b      	subs	r3, r7, #0
 80140f0:	bfaa      	itet	ge
 80140f2:	2300      	movge	r3, #0
 80140f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80140f8:	f8c8 3000 	strge.w	r3, [r8]
 80140fc:	4b9a      	ldr	r3, [pc, #616]	; (8014368 <_dtoa_r+0x2d8>)
 80140fe:	bfbc      	itt	lt
 8014100:	2201      	movlt	r2, #1
 8014102:	f8c8 2000 	strlt.w	r2, [r8]
 8014106:	ea33 030b 	bics.w	r3, r3, fp
 801410a:	d11b      	bne.n	8014144 <_dtoa_r+0xb4>
 801410c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801410e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014112:	6013      	str	r3, [r2, #0]
 8014114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014118:	4333      	orrs	r3, r6
 801411a:	f000 8592 	beq.w	8014c42 <_dtoa_r+0xbb2>
 801411e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014120:	b963      	cbnz	r3, 801413c <_dtoa_r+0xac>
 8014122:	4b92      	ldr	r3, [pc, #584]	; (801436c <_dtoa_r+0x2dc>)
 8014124:	e022      	b.n	801416c <_dtoa_r+0xdc>
 8014126:	4b92      	ldr	r3, [pc, #584]	; (8014370 <_dtoa_r+0x2e0>)
 8014128:	9301      	str	r3, [sp, #4]
 801412a:	3308      	adds	r3, #8
 801412c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801412e:	6013      	str	r3, [r2, #0]
 8014130:	9801      	ldr	r0, [sp, #4]
 8014132:	b013      	add	sp, #76	; 0x4c
 8014134:	ecbd 8b04 	vpop	{d8-d9}
 8014138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413c:	4b8b      	ldr	r3, [pc, #556]	; (801436c <_dtoa_r+0x2dc>)
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	3303      	adds	r3, #3
 8014142:	e7f3      	b.n	801412c <_dtoa_r+0x9c>
 8014144:	2200      	movs	r2, #0
 8014146:	2300      	movs	r3, #0
 8014148:	4650      	mov	r0, sl
 801414a:	4659      	mov	r1, fp
 801414c:	f7ec fce4 	bl	8000b18 <__aeabi_dcmpeq>
 8014150:	ec4b ab19 	vmov	d9, sl, fp
 8014154:	4680      	mov	r8, r0
 8014156:	b158      	cbz	r0, 8014170 <_dtoa_r+0xe0>
 8014158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801415a:	2301      	movs	r3, #1
 801415c:	6013      	str	r3, [r2, #0]
 801415e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014160:	2b00      	cmp	r3, #0
 8014162:	f000 856b 	beq.w	8014c3c <_dtoa_r+0xbac>
 8014166:	4883      	ldr	r0, [pc, #524]	; (8014374 <_dtoa_r+0x2e4>)
 8014168:	6018      	str	r0, [r3, #0]
 801416a:	1e43      	subs	r3, r0, #1
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	e7df      	b.n	8014130 <_dtoa_r+0xa0>
 8014170:	ec4b ab10 	vmov	d0, sl, fp
 8014174:	aa10      	add	r2, sp, #64	; 0x40
 8014176:	a911      	add	r1, sp, #68	; 0x44
 8014178:	4620      	mov	r0, r4
 801417a:	f001 facb 	bl	8015714 <__d2b>
 801417e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014182:	ee08 0a10 	vmov	s16, r0
 8014186:	2d00      	cmp	r5, #0
 8014188:	f000 8084 	beq.w	8014294 <_dtoa_r+0x204>
 801418c:	ee19 3a90 	vmov	r3, s19
 8014190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014194:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014198:	4656      	mov	r6, sl
 801419a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801419e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80141a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80141a6:	4b74      	ldr	r3, [pc, #464]	; (8014378 <_dtoa_r+0x2e8>)
 80141a8:	2200      	movs	r2, #0
 80141aa:	4630      	mov	r0, r6
 80141ac:	4639      	mov	r1, r7
 80141ae:	f7ec f893 	bl	80002d8 <__aeabi_dsub>
 80141b2:	a365      	add	r3, pc, #404	; (adr r3, 8014348 <_dtoa_r+0x2b8>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	f7ec fa46 	bl	8000648 <__aeabi_dmul>
 80141bc:	a364      	add	r3, pc, #400	; (adr r3, 8014350 <_dtoa_r+0x2c0>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	f7ec f88b 	bl	80002dc <__adddf3>
 80141c6:	4606      	mov	r6, r0
 80141c8:	4628      	mov	r0, r5
 80141ca:	460f      	mov	r7, r1
 80141cc:	f7ec f9d2 	bl	8000574 <__aeabi_i2d>
 80141d0:	a361      	add	r3, pc, #388	; (adr r3, 8014358 <_dtoa_r+0x2c8>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	f7ec fa37 	bl	8000648 <__aeabi_dmul>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	4630      	mov	r0, r6
 80141e0:	4639      	mov	r1, r7
 80141e2:	f7ec f87b 	bl	80002dc <__adddf3>
 80141e6:	4606      	mov	r6, r0
 80141e8:	460f      	mov	r7, r1
 80141ea:	f7ec fcdd 	bl	8000ba8 <__aeabi_d2iz>
 80141ee:	2200      	movs	r2, #0
 80141f0:	9000      	str	r0, [sp, #0]
 80141f2:	2300      	movs	r3, #0
 80141f4:	4630      	mov	r0, r6
 80141f6:	4639      	mov	r1, r7
 80141f8:	f7ec fc98 	bl	8000b2c <__aeabi_dcmplt>
 80141fc:	b150      	cbz	r0, 8014214 <_dtoa_r+0x184>
 80141fe:	9800      	ldr	r0, [sp, #0]
 8014200:	f7ec f9b8 	bl	8000574 <__aeabi_i2d>
 8014204:	4632      	mov	r2, r6
 8014206:	463b      	mov	r3, r7
 8014208:	f7ec fc86 	bl	8000b18 <__aeabi_dcmpeq>
 801420c:	b910      	cbnz	r0, 8014214 <_dtoa_r+0x184>
 801420e:	9b00      	ldr	r3, [sp, #0]
 8014210:	3b01      	subs	r3, #1
 8014212:	9300      	str	r3, [sp, #0]
 8014214:	9b00      	ldr	r3, [sp, #0]
 8014216:	2b16      	cmp	r3, #22
 8014218:	d85a      	bhi.n	80142d0 <_dtoa_r+0x240>
 801421a:	9a00      	ldr	r2, [sp, #0]
 801421c:	4b57      	ldr	r3, [pc, #348]	; (801437c <_dtoa_r+0x2ec>)
 801421e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014226:	ec51 0b19 	vmov	r0, r1, d9
 801422a:	f7ec fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801422e:	2800      	cmp	r0, #0
 8014230:	d050      	beq.n	80142d4 <_dtoa_r+0x244>
 8014232:	9b00      	ldr	r3, [sp, #0]
 8014234:	3b01      	subs	r3, #1
 8014236:	9300      	str	r3, [sp, #0]
 8014238:	2300      	movs	r3, #0
 801423a:	930b      	str	r3, [sp, #44]	; 0x2c
 801423c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801423e:	1b5d      	subs	r5, r3, r5
 8014240:	1e6b      	subs	r3, r5, #1
 8014242:	9305      	str	r3, [sp, #20]
 8014244:	bf45      	ittet	mi
 8014246:	f1c5 0301 	rsbmi	r3, r5, #1
 801424a:	9304      	strmi	r3, [sp, #16]
 801424c:	2300      	movpl	r3, #0
 801424e:	2300      	movmi	r3, #0
 8014250:	bf4c      	ite	mi
 8014252:	9305      	strmi	r3, [sp, #20]
 8014254:	9304      	strpl	r3, [sp, #16]
 8014256:	9b00      	ldr	r3, [sp, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	db3d      	blt.n	80142d8 <_dtoa_r+0x248>
 801425c:	9b05      	ldr	r3, [sp, #20]
 801425e:	9a00      	ldr	r2, [sp, #0]
 8014260:	920a      	str	r2, [sp, #40]	; 0x28
 8014262:	4413      	add	r3, r2
 8014264:	9305      	str	r3, [sp, #20]
 8014266:	2300      	movs	r3, #0
 8014268:	9307      	str	r3, [sp, #28]
 801426a:	9b06      	ldr	r3, [sp, #24]
 801426c:	2b09      	cmp	r3, #9
 801426e:	f200 8089 	bhi.w	8014384 <_dtoa_r+0x2f4>
 8014272:	2b05      	cmp	r3, #5
 8014274:	bfc4      	itt	gt
 8014276:	3b04      	subgt	r3, #4
 8014278:	9306      	strgt	r3, [sp, #24]
 801427a:	9b06      	ldr	r3, [sp, #24]
 801427c:	f1a3 0302 	sub.w	r3, r3, #2
 8014280:	bfcc      	ite	gt
 8014282:	2500      	movgt	r5, #0
 8014284:	2501      	movle	r5, #1
 8014286:	2b03      	cmp	r3, #3
 8014288:	f200 8087 	bhi.w	801439a <_dtoa_r+0x30a>
 801428c:	e8df f003 	tbb	[pc, r3]
 8014290:	59383a2d 	.word	0x59383a2d
 8014294:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014298:	441d      	add	r5, r3
 801429a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801429e:	2b20      	cmp	r3, #32
 80142a0:	bfc1      	itttt	gt
 80142a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80142a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80142aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80142ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80142b2:	bfda      	itte	le
 80142b4:	f1c3 0320 	rsble	r3, r3, #32
 80142b8:	fa06 f003 	lslle.w	r0, r6, r3
 80142bc:	4318      	orrgt	r0, r3
 80142be:	f7ec f949 	bl	8000554 <__aeabi_ui2d>
 80142c2:	2301      	movs	r3, #1
 80142c4:	4606      	mov	r6, r0
 80142c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80142ca:	3d01      	subs	r5, #1
 80142cc:	930e      	str	r3, [sp, #56]	; 0x38
 80142ce:	e76a      	b.n	80141a6 <_dtoa_r+0x116>
 80142d0:	2301      	movs	r3, #1
 80142d2:	e7b2      	b.n	801423a <_dtoa_r+0x1aa>
 80142d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80142d6:	e7b1      	b.n	801423c <_dtoa_r+0x1ac>
 80142d8:	9b04      	ldr	r3, [sp, #16]
 80142da:	9a00      	ldr	r2, [sp, #0]
 80142dc:	1a9b      	subs	r3, r3, r2
 80142de:	9304      	str	r3, [sp, #16]
 80142e0:	4253      	negs	r3, r2
 80142e2:	9307      	str	r3, [sp, #28]
 80142e4:	2300      	movs	r3, #0
 80142e6:	930a      	str	r3, [sp, #40]	; 0x28
 80142e8:	e7bf      	b.n	801426a <_dtoa_r+0x1da>
 80142ea:	2300      	movs	r3, #0
 80142ec:	9308      	str	r3, [sp, #32]
 80142ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dc55      	bgt.n	80143a0 <_dtoa_r+0x310>
 80142f4:	2301      	movs	r3, #1
 80142f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80142fa:	461a      	mov	r2, r3
 80142fc:	9209      	str	r2, [sp, #36]	; 0x24
 80142fe:	e00c      	b.n	801431a <_dtoa_r+0x28a>
 8014300:	2301      	movs	r3, #1
 8014302:	e7f3      	b.n	80142ec <_dtoa_r+0x25c>
 8014304:	2300      	movs	r3, #0
 8014306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014308:	9308      	str	r3, [sp, #32]
 801430a:	9b00      	ldr	r3, [sp, #0]
 801430c:	4413      	add	r3, r2
 801430e:	9302      	str	r3, [sp, #8]
 8014310:	3301      	adds	r3, #1
 8014312:	2b01      	cmp	r3, #1
 8014314:	9303      	str	r3, [sp, #12]
 8014316:	bfb8      	it	lt
 8014318:	2301      	movlt	r3, #1
 801431a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801431c:	2200      	movs	r2, #0
 801431e:	6042      	str	r2, [r0, #4]
 8014320:	2204      	movs	r2, #4
 8014322:	f102 0614 	add.w	r6, r2, #20
 8014326:	429e      	cmp	r6, r3
 8014328:	6841      	ldr	r1, [r0, #4]
 801432a:	d93d      	bls.n	80143a8 <_dtoa_r+0x318>
 801432c:	4620      	mov	r0, r4
 801432e:	f000 fec9 	bl	80150c4 <_Balloc>
 8014332:	9001      	str	r0, [sp, #4]
 8014334:	2800      	cmp	r0, #0
 8014336:	d13b      	bne.n	80143b0 <_dtoa_r+0x320>
 8014338:	4b11      	ldr	r3, [pc, #68]	; (8014380 <_dtoa_r+0x2f0>)
 801433a:	4602      	mov	r2, r0
 801433c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014340:	e6c0      	b.n	80140c4 <_dtoa_r+0x34>
 8014342:	2301      	movs	r3, #1
 8014344:	e7df      	b.n	8014306 <_dtoa_r+0x276>
 8014346:	bf00      	nop
 8014348:	636f4361 	.word	0x636f4361
 801434c:	3fd287a7 	.word	0x3fd287a7
 8014350:	8b60c8b3 	.word	0x8b60c8b3
 8014354:	3fc68a28 	.word	0x3fc68a28
 8014358:	509f79fb 	.word	0x509f79fb
 801435c:	3fd34413 	.word	0x3fd34413
 8014360:	08016811 	.word	0x08016811
 8014364:	08016828 	.word	0x08016828
 8014368:	7ff00000 	.word	0x7ff00000
 801436c:	0801680d 	.word	0x0801680d
 8014370:	08016804 	.word	0x08016804
 8014374:	080167e1 	.word	0x080167e1
 8014378:	3ff80000 	.word	0x3ff80000
 801437c:	08016978 	.word	0x08016978
 8014380:	08016883 	.word	0x08016883
 8014384:	2501      	movs	r5, #1
 8014386:	2300      	movs	r3, #0
 8014388:	9306      	str	r3, [sp, #24]
 801438a:	9508      	str	r5, [sp, #32]
 801438c:	f04f 33ff 	mov.w	r3, #4294967295
 8014390:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014394:	2200      	movs	r2, #0
 8014396:	2312      	movs	r3, #18
 8014398:	e7b0      	b.n	80142fc <_dtoa_r+0x26c>
 801439a:	2301      	movs	r3, #1
 801439c:	9308      	str	r3, [sp, #32]
 801439e:	e7f5      	b.n	801438c <_dtoa_r+0x2fc>
 80143a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80143a6:	e7b8      	b.n	801431a <_dtoa_r+0x28a>
 80143a8:	3101      	adds	r1, #1
 80143aa:	6041      	str	r1, [r0, #4]
 80143ac:	0052      	lsls	r2, r2, #1
 80143ae:	e7b8      	b.n	8014322 <_dtoa_r+0x292>
 80143b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143b2:	9a01      	ldr	r2, [sp, #4]
 80143b4:	601a      	str	r2, [r3, #0]
 80143b6:	9b03      	ldr	r3, [sp, #12]
 80143b8:	2b0e      	cmp	r3, #14
 80143ba:	f200 809d 	bhi.w	80144f8 <_dtoa_r+0x468>
 80143be:	2d00      	cmp	r5, #0
 80143c0:	f000 809a 	beq.w	80144f8 <_dtoa_r+0x468>
 80143c4:	9b00      	ldr	r3, [sp, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	dd32      	ble.n	8014430 <_dtoa_r+0x3a0>
 80143ca:	4ab7      	ldr	r2, [pc, #732]	; (80146a8 <_dtoa_r+0x618>)
 80143cc:	f003 030f 	and.w	r3, r3, #15
 80143d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80143d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80143d8:	9b00      	ldr	r3, [sp, #0]
 80143da:	05d8      	lsls	r0, r3, #23
 80143dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80143e0:	d516      	bpl.n	8014410 <_dtoa_r+0x380>
 80143e2:	4bb2      	ldr	r3, [pc, #712]	; (80146ac <_dtoa_r+0x61c>)
 80143e4:	ec51 0b19 	vmov	r0, r1, d9
 80143e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80143ec:	f7ec fa56 	bl	800089c <__aeabi_ddiv>
 80143f0:	f007 070f 	and.w	r7, r7, #15
 80143f4:	4682      	mov	sl, r0
 80143f6:	468b      	mov	fp, r1
 80143f8:	2503      	movs	r5, #3
 80143fa:	4eac      	ldr	r6, [pc, #688]	; (80146ac <_dtoa_r+0x61c>)
 80143fc:	b957      	cbnz	r7, 8014414 <_dtoa_r+0x384>
 80143fe:	4642      	mov	r2, r8
 8014400:	464b      	mov	r3, r9
 8014402:	4650      	mov	r0, sl
 8014404:	4659      	mov	r1, fp
 8014406:	f7ec fa49 	bl	800089c <__aeabi_ddiv>
 801440a:	4682      	mov	sl, r0
 801440c:	468b      	mov	fp, r1
 801440e:	e028      	b.n	8014462 <_dtoa_r+0x3d2>
 8014410:	2502      	movs	r5, #2
 8014412:	e7f2      	b.n	80143fa <_dtoa_r+0x36a>
 8014414:	07f9      	lsls	r1, r7, #31
 8014416:	d508      	bpl.n	801442a <_dtoa_r+0x39a>
 8014418:	4640      	mov	r0, r8
 801441a:	4649      	mov	r1, r9
 801441c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014420:	f7ec f912 	bl	8000648 <__aeabi_dmul>
 8014424:	3501      	adds	r5, #1
 8014426:	4680      	mov	r8, r0
 8014428:	4689      	mov	r9, r1
 801442a:	107f      	asrs	r7, r7, #1
 801442c:	3608      	adds	r6, #8
 801442e:	e7e5      	b.n	80143fc <_dtoa_r+0x36c>
 8014430:	f000 809b 	beq.w	801456a <_dtoa_r+0x4da>
 8014434:	9b00      	ldr	r3, [sp, #0]
 8014436:	4f9d      	ldr	r7, [pc, #628]	; (80146ac <_dtoa_r+0x61c>)
 8014438:	425e      	negs	r6, r3
 801443a:	4b9b      	ldr	r3, [pc, #620]	; (80146a8 <_dtoa_r+0x618>)
 801443c:	f006 020f 	and.w	r2, r6, #15
 8014440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014448:	ec51 0b19 	vmov	r0, r1, d9
 801444c:	f7ec f8fc 	bl	8000648 <__aeabi_dmul>
 8014450:	1136      	asrs	r6, r6, #4
 8014452:	4682      	mov	sl, r0
 8014454:	468b      	mov	fp, r1
 8014456:	2300      	movs	r3, #0
 8014458:	2502      	movs	r5, #2
 801445a:	2e00      	cmp	r6, #0
 801445c:	d17a      	bne.n	8014554 <_dtoa_r+0x4c4>
 801445e:	2b00      	cmp	r3, #0
 8014460:	d1d3      	bne.n	801440a <_dtoa_r+0x37a>
 8014462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014464:	2b00      	cmp	r3, #0
 8014466:	f000 8082 	beq.w	801456e <_dtoa_r+0x4de>
 801446a:	4b91      	ldr	r3, [pc, #580]	; (80146b0 <_dtoa_r+0x620>)
 801446c:	2200      	movs	r2, #0
 801446e:	4650      	mov	r0, sl
 8014470:	4659      	mov	r1, fp
 8014472:	f7ec fb5b 	bl	8000b2c <__aeabi_dcmplt>
 8014476:	2800      	cmp	r0, #0
 8014478:	d079      	beq.n	801456e <_dtoa_r+0x4de>
 801447a:	9b03      	ldr	r3, [sp, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d076      	beq.n	801456e <_dtoa_r+0x4de>
 8014480:	9b02      	ldr	r3, [sp, #8]
 8014482:	2b00      	cmp	r3, #0
 8014484:	dd36      	ble.n	80144f4 <_dtoa_r+0x464>
 8014486:	9b00      	ldr	r3, [sp, #0]
 8014488:	4650      	mov	r0, sl
 801448a:	4659      	mov	r1, fp
 801448c:	1e5f      	subs	r7, r3, #1
 801448e:	2200      	movs	r2, #0
 8014490:	4b88      	ldr	r3, [pc, #544]	; (80146b4 <_dtoa_r+0x624>)
 8014492:	f7ec f8d9 	bl	8000648 <__aeabi_dmul>
 8014496:	9e02      	ldr	r6, [sp, #8]
 8014498:	4682      	mov	sl, r0
 801449a:	468b      	mov	fp, r1
 801449c:	3501      	adds	r5, #1
 801449e:	4628      	mov	r0, r5
 80144a0:	f7ec f868 	bl	8000574 <__aeabi_i2d>
 80144a4:	4652      	mov	r2, sl
 80144a6:	465b      	mov	r3, fp
 80144a8:	f7ec f8ce 	bl	8000648 <__aeabi_dmul>
 80144ac:	4b82      	ldr	r3, [pc, #520]	; (80146b8 <_dtoa_r+0x628>)
 80144ae:	2200      	movs	r2, #0
 80144b0:	f7eb ff14 	bl	80002dc <__adddf3>
 80144b4:	46d0      	mov	r8, sl
 80144b6:	46d9      	mov	r9, fp
 80144b8:	4682      	mov	sl, r0
 80144ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80144be:	2e00      	cmp	r6, #0
 80144c0:	d158      	bne.n	8014574 <_dtoa_r+0x4e4>
 80144c2:	4b7e      	ldr	r3, [pc, #504]	; (80146bc <_dtoa_r+0x62c>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	4640      	mov	r0, r8
 80144c8:	4649      	mov	r1, r9
 80144ca:	f7eb ff05 	bl	80002d8 <__aeabi_dsub>
 80144ce:	4652      	mov	r2, sl
 80144d0:	465b      	mov	r3, fp
 80144d2:	4680      	mov	r8, r0
 80144d4:	4689      	mov	r9, r1
 80144d6:	f7ec fb47 	bl	8000b68 <__aeabi_dcmpgt>
 80144da:	2800      	cmp	r0, #0
 80144dc:	f040 8295 	bne.w	8014a0a <_dtoa_r+0x97a>
 80144e0:	4652      	mov	r2, sl
 80144e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80144e6:	4640      	mov	r0, r8
 80144e8:	4649      	mov	r1, r9
 80144ea:	f7ec fb1f 	bl	8000b2c <__aeabi_dcmplt>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	f040 8289 	bne.w	8014a06 <_dtoa_r+0x976>
 80144f4:	ec5b ab19 	vmov	sl, fp, d9
 80144f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	f2c0 8148 	blt.w	8014790 <_dtoa_r+0x700>
 8014500:	9a00      	ldr	r2, [sp, #0]
 8014502:	2a0e      	cmp	r2, #14
 8014504:	f300 8144 	bgt.w	8014790 <_dtoa_r+0x700>
 8014508:	4b67      	ldr	r3, [pc, #412]	; (80146a8 <_dtoa_r+0x618>)
 801450a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801450e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014514:	2b00      	cmp	r3, #0
 8014516:	f280 80d5 	bge.w	80146c4 <_dtoa_r+0x634>
 801451a:	9b03      	ldr	r3, [sp, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	f300 80d1 	bgt.w	80146c4 <_dtoa_r+0x634>
 8014522:	f040 826f 	bne.w	8014a04 <_dtoa_r+0x974>
 8014526:	4b65      	ldr	r3, [pc, #404]	; (80146bc <_dtoa_r+0x62c>)
 8014528:	2200      	movs	r2, #0
 801452a:	4640      	mov	r0, r8
 801452c:	4649      	mov	r1, r9
 801452e:	f7ec f88b 	bl	8000648 <__aeabi_dmul>
 8014532:	4652      	mov	r2, sl
 8014534:	465b      	mov	r3, fp
 8014536:	f7ec fb0d 	bl	8000b54 <__aeabi_dcmpge>
 801453a:	9e03      	ldr	r6, [sp, #12]
 801453c:	4637      	mov	r7, r6
 801453e:	2800      	cmp	r0, #0
 8014540:	f040 8245 	bne.w	80149ce <_dtoa_r+0x93e>
 8014544:	9d01      	ldr	r5, [sp, #4]
 8014546:	2331      	movs	r3, #49	; 0x31
 8014548:	f805 3b01 	strb.w	r3, [r5], #1
 801454c:	9b00      	ldr	r3, [sp, #0]
 801454e:	3301      	adds	r3, #1
 8014550:	9300      	str	r3, [sp, #0]
 8014552:	e240      	b.n	80149d6 <_dtoa_r+0x946>
 8014554:	07f2      	lsls	r2, r6, #31
 8014556:	d505      	bpl.n	8014564 <_dtoa_r+0x4d4>
 8014558:	e9d7 2300 	ldrd	r2, r3, [r7]
 801455c:	f7ec f874 	bl	8000648 <__aeabi_dmul>
 8014560:	3501      	adds	r5, #1
 8014562:	2301      	movs	r3, #1
 8014564:	1076      	asrs	r6, r6, #1
 8014566:	3708      	adds	r7, #8
 8014568:	e777      	b.n	801445a <_dtoa_r+0x3ca>
 801456a:	2502      	movs	r5, #2
 801456c:	e779      	b.n	8014462 <_dtoa_r+0x3d2>
 801456e:	9f00      	ldr	r7, [sp, #0]
 8014570:	9e03      	ldr	r6, [sp, #12]
 8014572:	e794      	b.n	801449e <_dtoa_r+0x40e>
 8014574:	9901      	ldr	r1, [sp, #4]
 8014576:	4b4c      	ldr	r3, [pc, #304]	; (80146a8 <_dtoa_r+0x618>)
 8014578:	4431      	add	r1, r6
 801457a:	910d      	str	r1, [sp, #52]	; 0x34
 801457c:	9908      	ldr	r1, [sp, #32]
 801457e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014586:	2900      	cmp	r1, #0
 8014588:	d043      	beq.n	8014612 <_dtoa_r+0x582>
 801458a:	494d      	ldr	r1, [pc, #308]	; (80146c0 <_dtoa_r+0x630>)
 801458c:	2000      	movs	r0, #0
 801458e:	f7ec f985 	bl	800089c <__aeabi_ddiv>
 8014592:	4652      	mov	r2, sl
 8014594:	465b      	mov	r3, fp
 8014596:	f7eb fe9f 	bl	80002d8 <__aeabi_dsub>
 801459a:	9d01      	ldr	r5, [sp, #4]
 801459c:	4682      	mov	sl, r0
 801459e:	468b      	mov	fp, r1
 80145a0:	4649      	mov	r1, r9
 80145a2:	4640      	mov	r0, r8
 80145a4:	f7ec fb00 	bl	8000ba8 <__aeabi_d2iz>
 80145a8:	4606      	mov	r6, r0
 80145aa:	f7eb ffe3 	bl	8000574 <__aeabi_i2d>
 80145ae:	4602      	mov	r2, r0
 80145b0:	460b      	mov	r3, r1
 80145b2:	4640      	mov	r0, r8
 80145b4:	4649      	mov	r1, r9
 80145b6:	f7eb fe8f 	bl	80002d8 <__aeabi_dsub>
 80145ba:	3630      	adds	r6, #48	; 0x30
 80145bc:	f805 6b01 	strb.w	r6, [r5], #1
 80145c0:	4652      	mov	r2, sl
 80145c2:	465b      	mov	r3, fp
 80145c4:	4680      	mov	r8, r0
 80145c6:	4689      	mov	r9, r1
 80145c8:	f7ec fab0 	bl	8000b2c <__aeabi_dcmplt>
 80145cc:	2800      	cmp	r0, #0
 80145ce:	d163      	bne.n	8014698 <_dtoa_r+0x608>
 80145d0:	4642      	mov	r2, r8
 80145d2:	464b      	mov	r3, r9
 80145d4:	4936      	ldr	r1, [pc, #216]	; (80146b0 <_dtoa_r+0x620>)
 80145d6:	2000      	movs	r0, #0
 80145d8:	f7eb fe7e 	bl	80002d8 <__aeabi_dsub>
 80145dc:	4652      	mov	r2, sl
 80145de:	465b      	mov	r3, fp
 80145e0:	f7ec faa4 	bl	8000b2c <__aeabi_dcmplt>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	f040 80b5 	bne.w	8014754 <_dtoa_r+0x6c4>
 80145ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ec:	429d      	cmp	r5, r3
 80145ee:	d081      	beq.n	80144f4 <_dtoa_r+0x464>
 80145f0:	4b30      	ldr	r3, [pc, #192]	; (80146b4 <_dtoa_r+0x624>)
 80145f2:	2200      	movs	r2, #0
 80145f4:	4650      	mov	r0, sl
 80145f6:	4659      	mov	r1, fp
 80145f8:	f7ec f826 	bl	8000648 <__aeabi_dmul>
 80145fc:	4b2d      	ldr	r3, [pc, #180]	; (80146b4 <_dtoa_r+0x624>)
 80145fe:	4682      	mov	sl, r0
 8014600:	468b      	mov	fp, r1
 8014602:	4640      	mov	r0, r8
 8014604:	4649      	mov	r1, r9
 8014606:	2200      	movs	r2, #0
 8014608:	f7ec f81e 	bl	8000648 <__aeabi_dmul>
 801460c:	4680      	mov	r8, r0
 801460e:	4689      	mov	r9, r1
 8014610:	e7c6      	b.n	80145a0 <_dtoa_r+0x510>
 8014612:	4650      	mov	r0, sl
 8014614:	4659      	mov	r1, fp
 8014616:	f7ec f817 	bl	8000648 <__aeabi_dmul>
 801461a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801461c:	9d01      	ldr	r5, [sp, #4]
 801461e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014620:	4682      	mov	sl, r0
 8014622:	468b      	mov	fp, r1
 8014624:	4649      	mov	r1, r9
 8014626:	4640      	mov	r0, r8
 8014628:	f7ec fabe 	bl	8000ba8 <__aeabi_d2iz>
 801462c:	4606      	mov	r6, r0
 801462e:	f7eb ffa1 	bl	8000574 <__aeabi_i2d>
 8014632:	3630      	adds	r6, #48	; 0x30
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
 8014638:	4640      	mov	r0, r8
 801463a:	4649      	mov	r1, r9
 801463c:	f7eb fe4c 	bl	80002d8 <__aeabi_dsub>
 8014640:	f805 6b01 	strb.w	r6, [r5], #1
 8014644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014646:	429d      	cmp	r5, r3
 8014648:	4680      	mov	r8, r0
 801464a:	4689      	mov	r9, r1
 801464c:	f04f 0200 	mov.w	r2, #0
 8014650:	d124      	bne.n	801469c <_dtoa_r+0x60c>
 8014652:	4b1b      	ldr	r3, [pc, #108]	; (80146c0 <_dtoa_r+0x630>)
 8014654:	4650      	mov	r0, sl
 8014656:	4659      	mov	r1, fp
 8014658:	f7eb fe40 	bl	80002dc <__adddf3>
 801465c:	4602      	mov	r2, r0
 801465e:	460b      	mov	r3, r1
 8014660:	4640      	mov	r0, r8
 8014662:	4649      	mov	r1, r9
 8014664:	f7ec fa80 	bl	8000b68 <__aeabi_dcmpgt>
 8014668:	2800      	cmp	r0, #0
 801466a:	d173      	bne.n	8014754 <_dtoa_r+0x6c4>
 801466c:	4652      	mov	r2, sl
 801466e:	465b      	mov	r3, fp
 8014670:	4913      	ldr	r1, [pc, #76]	; (80146c0 <_dtoa_r+0x630>)
 8014672:	2000      	movs	r0, #0
 8014674:	f7eb fe30 	bl	80002d8 <__aeabi_dsub>
 8014678:	4602      	mov	r2, r0
 801467a:	460b      	mov	r3, r1
 801467c:	4640      	mov	r0, r8
 801467e:	4649      	mov	r1, r9
 8014680:	f7ec fa54 	bl	8000b2c <__aeabi_dcmplt>
 8014684:	2800      	cmp	r0, #0
 8014686:	f43f af35 	beq.w	80144f4 <_dtoa_r+0x464>
 801468a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801468c:	1e6b      	subs	r3, r5, #1
 801468e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014694:	2b30      	cmp	r3, #48	; 0x30
 8014696:	d0f8      	beq.n	801468a <_dtoa_r+0x5fa>
 8014698:	9700      	str	r7, [sp, #0]
 801469a:	e049      	b.n	8014730 <_dtoa_r+0x6a0>
 801469c:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <_dtoa_r+0x624>)
 801469e:	f7eb ffd3 	bl	8000648 <__aeabi_dmul>
 80146a2:	4680      	mov	r8, r0
 80146a4:	4689      	mov	r9, r1
 80146a6:	e7bd      	b.n	8014624 <_dtoa_r+0x594>
 80146a8:	08016978 	.word	0x08016978
 80146ac:	08016950 	.word	0x08016950
 80146b0:	3ff00000 	.word	0x3ff00000
 80146b4:	40240000 	.word	0x40240000
 80146b8:	401c0000 	.word	0x401c0000
 80146bc:	40140000 	.word	0x40140000
 80146c0:	3fe00000 	.word	0x3fe00000
 80146c4:	9d01      	ldr	r5, [sp, #4]
 80146c6:	4656      	mov	r6, sl
 80146c8:	465f      	mov	r7, fp
 80146ca:	4642      	mov	r2, r8
 80146cc:	464b      	mov	r3, r9
 80146ce:	4630      	mov	r0, r6
 80146d0:	4639      	mov	r1, r7
 80146d2:	f7ec f8e3 	bl	800089c <__aeabi_ddiv>
 80146d6:	f7ec fa67 	bl	8000ba8 <__aeabi_d2iz>
 80146da:	4682      	mov	sl, r0
 80146dc:	f7eb ff4a 	bl	8000574 <__aeabi_i2d>
 80146e0:	4642      	mov	r2, r8
 80146e2:	464b      	mov	r3, r9
 80146e4:	f7eb ffb0 	bl	8000648 <__aeabi_dmul>
 80146e8:	4602      	mov	r2, r0
 80146ea:	460b      	mov	r3, r1
 80146ec:	4630      	mov	r0, r6
 80146ee:	4639      	mov	r1, r7
 80146f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80146f4:	f7eb fdf0 	bl	80002d8 <__aeabi_dsub>
 80146f8:	f805 6b01 	strb.w	r6, [r5], #1
 80146fc:	9e01      	ldr	r6, [sp, #4]
 80146fe:	9f03      	ldr	r7, [sp, #12]
 8014700:	1bae      	subs	r6, r5, r6
 8014702:	42b7      	cmp	r7, r6
 8014704:	4602      	mov	r2, r0
 8014706:	460b      	mov	r3, r1
 8014708:	d135      	bne.n	8014776 <_dtoa_r+0x6e6>
 801470a:	f7eb fde7 	bl	80002dc <__adddf3>
 801470e:	4642      	mov	r2, r8
 8014710:	464b      	mov	r3, r9
 8014712:	4606      	mov	r6, r0
 8014714:	460f      	mov	r7, r1
 8014716:	f7ec fa27 	bl	8000b68 <__aeabi_dcmpgt>
 801471a:	b9d0      	cbnz	r0, 8014752 <_dtoa_r+0x6c2>
 801471c:	4642      	mov	r2, r8
 801471e:	464b      	mov	r3, r9
 8014720:	4630      	mov	r0, r6
 8014722:	4639      	mov	r1, r7
 8014724:	f7ec f9f8 	bl	8000b18 <__aeabi_dcmpeq>
 8014728:	b110      	cbz	r0, 8014730 <_dtoa_r+0x6a0>
 801472a:	f01a 0f01 	tst.w	sl, #1
 801472e:	d110      	bne.n	8014752 <_dtoa_r+0x6c2>
 8014730:	4620      	mov	r0, r4
 8014732:	ee18 1a10 	vmov	r1, s16
 8014736:	f000 fd05 	bl	8015144 <_Bfree>
 801473a:	2300      	movs	r3, #0
 801473c:	9800      	ldr	r0, [sp, #0]
 801473e:	702b      	strb	r3, [r5, #0]
 8014740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014742:	3001      	adds	r0, #1
 8014744:	6018      	str	r0, [r3, #0]
 8014746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014748:	2b00      	cmp	r3, #0
 801474a:	f43f acf1 	beq.w	8014130 <_dtoa_r+0xa0>
 801474e:	601d      	str	r5, [r3, #0]
 8014750:	e4ee      	b.n	8014130 <_dtoa_r+0xa0>
 8014752:	9f00      	ldr	r7, [sp, #0]
 8014754:	462b      	mov	r3, r5
 8014756:	461d      	mov	r5, r3
 8014758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801475c:	2a39      	cmp	r2, #57	; 0x39
 801475e:	d106      	bne.n	801476e <_dtoa_r+0x6de>
 8014760:	9a01      	ldr	r2, [sp, #4]
 8014762:	429a      	cmp	r2, r3
 8014764:	d1f7      	bne.n	8014756 <_dtoa_r+0x6c6>
 8014766:	9901      	ldr	r1, [sp, #4]
 8014768:	2230      	movs	r2, #48	; 0x30
 801476a:	3701      	adds	r7, #1
 801476c:	700a      	strb	r2, [r1, #0]
 801476e:	781a      	ldrb	r2, [r3, #0]
 8014770:	3201      	adds	r2, #1
 8014772:	701a      	strb	r2, [r3, #0]
 8014774:	e790      	b.n	8014698 <_dtoa_r+0x608>
 8014776:	4ba6      	ldr	r3, [pc, #664]	; (8014a10 <_dtoa_r+0x980>)
 8014778:	2200      	movs	r2, #0
 801477a:	f7eb ff65 	bl	8000648 <__aeabi_dmul>
 801477e:	2200      	movs	r2, #0
 8014780:	2300      	movs	r3, #0
 8014782:	4606      	mov	r6, r0
 8014784:	460f      	mov	r7, r1
 8014786:	f7ec f9c7 	bl	8000b18 <__aeabi_dcmpeq>
 801478a:	2800      	cmp	r0, #0
 801478c:	d09d      	beq.n	80146ca <_dtoa_r+0x63a>
 801478e:	e7cf      	b.n	8014730 <_dtoa_r+0x6a0>
 8014790:	9a08      	ldr	r2, [sp, #32]
 8014792:	2a00      	cmp	r2, #0
 8014794:	f000 80d7 	beq.w	8014946 <_dtoa_r+0x8b6>
 8014798:	9a06      	ldr	r2, [sp, #24]
 801479a:	2a01      	cmp	r2, #1
 801479c:	f300 80ba 	bgt.w	8014914 <_dtoa_r+0x884>
 80147a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147a2:	2a00      	cmp	r2, #0
 80147a4:	f000 80b2 	beq.w	801490c <_dtoa_r+0x87c>
 80147a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80147ac:	9e07      	ldr	r6, [sp, #28]
 80147ae:	9d04      	ldr	r5, [sp, #16]
 80147b0:	9a04      	ldr	r2, [sp, #16]
 80147b2:	441a      	add	r2, r3
 80147b4:	9204      	str	r2, [sp, #16]
 80147b6:	9a05      	ldr	r2, [sp, #20]
 80147b8:	2101      	movs	r1, #1
 80147ba:	441a      	add	r2, r3
 80147bc:	4620      	mov	r0, r4
 80147be:	9205      	str	r2, [sp, #20]
 80147c0:	f000 fd78 	bl	80152b4 <__i2b>
 80147c4:	4607      	mov	r7, r0
 80147c6:	2d00      	cmp	r5, #0
 80147c8:	dd0c      	ble.n	80147e4 <_dtoa_r+0x754>
 80147ca:	9b05      	ldr	r3, [sp, #20]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	dd09      	ble.n	80147e4 <_dtoa_r+0x754>
 80147d0:	42ab      	cmp	r3, r5
 80147d2:	9a04      	ldr	r2, [sp, #16]
 80147d4:	bfa8      	it	ge
 80147d6:	462b      	movge	r3, r5
 80147d8:	1ad2      	subs	r2, r2, r3
 80147da:	9204      	str	r2, [sp, #16]
 80147dc:	9a05      	ldr	r2, [sp, #20]
 80147de:	1aed      	subs	r5, r5, r3
 80147e0:	1ad3      	subs	r3, r2, r3
 80147e2:	9305      	str	r3, [sp, #20]
 80147e4:	9b07      	ldr	r3, [sp, #28]
 80147e6:	b31b      	cbz	r3, 8014830 <_dtoa_r+0x7a0>
 80147e8:	9b08      	ldr	r3, [sp, #32]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f000 80af 	beq.w	801494e <_dtoa_r+0x8be>
 80147f0:	2e00      	cmp	r6, #0
 80147f2:	dd13      	ble.n	801481c <_dtoa_r+0x78c>
 80147f4:	4639      	mov	r1, r7
 80147f6:	4632      	mov	r2, r6
 80147f8:	4620      	mov	r0, r4
 80147fa:	f000 fe1b 	bl	8015434 <__pow5mult>
 80147fe:	ee18 2a10 	vmov	r2, s16
 8014802:	4601      	mov	r1, r0
 8014804:	4607      	mov	r7, r0
 8014806:	4620      	mov	r0, r4
 8014808:	f000 fd6a 	bl	80152e0 <__multiply>
 801480c:	ee18 1a10 	vmov	r1, s16
 8014810:	4680      	mov	r8, r0
 8014812:	4620      	mov	r0, r4
 8014814:	f000 fc96 	bl	8015144 <_Bfree>
 8014818:	ee08 8a10 	vmov	s16, r8
 801481c:	9b07      	ldr	r3, [sp, #28]
 801481e:	1b9a      	subs	r2, r3, r6
 8014820:	d006      	beq.n	8014830 <_dtoa_r+0x7a0>
 8014822:	ee18 1a10 	vmov	r1, s16
 8014826:	4620      	mov	r0, r4
 8014828:	f000 fe04 	bl	8015434 <__pow5mult>
 801482c:	ee08 0a10 	vmov	s16, r0
 8014830:	2101      	movs	r1, #1
 8014832:	4620      	mov	r0, r4
 8014834:	f000 fd3e 	bl	80152b4 <__i2b>
 8014838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801483a:	2b00      	cmp	r3, #0
 801483c:	4606      	mov	r6, r0
 801483e:	f340 8088 	ble.w	8014952 <_dtoa_r+0x8c2>
 8014842:	461a      	mov	r2, r3
 8014844:	4601      	mov	r1, r0
 8014846:	4620      	mov	r0, r4
 8014848:	f000 fdf4 	bl	8015434 <__pow5mult>
 801484c:	9b06      	ldr	r3, [sp, #24]
 801484e:	2b01      	cmp	r3, #1
 8014850:	4606      	mov	r6, r0
 8014852:	f340 8081 	ble.w	8014958 <_dtoa_r+0x8c8>
 8014856:	f04f 0800 	mov.w	r8, #0
 801485a:	6933      	ldr	r3, [r6, #16]
 801485c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014860:	6918      	ldr	r0, [r3, #16]
 8014862:	f000 fcd7 	bl	8015214 <__hi0bits>
 8014866:	f1c0 0020 	rsb	r0, r0, #32
 801486a:	9b05      	ldr	r3, [sp, #20]
 801486c:	4418      	add	r0, r3
 801486e:	f010 001f 	ands.w	r0, r0, #31
 8014872:	f000 8092 	beq.w	801499a <_dtoa_r+0x90a>
 8014876:	f1c0 0320 	rsb	r3, r0, #32
 801487a:	2b04      	cmp	r3, #4
 801487c:	f340 808a 	ble.w	8014994 <_dtoa_r+0x904>
 8014880:	f1c0 001c 	rsb	r0, r0, #28
 8014884:	9b04      	ldr	r3, [sp, #16]
 8014886:	4403      	add	r3, r0
 8014888:	9304      	str	r3, [sp, #16]
 801488a:	9b05      	ldr	r3, [sp, #20]
 801488c:	4403      	add	r3, r0
 801488e:	4405      	add	r5, r0
 8014890:	9305      	str	r3, [sp, #20]
 8014892:	9b04      	ldr	r3, [sp, #16]
 8014894:	2b00      	cmp	r3, #0
 8014896:	dd07      	ble.n	80148a8 <_dtoa_r+0x818>
 8014898:	ee18 1a10 	vmov	r1, s16
 801489c:	461a      	mov	r2, r3
 801489e:	4620      	mov	r0, r4
 80148a0:	f000 fe22 	bl	80154e8 <__lshift>
 80148a4:	ee08 0a10 	vmov	s16, r0
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	dd05      	ble.n	80148ba <_dtoa_r+0x82a>
 80148ae:	4631      	mov	r1, r6
 80148b0:	461a      	mov	r2, r3
 80148b2:	4620      	mov	r0, r4
 80148b4:	f000 fe18 	bl	80154e8 <__lshift>
 80148b8:	4606      	mov	r6, r0
 80148ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d06e      	beq.n	801499e <_dtoa_r+0x90e>
 80148c0:	ee18 0a10 	vmov	r0, s16
 80148c4:	4631      	mov	r1, r6
 80148c6:	f000 fe7f 	bl	80155c8 <__mcmp>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	da67      	bge.n	801499e <_dtoa_r+0x90e>
 80148ce:	9b00      	ldr	r3, [sp, #0]
 80148d0:	3b01      	subs	r3, #1
 80148d2:	ee18 1a10 	vmov	r1, s16
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	220a      	movs	r2, #10
 80148da:	2300      	movs	r3, #0
 80148dc:	4620      	mov	r0, r4
 80148de:	f000 fc53 	bl	8015188 <__multadd>
 80148e2:	9b08      	ldr	r3, [sp, #32]
 80148e4:	ee08 0a10 	vmov	s16, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 81b1 	beq.w	8014c50 <_dtoa_r+0xbc0>
 80148ee:	2300      	movs	r3, #0
 80148f0:	4639      	mov	r1, r7
 80148f2:	220a      	movs	r2, #10
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 fc47 	bl	8015188 <__multadd>
 80148fa:	9b02      	ldr	r3, [sp, #8]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	4607      	mov	r7, r0
 8014900:	f300 808e 	bgt.w	8014a20 <_dtoa_r+0x990>
 8014904:	9b06      	ldr	r3, [sp, #24]
 8014906:	2b02      	cmp	r3, #2
 8014908:	dc51      	bgt.n	80149ae <_dtoa_r+0x91e>
 801490a:	e089      	b.n	8014a20 <_dtoa_r+0x990>
 801490c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801490e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014912:	e74b      	b.n	80147ac <_dtoa_r+0x71c>
 8014914:	9b03      	ldr	r3, [sp, #12]
 8014916:	1e5e      	subs	r6, r3, #1
 8014918:	9b07      	ldr	r3, [sp, #28]
 801491a:	42b3      	cmp	r3, r6
 801491c:	bfbf      	itttt	lt
 801491e:	9b07      	ldrlt	r3, [sp, #28]
 8014920:	9607      	strlt	r6, [sp, #28]
 8014922:	1af2      	sublt	r2, r6, r3
 8014924:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014926:	bfb6      	itet	lt
 8014928:	189b      	addlt	r3, r3, r2
 801492a:	1b9e      	subge	r6, r3, r6
 801492c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801492e:	9b03      	ldr	r3, [sp, #12]
 8014930:	bfb8      	it	lt
 8014932:	2600      	movlt	r6, #0
 8014934:	2b00      	cmp	r3, #0
 8014936:	bfb7      	itett	lt
 8014938:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801493c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014940:	1a9d      	sublt	r5, r3, r2
 8014942:	2300      	movlt	r3, #0
 8014944:	e734      	b.n	80147b0 <_dtoa_r+0x720>
 8014946:	9e07      	ldr	r6, [sp, #28]
 8014948:	9d04      	ldr	r5, [sp, #16]
 801494a:	9f08      	ldr	r7, [sp, #32]
 801494c:	e73b      	b.n	80147c6 <_dtoa_r+0x736>
 801494e:	9a07      	ldr	r2, [sp, #28]
 8014950:	e767      	b.n	8014822 <_dtoa_r+0x792>
 8014952:	9b06      	ldr	r3, [sp, #24]
 8014954:	2b01      	cmp	r3, #1
 8014956:	dc18      	bgt.n	801498a <_dtoa_r+0x8fa>
 8014958:	f1ba 0f00 	cmp.w	sl, #0
 801495c:	d115      	bne.n	801498a <_dtoa_r+0x8fa>
 801495e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014962:	b993      	cbnz	r3, 801498a <_dtoa_r+0x8fa>
 8014964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014968:	0d1b      	lsrs	r3, r3, #20
 801496a:	051b      	lsls	r3, r3, #20
 801496c:	b183      	cbz	r3, 8014990 <_dtoa_r+0x900>
 801496e:	9b04      	ldr	r3, [sp, #16]
 8014970:	3301      	adds	r3, #1
 8014972:	9304      	str	r3, [sp, #16]
 8014974:	9b05      	ldr	r3, [sp, #20]
 8014976:	3301      	adds	r3, #1
 8014978:	9305      	str	r3, [sp, #20]
 801497a:	f04f 0801 	mov.w	r8, #1
 801497e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014980:	2b00      	cmp	r3, #0
 8014982:	f47f af6a 	bne.w	801485a <_dtoa_r+0x7ca>
 8014986:	2001      	movs	r0, #1
 8014988:	e76f      	b.n	801486a <_dtoa_r+0x7da>
 801498a:	f04f 0800 	mov.w	r8, #0
 801498e:	e7f6      	b.n	801497e <_dtoa_r+0x8ee>
 8014990:	4698      	mov	r8, r3
 8014992:	e7f4      	b.n	801497e <_dtoa_r+0x8ee>
 8014994:	f43f af7d 	beq.w	8014892 <_dtoa_r+0x802>
 8014998:	4618      	mov	r0, r3
 801499a:	301c      	adds	r0, #28
 801499c:	e772      	b.n	8014884 <_dtoa_r+0x7f4>
 801499e:	9b03      	ldr	r3, [sp, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	dc37      	bgt.n	8014a14 <_dtoa_r+0x984>
 80149a4:	9b06      	ldr	r3, [sp, #24]
 80149a6:	2b02      	cmp	r3, #2
 80149a8:	dd34      	ble.n	8014a14 <_dtoa_r+0x984>
 80149aa:	9b03      	ldr	r3, [sp, #12]
 80149ac:	9302      	str	r3, [sp, #8]
 80149ae:	9b02      	ldr	r3, [sp, #8]
 80149b0:	b96b      	cbnz	r3, 80149ce <_dtoa_r+0x93e>
 80149b2:	4631      	mov	r1, r6
 80149b4:	2205      	movs	r2, #5
 80149b6:	4620      	mov	r0, r4
 80149b8:	f000 fbe6 	bl	8015188 <__multadd>
 80149bc:	4601      	mov	r1, r0
 80149be:	4606      	mov	r6, r0
 80149c0:	ee18 0a10 	vmov	r0, s16
 80149c4:	f000 fe00 	bl	80155c8 <__mcmp>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	f73f adbb 	bgt.w	8014544 <_dtoa_r+0x4b4>
 80149ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149d0:	9d01      	ldr	r5, [sp, #4]
 80149d2:	43db      	mvns	r3, r3
 80149d4:	9300      	str	r3, [sp, #0]
 80149d6:	f04f 0800 	mov.w	r8, #0
 80149da:	4631      	mov	r1, r6
 80149dc:	4620      	mov	r0, r4
 80149de:	f000 fbb1 	bl	8015144 <_Bfree>
 80149e2:	2f00      	cmp	r7, #0
 80149e4:	f43f aea4 	beq.w	8014730 <_dtoa_r+0x6a0>
 80149e8:	f1b8 0f00 	cmp.w	r8, #0
 80149ec:	d005      	beq.n	80149fa <_dtoa_r+0x96a>
 80149ee:	45b8      	cmp	r8, r7
 80149f0:	d003      	beq.n	80149fa <_dtoa_r+0x96a>
 80149f2:	4641      	mov	r1, r8
 80149f4:	4620      	mov	r0, r4
 80149f6:	f000 fba5 	bl	8015144 <_Bfree>
 80149fa:	4639      	mov	r1, r7
 80149fc:	4620      	mov	r0, r4
 80149fe:	f000 fba1 	bl	8015144 <_Bfree>
 8014a02:	e695      	b.n	8014730 <_dtoa_r+0x6a0>
 8014a04:	2600      	movs	r6, #0
 8014a06:	4637      	mov	r7, r6
 8014a08:	e7e1      	b.n	80149ce <_dtoa_r+0x93e>
 8014a0a:	9700      	str	r7, [sp, #0]
 8014a0c:	4637      	mov	r7, r6
 8014a0e:	e599      	b.n	8014544 <_dtoa_r+0x4b4>
 8014a10:	40240000 	.word	0x40240000
 8014a14:	9b08      	ldr	r3, [sp, #32]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	f000 80ca 	beq.w	8014bb0 <_dtoa_r+0xb20>
 8014a1c:	9b03      	ldr	r3, [sp, #12]
 8014a1e:	9302      	str	r3, [sp, #8]
 8014a20:	2d00      	cmp	r5, #0
 8014a22:	dd05      	ble.n	8014a30 <_dtoa_r+0x9a0>
 8014a24:	4639      	mov	r1, r7
 8014a26:	462a      	mov	r2, r5
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f000 fd5d 	bl	80154e8 <__lshift>
 8014a2e:	4607      	mov	r7, r0
 8014a30:	f1b8 0f00 	cmp.w	r8, #0
 8014a34:	d05b      	beq.n	8014aee <_dtoa_r+0xa5e>
 8014a36:	6879      	ldr	r1, [r7, #4]
 8014a38:	4620      	mov	r0, r4
 8014a3a:	f000 fb43 	bl	80150c4 <_Balloc>
 8014a3e:	4605      	mov	r5, r0
 8014a40:	b928      	cbnz	r0, 8014a4e <_dtoa_r+0x9be>
 8014a42:	4b87      	ldr	r3, [pc, #540]	; (8014c60 <_dtoa_r+0xbd0>)
 8014a44:	4602      	mov	r2, r0
 8014a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014a4a:	f7ff bb3b 	b.w	80140c4 <_dtoa_r+0x34>
 8014a4e:	693a      	ldr	r2, [r7, #16]
 8014a50:	3202      	adds	r2, #2
 8014a52:	0092      	lsls	r2, r2, #2
 8014a54:	f107 010c 	add.w	r1, r7, #12
 8014a58:	300c      	adds	r0, #12
 8014a5a:	f7fe fcbf 	bl	80133dc <memcpy>
 8014a5e:	2201      	movs	r2, #1
 8014a60:	4629      	mov	r1, r5
 8014a62:	4620      	mov	r0, r4
 8014a64:	f000 fd40 	bl	80154e8 <__lshift>
 8014a68:	9b01      	ldr	r3, [sp, #4]
 8014a6a:	f103 0901 	add.w	r9, r3, #1
 8014a6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014a72:	4413      	add	r3, r2
 8014a74:	9305      	str	r3, [sp, #20]
 8014a76:	f00a 0301 	and.w	r3, sl, #1
 8014a7a:	46b8      	mov	r8, r7
 8014a7c:	9304      	str	r3, [sp, #16]
 8014a7e:	4607      	mov	r7, r0
 8014a80:	4631      	mov	r1, r6
 8014a82:	ee18 0a10 	vmov	r0, s16
 8014a86:	f7ff fa77 	bl	8013f78 <quorem>
 8014a8a:	4641      	mov	r1, r8
 8014a8c:	9002      	str	r0, [sp, #8]
 8014a8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014a92:	ee18 0a10 	vmov	r0, s16
 8014a96:	f000 fd97 	bl	80155c8 <__mcmp>
 8014a9a:	463a      	mov	r2, r7
 8014a9c:	9003      	str	r0, [sp, #12]
 8014a9e:	4631      	mov	r1, r6
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f000 fdad 	bl	8015600 <__mdiff>
 8014aa6:	68c2      	ldr	r2, [r0, #12]
 8014aa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8014aac:	4605      	mov	r5, r0
 8014aae:	bb02      	cbnz	r2, 8014af2 <_dtoa_r+0xa62>
 8014ab0:	4601      	mov	r1, r0
 8014ab2:	ee18 0a10 	vmov	r0, s16
 8014ab6:	f000 fd87 	bl	80155c8 <__mcmp>
 8014aba:	4602      	mov	r2, r0
 8014abc:	4629      	mov	r1, r5
 8014abe:	4620      	mov	r0, r4
 8014ac0:	9207      	str	r2, [sp, #28]
 8014ac2:	f000 fb3f 	bl	8015144 <_Bfree>
 8014ac6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014aca:	ea43 0102 	orr.w	r1, r3, r2
 8014ace:	9b04      	ldr	r3, [sp, #16]
 8014ad0:	430b      	orrs	r3, r1
 8014ad2:	464d      	mov	r5, r9
 8014ad4:	d10f      	bne.n	8014af6 <_dtoa_r+0xa66>
 8014ad6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014ada:	d02a      	beq.n	8014b32 <_dtoa_r+0xaa2>
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd02      	ble.n	8014ae8 <_dtoa_r+0xa58>
 8014ae2:	9b02      	ldr	r3, [sp, #8]
 8014ae4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014ae8:	f88b a000 	strb.w	sl, [fp]
 8014aec:	e775      	b.n	80149da <_dtoa_r+0x94a>
 8014aee:	4638      	mov	r0, r7
 8014af0:	e7ba      	b.n	8014a68 <_dtoa_r+0x9d8>
 8014af2:	2201      	movs	r2, #1
 8014af4:	e7e2      	b.n	8014abc <_dtoa_r+0xa2c>
 8014af6:	9b03      	ldr	r3, [sp, #12]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	db04      	blt.n	8014b06 <_dtoa_r+0xa76>
 8014afc:	9906      	ldr	r1, [sp, #24]
 8014afe:	430b      	orrs	r3, r1
 8014b00:	9904      	ldr	r1, [sp, #16]
 8014b02:	430b      	orrs	r3, r1
 8014b04:	d122      	bne.n	8014b4c <_dtoa_r+0xabc>
 8014b06:	2a00      	cmp	r2, #0
 8014b08:	ddee      	ble.n	8014ae8 <_dtoa_r+0xa58>
 8014b0a:	ee18 1a10 	vmov	r1, s16
 8014b0e:	2201      	movs	r2, #1
 8014b10:	4620      	mov	r0, r4
 8014b12:	f000 fce9 	bl	80154e8 <__lshift>
 8014b16:	4631      	mov	r1, r6
 8014b18:	ee08 0a10 	vmov	s16, r0
 8014b1c:	f000 fd54 	bl	80155c8 <__mcmp>
 8014b20:	2800      	cmp	r0, #0
 8014b22:	dc03      	bgt.n	8014b2c <_dtoa_r+0xa9c>
 8014b24:	d1e0      	bne.n	8014ae8 <_dtoa_r+0xa58>
 8014b26:	f01a 0f01 	tst.w	sl, #1
 8014b2a:	d0dd      	beq.n	8014ae8 <_dtoa_r+0xa58>
 8014b2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014b30:	d1d7      	bne.n	8014ae2 <_dtoa_r+0xa52>
 8014b32:	2339      	movs	r3, #57	; 0x39
 8014b34:	f88b 3000 	strb.w	r3, [fp]
 8014b38:	462b      	mov	r3, r5
 8014b3a:	461d      	mov	r5, r3
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014b42:	2a39      	cmp	r2, #57	; 0x39
 8014b44:	d071      	beq.n	8014c2a <_dtoa_r+0xb9a>
 8014b46:	3201      	adds	r2, #1
 8014b48:	701a      	strb	r2, [r3, #0]
 8014b4a:	e746      	b.n	80149da <_dtoa_r+0x94a>
 8014b4c:	2a00      	cmp	r2, #0
 8014b4e:	dd07      	ble.n	8014b60 <_dtoa_r+0xad0>
 8014b50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014b54:	d0ed      	beq.n	8014b32 <_dtoa_r+0xaa2>
 8014b56:	f10a 0301 	add.w	r3, sl, #1
 8014b5a:	f88b 3000 	strb.w	r3, [fp]
 8014b5e:	e73c      	b.n	80149da <_dtoa_r+0x94a>
 8014b60:	9b05      	ldr	r3, [sp, #20]
 8014b62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014b66:	4599      	cmp	r9, r3
 8014b68:	d047      	beq.n	8014bfa <_dtoa_r+0xb6a>
 8014b6a:	ee18 1a10 	vmov	r1, s16
 8014b6e:	2300      	movs	r3, #0
 8014b70:	220a      	movs	r2, #10
 8014b72:	4620      	mov	r0, r4
 8014b74:	f000 fb08 	bl	8015188 <__multadd>
 8014b78:	45b8      	cmp	r8, r7
 8014b7a:	ee08 0a10 	vmov	s16, r0
 8014b7e:	f04f 0300 	mov.w	r3, #0
 8014b82:	f04f 020a 	mov.w	r2, #10
 8014b86:	4641      	mov	r1, r8
 8014b88:	4620      	mov	r0, r4
 8014b8a:	d106      	bne.n	8014b9a <_dtoa_r+0xb0a>
 8014b8c:	f000 fafc 	bl	8015188 <__multadd>
 8014b90:	4680      	mov	r8, r0
 8014b92:	4607      	mov	r7, r0
 8014b94:	f109 0901 	add.w	r9, r9, #1
 8014b98:	e772      	b.n	8014a80 <_dtoa_r+0x9f0>
 8014b9a:	f000 faf5 	bl	8015188 <__multadd>
 8014b9e:	4639      	mov	r1, r7
 8014ba0:	4680      	mov	r8, r0
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	220a      	movs	r2, #10
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f000 faee 	bl	8015188 <__multadd>
 8014bac:	4607      	mov	r7, r0
 8014bae:	e7f1      	b.n	8014b94 <_dtoa_r+0xb04>
 8014bb0:	9b03      	ldr	r3, [sp, #12]
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	9d01      	ldr	r5, [sp, #4]
 8014bb6:	ee18 0a10 	vmov	r0, s16
 8014bba:	4631      	mov	r1, r6
 8014bbc:	f7ff f9dc 	bl	8013f78 <quorem>
 8014bc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014bc4:	9b01      	ldr	r3, [sp, #4]
 8014bc6:	f805 ab01 	strb.w	sl, [r5], #1
 8014bca:	1aea      	subs	r2, r5, r3
 8014bcc:	9b02      	ldr	r3, [sp, #8]
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	dd09      	ble.n	8014be6 <_dtoa_r+0xb56>
 8014bd2:	ee18 1a10 	vmov	r1, s16
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	220a      	movs	r2, #10
 8014bda:	4620      	mov	r0, r4
 8014bdc:	f000 fad4 	bl	8015188 <__multadd>
 8014be0:	ee08 0a10 	vmov	s16, r0
 8014be4:	e7e7      	b.n	8014bb6 <_dtoa_r+0xb26>
 8014be6:	9b02      	ldr	r3, [sp, #8]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	bfc8      	it	gt
 8014bec:	461d      	movgt	r5, r3
 8014bee:	9b01      	ldr	r3, [sp, #4]
 8014bf0:	bfd8      	it	le
 8014bf2:	2501      	movle	r5, #1
 8014bf4:	441d      	add	r5, r3
 8014bf6:	f04f 0800 	mov.w	r8, #0
 8014bfa:	ee18 1a10 	vmov	r1, s16
 8014bfe:	2201      	movs	r2, #1
 8014c00:	4620      	mov	r0, r4
 8014c02:	f000 fc71 	bl	80154e8 <__lshift>
 8014c06:	4631      	mov	r1, r6
 8014c08:	ee08 0a10 	vmov	s16, r0
 8014c0c:	f000 fcdc 	bl	80155c8 <__mcmp>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	dc91      	bgt.n	8014b38 <_dtoa_r+0xaa8>
 8014c14:	d102      	bne.n	8014c1c <_dtoa_r+0xb8c>
 8014c16:	f01a 0f01 	tst.w	sl, #1
 8014c1a:	d18d      	bne.n	8014b38 <_dtoa_r+0xaa8>
 8014c1c:	462b      	mov	r3, r5
 8014c1e:	461d      	mov	r5, r3
 8014c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c24:	2a30      	cmp	r2, #48	; 0x30
 8014c26:	d0fa      	beq.n	8014c1e <_dtoa_r+0xb8e>
 8014c28:	e6d7      	b.n	80149da <_dtoa_r+0x94a>
 8014c2a:	9a01      	ldr	r2, [sp, #4]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d184      	bne.n	8014b3a <_dtoa_r+0xaaa>
 8014c30:	9b00      	ldr	r3, [sp, #0]
 8014c32:	3301      	adds	r3, #1
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	2331      	movs	r3, #49	; 0x31
 8014c38:	7013      	strb	r3, [r2, #0]
 8014c3a:	e6ce      	b.n	80149da <_dtoa_r+0x94a>
 8014c3c:	4b09      	ldr	r3, [pc, #36]	; (8014c64 <_dtoa_r+0xbd4>)
 8014c3e:	f7ff ba95 	b.w	801416c <_dtoa_r+0xdc>
 8014c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f47f aa6e 	bne.w	8014126 <_dtoa_r+0x96>
 8014c4a:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <_dtoa_r+0xbd8>)
 8014c4c:	f7ff ba8e 	b.w	801416c <_dtoa_r+0xdc>
 8014c50:	9b02      	ldr	r3, [sp, #8]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	dcae      	bgt.n	8014bb4 <_dtoa_r+0xb24>
 8014c56:	9b06      	ldr	r3, [sp, #24]
 8014c58:	2b02      	cmp	r3, #2
 8014c5a:	f73f aea8 	bgt.w	80149ae <_dtoa_r+0x91e>
 8014c5e:	e7a9      	b.n	8014bb4 <_dtoa_r+0xb24>
 8014c60:	08016883 	.word	0x08016883
 8014c64:	080167e0 	.word	0x080167e0
 8014c68:	08016804 	.word	0x08016804

08014c6c <__sflush_r>:
 8014c6c:	898a      	ldrh	r2, [r1, #12]
 8014c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c72:	4605      	mov	r5, r0
 8014c74:	0710      	lsls	r0, r2, #28
 8014c76:	460c      	mov	r4, r1
 8014c78:	d458      	bmi.n	8014d2c <__sflush_r+0xc0>
 8014c7a:	684b      	ldr	r3, [r1, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	dc05      	bgt.n	8014c8c <__sflush_r+0x20>
 8014c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	dc02      	bgt.n	8014c8c <__sflush_r+0x20>
 8014c86:	2000      	movs	r0, #0
 8014c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c8e:	2e00      	cmp	r6, #0
 8014c90:	d0f9      	beq.n	8014c86 <__sflush_r+0x1a>
 8014c92:	2300      	movs	r3, #0
 8014c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c98:	682f      	ldr	r7, [r5, #0]
 8014c9a:	602b      	str	r3, [r5, #0]
 8014c9c:	d032      	beq.n	8014d04 <__sflush_r+0x98>
 8014c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ca0:	89a3      	ldrh	r3, [r4, #12]
 8014ca2:	075a      	lsls	r2, r3, #29
 8014ca4:	d505      	bpl.n	8014cb2 <__sflush_r+0x46>
 8014ca6:	6863      	ldr	r3, [r4, #4]
 8014ca8:	1ac0      	subs	r0, r0, r3
 8014caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cac:	b10b      	cbz	r3, 8014cb2 <__sflush_r+0x46>
 8014cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cb0:	1ac0      	subs	r0, r0, r3
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cb8:	6a21      	ldr	r1, [r4, #32]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	47b0      	blx	r6
 8014cbe:	1c43      	adds	r3, r0, #1
 8014cc0:	89a3      	ldrh	r3, [r4, #12]
 8014cc2:	d106      	bne.n	8014cd2 <__sflush_r+0x66>
 8014cc4:	6829      	ldr	r1, [r5, #0]
 8014cc6:	291d      	cmp	r1, #29
 8014cc8:	d82c      	bhi.n	8014d24 <__sflush_r+0xb8>
 8014cca:	4a2a      	ldr	r2, [pc, #168]	; (8014d74 <__sflush_r+0x108>)
 8014ccc:	40ca      	lsrs	r2, r1
 8014cce:	07d6      	lsls	r6, r2, #31
 8014cd0:	d528      	bpl.n	8014d24 <__sflush_r+0xb8>
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	6062      	str	r2, [r4, #4]
 8014cd6:	04d9      	lsls	r1, r3, #19
 8014cd8:	6922      	ldr	r2, [r4, #16]
 8014cda:	6022      	str	r2, [r4, #0]
 8014cdc:	d504      	bpl.n	8014ce8 <__sflush_r+0x7c>
 8014cde:	1c42      	adds	r2, r0, #1
 8014ce0:	d101      	bne.n	8014ce6 <__sflush_r+0x7a>
 8014ce2:	682b      	ldr	r3, [r5, #0]
 8014ce4:	b903      	cbnz	r3, 8014ce8 <__sflush_r+0x7c>
 8014ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8014ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cea:	602f      	str	r7, [r5, #0]
 8014cec:	2900      	cmp	r1, #0
 8014cee:	d0ca      	beq.n	8014c86 <__sflush_r+0x1a>
 8014cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cf4:	4299      	cmp	r1, r3
 8014cf6:	d002      	beq.n	8014cfe <__sflush_r+0x92>
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	f000 fd7d 	bl	80157f8 <_free_r>
 8014cfe:	2000      	movs	r0, #0
 8014d00:	6360      	str	r0, [r4, #52]	; 0x34
 8014d02:	e7c1      	b.n	8014c88 <__sflush_r+0x1c>
 8014d04:	6a21      	ldr	r1, [r4, #32]
 8014d06:	2301      	movs	r3, #1
 8014d08:	4628      	mov	r0, r5
 8014d0a:	47b0      	blx	r6
 8014d0c:	1c41      	adds	r1, r0, #1
 8014d0e:	d1c7      	bne.n	8014ca0 <__sflush_r+0x34>
 8014d10:	682b      	ldr	r3, [r5, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d0c4      	beq.n	8014ca0 <__sflush_r+0x34>
 8014d16:	2b1d      	cmp	r3, #29
 8014d18:	d001      	beq.n	8014d1e <__sflush_r+0xb2>
 8014d1a:	2b16      	cmp	r3, #22
 8014d1c:	d101      	bne.n	8014d22 <__sflush_r+0xb6>
 8014d1e:	602f      	str	r7, [r5, #0]
 8014d20:	e7b1      	b.n	8014c86 <__sflush_r+0x1a>
 8014d22:	89a3      	ldrh	r3, [r4, #12]
 8014d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d28:	81a3      	strh	r3, [r4, #12]
 8014d2a:	e7ad      	b.n	8014c88 <__sflush_r+0x1c>
 8014d2c:	690f      	ldr	r7, [r1, #16]
 8014d2e:	2f00      	cmp	r7, #0
 8014d30:	d0a9      	beq.n	8014c86 <__sflush_r+0x1a>
 8014d32:	0793      	lsls	r3, r2, #30
 8014d34:	680e      	ldr	r6, [r1, #0]
 8014d36:	bf08      	it	eq
 8014d38:	694b      	ldreq	r3, [r1, #20]
 8014d3a:	600f      	str	r7, [r1, #0]
 8014d3c:	bf18      	it	ne
 8014d3e:	2300      	movne	r3, #0
 8014d40:	eba6 0807 	sub.w	r8, r6, r7
 8014d44:	608b      	str	r3, [r1, #8]
 8014d46:	f1b8 0f00 	cmp.w	r8, #0
 8014d4a:	dd9c      	ble.n	8014c86 <__sflush_r+0x1a>
 8014d4c:	6a21      	ldr	r1, [r4, #32]
 8014d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d50:	4643      	mov	r3, r8
 8014d52:	463a      	mov	r2, r7
 8014d54:	4628      	mov	r0, r5
 8014d56:	47b0      	blx	r6
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	dc06      	bgt.n	8014d6a <__sflush_r+0xfe>
 8014d5c:	89a3      	ldrh	r3, [r4, #12]
 8014d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d62:	81a3      	strh	r3, [r4, #12]
 8014d64:	f04f 30ff 	mov.w	r0, #4294967295
 8014d68:	e78e      	b.n	8014c88 <__sflush_r+0x1c>
 8014d6a:	4407      	add	r7, r0
 8014d6c:	eba8 0800 	sub.w	r8, r8, r0
 8014d70:	e7e9      	b.n	8014d46 <__sflush_r+0xda>
 8014d72:	bf00      	nop
 8014d74:	20400001 	.word	0x20400001

08014d78 <_fflush_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	690b      	ldr	r3, [r1, #16]
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	460c      	mov	r4, r1
 8014d80:	b913      	cbnz	r3, 8014d88 <_fflush_r+0x10>
 8014d82:	2500      	movs	r5, #0
 8014d84:	4628      	mov	r0, r5
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	b118      	cbz	r0, 8014d92 <_fflush_r+0x1a>
 8014d8a:	6983      	ldr	r3, [r0, #24]
 8014d8c:	b90b      	cbnz	r3, 8014d92 <_fflush_r+0x1a>
 8014d8e:	f000 f887 	bl	8014ea0 <__sinit>
 8014d92:	4b14      	ldr	r3, [pc, #80]	; (8014de4 <_fflush_r+0x6c>)
 8014d94:	429c      	cmp	r4, r3
 8014d96:	d11b      	bne.n	8014dd0 <_fflush_r+0x58>
 8014d98:	686c      	ldr	r4, [r5, #4]
 8014d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d0ef      	beq.n	8014d82 <_fflush_r+0xa>
 8014da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014da4:	07d0      	lsls	r0, r2, #31
 8014da6:	d404      	bmi.n	8014db2 <_fflush_r+0x3a>
 8014da8:	0599      	lsls	r1, r3, #22
 8014daa:	d402      	bmi.n	8014db2 <_fflush_r+0x3a>
 8014dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dae:	f000 f91a 	bl	8014fe6 <__retarget_lock_acquire_recursive>
 8014db2:	4628      	mov	r0, r5
 8014db4:	4621      	mov	r1, r4
 8014db6:	f7ff ff59 	bl	8014c6c <__sflush_r>
 8014dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014dbc:	07da      	lsls	r2, r3, #31
 8014dbe:	4605      	mov	r5, r0
 8014dc0:	d4e0      	bmi.n	8014d84 <_fflush_r+0xc>
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	059b      	lsls	r3, r3, #22
 8014dc6:	d4dd      	bmi.n	8014d84 <_fflush_r+0xc>
 8014dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dca:	f000 f90d 	bl	8014fe8 <__retarget_lock_release_recursive>
 8014dce:	e7d9      	b.n	8014d84 <_fflush_r+0xc>
 8014dd0:	4b05      	ldr	r3, [pc, #20]	; (8014de8 <_fflush_r+0x70>)
 8014dd2:	429c      	cmp	r4, r3
 8014dd4:	d101      	bne.n	8014dda <_fflush_r+0x62>
 8014dd6:	68ac      	ldr	r4, [r5, #8]
 8014dd8:	e7df      	b.n	8014d9a <_fflush_r+0x22>
 8014dda:	4b04      	ldr	r3, [pc, #16]	; (8014dec <_fflush_r+0x74>)
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	bf08      	it	eq
 8014de0:	68ec      	ldreq	r4, [r5, #12]
 8014de2:	e7da      	b.n	8014d9a <_fflush_r+0x22>
 8014de4:	080168b4 	.word	0x080168b4
 8014de8:	080168d4 	.word	0x080168d4
 8014dec:	08016894 	.word	0x08016894

08014df0 <std>:
 8014df0:	2300      	movs	r3, #0
 8014df2:	b510      	push	{r4, lr}
 8014df4:	4604      	mov	r4, r0
 8014df6:	e9c0 3300 	strd	r3, r3, [r0]
 8014dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dfe:	6083      	str	r3, [r0, #8]
 8014e00:	8181      	strh	r1, [r0, #12]
 8014e02:	6643      	str	r3, [r0, #100]	; 0x64
 8014e04:	81c2      	strh	r2, [r0, #14]
 8014e06:	6183      	str	r3, [r0, #24]
 8014e08:	4619      	mov	r1, r3
 8014e0a:	2208      	movs	r2, #8
 8014e0c:	305c      	adds	r0, #92	; 0x5c
 8014e0e:	f7fe faf3 	bl	80133f8 <memset>
 8014e12:	4b05      	ldr	r3, [pc, #20]	; (8014e28 <std+0x38>)
 8014e14:	6263      	str	r3, [r4, #36]	; 0x24
 8014e16:	4b05      	ldr	r3, [pc, #20]	; (8014e2c <std+0x3c>)
 8014e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e1a:	4b05      	ldr	r3, [pc, #20]	; (8014e30 <std+0x40>)
 8014e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e1e:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <std+0x44>)
 8014e20:	6224      	str	r4, [r4, #32]
 8014e22:	6323      	str	r3, [r4, #48]	; 0x30
 8014e24:	bd10      	pop	{r4, pc}
 8014e26:	bf00      	nop
 8014e28:	08015c8d 	.word	0x08015c8d
 8014e2c:	08015caf 	.word	0x08015caf
 8014e30:	08015ce7 	.word	0x08015ce7
 8014e34:	08015d0b 	.word	0x08015d0b

08014e38 <_cleanup_r>:
 8014e38:	4901      	ldr	r1, [pc, #4]	; (8014e40 <_cleanup_r+0x8>)
 8014e3a:	f000 b8af 	b.w	8014f9c <_fwalk_reent>
 8014e3e:	bf00      	nop
 8014e40:	08014d79 	.word	0x08014d79

08014e44 <__sfmoreglue>:
 8014e44:	b570      	push	{r4, r5, r6, lr}
 8014e46:	2268      	movs	r2, #104	; 0x68
 8014e48:	1e4d      	subs	r5, r1, #1
 8014e4a:	4355      	muls	r5, r2
 8014e4c:	460e      	mov	r6, r1
 8014e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e52:	f000 fd3d 	bl	80158d0 <_malloc_r>
 8014e56:	4604      	mov	r4, r0
 8014e58:	b140      	cbz	r0, 8014e6c <__sfmoreglue+0x28>
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8014e60:	300c      	adds	r0, #12
 8014e62:	60a0      	str	r0, [r4, #8]
 8014e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e68:	f7fe fac6 	bl	80133f8 <memset>
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	bd70      	pop	{r4, r5, r6, pc}

08014e70 <__sfp_lock_acquire>:
 8014e70:	4801      	ldr	r0, [pc, #4]	; (8014e78 <__sfp_lock_acquire+0x8>)
 8014e72:	f000 b8b8 	b.w	8014fe6 <__retarget_lock_acquire_recursive>
 8014e76:	bf00      	nop
 8014e78:	20002481 	.word	0x20002481

08014e7c <__sfp_lock_release>:
 8014e7c:	4801      	ldr	r0, [pc, #4]	; (8014e84 <__sfp_lock_release+0x8>)
 8014e7e:	f000 b8b3 	b.w	8014fe8 <__retarget_lock_release_recursive>
 8014e82:	bf00      	nop
 8014e84:	20002481 	.word	0x20002481

08014e88 <__sinit_lock_acquire>:
 8014e88:	4801      	ldr	r0, [pc, #4]	; (8014e90 <__sinit_lock_acquire+0x8>)
 8014e8a:	f000 b8ac 	b.w	8014fe6 <__retarget_lock_acquire_recursive>
 8014e8e:	bf00      	nop
 8014e90:	20002482 	.word	0x20002482

08014e94 <__sinit_lock_release>:
 8014e94:	4801      	ldr	r0, [pc, #4]	; (8014e9c <__sinit_lock_release+0x8>)
 8014e96:	f000 b8a7 	b.w	8014fe8 <__retarget_lock_release_recursive>
 8014e9a:	bf00      	nop
 8014e9c:	20002482 	.word	0x20002482

08014ea0 <__sinit>:
 8014ea0:	b510      	push	{r4, lr}
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	f7ff fff0 	bl	8014e88 <__sinit_lock_acquire>
 8014ea8:	69a3      	ldr	r3, [r4, #24]
 8014eaa:	b11b      	cbz	r3, 8014eb4 <__sinit+0x14>
 8014eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eb0:	f7ff bff0 	b.w	8014e94 <__sinit_lock_release>
 8014eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8014eba:	4b13      	ldr	r3, [pc, #76]	; (8014f08 <__sinit+0x68>)
 8014ebc:	4a13      	ldr	r2, [pc, #76]	; (8014f0c <__sinit+0x6c>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014ec2:	42a3      	cmp	r3, r4
 8014ec4:	bf04      	itt	eq
 8014ec6:	2301      	moveq	r3, #1
 8014ec8:	61a3      	streq	r3, [r4, #24]
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f000 f820 	bl	8014f10 <__sfp>
 8014ed0:	6060      	str	r0, [r4, #4]
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 f81c 	bl	8014f10 <__sfp>
 8014ed8:	60a0      	str	r0, [r4, #8]
 8014eda:	4620      	mov	r0, r4
 8014edc:	f000 f818 	bl	8014f10 <__sfp>
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	60e0      	str	r0, [r4, #12]
 8014ee4:	2104      	movs	r1, #4
 8014ee6:	6860      	ldr	r0, [r4, #4]
 8014ee8:	f7ff ff82 	bl	8014df0 <std>
 8014eec:	68a0      	ldr	r0, [r4, #8]
 8014eee:	2201      	movs	r2, #1
 8014ef0:	2109      	movs	r1, #9
 8014ef2:	f7ff ff7d 	bl	8014df0 <std>
 8014ef6:	68e0      	ldr	r0, [r4, #12]
 8014ef8:	2202      	movs	r2, #2
 8014efa:	2112      	movs	r1, #18
 8014efc:	f7ff ff78 	bl	8014df0 <std>
 8014f00:	2301      	movs	r3, #1
 8014f02:	61a3      	str	r3, [r4, #24]
 8014f04:	e7d2      	b.n	8014eac <__sinit+0xc>
 8014f06:	bf00      	nop
 8014f08:	080167cc 	.word	0x080167cc
 8014f0c:	08014e39 	.word	0x08014e39

08014f10 <__sfp>:
 8014f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f12:	4607      	mov	r7, r0
 8014f14:	f7ff ffac 	bl	8014e70 <__sfp_lock_acquire>
 8014f18:	4b1e      	ldr	r3, [pc, #120]	; (8014f94 <__sfp+0x84>)
 8014f1a:	681e      	ldr	r6, [r3, #0]
 8014f1c:	69b3      	ldr	r3, [r6, #24]
 8014f1e:	b913      	cbnz	r3, 8014f26 <__sfp+0x16>
 8014f20:	4630      	mov	r0, r6
 8014f22:	f7ff ffbd 	bl	8014ea0 <__sinit>
 8014f26:	3648      	adds	r6, #72	; 0x48
 8014f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	d503      	bpl.n	8014f38 <__sfp+0x28>
 8014f30:	6833      	ldr	r3, [r6, #0]
 8014f32:	b30b      	cbz	r3, 8014f78 <__sfp+0x68>
 8014f34:	6836      	ldr	r6, [r6, #0]
 8014f36:	e7f7      	b.n	8014f28 <__sfp+0x18>
 8014f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f3c:	b9d5      	cbnz	r5, 8014f74 <__sfp+0x64>
 8014f3e:	4b16      	ldr	r3, [pc, #88]	; (8014f98 <__sfp+0x88>)
 8014f40:	60e3      	str	r3, [r4, #12]
 8014f42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f46:	6665      	str	r5, [r4, #100]	; 0x64
 8014f48:	f000 f84c 	bl	8014fe4 <__retarget_lock_init_recursive>
 8014f4c:	f7ff ff96 	bl	8014e7c <__sfp_lock_release>
 8014f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f58:	6025      	str	r5, [r4, #0]
 8014f5a:	61a5      	str	r5, [r4, #24]
 8014f5c:	2208      	movs	r2, #8
 8014f5e:	4629      	mov	r1, r5
 8014f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f64:	f7fe fa48 	bl	80133f8 <memset>
 8014f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f70:	4620      	mov	r0, r4
 8014f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f74:	3468      	adds	r4, #104	; 0x68
 8014f76:	e7d9      	b.n	8014f2c <__sfp+0x1c>
 8014f78:	2104      	movs	r1, #4
 8014f7a:	4638      	mov	r0, r7
 8014f7c:	f7ff ff62 	bl	8014e44 <__sfmoreglue>
 8014f80:	4604      	mov	r4, r0
 8014f82:	6030      	str	r0, [r6, #0]
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d1d5      	bne.n	8014f34 <__sfp+0x24>
 8014f88:	f7ff ff78 	bl	8014e7c <__sfp_lock_release>
 8014f8c:	230c      	movs	r3, #12
 8014f8e:	603b      	str	r3, [r7, #0]
 8014f90:	e7ee      	b.n	8014f70 <__sfp+0x60>
 8014f92:	bf00      	nop
 8014f94:	080167cc 	.word	0x080167cc
 8014f98:	ffff0001 	.word	0xffff0001

08014f9c <_fwalk_reent>:
 8014f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fa0:	4606      	mov	r6, r0
 8014fa2:	4688      	mov	r8, r1
 8014fa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014fa8:	2700      	movs	r7, #0
 8014faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fae:	f1b9 0901 	subs.w	r9, r9, #1
 8014fb2:	d505      	bpl.n	8014fc0 <_fwalk_reent+0x24>
 8014fb4:	6824      	ldr	r4, [r4, #0]
 8014fb6:	2c00      	cmp	r4, #0
 8014fb8:	d1f7      	bne.n	8014faa <_fwalk_reent+0xe>
 8014fba:	4638      	mov	r0, r7
 8014fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fc0:	89ab      	ldrh	r3, [r5, #12]
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d907      	bls.n	8014fd6 <_fwalk_reent+0x3a>
 8014fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	d003      	beq.n	8014fd6 <_fwalk_reent+0x3a>
 8014fce:	4629      	mov	r1, r5
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	47c0      	blx	r8
 8014fd4:	4307      	orrs	r7, r0
 8014fd6:	3568      	adds	r5, #104	; 0x68
 8014fd8:	e7e9      	b.n	8014fae <_fwalk_reent+0x12>
	...

08014fdc <_localeconv_r>:
 8014fdc:	4800      	ldr	r0, [pc, #0]	; (8014fe0 <_localeconv_r+0x4>)
 8014fde:	4770      	bx	lr
 8014fe0:	200002d8 	.word	0x200002d8

08014fe4 <__retarget_lock_init_recursive>:
 8014fe4:	4770      	bx	lr

08014fe6 <__retarget_lock_acquire_recursive>:
 8014fe6:	4770      	bx	lr

08014fe8 <__retarget_lock_release_recursive>:
 8014fe8:	4770      	bx	lr

08014fea <__swhatbuf_r>:
 8014fea:	b570      	push	{r4, r5, r6, lr}
 8014fec:	460e      	mov	r6, r1
 8014fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff2:	2900      	cmp	r1, #0
 8014ff4:	b096      	sub	sp, #88	; 0x58
 8014ff6:	4614      	mov	r4, r2
 8014ff8:	461d      	mov	r5, r3
 8014ffa:	da08      	bge.n	801500e <__swhatbuf_r+0x24>
 8014ffc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015000:	2200      	movs	r2, #0
 8015002:	602a      	str	r2, [r5, #0]
 8015004:	061a      	lsls	r2, r3, #24
 8015006:	d410      	bmi.n	801502a <__swhatbuf_r+0x40>
 8015008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801500c:	e00e      	b.n	801502c <__swhatbuf_r+0x42>
 801500e:	466a      	mov	r2, sp
 8015010:	f000 fed2 	bl	8015db8 <_fstat_r>
 8015014:	2800      	cmp	r0, #0
 8015016:	dbf1      	blt.n	8014ffc <__swhatbuf_r+0x12>
 8015018:	9a01      	ldr	r2, [sp, #4]
 801501a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801501e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015022:	425a      	negs	r2, r3
 8015024:	415a      	adcs	r2, r3
 8015026:	602a      	str	r2, [r5, #0]
 8015028:	e7ee      	b.n	8015008 <__swhatbuf_r+0x1e>
 801502a:	2340      	movs	r3, #64	; 0x40
 801502c:	2000      	movs	r0, #0
 801502e:	6023      	str	r3, [r4, #0]
 8015030:	b016      	add	sp, #88	; 0x58
 8015032:	bd70      	pop	{r4, r5, r6, pc}

08015034 <__smakebuf_r>:
 8015034:	898b      	ldrh	r3, [r1, #12]
 8015036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015038:	079d      	lsls	r5, r3, #30
 801503a:	4606      	mov	r6, r0
 801503c:	460c      	mov	r4, r1
 801503e:	d507      	bpl.n	8015050 <__smakebuf_r+0x1c>
 8015040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	6123      	str	r3, [r4, #16]
 8015048:	2301      	movs	r3, #1
 801504a:	6163      	str	r3, [r4, #20]
 801504c:	b002      	add	sp, #8
 801504e:	bd70      	pop	{r4, r5, r6, pc}
 8015050:	ab01      	add	r3, sp, #4
 8015052:	466a      	mov	r2, sp
 8015054:	f7ff ffc9 	bl	8014fea <__swhatbuf_r>
 8015058:	9900      	ldr	r1, [sp, #0]
 801505a:	4605      	mov	r5, r0
 801505c:	4630      	mov	r0, r6
 801505e:	f000 fc37 	bl	80158d0 <_malloc_r>
 8015062:	b948      	cbnz	r0, 8015078 <__smakebuf_r+0x44>
 8015064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015068:	059a      	lsls	r2, r3, #22
 801506a:	d4ef      	bmi.n	801504c <__smakebuf_r+0x18>
 801506c:	f023 0303 	bic.w	r3, r3, #3
 8015070:	f043 0302 	orr.w	r3, r3, #2
 8015074:	81a3      	strh	r3, [r4, #12]
 8015076:	e7e3      	b.n	8015040 <__smakebuf_r+0xc>
 8015078:	4b0d      	ldr	r3, [pc, #52]	; (80150b0 <__smakebuf_r+0x7c>)
 801507a:	62b3      	str	r3, [r6, #40]	; 0x28
 801507c:	89a3      	ldrh	r3, [r4, #12]
 801507e:	6020      	str	r0, [r4, #0]
 8015080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015084:	81a3      	strh	r3, [r4, #12]
 8015086:	9b00      	ldr	r3, [sp, #0]
 8015088:	6163      	str	r3, [r4, #20]
 801508a:	9b01      	ldr	r3, [sp, #4]
 801508c:	6120      	str	r0, [r4, #16]
 801508e:	b15b      	cbz	r3, 80150a8 <__smakebuf_r+0x74>
 8015090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015094:	4630      	mov	r0, r6
 8015096:	f000 fea1 	bl	8015ddc <_isatty_r>
 801509a:	b128      	cbz	r0, 80150a8 <__smakebuf_r+0x74>
 801509c:	89a3      	ldrh	r3, [r4, #12]
 801509e:	f023 0303 	bic.w	r3, r3, #3
 80150a2:	f043 0301 	orr.w	r3, r3, #1
 80150a6:	81a3      	strh	r3, [r4, #12]
 80150a8:	89a0      	ldrh	r0, [r4, #12]
 80150aa:	4305      	orrs	r5, r0
 80150ac:	81a5      	strh	r5, [r4, #12]
 80150ae:	e7cd      	b.n	801504c <__smakebuf_r+0x18>
 80150b0:	08014e39 	.word	0x08014e39

080150b4 <malloc>:
 80150b4:	4b02      	ldr	r3, [pc, #8]	; (80150c0 <malloc+0xc>)
 80150b6:	4601      	mov	r1, r0
 80150b8:	6818      	ldr	r0, [r3, #0]
 80150ba:	f000 bc09 	b.w	80158d0 <_malloc_r>
 80150be:	bf00      	nop
 80150c0:	20000184 	.word	0x20000184

080150c4 <_Balloc>:
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80150c8:	4604      	mov	r4, r0
 80150ca:	460d      	mov	r5, r1
 80150cc:	b976      	cbnz	r6, 80150ec <_Balloc+0x28>
 80150ce:	2010      	movs	r0, #16
 80150d0:	f7ff fff0 	bl	80150b4 <malloc>
 80150d4:	4602      	mov	r2, r0
 80150d6:	6260      	str	r0, [r4, #36]	; 0x24
 80150d8:	b920      	cbnz	r0, 80150e4 <_Balloc+0x20>
 80150da:	4b18      	ldr	r3, [pc, #96]	; (801513c <_Balloc+0x78>)
 80150dc:	4818      	ldr	r0, [pc, #96]	; (8015140 <_Balloc+0x7c>)
 80150de:	2166      	movs	r1, #102	; 0x66
 80150e0:	f000 fe2a 	bl	8015d38 <__assert_func>
 80150e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150e8:	6006      	str	r6, [r0, #0]
 80150ea:	60c6      	str	r6, [r0, #12]
 80150ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150ee:	68f3      	ldr	r3, [r6, #12]
 80150f0:	b183      	cbz	r3, 8015114 <_Balloc+0x50>
 80150f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150fa:	b9b8      	cbnz	r0, 801512c <_Balloc+0x68>
 80150fc:	2101      	movs	r1, #1
 80150fe:	fa01 f605 	lsl.w	r6, r1, r5
 8015102:	1d72      	adds	r2, r6, #5
 8015104:	0092      	lsls	r2, r2, #2
 8015106:	4620      	mov	r0, r4
 8015108:	f000 fb60 	bl	80157cc <_calloc_r>
 801510c:	b160      	cbz	r0, 8015128 <_Balloc+0x64>
 801510e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015112:	e00e      	b.n	8015132 <_Balloc+0x6e>
 8015114:	2221      	movs	r2, #33	; 0x21
 8015116:	2104      	movs	r1, #4
 8015118:	4620      	mov	r0, r4
 801511a:	f000 fb57 	bl	80157cc <_calloc_r>
 801511e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015120:	60f0      	str	r0, [r6, #12]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d1e4      	bne.n	80150f2 <_Balloc+0x2e>
 8015128:	2000      	movs	r0, #0
 801512a:	bd70      	pop	{r4, r5, r6, pc}
 801512c:	6802      	ldr	r2, [r0, #0]
 801512e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015132:	2300      	movs	r3, #0
 8015134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015138:	e7f7      	b.n	801512a <_Balloc+0x66>
 801513a:	bf00      	nop
 801513c:	08016811 	.word	0x08016811
 8015140:	080168f4 	.word	0x080168f4

08015144 <_Bfree>:
 8015144:	b570      	push	{r4, r5, r6, lr}
 8015146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015148:	4605      	mov	r5, r0
 801514a:	460c      	mov	r4, r1
 801514c:	b976      	cbnz	r6, 801516c <_Bfree+0x28>
 801514e:	2010      	movs	r0, #16
 8015150:	f7ff ffb0 	bl	80150b4 <malloc>
 8015154:	4602      	mov	r2, r0
 8015156:	6268      	str	r0, [r5, #36]	; 0x24
 8015158:	b920      	cbnz	r0, 8015164 <_Bfree+0x20>
 801515a:	4b09      	ldr	r3, [pc, #36]	; (8015180 <_Bfree+0x3c>)
 801515c:	4809      	ldr	r0, [pc, #36]	; (8015184 <_Bfree+0x40>)
 801515e:	218a      	movs	r1, #138	; 0x8a
 8015160:	f000 fdea 	bl	8015d38 <__assert_func>
 8015164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015168:	6006      	str	r6, [r0, #0]
 801516a:	60c6      	str	r6, [r0, #12]
 801516c:	b13c      	cbz	r4, 801517e <_Bfree+0x3a>
 801516e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015170:	6862      	ldr	r2, [r4, #4]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015178:	6021      	str	r1, [r4, #0]
 801517a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801517e:	bd70      	pop	{r4, r5, r6, pc}
 8015180:	08016811 	.word	0x08016811
 8015184:	080168f4 	.word	0x080168f4

08015188 <__multadd>:
 8015188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518c:	690d      	ldr	r5, [r1, #16]
 801518e:	4607      	mov	r7, r0
 8015190:	460c      	mov	r4, r1
 8015192:	461e      	mov	r6, r3
 8015194:	f101 0c14 	add.w	ip, r1, #20
 8015198:	2000      	movs	r0, #0
 801519a:	f8dc 3000 	ldr.w	r3, [ip]
 801519e:	b299      	uxth	r1, r3
 80151a0:	fb02 6101 	mla	r1, r2, r1, r6
 80151a4:	0c1e      	lsrs	r6, r3, #16
 80151a6:	0c0b      	lsrs	r3, r1, #16
 80151a8:	fb02 3306 	mla	r3, r2, r6, r3
 80151ac:	b289      	uxth	r1, r1
 80151ae:	3001      	adds	r0, #1
 80151b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80151b4:	4285      	cmp	r5, r0
 80151b6:	f84c 1b04 	str.w	r1, [ip], #4
 80151ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80151be:	dcec      	bgt.n	801519a <__multadd+0x12>
 80151c0:	b30e      	cbz	r6, 8015206 <__multadd+0x7e>
 80151c2:	68a3      	ldr	r3, [r4, #8]
 80151c4:	42ab      	cmp	r3, r5
 80151c6:	dc19      	bgt.n	80151fc <__multadd+0x74>
 80151c8:	6861      	ldr	r1, [r4, #4]
 80151ca:	4638      	mov	r0, r7
 80151cc:	3101      	adds	r1, #1
 80151ce:	f7ff ff79 	bl	80150c4 <_Balloc>
 80151d2:	4680      	mov	r8, r0
 80151d4:	b928      	cbnz	r0, 80151e2 <__multadd+0x5a>
 80151d6:	4602      	mov	r2, r0
 80151d8:	4b0c      	ldr	r3, [pc, #48]	; (801520c <__multadd+0x84>)
 80151da:	480d      	ldr	r0, [pc, #52]	; (8015210 <__multadd+0x88>)
 80151dc:	21b5      	movs	r1, #181	; 0xb5
 80151de:	f000 fdab 	bl	8015d38 <__assert_func>
 80151e2:	6922      	ldr	r2, [r4, #16]
 80151e4:	3202      	adds	r2, #2
 80151e6:	f104 010c 	add.w	r1, r4, #12
 80151ea:	0092      	lsls	r2, r2, #2
 80151ec:	300c      	adds	r0, #12
 80151ee:	f7fe f8f5 	bl	80133dc <memcpy>
 80151f2:	4621      	mov	r1, r4
 80151f4:	4638      	mov	r0, r7
 80151f6:	f7ff ffa5 	bl	8015144 <_Bfree>
 80151fa:	4644      	mov	r4, r8
 80151fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015200:	3501      	adds	r5, #1
 8015202:	615e      	str	r6, [r3, #20]
 8015204:	6125      	str	r5, [r4, #16]
 8015206:	4620      	mov	r0, r4
 8015208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801520c:	08016883 	.word	0x08016883
 8015210:	080168f4 	.word	0x080168f4

08015214 <__hi0bits>:
 8015214:	0c03      	lsrs	r3, r0, #16
 8015216:	041b      	lsls	r3, r3, #16
 8015218:	b9d3      	cbnz	r3, 8015250 <__hi0bits+0x3c>
 801521a:	0400      	lsls	r0, r0, #16
 801521c:	2310      	movs	r3, #16
 801521e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015222:	bf04      	itt	eq
 8015224:	0200      	lsleq	r0, r0, #8
 8015226:	3308      	addeq	r3, #8
 8015228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801522c:	bf04      	itt	eq
 801522e:	0100      	lsleq	r0, r0, #4
 8015230:	3304      	addeq	r3, #4
 8015232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015236:	bf04      	itt	eq
 8015238:	0080      	lsleq	r0, r0, #2
 801523a:	3302      	addeq	r3, #2
 801523c:	2800      	cmp	r0, #0
 801523e:	db05      	blt.n	801524c <__hi0bits+0x38>
 8015240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015244:	f103 0301 	add.w	r3, r3, #1
 8015248:	bf08      	it	eq
 801524a:	2320      	moveq	r3, #32
 801524c:	4618      	mov	r0, r3
 801524e:	4770      	bx	lr
 8015250:	2300      	movs	r3, #0
 8015252:	e7e4      	b.n	801521e <__hi0bits+0xa>

08015254 <__lo0bits>:
 8015254:	6803      	ldr	r3, [r0, #0]
 8015256:	f013 0207 	ands.w	r2, r3, #7
 801525a:	4601      	mov	r1, r0
 801525c:	d00b      	beq.n	8015276 <__lo0bits+0x22>
 801525e:	07da      	lsls	r2, r3, #31
 8015260:	d423      	bmi.n	80152aa <__lo0bits+0x56>
 8015262:	0798      	lsls	r0, r3, #30
 8015264:	bf49      	itett	mi
 8015266:	085b      	lsrmi	r3, r3, #1
 8015268:	089b      	lsrpl	r3, r3, #2
 801526a:	2001      	movmi	r0, #1
 801526c:	600b      	strmi	r3, [r1, #0]
 801526e:	bf5c      	itt	pl
 8015270:	600b      	strpl	r3, [r1, #0]
 8015272:	2002      	movpl	r0, #2
 8015274:	4770      	bx	lr
 8015276:	b298      	uxth	r0, r3
 8015278:	b9a8      	cbnz	r0, 80152a6 <__lo0bits+0x52>
 801527a:	0c1b      	lsrs	r3, r3, #16
 801527c:	2010      	movs	r0, #16
 801527e:	b2da      	uxtb	r2, r3
 8015280:	b90a      	cbnz	r2, 8015286 <__lo0bits+0x32>
 8015282:	3008      	adds	r0, #8
 8015284:	0a1b      	lsrs	r3, r3, #8
 8015286:	071a      	lsls	r2, r3, #28
 8015288:	bf04      	itt	eq
 801528a:	091b      	lsreq	r3, r3, #4
 801528c:	3004      	addeq	r0, #4
 801528e:	079a      	lsls	r2, r3, #30
 8015290:	bf04      	itt	eq
 8015292:	089b      	lsreq	r3, r3, #2
 8015294:	3002      	addeq	r0, #2
 8015296:	07da      	lsls	r2, r3, #31
 8015298:	d403      	bmi.n	80152a2 <__lo0bits+0x4e>
 801529a:	085b      	lsrs	r3, r3, #1
 801529c:	f100 0001 	add.w	r0, r0, #1
 80152a0:	d005      	beq.n	80152ae <__lo0bits+0x5a>
 80152a2:	600b      	str	r3, [r1, #0]
 80152a4:	4770      	bx	lr
 80152a6:	4610      	mov	r0, r2
 80152a8:	e7e9      	b.n	801527e <__lo0bits+0x2a>
 80152aa:	2000      	movs	r0, #0
 80152ac:	4770      	bx	lr
 80152ae:	2020      	movs	r0, #32
 80152b0:	4770      	bx	lr
	...

080152b4 <__i2b>:
 80152b4:	b510      	push	{r4, lr}
 80152b6:	460c      	mov	r4, r1
 80152b8:	2101      	movs	r1, #1
 80152ba:	f7ff ff03 	bl	80150c4 <_Balloc>
 80152be:	4602      	mov	r2, r0
 80152c0:	b928      	cbnz	r0, 80152ce <__i2b+0x1a>
 80152c2:	4b05      	ldr	r3, [pc, #20]	; (80152d8 <__i2b+0x24>)
 80152c4:	4805      	ldr	r0, [pc, #20]	; (80152dc <__i2b+0x28>)
 80152c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80152ca:	f000 fd35 	bl	8015d38 <__assert_func>
 80152ce:	2301      	movs	r3, #1
 80152d0:	6144      	str	r4, [r0, #20]
 80152d2:	6103      	str	r3, [r0, #16]
 80152d4:	bd10      	pop	{r4, pc}
 80152d6:	bf00      	nop
 80152d8:	08016883 	.word	0x08016883
 80152dc:	080168f4 	.word	0x080168f4

080152e0 <__multiply>:
 80152e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e4:	4691      	mov	r9, r2
 80152e6:	690a      	ldr	r2, [r1, #16]
 80152e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	bfb8      	it	lt
 80152f0:	460b      	movlt	r3, r1
 80152f2:	460c      	mov	r4, r1
 80152f4:	bfbc      	itt	lt
 80152f6:	464c      	movlt	r4, r9
 80152f8:	4699      	movlt	r9, r3
 80152fa:	6927      	ldr	r7, [r4, #16]
 80152fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015300:	68a3      	ldr	r3, [r4, #8]
 8015302:	6861      	ldr	r1, [r4, #4]
 8015304:	eb07 060a 	add.w	r6, r7, sl
 8015308:	42b3      	cmp	r3, r6
 801530a:	b085      	sub	sp, #20
 801530c:	bfb8      	it	lt
 801530e:	3101      	addlt	r1, #1
 8015310:	f7ff fed8 	bl	80150c4 <_Balloc>
 8015314:	b930      	cbnz	r0, 8015324 <__multiply+0x44>
 8015316:	4602      	mov	r2, r0
 8015318:	4b44      	ldr	r3, [pc, #272]	; (801542c <__multiply+0x14c>)
 801531a:	4845      	ldr	r0, [pc, #276]	; (8015430 <__multiply+0x150>)
 801531c:	f240 115d 	movw	r1, #349	; 0x15d
 8015320:	f000 fd0a 	bl	8015d38 <__assert_func>
 8015324:	f100 0514 	add.w	r5, r0, #20
 8015328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801532c:	462b      	mov	r3, r5
 801532e:	2200      	movs	r2, #0
 8015330:	4543      	cmp	r3, r8
 8015332:	d321      	bcc.n	8015378 <__multiply+0x98>
 8015334:	f104 0314 	add.w	r3, r4, #20
 8015338:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801533c:	f109 0314 	add.w	r3, r9, #20
 8015340:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015344:	9202      	str	r2, [sp, #8]
 8015346:	1b3a      	subs	r2, r7, r4
 8015348:	3a15      	subs	r2, #21
 801534a:	f022 0203 	bic.w	r2, r2, #3
 801534e:	3204      	adds	r2, #4
 8015350:	f104 0115 	add.w	r1, r4, #21
 8015354:	428f      	cmp	r7, r1
 8015356:	bf38      	it	cc
 8015358:	2204      	movcc	r2, #4
 801535a:	9201      	str	r2, [sp, #4]
 801535c:	9a02      	ldr	r2, [sp, #8]
 801535e:	9303      	str	r3, [sp, #12]
 8015360:	429a      	cmp	r2, r3
 8015362:	d80c      	bhi.n	801537e <__multiply+0x9e>
 8015364:	2e00      	cmp	r6, #0
 8015366:	dd03      	ble.n	8015370 <__multiply+0x90>
 8015368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801536c:	2b00      	cmp	r3, #0
 801536e:	d05a      	beq.n	8015426 <__multiply+0x146>
 8015370:	6106      	str	r6, [r0, #16]
 8015372:	b005      	add	sp, #20
 8015374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015378:	f843 2b04 	str.w	r2, [r3], #4
 801537c:	e7d8      	b.n	8015330 <__multiply+0x50>
 801537e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015382:	f1ba 0f00 	cmp.w	sl, #0
 8015386:	d024      	beq.n	80153d2 <__multiply+0xf2>
 8015388:	f104 0e14 	add.w	lr, r4, #20
 801538c:	46a9      	mov	r9, r5
 801538e:	f04f 0c00 	mov.w	ip, #0
 8015392:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015396:	f8d9 1000 	ldr.w	r1, [r9]
 801539a:	fa1f fb82 	uxth.w	fp, r2
 801539e:	b289      	uxth	r1, r1
 80153a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80153a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80153a8:	f8d9 2000 	ldr.w	r2, [r9]
 80153ac:	4461      	add	r1, ip
 80153ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80153b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80153b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80153ba:	b289      	uxth	r1, r1
 80153bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80153c0:	4577      	cmp	r7, lr
 80153c2:	f849 1b04 	str.w	r1, [r9], #4
 80153c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80153ca:	d8e2      	bhi.n	8015392 <__multiply+0xb2>
 80153cc:	9a01      	ldr	r2, [sp, #4]
 80153ce:	f845 c002 	str.w	ip, [r5, r2]
 80153d2:	9a03      	ldr	r2, [sp, #12]
 80153d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80153d8:	3304      	adds	r3, #4
 80153da:	f1b9 0f00 	cmp.w	r9, #0
 80153de:	d020      	beq.n	8015422 <__multiply+0x142>
 80153e0:	6829      	ldr	r1, [r5, #0]
 80153e2:	f104 0c14 	add.w	ip, r4, #20
 80153e6:	46ae      	mov	lr, r5
 80153e8:	f04f 0a00 	mov.w	sl, #0
 80153ec:	f8bc b000 	ldrh.w	fp, [ip]
 80153f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80153f4:	fb09 220b 	mla	r2, r9, fp, r2
 80153f8:	4492      	add	sl, r2
 80153fa:	b289      	uxth	r1, r1
 80153fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015400:	f84e 1b04 	str.w	r1, [lr], #4
 8015404:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015408:	f8be 1000 	ldrh.w	r1, [lr]
 801540c:	0c12      	lsrs	r2, r2, #16
 801540e:	fb09 1102 	mla	r1, r9, r2, r1
 8015412:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015416:	4567      	cmp	r7, ip
 8015418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801541c:	d8e6      	bhi.n	80153ec <__multiply+0x10c>
 801541e:	9a01      	ldr	r2, [sp, #4]
 8015420:	50a9      	str	r1, [r5, r2]
 8015422:	3504      	adds	r5, #4
 8015424:	e79a      	b.n	801535c <__multiply+0x7c>
 8015426:	3e01      	subs	r6, #1
 8015428:	e79c      	b.n	8015364 <__multiply+0x84>
 801542a:	bf00      	nop
 801542c:	08016883 	.word	0x08016883
 8015430:	080168f4 	.word	0x080168f4

08015434 <__pow5mult>:
 8015434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015438:	4615      	mov	r5, r2
 801543a:	f012 0203 	ands.w	r2, r2, #3
 801543e:	4606      	mov	r6, r0
 8015440:	460f      	mov	r7, r1
 8015442:	d007      	beq.n	8015454 <__pow5mult+0x20>
 8015444:	4c25      	ldr	r4, [pc, #148]	; (80154dc <__pow5mult+0xa8>)
 8015446:	3a01      	subs	r2, #1
 8015448:	2300      	movs	r3, #0
 801544a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801544e:	f7ff fe9b 	bl	8015188 <__multadd>
 8015452:	4607      	mov	r7, r0
 8015454:	10ad      	asrs	r5, r5, #2
 8015456:	d03d      	beq.n	80154d4 <__pow5mult+0xa0>
 8015458:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801545a:	b97c      	cbnz	r4, 801547c <__pow5mult+0x48>
 801545c:	2010      	movs	r0, #16
 801545e:	f7ff fe29 	bl	80150b4 <malloc>
 8015462:	4602      	mov	r2, r0
 8015464:	6270      	str	r0, [r6, #36]	; 0x24
 8015466:	b928      	cbnz	r0, 8015474 <__pow5mult+0x40>
 8015468:	4b1d      	ldr	r3, [pc, #116]	; (80154e0 <__pow5mult+0xac>)
 801546a:	481e      	ldr	r0, [pc, #120]	; (80154e4 <__pow5mult+0xb0>)
 801546c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015470:	f000 fc62 	bl	8015d38 <__assert_func>
 8015474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015478:	6004      	str	r4, [r0, #0]
 801547a:	60c4      	str	r4, [r0, #12]
 801547c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015484:	b94c      	cbnz	r4, 801549a <__pow5mult+0x66>
 8015486:	f240 2171 	movw	r1, #625	; 0x271
 801548a:	4630      	mov	r0, r6
 801548c:	f7ff ff12 	bl	80152b4 <__i2b>
 8015490:	2300      	movs	r3, #0
 8015492:	f8c8 0008 	str.w	r0, [r8, #8]
 8015496:	4604      	mov	r4, r0
 8015498:	6003      	str	r3, [r0, #0]
 801549a:	f04f 0900 	mov.w	r9, #0
 801549e:	07eb      	lsls	r3, r5, #31
 80154a0:	d50a      	bpl.n	80154b8 <__pow5mult+0x84>
 80154a2:	4639      	mov	r1, r7
 80154a4:	4622      	mov	r2, r4
 80154a6:	4630      	mov	r0, r6
 80154a8:	f7ff ff1a 	bl	80152e0 <__multiply>
 80154ac:	4639      	mov	r1, r7
 80154ae:	4680      	mov	r8, r0
 80154b0:	4630      	mov	r0, r6
 80154b2:	f7ff fe47 	bl	8015144 <_Bfree>
 80154b6:	4647      	mov	r7, r8
 80154b8:	106d      	asrs	r5, r5, #1
 80154ba:	d00b      	beq.n	80154d4 <__pow5mult+0xa0>
 80154bc:	6820      	ldr	r0, [r4, #0]
 80154be:	b938      	cbnz	r0, 80154d0 <__pow5mult+0x9c>
 80154c0:	4622      	mov	r2, r4
 80154c2:	4621      	mov	r1, r4
 80154c4:	4630      	mov	r0, r6
 80154c6:	f7ff ff0b 	bl	80152e0 <__multiply>
 80154ca:	6020      	str	r0, [r4, #0]
 80154cc:	f8c0 9000 	str.w	r9, [r0]
 80154d0:	4604      	mov	r4, r0
 80154d2:	e7e4      	b.n	801549e <__pow5mult+0x6a>
 80154d4:	4638      	mov	r0, r7
 80154d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154da:	bf00      	nop
 80154dc:	08016a40 	.word	0x08016a40
 80154e0:	08016811 	.word	0x08016811
 80154e4:	080168f4 	.word	0x080168f4

080154e8 <__lshift>:
 80154e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154ec:	460c      	mov	r4, r1
 80154ee:	6849      	ldr	r1, [r1, #4]
 80154f0:	6923      	ldr	r3, [r4, #16]
 80154f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80154f6:	68a3      	ldr	r3, [r4, #8]
 80154f8:	4607      	mov	r7, r0
 80154fa:	4691      	mov	r9, r2
 80154fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015500:	f108 0601 	add.w	r6, r8, #1
 8015504:	42b3      	cmp	r3, r6
 8015506:	db0b      	blt.n	8015520 <__lshift+0x38>
 8015508:	4638      	mov	r0, r7
 801550a:	f7ff fddb 	bl	80150c4 <_Balloc>
 801550e:	4605      	mov	r5, r0
 8015510:	b948      	cbnz	r0, 8015526 <__lshift+0x3e>
 8015512:	4602      	mov	r2, r0
 8015514:	4b2a      	ldr	r3, [pc, #168]	; (80155c0 <__lshift+0xd8>)
 8015516:	482b      	ldr	r0, [pc, #172]	; (80155c4 <__lshift+0xdc>)
 8015518:	f240 11d9 	movw	r1, #473	; 0x1d9
 801551c:	f000 fc0c 	bl	8015d38 <__assert_func>
 8015520:	3101      	adds	r1, #1
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	e7ee      	b.n	8015504 <__lshift+0x1c>
 8015526:	2300      	movs	r3, #0
 8015528:	f100 0114 	add.w	r1, r0, #20
 801552c:	f100 0210 	add.w	r2, r0, #16
 8015530:	4618      	mov	r0, r3
 8015532:	4553      	cmp	r3, sl
 8015534:	db37      	blt.n	80155a6 <__lshift+0xbe>
 8015536:	6920      	ldr	r0, [r4, #16]
 8015538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801553c:	f104 0314 	add.w	r3, r4, #20
 8015540:	f019 091f 	ands.w	r9, r9, #31
 8015544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801554c:	d02f      	beq.n	80155ae <__lshift+0xc6>
 801554e:	f1c9 0e20 	rsb	lr, r9, #32
 8015552:	468a      	mov	sl, r1
 8015554:	f04f 0c00 	mov.w	ip, #0
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	fa02 f209 	lsl.w	r2, r2, r9
 801555e:	ea42 020c 	orr.w	r2, r2, ip
 8015562:	f84a 2b04 	str.w	r2, [sl], #4
 8015566:	f853 2b04 	ldr.w	r2, [r3], #4
 801556a:	4298      	cmp	r0, r3
 801556c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015570:	d8f2      	bhi.n	8015558 <__lshift+0x70>
 8015572:	1b03      	subs	r3, r0, r4
 8015574:	3b15      	subs	r3, #21
 8015576:	f023 0303 	bic.w	r3, r3, #3
 801557a:	3304      	adds	r3, #4
 801557c:	f104 0215 	add.w	r2, r4, #21
 8015580:	4290      	cmp	r0, r2
 8015582:	bf38      	it	cc
 8015584:	2304      	movcc	r3, #4
 8015586:	f841 c003 	str.w	ip, [r1, r3]
 801558a:	f1bc 0f00 	cmp.w	ip, #0
 801558e:	d001      	beq.n	8015594 <__lshift+0xac>
 8015590:	f108 0602 	add.w	r6, r8, #2
 8015594:	3e01      	subs	r6, #1
 8015596:	4638      	mov	r0, r7
 8015598:	612e      	str	r6, [r5, #16]
 801559a:	4621      	mov	r1, r4
 801559c:	f7ff fdd2 	bl	8015144 <_Bfree>
 80155a0:	4628      	mov	r0, r5
 80155a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80155aa:	3301      	adds	r3, #1
 80155ac:	e7c1      	b.n	8015532 <__lshift+0x4a>
 80155ae:	3904      	subs	r1, #4
 80155b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80155b8:	4298      	cmp	r0, r3
 80155ba:	d8f9      	bhi.n	80155b0 <__lshift+0xc8>
 80155bc:	e7ea      	b.n	8015594 <__lshift+0xac>
 80155be:	bf00      	nop
 80155c0:	08016883 	.word	0x08016883
 80155c4:	080168f4 	.word	0x080168f4

080155c8 <__mcmp>:
 80155c8:	b530      	push	{r4, r5, lr}
 80155ca:	6902      	ldr	r2, [r0, #16]
 80155cc:	690c      	ldr	r4, [r1, #16]
 80155ce:	1b12      	subs	r2, r2, r4
 80155d0:	d10e      	bne.n	80155f0 <__mcmp+0x28>
 80155d2:	f100 0314 	add.w	r3, r0, #20
 80155d6:	3114      	adds	r1, #20
 80155d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80155dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80155e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80155e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80155e8:	42a5      	cmp	r5, r4
 80155ea:	d003      	beq.n	80155f4 <__mcmp+0x2c>
 80155ec:	d305      	bcc.n	80155fa <__mcmp+0x32>
 80155ee:	2201      	movs	r2, #1
 80155f0:	4610      	mov	r0, r2
 80155f2:	bd30      	pop	{r4, r5, pc}
 80155f4:	4283      	cmp	r3, r0
 80155f6:	d3f3      	bcc.n	80155e0 <__mcmp+0x18>
 80155f8:	e7fa      	b.n	80155f0 <__mcmp+0x28>
 80155fa:	f04f 32ff 	mov.w	r2, #4294967295
 80155fe:	e7f7      	b.n	80155f0 <__mcmp+0x28>

08015600 <__mdiff>:
 8015600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	460c      	mov	r4, r1
 8015606:	4606      	mov	r6, r0
 8015608:	4611      	mov	r1, r2
 801560a:	4620      	mov	r0, r4
 801560c:	4690      	mov	r8, r2
 801560e:	f7ff ffdb 	bl	80155c8 <__mcmp>
 8015612:	1e05      	subs	r5, r0, #0
 8015614:	d110      	bne.n	8015638 <__mdiff+0x38>
 8015616:	4629      	mov	r1, r5
 8015618:	4630      	mov	r0, r6
 801561a:	f7ff fd53 	bl	80150c4 <_Balloc>
 801561e:	b930      	cbnz	r0, 801562e <__mdiff+0x2e>
 8015620:	4b3a      	ldr	r3, [pc, #232]	; (801570c <__mdiff+0x10c>)
 8015622:	4602      	mov	r2, r0
 8015624:	f240 2132 	movw	r1, #562	; 0x232
 8015628:	4839      	ldr	r0, [pc, #228]	; (8015710 <__mdiff+0x110>)
 801562a:	f000 fb85 	bl	8015d38 <__assert_func>
 801562e:	2301      	movs	r3, #1
 8015630:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015638:	bfa4      	itt	ge
 801563a:	4643      	movge	r3, r8
 801563c:	46a0      	movge	r8, r4
 801563e:	4630      	mov	r0, r6
 8015640:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015644:	bfa6      	itte	ge
 8015646:	461c      	movge	r4, r3
 8015648:	2500      	movge	r5, #0
 801564a:	2501      	movlt	r5, #1
 801564c:	f7ff fd3a 	bl	80150c4 <_Balloc>
 8015650:	b920      	cbnz	r0, 801565c <__mdiff+0x5c>
 8015652:	4b2e      	ldr	r3, [pc, #184]	; (801570c <__mdiff+0x10c>)
 8015654:	4602      	mov	r2, r0
 8015656:	f44f 7110 	mov.w	r1, #576	; 0x240
 801565a:	e7e5      	b.n	8015628 <__mdiff+0x28>
 801565c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015660:	6926      	ldr	r6, [r4, #16]
 8015662:	60c5      	str	r5, [r0, #12]
 8015664:	f104 0914 	add.w	r9, r4, #20
 8015668:	f108 0514 	add.w	r5, r8, #20
 801566c:	f100 0e14 	add.w	lr, r0, #20
 8015670:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015674:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015678:	f108 0210 	add.w	r2, r8, #16
 801567c:	46f2      	mov	sl, lr
 801567e:	2100      	movs	r1, #0
 8015680:	f859 3b04 	ldr.w	r3, [r9], #4
 8015684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015688:	fa1f f883 	uxth.w	r8, r3
 801568c:	fa11 f18b 	uxtah	r1, r1, fp
 8015690:	0c1b      	lsrs	r3, r3, #16
 8015692:	eba1 0808 	sub.w	r8, r1, r8
 8015696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801569a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801569e:	fa1f f888 	uxth.w	r8, r8
 80156a2:	1419      	asrs	r1, r3, #16
 80156a4:	454e      	cmp	r6, r9
 80156a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80156aa:	f84a 3b04 	str.w	r3, [sl], #4
 80156ae:	d8e7      	bhi.n	8015680 <__mdiff+0x80>
 80156b0:	1b33      	subs	r3, r6, r4
 80156b2:	3b15      	subs	r3, #21
 80156b4:	f023 0303 	bic.w	r3, r3, #3
 80156b8:	3304      	adds	r3, #4
 80156ba:	3415      	adds	r4, #21
 80156bc:	42a6      	cmp	r6, r4
 80156be:	bf38      	it	cc
 80156c0:	2304      	movcc	r3, #4
 80156c2:	441d      	add	r5, r3
 80156c4:	4473      	add	r3, lr
 80156c6:	469e      	mov	lr, r3
 80156c8:	462e      	mov	r6, r5
 80156ca:	4566      	cmp	r6, ip
 80156cc:	d30e      	bcc.n	80156ec <__mdiff+0xec>
 80156ce:	f10c 0203 	add.w	r2, ip, #3
 80156d2:	1b52      	subs	r2, r2, r5
 80156d4:	f022 0203 	bic.w	r2, r2, #3
 80156d8:	3d03      	subs	r5, #3
 80156da:	45ac      	cmp	ip, r5
 80156dc:	bf38      	it	cc
 80156de:	2200      	movcc	r2, #0
 80156e0:	441a      	add	r2, r3
 80156e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80156e6:	b17b      	cbz	r3, 8015708 <__mdiff+0x108>
 80156e8:	6107      	str	r7, [r0, #16]
 80156ea:	e7a3      	b.n	8015634 <__mdiff+0x34>
 80156ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80156f0:	fa11 f288 	uxtah	r2, r1, r8
 80156f4:	1414      	asrs	r4, r2, #16
 80156f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80156fa:	b292      	uxth	r2, r2
 80156fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015700:	f84e 2b04 	str.w	r2, [lr], #4
 8015704:	1421      	asrs	r1, r4, #16
 8015706:	e7e0      	b.n	80156ca <__mdiff+0xca>
 8015708:	3f01      	subs	r7, #1
 801570a:	e7ea      	b.n	80156e2 <__mdiff+0xe2>
 801570c:	08016883 	.word	0x08016883
 8015710:	080168f4 	.word	0x080168f4

08015714 <__d2b>:
 8015714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015718:	4689      	mov	r9, r1
 801571a:	2101      	movs	r1, #1
 801571c:	ec57 6b10 	vmov	r6, r7, d0
 8015720:	4690      	mov	r8, r2
 8015722:	f7ff fccf 	bl	80150c4 <_Balloc>
 8015726:	4604      	mov	r4, r0
 8015728:	b930      	cbnz	r0, 8015738 <__d2b+0x24>
 801572a:	4602      	mov	r2, r0
 801572c:	4b25      	ldr	r3, [pc, #148]	; (80157c4 <__d2b+0xb0>)
 801572e:	4826      	ldr	r0, [pc, #152]	; (80157c8 <__d2b+0xb4>)
 8015730:	f240 310a 	movw	r1, #778	; 0x30a
 8015734:	f000 fb00 	bl	8015d38 <__assert_func>
 8015738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801573c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015740:	bb35      	cbnz	r5, 8015790 <__d2b+0x7c>
 8015742:	2e00      	cmp	r6, #0
 8015744:	9301      	str	r3, [sp, #4]
 8015746:	d028      	beq.n	801579a <__d2b+0x86>
 8015748:	4668      	mov	r0, sp
 801574a:	9600      	str	r6, [sp, #0]
 801574c:	f7ff fd82 	bl	8015254 <__lo0bits>
 8015750:	9900      	ldr	r1, [sp, #0]
 8015752:	b300      	cbz	r0, 8015796 <__d2b+0x82>
 8015754:	9a01      	ldr	r2, [sp, #4]
 8015756:	f1c0 0320 	rsb	r3, r0, #32
 801575a:	fa02 f303 	lsl.w	r3, r2, r3
 801575e:	430b      	orrs	r3, r1
 8015760:	40c2      	lsrs	r2, r0
 8015762:	6163      	str	r3, [r4, #20]
 8015764:	9201      	str	r2, [sp, #4]
 8015766:	9b01      	ldr	r3, [sp, #4]
 8015768:	61a3      	str	r3, [r4, #24]
 801576a:	2b00      	cmp	r3, #0
 801576c:	bf14      	ite	ne
 801576e:	2202      	movne	r2, #2
 8015770:	2201      	moveq	r2, #1
 8015772:	6122      	str	r2, [r4, #16]
 8015774:	b1d5      	cbz	r5, 80157ac <__d2b+0x98>
 8015776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801577a:	4405      	add	r5, r0
 801577c:	f8c9 5000 	str.w	r5, [r9]
 8015780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015784:	f8c8 0000 	str.w	r0, [r8]
 8015788:	4620      	mov	r0, r4
 801578a:	b003      	add	sp, #12
 801578c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015794:	e7d5      	b.n	8015742 <__d2b+0x2e>
 8015796:	6161      	str	r1, [r4, #20]
 8015798:	e7e5      	b.n	8015766 <__d2b+0x52>
 801579a:	a801      	add	r0, sp, #4
 801579c:	f7ff fd5a 	bl	8015254 <__lo0bits>
 80157a0:	9b01      	ldr	r3, [sp, #4]
 80157a2:	6163      	str	r3, [r4, #20]
 80157a4:	2201      	movs	r2, #1
 80157a6:	6122      	str	r2, [r4, #16]
 80157a8:	3020      	adds	r0, #32
 80157aa:	e7e3      	b.n	8015774 <__d2b+0x60>
 80157ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80157b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80157b4:	f8c9 0000 	str.w	r0, [r9]
 80157b8:	6918      	ldr	r0, [r3, #16]
 80157ba:	f7ff fd2b 	bl	8015214 <__hi0bits>
 80157be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80157c2:	e7df      	b.n	8015784 <__d2b+0x70>
 80157c4:	08016883 	.word	0x08016883
 80157c8:	080168f4 	.word	0x080168f4

080157cc <_calloc_r>:
 80157cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157ce:	fba1 2402 	umull	r2, r4, r1, r2
 80157d2:	b94c      	cbnz	r4, 80157e8 <_calloc_r+0x1c>
 80157d4:	4611      	mov	r1, r2
 80157d6:	9201      	str	r2, [sp, #4]
 80157d8:	f000 f87a 	bl	80158d0 <_malloc_r>
 80157dc:	9a01      	ldr	r2, [sp, #4]
 80157de:	4605      	mov	r5, r0
 80157e0:	b930      	cbnz	r0, 80157f0 <_calloc_r+0x24>
 80157e2:	4628      	mov	r0, r5
 80157e4:	b003      	add	sp, #12
 80157e6:	bd30      	pop	{r4, r5, pc}
 80157e8:	220c      	movs	r2, #12
 80157ea:	6002      	str	r2, [r0, #0]
 80157ec:	2500      	movs	r5, #0
 80157ee:	e7f8      	b.n	80157e2 <_calloc_r+0x16>
 80157f0:	4621      	mov	r1, r4
 80157f2:	f7fd fe01 	bl	80133f8 <memset>
 80157f6:	e7f4      	b.n	80157e2 <_calloc_r+0x16>

080157f8 <_free_r>:
 80157f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157fa:	2900      	cmp	r1, #0
 80157fc:	d044      	beq.n	8015888 <_free_r+0x90>
 80157fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015802:	9001      	str	r0, [sp, #4]
 8015804:	2b00      	cmp	r3, #0
 8015806:	f1a1 0404 	sub.w	r4, r1, #4
 801580a:	bfb8      	it	lt
 801580c:	18e4      	addlt	r4, r4, r3
 801580e:	f000 fb19 	bl	8015e44 <__malloc_lock>
 8015812:	4a1e      	ldr	r2, [pc, #120]	; (801588c <_free_r+0x94>)
 8015814:	9801      	ldr	r0, [sp, #4]
 8015816:	6813      	ldr	r3, [r2, #0]
 8015818:	b933      	cbnz	r3, 8015828 <_free_r+0x30>
 801581a:	6063      	str	r3, [r4, #4]
 801581c:	6014      	str	r4, [r2, #0]
 801581e:	b003      	add	sp, #12
 8015820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015824:	f000 bb14 	b.w	8015e50 <__malloc_unlock>
 8015828:	42a3      	cmp	r3, r4
 801582a:	d908      	bls.n	801583e <_free_r+0x46>
 801582c:	6825      	ldr	r5, [r4, #0]
 801582e:	1961      	adds	r1, r4, r5
 8015830:	428b      	cmp	r3, r1
 8015832:	bf01      	itttt	eq
 8015834:	6819      	ldreq	r1, [r3, #0]
 8015836:	685b      	ldreq	r3, [r3, #4]
 8015838:	1949      	addeq	r1, r1, r5
 801583a:	6021      	streq	r1, [r4, #0]
 801583c:	e7ed      	b.n	801581a <_free_r+0x22>
 801583e:	461a      	mov	r2, r3
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	b10b      	cbz	r3, 8015848 <_free_r+0x50>
 8015844:	42a3      	cmp	r3, r4
 8015846:	d9fa      	bls.n	801583e <_free_r+0x46>
 8015848:	6811      	ldr	r1, [r2, #0]
 801584a:	1855      	adds	r5, r2, r1
 801584c:	42a5      	cmp	r5, r4
 801584e:	d10b      	bne.n	8015868 <_free_r+0x70>
 8015850:	6824      	ldr	r4, [r4, #0]
 8015852:	4421      	add	r1, r4
 8015854:	1854      	adds	r4, r2, r1
 8015856:	42a3      	cmp	r3, r4
 8015858:	6011      	str	r1, [r2, #0]
 801585a:	d1e0      	bne.n	801581e <_free_r+0x26>
 801585c:	681c      	ldr	r4, [r3, #0]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	6053      	str	r3, [r2, #4]
 8015862:	4421      	add	r1, r4
 8015864:	6011      	str	r1, [r2, #0]
 8015866:	e7da      	b.n	801581e <_free_r+0x26>
 8015868:	d902      	bls.n	8015870 <_free_r+0x78>
 801586a:	230c      	movs	r3, #12
 801586c:	6003      	str	r3, [r0, #0]
 801586e:	e7d6      	b.n	801581e <_free_r+0x26>
 8015870:	6825      	ldr	r5, [r4, #0]
 8015872:	1961      	adds	r1, r4, r5
 8015874:	428b      	cmp	r3, r1
 8015876:	bf04      	itt	eq
 8015878:	6819      	ldreq	r1, [r3, #0]
 801587a:	685b      	ldreq	r3, [r3, #4]
 801587c:	6063      	str	r3, [r4, #4]
 801587e:	bf04      	itt	eq
 8015880:	1949      	addeq	r1, r1, r5
 8015882:	6021      	streq	r1, [r4, #0]
 8015884:	6054      	str	r4, [r2, #4]
 8015886:	e7ca      	b.n	801581e <_free_r+0x26>
 8015888:	b003      	add	sp, #12
 801588a:	bd30      	pop	{r4, r5, pc}
 801588c:	20002484 	.word	0x20002484

08015890 <sbrk_aligned>:
 8015890:	b570      	push	{r4, r5, r6, lr}
 8015892:	4e0e      	ldr	r6, [pc, #56]	; (80158cc <sbrk_aligned+0x3c>)
 8015894:	460c      	mov	r4, r1
 8015896:	6831      	ldr	r1, [r6, #0]
 8015898:	4605      	mov	r5, r0
 801589a:	b911      	cbnz	r1, 80158a2 <sbrk_aligned+0x12>
 801589c:	f000 f9e6 	bl	8015c6c <_sbrk_r>
 80158a0:	6030      	str	r0, [r6, #0]
 80158a2:	4621      	mov	r1, r4
 80158a4:	4628      	mov	r0, r5
 80158a6:	f000 f9e1 	bl	8015c6c <_sbrk_r>
 80158aa:	1c43      	adds	r3, r0, #1
 80158ac:	d00a      	beq.n	80158c4 <sbrk_aligned+0x34>
 80158ae:	1cc4      	adds	r4, r0, #3
 80158b0:	f024 0403 	bic.w	r4, r4, #3
 80158b4:	42a0      	cmp	r0, r4
 80158b6:	d007      	beq.n	80158c8 <sbrk_aligned+0x38>
 80158b8:	1a21      	subs	r1, r4, r0
 80158ba:	4628      	mov	r0, r5
 80158bc:	f000 f9d6 	bl	8015c6c <_sbrk_r>
 80158c0:	3001      	adds	r0, #1
 80158c2:	d101      	bne.n	80158c8 <sbrk_aligned+0x38>
 80158c4:	f04f 34ff 	mov.w	r4, #4294967295
 80158c8:	4620      	mov	r0, r4
 80158ca:	bd70      	pop	{r4, r5, r6, pc}
 80158cc:	20002488 	.word	0x20002488

080158d0 <_malloc_r>:
 80158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d4:	1ccd      	adds	r5, r1, #3
 80158d6:	f025 0503 	bic.w	r5, r5, #3
 80158da:	3508      	adds	r5, #8
 80158dc:	2d0c      	cmp	r5, #12
 80158de:	bf38      	it	cc
 80158e0:	250c      	movcc	r5, #12
 80158e2:	2d00      	cmp	r5, #0
 80158e4:	4607      	mov	r7, r0
 80158e6:	db01      	blt.n	80158ec <_malloc_r+0x1c>
 80158e8:	42a9      	cmp	r1, r5
 80158ea:	d905      	bls.n	80158f8 <_malloc_r+0x28>
 80158ec:	230c      	movs	r3, #12
 80158ee:	603b      	str	r3, [r7, #0]
 80158f0:	2600      	movs	r6, #0
 80158f2:	4630      	mov	r0, r6
 80158f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f8:	4e2e      	ldr	r6, [pc, #184]	; (80159b4 <_malloc_r+0xe4>)
 80158fa:	f000 faa3 	bl	8015e44 <__malloc_lock>
 80158fe:	6833      	ldr	r3, [r6, #0]
 8015900:	461c      	mov	r4, r3
 8015902:	bb34      	cbnz	r4, 8015952 <_malloc_r+0x82>
 8015904:	4629      	mov	r1, r5
 8015906:	4638      	mov	r0, r7
 8015908:	f7ff ffc2 	bl	8015890 <sbrk_aligned>
 801590c:	1c43      	adds	r3, r0, #1
 801590e:	4604      	mov	r4, r0
 8015910:	d14d      	bne.n	80159ae <_malloc_r+0xde>
 8015912:	6834      	ldr	r4, [r6, #0]
 8015914:	4626      	mov	r6, r4
 8015916:	2e00      	cmp	r6, #0
 8015918:	d140      	bne.n	801599c <_malloc_r+0xcc>
 801591a:	6823      	ldr	r3, [r4, #0]
 801591c:	4631      	mov	r1, r6
 801591e:	4638      	mov	r0, r7
 8015920:	eb04 0803 	add.w	r8, r4, r3
 8015924:	f000 f9a2 	bl	8015c6c <_sbrk_r>
 8015928:	4580      	cmp	r8, r0
 801592a:	d13a      	bne.n	80159a2 <_malloc_r+0xd2>
 801592c:	6821      	ldr	r1, [r4, #0]
 801592e:	3503      	adds	r5, #3
 8015930:	1a6d      	subs	r5, r5, r1
 8015932:	f025 0503 	bic.w	r5, r5, #3
 8015936:	3508      	adds	r5, #8
 8015938:	2d0c      	cmp	r5, #12
 801593a:	bf38      	it	cc
 801593c:	250c      	movcc	r5, #12
 801593e:	4629      	mov	r1, r5
 8015940:	4638      	mov	r0, r7
 8015942:	f7ff ffa5 	bl	8015890 <sbrk_aligned>
 8015946:	3001      	adds	r0, #1
 8015948:	d02b      	beq.n	80159a2 <_malloc_r+0xd2>
 801594a:	6823      	ldr	r3, [r4, #0]
 801594c:	442b      	add	r3, r5
 801594e:	6023      	str	r3, [r4, #0]
 8015950:	e00e      	b.n	8015970 <_malloc_r+0xa0>
 8015952:	6822      	ldr	r2, [r4, #0]
 8015954:	1b52      	subs	r2, r2, r5
 8015956:	d41e      	bmi.n	8015996 <_malloc_r+0xc6>
 8015958:	2a0b      	cmp	r2, #11
 801595a:	d916      	bls.n	801598a <_malloc_r+0xba>
 801595c:	1961      	adds	r1, r4, r5
 801595e:	42a3      	cmp	r3, r4
 8015960:	6025      	str	r5, [r4, #0]
 8015962:	bf18      	it	ne
 8015964:	6059      	strne	r1, [r3, #4]
 8015966:	6863      	ldr	r3, [r4, #4]
 8015968:	bf08      	it	eq
 801596a:	6031      	streq	r1, [r6, #0]
 801596c:	5162      	str	r2, [r4, r5]
 801596e:	604b      	str	r3, [r1, #4]
 8015970:	4638      	mov	r0, r7
 8015972:	f104 060b 	add.w	r6, r4, #11
 8015976:	f000 fa6b 	bl	8015e50 <__malloc_unlock>
 801597a:	f026 0607 	bic.w	r6, r6, #7
 801597e:	1d23      	adds	r3, r4, #4
 8015980:	1af2      	subs	r2, r6, r3
 8015982:	d0b6      	beq.n	80158f2 <_malloc_r+0x22>
 8015984:	1b9b      	subs	r3, r3, r6
 8015986:	50a3      	str	r3, [r4, r2]
 8015988:	e7b3      	b.n	80158f2 <_malloc_r+0x22>
 801598a:	6862      	ldr	r2, [r4, #4]
 801598c:	42a3      	cmp	r3, r4
 801598e:	bf0c      	ite	eq
 8015990:	6032      	streq	r2, [r6, #0]
 8015992:	605a      	strne	r2, [r3, #4]
 8015994:	e7ec      	b.n	8015970 <_malloc_r+0xa0>
 8015996:	4623      	mov	r3, r4
 8015998:	6864      	ldr	r4, [r4, #4]
 801599a:	e7b2      	b.n	8015902 <_malloc_r+0x32>
 801599c:	4634      	mov	r4, r6
 801599e:	6876      	ldr	r6, [r6, #4]
 80159a0:	e7b9      	b.n	8015916 <_malloc_r+0x46>
 80159a2:	230c      	movs	r3, #12
 80159a4:	603b      	str	r3, [r7, #0]
 80159a6:	4638      	mov	r0, r7
 80159a8:	f000 fa52 	bl	8015e50 <__malloc_unlock>
 80159ac:	e7a1      	b.n	80158f2 <_malloc_r+0x22>
 80159ae:	6025      	str	r5, [r4, #0]
 80159b0:	e7de      	b.n	8015970 <_malloc_r+0xa0>
 80159b2:	bf00      	nop
 80159b4:	20002484 	.word	0x20002484

080159b8 <__sfputc_r>:
 80159b8:	6893      	ldr	r3, [r2, #8]
 80159ba:	3b01      	subs	r3, #1
 80159bc:	2b00      	cmp	r3, #0
 80159be:	b410      	push	{r4}
 80159c0:	6093      	str	r3, [r2, #8]
 80159c2:	da08      	bge.n	80159d6 <__sfputc_r+0x1e>
 80159c4:	6994      	ldr	r4, [r2, #24]
 80159c6:	42a3      	cmp	r3, r4
 80159c8:	db01      	blt.n	80159ce <__sfputc_r+0x16>
 80159ca:	290a      	cmp	r1, #10
 80159cc:	d103      	bne.n	80159d6 <__sfputc_r+0x1e>
 80159ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159d2:	f7fe ba11 	b.w	8013df8 <__swbuf_r>
 80159d6:	6813      	ldr	r3, [r2, #0]
 80159d8:	1c58      	adds	r0, r3, #1
 80159da:	6010      	str	r0, [r2, #0]
 80159dc:	7019      	strb	r1, [r3, #0]
 80159de:	4608      	mov	r0, r1
 80159e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <__sfputs_r>:
 80159e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e8:	4606      	mov	r6, r0
 80159ea:	460f      	mov	r7, r1
 80159ec:	4614      	mov	r4, r2
 80159ee:	18d5      	adds	r5, r2, r3
 80159f0:	42ac      	cmp	r4, r5
 80159f2:	d101      	bne.n	80159f8 <__sfputs_r+0x12>
 80159f4:	2000      	movs	r0, #0
 80159f6:	e007      	b.n	8015a08 <__sfputs_r+0x22>
 80159f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159fc:	463a      	mov	r2, r7
 80159fe:	4630      	mov	r0, r6
 8015a00:	f7ff ffda 	bl	80159b8 <__sfputc_r>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	d1f3      	bne.n	80159f0 <__sfputs_r+0xa>
 8015a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a0c <_vfiprintf_r>:
 8015a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a10:	460d      	mov	r5, r1
 8015a12:	b09d      	sub	sp, #116	; 0x74
 8015a14:	4614      	mov	r4, r2
 8015a16:	4698      	mov	r8, r3
 8015a18:	4606      	mov	r6, r0
 8015a1a:	b118      	cbz	r0, 8015a24 <_vfiprintf_r+0x18>
 8015a1c:	6983      	ldr	r3, [r0, #24]
 8015a1e:	b90b      	cbnz	r3, 8015a24 <_vfiprintf_r+0x18>
 8015a20:	f7ff fa3e 	bl	8014ea0 <__sinit>
 8015a24:	4b89      	ldr	r3, [pc, #548]	; (8015c4c <_vfiprintf_r+0x240>)
 8015a26:	429d      	cmp	r5, r3
 8015a28:	d11b      	bne.n	8015a62 <_vfiprintf_r+0x56>
 8015a2a:	6875      	ldr	r5, [r6, #4]
 8015a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a2e:	07d9      	lsls	r1, r3, #31
 8015a30:	d405      	bmi.n	8015a3e <_vfiprintf_r+0x32>
 8015a32:	89ab      	ldrh	r3, [r5, #12]
 8015a34:	059a      	lsls	r2, r3, #22
 8015a36:	d402      	bmi.n	8015a3e <_vfiprintf_r+0x32>
 8015a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a3a:	f7ff fad4 	bl	8014fe6 <__retarget_lock_acquire_recursive>
 8015a3e:	89ab      	ldrh	r3, [r5, #12]
 8015a40:	071b      	lsls	r3, r3, #28
 8015a42:	d501      	bpl.n	8015a48 <_vfiprintf_r+0x3c>
 8015a44:	692b      	ldr	r3, [r5, #16]
 8015a46:	b9eb      	cbnz	r3, 8015a84 <_vfiprintf_r+0x78>
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7fe fa26 	bl	8013e9c <__swsetup_r>
 8015a50:	b1c0      	cbz	r0, 8015a84 <_vfiprintf_r+0x78>
 8015a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a54:	07dc      	lsls	r4, r3, #31
 8015a56:	d50e      	bpl.n	8015a76 <_vfiprintf_r+0x6a>
 8015a58:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5c:	b01d      	add	sp, #116	; 0x74
 8015a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a62:	4b7b      	ldr	r3, [pc, #492]	; (8015c50 <_vfiprintf_r+0x244>)
 8015a64:	429d      	cmp	r5, r3
 8015a66:	d101      	bne.n	8015a6c <_vfiprintf_r+0x60>
 8015a68:	68b5      	ldr	r5, [r6, #8]
 8015a6a:	e7df      	b.n	8015a2c <_vfiprintf_r+0x20>
 8015a6c:	4b79      	ldr	r3, [pc, #484]	; (8015c54 <_vfiprintf_r+0x248>)
 8015a6e:	429d      	cmp	r5, r3
 8015a70:	bf08      	it	eq
 8015a72:	68f5      	ldreq	r5, [r6, #12]
 8015a74:	e7da      	b.n	8015a2c <_vfiprintf_r+0x20>
 8015a76:	89ab      	ldrh	r3, [r5, #12]
 8015a78:	0598      	lsls	r0, r3, #22
 8015a7a:	d4ed      	bmi.n	8015a58 <_vfiprintf_r+0x4c>
 8015a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a7e:	f7ff fab3 	bl	8014fe8 <__retarget_lock_release_recursive>
 8015a82:	e7e9      	b.n	8015a58 <_vfiprintf_r+0x4c>
 8015a84:	2300      	movs	r3, #0
 8015a86:	9309      	str	r3, [sp, #36]	; 0x24
 8015a88:	2320      	movs	r3, #32
 8015a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a92:	2330      	movs	r3, #48	; 0x30
 8015a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015c58 <_vfiprintf_r+0x24c>
 8015a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a9c:	f04f 0901 	mov.w	r9, #1
 8015aa0:	4623      	mov	r3, r4
 8015aa2:	469a      	mov	sl, r3
 8015aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aa8:	b10a      	cbz	r2, 8015aae <_vfiprintf_r+0xa2>
 8015aaa:	2a25      	cmp	r2, #37	; 0x25
 8015aac:	d1f9      	bne.n	8015aa2 <_vfiprintf_r+0x96>
 8015aae:	ebba 0b04 	subs.w	fp, sl, r4
 8015ab2:	d00b      	beq.n	8015acc <_vfiprintf_r+0xc0>
 8015ab4:	465b      	mov	r3, fp
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	4629      	mov	r1, r5
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ff ff93 	bl	80159e6 <__sfputs_r>
 8015ac0:	3001      	adds	r0, #1
 8015ac2:	f000 80aa 	beq.w	8015c1a <_vfiprintf_r+0x20e>
 8015ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ac8:	445a      	add	r2, fp
 8015aca:	9209      	str	r2, [sp, #36]	; 0x24
 8015acc:	f89a 3000 	ldrb.w	r3, [sl]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	f000 80a2 	beq.w	8015c1a <_vfiprintf_r+0x20e>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8015adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ae0:	f10a 0a01 	add.w	sl, sl, #1
 8015ae4:	9304      	str	r3, [sp, #16]
 8015ae6:	9307      	str	r3, [sp, #28]
 8015ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015aec:	931a      	str	r3, [sp, #104]	; 0x68
 8015aee:	4654      	mov	r4, sl
 8015af0:	2205      	movs	r2, #5
 8015af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af6:	4858      	ldr	r0, [pc, #352]	; (8015c58 <_vfiprintf_r+0x24c>)
 8015af8:	f7ea fb9a 	bl	8000230 <memchr>
 8015afc:	9a04      	ldr	r2, [sp, #16]
 8015afe:	b9d8      	cbnz	r0, 8015b38 <_vfiprintf_r+0x12c>
 8015b00:	06d1      	lsls	r1, r2, #27
 8015b02:	bf44      	itt	mi
 8015b04:	2320      	movmi	r3, #32
 8015b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b0a:	0713      	lsls	r3, r2, #28
 8015b0c:	bf44      	itt	mi
 8015b0e:	232b      	movmi	r3, #43	; 0x2b
 8015b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b14:	f89a 3000 	ldrb.w	r3, [sl]
 8015b18:	2b2a      	cmp	r3, #42	; 0x2a
 8015b1a:	d015      	beq.n	8015b48 <_vfiprintf_r+0x13c>
 8015b1c:	9a07      	ldr	r2, [sp, #28]
 8015b1e:	4654      	mov	r4, sl
 8015b20:	2000      	movs	r0, #0
 8015b22:	f04f 0c0a 	mov.w	ip, #10
 8015b26:	4621      	mov	r1, r4
 8015b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b2c:	3b30      	subs	r3, #48	; 0x30
 8015b2e:	2b09      	cmp	r3, #9
 8015b30:	d94e      	bls.n	8015bd0 <_vfiprintf_r+0x1c4>
 8015b32:	b1b0      	cbz	r0, 8015b62 <_vfiprintf_r+0x156>
 8015b34:	9207      	str	r2, [sp, #28]
 8015b36:	e014      	b.n	8015b62 <_vfiprintf_r+0x156>
 8015b38:	eba0 0308 	sub.w	r3, r0, r8
 8015b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8015b40:	4313      	orrs	r3, r2
 8015b42:	9304      	str	r3, [sp, #16]
 8015b44:	46a2      	mov	sl, r4
 8015b46:	e7d2      	b.n	8015aee <_vfiprintf_r+0xe2>
 8015b48:	9b03      	ldr	r3, [sp, #12]
 8015b4a:	1d19      	adds	r1, r3, #4
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	9103      	str	r1, [sp, #12]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	bfbb      	ittet	lt
 8015b54:	425b      	neglt	r3, r3
 8015b56:	f042 0202 	orrlt.w	r2, r2, #2
 8015b5a:	9307      	strge	r3, [sp, #28]
 8015b5c:	9307      	strlt	r3, [sp, #28]
 8015b5e:	bfb8      	it	lt
 8015b60:	9204      	strlt	r2, [sp, #16]
 8015b62:	7823      	ldrb	r3, [r4, #0]
 8015b64:	2b2e      	cmp	r3, #46	; 0x2e
 8015b66:	d10c      	bne.n	8015b82 <_vfiprintf_r+0x176>
 8015b68:	7863      	ldrb	r3, [r4, #1]
 8015b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b6c:	d135      	bne.n	8015bda <_vfiprintf_r+0x1ce>
 8015b6e:	9b03      	ldr	r3, [sp, #12]
 8015b70:	1d1a      	adds	r2, r3, #4
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	9203      	str	r2, [sp, #12]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	bfb8      	it	lt
 8015b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b7e:	3402      	adds	r4, #2
 8015b80:	9305      	str	r3, [sp, #20]
 8015b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015c68 <_vfiprintf_r+0x25c>
 8015b86:	7821      	ldrb	r1, [r4, #0]
 8015b88:	2203      	movs	r2, #3
 8015b8a:	4650      	mov	r0, sl
 8015b8c:	f7ea fb50 	bl	8000230 <memchr>
 8015b90:	b140      	cbz	r0, 8015ba4 <_vfiprintf_r+0x198>
 8015b92:	2340      	movs	r3, #64	; 0x40
 8015b94:	eba0 000a 	sub.w	r0, r0, sl
 8015b98:	fa03 f000 	lsl.w	r0, r3, r0
 8015b9c:	9b04      	ldr	r3, [sp, #16]
 8015b9e:	4303      	orrs	r3, r0
 8015ba0:	3401      	adds	r4, #1
 8015ba2:	9304      	str	r3, [sp, #16]
 8015ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ba8:	482c      	ldr	r0, [pc, #176]	; (8015c5c <_vfiprintf_r+0x250>)
 8015baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bae:	2206      	movs	r2, #6
 8015bb0:	f7ea fb3e 	bl	8000230 <memchr>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d03f      	beq.n	8015c38 <_vfiprintf_r+0x22c>
 8015bb8:	4b29      	ldr	r3, [pc, #164]	; (8015c60 <_vfiprintf_r+0x254>)
 8015bba:	bb1b      	cbnz	r3, 8015c04 <_vfiprintf_r+0x1f8>
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	3307      	adds	r3, #7
 8015bc0:	f023 0307 	bic.w	r3, r3, #7
 8015bc4:	3308      	adds	r3, #8
 8015bc6:	9303      	str	r3, [sp, #12]
 8015bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bca:	443b      	add	r3, r7
 8015bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8015bce:	e767      	b.n	8015aa0 <_vfiprintf_r+0x94>
 8015bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bd4:	460c      	mov	r4, r1
 8015bd6:	2001      	movs	r0, #1
 8015bd8:	e7a5      	b.n	8015b26 <_vfiprintf_r+0x11a>
 8015bda:	2300      	movs	r3, #0
 8015bdc:	3401      	adds	r4, #1
 8015bde:	9305      	str	r3, [sp, #20]
 8015be0:	4619      	mov	r1, r3
 8015be2:	f04f 0c0a 	mov.w	ip, #10
 8015be6:	4620      	mov	r0, r4
 8015be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bec:	3a30      	subs	r2, #48	; 0x30
 8015bee:	2a09      	cmp	r2, #9
 8015bf0:	d903      	bls.n	8015bfa <_vfiprintf_r+0x1ee>
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d0c5      	beq.n	8015b82 <_vfiprintf_r+0x176>
 8015bf6:	9105      	str	r1, [sp, #20]
 8015bf8:	e7c3      	b.n	8015b82 <_vfiprintf_r+0x176>
 8015bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bfe:	4604      	mov	r4, r0
 8015c00:	2301      	movs	r3, #1
 8015c02:	e7f0      	b.n	8015be6 <_vfiprintf_r+0x1da>
 8015c04:	ab03      	add	r3, sp, #12
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	462a      	mov	r2, r5
 8015c0a:	4b16      	ldr	r3, [pc, #88]	; (8015c64 <_vfiprintf_r+0x258>)
 8015c0c:	a904      	add	r1, sp, #16
 8015c0e:	4630      	mov	r0, r6
 8015c10:	f7fd fc9a 	bl	8013548 <_printf_float>
 8015c14:	4607      	mov	r7, r0
 8015c16:	1c78      	adds	r0, r7, #1
 8015c18:	d1d6      	bne.n	8015bc8 <_vfiprintf_r+0x1bc>
 8015c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c1c:	07d9      	lsls	r1, r3, #31
 8015c1e:	d405      	bmi.n	8015c2c <_vfiprintf_r+0x220>
 8015c20:	89ab      	ldrh	r3, [r5, #12]
 8015c22:	059a      	lsls	r2, r3, #22
 8015c24:	d402      	bmi.n	8015c2c <_vfiprintf_r+0x220>
 8015c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c28:	f7ff f9de 	bl	8014fe8 <__retarget_lock_release_recursive>
 8015c2c:	89ab      	ldrh	r3, [r5, #12]
 8015c2e:	065b      	lsls	r3, r3, #25
 8015c30:	f53f af12 	bmi.w	8015a58 <_vfiprintf_r+0x4c>
 8015c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c36:	e711      	b.n	8015a5c <_vfiprintf_r+0x50>
 8015c38:	ab03      	add	r3, sp, #12
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	462a      	mov	r2, r5
 8015c3e:	4b09      	ldr	r3, [pc, #36]	; (8015c64 <_vfiprintf_r+0x258>)
 8015c40:	a904      	add	r1, sp, #16
 8015c42:	4630      	mov	r0, r6
 8015c44:	f7fd ff24 	bl	8013a90 <_printf_i>
 8015c48:	e7e4      	b.n	8015c14 <_vfiprintf_r+0x208>
 8015c4a:	bf00      	nop
 8015c4c:	080168b4 	.word	0x080168b4
 8015c50:	080168d4 	.word	0x080168d4
 8015c54:	08016894 	.word	0x08016894
 8015c58:	08016a4c 	.word	0x08016a4c
 8015c5c:	08016a56 	.word	0x08016a56
 8015c60:	08013549 	.word	0x08013549
 8015c64:	080159e7 	.word	0x080159e7
 8015c68:	08016a52 	.word	0x08016a52

08015c6c <_sbrk_r>:
 8015c6c:	b538      	push	{r3, r4, r5, lr}
 8015c6e:	4d06      	ldr	r5, [pc, #24]	; (8015c88 <_sbrk_r+0x1c>)
 8015c70:	2300      	movs	r3, #0
 8015c72:	4604      	mov	r4, r0
 8015c74:	4608      	mov	r0, r1
 8015c76:	602b      	str	r3, [r5, #0]
 8015c78:	f7ef ffdc 	bl	8005c34 <_sbrk>
 8015c7c:	1c43      	adds	r3, r0, #1
 8015c7e:	d102      	bne.n	8015c86 <_sbrk_r+0x1a>
 8015c80:	682b      	ldr	r3, [r5, #0]
 8015c82:	b103      	cbz	r3, 8015c86 <_sbrk_r+0x1a>
 8015c84:	6023      	str	r3, [r4, #0]
 8015c86:	bd38      	pop	{r3, r4, r5, pc}
 8015c88:	2000248c 	.word	0x2000248c

08015c8c <__sread>:
 8015c8c:	b510      	push	{r4, lr}
 8015c8e:	460c      	mov	r4, r1
 8015c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c94:	f000 f8e2 	bl	8015e5c <_read_r>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	bfab      	itete	ge
 8015c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8015ca0:	181b      	addge	r3, r3, r0
 8015ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ca6:	bfac      	ite	ge
 8015ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015caa:	81a3      	strhlt	r3, [r4, #12]
 8015cac:	bd10      	pop	{r4, pc}

08015cae <__swrite>:
 8015cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb2:	461f      	mov	r7, r3
 8015cb4:	898b      	ldrh	r3, [r1, #12]
 8015cb6:	05db      	lsls	r3, r3, #23
 8015cb8:	4605      	mov	r5, r0
 8015cba:	460c      	mov	r4, r1
 8015cbc:	4616      	mov	r6, r2
 8015cbe:	d505      	bpl.n	8015ccc <__swrite+0x1e>
 8015cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cc4:	2302      	movs	r3, #2
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f000 f898 	bl	8015dfc <_lseek_r>
 8015ccc:	89a3      	ldrh	r3, [r4, #12]
 8015cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015cd6:	81a3      	strh	r3, [r4, #12]
 8015cd8:	4632      	mov	r2, r6
 8015cda:	463b      	mov	r3, r7
 8015cdc:	4628      	mov	r0, r5
 8015cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce2:	f000 b817 	b.w	8015d14 <_write_r>

08015ce6 <__sseek>:
 8015ce6:	b510      	push	{r4, lr}
 8015ce8:	460c      	mov	r4, r1
 8015cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cee:	f000 f885 	bl	8015dfc <_lseek_r>
 8015cf2:	1c43      	adds	r3, r0, #1
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	bf15      	itete	ne
 8015cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d02:	81a3      	strheq	r3, [r4, #12]
 8015d04:	bf18      	it	ne
 8015d06:	81a3      	strhne	r3, [r4, #12]
 8015d08:	bd10      	pop	{r4, pc}

08015d0a <__sclose>:
 8015d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d0e:	f000 b831 	b.w	8015d74 <_close_r>
	...

08015d14 <_write_r>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4d07      	ldr	r5, [pc, #28]	; (8015d34 <_write_r+0x20>)
 8015d18:	4604      	mov	r4, r0
 8015d1a:	4608      	mov	r0, r1
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	2200      	movs	r2, #0
 8015d20:	602a      	str	r2, [r5, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	f7ef ff25 	bl	8005b72 <_write>
 8015d28:	1c43      	adds	r3, r0, #1
 8015d2a:	d102      	bne.n	8015d32 <_write_r+0x1e>
 8015d2c:	682b      	ldr	r3, [r5, #0]
 8015d2e:	b103      	cbz	r3, 8015d32 <_write_r+0x1e>
 8015d30:	6023      	str	r3, [r4, #0]
 8015d32:	bd38      	pop	{r3, r4, r5, pc}
 8015d34:	2000248c 	.word	0x2000248c

08015d38 <__assert_func>:
 8015d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015d3a:	4614      	mov	r4, r2
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	4b09      	ldr	r3, [pc, #36]	; (8015d64 <__assert_func+0x2c>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	4605      	mov	r5, r0
 8015d44:	68d8      	ldr	r0, [r3, #12]
 8015d46:	b14c      	cbz	r4, 8015d5c <__assert_func+0x24>
 8015d48:	4b07      	ldr	r3, [pc, #28]	; (8015d68 <__assert_func+0x30>)
 8015d4a:	9100      	str	r1, [sp, #0]
 8015d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d50:	4906      	ldr	r1, [pc, #24]	; (8015d6c <__assert_func+0x34>)
 8015d52:	462b      	mov	r3, r5
 8015d54:	f000 f81e 	bl	8015d94 <fiprintf>
 8015d58:	f000 f89f 	bl	8015e9a <abort>
 8015d5c:	4b04      	ldr	r3, [pc, #16]	; (8015d70 <__assert_func+0x38>)
 8015d5e:	461c      	mov	r4, r3
 8015d60:	e7f3      	b.n	8015d4a <__assert_func+0x12>
 8015d62:	bf00      	nop
 8015d64:	20000184 	.word	0x20000184
 8015d68:	08016a5d 	.word	0x08016a5d
 8015d6c:	08016a6a 	.word	0x08016a6a
 8015d70:	08016a98 	.word	0x08016a98

08015d74 <_close_r>:
 8015d74:	b538      	push	{r3, r4, r5, lr}
 8015d76:	4d06      	ldr	r5, [pc, #24]	; (8015d90 <_close_r+0x1c>)
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	4608      	mov	r0, r1
 8015d7e:	602b      	str	r3, [r5, #0]
 8015d80:	f7ef ff24 	bl	8005bcc <_close>
 8015d84:	1c43      	adds	r3, r0, #1
 8015d86:	d102      	bne.n	8015d8e <_close_r+0x1a>
 8015d88:	682b      	ldr	r3, [r5, #0]
 8015d8a:	b103      	cbz	r3, 8015d8e <_close_r+0x1a>
 8015d8c:	6023      	str	r3, [r4, #0]
 8015d8e:	bd38      	pop	{r3, r4, r5, pc}
 8015d90:	2000248c 	.word	0x2000248c

08015d94 <fiprintf>:
 8015d94:	b40e      	push	{r1, r2, r3}
 8015d96:	b503      	push	{r0, r1, lr}
 8015d98:	4601      	mov	r1, r0
 8015d9a:	ab03      	add	r3, sp, #12
 8015d9c:	4805      	ldr	r0, [pc, #20]	; (8015db4 <fiprintf+0x20>)
 8015d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015da2:	6800      	ldr	r0, [r0, #0]
 8015da4:	9301      	str	r3, [sp, #4]
 8015da6:	f7ff fe31 	bl	8015a0c <_vfiprintf_r>
 8015daa:	b002      	add	sp, #8
 8015dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8015db0:	b003      	add	sp, #12
 8015db2:	4770      	bx	lr
 8015db4:	20000184 	.word	0x20000184

08015db8 <_fstat_r>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4d07      	ldr	r5, [pc, #28]	; (8015dd8 <_fstat_r+0x20>)
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	4608      	mov	r0, r1
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	602b      	str	r3, [r5, #0]
 8015dc6:	f7ef ff0d 	bl	8005be4 <_fstat>
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	d102      	bne.n	8015dd4 <_fstat_r+0x1c>
 8015dce:	682b      	ldr	r3, [r5, #0]
 8015dd0:	b103      	cbz	r3, 8015dd4 <_fstat_r+0x1c>
 8015dd2:	6023      	str	r3, [r4, #0]
 8015dd4:	bd38      	pop	{r3, r4, r5, pc}
 8015dd6:	bf00      	nop
 8015dd8:	2000248c 	.word	0x2000248c

08015ddc <_isatty_r>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	4d06      	ldr	r5, [pc, #24]	; (8015df8 <_isatty_r+0x1c>)
 8015de0:	2300      	movs	r3, #0
 8015de2:	4604      	mov	r4, r0
 8015de4:	4608      	mov	r0, r1
 8015de6:	602b      	str	r3, [r5, #0]
 8015de8:	f7ef ff0c 	bl	8005c04 <_isatty>
 8015dec:	1c43      	adds	r3, r0, #1
 8015dee:	d102      	bne.n	8015df6 <_isatty_r+0x1a>
 8015df0:	682b      	ldr	r3, [r5, #0]
 8015df2:	b103      	cbz	r3, 8015df6 <_isatty_r+0x1a>
 8015df4:	6023      	str	r3, [r4, #0]
 8015df6:	bd38      	pop	{r3, r4, r5, pc}
 8015df8:	2000248c 	.word	0x2000248c

08015dfc <_lseek_r>:
 8015dfc:	b538      	push	{r3, r4, r5, lr}
 8015dfe:	4d07      	ldr	r5, [pc, #28]	; (8015e1c <_lseek_r+0x20>)
 8015e00:	4604      	mov	r4, r0
 8015e02:	4608      	mov	r0, r1
 8015e04:	4611      	mov	r1, r2
 8015e06:	2200      	movs	r2, #0
 8015e08:	602a      	str	r2, [r5, #0]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	f7ef ff05 	bl	8005c1a <_lseek>
 8015e10:	1c43      	adds	r3, r0, #1
 8015e12:	d102      	bne.n	8015e1a <_lseek_r+0x1e>
 8015e14:	682b      	ldr	r3, [r5, #0]
 8015e16:	b103      	cbz	r3, 8015e1a <_lseek_r+0x1e>
 8015e18:	6023      	str	r3, [r4, #0]
 8015e1a:	bd38      	pop	{r3, r4, r5, pc}
 8015e1c:	2000248c 	.word	0x2000248c

08015e20 <__ascii_mbtowc>:
 8015e20:	b082      	sub	sp, #8
 8015e22:	b901      	cbnz	r1, 8015e26 <__ascii_mbtowc+0x6>
 8015e24:	a901      	add	r1, sp, #4
 8015e26:	b142      	cbz	r2, 8015e3a <__ascii_mbtowc+0x1a>
 8015e28:	b14b      	cbz	r3, 8015e3e <__ascii_mbtowc+0x1e>
 8015e2a:	7813      	ldrb	r3, [r2, #0]
 8015e2c:	600b      	str	r3, [r1, #0]
 8015e2e:	7812      	ldrb	r2, [r2, #0]
 8015e30:	1e10      	subs	r0, r2, #0
 8015e32:	bf18      	it	ne
 8015e34:	2001      	movne	r0, #1
 8015e36:	b002      	add	sp, #8
 8015e38:	4770      	bx	lr
 8015e3a:	4610      	mov	r0, r2
 8015e3c:	e7fb      	b.n	8015e36 <__ascii_mbtowc+0x16>
 8015e3e:	f06f 0001 	mvn.w	r0, #1
 8015e42:	e7f8      	b.n	8015e36 <__ascii_mbtowc+0x16>

08015e44 <__malloc_lock>:
 8015e44:	4801      	ldr	r0, [pc, #4]	; (8015e4c <__malloc_lock+0x8>)
 8015e46:	f7ff b8ce 	b.w	8014fe6 <__retarget_lock_acquire_recursive>
 8015e4a:	bf00      	nop
 8015e4c:	20002480 	.word	0x20002480

08015e50 <__malloc_unlock>:
 8015e50:	4801      	ldr	r0, [pc, #4]	; (8015e58 <__malloc_unlock+0x8>)
 8015e52:	f7ff b8c9 	b.w	8014fe8 <__retarget_lock_release_recursive>
 8015e56:	bf00      	nop
 8015e58:	20002480 	.word	0x20002480

08015e5c <_read_r>:
 8015e5c:	b538      	push	{r3, r4, r5, lr}
 8015e5e:	4d07      	ldr	r5, [pc, #28]	; (8015e7c <_read_r+0x20>)
 8015e60:	4604      	mov	r4, r0
 8015e62:	4608      	mov	r0, r1
 8015e64:	4611      	mov	r1, r2
 8015e66:	2200      	movs	r2, #0
 8015e68:	602a      	str	r2, [r5, #0]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	f7ef fe64 	bl	8005b38 <_read>
 8015e70:	1c43      	adds	r3, r0, #1
 8015e72:	d102      	bne.n	8015e7a <_read_r+0x1e>
 8015e74:	682b      	ldr	r3, [r5, #0]
 8015e76:	b103      	cbz	r3, 8015e7a <_read_r+0x1e>
 8015e78:	6023      	str	r3, [r4, #0]
 8015e7a:	bd38      	pop	{r3, r4, r5, pc}
 8015e7c:	2000248c 	.word	0x2000248c

08015e80 <__ascii_wctomb>:
 8015e80:	b149      	cbz	r1, 8015e96 <__ascii_wctomb+0x16>
 8015e82:	2aff      	cmp	r2, #255	; 0xff
 8015e84:	bf85      	ittet	hi
 8015e86:	238a      	movhi	r3, #138	; 0x8a
 8015e88:	6003      	strhi	r3, [r0, #0]
 8015e8a:	700a      	strbls	r2, [r1, #0]
 8015e8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015e90:	bf98      	it	ls
 8015e92:	2001      	movls	r0, #1
 8015e94:	4770      	bx	lr
 8015e96:	4608      	mov	r0, r1
 8015e98:	4770      	bx	lr

08015e9a <abort>:
 8015e9a:	b508      	push	{r3, lr}
 8015e9c:	2006      	movs	r0, #6
 8015e9e:	f000 f82b 	bl	8015ef8 <raise>
 8015ea2:	2001      	movs	r0, #1
 8015ea4:	f7ef fe3e 	bl	8005b24 <_exit>

08015ea8 <_raise_r>:
 8015ea8:	291f      	cmp	r1, #31
 8015eaa:	b538      	push	{r3, r4, r5, lr}
 8015eac:	4604      	mov	r4, r0
 8015eae:	460d      	mov	r5, r1
 8015eb0:	d904      	bls.n	8015ebc <_raise_r+0x14>
 8015eb2:	2316      	movs	r3, #22
 8015eb4:	6003      	str	r3, [r0, #0]
 8015eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8015eba:	bd38      	pop	{r3, r4, r5, pc}
 8015ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ebe:	b112      	cbz	r2, 8015ec6 <_raise_r+0x1e>
 8015ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ec4:	b94b      	cbnz	r3, 8015eda <_raise_r+0x32>
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	f000 f830 	bl	8015f2c <_getpid_r>
 8015ecc:	462a      	mov	r2, r5
 8015ece:	4601      	mov	r1, r0
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ed6:	f000 b817 	b.w	8015f08 <_kill_r>
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	d00a      	beq.n	8015ef4 <_raise_r+0x4c>
 8015ede:	1c59      	adds	r1, r3, #1
 8015ee0:	d103      	bne.n	8015eea <_raise_r+0x42>
 8015ee2:	2316      	movs	r3, #22
 8015ee4:	6003      	str	r3, [r0, #0]
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	e7e7      	b.n	8015eba <_raise_r+0x12>
 8015eea:	2400      	movs	r4, #0
 8015eec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	4798      	blx	r3
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	e7e0      	b.n	8015eba <_raise_r+0x12>

08015ef8 <raise>:
 8015ef8:	4b02      	ldr	r3, [pc, #8]	; (8015f04 <raise+0xc>)
 8015efa:	4601      	mov	r1, r0
 8015efc:	6818      	ldr	r0, [r3, #0]
 8015efe:	f7ff bfd3 	b.w	8015ea8 <_raise_r>
 8015f02:	bf00      	nop
 8015f04:	20000184 	.word	0x20000184

08015f08 <_kill_r>:
 8015f08:	b538      	push	{r3, r4, r5, lr}
 8015f0a:	4d07      	ldr	r5, [pc, #28]	; (8015f28 <_kill_r+0x20>)
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	4604      	mov	r4, r0
 8015f10:	4608      	mov	r0, r1
 8015f12:	4611      	mov	r1, r2
 8015f14:	602b      	str	r3, [r5, #0]
 8015f16:	f7ef fdf5 	bl	8005b04 <_kill>
 8015f1a:	1c43      	adds	r3, r0, #1
 8015f1c:	d102      	bne.n	8015f24 <_kill_r+0x1c>
 8015f1e:	682b      	ldr	r3, [r5, #0]
 8015f20:	b103      	cbz	r3, 8015f24 <_kill_r+0x1c>
 8015f22:	6023      	str	r3, [r4, #0]
 8015f24:	bd38      	pop	{r3, r4, r5, pc}
 8015f26:	bf00      	nop
 8015f28:	2000248c 	.word	0x2000248c

08015f2c <_getpid_r>:
 8015f2c:	f7ef bde2 	b.w	8005af4 <_getpid>

08015f30 <_init>:
 8015f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f32:	bf00      	nop
 8015f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f36:	bc08      	pop	{r3}
 8015f38:	469e      	mov	lr, r3
 8015f3a:	4770      	bx	lr

08015f3c <_fini>:
 8015f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3e:	bf00      	nop
 8015f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f42:	bc08      	pop	{r3}
 8015f44:	469e      	mov	lr, r3
 8015f46:	4770      	bx	lr
