
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08017e80  08017e80  00027e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018964  08018964  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08018964  08018964  00028964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801896c  0801896c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801896c  0801896c  0002896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018970  08018970  00028970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08018974  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002194  20000354  08018cc8  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024e8  08018cc8  000324e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052467  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c77  00000000  00000000  000827eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  0008a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  0008cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dac0  00000000  00000000  0008eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040514  00000000  00000000  000cc998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182bc2  00000000  00000000  0010ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028fa6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c954  00000000  00000000  0028fac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017e64 	.word	0x08017e64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08017e64 	.word	0x08017e64

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	6053      	str	r3, [r2, #4]
 8000fb4:	6093      	str	r3, [r2, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	851a      	strh	r2, [r3, #40]	; 0x28
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	861a      	strh	r2, [r3, #48]	; 0x30
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fce6 	bl	80059f4 <_ZN10Components9get_ADC_1Ev>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	4619      	mov	r1, r3
 800102e:	f006 fa59 	bl	80074e4 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fce8 	bl	8005a0c <_ZN10Components9get_ADC_2Ev>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	330c      	adds	r3, #12
 8001040:	2202      	movs	r2, #2
 8001042:	4619      	mov	r1, r3
 8001044:	f006 fa4e 	bl	80074e4 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fceb 	bl	8005a28 <_ZN10Components9get_ADC_5Ev>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	2202      	movs	r2, #2
 8001058:	4619      	mov	r1, r3
 800105a:	f006 fa43 	bl	80074e4 <HAL_ADC_Start_DMA>



}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f874 	bl	8004160 <_ZN4SBUS8B_buttonEv>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <_ZN9Convertor9updateLEDEv+0x28>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001088:	da01      	bge.n	800108e <_ZN9Convertor9updateLEDEv+0x28>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <_ZN9Convertor9updateLEDEv+0x2a>
 800108e:	2300      	movs	r3, #0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d015      	beq.n	80010c0 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800109a:	b29b      	uxth	r3, r3
 800109c:	33fa      	adds	r3, #250	; 0xfa
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fb3f 	bl	8002734 <_ZN11Initializer13get_LED_TimerEv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4622      	mov	r2, r4
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 80010be:	e026      	b.n	800110e <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fff1 	bl	80040ac <_ZN4SBUS8A_buttonEv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <_ZN9Convertor9updateLEDEv+0x78>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd01      	ble.n	80010de <_ZN9Convertor9updateLEDEv+0x78>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <_ZN9Convertor9updateLEDEv+0x7a>
 80010de:	2300      	movs	r3, #0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d014      	beq.n	800110e <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3bfa      	subs	r3, #250	; 0xfa
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fb17 	bl	8002734 <_ZN11Initializer13get_LED_TimerEv>
 8001106:	4603      	mov	r3, r0
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4622      	mov	r2, r4
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	460b      	mov	r3, r1
 8001124:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001126:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db76      	blt.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 8001134:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e03c      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d109      	bne.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 800114e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
 8001160:	e02f      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b08      	cmp	r3, #8
 8001166:	d109      	bne.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 8001168:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
 800117a:	e022      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d109      	bne.n	8001196 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 8001182:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfb8      	it	lt
 800118a:	425b      	neglt	r3, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
 8001194:	e015      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b10      	cmp	r3, #16
 800119a:	d109      	bne.n	80011b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 800119c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bfb8      	it	lt
 80011a4:	425b      	neglt	r3, r3
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
 80011ae:	e008      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80011b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bfb8      	it	lt
 80011b8:	425b      	neglt	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 80011d0:	e09e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d104      	bne.n	80011e2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011e0:	e096      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d104      	bne.n	80011f2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011f0:	e08e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d104      	bne.n	8001202 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001200:	e086      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b10      	cmp	r3, #16
 8001206:	d104      	bne.n	8001212 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001210:	e07e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800121a:	e079      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da75      	bge.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
 8001232:	e023      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d104      	bne.n	8001244 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
 8001242:	e01b      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d104      	bne.n	8001254 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
 8001252:	e013      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d104      	bne.n	8001264 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
 8001262:	e00b      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d104      	bne.n	8001274 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	649a      	str	r2, [r3, #72]	; 0x48
 8001272:	e003      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 8001282:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001294:	e03c      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d109      	bne.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 800129c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bfb8      	it	lt
 80012a4:	425b      	neglt	r3, r3
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012ae:	e02f      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d109      	bne.n	80012ca <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 80012b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012c8:	e022      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d109      	bne.n	80012e4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 80012d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfb8      	it	lt
 80012d8:	425b      	neglt	r3, r3
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012e2:	e015      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d109      	bne.n	80012fe <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 80012ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80012fc:	e008      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfb8      	it	lt
 8001306:	425b      	neglt	r3, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fd84 	bl	8003e3c <_ZN4SBUS9getRightYEv>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800134c:	2b0a      	cmp	r3, #10
 800134e:	dd10      	ble.n	8001372 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001356:	2b00      	cmp	r3, #0
 8001358:	bfb8      	it	lt
 800135a:	425b      	neglt	r3, r3
 800135c:	b29c      	uxth	r4, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fa17 	bl	8002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 8001368:	4603      	mov	r3, r0
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4622      	mov	r2, r4
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 8001370:	e008      	b.n	8001384 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f001 fa0d 	bl	8002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 800137c:	4603      	mov	r3, r0
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}

0800138c <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fdb7 	bl	8003f0c <_ZN4SBUS9getRightXEv>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <_ZN9Convertor14updateSelectorEv+0x8c>)
 80013b2:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <_ZN9Convertor14updateSelectorEv+0x90>)
 80013b6:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd10      	ble.n	80013e4 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f9bd 	bl	800274c <_ZN11Initializer18get_selector_TimerEv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	2308      	movs	r3, #8
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	230c      	movs	r3, #12
 80013da:	4621      	mov	r1, r4
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe9a 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 80013e2:	e014      	b.n	800140e <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da0f      	bge.n	800140e <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9a7 	bl	800274c <_ZN11Initializer18get_selector_TimerEv>
 80013fe:	4602      	mov	r2, r0
 8001400:	2308      	movs	r3, #8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	230c      	movs	r3, #12
 8001406:	4621      	mov	r1, r4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe84 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	42dc0000 	.word	0x42dc0000
 800141c:	44700000 	.word	0x44700000

08001420 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fcb3 	bl	8003d98 <_ZN4SBUS8getLeftYEv>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b21a      	sxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800144a:	2b00      	cmp	r3, #0
 800144c:	dd10      	ble.n	8001470 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f001 f983 	bl	8002764 <_ZN11Initializer19get_pushMotor_TimerEv>
 800145e:	4602      	mov	r2, r0
 8001460:	2308      	movs	r3, #8
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2304      	movs	r3, #4
 8001466:	4621      	mov	r1, r4
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe54 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 800146e:	e014      	b.n	800149a <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001476:	2b00      	cmp	r3, #0
 8001478:	da0f      	bge.n	800149a <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4618      	mov	r0, r3
 8001486:	f001 f96d 	bl	8002764 <_ZN11Initializer19get_pushMotor_TimerEv>
 800148a:	4602      	mov	r2, r0
 800148c:	2308      	movs	r3, #8
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2304      	movs	r3, #4
 8001492:	4621      	mov	r1, r4
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe3e 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}

080014a2 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af02      	add	r7, sp, #8
 80014a8:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fd94 	bl	8003fdc <_ZN4SBUS11getJogWheelEv>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd10      	ble.n	80014f2 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f94e 	bl	800277c <_ZN11Initializer20get_fluidMotor_TimerEv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	2300      	movs	r3, #0
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2304      	movs	r3, #4
 80014e8:	4621      	mov	r1, r4
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe13 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 80014f0:	e014      	b.n	800151c <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da0f      	bge.n	800151c <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f001 f938 	bl	800277c <_ZN11Initializer20get_fluidMotor_TimerEv>
 800150c:	4602      	mov	r2, r0
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2304      	movs	r3, #4
 8001514:	4621      	mov	r1, r4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fdfd 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}

08001524 <_ZN9Convertor17updateFluidAmountEv>:

void Convertor::updateFluidAmount(void){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]


	if(this->_sbus->D_button() && (_fluidAmount < 100)){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fec9 	bl	80042c8 <_ZN4SBUS8D_buttonEv>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <_ZN9Convertor17updateFluidAmountEv+0x26>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001542:	2b63      	cmp	r3, #99	; 0x63
 8001544:	dc01      	bgt.n	800154a <_ZN9Convertor17updateFluidAmountEv+0x26>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <_ZN9Convertor17updateFluidAmountEv+0x28>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <_ZN9Convertor17updateFluidAmountEv+0x42>

		_fluidAmount += 10;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001556:	b2db      	uxtb	r3, r3
 8001558:	330a      	adds	r3, #10
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b25a      	sxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}else if(_sbus->C_button() && (_fluidAmount > 0)){

		_fluidAmount -= 10;
	}

}
 8001564:	e01b      	b.n	800159e <_ZN9Convertor17updateFluidAmountEv+0x7a>
	}else if(_sbus->C_button() && (_fluidAmount > 0)){
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fe52 	bl	8004214 <_ZN4SBUS8C_buttonEv>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <_ZN9Convertor17updateFluidAmountEv+0x60>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd01      	ble.n	8001584 <_ZN9Convertor17updateFluidAmountEv+0x60>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <_ZN9Convertor17updateFluidAmountEv+0x62>
 8001584:	2300      	movs	r3, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <_ZN9Convertor17updateFluidAmountEv+0x7a>
		_fluidAmount -= 10;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3b0a      	subs	r3, #10
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b25a      	sxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_ZN9Convertor7processEv>:
int16_t Convertor::get_fluidAmount(void){

	return _fluidAmount;
}

void Convertor::process(void){
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]


	this->updateLED();
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd59 	bl	8001066 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fee9 	bl	800138c <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff30 	bl	8001420 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff6e 	bl	80014a2 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fea8 	bl	800131c <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd22 	bl	8001016 <_ZN9Convertor6getADCEv>
	this->updateFluidAmount();
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa6 	bl	8001524 <_ZN9Convertor17updateFluidAmountEv>

}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x34>)
 80015f0:	609a      	str	r2, [r3, #8]

	this->_huart1 = huart1;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]
	this->initClock();
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f001 f832 	bl	8002668 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 ff89 	bl	800251c <_ZN11Initializer8initGPIOEv>
}
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000750 	.word	0x20000750

08001618 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]


	this->initDMA();
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 ff25 	bl	8002470 <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f822 	bl	8001670 <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f923 	bl	8001878 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f99a 	bl	800196c <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fa53 	bl	8001ae4 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fb32 	bl	8001ca8 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fc45 	bl	8001ed4 <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fd0c 	bl	8002068 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fd79 	bl	8002148 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fdfe 	bl	8002258 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fe8b 	bl	8002378 <_ZN11Initializer8initI2C2Ev>


    MX_USB_Device_Init();
 8001662:	f012 ff5f 	bl	8014524 <MX_USB_Device_Init>


}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	b09e      	sub	sp, #120	; 0x78
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	4a7b      	ldr	r2, [pc, #492]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800167e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001682:	6613      	str	r3, [r2, #96]	; 0x60
 8001684:	4b79      	ldr	r3, [pc, #484]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001690:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80016aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f013 fe3c 	bl	8015344 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a68      	ldr	r2, [pc, #416]	; (8001870 <_ZN11Initializer9initTIM_1Ev+0x200>)
 80016d0:	60da      	str	r2, [r3, #12]
	  htim1.Init.Prescaler = 8;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2208      	movs	r2, #8
 80016d6:	611a      	str	r2, [r3, #16]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
	  htim1.Init.Period = 1080;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80016e4:	619a      	str	r2, [r3, #24]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
	  htim1.Init.RepetitionCounter = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	330c      	adds	r3, #12
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00c f877 	bl	800d7f0 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 f85a 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001718:	4856      	ldr	r0, [pc, #344]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800171a:	f014 fb65 	bl	8015de8 <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	330c      	adds	r3, #12
 8001728:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f00c fb32 	bl	800dd98 <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 f841 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	330c      	adds	r3, #12
 800174e:	4618      	mov	r0, r3
 8001750:	f00c f8a5 	bl	800d89e <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f001 f831 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 800176a:	4842      	ldr	r0, [pc, #264]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800176c:	f014 fb3c 	bl	8015de8 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	330c      	adds	r3, #12
 8001780:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f00d f972 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 f815 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	; 0x60
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	330c      	adds	r3, #12
 80017c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017c6:	2208      	movs	r2, #8
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00c f9d1 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fff4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80017e4:	4823      	ldr	r0, [pc, #140]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80017e6:	f014 faff 	bl	8015de8 <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	f107 020c 	add.w	r2, r7, #12
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f00d f9b5 	bl	800eb9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 ffc2 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800184a:	f014 facd 	bl	8015de8 <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	4618      	mov	r0, r3
 8001854:	f004 fdfe 	bl	8006454 <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	330c      	adds	r3, #12
 800185c:	2108      	movs	r1, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f00d f844 	bl	800e8ec <HAL_TIMEx_PWMN_Start>


}
 8001864:	bf00      	nop
 8001866:	3778      	adds	r7, #120	; 0x78
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40012c00 	.word	0x40012c00
 8001874:	08017e80 	.word	0x08017e80

08001878 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.Prescaler = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.Period = 4.294967295E9;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ba:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b ff8b 	bl	800d7f0 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 ff6e 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80018f0:	481d      	ldr	r0, [pc, #116]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80018f2:	f014 fa79 	bl	8015de8 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001902:	f107 0218 	add.w	r2, r7, #24
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f00c fa45 	bl	800dd98 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 ff54 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001926:	f014 fa5f 	bl	8015de8 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001938:	f107 020c 	add.w	r2, r7, #12
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f00d f896 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf14      	ite	ne
 800194a:	2301      	movne	r3, #1
 800194c:	2300      	moveq	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 ff39 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 800195c:	f014 fa44 	bl	8015de8 <iprintf>

	  }


}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08017e98 	.word	0x08017e98

0800196c <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <_ZN11Initializer9initTIM_3Ev+0x170>)
 80019b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.Prescaler = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.Period = 1000;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00b ff5a 	bl	800d89e <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fee6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a00:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a02:	f014 f9f1 	bl	8015de8 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00d f828 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fecb 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a36:	482a      	ldr	r0, [pc, #168]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a38:	f014 f9d6 	bl	8015de8 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3c:	2360      	movs	r3, #96	; 0x60
 8001a3e:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a52:	f107 0110 	add.w	r1, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00c f889 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 feac 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a76:	f014 f9b7 	bl	8015de8 <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a80:	f107 0110 	add.w	r1, r7, #16
 8001a84:	2204      	movs	r2, #4
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00c f872 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fe95 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001aa2:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001aa4:	f014 f9a0 	bl	8015de8 <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fcd0 	bl	8006454 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00b ff45 	bl	800d94c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b ff3e 	bl	800d94c <HAL_TIM_PWM_Start>



}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	; 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	08017eb0 	.word	0x08017eb0

08001ae4 <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b092      	sub	sp, #72	; 0x48
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.Prescaler = 2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.Period = 1000;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4a:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	669a      	str	r2, [r3, #104]	; 0x68
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	671a      	str	r2, [r3, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3358      	adds	r3, #88	; 0x58
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00b fe47 	bl	800d7f0 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fe2a 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b78:	484a      	ldr	r0, [pc, #296]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b7a:	f014 f935 	bl	8015de8 <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3358      	adds	r3, #88	; 0x58
 8001b88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00c f902 	bl	800dd98 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fe11 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001baa:	483e      	ldr	r0, [pc, #248]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001bac:	f014 f91c 	bl	8015de8 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3358      	adds	r3, #88	; 0x58
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00b fe72 	bl	800d89e <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fdfe 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001bd0:	4834      	ldr	r0, [pc, #208]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001bd2:	f014 f909 	bl	8015de8 <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3358      	adds	r3, #88	; 0x58
 8001be2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00c ff41 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fde4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c06:	f014 f8ef 	bl	8015de8 <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0a:	2360      	movs	r3, #96	; 0x60
 8001c0c:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3358      	adds	r3, #88	; 0x58
 8001c1e:	f107 0110 	add.w	r1, r7, #16
 8001c22:	2204      	movs	r2, #4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b ffa3 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fdc6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c42:	f014 f8d1 	bl	8015de8 <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3358      	adds	r3, #88	; 0x58
 8001c4a:	f107 0110 	add.w	r1, r7, #16
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00b ff8d 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fdb0 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c6e:	f014 f8bb 	bl	8015de8 <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3358      	adds	r3, #88	; 0x58
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fbec 	bl	8006454 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3358      	adds	r3, #88	; 0x58
 8001c80:	2108      	movs	r1, #8
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00b fe62 	bl	800d94c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3358      	adds	r3, #88	; 0x58
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00b fe5c 	bl	800d94c <HAL_TIM_PWM_Start>


}
 8001c94:	bf00      	nop
 8001c96:	3748      	adds	r7, #72	; 0x48
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	08017ec8 	.word	0x08017ec8

08001ca8 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09e      	sub	sp, #120	; 0x78
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001cb0:	4b86      	ldr	r3, [pc, #536]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	4a85      	ldr	r2, [pc, #532]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cba:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f013 fb20 	bl	8015344 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001d08:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.Prescaler = 2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.Period = 1000;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d22:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.RepetitionCounter = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	33f0      	adds	r3, #240	; 0xf0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00b fd54 	bl	800d7f0 <HAL_TIM_Base_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fd37 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	33f0      	adds	r3, #240	; 0xf0
 8001d68:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00c f812 	bl	800dd98 <HAL_TIM_ConfigClockSource>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fd21 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	33f0      	adds	r3, #240	; 0xf0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00b fd85 	bl	800d89e <HAL_TIM_PWM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf14      	ite	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	2300      	moveq	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fd11 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	33f0      	adds	r3, #240	; 0xf0
 8001dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00c fe55 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fcf8 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	; 0x60
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	33f0      	adds	r3, #240	; 0xf0
 8001dfc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e00:	2208      	movs	r2, #8
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00b feb4 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fcd7 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	33f0      	adds	r3, #240	; 0xf0
 8001e22:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e26:	220c      	movs	r2, #12
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fea1 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fcc4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5c:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	33f0      	adds	r3, #240	; 0xf0
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00c fe88 	bl	800eb9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fc95 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	33f0      	adds	r3, #240	; 0xf0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fad4 	bl	8006454 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	33f0      	adds	r3, #240	; 0xf0
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00b fd4a 	bl	800d94c <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	33f0      	adds	r3, #240	; 0xf0
 8001ebc:	210c      	movs	r1, #12
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00c fd14 	bl	800e8ec <HAL_TIMEx_PWMN_Start>




}
 8001ec4:	bf00      	nop
 8001ec6:	3778      	adds	r7, #120	; 0x78
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40013400 	.word	0x40013400

08001ed4 <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b098      	sub	sp, #96	; 0x60
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee8:	4b5c      	ldr	r3, [pc, #368]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2234      	movs	r2, #52	; 0x34
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f013 fa17 	bl	8015344 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001f1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.Prescaler = 128;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.Period = 1000;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.RepetitionCounter = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	33a4      	adds	r3, #164	; 0xa4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00b fc4b 	bl	800d7f0 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fc2e 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f70:	483c      	ldr	r0, [pc, #240]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f72:	f013 ff39 	bl	8015de8 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	33a4      	adds	r3, #164	; 0xa4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00b fc8f 	bl	800d89e <HAL_TIM_PWM_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fc1b 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f96:	4833      	ldr	r0, [pc, #204]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f98:	f013 ff26 	bl	8015de8 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	; 0x60
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	33a4      	adds	r3, #164	; 0xa4
 8001fbc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b fdd4 	bl	800db70 <HAL_TIM_PWM_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fbf7 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fde:	4821      	ldr	r0, [pc, #132]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001fe0:	f013 ff02 	bl	8015de8 <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	33a4      	adds	r3, #164	; 0xa4
 800200a:	f107 0210 	add.w	r2, r7, #16
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00c fdc3 	bl	800eb9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fbd0 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 800202e:	f013 fedb 	bl	8015de8 <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	33a4      	adds	r3, #164	; 0xa4
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fa0c 	bl	8006454 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	33a4      	adds	r3, #164	; 0xa4
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f00b fc82 	bl	800d94c <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800204e:	2200      	movs	r2, #0
 8002050:	635a      	str	r2, [r3, #52]	; 0x34





}
 8002052:	bf00      	nop
 8002054:	3760      	adds	r7, #96	; 0x60
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40014400 	.word	0x40014400
 8002064:	08017ee0 	.word	0x08017ee0

08002068 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b09c      	sub	sp, #112	; 0x70
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <_ZN11Initializer10initTIM_20Ev+0xd8>)
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8002096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00b fb9f 	bl	800d7f0 <HAL_TIM_Base_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fb82 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020c8:	481e      	ldr	r0, [pc, #120]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 80020ca:	f013 fe8d 	bl	8015de8 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d2:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0214 	add.w	r2, r7, #20
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f00b fe5a 	bl	800dd98 <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fb69 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 80020fc:	f013 fe74 	bl	8015de8 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f00c fcaa 	bl	800ea70 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fb4d 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002134:	f013 fe58 	bl	8015de8 <iprintf>

	  }



}
 8002138:	bf00      	nop
 800213a:	3770      	adds	r7, #112	; 0x70
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40015000 	.word	0x40015000
 8002144:	08017ee0 	.word	0x08017ee0

08002148 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <_ZN11Initializer11initUSART_1Ev+0x108>)
 8002156:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002160:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00c fdcb 	bl	800ed4a <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fb01 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80021ca:	4822      	ldr	r0, [pc, #136]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80021cc:	f013 fe0c 	bl	8015de8 <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00e f966 	bl	80104a8 <HAL_UARTEx_SetTxFifoThreshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 faed 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80021f4:	f013 fdf8 	bl	8015de8 <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f00e f990 	bl	8010524 <HAL_UARTEx_SetRxFifoThreshold>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fad9 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800221c:	f013 fde4 	bl	8015de8 <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f00e f906 	bl	8010436 <HAL_UARTEx_DisableFifoMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fac6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002242:	f013 fdd1 	bl	8015de8 <iprintf>

	  }



}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	08017ef8 	.word	0x08017ef8

08002258 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a41      	ldr	r2, [pc, #260]	; (800236c <_ZN11Initializer11initUSART_2Ev+0x114>)
 8002266:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a40      	ldr	r2, [pc, #256]	; (8002370 <_ZN11Initializer11initUSART_2Ev+0x118>)
 800226e:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002278:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228a:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	220c      	movs	r2, #12
 8002292:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00c fd3d 	bl	800ed4a <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fa73 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80022e8:	f013 fd7e 	bl	8015de8 <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00e f8d8 	bl	80104a8 <HAL_UARTEx_SetTxFifoThreshold>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fa5f 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800230e:	4819      	ldr	r0, [pc, #100]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002310:	f013 fd6a 	bl	8015de8 <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f00e f902 	bl	8010524 <HAL_UARTEx_SetRxFifoThreshold>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fa4b 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002336:	480f      	ldr	r0, [pc, #60]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002338:	f013 fd56 	bl	8015de8 <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f00e f878 	bl	8010436 <HAL_UARTEx_DisableFifoMode>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa38 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800235e:	f013 fd43 	bl	8015de8 <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	000186a0 	.word	0x000186a0
 8002374:	08017f0c 	.word	0x08017f0c

08002378 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

	  hi2c_ptr->Instance = I2C2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a36      	ldr	r2, [pc, #216]	; (8002460 <_ZN11Initializer8initI2C2Ev+0xe8>)
 8002386:	601a      	str	r2, [r3, #0]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a35      	ldr	r2, [pc, #212]	; (8002464 <_ZN11Initializer8initI2C2Ev+0xec>)
 800238e:	605a      	str	r2, [r3, #4]
	  hi2c_ptr->Init.OwnAddress1 = 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2201      	movs	r2, #1
 800239e:	60da      	str	r2, [r3, #12]
	  hi2c_ptr->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
	  hi2c_ptr->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f007 fb77 	bl	8009ac0 <HAL_I2C_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <_ZN11Initializer8initI2C2Ev+0x76>
	  {
	    Error_Handler();
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f9f2 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80023e8:	481f      	ldr	r0, [pc, #124]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80023ea:	f013 fcfd 	bl	8015de8 <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f008 f9e3 	bl	800a7c0 <HAL_I2CEx_ConfigAnalogFilter>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <_ZN11Initializer8initI2C2Ev+0x9e>
	  {
	    this->Error_Handler();
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f9de 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002410:	4815      	ldr	r0, [pc, #84]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002412:	f013 fce9 	bl	8015de8 <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f008 fa1a 	bl	800a856 <HAL_I2CEx_ConfigDigitalFilter>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <_ZN11Initializer8initI2C2Ev+0xc6>
	  {
	    this->Error_Handler();
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9ca 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 800243a:	f013 fcd5 	bl	8015de8 <iprintf>

	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]


}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005800 	.word	0x40005800
 8002464:	20a0c4df 	.word	0x20a0c4df
 8002468:	08017f20 	.word	0x08017f20
 800246c:	40021000 	.word	0x40021000

08002470 <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	4a26      	ldr	r2, [pc, #152]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6493      	str	r3, [r2, #72]	; 0x48
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6493      	str	r3, [r2, #72]	; 0x48
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	6493      	str	r3, [r2, #72]	; 0x48
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	200b      	movs	r0, #11
 80024c6:	f006 fc16 	bl	8008cf6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ca:	200b      	movs	r0, #11
 80024cc:	f006 fc2d 	bl	8008d2a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	200c      	movs	r0, #12
 80024d6:	f006 fc0e 	bl	8008cf6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024da:	200c      	movs	r0, #12
 80024dc:	f006 fc25 	bl	8008d2a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	200d      	movs	r0, #13
 80024e6:	f006 fc06 	bl	8008cf6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024ea:	200d      	movs	r0, #13
 80024ec:	f006 fc1d 	bl	8008d2a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	200e      	movs	r0, #14
 80024f6:	f006 fbfe 	bl	8008cf6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80024fa:	200e      	movs	r0, #14
 80024fc:	f006 fc15 	bl	8008d2a <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2038      	movs	r0, #56	; 0x38
 8002506:	f006 fbf6 	bl	8008cf6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800250a:	2038      	movs	r0, #56	; 0x38
 800250c:	f006 fc0d 	bl	8008d2a <HAL_NVIC_EnableIRQ>

}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	4b48      	ldr	r3, [pc, #288]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	4a47      	ldr	r2, [pc, #284]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002540:	4b45      	ldr	r3, [pc, #276]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800254c:	4b42      	ldr	r3, [pc, #264]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	4a41      	ldr	r2, [pc, #260]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002552:	f043 0320 	orr.w	r3, r3, #32
 8002556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002564:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	4a35      	ldr	r2, [pc, #212]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80025b2:	482a      	ldr	r0, [pc, #168]	; (800265c <_ZN11Initializer8initGPIOEv+0x140>)
 80025b4:	f007 fa52 	bl	8009a5c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2102      	movs	r1, #2
 80025bc:	4828      	ldr	r0, [pc, #160]	; (8002660 <_ZN11Initializer8initGPIOEv+0x144>)
 80025be:	f007 fa4d 	bl	8009a5c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c8:	4826      	ldr	r0, [pc, #152]	; (8002664 <_ZN11Initializer8initGPIOEv+0x148>)
 80025ca:	f007 fa47 	bl	8009a5c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2110      	movs	r1, #16
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d6:	f007 fa41 	bl	8009a5c <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 80025da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025de:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <_ZN11Initializer8initGPIOEv+0x140>)
 80025f4:	f007 f8b0 	bl	8009758 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <_ZN11Initializer8initGPIOEv+0x144>)
 8002610:	f007 f8a2 	bl	8009758 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <_ZN11Initializer8initGPIOEv+0x148>)
 800262e:	f007 f893 	bl	8009758 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002632:	2310      	movs	r3, #16
 8002634:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f007 f884 	bl	8009758 <HAL_GPIO_Init>

}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	; 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	48000800 	.word	0x48000800
 8002660:	48001400 	.word	0x48001400
 8002664:	48001800 	.word	0x48001800

08002668 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002668:	b580      	push	{r7, lr}
 800266a:	b096      	sub	sp, #88	; 0x58
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	2238      	movs	r2, #56	; 0x38
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f012 fe63 	bl	8015344 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800268e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002692:	f00a f887 	bl	800c7a4 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002696:	2322      	movs	r3, #34	; 0x22
 8002698:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a0:	2340      	movs	r3, #64	; 0x40
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026a4:	2301      	movs	r3, #1
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a8:	2302      	movs	r3, #2
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ac:	2302      	movs	r3, #2
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 80026b4:	2310      	movs	r3, #16
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026bc:	2302      	movs	r3, #2
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00a f90f 	bl	800c8ec <HAL_RCC_OscConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f874 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80026e4:	4812      	ldr	r0, [pc, #72]	; (8002730 <_ZN11Initializer9initClockEv+0xc8>)
 80026e6:	f013 fb7f 	bl	8015de8 <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ea:	230f      	movs	r3, #15
 80026ec:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ee:	2303      	movs	r3, #3
 80026f0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2103      	movs	r1, #3
 8002704:	4618      	mov	r0, r3
 8002706:	f00a fc09 	bl	800cf1c <HAL_RCC_ClockConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f856 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <_ZN11Initializer9initClockEv+0xc8>)
 8002722:	f013 fb61 	bl	8015de8 <iprintf>

	  }


}
 8002726:	bf00      	nop
 8002728:	3758      	adds	r7, #88	; 0x58
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08017f34 	.word	0x08017f34

08002734 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	return &htim16;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	33a4      	adds	r3, #164	; 0xa4

}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

	return &htim8;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	33f0      	adds	r3, #240	; 0xf0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

	return &htim4;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3358      	adds	r3, #88	; 0x58
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

	return &htim3;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 739e 	add.w	r3, r3, #316	; 0x13c

}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

	return &htim1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	330c      	adds	r3, #12

}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_ZN11Initializer7get_i2cEv>:

I2C_HandleTypeDef* Initializer::get_i2c(void){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

	return &hi2c2;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <_ZN11Initializer7get_i2cEv+0x18>)
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000750 	.word	0x20000750

080027cc <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b1d      	cmp	r3, #29
 80027dc:	d80e      	bhi.n	80027fc <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80027de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <_ZN11Initializer13Error_HandlerEv+0x38>)
 80027e4:	f007 f952 	bl	8009a8c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80027e8:	2032      	movs	r0, #50	; 0x32
 80027ea:	f004 fa4f 	bl	8006c8c <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80027f0:	f013 fb80 	bl	8015ef4 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e7ed      	b.n	80027d8 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	48000800 	.word	0x48000800
 8002808:	08017f54 	.word	0x08017f54

0800280c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4053      	eors	r3, r2
 8002822:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	b25a      	sxtb	r2, r3
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4053      	eors	r3, r2
 8002830:	b25b      	sxtb	r3, r3
 8002832:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b21b      	sxth	r3, r3
 8002844:	4053      	eors	r3, r2
 8002846:	b21a      	sxth	r2, r3
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	b21b      	sxth	r3, r3
 800284e:	4053      	eors	r3, r2
 8002850:	b21a      	sxth	r2, r3
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	b2db      	uxtb	r3, r3
 8002858:	b21b      	sxth	r3, r3
 800285a:	4053      	eors	r3, r2
 800285c:	b21b      	sxth	r3, r3
 800285e:	b29a      	uxth	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	801a      	strh	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287e:	801a      	strh	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002898:	f107 030e 	add.w	r3, r7, #14
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ffe7 	bl	8002870 <crc_init>
	while (length--) {
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	807a      	strh	r2, [r7, #2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f107 020e 	add.w	r2, r7, #14
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ffa1 	bl	800280c <crc_accumulate>
	while (length--) {
 80028ca:	e7ea      	b.n	80028a2 <crc_calculate+0x16>
        }
        return crcTmp;
 80028cc:	89fb      	ldrh	r3, [r7, #14]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	617b      	str	r3, [r7, #20]
	while (length--) {
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	80fa      	strh	r2, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	617a      	str	r2, [r7, #20]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff80 	bl	800280c <crc_accumulate>
	while (length--) {
 800290c:	e7ec      	b.n	80028e8 <crc_accumulate_buffer+0x12>
        }
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <mavlink_sha256_init+0x50>)
 8002930:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <mavlink_sha256_init+0x54>)
 8002936:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <mavlink_sha256_init+0x58>)
 800293c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <mavlink_sha256_init+0x5c>)
 8002942:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <mavlink_sha256_init+0x60>)
 8002948:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <mavlink_sha256_init+0x64>)
 800294e:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <mavlink_sha256_init+0x68>)
 8002954:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <mavlink_sha256_init+0x6c>)
 800295a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	6a09e667 	.word	0x6a09e667
 800296c:	bb67ae85 	.word	0xbb67ae85
 8002970:	3c6ef372 	.word	0x3c6ef372
 8002974:	a54ff53a 	.word	0xa54ff53a
 8002978:	510e527f 	.word	0x510e527f
 800297c:	9b05688c 	.word	0x9b05688c
 8002980:	1f83d9ab 	.word	0x1f83d9ab
 8002984:	5be0cd19 	.word	0x5be0cd19

08002988 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002988:	b480      	push	{r7}
 800298a:	b0cf      	sub	sp, #316	; 0x13c
 800298c:	af00      	add	r7, sp, #0
 800298e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002992:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800299c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029a0:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80029a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80029b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80029c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80029d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80029e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80029f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002a02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	dc17      	bgt.n	8002a60 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002a3a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a5e:	e7e3      	b.n	8002a28 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002a60:	2310      	movs	r3, #16
 8002a62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a6c:	dc6a      	bgt.n	8002b44 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a72:	1e9a      	subs	r2, r3, #2
 8002a74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	1e99      	subs	r1, r3, #2
 8002a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a96:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002a9a:	405a      	eors	r2, r3
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa0:	1e99      	subs	r1, r3, #2
 8002aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002aae:	0a9b      	lsrs	r3, r3, #10
 8002ab0:	405a      	eors	r2, r3
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab6:	1fd9      	subs	r1, r3, #7
 8002ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ac4:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aca:	f1a3 010f 	sub.w	r1, r3, #15
 8002ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ada:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae2:	f1a3 000f 	sub.w	r0, r3, #15
 8002ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002af2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002af6:	4059      	eors	r1, r3
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	f1a3 000f 	sub.w	r0, r3, #15
 8002b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002b10:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b16:	f1a3 0110 	sub.w	r1, r3, #16
 8002b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b26:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b42:	e790      	b.n	8002a66 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8002b50:	dc79      	bgt.n	8002c46 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002b52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b56:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002b5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b5e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002b62:	405a      	eors	r2, r3
 8002b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b68:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002b6c:	405a      	eors	r2, r3
 8002b6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b72:	441a      	add	r2, r3
 8002b74:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002b78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b7c:	4019      	ands	r1, r3
 8002b7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b82:	43d8      	mvns	r0, r3
 8002b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b88:	4003      	ands	r3, r0
 8002b8a:	404b      	eors	r3, r1
 8002b8c:	441a      	add	r2, r3
 8002b8e:	496d      	ldr	r1, [pc, #436]	; (8002d44 <mavlink_sha256_calc+0x3bc>)
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b98:	441a      	add	r2, r3
 8002b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ba2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002baa:	4413      	add	r3, r2
 8002bac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bb4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bbc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002bc0:	405a      	eors	r2, r3
 8002bc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bc6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002bca:	405a      	eors	r2, r3
 8002bcc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bd4:	4059      	eors	r1, r3
 8002bd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bda:	4019      	ands	r1, r3
 8002bdc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002be4:	4003      	ands	r3, r0
 8002be6:	404b      	eors	r3, r1
 8002be8:	4413      	add	r3, r2
 8002bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002bf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002bfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002c06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002c0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c0e:	4413      	add	r3, r2
 8002c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002c1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002c2c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c34:	4413      	add	r3, r2
 8002c36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c44:	e781      	b.n	8002b4a <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c56:	441a      	add	r2, r3
 8002c58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002c64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c74:	441a      	add	r2, r3
 8002c76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c7a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c92:	441a      	add	r2, r3
 8002c94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002ca0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cb0:	441a      	add	r2, r3
 8002cb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cb6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cc2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cce:	441a      	add	r2, r3
 8002cd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ce0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cec:	441a      	add	r2, r3
 8002cee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002cfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cfe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d0a:	441a      	add	r2, r3
 8002d0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002d18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d28:	441a      	add	r2, r3
 8002d2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d36:	bf00      	nop
 8002d38:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	08018414 	.word	0x08018414

08002d48 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b09c      	sub	sp, #112	; 0x70
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d904      	bls.n	8002d80 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d058      	beq.n	8002e42 <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d96:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d201      	bcs.n	8002da4 <mavlink_sha256_update+0x5c>
            l = len;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dac:	4413      	add	r3, r2
 8002dae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002db0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002db2:	4618      	mov	r0, r3
 8002db4:	f012 fa9e 	bl	80152f4 <memcpy>
	offset += l;
 8002db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbc:	4413      	add	r3, r2
 8002dbe:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc4:	4413      	add	r3, r2
 8002dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d1d9      	bne.n	8002d8a <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3328      	adds	r3, #40	; 0x28
 8002dda:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002ddc:	2300      	movs	r3, #0
 8002dde:	663b      	str	r3, [r7, #96]	; 0x60
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	dc24      	bgt.n	8002e30 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dec:	4413      	add	r3, r2
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfe:	3303      	adds	r3, #3
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e04:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	3302      	adds	r3, #2
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	3303      	adds	r3, #3
 8002e22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2e:	e7d7      	b.n	8002de0 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fda6 	bl	8002988 <mavlink_sha256_calc>
	    offset = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002e40:	e7a3      	b.n	8002d8a <mavlink_sha256_update+0x42>
	}
    }
}
 8002e42:	bf00      	nop
 8002e44:	3770      	adds	r7, #112	; 0x70
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b098      	sub	sp, #96	; 0x60
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3308      	adds	r3, #8
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	2247      	movs	r2, #71	; 0x47
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f012 fa5e 	bl	8015344 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	3307      	adds	r3, #7
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	443b      	add	r3, r7
 8002e96:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0a1a      	lsrs	r2, r3, #8
 8002ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	443b      	add	r3, r7
 8002eaa:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0c1a      	lsrs	r2, r3, #16
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb6:	3305      	adds	r3, #5
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	443b      	add	r3, r7
 8002ebe:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e1a      	lsrs	r2, r3, #24
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eca:	3304      	adds	r3, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	3360      	adds	r3, #96	; 0x60
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	3303      	adds	r3, #3
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	3360      	adds	r3, #96	; 0x60
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0a1a      	lsrs	r2, r3, #8
 8002eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1a      	lsrs	r2, r3, #16
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	443b      	add	r3, r7
 8002f0c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	b2d9      	uxtb	r1, r3
 8002f18:	f107 020c 	add.w	r2, r7, #12
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1e:	4413      	add	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f26:	f103 0208 	add.w	r2, r3, #8
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff09 	bl	8002d48 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	78da      	ldrb	r2, [r3, #3]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f44:	7892      	ldrb	r2, [r2, #2]
 8002f46:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f4e:	7852      	ldrb	r2, [r2, #1]
 8002f50:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	3303      	adds	r3, #3
 8002f56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f62:	79d2      	ldrb	r2, [r2, #7]
 8002f64:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	3305      	adds	r3, #5
 8002f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f6c:	7992      	ldrb	r2, [r2, #6]
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3760      	adds	r7, #96	; 0x60
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002f82:	79fa      	ldrb	r2, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <mavlink_get_channel_status+0x24>)
 8002f8e:	4413      	add	r3, r2
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000370 	.word	0x20000370

08002fa0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b0a0      	sub	sp, #128	; 0x80
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <mavlink_sign_packet+0x20>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <mavlink_sign_packet+0x24>
	    return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e04f      	b.n	8003064 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	785a      	ldrb	r2, [r3, #1]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f107 0110 	add.w	r1, r7, #16
 8002fde:	2206      	movs	r2, #6
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f012 f987 	bl	80152f4 <memcpy>
	signing->timestamp++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fec:	1c54      	adds	r4, r2, #1
 8002fee:	f143 0500 	adc.w	r5, r3, #0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fc8b 	bl	8002918 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f103 0110 	add.w	r1, r3, #16
 8003008:	f107 0318 	add.w	r3, r7, #24
 800300c:	2220      	movs	r2, #32
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe9a 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	f107 0318 	add.w	r3, r7, #24
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe93 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8003022:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe8a 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	2202      	movs	r2, #2
 800303a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe82 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8003044:	f107 0318 	add.w	r3, r7, #24
 8003048:	2207      	movs	r2, #7
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe7b 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1dda      	adds	r2, r3, #7
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fef4 	bl	8002e4a <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8003062:	230d      	movs	r3, #13
}
 8003064:	4618      	mov	r0, r3
 8003066:	3780      	adds	r7, #128	; 0x80
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}

0800306c <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d90a      	bls.n	8003094 <_mav_trim_payload+0x28>
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	3b01      	subs	r3, #1
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <_mav_trim_payload+0x28>
		length--;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	3b01      	subs	r3, #1
 8003090:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003092:	e7f1      	b.n	8003078 <_mav_trim_payload+0xc>
	}
	return length;
 8003094:	78fb      	ldrb	r3, [r7, #3]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80030a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a4:	b08f      	sub	sp, #60	; 0x3c
 80030a6:	af04      	add	r7, sp, #16
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	72fb      	strb	r3, [r7, #11]
 80030b0:	4613      	mov	r3, r2
 80030b2:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7b1b      	ldrb	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80030c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <mavlink_finalize_message_buffer+0x50>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80030f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <mavlink_finalize_message_buffer+0x60>
 80030fe:	230d      	movs	r3, #13
 8003100:	e000      	b.n	8003104 <mavlink_finalize_message_buffer+0x62>
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8003108:	230a      	movs	r3, #10
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800310e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22fe      	movs	r2, #254	; 0xfe
 800311a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800311c:	2306      	movs	r3, #6
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003122:	e002      	b.n	800312a <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22fd      	movs	r2, #253	; 0xfd
 8003128:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800312a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <mavlink_finalize_message_buffer+0x96>
 8003132:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003136:	e009      	b.n	800314c <mavlink_finalize_message_buffer+0xaa>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	330c      	adds	r3, #12
 800313c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff92 	bl	800306c <_mav_trim_payload>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	7afa      	ldrb	r2, [r7, #11]
 8003154:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	7aba      	ldrb	r2, [r7, #10]
 800315a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8003162:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	799a      	ldrb	r2, [r3, #6]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	789b      	ldrb	r3, [r3, #2]
 8003196:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 800319e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	799b      	ldrb	r3, [r3, #6]
 80031aa:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	79db      	ldrb	r3, [r3, #7]
 80031b0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	7a1b      	ldrb	r3, [r3, #8]
 80031b6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7a5a      	ldrb	r2, [r3, #9]
 80031bc:	7a99      	ldrb	r1, [r3, #10]
 80031be:	0209      	lsls	r1, r1, #8
 80031c0:	430a      	orrs	r2, r1
 80031c2:	7adb      	ldrb	r3, [r3, #11]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	777b      	strb	r3, [r7, #29]
 80031cc:	e030      	b.n	8003230 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	795b      	ldrb	r3, [r3, #5]
 80031d8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	799b      	ldrb	r3, [r3, #6]
 80031de:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	79db      	ldrb	r3, [r3, #7]
 80031e4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	7a1b      	ldrb	r3, [r3, #8]
 80031ea:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	7a5a      	ldrb	r2, [r3, #9]
 80031f0:	7a99      	ldrb	r1, [r3, #10]
 80031f2:	0209      	lsls	r1, r1, #8
 80031f4:	430a      	orrs	r2, r1
 80031f6:	7adb      	ldrb	r3, [r3, #11]
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7a5a      	ldrb	r2, [r3, #9]
 8003204:	7a99      	ldrb	r1, [r3, #10]
 8003206:	0209      	lsls	r1, r1, #8
 8003208:	430a      	orrs	r2, r1
 800320a:	7adb      	ldrb	r3, [r3, #11]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	4313      	orrs	r3, r2
 8003210:	121b      	asrs	r3, r3, #8
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	7a5a      	ldrb	r2, [r3, #9]
 800321c:	7a99      	ldrb	r1, [r3, #10]
 800321e:	0209      	lsls	r1, r1, #8
 8003220:	430a      	orrs	r2, r1
 8003222:	7adb      	ldrb	r3, [r3, #11]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	4313      	orrs	r3, r2
 8003228:	141b      	asrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	f107 0318 	add.w	r3, r7, #24
 800323e:	3301      	adds	r3, #1
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb22 	bl	800288c <crc_calculate>
 8003248:	4603      	mov	r3, r0
 800324a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f103 010c 	add.w	r1, r3, #12
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	78db      	ldrb	r3, [r3, #3]
 8003256:	b29a      	uxth	r2, r3
 8003258:	f107 0316 	add.w	r3, r7, #22
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fb3a 	bl	80028d6 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8003262:	f107 0216 	add.w	r2, r7, #22
 8003266:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff facd 	bl	800280c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003272:	8af9      	ldrh	r1, [r7, #22]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	330c      	adds	r3, #12
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	78d2      	ldrb	r2, [r2, #3]
 800327c:	4413      	add	r3, r2
 800327e:	b2ca      	uxtb	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	b299      	uxth	r1, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f103 020c 	add.w	r2, r3, #12
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	78db      	ldrb	r3, [r3, #3]
 8003292:	3301      	adds	r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	b2ca      	uxtb	r2, r1
 8003298:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 800329a:	8afa      	ldrh	r2, [r7, #22]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80032a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	310c      	adds	r1, #12
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80032c2:	4401      	add	r1, r0
 80032c4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80032c8:	f107 0018 	add.w	r0, r7, #24
 80032cc:	9102      	str	r1, [sp, #8]
 80032ce:	9201      	str	r2, [sp, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4633      	mov	r3, r6
 80032d4:	4602      	mov	r2, r0
 80032d6:	4629      	mov	r1, r5
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fe61 	bl	8002fa0 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	78db      	ldrb	r3, [r3, #3]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3302      	adds	r3, #2
 80032fa:	b29b      	uxth	r3, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	372c      	adds	r7, #44	; 0x2c
 8003300:	46bd      	mov	sp, r7
 8003302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003304 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af04      	add	r7, sp, #16
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	70fb      	strb	r3, [r7, #3]
 8003316:	460b      	mov	r3, r1
 8003318:	70bb      	strb	r3, [r7, #2]
 800331a:	4613      	mov	r3, r2
 800331c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800331e:	787b      	ldrb	r3, [r7, #1]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe29 	bl	8002f78 <mavlink_get_channel_status>
 8003326:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003328:	78ba      	ldrb	r2, [r7, #2]
 800332a:	78f9      	ldrb	r1, [r7, #3]
 800332c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003330:	9302      	str	r3, [sp, #8]
 8003332:	7f3b      	ldrb	r3, [r7, #28]
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	7e3b      	ldrb	r3, [r7, #24]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff feb0 	bl	80030a2 <mavlink_finalize_message_buffer>
 8003342:	4603      	mov	r3, r0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af04      	add	r7, sp, #16
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	70fb      	strb	r3, [r7, #3]
 800335e:	460b      	mov	r3, r1
 8003360:	70bb      	strb	r3, [r7, #2]
 8003362:	4613      	mov	r3, r2
 8003364:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8003366:	78ba      	ldrb	r2, [r7, #2]
 8003368:	78f9      	ldrb	r1, [r7, #3]
 800336a:	7d3b      	ldrb	r3, [r7, #20]
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	7c3b      	ldrb	r3, [r7, #16]
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	787b      	ldrb	r3, [r7, #1]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ffc3 	bl	8003304 <mavlink_finalize_message_chan>
 800337e:	4603      	mov	r3, r0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	78db      	ldrb	r3, [r3, #3]
 8003396:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	789b      	ldrb	r3, [r3, #2]
 800339c:	2bfe      	cmp	r3, #254	; 0xfe
 800339e:	d13a      	bne.n	8003416 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80033a4:	2305      	movs	r3, #5
 80033a6:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	789a      	ldrb	r2, [r3, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3301      	adds	r3, #1
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3302      	adds	r3, #2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	7992      	ldrb	r2, [r2, #6]
 80033c0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3303      	adds	r3, #3
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	79d2      	ldrb	r2, [r2, #7]
 80033ca:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	7a12      	ldrb	r2, [r2, #8]
 80033d4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	7a5a      	ldrb	r2, [r3, #9]
 80033da:	7a99      	ldrb	r1, [r3, #10]
 80033dc:	0209      	lsls	r1, r1, #8
 80033de:	430a      	orrs	r2, r1
 80033e0:	7adb      	ldrb	r3, [r3, #11]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	4313      	orrs	r3, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3305      	adds	r3, #5
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1d98      	adds	r0, r3, #6
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f103 010c 	add.w	r1, r3, #12
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	461a      	mov	r2, r3
 8003400:	f011 ff78 	bl	80152f4 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003404:	7dbb      	ldrb	r3, [r7, #22]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	78d2      	ldrb	r2, [r2, #3]
 800340a:	4413      	add	r3, r2
 800340c:	3301      	adds	r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	e06c      	b.n	80034f0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe24 	bl	800306c <_mav_trim_payload>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003428:	2309      	movs	r3, #9
 800342a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	789a      	ldrb	r2, [r3, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3301      	adds	r3, #1
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3302      	adds	r3, #2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	7912      	ldrb	r2, [r2, #4]
 8003444:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3303      	adds	r3, #3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	7952      	ldrb	r2, [r2, #5]
 800344e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	7992      	ldrb	r2, [r2, #6]
 8003458:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3305      	adds	r3, #5
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	79d2      	ldrb	r2, [r2, #7]
 8003462:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3306      	adds	r3, #6
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	7a12      	ldrb	r2, [r2, #8]
 800346c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7a5a      	ldrb	r2, [r3, #9]
 8003472:	7a99      	ldrb	r1, [r3, #10]
 8003474:	0209      	lsls	r1, r1, #8
 8003476:	430a      	orrs	r2, r1
 8003478:	7adb      	ldrb	r3, [r3, #11]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4313      	orrs	r3, r2
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3307      	adds	r3, #7
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	7a5a      	ldrb	r2, [r3, #9]
 800348c:	7a99      	ldrb	r1, [r3, #10]
 800348e:	0209      	lsls	r1, r1, #8
 8003490:	430a      	orrs	r2, r1
 8003492:	7adb      	ldrb	r3, [r3, #11]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	4313      	orrs	r3, r2
 8003498:	121a      	asrs	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3308      	adds	r3, #8
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	7a5a      	ldrb	r2, [r3, #9]
 80034a6:	7a99      	ldrb	r1, [r3, #10]
 80034a8:	0209      	lsls	r1, r1, #8
 80034aa:	430a      	orrs	r2, r1
 80034ac:	7adb      	ldrb	r3, [r3, #11]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	4313      	orrs	r3, r2
 80034b2:	141a      	asrs	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3309      	adds	r3, #9
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 000a 	add.w	r0, r3, #10
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f011 ff13 	bl	80152f4 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80034ce:	7dba      	ldrb	r2, [r7, #22]
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4413      	add	r3, r2
 80034d4:	3301      	adds	r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <mavlink_msg_to_send_buffer+0x164>
 80034e8:	230d      	movs	r3, #13
 80034ea:	e000      	b.n	80034ee <mavlink_msg_to_send_buffer+0x166>
 80034ec:	2300      	movs	r3, #0
 80034ee:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	b29a      	uxth	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3301      	adds	r3, #1
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1c98      	adds	r0, r3, #2
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800351e:	7dfa      	ldrb	r2, [r7, #23]
 8003520:	4619      	mov	r1, r3
 8003522:	f011 fee7 	bl	80152f4 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8003526:	7dbb      	ldrb	r3, [r7, #22]
 8003528:	b29a      	uxth	r2, r3
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4413      	add	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4413      	add	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	3303      	adds	r3, #3
 800353c:	b29b      	uxth	r3, r3
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b08e      	sub	sp, #56	; 0x38
 800354a:	af02      	add	r7, sp, #8
 800354c:	613a      	str	r2, [r7, #16]
 800354e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003552:	edc7 0a02 	vstr	s1, [r7, #8]
 8003556:	461a      	mov	r2, r3
 8003558:	ed87 1a01 	vstr	s2, [r7, #4]
 800355c:	edc7 1a00 	vstr	s3, [r7]
 8003560:	4603      	mov	r3, r0
 8003562:	75fb      	strb	r3, [r7, #23]
 8003564:	460b      	mov	r3, r1
 8003566:	75bb      	strb	r3, [r7, #22]
 8003568:	4613      	mov	r3, r2
 800356a:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 800357c:	8abb      	ldrh	r3, [r7, #20]
 800357e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 8003580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003582:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	330c      	adds	r3, #12
 8003588:	f107 011c 	add.w	r1, r7, #28
 800358c:	2214      	movs	r2, #20
 800358e:	4618      	mov	r0, r3
 8003590:	f011 feb0 	bl	80152f4 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2200      	movs	r2, #0
 8003598:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 800359c:	725a      	strb	r2, [r3, #9]
 800359e:	2200      	movs	r2, #0
 80035a0:	729a      	strb	r2, [r3, #10]
 80035a2:	2200      	movs	r2, #0
 80035a4:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80035a6:	7dba      	ldrb	r2, [r7, #22]
 80035a8:	7df9      	ldrb	r1, [r7, #23]
 80035aa:	2314      	movs	r3, #20
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2314      	movs	r3, #20
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2314      	movs	r3, #20
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff fec9 	bl	800334c <mavlink_finalize_message>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	; 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 80035e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e6:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 80035e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035ec:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 80035ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80035f2:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80035f4:	2303      	movs	r3, #3
 80035f6:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f107 010c 	add.w	r1, r7, #12
 8003600:	2209      	movs	r2, #9
 8003602:	4618      	mov	r0, r3
 8003604:	f011 fe76 	bl	80152f4 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	725a      	strb	r2, [r3, #9]
 800360e:	2200      	movs	r2, #0
 8003610:	729a      	strb	r2, [r3, #10]
 8003612:	2200      	movs	r2, #0
 8003614:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8003616:	79ba      	ldrb	r2, [r7, #6]
 8003618:	79f9      	ldrb	r1, [r7, #7]
 800361a:	2332      	movs	r3, #50	; 0x32
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2309      	movs	r3, #9
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2309      	movs	r3, #9
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7ff fe91 	bl	800334c <mavlink_finalize_message>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af04      	add	r7, sp, #16
 800363a:	60ba      	str	r2, [r7, #8]
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4603      	mov	r3, r0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	460b      	mov	r3, r1
 8003644:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	791e      	ldrb	r6, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	795b      	ldrb	r3, [r3, #5]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	7992      	ldrb	r2, [r2, #6]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	6809      	ldr	r1, [r1, #0]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	79c0      	ldrb	r0, [r0, #7]
 800365a:	7bbd      	ldrb	r5, [r7, #14]
 800365c:	7bfc      	ldrb	r4, [r7, #15]
 800365e:	9003      	str	r0, [sp, #12]
 8003660:	9102      	str	r1, [sp, #8]
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4633      	mov	r3, r6
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4629      	mov	r1, r5
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff ffa9 	bl	80035c4 <mavlink_msg_heartbeat_pack>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800367c <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	709a      	strb	r2, [r3, #2]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	70da      	strb	r2, [r3, #3]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	711a      	strb	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	719a      	strb	r2, [r3, #6]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, I2C_HandleTypeDef* i2c)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter_i2c(i2c)  {
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	731a      	strb	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	81da      	strh	r2, [r3, #14]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a24      	ldr	r2, [pc, #144]	; (8003784 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc0>)
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	220a      	movs	r2, #10
 800370a:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003724:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f011 fe0a 	bl	8015344 <memset>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f203 33f1 	addw	r3, r3, #1009	; 0x3f1
 8003746:	f44f 728c 	mov.w	r2, #280	; 0x118
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f011 fdf9 	bl	8015344 <memset>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003758:	4619      	mov	r1, r3
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9c1 2300 	strd	r2, r3, [r1]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff85 	bl	800367c <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc4>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6013      	str	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);




}
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08017f78 	.word	0x08017f78
 8003788:	200003d0 	.word	0x200003d0

0800378c <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_UARTEx_RxEventCallback+0x20>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
	instance
	->process_header();
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f83c 	bl	800381c <_ZN14MavlinkControl14process_headerEv>



}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200003d0 	.word	0x200003d0

080037b0 <_ZN14MavlinkControl9update_RXEv>:

void MavlinkControl::update_RX(void){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80037c2:	2214      	movs	r2, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	f00c feeb 	bl	80105a0 <HAL_UARTEx_ReceiveToIdle_DMA>


}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

	//Every 0.5 sec send a heartbeat to the herelink controller. If this runs continuously this
	//blocks the SBUS protocol

	this->sendTestMessage();
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8fb 	bl	80039d8 <_ZN14MavlinkControl15sendTestMessageEv>

	if(HAL_GetTick() % 500 == 0){
 80037e2:	f003 fa47 	bl	8006c74 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <_ZN14MavlinkControl9update_TXEv+0x44>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f895 	bl	8003938 <_ZN14MavlinkControl9heartbeatEv>

	}

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <_ZN14MavlinkControl14process_headerEv>:

void MavlinkControl::process_header(void){
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	//first check the header for value 0xFD

	//NOT EVEN SURE IF I NEED THIS LATER


	if(_receiveBuffer_1[0] == 0xFD){
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800382a:	2bfd      	cmp	r3, #253	; 0xfd
 800382c:	d147      	bne.n	80038be <_ZN14MavlinkControl14process_headerEv+0xa2>
		_receiveBuffer_2 = _receiveBuffer_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

		//printf("CHECKING IF LEN IS OK %d \r\n", _tempBuffer[1]);


		_mavlink_received_header.magic = _receiveBuffer_2[0];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800384e:	785a      	ldrb	r2, [r3, #1]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.incompat_flags = _receiveBuffer_2[2];
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800385c:	789a      	ldrb	r2, [r3, #2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
		_mavlink_received_header.compat_flags = _receiveBuffer_2[3];
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800386a:	78da      	ldrb	r2, [r3, #3]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
		_mavlink_received_header.seq = _receiveBuffer_2[4];
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003878:	791a      	ldrb	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[5];
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003886:	795a      	ldrb	r2, [r3, #5]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.msgid = _receiveBuffer_2[6] | _receiveBuffer_2[7] | _receiveBuffer_2[8];
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003894:	3306      	adds	r3, #6
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800389e:	3307      	adds	r3, #7
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038ac:	3308      	adds	r3, #8
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520





}
 80038bc:	e036      	b.n	800392c <_ZN14MavlinkControl14process_headerEv+0x110>
	}else if(_receiveBuffer_1[0] == 0xFE){
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 80038c4:	2bfe      	cmp	r3, #254	; 0xfe
 80038c6:	d131      	bne.n	800392c <_ZN14MavlinkControl14process_headerEv+0x110>
		_receiveBuffer_2 = _receiveBuffer_1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
		_mavlink_received_header.magic = _receiveBuffer_2[0];
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038e8:	785a      	ldrb	r2, [r3, #1]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.seq = _receiveBuffer_2[2];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038f6:	789a      	ldrb	r2, [r3, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[3];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003904:	78da      	ldrb	r2, [r3, #3]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.compid = _receiveBuffer_2[4];
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003912:	791a      	ldrb	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
		_mavlink_received_header.msgid = _receiveBuffer_2[5];
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003920:	3305      	adds	r3, #5
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af04      	add	r7, sp, #16
 800393e:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 8003958:	f7ff fe6c 	bl	8003634 <mavlink_msg_heartbeat_encode>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f203 1233 	addw	r2, r3, #307	; 0x133
 8003976:	2303      	movs	r3, #3
 8003978:	9303      	str	r3, [sp, #12]
 800397a:	2300      	movs	r3, #0
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	230a      	movs	r3, #10
 8003988:	f7ff fe1c 	bl	80035c4 <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff fcf4 	bl	8003388 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	89da      	ldrh	r2, [r3, #14]
 80039ae:	2364      	movs	r3, #100	; 0x64
 80039b0:	f00b fa1b 	bl	800edea <HAL_UART_Transmit>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 80039c6:	f012 fa95 	bl	8015ef4 <puts>
	}

}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	08017f7c 	.word	0x08017f7c

080039d8 <_ZN14MavlinkControl15sendTestMessageEv>:

void MavlinkControl::sendTestMessage(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]

	float testValue = 122.0f;
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <_ZN14MavlinkControl15sendTestMessageEv+0x8c>)
 80039e2:	60fb      	str	r3, [r7, #12]

	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though

	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, testValue, 0.0f,0,0,0,0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f203 1233 	addw	r2, r3, #307	; 0x133
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 80039fe:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003a02:	2300      	movs	r3, #0
 8003a04:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003a08:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a0c:	f7ff fd9b 	bl	8003546 <mavlink_msg_vfr_hud_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7ff fcb2 	bl	8003388 <mavlink_msg_to_send_buffer>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 250a 	ldrh.w	r2, [r3, #1290]	; 0x50a
 8003a3e:	2364      	movs	r3, #100	; 0x64
 8003a40:	f00b f9d3 	bl	800edea <HAL_UART_Transmit>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <_ZN14MavlinkControl15sendTestMessageEv+0x82>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <_ZN14MavlinkControl15sendTestMessageEv+0x94>)
 8003a56:	f012 fa4d 	bl	8015ef4 <puts>
	}

}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	42f40000 	.word	0x42f40000
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	08017f7c 	.word	0x08017f7c

08003a70 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	615a      	str	r2, [r3, #20]
 8003a8c:	761a      	strb	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	331e      	adds	r3, #30
 8003a92:	2220      	movs	r2, #32
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f011 fc54 	bl	8015344 <memset>

	this->_huart_sbus = huart_sbus;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	601a      	str	r2, [r3, #0]





}
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2219      	movs	r2, #25
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f00c fd6e 	bl	80105a0 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f804 	bl	8003ad2 <_ZN4SBUS8readSBUSEv>




}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	795b      	ldrb	r3, [r3, #5]
 8003ade:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	799b      	ldrb	r3, [r3, #6]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8003aea:	89fa      	ldrh	r2, [r7, #14]
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	799b      	ldrb	r3, [r3, #6]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	79db      	ldrb	r3, [r3, #7]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	015b      	lsls	r3, r3, #5
 8003b0e:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8003b10:	89fa      	ldrh	r2, [r7, #14]
 8003b12:	89bb      	ldrh	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	79db      	ldrb	r3, [r3, #7]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7a1b      	ldrb	r3, [r3, #8]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7a5b      	ldrb	r3, [r3, #9]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8003b40:	89fa      	ldrh	r2, [r7, #14]
 8003b42:	89bb      	ldrh	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7a5b      	ldrb	r3, [r3, #9]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7a9b      	ldrb	r3, [r3, #10]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8003b6c:	89fa      	ldrh	r2, [r7, #14]
 8003b6e:	89bb      	ldrh	r3, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7a9b      	ldrb	r3, [r3, #10]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7adb      	ldrb	r3, [r3, #11]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8003b92:	89fa      	ldrh	r2, [r7, #14]
 8003b94:	89bb      	ldrh	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7adb      	ldrb	r3, [r3, #11]
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7b1b      	ldrb	r3, [r3, #12]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7b5b      	ldrb	r3, [r3, #13]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	025b      	lsls	r3, r3, #9
 8003bc0:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8003bc2:	89fa      	ldrh	r2, [r7, #14]
 8003bc4:	89bb      	ldrh	r3, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7b5b      	ldrb	r3, [r3, #13]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7b9b      	ldrb	r3, [r3, #14]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	019b      	lsls	r3, r3, #6
 8003bec:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003bee:	89fa      	ldrh	r2, [r7, #14]
 8003bf0:	89bb      	ldrh	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7b9b      	ldrb	r3, [r3, #14]
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7bdb      	ldrb	r3, [r3, #15]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	89bb      	ldrh	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7c1b      	ldrb	r3, [r3, #16]
 8003c2a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7c5b      	ldrb	r3, [r3, #17]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7c5b      	ldrb	r3, [r3, #17]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7c9b      	ldrb	r3, [r3, #18]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8003c5c:	89fa      	ldrh	r2, [r7, #14]
 8003c5e:	89bb      	ldrh	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7c9b      	ldrb	r3, [r3, #18]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7cdb      	ldrb	r3, [r3, #19]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7d1b      	ldrb	r3, [r3, #20]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	029b      	lsls	r3, r3, #10
 8003c8a:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003c8c:	89fa      	ldrh	r2, [r7, #14]
 8003c8e:	89bb      	ldrh	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7d1b      	ldrb	r3, [r3, #20]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7d5b      	ldrb	r3, [r3, #21]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	01db      	lsls	r3, r3, #7
 8003cb6:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8003cb8:	89fa      	ldrh	r2, [r7, #14]
 8003cba:	89bb      	ldrh	r3, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7d5b      	ldrb	r3, [r3, #21]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7d9b      	ldrb	r3, [r3, #22]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003cde:	89fa      	ldrh	r2, [r7, #14]
 8003ce0:	89bb      	ldrh	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7d9b      	ldrb	r3, [r3, #22]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7ddb      	ldrb	r3, [r3, #23]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7e1b      	ldrb	r3, [r3, #24]
 8003d08:	125b      	asrs	r3, r3, #9
 8003d0a:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003d0c:	89fa      	ldrh	r2, [r7, #14]
 8003d0e:	89bb      	ldrh	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	897b      	ldrh	r3, [r7, #10]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7e1b      	ldrb	r3, [r3, #24]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7e5b      	ldrb	r3, [r3, #25]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8003d38:	89fa      	ldrh	r2, [r7, #14]
 8003d3a:	89bb      	ldrh	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7e5b      	ldrb	r3, [r3, #25]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e9b      	ldrb	r3, [r3, #26]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8003d5e:	89fa      	ldrh	r2, [r7, #14]
 8003d60:	89bb      	ldrh	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7edb      	ldrb	r3, [r3, #27]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <_ZN4SBUS8readSBUSEv+0x2b0>
 8003d7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d80:	e000      	b.n	8003d84 <_ZN4SBUS8readSBUSEv+0x2b2>
 8003d82:	2200      	movs	r2, #0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8003d88:	2301      	movs	r3, #1


}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003da4:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8003da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003daa:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003dac:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003db0:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003db2:	f240 6394 	movw	r3, #1684	; 0x694
 8003db6:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8003db8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	da14      	bge.n	8003dee <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003dc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dec:	e01b      	b.n	8003e26 <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003dee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	dd13      	ble.n	8003e22 <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8003dfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dfe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <_ZN4SBUS8getLeftYEv+0x9c>)
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003e0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e12:	1acb      	subs	r3, r1, r3
 8003e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e20:	e001      	b.n	8003e26 <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8003e22:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003e38 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8003e26:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	fffffc18 	.word	0xfffffc18
 8003e38:	00000000 	.word	0x00000000

08003e3c <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8c1b      	ldrh	r3, [r3, #32]
 8003e48:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003e4a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003e4e:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 8003e50:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <_ZN4SBUS9getRightYEv+0xc0>)
 8003e52:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <_ZN4SBUS9getRightYEv+0xc4>)
 8003e56:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8003e58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e64:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	dd16      	ble.n	8003ea0 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 8003e72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003f04 <_ZN4SBUS9getRightYEv+0xc8>
 8003e8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	e025      	b.n	8003eec <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8003ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eac:	ed97 7a04 	vldr	s14, [r7, #16]
 8003eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d516      	bpl.n	8003ee8 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8003eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f04 <_ZN4SBUS9getRightYEv+0xc8>
 8003ed2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ede:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee6:	e001      	b.n	8003eec <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8003ee8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003f08 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8003eec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	43b60000 	.word	0x43b60000
 8003f00:	44d28000 	.word	0x44d28000
 8003f04:	447a0000 	.word	0x447a0000
 8003f08:	00000000 	.word	0x00000000

08003f0c <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8bdb      	ldrh	r3, [r3, #30]
 8003f18:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003f1a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003f1e:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <_ZN4SBUS9getRightXEv+0xc0>)
 8003f22:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <_ZN4SBUS9getRightXEv+0xc4>)
 8003f26:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8003f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f34:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	dd16      	ble.n	8003f70 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003f42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003fd4 <_ZN4SBUS9getRightXEv+0xc8>
 8003f5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	e025      	b.n	8003fbc <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8003f70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f88:	d516      	bpl.n	8003fb8 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8003f8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003fd4 <_ZN4SBUS9getRightXEv+0xc8>
 8003fa2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003faa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb6:	e001      	b.n	8003fbc <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8003fb8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003fd8 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8003fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	43b60000 	.word	0x43b60000
 8003fd0:	44d28000 	.word	0x44d28000
 8003fd4:	447a0000 	.word	0x447a0000
 8003fd8:	00000000 	.word	0x00000000

08003fdc <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe8:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8003fea:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003fee:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <_ZN4SBUS11getJogWheelEv+0xc0>)
 8003ff2:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8003ff6:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8003ff8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004004:	ed97 7a04 	vldr	s14, [r7, #16]
 8004008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	dd16      	ble.n	8004040 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8004012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800401e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004026:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80040a4 <_ZN4SBUS11getJogWheelEv+0xc8>
 800402a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800402e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004032:	edd7 7a03 	vldr	s15, [r7, #12]
 8004036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800403a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800403e:	e025      	b.n	800408c <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8004040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800404c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d516      	bpl.n	8004088 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 800405a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004066:	edd7 7a04 	vldr	s15, [r7, #16]
 800406a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80040a4 <_ZN4SBUS11getJogWheelEv+0xc8>
 8004072:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004076:	ed97 7a02 	vldr	s14, [r7, #8]
 800407a:	edd7 7a04 	vldr	s15, [r7, #16]
 800407e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	e001      	b.n	800408c <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8004088:	eddf 7a07 	vldr	s15, [pc, #28]	; 80040a8 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	44d28000 	.word	0x44d28000
 80040a0:	43b60000 	.word	0x43b60000
 80040a4:	447a0000 	.word	0x447a0000
 80040a8:	00000000 	.word	0x00000000

080040ac <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040bc:	bf8c      	ite	hi
 80040be:	2301      	movhi	r3, #1
 80040c0:	2300      	movls	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d02d      	beq.n	8004128 <_ZN4SBUS8A_buttonEv+0x7c>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	dc3b      	bgt.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <_ZN4SBUS8A_buttonEv+0x2e>
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d00a      	beq.n	80040ee <_ZN4SBUS8A_buttonEv+0x42>
 80040d8:	e036      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80040ec:	e027      	b.n	800413e <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004100:	e01f      	b.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b31      	cmp	r3, #49	; 0x31
 8004114:	bf8c      	ite	hi
 8004116:	2301      	movhi	r3, #1
 8004118:	2300      	movls	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
	      break;
 8004126:	e00c      	b.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
	        return true;
 800413a:	2301      	movs	r3, #1
 800413c:	e005      	b.n	800414a <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8004146:	bf00      	nop
	  }

	  return false;
 8004148:	2300      	movs	r3, #0

}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	200003d4 	.word	0x200003d4
 800415c:	200003d5 	.word	0x200003d5

08004160 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	bf8c      	ite	hi
 8004172:	2301      	movhi	r3, #1
 8004174:	2300      	movls	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d02d      	beq.n	80041dc <_ZN4SBUS8B_buttonEv+0x7c>
 8004180:	2b02      	cmp	r3, #2
 8004182:	dc3b      	bgt.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <_ZN4SBUS8B_buttonEv+0x2e>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d00a      	beq.n	80041a2 <_ZN4SBUS8B_buttonEv+0x42>
 800418c:	e036      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02e      	beq.n	80041f2 <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80041a0:	e027      	b.n	80041f2 <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 80041b4:	e01f      	b.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b31      	cmp	r3, #49	; 0x31
 80041c8:	bf8c      	ite	hi
 80041ca:	2301      	movhi	r3, #1
 80041cc:	2300      	movls	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
	      break;
 80041da:	e00c      	b.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
	        return true;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e005      	b.n	80041fe <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 80041fa:	bf00      	nop
	  }

	  return false;
 80041fc:	2300      	movs	r3, #0


}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200003d6 	.word	0x200003d6
 8004210:	200003d7 	.word	0x200003d7

08004214 <_ZN4SBUS8C_buttonEv>:

bool SBUS::C_button(void){
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[7] > 1000);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004224:	bf8c      	ite	hi
 8004226:	2301      	movhi	r3, #1
 8004228:	2300      	movls	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d02d      	beq.n	8004290 <_ZN4SBUS8C_buttonEv+0x7c>
 8004234:	2b02      	cmp	r3, #2
 8004236:	dc3b      	bgt.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <_ZN4SBUS8C_buttonEv+0x2e>
 800423c:	2b01      	cmp	r3, #1
 800423e:	d00a      	beq.n	8004256 <_ZN4SBUS8C_buttonEv+0x42>
 8004240:	e036      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02e      	beq.n	80042a6 <_ZN4SBUS8C_buttonEv+0x92>
			debounce_state = 1;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004254:	e027      	b.n	80042a6 <_ZN4SBUS8C_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <_ZN4SBUS8C_buttonEv+0x56>
			debounce_state = 0;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 8004268:	e01f      	b.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b31      	cmp	r3, #49	; 0x31
 800427c:	bf8c      	ite	hi
 800427e:	2301      	movhi	r3, #1
 8004280:	2300      	movls	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>
			debounce_state = 2;
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
		  break;
 800428e:	e00c      	b.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <_ZN4SBUS8C_buttonEv+0x9a>
			debounce_state = 0;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
			return true;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e005      	b.n	80042b2 <_ZN4SBUS8C_buttonEv+0x9e>
		  break;
 80042a6:	bf00      	nop
 80042a8:	e002      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		  break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		  }
		  break;
 80042ae:	bf00      	nop
	  }

	  return false;
 80042b0:	2300      	movs	r3, #0

}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200003d8 	.word	0x200003d8
 80042c4:	200003d9 	.word	0x200003d9

080042c8 <_ZN4SBUS8D_buttonEv>:

bool SBUS::D_button(void){
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[8] > 1000);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d8:	bf8c      	ite	hi
 80042da:	2301      	movhi	r3, #1
 80042dc:	2300      	movls	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d02d      	beq.n	8004344 <_ZN4SBUS8D_buttonEv+0x7c>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	dc3b      	bgt.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <_ZN4SBUS8D_buttonEv+0x2e>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d00a      	beq.n	800430a <_ZN4SBUS8D_buttonEv+0x42>
 80042f4:	e036      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02e      	beq.n	800435a <_ZN4SBUS8D_buttonEv+0x92>
			debounce_state = 1;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004308:	e027      	b.n	800435a <_ZN4SBUS8D_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <_ZN4SBUS8D_buttonEv+0x56>
			debounce_state = 0;
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 800431c:	e01f      	b.n	800435e <_ZN4SBUS8D_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b31      	cmp	r3, #49	; 0x31
 8004330:	bf8c      	ite	hi
 8004332:	2301      	movhi	r3, #1
 8004334:	2300      	movls	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <_ZN4SBUS8D_buttonEv+0x96>
			debounce_state = 2;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]
		  break;
 8004342:	e00c      	b.n	800435e <_ZN4SBUS8D_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <_ZN4SBUS8D_buttonEv+0x9a>
			debounce_state = 0;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
			return true;
 8004356:	2301      	movs	r3, #1
 8004358:	e005      	b.n	8004366 <_ZN4SBUS8D_buttonEv+0x9e>
		  break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		  break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		  }
		  break;
 8004362:	bf00      	nop
	  }

	  return false;
 8004364:	2300      	movs	r3, #0

}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200003da 	.word	0x200003da
 8004378:	200003db 	.word	0x200003db

0800437c <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
      { }

#if __cplusplus >= 201103L
      constexpr _Base_bitset(unsigned long long __val) noexcept
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	e9c7 2300 	strd	r2, r3, [r7]
#else
      _Base_bitset(unsigned long __val)
#endif
      : _M_w(__val)
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]
      { }
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ffec 	bl	80043ba <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2201      	movs	r2, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:
      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
      { return _M_w; }

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c) :_i2c (i2c){
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	715a      	strb	r2, [r3, #5]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	60da      	str	r2, [r3, #12]



}
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_ZN9Altimeter14init_altimeterEv>:

void Altimeter::init_altimeter(void){
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af04      	add	r7, sp, #16
 800443e:	6078      	str	r0, [r7, #4]

	//Set to altimeter mode
	_altimeter_mode = 0xf9;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	22f9      	movs	r2, #249	; 0xf9
 8004444:	711a      	strb	r2, [r3, #4]
	uint8_t reset = 0x04;
 8004446:	2304      	movs	r3, #4
 8004448:	75fb      	strb	r3, [r7, #23]
	uint8_t response;
    uint8_t transmit_data[3];

	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, 1, &_altimeter_mode, 1, 100) != HAL_OK){
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2264      	movs	r2, #100	; 0x64
 8004454:	9202      	str	r2, [sp, #8]
 8004456:	2201      	movs	r2, #1
 8004458:	9201      	str	r2, [sp, #4]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2301      	movs	r3, #1
 800445e:	2226      	movs	r2, #38	; 0x26
 8004460:	21c0      	movs	r1, #192	; 0xc0
 8004462:	f005 fcb1 	bl	8009dc8 <HAL_I2C_Mem_Write>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <_ZN9Altimeter14init_altimeterEv+0x44>

		printf("error with i2c \r\n");
 8004476:	4862      	ldr	r0, [pc, #392]	; (8004600 <_ZN9Altimeter14init_altimeterEv+0x1c8>)
 8004478:	f011 fd3c 	bl	8015ef4 <puts>

	}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT , &response, 1, 100);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	2364      	movs	r3, #100	; 0x64
 8004482:	9302      	str	r3, [sp, #8]
 8004484:	2301      	movs	r3, #1
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	f107 0316 	add.w	r3, r7, #22
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2301      	movs	r3, #1
 8004490:	2226      	movs	r2, #38	; 0x26
 8004492:	21c0      	movs	r1, #192	; 0xc0
 8004494:	f005 fdac 	bl	8009ff0 <HAL_I2C_Mem_Read>
	printf("Reading from IIC address %d \r\n", response);
 8004498:	7dbb      	ldrb	r3, [r7, #22]
 800449a:	4619      	mov	r1, r3
 800449c:	4859      	ldr	r0, [pc, #356]	; (8004604 <_ZN9Altimeter14init_altimeterEv+0x1cc>)
 800449e:	f011 fca3 	bl	8015de8 <iprintf>

	//No event flags disabled (might change later).
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_2, 1, &_event_flags, 1, 100) != HAL_OK){
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3305      	adds	r3, #5
 80044aa:	2264      	movs	r2, #100	; 0x64
 80044ac:	9202      	str	r2, [sp, #8]
 80044ae:	2201      	movs	r2, #1
 80044b0:	9201      	str	r2, [sp, #4]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2301      	movs	r3, #1
 80044b6:	2227      	movs	r2, #39	; 0x27
 80044b8:	21c0      	movs	r1, #192	; 0xc0
 80044ba:	f005 fc85 	bl	8009dc8 <HAL_I2C_Mem_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <_ZN9Altimeter14init_altimeterEv+0x9c>

		printf("error with i2c \r\n");
 80044ce:	484c      	ldr	r0, [pc, #304]	; (8004600 <_ZN9Altimeter14init_altimeterEv+0x1c8>)
 80044d0:	f011 fd10 	bl	8015ef4 <puts>
	}
	uint8_t data[1] = {0x07};
 80044d4:	2307      	movs	r3, #7
 80044d6:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, 0x14, 1, data, 1, 100) != HAL_OK){
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	2364      	movs	r3, #100	; 0x64
 80044de:	9302      	str	r3, [sp, #8]
 80044e0:	2301      	movs	r3, #1
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2301      	movs	r3, #1
 80044ec:	2214      	movs	r2, #20
 80044ee:	21c0      	movs	r1, #192	; 0xc0
 80044f0:	f005 fc6a 	bl	8009dc8 <HAL_I2C_Mem_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <_ZN9Altimeter14init_altimeterEv+0xd2>
		printf("error with i2c \r\n");
 8004504:	483e      	ldr	r0, [pc, #248]	; (8004600 <_ZN9Altimeter14init_altimeterEv+0x1c8>)
 8004506:	f011 fcf5 	bl	8015ef4 <puts>
	}
	_altimeter_mode = 0xf9;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	22f9      	movs	r2, #249	; 0xf9
 800450e:	711a      	strb	r2, [r3, #4]
	transmit_data[0] = _altimeter_address;
 8004510:	23c0      	movs	r3, #192	; 0xc0
 8004512:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 8004514:	2326      	movs	r3, #38	; 0x26
 8004516:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = _altimeter_mode;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	791b      	ldrb	r3, [r3, #4]
 800451c:	74bb      	strb	r3, [r7, #18]
	if(HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100) != HAL_OK){
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f107 0210 	add.w	r2, r7, #16
 8004526:	2364      	movs	r3, #100	; 0x64
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2302      	movs	r3, #2
 800452c:	21c0      	movs	r1, #192	; 0xc0
 800452e:	f005 fb57 	bl	8009be0 <HAL_I2C_Master_Transmit>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <_ZN9Altimeter14init_altimeterEv+0x110>

		printf("error with i2c \r\n");
 8004542:	482f      	ldr	r0, [pc, #188]	; (8004600 <_ZN9Altimeter14init_altimeterEv+0x1c8>)
 8004544:	f011 fcd6 	bl	8015ef4 <puts>

	}
	transmit_data[0] = _altimeter_address;
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 800454c:	2326      	movs	r3, #38	; 0x26
 800454e:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = 0xFB;
 8004550:	23fb      	movs	r3, #251	; 0xfb
 8004552:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	f107 0210 	add.w	r2, r7, #16
 800455c:	2364      	movs	r3, #100	; 0x64
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2302      	movs	r3, #2
 8004562:	21c0      	movs	r1, #192	; 0xc0
 8004564:	f005 fb3c 	bl	8009be0 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f005 fe73 	bl	800a258 <HAL_I2C_GetState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b20      	cmp	r3, #32
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <_ZN9Altimeter14init_altimeterEv+0x14c>
 8004582:	e7f1      	b.n	8004568 <_ZN9Altimeter14init_altimeterEv+0x130>


	// Enable Data Flags in PT_DATA_CFG
	transmit_data[0] = _altimeter_data_event_flag_reg;
 8004584:	2313      	movs	r3, #19
 8004586:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = 0x07;
 8004588:	2307      	movs	r3, #7
 800458a:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	f107 0210 	add.w	r2, r7, #16
 8004594:	2364      	movs	r3, #100	; 0x64
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2302      	movs	r3, #2
 800459a:	21c0      	movs	r1, #192	; 0xc0
 800459c:	f005 fb20 	bl	8009be0 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f005 fe57 	bl	800a258 <HAL_I2C_GetState>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d000      	beq.n	80045bc <_ZN9Altimeter14init_altimeterEv+0x184>
 80045ba:	e7f1      	b.n	80045a0 <_ZN9Altimeter14init_altimeterEv+0x168>

	// Set Active
	transmit_data[0] = _altimeter_address;
 80045bc:	23c0      	movs	r3, #192	; 0xc0
 80045be:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 80045c0:	2326      	movs	r3, #38	; 0x26
 80045c2:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = 0xB9;
 80045c4:	23b9      	movs	r3, #185	; 0xb9
 80045c6:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f107 0210 	add.w	r2, r7, #16
 80045d0:	2364      	movs	r3, #100	; 0x64
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2302      	movs	r3, #2
 80045d6:	21c0      	movs	r1, #192	; 0xc0
 80045d8:	f005 fb02 	bl	8009be0 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f005 fe39 	bl	800a258 <HAL_I2C_GetState>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d000      	beq.n	80045f8 <_ZN9Altimeter14init_altimeterEv+0x1c0>
 80045f6:	e7f1      	b.n	80045dc <_ZN9Altimeter14init_altimeterEv+0x1a4>


}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08017fa4 	.word	0x08017fa4
 8004604:	08017fb8 	.word	0x08017fb8

08004608 <_ZN9Altimeter13read_altitudeEv>:




float Altimeter::read_altitude(void){
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b0c6      	sub	sp, #280	; 0x118
 800460e:	af04      	add	r7, sp, #16
 8004610:	6278      	str	r0, [r7, #36]	; 0x24
	 //TRIED TO FOLLOW FLOW-CHART FROM DATASHEET MPL3115A2
	    uint8_t status_reg;
	    uint8_t control_reg;

		// Read STATUS Register
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	2364      	movs	r3, #100	; 0x64
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	2301      	movs	r3, #1
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2301      	movs	r3, #1
 8004626:	2200      	movs	r2, #0
 8004628:	21c0      	movs	r1, #192	; 0xc0
 800462a:	f005 fce1 	bl	8009ff0 <HAL_I2C_Mem_Read>

		// Is Data Ready
		while(!(status_reg & 0x08)){
 800462e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10e      	bne.n	8004658 <_ZN9Altimeter13read_altitudeEv+0x50>
			HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	2364      	movs	r3, #100	; 0x64
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	2301      	movs	r3, #1
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2301      	movs	r3, #1
 800464e:	2200      	movs	r2, #0
 8004650:	21c0      	movs	r1, #192	; 0xc0
 8004652:	f005 fccd 	bl	8009ff0 <HAL_I2C_Mem_Read>
		while(!(status_reg & 0x08)){
 8004656:	e7ea      	b.n	800462e <_ZN9Altimeter13read_altitudeEv+0x26>
		}

		// Read OUT_P and OUT_T
		// Read pressure data from altimeter
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x01, 1, &_pressure_data[0], 1, 100);
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1dda      	adds	r2, r3, #7
 8004660:	2364      	movs	r3, #100	; 0x64
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	2301      	movs	r3, #1
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	9200      	str	r2, [sp, #0]
 800466a:	2301      	movs	r3, #1
 800466c:	2201      	movs	r2, #1
 800466e:	21c0      	movs	r1, #192	; 0xc0
 8004670:	f005 fcbe 	bl	8009ff0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x02, 1, &_pressure_data[1], 1, 100);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f103 0208 	add.w	r2, r3, #8
 800467e:	2364      	movs	r3, #100	; 0x64
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	2301      	movs	r3, #1
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	2301      	movs	r3, #1
 800468a:	2202      	movs	r2, #2
 800468c:	21c0      	movs	r1, #192	; 0xc0
 800468e:	f005 fcaf 	bl	8009ff0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x03, 1, &_pressure_data[2], 1, 100);
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	f103 0209 	add.w	r2, r3, #9
 800469c:	2364      	movs	r3, #100	; 0x64
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	2301      	movs	r3, #1
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	9200      	str	r2, [sp, #0]
 80046a6:	2301      	movs	r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	21c0      	movs	r1, #192	; 0xc0
 80046ac:	f005 fca0 	bl	8009ff0 <HAL_I2C_Mem_Read>


		HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT , &control_reg, 1, 100);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	2364      	movs	r3, #100	; 0x64
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	2301      	movs	r3, #1
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2301      	movs	r3, #1
 80046c4:	2226      	movs	r2, #38	; 0x26
 80046c6:	21c0      	movs	r1, #192	; 0xc0
 80046c8:	f005 fc92 	bl	8009ff0 <HAL_I2C_Mem_Read>
		printf("Reading from IIC address %d \r\n", control_reg);
 80046cc:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80046d0:	4619      	mov	r1, r3
 80046d2:	48a5      	ldr	r0, [pc, #660]	; (8004968 <_ZN9Altimeter13read_altitudeEv+0x360>)
 80046d4:	f011 fb88 	bl	8015de8 <iprintf>
		printf("Reading from status register %d \r\n", status_reg);
 80046d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046dc:	4619      	mov	r1, r3
 80046de:	48a3      	ldr	r0, [pc, #652]	; (800496c <_ZN9Altimeter13read_altitudeEv+0x364>)
 80046e0:	f011 fb82 	bl	8015de8 <iprintf>
	    printf("\r\n");
 80046e4:	48a2      	ldr	r0, [pc, #648]	; (8004970 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80046e6:	f011 fc05 	bl	8015ef4 <puts>

		uint8_t* rawBytes = _pressure_data;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	3307      	adds	r3, #7
 80046ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	    std::string msb_byte = std::bitset<8>(rawBytes[0]).to_string();
 80046f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	461c      	mov	r4, r3
 80046fe:	4615      	mov	r5, r2
 8004700:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8004704:	4622      	mov	r2, r4
 8004706:	462b      	mov	r3, r5
 8004708:	4608      	mov	r0, r1
 800470a:	f000 f943 	bl	8004994 <_ZNSt6bitsetILj8EEC1Ey>
 800470e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8004712:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 f950 	bl	80049be <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
	    std::string csb_byte = std::bitset<8>(rawBytes[1]).to_string();
 800471e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004722:	3301      	adds	r3, #1
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2200      	movs	r2, #0
 800472a:	4698      	mov	r8, r3
 800472c:	4691      	mov	r9, r2
 800472e:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	4608      	mov	r0, r1
 8004738:	f000 f92c 	bl	8004994 <_ZNSt6bitsetILj8EEC1Ey>
 800473c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004740:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f939 	bl	80049be <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
	    std::string lsb_byte = std::bitset<8>(rawBytes[2]).to_string();
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	3302      	adds	r3, #2
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2200      	movs	r2, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	4608      	mov	r0, r1
 8004766:	f000 f915 	bl	8004994 <_ZNSt6bitsetILj8EEC1Ey>
 800476a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800476e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f922 	bl	80049be <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>

	    uint32_t shifted_msb_byte = uint32_t(rawBytes[0]) << 16;
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	    uint32_t shifted_csb_byte = uint32_t(rawBytes[1]) << 8;
 8004786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800478a:	3301      	adds	r3, #1
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	    uint32_t shifted_lsb_byte = uint32_t(rawBytes[2]);
 8004794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004798:	3302      	adds	r3, #2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	    std::string shifted_msb_byte_str = std::bitset<32>(shifted_msb_byte).to_string();
 80047a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047a4:	2200      	movs	r2, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	617a      	str	r2, [r7, #20]
 80047aa:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80047ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047b2:	4608      	mov	r0, r1
 80047b4:	f000 f911 	bl	80049da <_ZNSt6bitsetILj32EEC1Ey>
 80047b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047bc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f91e 	bl	8004a04 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>
	    std::string shifted_csb_byte_str = std::bitset<32>(shifted_csb_byte).to_string();
 80047c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047cc:	2200      	movs	r2, #0
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	60fa      	str	r2, [r7, #12]
 80047d2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80047d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047da:	4608      	mov	r0, r1
 80047dc:	f000 f8fd 	bl	80049da <_ZNSt6bitsetILj32EEC1Ey>
 80047e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80047e4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f90a 	bl	8004a04 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>
	    std::string shifted_lsb_byte_str = std::bitset<32>(shifted_lsb_byte).to_string();
 80047f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047f4:	2200      	movs	r2, #0
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80047fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004802:	4608      	mov	r0, r1
 8004804:	f000 f8e9 	bl	80049da <_ZNSt6bitsetILj32EEC1Ey>
 8004808:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800480c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f8f6 	bl	8004a04 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>

		uint32_t pressure_raw = (shifted_msb_byte | shifted_csb_byte | shifted_lsb_byte) >> 4;
 8004818:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004820:	431a      	orrs	r2, r3
 8004822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004826:	4313      	orrs	r3, r2
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	    std::string pressure_raw_str = std::bitset<32>(pressure_raw).to_string();
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	2200      	movs	r2, #0
 8004834:	469a      	mov	sl, r3
 8004836:	4693      	mov	fp, r2
 8004838:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800483c:	4652      	mov	r2, sl
 800483e:	465b      	mov	r3, fp
 8004840:	4608      	mov	r0, r1
 8004842:	f000 f8ca 	bl	80049da <_ZNSt6bitsetILj32EEC1Ey>
 8004846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800484a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f8d7 	bl	8004a04 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>



	    printf("MSB byte: %s \r\n", msb_byte.c_str());
 8004856:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800485a:	4618      	mov	r0, r3
 800485c:	f010 fce4 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004860:	4603      	mov	r3, r0
 8004862:	4619      	mov	r1, r3
 8004864:	4843      	ldr	r0, [pc, #268]	; (8004974 <_ZN9Altimeter13read_altitudeEv+0x36c>)
 8004866:	f011 fabf 	bl	8015de8 <iprintf>
	    printf("shifted MSB byte %s \r\n", shifted_msb_byte_str.c_str());
 800486a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800486e:	4618      	mov	r0, r3
 8004870:	f010 fcda 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004874:	4603      	mov	r3, r0
 8004876:	4619      	mov	r1, r3
 8004878:	483f      	ldr	r0, [pc, #252]	; (8004978 <_ZN9Altimeter13read_altitudeEv+0x370>)
 800487a:	f011 fab5 	bl	8015de8 <iprintf>
	    printf("CSB byte: %s \r\n", csb_byte.c_str());
 800487e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004882:	4618      	mov	r0, r3
 8004884:	f010 fcd0 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004888:	4603      	mov	r3, r0
 800488a:	4619      	mov	r1, r3
 800488c:	483b      	ldr	r0, [pc, #236]	; (800497c <_ZN9Altimeter13read_altitudeEv+0x374>)
 800488e:	f011 faab 	bl	8015de8 <iprintf>
	    printf("shifted SB byte %s \r\n", shifted_csb_byte_str.c_str());
 8004892:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004896:	4618      	mov	r0, r3
 8004898:	f010 fcc6 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800489c:	4603      	mov	r3, r0
 800489e:	4619      	mov	r1, r3
 80048a0:	4837      	ldr	r0, [pc, #220]	; (8004980 <_ZN9Altimeter13read_altitudeEv+0x378>)
 80048a2:	f011 faa1 	bl	8015de8 <iprintf>
	    printf("LSB byte: %s \r\n", lsb_byte.c_str());
 80048a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f010 fcbc 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4619      	mov	r1, r3
 80048b4:	4833      	ldr	r0, [pc, #204]	; (8004984 <_ZN9Altimeter13read_altitudeEv+0x37c>)
 80048b6:	f011 fa97 	bl	8015de8 <iprintf>
	    printf("shifted LSB byte %s \r\n", shifted_lsb_byte_str.c_str());
 80048ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048be:	4618      	mov	r0, r3
 80048c0:	f010 fcb2 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4619      	mov	r1, r3
 80048c8:	482f      	ldr	r0, [pc, #188]	; (8004988 <_ZN9Altimeter13read_altitudeEv+0x380>)
 80048ca:	f011 fa8d 	bl	8015de8 <iprintf>
	    printf("\r\n");
 80048ce:	4828      	ldr	r0, [pc, #160]	; (8004970 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80048d0:	f011 fb10 	bl	8015ef4 <puts>
	    printf("raw_pressure_bits %s \r\n", pressure_raw_str.c_str());
 80048d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048d8:	4618      	mov	r0, r3
 80048da:	f010 fca5 	bl	8015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048de:	4603      	mov	r3, r0
 80048e0:	4619      	mov	r1, r3
 80048e2:	482a      	ldr	r0, [pc, #168]	; (800498c <_ZN9Altimeter13read_altitudeEv+0x384>)
 80048e4:	f011 fa80 	bl	8015de8 <iprintf>
	    printf("\r\n");
 80048e8:	4821      	ldr	r0, [pc, #132]	; (8004970 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80048ea:	f011 fb03 	bl	8015ef4 <puts>

	    return pressure_raw/ 64.0;
 80048ee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80048f2:	f7fb fe2f 	bl	8000554 <__aeabi_ui2d>
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <_ZN9Altimeter13read_altitudeEv+0x388>)
 80048fc:	f7fb ffce 	bl	800089c <__aeabi_ddiv>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f7fc f976 	bl	8000bf8 <__aeabi_d2f>
 800490c:	4604      	mov	r4, r0
	    std::string pressure_raw_str = std::bitset<32>(pressure_raw).to_string();
 800490e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004912:	4618      	mov	r0, r3
 8004914:	f010 fc34 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_lsb_byte_str = std::bitset<32>(shifted_lsb_byte).to_string();
 8004918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800491c:	4618      	mov	r0, r3
 800491e:	f010 fc2f 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_csb_byte_str = std::bitset<32>(shifted_csb_byte).to_string();
 8004922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004926:	4618      	mov	r0, r3
 8004928:	f010 fc2a 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_msb_byte_str = std::bitset<32>(shifted_msb_byte).to_string();
 800492c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004930:	4618      	mov	r0, r3
 8004932:	f010 fc25 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string lsb_byte = std::bitset<8>(rawBytes[2]).to_string();
 8004936:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800493a:	4618      	mov	r0, r3
 800493c:	f010 fc20 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string csb_byte = std::bitset<8>(rawBytes[1]).to_string();
 8004940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004944:	4618      	mov	r0, r3
 8004946:	f010 fc1b 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string msb_byte = std::bitset<8>(rawBytes[0]).to_string();
 800494a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800494e:	4618      	mov	r0, r3
 8004950:	f010 fc16 	bl	8015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    return pressure_raw/ 64.0;
 8004954:	ee07 4a90 	vmov	s15, r4

}
 8004958:	eeb0 0a67 	vmov.f32	s0, s15
 800495c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004960:	46bd      	mov	sp, r7
 8004962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004966:	bf00      	nop
 8004968:	08017fb8 	.word	0x08017fb8
 800496c:	08017fd8 	.word	0x08017fd8
 8004970:	08017ffc 	.word	0x08017ffc
 8004974:	08018000 	.word	0x08018000
 8004978:	08018010 	.word	0x08018010
 800497c:	08018028 	.word	0x08018028
 8004980:	08018038 	.word	0x08018038
 8004984:	08018050 	.word	0x08018050
 8004988:	08018060 	.word	0x08018060
 800498c:	08018078 	.word	0x08018078
 8004990:	40500000 	.word	0x40500000

08004994 <_ZNSt6bitsetILj8EEC1Ey>:
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
      { }

      /// Initial bits bitwise-copied from a single word (others set to zero).
#if __cplusplus >= 201103L
      constexpr bitset(unsigned long long __val) noexcept
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80049a0:	68fc      	ldr	r4, [r7, #12]
 80049a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a6:	f000 f83b 	bl	8004a20 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fcf3 	bl	800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}

080049be <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f839 	bl	8004a44 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZNSt6bitsetILj32EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 80049da:	b590      	push	{r4, r7, lr}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80049e6:	68fc      	ldr	r4, [r7, #12]
 80049e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ec:	f000 f83d 	bl	8004a6a <_ZNSt13_Sanitize_valILj32ELb1EE18_S_do_sanitize_valEy>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff fcd0 	bl	800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>:
      to_string() const
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	                 std::allocator<char> >();
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f83a 	bl	8004a8c <_ZNKSt6bitsetILj32EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8004a20:	b4b0      	push	{r4, r5, r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8004a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a2e:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8004a32:	2500      	movs	r5, #0
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bcb0      	pop	{r4, r5, r7}
 8004a42:	4770      	bx	lr

08004a44 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f010 fb8f 	bl	8015172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8004a54:	2331      	movs	r3, #49	; 0x31
 8004a56:	2230      	movs	r2, #48	; 0x30
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	f000 f829 	bl	8004ab2 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8004a60:	bf00      	nop
	}
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_ZNSt13_Sanitize_valILj32ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8004a6a:	b4b0      	push	{r4, r5, r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8004a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a78:	4614      	mov	r4, r2
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bcb0      	pop	{r4, r5, r7}
 8004a8a:	4770      	bx	lr

08004a8c <_ZNKSt6bitsetILj32EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f010 fb6b 	bl	8015172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8004a9c:	2331      	movs	r3, #49	; 0x31
 8004a9e:	2230      	movs	r2, #48	; 0x30
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f000 f839 	bl	8004b1a <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8004aa8:	bf00      	nop
	}
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	4611      	mov	r1, r2
 8004abe:	461a      	mov	r2, r3
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	71fb      	strb	r3, [r7, #7]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71bb      	strb	r3, [r7, #6]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	461a      	mov	r2, r3
 8004acc:	2108      	movs	r1, #8
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f010 fba0 	bl	8015214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f84c 	bl	8004b82 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f1c3 0308 	rsb	r3, r3, #8
 8004af6:	4619      	mov	r1, r3
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	f010 fb47 	bl	801518c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004afe:	4602      	mov	r2, r0
 8004b00:	1dbb      	adds	r3, r7, #6
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7ff fc39 	bl	800437c <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e7e2      	b.n	8004ad8 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      bitset<_Nb>::
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4611      	mov	r1, r2
 8004b26:	461a      	mov	r2, r3
 8004b28:	460b      	mov	r3, r1
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	71bb      	strb	r3, [r7, #6]
	__s.assign(_Nb, __zero);
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	461a      	mov	r2, r3
 8004b34:	2120      	movs	r1, #32
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	f010 fb6c 	bl	8015214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d019      	beq.n	8004b7a <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f831 	bl	8004bb4 <_ZNKSt6bitsetILj32EE15_Unchecked_testEj>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00c      	beq.n	8004b72 <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f1c3 0320 	rsb	r3, r3, #32
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f010 fb13 	bl	801518c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004b66:	4602      	mov	r2, r0
 8004b68:	1dbb      	adds	r3, r7, #6
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7ff fc05 	bl	800437c <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e7e2      	b.n	8004b40 <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fc2e 	bl	80043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 8004b96:	4604      	mov	r4, r0
 8004b98:	6838      	ldr	r0, [r7, #0]
 8004b9a:	f7ff fc1b 	bl	80043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <_ZNKSt6bitsetILj32EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fc15 	bl	80043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 8004bc8:	4604      	mov	r4, r0
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	f7ff fc02 	bl	80043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}
	...

08004be8 <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	d80e      	bhi.n	8004c18 <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bfe:	4808      	ldr	r0, [pc, #32]	; (8004c20 <_ZN10Components13Error_HandlerEv+0x38>)
 8004c00:	f004 ff44 	bl	8009a8c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8004c04:	20c8      	movs	r0, #200	; 0xc8
 8004c06:	f002 f841 	bl	8006c8c <HAL_Delay>
		printf("Components error handler !! \r\n");
 8004c0a:	4806      	ldr	r0, [pc, #24]	; (8004c24 <_ZN10Components13Error_HandlerEv+0x3c>)
 8004c0c:	f011 f972 	bl	8015ef4 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	3301      	adds	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e7ed      	b.n	8004bf4 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	48000800 	.word	0x48000800
 8004c24:	08018090 	.word	0x08018090

08004c28 <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb09 	bl	8005248 <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fb42 	bl	80052c0 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb7b 	bl	8005338 <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fbb0 	bl	80053a8 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fbe9 	bl	8005420 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f86a 	bl	8004d28 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fc19 	bl	800548c <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fc7e 	bl	800555c <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fccf 	bl	8005604 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fd1e 	bl	80056a8 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fd6d 	bl	800574c <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fdae 	bl	80057d4 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f95f 	bl	8004f3c <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fdec 	bl	800585c <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fe2d 	bl	80058e4 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa1a 	bl	80050c4 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fe6b 	bl	800596c <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f005 fef8 	bl	800aa90 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f005 fef3 	bl	800aa90 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f005 feee 	bl	800aa90 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f005 fee9 	bl	800aa90 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f005 fee4 	bl	800aa90 <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 ff10 	bl	800aaf2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f005 ff0b 	bl	800aaf2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f005 ff06 	bl	800aaf2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4618      	mov	r0, r3
 8004cec:	f005 ff01 	bl	800aaf2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f005 fefc 	bl	800aaf2 <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	217f      	movs	r1, #127	; 0x7f
 8004d00:	4618      	mov	r0, r3
 8004d02:	f003 fac9 	bl	8008298 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	217f      	movs	r1, #127	; 0x7f
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f003 fac3 	bl	8008298 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	217f      	movs	r1, #127	; 0x7f
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f003 fabd 	bl	8008298 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08e      	sub	sp, #56	; 0x38
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 8004d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	2220      	movs	r2, #32
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f010 fafd 	bl	8015344 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004d52:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d5c:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	2208      	movs	r2, #8
 8004d84:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	2200      	movs	r2, #0
 8004d94:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	2200      	movs	r2, #0
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	221c      	movs	r2, #28
 8004dda:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de4:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	2200      	movs	r2, #0
 8004dec:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	2201      	movs	r2, #1
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 f9b0 	bl	8007160 <HAL_ADC_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fee9 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 8004e16:	4842      	ldr	r0, [pc, #264]	; (8004f20 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 8004e18:	f010 ffe6 	bl	8015de8 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 fa96 	bl	800835c <HAL_ADCEx_MultiModeConfigChannel>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fed1 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8004e46:	4837      	ldr	r0, [pc, #220]	; (8004f24 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 8004e48:	f010 ffce 	bl	8015de8 <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <_ZN10Components10init_ADC_1Ev+0x200>)
 8004e4e:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e50:	2306      	movs	r3, #6
 8004e52:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004e54:	2304      	movs	r3, #4
 8004e56:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e58:	237f      	movs	r3, #127	; 0x7f
 8004e5a:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	f107 020c 	add.w	r2, r7, #12
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f002 fc2a 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff feaf 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 8004e8a:	4828      	ldr	r0, [pc, #160]	; (8004f2c <_ZN10Components10init_ADC_1Ev+0x204>)
 8004e8c:	f010 ffac 	bl	8015de8 <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <_ZN10Components10init_ADC_1Ev+0x208>)
 8004e92:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e94:	2312      	movs	r3, #18
 8004e96:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004e98:	2304      	movs	r3, #4
 8004e9a:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e9c:	237f      	movs	r3, #127	; 0x7f
 8004e9e:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f107 020c 	add.w	r2, r7, #12
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f002 fc08 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fe8d 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004ece:	4819      	ldr	r0, [pc, #100]	; (8004f34 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004ed0:	f010 ff8a 	bl	8015de8 <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <_ZN10Components10init_ADC_1Ev+0x210>)
 8004ed6:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004ed8:	2318      	movs	r3, #24
 8004eda:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004edc:	2304      	movs	r3, #4
 8004ede:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ee0:	237f      	movs	r3, #127	; 0x7f
 8004ee2:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	f107 020c 	add.w	r2, r7, #12
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 fbe6 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fe6b 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004f12:	4808      	ldr	r0, [pc, #32]	; (8004f34 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004f14:	f010 ff68 	bl	8015de8 <iprintf>
		  }


}
 8004f18:	bf00      	nop
 8004f1a:	3738      	adds	r7, #56	; 0x38
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	080180b0 	.word	0x080180b0
 8004f24:	080180c4 	.word	0x080180c4
 8004f28:	2e300800 	.word	0x2e300800
 8004f2c:	080180f4 	.word	0x080180f4
 8004f30:	3ac04000 	.word	0x3ac04000
 8004f34:	08018118 	.word	0x08018118
 8004f38:	32601000 	.word	0x32601000

08004f3c <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	2220      	movs	r2, #32
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f010 f9f9 	bl	8015344 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	4a55      	ldr	r2, [pc, #340]	; (80050ac <_ZN10Components10init_ADC_2Ev+0x170>)
 8004f58:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f62:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	2200      	movs	r2, #0
 8004f72:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	2201      	movs	r2, #1
 8004f82:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	2208      	movs	r2, #8
 8004f8a:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	2200      	movs	r2, #0
 8004f9a:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	2218      	movs	r2, #24
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	22e0      	movs	r2, #224	; 0xe0
 8004fe8:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	2200      	movs	r2, #0
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 f8ae 	bl	8007160 <HAL_ADC_Init>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fde7 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 800501a:	4825      	ldr	r0, [pc, #148]	; (80050b0 <_ZN10Components10init_ADC_2Ev+0x174>)
 800501c:	f010 ff6a 	bl	8015ef4 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <_ZN10Components10init_ADC_2Ev+0x178>)
 8005022:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005024:	2306      	movs	r3, #6
 8005026:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800502c:	237f      	movs	r3, #127	; 0x7f
 800502e:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005030:	2304      	movs	r3, #4
 8005032:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	f107 0208 	add.w	r2, r7, #8
 8005040:	4611      	mov	r1, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f002 fb40 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fdc5 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 800505e:	4816      	ldr	r0, [pc, #88]	; (80050b8 <_ZN10Components10init_ADC_2Ev+0x17c>)
 8005060:	f010 ff48 	bl	8015ef4 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <_ZN10Components10init_ADC_2Ev+0x180>)
 8005066:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005068:	230c      	movs	r3, #12
 800506a:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800506c:	2304      	movs	r3, #4
 800506e:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005070:	237f      	movs	r3, #127	; 0x7f
 8005072:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005074:	2304      	movs	r3, #4
 8005076:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	f107 0208 	add.w	r2, r7, #8
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f002 fb20 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fda5 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 800509e:	4808      	ldr	r0, [pc, #32]	; (80050c0 <_ZN10Components10init_ADC_2Ev+0x184>)
 80050a0:	f010 ff28 	bl	8015ef4 <puts>

	  }


}
 80050a4:	bf00      	nop
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	50000100 	.word	0x50000100
 80050b0:	08018144 	.word	0x08018144
 80050b4:	c3290000 	.word	0xc3290000
 80050b8:	08018160 	.word	0x08018160
 80050bc:	cb8c0000 	.word	0xcb8c0000
 80050c0:	08018188 	.word	0x08018188

080050c4 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 80050cc:	f107 0308 	add.w	r3, r7, #8
 80050d0:	2220      	movs	r2, #32
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f010 f935 	bl	8015344 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	4a55      	ldr	r2, [pc, #340]	; (8005234 <_ZN10Components10init_ADC_5Ev+0x170>)
 80050e0:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050ea:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2200      	movs	r2, #0
 80050fa:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	2200      	movs	r2, #0
 8005102:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	2201      	movs	r2, #1
 800510a:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	2208      	movs	r2, #8
 8005112:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2200      	movs	r2, #0
 8005122:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	2202      	movs	r2, #2
 800512a:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2200      	movs	r2, #0
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	2200      	movs	r2, #0
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2218      	movs	r2, #24
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	22e0      	movs	r2, #224	; 0xe0
 8005170:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2200      	movs	r2, #0
 8005178:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2201      	movs	r2, #1
 8005180:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4618      	mov	r0, r3
 8005188:	f001 ffea 	bl	8007160 <HAL_ADC_Init>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fd23 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 80051a2:	4825      	ldr	r0, [pc, #148]	; (8005238 <_ZN10Components10init_ADC_5Ev+0x174>)
 80051a4:	f010 fe20 	bl	8015de8 <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <_ZN10Components10init_ADC_5Ev+0x178>)
 80051aa:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80051ac:	2306      	movs	r3, #6
 80051ae:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80051b4:	237f      	movs	r3, #127	; 0x7f
 80051b6:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80051b8:	2304      	movs	r3, #4
 80051ba:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f107 0208 	add.w	r2, r7, #8
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 fa7c 	bl	80076c8 <HAL_ADC_ConfigChannel>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fd01 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80051e6:	4816      	ldr	r0, [pc, #88]	; (8005240 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80051e8:	f010 fdfe 	bl	8015de8 <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <_ZN10Components10init_ADC_5Ev+0x180>)
 80051ee:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80051f0:	230c      	movs	r3, #12
 80051f2:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80051f4:	2304      	movs	r3, #4
 80051f6:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80051f8:	237f      	movs	r3, #127	; 0x7f
 80051fa:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80051fc:	2304      	movs	r3, #4
 80051fe:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	f107 0208 	add.w	r2, r7, #8
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fa5c 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fce1 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <_ZN10Components10init_ADC_5Ev+0x17c>)
 8005228:	f010 fdde 	bl	8015de8 <iprintf>
	  }




}
 800522c:	bf00      	nop
 800522e:	3728      	adds	r7, #40	; 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	50000600 	.word	0x50000600
 8005238:	080181b0 	.word	0x080181b0
 800523c:	94f00020 	.word	0x94f00020
 8005240:	080181c8 	.word	0x080181c8
 8005244:	8c900008 	.word	0x8c900008

08005248 <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <_ZN10Components11init_COMP_1Ev+0x70>)
 8005256:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2250      	movs	r2, #80	; 0x50
 8005266:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2200      	movs	r2, #0
 800526e:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2200      	movs	r2, #0
 8005286:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f003 fabd 	bl	800880c <HAL_COMP_Init>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fca0 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 80052a8:	4804      	ldr	r0, [pc, #16]	; (80052bc <_ZN10Components11init_COMP_1Ev+0x74>)
 80052aa:	f010 fd9d 	bl	8015de8 <iprintf>

	  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40010200 	.word	0x40010200
 80052bc:	080181ec 	.word	0x080181ec

080052c0 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <_ZN10Components11init_COMP_2Ev+0x70>)
 80052ce:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2250      	movs	r2, #80	; 0x50
 80052de:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f003 fa81 	bl	800880c <HAL_COMP_Init>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fc64 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 8005320:	4804      	ldr	r0, [pc, #16]	; (8005334 <_ZN10Components11init_COMP_2Ev+0x74>)
 8005322:	f010 fd61 	bl	8015de8 <iprintf>
	    }




}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40010204 	.word	0x40010204
 8005334:	08018204 	.word	0x08018204

08005338 <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <_ZN10Components11init_COMP_4Ev+0x68>)
 8005346:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f003 fa49 	bl	800880c <HAL_COMP_Init>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fc2c 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8005390:	4804      	ldr	r0, [pc, #16]	; (80053a4 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8005392:	f010 fd29 	bl	8015de8 <iprintf>
    }
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	4001020c 	.word	0x4001020c
 80053a4:	0801821c 	.word	0x0801821c

080053a8 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <_ZN10Components11init_COMP_5Ev+0x70>)
 80053b6:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2240      	movs	r2, #64	; 0x40
 80053c6:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f003 fa0d 	bl	800880c <HAL_COMP_Init>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff fbf0 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 8005408:	4804      	ldr	r0, [pc, #16]	; (800541c <_ZN10Components11init_COMP_5Ev+0x74>)
 800540a:	f010 fced 	bl	8015de8 <iprintf>

	  }

}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40010210 	.word	0x40010210
 800541c:	08018234 	.word	0x08018234

08005420 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	4a16      	ldr	r2, [pc, #88]	; (8005488 <_ZN10Components11init_COMP_7Ev+0x68>)
 800542e:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2250      	movs	r2, #80	; 0x50
 800543e:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2200      	movs	r2, #0
 8005446:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2200      	movs	r2, #0
 800544e:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2200      	movs	r2, #0
 8005456:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2200      	movs	r2, #0
 800545e:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	4618      	mov	r0, r3
 8005466:	f003 f9d1 	bl	800880c <HAL_COMP_Init>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff fbb4 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	   }



}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40010218 	.word	0x40010218

0800548c <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 800548c:	b580      	push	{r7, lr}
 800548e:	b08e      	sub	sp, #56	; 0x38
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	2230      	movs	r2, #48	; 0x30
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f00f ff51 	bl	8015344 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <_ZN10Components10init_DAC_1Ev+0xc8>)
 80054a8:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f003 fc55 	bl	8008d5e <HAL_DAC_Init>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fb8f 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80054ca:	4823      	ldr	r0, [pc, #140]	; (8005558 <_ZN10Components10init_DAC_1Ev+0xcc>)
 80054cc:	f010 fc8c 	bl	8015de8 <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80054d0:	2302      	movs	r3, #2
 80054d2:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80054e8:	2302      	movs	r3, #2
 80054ea:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80054ec:	2302      	movs	r3, #2
 80054ee:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f107 0108 	add.w	r1, r7, #8
 80054fc:	2200      	movs	r2, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f003 fc50 	bl	8008da4 <HAL_DAC_ConfigChannel>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fb67 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800551a:	480f      	ldr	r0, [pc, #60]	; (8005558 <_ZN10Components10init_DAC_1Ev+0xcc>)
 800551c:	f010 fc64 	bl	8015de8 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f107 0108 	add.w	r1, r7, #8
 8005528:	2210      	movs	r2, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fc3a 	bl	8008da4 <HAL_DAC_ConfigChannel>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fb51 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8005546:	4804      	ldr	r0, [pc, #16]	; (8005558 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8005548:	f010 fc4e 	bl	8015de8 <iprintf>

    }

}
 800554c:	bf00      	nop
 800554e:	3738      	adds	r7, #56	; 0x38
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	50000800 	.word	0x50000800
 8005558:	0801824c 	.word	0x0801824c

0800555c <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	2230      	movs	r2, #48	; 0x30
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f00f fee9 	bl	8015344 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	4a20      	ldr	r2, [pc, #128]	; (80055f8 <_ZN10Components10init_DAC_2Ev+0x9c>)
 8005578:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	4618      	mov	r0, r3
 8005580:	f003 fbed 	bl	8008d5e <HAL_DAC_Init>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	bf14      	ite	ne
 800558a:	2301      	movne	r3, #1
 800558c:	2300      	moveq	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff fb27 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800559a:	4818      	ldr	r0, [pc, #96]	; (80055fc <_ZN10Components10init_DAC_2Ev+0xa0>)
 800559c:	f010 fc24 	bl	8015de8 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80055a0:	2302      	movs	r3, #2
 80055a2:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80055b8:	2302      	movs	r3, #2
 80055ba:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80055bc:	2302      	movs	r3, #2
 80055be:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80055c4:	f107 0308 	add.w	r3, r7, #8
 80055c8:	2200      	movs	r2, #0
 80055ca:	4619      	mov	r1, r3
 80055cc:	480c      	ldr	r0, [pc, #48]	; (8005600 <_ZN10Components10init_DAC_2Ev+0xa4>)
 80055ce:	f003 fbe9 	bl	8008da4 <HAL_DAC_ConfigChannel>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fb00 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <_ZN10Components10init_DAC_2Ev+0xa0>)
 80055ea:	f010 fbfd 	bl	8015de8 <iprintf>

	  }


}
 80055ee:	bf00      	nop
 80055f0:	3738      	adds	r7, #56	; 0x38
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	50000c00 	.word	0x50000c00
 80055fc:	08018264 	.word	0x08018264
 8005600:	200004a4 	.word	0x200004a4

08005604 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8005604:	b580      	push	{r7, lr}
 8005606:	b08e      	sub	sp, #56	; 0x38
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 800560c:	f107 0308 	add.w	r3, r7, #8
 8005610:	2230      	movs	r2, #48	; 0x30
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f00f fe95 	bl	8015344 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <_ZN10Components10init_DAC_3Ev+0x9c>)
 8005620:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4618      	mov	r0, r3
 8005628:	f003 fb99 	bl	8008d5e <HAL_DAC_Init>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fad3 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8005642:	4818      	ldr	r0, [pc, #96]	; (80056a4 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8005644:	f010 fbd0 	bl	8015de8 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8005648:	2302      	movs	r3, #2
 800564a:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800564c:	2300      	movs	r3, #0
 800564e:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005660:	2302      	movs	r3, #2
 8005662:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8005664:	2302      	movs	r3, #2
 8005666:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	2210      	movs	r2, #16
 8005676:	4618      	mov	r0, r3
 8005678:	f003 fb94 	bl	8008da4 <HAL_DAC_ConfigChannel>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff faab 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8005692:	4804      	ldr	r0, [pc, #16]	; (80056a4 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8005694:	f010 fba8 	bl	8015de8 <iprintf>

	  }



}
 8005698:	bf00      	nop
 800569a:	3738      	adds	r7, #56	; 0x38
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	50001000 	.word	0x50001000
 80056a4:	0801827c 	.word	0x0801827c

080056a8 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	2230      	movs	r2, #48	; 0x30
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f00f fe43 	bl	8015344 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4a20      	ldr	r2, [pc, #128]	; (8005744 <_ZN10Components10init_DAC_4Ev+0x9c>)
 80056c4:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f003 fb47 	bl	8008d5e <HAL_DAC_Init>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fa81 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 80056e6:	4818      	ldr	r0, [pc, #96]	; (8005748 <_ZN10Components10init_DAC_4Ev+0xa0>)
 80056e8:	f010 fb7e 	bl	8015de8 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80056ec:	2302      	movs	r3, #2
 80056ee:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005704:	2302      	movs	r3, #2
 8005706:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8005708:	2302      	movs	r3, #2
 800570a:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f107 0108 	add.w	r1, r7, #8
 8005718:	2200      	movs	r2, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f003 fb42 	bl	8008da4 <HAL_DAC_ConfigChannel>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fa59 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8005736:	4804      	ldr	r0, [pc, #16]	; (8005748 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8005738:	f010 fb56 	bl	8015de8 <iprintf>

	  }


}
 800573c:	bf00      	nop
 800573e:	3738      	adds	r7, #56	; 0x38
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	50001400 	.word	0x50001400
 8005748:	08018294 	.word	0x08018294

0800574c <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <_ZN10Components9init_OA_1Ev+0x80>)
 800575a:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2240      	movs	r2, #64	; 0x40
 800576a:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2200      	movs	r2, #0
 8005772:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2201      	movs	r2, #1
 800577a:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2200      	movs	r2, #0
 8005782:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2200      	movs	r2, #0
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2200      	movs	r2, #0
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2200      	movs	r2, #0
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f005 f8a5 	bl	800a8f0 <HAL_OPAMP_Init>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fa16 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 80057bc:	4804      	ldr	r0, [pc, #16]	; (80057d0 <_ZN10Components9init_OA_1Ev+0x84>)
 80057be:	f010 fb13 	bl	8015de8 <iprintf>
	  }


}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40010300 	.word	0x40010300
 80057d0:	080182ac 	.word	0x080182ac

080057d4 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <_ZN10Components9init_OA_2Ev+0x80>)
 80057e2:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	2240      	movs	r2, #64	; 0x40
 80057f2:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	2200      	movs	r2, #0
 80057fa:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	2201      	movs	r2, #1
 8005802:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	2200      	movs	r2, #0
 8005812:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800581c:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	2200      	movs	r2, #0
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	4618      	mov	r0, r3
 800582c:	f005 f860 	bl	800a8f0 <HAL_OPAMP_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff f9d1 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 8005846:	4804      	ldr	r0, [pc, #16]	; (8005858 <_ZN10Components9init_OA_2Ev+0x84>)
 8005848:	f010 face 	bl	8015de8 <iprintf>

	    }


}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40010304 	.word	0x40010304
 8005858:	080182c4 	.word	0x080182c4

0800585c <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <_ZN10Components9init_OA_3Ev+0x80>)
 800586a:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	2200      	movs	r2, #0
 8005882:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	2201      	movs	r2, #1
 800588a:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2200      	movs	r2, #0
 8005892:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	2200      	movs	r2, #0
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	2200      	movs	r2, #0
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	2200      	movs	r2, #0
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4618      	mov	r0, r3
 80058b2:	f005 f81d 	bl	800a8f0 <HAL_OPAMP_Init>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff f98e 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 80058cc:	4804      	ldr	r0, [pc, #16]	; (80058e0 <_ZN10Components9init_OA_3Ev+0x84>)
 80058ce:	f010 fa8b 	bl	8015de8 <iprintf>

	   }

}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40010308 	.word	0x40010308
 80058e0:	080182dc 	.word	0x080182dc

080058e4 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <_ZN10Components9init_OA_4Ev+0x80>)
 80058f2:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2240      	movs	r2, #64	; 0x40
 8005902:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	2200      	movs	r2, #0
 800590a:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	2201      	movs	r2, #1
 8005912:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	2200      	movs	r2, #0
 800591a:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	2200      	movs	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800592c:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	2200      	movs	r2, #0
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	4618      	mov	r0, r3
 800593c:	f004 ffd8 	bl	800a8f0 <HAL_OPAMP_Init>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff f949 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 8005956:	4804      	ldr	r0, [pc, #16]	; (8005968 <_ZN10Components9init_OA_4Ev+0x84>)
 8005958:	f010 fa46 	bl	8015de8 <iprintf>

	  }
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	4001030c 	.word	0x4001030c
 8005968:	080182f4 	.word	0x080182f4

0800596c <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <_ZN10Components9init_OA_5Ev+0x80>)
 800597a:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	2240      	movs	r2, #64	; 0x40
 800598a:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	2201      	movs	r2, #1
 800599a:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	2200      	movs	r2, #0
 80059a2:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	2200      	movs	r2, #0
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	2200      	movs	r2, #0
 80059bc:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 ff94 	bl	800a8f0 <HAL_OPAMP_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff f905 	bl	8004be8 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 80059de:	4804      	ldr	r0, [pc, #16]	; (80059f0 <_ZN10Components9init_OA_5Ev+0x84>)
 80059e0:	f010 fa02 	bl	8015de8 <iprintf>

	  }

}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40010310 	.word	0x40010310
 80059f0:	0801830c 	.word	0x0801830c

080059f4 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000678 	.word	0x20000678

08005a28 <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

	return &hadc5;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	200006e4 	.word	0x200006e4

08005a44 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor, Altimeter* altimeter){
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	609a      	str	r2, [r3, #8]
	this->_altimeter = altimeter;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	60da      	str	r2, [r3, #12]

}
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <main>:
//UART HANDLES IN MAIN FOR NOW, DMA HANDLES are created in stm32g4xx_hal_msp.c file
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


int main(void){
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	f2ad 7dec 	subw	sp, sp, #2028	; 0x7ec
 8005a7e:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8005a80:	f001 f893 	bl	8006baa <HAL_Init>
	//Initialize clock/DMA/... configurations and components.
	HAL_Delay(100);
 8005a84:	2064      	movs	r0, #100	; 0x64
 8005a86:	f001 f901 	bl	8006c8c <HAL_Delay>
	Initializer init(&huart1, &huart2);
 8005a8a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005a8e:	4a42      	ldr	r2, [pc, #264]	; (8005b98 <main+0x120>)
 8005a90:	4942      	ldr	r1, [pc, #264]	; (8005b9c <main+0x124>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fb fda4 	bl	80015e0 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8005a98:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fb fdbb 	bl	8001618 <_ZN11Initializer12init_ConfigsEv>

	Components components;
 8005aa2:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8005aa6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005aaa:	4a3d      	ldr	r2, [pc, #244]	; (8005ba0 <main+0x128>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	4611      	mov	r1, r2
 8005ab0:	2344      	movs	r3, #68	; 0x44
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f00f fc1e 	bl	80152f4 <memcpy>
	components.init_Components();
 8005ab8:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff f8b3 	bl	8004c28 <_ZN10Components15init_ComponentsEv>

	HAL_Delay(100);
 8005ac2:	2064      	movs	r0, #100	; 0x64
 8005ac4:	f001 f8e2 	bl	8006c8c <HAL_Delay>
	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8005ac8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8005acc:	4932      	ldr	r1, [pc, #200]	; (8005b98 <main+0x120>)
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd ffce 	bl	8003a70 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1, init.get_i2c());
 8005ad4:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc fe69 	bl	80027b0 <_ZN11Initializer7get_i2cEv>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ae4:	492d      	ldr	r1, [pc, #180]	; (8005b9c <main+0x124>)
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fd fdec 	bl	80036c4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 8005aec:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005af0:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8005af4:	f207 5184 	addw	r1, r7, #1412	; 0x584
 8005af8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005afc:	f7fb fa4e 	bl	8000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Altimeter altimeter(&hi2c2);
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	4927      	ldr	r1, [pc, #156]	; (8005ba4 <main+0x12c>)
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe fc80 	bl	800440c <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>
	Debugger debugger(&sbus, &mavlink, &convertor, &altimeter);
 8005b0c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005b10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b14:	f207 5184 	addw	r1, r7, #1412	; 0x584
 8005b18:	1d38      	adds	r0, r7, #4
 8005b1a:	f107 0314 	add.w	r3, r7, #20
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4623      	mov	r3, r4
 8005b22:	f7ff ff8f 	bl	8005a44 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>


	HAL_Delay(5000);
 8005b26:	f241 3088 	movw	r0, #5000	; 0x1388
 8005b2a:	f001 f8af 	bl	8006c8c <HAL_Delay>

	printf(" sanity check \r \n");
 8005b2e:	481e      	ldr	r0, [pc, #120]	; (8005ba8 <main+0x130>)
 8005b30:	f010 f9e0 	bl	8015ef4 <puts>


    altimeter.init_altimeter();
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fc7d 	bl	8004438 <_ZN9Altimeter14init_altimeterEv>
    uint32_t last_altimeter_tick = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

	/* Main loop */
	while (1){


		sbus.update();
 8005b44:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd ffaf 	bl	8003aac <_ZN4SBUS6updateEv>
		convertor.process();
 8005b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fb fd27 	bl	80015a6 <_ZN9Convertor7processEv>
		mavlink.update_TX();
 8005b58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fd fe39 	bl	80037d4 <_ZN14MavlinkControl9update_TXEv>
		mavlink.update_RX();
 8005b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fd fe22 	bl	80037b0 <_ZN14MavlinkControl9update_RXEv>
		printf("testing %f \r\n", altimeter.read_altitude());
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fd49 	bl	8004608 <_ZN9Altimeter13read_altitudeEv>
 8005b76:	ee10 3a10 	vmov	r3, s0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fd0c 	bl	8000598 <__aeabi_f2d>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4809      	ldr	r0, [pc, #36]	; (8005bac <main+0x134>)
 8005b86:	f010 f92f 	bl	8015de8 <iprintf>
		//debugger.displayDebugInfo();
		//debugger.displayMavlink_header();
		//debugger.displaySBUS_channels();
		//debugger.displayMavlink_RAW();

		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 8005b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b8e:	4808      	ldr	r0, [pc, #32]	; (8005bb0 <main+0x138>)
 8005b90:	f003 ff7c 	bl	8009a8c <HAL_GPIO_TogglePin>
		sbus.update();
 8005b94:	e7d6      	b.n	8005b44 <main+0xcc>
 8005b96:	bf00      	nop
 8005b98:	2000082c 	.word	0x2000082c
 8005b9c:	2000079c 	.word	0x2000079c
 8005ba0:	08018348 	.word	0x08018348
 8005ba4:	20000750 	.word	0x20000750
 8005ba8:	08018324 	.word	0x08018324
 8005bac:	08018338 	.word	0x08018338
 8005bb0:	48000800 	.word	0x48000800

08005bb4 <Error_Handler>:
}




void Error_Handler(void){
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005bba:	2300      	movs	r3, #0
 8005bbc:	71fb      	strb	r3, [r7, #7]
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b1d      	cmp	r3, #29
 8005bc2:	d80e      	bhi.n	8005be2 <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8005bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bc8:	4808      	ldr	r0, [pc, #32]	; (8005bec <Error_Handler+0x38>)
 8005bca:	f003 ff5f 	bl	8009a8c <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8005bce:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <Error_Handler+0x3c>)
 8005bd0:	f010 f990 	bl	8015ef4 <puts>
		HAL_Delay(100);
 8005bd4:	2064      	movs	r0, #100	; 0x64
 8005bd6:	f001 f859 	bl	8006c8c <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	e7ed      	b.n	8005bbe <Error_Handler+0xa>
	}

}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	48000800 	.word	0x48000800
 8005bf0:	0801838c 	.word	0x0801838c

08005bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <HAL_MspInit+0x44>)
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfe:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <HAL_MspInit+0x44>)
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	6613      	str	r3, [r2, #96]	; 0x60
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_MspInit+0x44>)
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_MspInit+0x44>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <HAL_MspInit+0x44>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <HAL_MspInit+0x44>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000

08005c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b0a2      	sub	sp, #136	; 0x88
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c54:	f107 0320 	add.w	r3, r7, #32
 8005c58:	2254      	movs	r2, #84	; 0x54
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f00f fb71 	bl	8015344 <memset>
  if(hadc->Instance==ADC1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c6a:	f040 8087 	bne.w	8005d7c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005c74:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005c78:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c7a:	f107 0320 	add.w	r3, r7, #32
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 fb68 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005c8a:	f7ff ff93 	bl	8005bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005c8e:	4b8f      	ldr	r3, [pc, #572]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a8d      	ldr	r2, [pc, #564]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005c96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005c98:	4b8c      	ldr	r3, [pc, #560]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005ca0:	4b8b      	ldr	r3, [pc, #556]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	4a8a      	ldr	r2, [pc, #552]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cac:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb8:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbc:	4a84      	ldr	r2, [pc, #528]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cc4:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd0:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd4:	4a7e      	ldr	r2, [pc, #504]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cd6:	f043 0302 	orr.w	r3, r3, #2
 8005cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cdc:	4b7c      	ldr	r3, [pc, #496]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cec:	2303      	movs	r3, #3
 8005cee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8005cf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cfe:	f003 fd2b 	bl	8009758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8005d02:	f641 0302 	movw	r3, #6146	; 0x1802
 8005d06:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d14:	4619      	mov	r1, r3
 8005d16:	486f      	ldr	r0, [pc, #444]	; (8005ed4 <HAL_ADC_MspInit+0x298>)
 8005d18:	f003 fd1e 	bl	8009758 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8005d1c:	4b6e      	ldr	r3, [pc, #440]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d1e:	4a6f      	ldr	r2, [pc, #444]	; (8005edc <HAL_ADC_MspInit+0x2a0>)
 8005d20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005d22:	4b6d      	ldr	r3, [pc, #436]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d24:	2205      	movs	r2, #5
 8005d26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d28:	4b6b      	ldr	r3, [pc, #428]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d2e:	4b6a      	ldr	r3, [pc, #424]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d34:	4b68      	ldr	r3, [pc, #416]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d3a:	4b67      	ldr	r3, [pc, #412]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d42:	4b65      	ldr	r3, [pc, #404]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005d4a:	4b63      	ldr	r3, [pc, #396]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d50:	4b61      	ldr	r3, [pc, #388]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d58:	485f      	ldr	r0, [pc, #380]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d5a:	f003 f9cb 	bl	80090f4 <HAL_DMA_Init>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8005d64:	f7ff ff26 	bl	8005bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a5b      	ldr	r2, [pc, #364]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
 8005d6e:	4a5a      	ldr	r2, [pc, #360]	; (8005ed8 <HAL_ADC_MspInit+0x29c>)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8005d74:	485a      	ldr	r0, [pc, #360]	; (8005ee0 <HAL_ADC_MspInit+0x2a4>)
 8005d76:	f010 f8bd 	bl	8015ef4 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8005d7a:	e0a3      	b.n	8005ec4 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a58      	ldr	r2, [pc, #352]	; (8005ee4 <HAL_ADC_MspInit+0x2a8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d151      	bne.n	8005e2a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005d8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005d90:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d92:	f107 0320 	add.w	r3, r7, #32
 8005d96:	4618      	mov	r0, r3
 8005d98:	f007 fadc 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 8005da2:	f7ff ff07 	bl	8005bb4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005da6:	4b49      	ldr	r3, [pc, #292]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a47      	ldr	r2, [pc, #284]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005dae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005db0:	4b46      	ldr	r3, [pc, #280]	; (8005ecc <HAL_ADC_MspInit+0x290>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d10b      	bne.n	8005dd0 <HAL_ADC_MspInit+0x194>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005db8:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbc:	4a44      	ldr	r2, [pc, #272]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005dbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8005dd0:	4b45      	ldr	r3, [pc, #276]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005dd2:	4a46      	ldr	r2, [pc, #280]	; (8005eec <HAL_ADC_MspInit+0x2b0>)
 8005dd4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005dd6:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005dd8:	2224      	movs	r2, #36	; 0x24
 8005dda:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005de2:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005de8:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005df6:	4b3c      	ldr	r3, [pc, #240]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dfc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005dfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e04:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e0c:	4836      	ldr	r0, [pc, #216]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005e0e:	f003 f971 	bl	80090f4 <HAL_DMA_Init>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8005e18:	f7ff fecc 	bl	8005bb4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
 8005e22:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <HAL_ADC_MspInit+0x2ac>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005e28:	e04c      	b.n	8005ec4 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC5)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a30      	ldr	r2, [pc, #192]	; (8005ef0 <HAL_ADC_MspInit+0x2b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d147      	bne.n	8005ec4 <HAL_ADC_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8005e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e3e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e40:	f107 0320 	add.w	r3, r7, #32
 8005e44:	4618      	mov	r0, r3
 8005e46:	f007 fa85 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8005e50:	f7ff feb0 	bl	8005bb4 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8005e54:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_ADC_MspInit+0x294>)
 8005e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e6e:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <HAL_ADC_MspInit+0x2bc>)
 8005e70:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e74:	2227      	movs	r2, #39	; 0x27
 8005e76:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e90:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e98:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ea0:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005ea2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ea6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8005ea8:	4812      	ldr	r0, [pc, #72]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005eaa:	f003 f923 	bl	80090f4 <HAL_DMA_Init>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8005eb4:	f7ff fe7e 	bl	8005bb4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <HAL_ADC_MspInit+0x2b8>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005ec4:	bf00      	nop
 8005ec6:	3788      	adds	r7, #136	; 0x88
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000a9c 	.word	0x20000a9c
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	48000400 	.word	0x48000400
 8005ed8:	200008bc 	.word	0x200008bc
 8005edc:	4002001c 	.word	0x4002001c
 8005ee0:	080183b0 	.word	0x080183b0
 8005ee4:	50000100 	.word	0x50000100
 8005ee8:	2000091c 	.word	0x2000091c
 8005eec:	40020030 	.word	0x40020030
 8005ef0:	50000600 	.word	0x50000600
 8005ef4:	2000097c 	.word	0x2000097c
 8005ef8:	40020044 	.word	0x40020044

08005efc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	; 0x30
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f04:	f107 031c 	add.w	r3, r7, #28
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_COMP_MspInit+0x114>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d119      	bne.n	8005f52 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f2a:	4b3a      	ldr	r3, [pc, #232]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f42:	f107 031c 	add.w	r3, r7, #28
 8005f46:	4619      	mov	r1, r3
 8005f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f4c:	f003 fc04 	bl	8009758 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8005f50:	e05a      	b.n	8006008 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a30      	ldr	r2, [pc, #192]	; (8006018 <HAL_COMP_MspInit+0x11c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d118      	bne.n	8005f8e <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f68:	4b2a      	ldr	r3, [pc, #168]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8005f74:	2301      	movs	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8005f80:	f107 031c 	add.w	r3, r7, #28
 8005f84:	4619      	mov	r1, r3
 8005f86:	4825      	ldr	r0, [pc, #148]	; (800601c <HAL_COMP_MspInit+0x120>)
 8005f88:	f003 fbe6 	bl	8009758 <HAL_GPIO_Init>
}
 8005f8c:	e03c      	b.n	8006008 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a23      	ldr	r2, [pc, #140]	; (8006020 <HAL_COMP_MspInit+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d119      	bne.n	8005fcc <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005f9e:	f043 0302 	orr.w	r3, r3, #2
 8005fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8005fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8005fbe:	f107 031c 	add.w	r3, r7, #28
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4815      	ldr	r0, [pc, #84]	; (800601c <HAL_COMP_MspInit+0x120>)
 8005fc6:	f003 fbc7 	bl	8009758 <HAL_GPIO_Init>
}
 8005fca:	e01d      	b.n	8006008 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <HAL_COMP_MspInit+0x128>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d118      	bne.n	8006008 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <HAL_COMP_MspInit+0x118>)
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8005fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8005ffc:	f107 031c 	add.w	r3, r7, #28
 8006000:	4619      	mov	r1, r3
 8006002:	4806      	ldr	r0, [pc, #24]	; (800601c <HAL_COMP_MspInit+0x120>)
 8006004:	f003 fba8 	bl	8009758 <HAL_GPIO_Init>
}
 8006008:	bf00      	nop
 800600a:	3730      	adds	r7, #48	; 0x30
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40010204 	.word	0x40010204
 8006014:	40021000 	.word	0x40021000
 8006018:	4001020c 	.word	0x4001020c
 800601c:	48000400 	.word	0x48000400
 8006020:	40010210 	.word	0x40010210
 8006024:	40010218 	.word	0x40010218

08006028 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a25      	ldr	r2, [pc, #148]	; (80060cc <HAL_DAC_MspInit+0xa4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10c      	bne.n	8006054 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800603a:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 800603c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603e:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006046:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8006052:	e034      	b.n	80060be <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <HAL_DAC_MspInit+0xac>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10c      	bne.n	8006078 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800605e:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 800606c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
}
 8006076:	e022      	b.n	80060be <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <HAL_DAC_MspInit+0xb0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10c      	bne.n	800609c <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800608c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800608e:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 8006090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	e010      	b.n	80060be <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <HAL_DAC_MspInit+0xb4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10b      	bne.n	80060be <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 80060a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 80060ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_DAC_MspInit+0xa8>)
 80060b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	50000800 	.word	0x50000800
 80060d0:	40021000 	.word	0x40021000
 80060d4:	50000c00 	.word	0x50000c00
 80060d8:	50001000 	.word	0x50001000
 80060dc:	50001400 	.word	0x50001400

080060e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b09e      	sub	sp, #120	; 0x78
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060f8:	f107 0310 	add.w	r3, r7, #16
 80060fc:	2254      	movs	r2, #84	; 0x54
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f00f f91f 	bl	8015344 <memset>
  if(hi2c->Instance==I2C2)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a23      	ldr	r2, [pc, #140]	; (8006198 <HAL_I2C_MspInit+0xb8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d13f      	bne.n	8006190 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006114:	2300      	movs	r3, #0
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	4618      	mov	r0, r3
 800611e:	f007 f919 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006128:	f7ff fd44 	bl	8005bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <HAL_I2C_MspInit+0xbc>)
 800612e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006130:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_I2C_MspInit+0xbc>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006138:	4b18      	ldr	r3, [pc, #96]	; (800619c <HAL_I2C_MspInit+0xbc>)
 800613a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006144:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006148:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800614a:	2312      	movs	r3, #18
 800614c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006152:	2300      	movs	r3, #0
 8006154:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006156:	2304      	movs	r3, #4
 8006158:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006164:	f003 faf8 	bl	8009758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_I2C_MspInit+0xbc>)
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616c:	4a0b      	ldr	r2, [pc, #44]	; (800619c <HAL_I2C_MspInit+0xbc>)
 800616e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006172:	6593      	str	r3, [r2, #88]	; 0x58
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_I2C_MspInit+0xbc>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006180:	2200      	movs	r2, #0
 8006182:	2100      	movs	r1, #0
 8006184:	2021      	movs	r0, #33	; 0x21
 8006186:	f002 fdb6 	bl	8008cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800618a:	2021      	movs	r0, #33	; 0x21
 800618c:	f002 fdcd 	bl	8008d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006190:	bf00      	nop
 8006192:	3778      	adds	r7, #120	; 0x78
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40005800 	.word	0x40005800
 800619c:	40021000 	.word	0x40021000

080061a0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a8:	f107 031c 	add.w	r3, r7, #28
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a4d      	ldr	r2, [pc, #308]	; (80062f4 <HAL_OPAMP_MspInit+0x154>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d119      	bne.n	80061f6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c2:	4b4d      	ldr	r3, [pc, #308]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	4a4c      	ldr	r2, [pc, #304]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061ce:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80061d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 80061da:	230a      	movs	r3, #10
 80061dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061de:	2303      	movs	r3, #3
 80061e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e6:	f107 031c 	add.w	r3, r7, #28
 80061ea:	4619      	mov	r1, r3
 80061ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f0:	f003 fab2 	bl	8009758 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 80061f4:	e079      	b.n	80062ea <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a40      	ldr	r2, [pc, #256]	; (80062fc <HAL_OPAMP_MspInit+0x15c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d119      	bne.n	8006234 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006200:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006204:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800620c:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006218:	23a0      	movs	r3, #160	; 0xa0
 800621a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800621c:	2303      	movs	r3, #3
 800621e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006220:	2300      	movs	r3, #0
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006224:	f107 031c 	add.w	r3, r7, #28
 8006228:	4619      	mov	r1, r3
 800622a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800622e:	f003 fa93 	bl	8009758 <HAL_GPIO_Init>
}
 8006232:	e05a      	b.n	80062ea <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a31      	ldr	r2, [pc, #196]	; (8006300 <HAL_OPAMP_MspInit+0x160>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d118      	bne.n	8006270 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006242:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800624a:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 800624c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 8006256:	2305      	movs	r3, #5
 8006258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800625a:	2303      	movs	r3, #3
 800625c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006262:	f107 031c 	add.w	r3, r7, #28
 8006266:	4619      	mov	r1, r3
 8006268:	4826      	ldr	r0, [pc, #152]	; (8006304 <HAL_OPAMP_MspInit+0x164>)
 800626a:	f003 fa75 	bl	8009758 <HAL_GPIO_Init>
}
 800626e:	e03c      	b.n	80062ea <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a24      	ldr	r2, [pc, #144]	; (8006308 <HAL_OPAMP_MspInit+0x168>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d119      	bne.n	80062ae <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8006292:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006298:	2303      	movs	r3, #3
 800629a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629c:	2300      	movs	r3, #0
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a0:	f107 031c 	add.w	r3, r7, #28
 80062a4:	4619      	mov	r1, r3
 80062a6:	4817      	ldr	r0, [pc, #92]	; (8006304 <HAL_OPAMP_MspInit+0x164>)
 80062a8:	f003 fa56 	bl	8009758 <HAL_GPIO_Init>
}
 80062ac:	e01d      	b.n	80062ea <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_OPAMP_MspInit+0x16c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d118      	bne.n	80062ea <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80062ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062bc:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80062be:	f043 0302 	orr.w	r3, r3, #2
 80062c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <HAL_OPAMP_MspInit+0x158>)
 80062c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 80062d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80062d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062d6:	2303      	movs	r3, #3
 80062d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062de:	f107 031c 	add.w	r3, r7, #28
 80062e2:	4619      	mov	r1, r3
 80062e4:	4807      	ldr	r0, [pc, #28]	; (8006304 <HAL_OPAMP_MspInit+0x164>)
 80062e6:	f003 fa37 	bl	8009758 <HAL_GPIO_Init>
}
 80062ea:	bf00      	nop
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40010300 	.word	0x40010300
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40010304 	.word	0x40010304
 8006300:	40010308 	.word	0x40010308
 8006304:	48000400 	.word	0x48000400
 8006308:	4001030c 	.word	0x4001030c
 800630c:	40010310 	.word	0x40010310

08006310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a37      	ldr	r2, [pc, #220]	; (80063fc <HAL_TIM_Base_MspInit+0xec>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10c      	bne.n	800633c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006326:	4a36      	ldr	r2, [pc, #216]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800632c:	6613      	str	r3, [r2, #96]	; 0x60
 800632e:	4b34      	ldr	r3, [pc, #208]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800633a:	e058      	b.n	80063ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d10c      	bne.n	8006360 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	6593      	str	r3, [r2, #88]	; 0x58
 8006352:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	69bb      	ldr	r3, [r7, #24]
}
 800635e:	e046      	b.n	80063ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <HAL_TIM_Base_MspInit+0xf4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10c      	bne.n	8006384 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800636a:	4b25      	ldr	r3, [pc, #148]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	4a24      	ldr	r2, [pc, #144]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006370:	f043 0304 	orr.w	r3, r3, #4
 8006374:	6593      	str	r3, [r2, #88]	; 0x58
 8006376:	4b22      	ldr	r3, [pc, #136]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697b      	ldr	r3, [r7, #20]
}
 8006382:	e034      	b.n	80063ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <HAL_TIM_Base_MspInit+0xf8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10c      	bne.n	80063a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800638e:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 8006394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006398:	6613      	str	r3, [r2, #96]	; 0x60
 800639a:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
}
 80063a6:	e022      	b.n	80063ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a17      	ldr	r2, [pc, #92]	; (800640c <HAL_TIM_Base_MspInit+0xfc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80063b2:	4b13      	ldr	r3, [pc, #76]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063bc:	6613      	str	r3, [r2, #96]	; 0x60
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	e010      	b.n	80063ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <HAL_TIM_Base_MspInit+0x100>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10b      	bne.n	80063ee <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80063d6:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063da:	4a09      	ldr	r2, [pc, #36]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e0:	6613      	str	r3, [r2, #96]	; 0x60
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <HAL_TIM_Base_MspInit+0xf0>)
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]
}
 80063ee:	bf00      	nop
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40021000 	.word	0x40021000
 8006404:	40000800 	.word	0x40000800
 8006408:	40013400 	.word	0x40013400
 800640c:	40014400 	.word	0x40014400
 8006410:	40015000 	.word	0x40015000

08006414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0a      	ldr	r2, [pc, #40]	; (800644c <HAL_TIM_PWM_MspInit+0x38>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d10b      	bne.n	800643e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <HAL_TIM_PWM_MspInit+0x3c>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	4a09      	ldr	r2, [pc, #36]	; (8006450 <HAL_TIM_PWM_MspInit+0x3c>)
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	6593      	str	r3, [r2, #88]	; 0x58
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_TIM_PWM_MspInit+0x3c>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40000400 	.word	0x40000400
 8006450:	40021000 	.word	0x40021000

08006454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a65      	ldr	r2, [pc, #404]	; (8006608 <HAL_TIM_MspPostInit+0x1b4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d11c      	bne.n	80064b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006476:	4b65      	ldr	r3, [pc, #404]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647a:	4a64      	ldr	r2, [pc, #400]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 800647c:	f043 0320 	orr.w	r3, r3, #32
 8006480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006482:	4b62      	ldr	r3, [pc, #392]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	623b      	str	r3, [r7, #32]
 800648c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 800648e:	2301      	movs	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006492:	2302      	movs	r3, #2
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006496:	2300      	movs	r3, #0
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800649a:	2300      	movs	r3, #0
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800649e:	2306      	movs	r3, #6
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 80064a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a6:	4619      	mov	r1, r3
 80064a8:	4859      	ldr	r0, [pc, #356]	; (8006610 <HAL_TIM_MspPostInit+0x1bc>)
 80064aa:	f003 f955 	bl	8009758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80064ae:	e0a6      	b.n	80065fe <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a57      	ldr	r2, [pc, #348]	; (8006614 <HAL_TIM_MspPostInit+0x1c0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d11c      	bne.n	80064f4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ba:	4b54      	ldr	r3, [pc, #336]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	4a53      	ldr	r2, [pc, #332]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064c6:	4b51      	ldr	r3, [pc, #324]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 80064d2:	2330      	movs	r3, #48	; 0x30
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d6:	2302      	movs	r3, #2
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064de:	2300      	movs	r3, #0
 80064e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064e2:	2302      	movs	r3, #2
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ea:	4619      	mov	r1, r3
 80064ec:	484a      	ldr	r0, [pc, #296]	; (8006618 <HAL_TIM_MspPostInit+0x1c4>)
 80064ee:	f003 f933 	bl	8009758 <HAL_GPIO_Init>
}
 80064f2:	e084      	b.n	80065fe <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a48      	ldr	r2, [pc, #288]	; (800661c <HAL_TIM_MspPostInit+0x1c8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d11d      	bne.n	800653a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064fe:	4b43      	ldr	r3, [pc, #268]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	4a42      	ldr	r2, [pc, #264]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800650a:	4b40      	ldr	r3, [pc, #256]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 8006516:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651c:	2302      	movs	r3, #2
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006520:	2300      	movs	r3, #0
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006524:	2300      	movs	r3, #0
 8006526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006528:	2302      	movs	r3, #2
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800652c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006530:	4619      	mov	r1, r3
 8006532:	4839      	ldr	r0, [pc, #228]	; (8006618 <HAL_TIM_MspPostInit+0x1c4>)
 8006534:	f003 f910 	bl	8009758 <HAL_GPIO_Init>
}
 8006538:	e061      	b.n	80065fe <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a38      	ldr	r2, [pc, #224]	; (8006620 <HAL_TIM_MspPostInit+0x1cc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d13a      	bne.n	80065ba <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006544:	4b31      	ldr	r3, [pc, #196]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006548:	4a30      	ldr	r2, [pc, #192]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006550:	4b2e      	ldr	r3, [pc, #184]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 800655e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006560:	4a2a      	ldr	r2, [pc, #168]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006568:	4b28      	ldr	r3, [pc, #160]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 8006574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657a:	2302      	movs	r3, #2
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006582:	2300      	movs	r3, #0
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8006586:	2306      	movs	r3, #6
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 800658a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658e:	4619      	mov	r1, r3
 8006590:	4824      	ldr	r0, [pc, #144]	; (8006624 <HAL_TIM_MspPostInit+0x1d0>)
 8006592:	f003 f8e1 	bl	8009758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 8006596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659c:	2302      	movs	r3, #2
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a4:	2300      	movs	r3, #0
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80065a8:	230a      	movs	r3, #10
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 80065ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b0:	4619      	mov	r1, r3
 80065b2:	4819      	ldr	r0, [pc, #100]	; (8006618 <HAL_TIM_MspPostInit+0x1c4>)
 80065b4:	f003 f8d0 	bl	8009758 <HAL_GPIO_Init>
}
 80065b8:	e021      	b.n	80065fe <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1a      	ldr	r2, [pc, #104]	; (8006628 <HAL_TIM_MspPostInit+0x1d4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d11c      	bne.n	80065fe <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80065c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c8:	4a10      	ldr	r2, [pc, #64]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065d0:	4b0e      	ldr	r3, [pc, #56]	; (800660c <HAL_TIM_MspPostInit+0x1b8>)
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 80065dc:	2340      	movs	r3, #64	; 0x40
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e0:	2302      	movs	r3, #2
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e8:	2300      	movs	r3, #0
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80065ec:	2301      	movs	r3, #1
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 80065f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065fa:	f003 f8ad 	bl	8009758 <HAL_GPIO_Init>
}
 80065fe:	bf00      	nop
 8006600:	3738      	adds	r7, #56	; 0x38
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40021000 	.word	0x40021000
 8006610:	48001400 	.word	0x48001400
 8006614:	40000400 	.word	0x40000400
 8006618:	48000400 	.word	0x48000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40013400 	.word	0x40013400
 8006624:	48000800 	.word	0x48000800
 8006628:	40014400 	.word	0x40014400

0800662c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b0a2      	sub	sp, #136	; 0x88
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006634:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006644:	f107 0320 	add.w	r3, r7, #32
 8006648:	2254      	movs	r2, #84	; 0x54
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f00e fe79 	bl	8015344 <memset>
  if(huart->Instance==USART1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a82      	ldr	r2, [pc, #520]	; (8006860 <HAL_UART_MspInit+0x234>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f040 808b 	bne.w	8006774 <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800665e:	2301      	movs	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006666:	f107 0320 	add.w	r3, r7, #32
 800666a:	4618      	mov	r0, r3
 800666c:	f006 fe72 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006676:	f7ff fa9d 	bl	8005bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800667a:	4b7a      	ldr	r3, [pc, #488]	; (8006864 <HAL_UART_MspInit+0x238>)
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	4a79      	ldr	r2, [pc, #484]	; (8006864 <HAL_UART_MspInit+0x238>)
 8006680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006684:	6613      	str	r3, [r2, #96]	; 0x60
 8006686:	4b77      	ldr	r3, [pc, #476]	; (8006864 <HAL_UART_MspInit+0x238>)
 8006688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006692:	4b74      	ldr	r3, [pc, #464]	; (8006864 <HAL_UART_MspInit+0x238>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	4a73      	ldr	r2, [pc, #460]	; (8006864 <HAL_UART_MspInit+0x238>)
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669e:	4b71      	ldr	r3, [pc, #452]	; (8006864 <HAL_UART_MspInit+0x238>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066aa:	4b6e      	ldr	r3, [pc, #440]	; (8006864 <HAL_UART_MspInit+0x238>)
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	4a6d      	ldr	r2, [pc, #436]	; (8006864 <HAL_UART_MspInit+0x238>)
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066b6:	4b6b      	ldr	r3, [pc, #428]	; (8006864 <HAL_UART_MspInit+0x238>)
 80066b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c8:	2302      	movs	r3, #2
 80066ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066d6:	2307      	movs	r3, #7
 80066d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066e6:	f003 f837 	bl	8009758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ee:	2302      	movs	r3, #2
 80066f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066fc:	2307      	movs	r3, #7
 80066fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006702:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006706:	4619      	mov	r1, r3
 8006708:	4857      	ldr	r0, [pc, #348]	; (8006868 <HAL_UART_MspInit+0x23c>)
 800670a:	f003 f825 	bl	8009758 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800670e:	4b57      	ldr	r3, [pc, #348]	; (800686c <HAL_UART_MspInit+0x240>)
 8006710:	4a57      	ldr	r2, [pc, #348]	; (8006870 <HAL_UART_MspInit+0x244>)
 8006712:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006714:	4b55      	ldr	r3, [pc, #340]	; (800686c <HAL_UART_MspInit+0x240>)
 8006716:	2218      	movs	r2, #24
 8006718:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800671a:	4b54      	ldr	r3, [pc, #336]	; (800686c <HAL_UART_MspInit+0x240>)
 800671c:	2200      	movs	r2, #0
 800671e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006720:	4b52      	ldr	r3, [pc, #328]	; (800686c <HAL_UART_MspInit+0x240>)
 8006722:	2200      	movs	r2, #0
 8006724:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006726:	4b51      	ldr	r3, [pc, #324]	; (800686c <HAL_UART_MspInit+0x240>)
 8006728:	2280      	movs	r2, #128	; 0x80
 800672a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800672c:	4b4f      	ldr	r3, [pc, #316]	; (800686c <HAL_UART_MspInit+0x240>)
 800672e:	2200      	movs	r2, #0
 8006730:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006732:	4b4e      	ldr	r3, [pc, #312]	; (800686c <HAL_UART_MspInit+0x240>)
 8006734:	2200      	movs	r2, #0
 8006736:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006738:	4b4c      	ldr	r3, [pc, #304]	; (800686c <HAL_UART_MspInit+0x240>)
 800673a:	2200      	movs	r2, #0
 800673c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800673e:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_UART_MspInit+0x240>)
 8006740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006746:	4849      	ldr	r0, [pc, #292]	; (800686c <HAL_UART_MspInit+0x240>)
 8006748:	f002 fcd4 	bl	80090f4 <HAL_DMA_Init>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006752:	f7ff fa2f 	bl	8005bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a44      	ldr	r2, [pc, #272]	; (800686c <HAL_UART_MspInit+0x240>)
 800675a:	67da      	str	r2, [r3, #124]	; 0x7c
 800675c:	4a43      	ldr	r2, [pc, #268]	; (800686c <HAL_UART_MspInit+0x240>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	2025      	movs	r0, #37	; 0x25
 8006768:	f002 fac5 	bl	8008cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800676c:	2025      	movs	r0, #37	; 0x25
 800676e:	f002 fadc 	bl	8008d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006772:	e070      	b.n	8006856 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a3e      	ldr	r2, [pc, #248]	; (8006874 <HAL_UART_MspInit+0x248>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d16b      	bne.n	8006856 <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800677e:	2302      	movs	r3, #2
 8006780:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006782:	2300      	movs	r3, #0
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006786:	f107 0320 	add.w	r3, r7, #32
 800678a:	4618      	mov	r0, r3
 800678c:	f006 fde2 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8006796:	f7ff fa0d 	bl	8005bb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800679a:	4b32      	ldr	r3, [pc, #200]	; (8006864 <HAL_UART_MspInit+0x238>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679e:	4a31      	ldr	r2, [pc, #196]	; (8006864 <HAL_UART_MspInit+0x238>)
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	6593      	str	r3, [r2, #88]	; 0x58
 80067a6:	4b2f      	ldr	r3, [pc, #188]	; (8006864 <HAL_UART_MspInit+0x238>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b2:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <HAL_UART_MspInit+0x238>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <HAL_UART_MspInit+0x238>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067be:	4b29      	ldr	r3, [pc, #164]	; (8006864 <HAL_UART_MspInit+0x238>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80067ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80067ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d0:	2302      	movs	r3, #2
 80067d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80067de:	2307      	movs	r3, #7
 80067e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80067e8:	4619      	mov	r1, r3
 80067ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ee:	f002 ffb3 	bl	8009758 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <HAL_UART_MspInit+0x24c>)
 80067f4:	4a21      	ldr	r2, [pc, #132]	; (800687c <HAL_UART_MspInit+0x250>)
 80067f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80067f8:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <HAL_UART_MspInit+0x24c>)
 80067fa:	221a      	movs	r2, #26
 80067fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067fe:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006800:	2200      	movs	r2, #0
 8006802:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006804:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006806:	2200      	movs	r2, #0
 8006808:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <HAL_UART_MspInit+0x24c>)
 800680c:	2280      	movs	r2, #128	; 0x80
 800680e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006812:	2200      	movs	r2, #0
 8006814:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006816:	4b18      	ldr	r3, [pc, #96]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006818:	2200      	movs	r2, #0
 800681a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <HAL_UART_MspInit+0x24c>)
 800681e:	2200      	movs	r2, #0
 8006820:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800682a:	4813      	ldr	r0, [pc, #76]	; (8006878 <HAL_UART_MspInit+0x24c>)
 800682c:	f002 fc62 	bl	80090f4 <HAL_DMA_Init>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8006836:	f7ff f9bd 	bl	8005bb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <HAL_UART_MspInit+0x24c>)
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006840:	4a0d      	ldr	r2, [pc, #52]	; (8006878 <HAL_UART_MspInit+0x24c>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	2026      	movs	r0, #38	; 0x26
 800684c:	f002 fa53 	bl	8008cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006850:	2026      	movs	r0, #38	; 0x26
 8006852:	f002 fa6a 	bl	8008d2a <HAL_NVIC_EnableIRQ>
}
 8006856:	bf00      	nop
 8006858:	3788      	adds	r7, #136	; 0x88
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40013800 	.word	0x40013800
 8006864:	40021000 	.word	0x40021000
 8006868:	48000400 	.word	0x48000400
 800686c:	200009dc 	.word	0x200009dc
 8006870:	40020008 	.word	0x40020008
 8006874:	40004400 	.word	0x40004400
 8006878:	20000a3c 	.word	0x20000a3c
 800687c:	40020408 	.word	0x40020408

08006880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006884:	e7fe      	b.n	8006884 <NMI_Handler+0x4>

08006886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800688a:	e7fe      	b.n	800688a <HardFault_Handler+0x4>

0800688c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006890:	e7fe      	b.n	8006890 <MemManage_Handler+0x4>

08006892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006892:	b480      	push	{r7}
 8006894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006896:	e7fe      	b.n	8006896 <BusFault_Handler+0x4>

08006898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800689c:	e7fe      	b.n	800689c <UsageFault_Handler+0x4>

0800689e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068a2:	bf00      	nop
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068ba:	b480      	push	{r7}
 80068bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068cc:	f000 f9c0 	bl	8006c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068d0:	bf00      	nop
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80068d8:	4802      	ldr	r0, [pc, #8]	; (80068e4 <DMA1_Channel1_IRQHandler+0x10>)
 80068da:	f002 fdee 	bl	80094ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80068de:	bf00      	nop
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200009dc 	.word	0x200009dc

080068e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068ec:	4802      	ldr	r0, [pc, #8]	; (80068f8 <DMA1_Channel2_IRQHandler+0x10>)
 80068ee:	f002 fde4 	bl	80094ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	200008bc 	.word	0x200008bc

080068fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006900:	4802      	ldr	r0, [pc, #8]	; (800690c <DMA1_Channel3_IRQHandler+0x10>)
 8006902:	f002 fdda 	bl	80094ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000091c 	.word	0x2000091c

08006910 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8006914:	4802      	ldr	r0, [pc, #8]	; (8006920 <DMA1_Channel4_IRQHandler+0x10>)
 8006916:	f002 fdd0 	bl	80094ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	2000097c 	.word	0x2000097c

08006924 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006928:	4802      	ldr	r0, [pc, #8]	; (8006934 <USB_LP_IRQHandler+0x10>)
 800692a:	f004 fb0e 	bl	800af4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20001fc0 	.word	0x20001fc0

08006938 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800693c:	4802      	ldr	r0, [pc, #8]	; (8006948 <I2C2_EV_IRQHandler+0x10>)
 800693e:	f003 fc71 	bl	800a224 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000750 	.word	0x20000750

0800694c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006950:	4802      	ldr	r0, [pc, #8]	; (800695c <USART1_IRQHandler+0x10>)
 8006952:	f008 fae1 	bl	800ef18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	2000079c 	.word	0x2000079c

08006960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006964:	4802      	ldr	r0, [pc, #8]	; (8006970 <USART2_IRQHandler+0x10>)
 8006966:	f008 fad7 	bl	800ef18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000082c 	.word	0x2000082c

08006974 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006978:	4802      	ldr	r0, [pc, #8]	; (8006984 <DMA2_Channel1_IRQHandler+0x10>)
 800697a:	f002 fd9e 	bl	80094ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000a3c 	.word	0x20000a3c

08006988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return 1;
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <_kill>:

int _kill(int pid, int sig)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80069a2:	f00e fc6d 	bl	8015280 <__errno>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2216      	movs	r2, #22
 80069aa:	601a      	str	r2, [r3, #0]
  return -1;
 80069ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_exit>:

void _exit (int status)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80069c0:	f04f 31ff 	mov.w	r1, #4294967295
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff ffe7 	bl	8006998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80069ca:	e7fe      	b.n	80069ca <_exit+0x12>

080069cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e00a      	b.n	80069f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80069de:	f3af 8000 	nop.w
 80069e2:	4601      	mov	r1, r0
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	60ba      	str	r2, [r7, #8]
 80069ea:	b2ca      	uxtb	r2, r1
 80069ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	3301      	adds	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	dbf0      	blt.n	80069de <_read+0x12>
  }

  return len;
 80069fc:	687b      	ldr	r3, [r7, #4]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <_write+0x18>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d115      	bne.n	8006a4a <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f00d fe65 	bl	80146f0 <CDC_Transmit_FS>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d0f6      	beq.n	8006a1e <_write+0x18>
		        if (result != USBD_OK)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <_write+0x40>
		        {
		            errno = EIO;
 8006a36:	f00e fc23 	bl	8015280 <__errno>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	601a      	str	r2, [r3, #0]
		            return -1;
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	e008      	b.n	8006a58 <_write+0x52>
		        }
		        return len;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	e006      	b.n	8006a58 <_write+0x52>
		    }
		    errno = EBADF;
 8006a4a:	f00e fc19 	bl	8015280 <__errno>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2209      	movs	r2, #9
 8006a52:	601a      	str	r2, [r3, #0]
		    return -1;
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <_close>:

int _close(int file)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a88:	605a      	str	r2, [r3, #4]
  return 0;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <_isatty>:

int _isatty(int file)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006aa0:	2301      	movs	r3, #1
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <_sbrk+0x5c>)
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <_sbrk+0x60>)
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006adc:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <_sbrk+0x64>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ae4:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <_sbrk+0x64>)
 8006ae6:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <_sbrk+0x68>)
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aea:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <_sbrk+0x64>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d207      	bcs.n	8006b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006af8:	f00e fbc2 	bl	8015280 <__errno>
 8006afc:	4603      	mov	r3, r0
 8006afe:	220c      	movs	r2, #12
 8006b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	e009      	b.n	8006b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <_sbrk+0x64>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <_sbrk+0x64>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <_sbrk+0x64>)
 8006b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20020000 	.word	0x20020000
 8006b28:	00000400 	.word	0x00000400
 8006b2c:	20000aa0 	.word	0x20000aa0
 8006b30:	200024e8 	.word	0x200024e8

08006b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <SystemInit+0x20>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <SystemInit+0x20>)
 8006b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006b58:	480d      	ldr	r0, [pc, #52]	; (8006b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b5c:	480d      	ldr	r0, [pc, #52]	; (8006b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b5e:	490e      	ldr	r1, [pc, #56]	; (8006b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b60:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <LoopForever+0xe>)
  movs r3, #0
 8006b62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006b64:	e002      	b.n	8006b6c <LoopCopyDataInit>

08006b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b6a:	3304      	adds	r3, #4

08006b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b70:	d3f9      	bcc.n	8006b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b72:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b74:	4c0b      	ldr	r4, [pc, #44]	; (8006ba4 <LoopForever+0x16>)
  movs r3, #0
 8006b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b78:	e001      	b.n	8006b7e <LoopFillZerobss>

08006b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b7c:	3204      	adds	r2, #4

08006b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b80:	d3fb      	bcc.n	8006b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b82:	f7ff ffd7 	bl	8006b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b86:	f00e fb81 	bl	801528c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b8a:	f7fe ff75 	bl	8005a78 <main>

08006b8e <LoopForever>:

LoopForever:
    b LoopForever
 8006b8e:	e7fe      	b.n	8006b8e <LoopForever>
  ldr   r0, =_estack
 8006b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b98:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8006b9c:	08018974 	.word	0x08018974
  ldr r2, =_sbss
 8006ba0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8006ba4:	200024e8 	.word	0x200024e8

08006ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ba8:	e7fe      	b.n	8006ba8 <ADC1_2_IRQHandler>

08006baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f002 f893 	bl	8008ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bba:	200f      	movs	r0, #15
 8006bbc:	f000 f80e 	bl	8006bdc <HAL_InitTick>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	71fb      	strb	r3, [r7, #7]
 8006bca:	e001      	b.n	8006bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006bcc:	f7ff f812 	bl	8005bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]

}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006be8:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <HAL_InitTick+0x68>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d022      	beq.n	8006c36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006bf0:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <HAL_InitTick+0x6c>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <HAL_InitTick+0x68>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	4618      	mov	r0, r3
 8006c06:	f002 f89e 	bl	8008d46 <HAL_SYSTICK_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10f      	bne.n	8006c30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d809      	bhi.n	8006c2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c16:	2200      	movs	r2, #0
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1e:	f002 f86a 	bl	8008cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c22:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <HAL_InitTick+0x70>)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	e007      	b.n	8006c3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
 8006c2e:	e004      	b.n	8006c3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
 8006c34:	e001      	b.n	8006c3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000008 	.word	0x20000008
 8006c48:	20000000 	.word	0x20000000
 8006c4c:	20000004 	.word	0x20000004

08006c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_IncTick+0x1c>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <HAL_IncTick+0x20>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4a03      	ldr	r2, [pc, #12]	; (8006c6c <HAL_IncTick+0x1c>)
 8006c60:	6013      	str	r3, [r2, #0]
}
 8006c62:	bf00      	nop
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000aa4 	.word	0x20000aa4
 8006c70:	20000008 	.word	0x20000008

08006c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return uwTick;
 8006c78:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <HAL_GetTick+0x14>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000aa4 	.word	0x20000aa4

08006c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c94:	f7ff ffee 	bl	8006c74 <HAL_GetTick>
 8006c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d004      	beq.n	8006cb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <HAL_Delay+0x40>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cb0:	bf00      	nop
 8006cb2:	f7ff ffdf 	bl	8006c74 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d8f7      	bhi.n	8006cb2 <HAL_Delay+0x26>
  {
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000008 	.word	0x20000008

08006cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3360      	adds	r3, #96	; 0x60
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <LL_ADC_SetOffset+0x44>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	03fff000 	.word	0x03fff000

08006d80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3360      	adds	r3, #96	; 0x60
 8006d8e:	461a      	mov	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3360      	adds	r3, #96	; 0x60
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b087      	sub	sp, #28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3360      	adds	r3, #96	; 0x60
 8006df2:	461a      	mov	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3360      	adds	r3, #96	; 0x60
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	615a      	str	r2, [r3, #20]
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3330      	adds	r3, #48	; 0x30
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	4413      	add	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	211f      	movs	r1, #31
 8006ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	401a      	ands	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0e9b      	lsrs	r3, r3, #26
 8006ed2:	f003 011f 	and.w	r1, r3, #31
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3314      	adds	r3, #20
 8006f02:	461a      	mov	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	0e5b      	lsrs	r3, r3, #25
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	4413      	add	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2107      	movs	r1, #7
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	401a      	ands	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	0d1b      	lsrs	r3, r3, #20
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	431a      	orrs	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a0f      	ldr	r2, [pc, #60]	; (8006f94 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10a      	bne.n	8006f72 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006f70:	e00a      	b.n	8006f88 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	401a      	ands	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	407f0000 	.word	0x407f0000

08006f98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6093      	str	r3, [r2, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fec:	d101      	bne.n	8006ff2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800703c:	d101      	bne.n	8007042 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007064:	f043 0201 	orr.w	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800708c:	f043 0202 	orr.w	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <LL_ADC_IsEnabled+0x18>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <LL_ADC_IsEnabled+0x1a>
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d101      	bne.n	80070de <LL_ADC_IsDisableOngoing+0x18>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <LL_ADC_IsDisableOngoing+0x1a>
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d101      	bne.n	800712c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b08      	cmp	r3, #8
 800714c:	d101      	bne.n	8007152 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b089      	sub	sp, #36	; 0x24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800716c:	2300      	movs	r3, #0
 800716e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e1af      	b.n	80074da <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fe fd57 	bl	8005c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff19 	bl	8006fd8 <LL_ADC_IsDeepPowerDownEnabled>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff feff 	bl	8006fb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff ff34 	bl	8007028 <LL_ADC_IsInternalRegulatorEnabled>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d115      	bne.n	80071f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff ff18 	bl	8007000 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071d0:	4b9f      	ldr	r3, [pc, #636]	; (8007450 <HAL_ADC_Init+0x2f0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	099b      	lsrs	r3, r3, #6
 80071d6:	4a9f      	ldr	r2, [pc, #636]	; (8007454 <HAL_ADC_Init+0x2f4>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	099b      	lsrs	r3, r3, #6
 80071de:	3301      	adds	r3, #1
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80071e4:	e002      	b.n	80071ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f9      	bne.n	80071e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff ff16 	bl	8007028 <LL_ADC_IsInternalRegulatorEnabled>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f043 0210 	orr.w	r2, r3, #16
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	f043 0201 	orr.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff ff76 	bl	8007114 <LL_ADC_REG_IsConversionOngoing>
 8007228:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 8148 	bne.w	80074c8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 8144 	bne.w	80074c8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007244:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007248:	f043 0202 	orr.w	r2, r3, #2
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ff23 	bl	80070a0 <LL_ADC_IsEnabled>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d141      	bne.n	80072e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007268:	d004      	beq.n	8007274 <HAL_ADC_Init+0x114>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a7a      	ldr	r2, [pc, #488]	; (8007458 <HAL_ADC_Init+0x2f8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10f      	bne.n	8007294 <HAL_ADC_Init+0x134>
 8007274:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007278:	f7ff ff12 	bl	80070a0 <LL_ADC_IsEnabled>
 800727c:	4604      	mov	r4, r0
 800727e:	4876      	ldr	r0, [pc, #472]	; (8007458 <HAL_ADC_Init+0x2f8>)
 8007280:	f7ff ff0e 	bl	80070a0 <LL_ADC_IsEnabled>
 8007284:	4603      	mov	r3, r0
 8007286:	4323      	orrs	r3, r4
 8007288:	2b00      	cmp	r3, #0
 800728a:	bf0c      	ite	eq
 800728c:	2301      	moveq	r3, #1
 800728e:	2300      	movne	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e012      	b.n	80072ba <HAL_ADC_Init+0x15a>
 8007294:	4871      	ldr	r0, [pc, #452]	; (800745c <HAL_ADC_Init+0x2fc>)
 8007296:	f7ff ff03 	bl	80070a0 <LL_ADC_IsEnabled>
 800729a:	4604      	mov	r4, r0
 800729c:	4870      	ldr	r0, [pc, #448]	; (8007460 <HAL_ADC_Init+0x300>)
 800729e:	f7ff feff 	bl	80070a0 <LL_ADC_IsEnabled>
 80072a2:	4603      	mov	r3, r0
 80072a4:	431c      	orrs	r4, r3
 80072a6:	486f      	ldr	r0, [pc, #444]	; (8007464 <HAL_ADC_Init+0x304>)
 80072a8:	f7ff fefa 	bl	80070a0 <LL_ADC_IsEnabled>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4323      	orrs	r3, r4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d012      	beq.n	80072e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c6:	d004      	beq.n	80072d2 <HAL_ADC_Init+0x172>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a62      	ldr	r2, [pc, #392]	; (8007458 <HAL_ADC_Init+0x2f8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d101      	bne.n	80072d6 <HAL_ADC_Init+0x176>
 80072d2:	4a65      	ldr	r2, [pc, #404]	; (8007468 <HAL_ADC_Init+0x308>)
 80072d4:	e000      	b.n	80072d8 <HAL_ADC_Init+0x178>
 80072d6:	4a65      	ldr	r2, [pc, #404]	; (800746c <HAL_ADC_Init+0x30c>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7ff fcf6 	bl	8006cd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7f5b      	ldrb	r3, [r3, #29]
 80072e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80072f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80072fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007302:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800730e:	2b01      	cmp	r3, #1
 8007310:	d106      	bne.n	8007320 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	045b      	lsls	r3, r3, #17
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	4313      	orrs	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_ADC_Init+0x310>)
 8007344:	4013      	ands	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	69b9      	ldr	r1, [r7, #24]
 800734c:	430b      	orrs	r3, r1
 800734e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fed2 	bl	8007114 <LL_ADC_REG_IsConversionOngoing>
 8007370:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fedf 	bl	800713a <LL_ADC_INJ_IsConversionOngoing>
 800737c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d17f      	bne.n	8007484 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d17c      	bne.n	8007484 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800738e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007396:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007398:	4313      	orrs	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a6:	f023 0302 	bic.w	r3, r3, #2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	69b9      	ldr	r1, [r7, #24]
 80073b0:	430b      	orrs	r3, r1
 80073b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80073ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80073d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80073d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6911      	ldr	r1, [r2, #16]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	430b      	orrs	r3, r1
 80073e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80073ea:	e013      	b.n	8007414 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80073fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800740c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007410:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800741a:	2b01      	cmp	r3, #1
 800741c:	d12a      	bne.n	8007474 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007428:	f023 0304 	bic.w	r3, r3, #4
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007434:	4311      	orrs	r1, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800743a:	4311      	orrs	r1, r2
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007440:	430a      	orrs	r2, r1
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0201 	orr.w	r2, r2, #1
 800744c:	611a      	str	r2, [r3, #16]
 800744e:	e019      	b.n	8007484 <HAL_ADC_Init+0x324>
 8007450:	20000000 	.word	0x20000000
 8007454:	053e2d63 	.word	0x053e2d63
 8007458:	50000100 	.word	0x50000100
 800745c:	50000400 	.word	0x50000400
 8007460:	50000500 	.word	0x50000500
 8007464:	50000600 	.word	0x50000600
 8007468:	50000300 	.word	0x50000300
 800746c:	50000700 	.word	0x50000700
 8007470:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d10c      	bne.n	80074a6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f023 010f 	bic.w	r1, r3, #15
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	1e5a      	subs	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
 80074a4:	e007      	b.n	80074b6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 020f 	bic.w	r2, r2, #15
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	f043 0201 	orr.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80074c6:	e007      	b.n	80074d8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f043 0210 	orr.w	r2, r3, #16
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3724      	adds	r7, #36	; 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd90      	pop	{r4, r7, pc}
 80074e2:	bf00      	nop

080074e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074f8:	d004      	beq.n	8007504 <HAL_ADC_Start_DMA+0x20>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a5a      	ldr	r2, [pc, #360]	; (8007668 <HAL_ADC_Start_DMA+0x184>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d101      	bne.n	8007508 <HAL_ADC_Start_DMA+0x24>
 8007504:	4b59      	ldr	r3, [pc, #356]	; (800766c <HAL_ADC_Start_DMA+0x188>)
 8007506:	e000      	b.n	800750a <HAL_ADC_Start_DMA+0x26>
 8007508:	4b59      	ldr	r3, [pc, #356]	; (8007670 <HAL_ADC_Start_DMA+0x18c>)
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fd44 	bl	8006f98 <LL_ADC_GetMultimode>
 8007510:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fdfc 	bl	8007114 <LL_ADC_REG_IsConversionOngoing>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	f040 809b 	bne.w	800765a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_ADC_Start_DMA+0x4e>
 800752e:	2302      	movs	r3, #2
 8007530:	e096      	b.n	8007660 <HAL_ADC_Start_DMA+0x17c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4d      	ldr	r2, [pc, #308]	; (8007674 <HAL_ADC_Start_DMA+0x190>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d008      	beq.n	8007556 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b05      	cmp	r3, #5
 800754e:	d002      	beq.n	8007556 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b09      	cmp	r3, #9
 8007554:	d17a      	bne.n	800764c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 fcf6 	bl	8007f48 <ADC_Enable>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d16d      	bne.n	8007642 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <HAL_ADC_Start_DMA+0x184>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_ADC_Start_DMA+0xb4>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a3b      	ldr	r2, [pc, #236]	; (8007678 <HAL_ADC_Start_DMA+0x194>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d002      	beq.n	8007594 <HAL_ADC_Start_DMA+0xb0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	e003      	b.n	800759c <HAL_ADC_Start_DMA+0xb8>
 8007594:	4b39      	ldr	r3, [pc, #228]	; (800767c <HAL_ADC_Start_DMA+0x198>)
 8007596:	e001      	b.n	800759c <HAL_ADC_Start_DMA+0xb8>
 8007598:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d002      	beq.n	80075aa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c6:	f023 0206 	bic.w	r2, r3, #6
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	661a      	str	r2, [r3, #96]	; 0x60
 80075ce:	e002      	b.n	80075d6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	4a29      	ldr	r2, [pc, #164]	; (8007680 <HAL_ADC_Start_DMA+0x19c>)
 80075dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	4a28      	ldr	r2, [pc, #160]	; (8007684 <HAL_ADC_Start_DMA+0x1a0>)
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	4a27      	ldr	r2, [pc, #156]	; (8007688 <HAL_ADC_Start_DMA+0x1a4>)
 80075ec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	221c      	movs	r2, #28
 80075f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0210 	orr.w	r2, r2, #16
 800760c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3340      	adds	r3, #64	; 0x40
 8007628:	4619      	mov	r1, r3
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f001 fe09 	bl	8009244 <HAL_DMA_Start_IT>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fd56 	bl	80070ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007640:	e00d      	b.n	800765e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800764a:	e008      	b.n	800765e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007658:	e001      	b.n	800765e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800765a:	2302      	movs	r3, #2
 800765c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	50000100 	.word	0x50000100
 800766c:	50000300 	.word	0x50000300
 8007670:	50000700 	.word	0x50000700
 8007674:	50000600 	.word	0x50000600
 8007678:	50000500 	.word	0x50000500
 800767c:	50000400 	.word	0x50000400
 8007680:	080080cb 	.word	0x080080cb
 8007684:	080081a3 	.word	0x080081a3
 8007688:	080081bf 	.word	0x080081bf

0800768c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b0b6      	sub	sp, #216	; 0xd8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d102      	bne.n	80076ec <HAL_ADC_ConfigChannel+0x24>
 80076e6:	2302      	movs	r3, #2
 80076e8:	f000 bc13 	b.w	8007f12 <HAL_ADC_ConfigChannel+0x84a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fd0b 	bl	8007114 <LL_ADC_REG_IsConversionOngoing>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 83f3 	bne.w	8007eec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7ff fbc1 	bl	8006e9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fcf9 	bl	8007114 <LL_ADC_REG_IsConversionOngoing>
 8007722:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fd05 	bl	800713a <LL_ADC_INJ_IsConversionOngoing>
 8007730:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007734:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 81d9 	bne.w	8007af0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800773e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 81d4 	bne.w	8007af0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007750:	d10f      	bne.n	8007772 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	4619      	mov	r1, r3
 800775e:	f7ff fbc8 	bl	8006ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fb6f 	bl	8006e4e <LL_ADC_SetSamplingTimeCommonConfig>
 8007770:	e00e      	b.n	8007790 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	461a      	mov	r2, r3
 8007780:	f7ff fbb7 	bl	8006ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fb5f 	bl	8006e4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d022      	beq.n	80077f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6919      	ldr	r1, [r3, #16]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077c2:	f7ff fab9 	bl	8006d38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6919      	ldr	r1, [r3, #16]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7ff fb05 	bl	8006de2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6919      	ldr	r1, [r3, #16]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	7f1b      	ldrb	r3, [r3, #28]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d102      	bne.n	80077ee <HAL_ADC_ConfigChannel+0x126>
 80077e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ec:	e000      	b.n	80077f0 <HAL_ADC_ConfigChannel+0x128>
 80077ee:	2300      	movs	r3, #0
 80077f0:	461a      	mov	r2, r3
 80077f2:	f7ff fb11 	bl	8006e18 <LL_ADC_SetOffsetSaturation>
 80077f6:	e17b      	b.n	8007af0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fabe 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007804:	4603      	mov	r3, r0
 8007806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <HAL_ADC_ConfigChannel+0x15c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fab3 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 800781a:	4603      	mov	r3, r0
 800781c:	0e9b      	lsrs	r3, r3, #26
 800781e:	f003 021f 	and.w	r2, r3, #31
 8007822:	e01e      	b.n	8007862 <HAL_ADC_ConfigChannel+0x19a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff faa8 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007830:	4603      	mov	r3, r0
 8007832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800783a:	fa93 f3a3 	rbit	r3, r3
 800783e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800784a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007852:	2320      	movs	r3, #32
 8007854:	e004      	b.n	8007860 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800785a:	fab3 f383 	clz	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <HAL_ADC_ConfigChannel+0x1b2>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0e9b      	lsrs	r3, r3, #26
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	e018      	b.n	80078ac <HAL_ADC_ConfigChannel+0x1e4>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800788e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e004      	b.n	80078ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80078a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a6:	fab3 f383 	clz	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d106      	bne.n	80078be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fa77 	bl	8006dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2101      	movs	r1, #1
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fa5b 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <HAL_ADC_ConfigChannel+0x222>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fa50 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 80078e0:	4603      	mov	r3, r0
 80078e2:	0e9b      	lsrs	r3, r3, #26
 80078e4:	f003 021f 	and.w	r2, r3, #31
 80078e8:	e01e      	b.n	8007928 <HAL_ADC_ConfigChannel+0x260>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fa45 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007900:	fa93 f3a3 	rbit	r3, r3
 8007904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800790c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007918:	2320      	movs	r3, #32
 800791a:	e004      	b.n	8007926 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800791c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007920:	fab3 f383 	clz	r3, r3
 8007924:	b2db      	uxtb	r3, r3
 8007926:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x278>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	0e9b      	lsrs	r3, r3, #26
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	e018      	b.n	8007972 <HAL_ADC_ConfigChannel+0x2aa>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800795c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007964:	2320      	movs	r3, #32
 8007966:	e004      	b.n	8007972 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800796c:	fab3 f383 	clz	r3, r3
 8007970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007972:	429a      	cmp	r2, r3
 8007974:	d106      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fa14 	bl	8006dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2102      	movs	r1, #2
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff f9f8 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007990:	4603      	mov	r3, r0
 8007992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <HAL_ADC_ConfigChannel+0x2e8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff f9ed 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 80079a6:	4603      	mov	r3, r0
 80079a8:	0e9b      	lsrs	r3, r3, #26
 80079aa:	f003 021f 	and.w	r2, r3, #31
 80079ae:	e01e      	b.n	80079ee <HAL_ADC_ConfigChannel+0x326>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2102      	movs	r1, #2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f9e2 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 80079bc:	4603      	mov	r3, r0
 80079be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c6:	fa93 f3a3 	rbit	r3, r3
 80079ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80079ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80079d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80079de:	2320      	movs	r3, #32
 80079e0:	e004      	b.n	80079ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80079e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e6:	fab3 f383 	clz	r3, r3
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <HAL_ADC_ConfigChannel+0x33e>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	0e9b      	lsrs	r3, r3, #26
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	e016      	b.n	8007a34 <HAL_ADC_ConfigChannel+0x36c>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a12:	fa93 f3a3 	rbit	r3, r3
 8007a16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007a26:	2320      	movs	r3, #32
 8007a28:	e004      	b.n	8007a34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a2e:	fab3 f383 	clz	r3, r3
 8007a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d106      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff f9b3 	bl	8006dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2103      	movs	r1, #3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff f997 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <HAL_ADC_ConfigChannel+0x3aa>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2103      	movs	r1, #3
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f98c 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	0e9b      	lsrs	r3, r3, #26
 8007a6c:	f003 021f 	and.w	r2, r3, #31
 8007a70:	e017      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x3da>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2103      	movs	r1, #3
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff f981 	bl	8006d80 <LL_ADC_GetOffsetChannel>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a84:	fa93 f3a3 	rbit	r3, r3
 8007a88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007a94:	2320      	movs	r3, #32
 8007a96:	e003      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9a:	fab3 f383 	clz	r3, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x3f2>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	0e9b      	lsrs	r3, r3, #26
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	e011      	b.n	8007ade <HAL_ADC_ConfigChannel+0x416>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac2:	fa93 f3a3 	rbit	r3, r3
 8007ac6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007ad2:	2320      	movs	r3, #32
 8007ad4:	e003      	b.n	8007ade <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	fab3 f383 	clz	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d106      	bne.n	8007af0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2103      	movs	r1, #3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff f95e 	bl	8006dac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fad3 	bl	80070a0 <LL_ADC_IsEnabled>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 813d 	bne.w	8007d7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7ff fa1a 	bl	8006f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4aa2      	ldr	r2, [pc, #648]	; (8007da4 <HAL_ADC_ConfigChannel+0x6dc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f040 812e 	bne.w	8007d7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <HAL_ADC_ConfigChannel+0x480>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	0e9b      	lsrs	r3, r3, #26
 8007b36:	3301      	adds	r3, #1
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	bf94      	ite	ls
 8007b40:	2301      	movls	r3, #1
 8007b42:	2300      	movhi	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	e019      	b.n	8007b7c <HAL_ADC_ConfigChannel+0x4b4>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b50:	fa93 f3a3 	rbit	r3, r3
 8007b54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007b60:	2320      	movs	r3, #32
 8007b62:	e003      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b66:	fab3 f383 	clz	r3, r3
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2b09      	cmp	r3, #9
 8007b74:	bf94      	ite	ls
 8007b76:	2301      	movls	r3, #1
 8007b78:	2300      	movhi	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d079      	beq.n	8007c74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x4d4>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	0e9b      	lsrs	r3, r3, #26
 8007b92:	3301      	adds	r3, #1
 8007b94:	069b      	lsls	r3, r3, #26
 8007b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b9a:	e015      	b.n	8007bc8 <HAL_ADC_ConfigChannel+0x500>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba4:	fa93 f3a3 	rbit	r3, r3
 8007ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	e003      	b.n	8007bc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bba:	fab3 f383 	clz	r3, r3
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	069b      	lsls	r3, r3, #26
 8007bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0x520>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	0e9b      	lsrs	r3, r3, #26
 8007bda:	3301      	adds	r3, #1
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	2101      	movs	r1, #1
 8007be2:	fa01 f303 	lsl.w	r3, r1, r3
 8007be6:	e017      	b.n	8007c18 <HAL_ADC_ConfigChannel+0x550>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	fa93 f3a3 	rbit	r3, r3
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007c00:	2320      	movs	r3, #32
 8007c02:	e003      	b.n	8007c0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c06:	fab3 f383 	clz	r3, r3
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2101      	movs	r1, #1
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	ea42 0103 	orr.w	r1, r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <HAL_ADC_ConfigChannel+0x576>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	0e9b      	lsrs	r3, r3, #26
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f003 021f 	and.w	r2, r3, #31
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	051b      	lsls	r3, r3, #20
 8007c3c:	e018      	b.n	8007c70 <HAL_ADC_ConfigChannel+0x5a8>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	fa93 f3a3 	rbit	r3, r3
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007c56:	2320      	movs	r3, #32
 8007c58:	e003      	b.n	8007c62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	fab3 f383 	clz	r3, r3
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	f003 021f 	and.w	r2, r3, #31
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c70:	430b      	orrs	r3, r1
 8007c72:	e07e      	b.n	8007d72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x5c8>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	0e9b      	lsrs	r3, r3, #26
 8007c86:	3301      	adds	r3, #1
 8007c88:	069b      	lsls	r3, r3, #26
 8007c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c8e:	e015      	b.n	8007cbc <HAL_ADC_ConfigChannel+0x5f4>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007ca8:	2320      	movs	r3, #32
 8007caa:	e003      	b.n	8007cb4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	fab3 f383 	clz	r3, r3
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	069b      	lsls	r3, r3, #26
 8007cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <HAL_ADC_ConfigChannel+0x614>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	0e9b      	lsrs	r3, r3, #26
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cda:	e017      	b.n	8007d0c <HAL_ADC_ConfigChannel+0x644>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	fa93 f3a3 	rbit	r3, r3
 8007ce8:	61fb      	str	r3, [r7, #28]
  return result;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	e003      	b.n	8007d00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	fab3 f383 	clz	r3, r3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	3301      	adds	r3, #1
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2101      	movs	r1, #1
 8007d08:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0c:	ea42 0103 	orr.w	r1, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <HAL_ADC_ConfigChannel+0x670>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	0e9b      	lsrs	r3, r3, #26
 8007d22:	3301      	adds	r3, #1
 8007d24:	f003 021f 	and.w	r2, r3, #31
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3b1e      	subs	r3, #30
 8007d30:	051b      	lsls	r3, r3, #20
 8007d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d36:	e01b      	b.n	8007d70 <HAL_ADC_ConfigChannel+0x6a8>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	fa93 f3a3 	rbit	r3, r3
 8007d44:	613b      	str	r3, [r7, #16]
  return result;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007d50:	2320      	movs	r3, #32
 8007d52:	e003      	b.n	8007d5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	fab3 f383 	clz	r3, r3
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	f003 021f 	and.w	r2, r3, #31
 8007d62:	4613      	mov	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	3b1e      	subs	r3, #30
 8007d6a:	051b      	lsls	r3, r3, #20
 8007d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d70:	430b      	orrs	r3, r1
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	6892      	ldr	r2, [r2, #8]
 8007d76:	4619      	mov	r1, r3
 8007d78:	f7ff f8bb 	bl	8006ef2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <HAL_ADC_ConfigChannel+0x6e0>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80be 	beq.w	8007f06 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d92:	d004      	beq.n	8007d9e <HAL_ADC_ConfigChannel+0x6d6>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a04      	ldr	r2, [pc, #16]	; (8007dac <HAL_ADC_ConfigChannel+0x6e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10a      	bne.n	8007db4 <HAL_ADC_ConfigChannel+0x6ec>
 8007d9e:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <HAL_ADC_ConfigChannel+0x6e8>)
 8007da0:	e009      	b.n	8007db6 <HAL_ADC_ConfigChannel+0x6ee>
 8007da2:	bf00      	nop
 8007da4:	407f0000 	.word	0x407f0000
 8007da8:	80080000 	.word	0x80080000
 8007dac:	50000100 	.word	0x50000100
 8007db0:	50000300 	.word	0x50000300
 8007db4:	4b59      	ldr	r3, [pc, #356]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe ffb0 	bl	8006d1c <LL_ADC_GetCommonPathInternalCh>
 8007dbc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a56      	ldr	r2, [pc, #344]	; (8007f20 <HAL_ADC_ConfigChannel+0x858>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <HAL_ADC_ConfigChannel+0x70c>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a55      	ldr	r2, [pc, #340]	; (8007f24 <HAL_ADC_ConfigChannel+0x85c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d13a      	bne.n	8007e4a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d134      	bne.n	8007e4a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de8:	d005      	beq.n	8007df6 <HAL_ADC_ConfigChannel+0x72e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a4e      	ldr	r2, [pc, #312]	; (8007f28 <HAL_ADC_ConfigChannel+0x860>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	f040 8085 	bne.w	8007f00 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dfe:	d004      	beq.n	8007e0a <HAL_ADC_ConfigChannel+0x742>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a49      	ldr	r2, [pc, #292]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <HAL_ADC_ConfigChannel+0x746>
 8007e0a:	4a49      	ldr	r2, [pc, #292]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007e0c:	e000      	b.n	8007e10 <HAL_ADC_ConfigChannel+0x748>
 8007e0e:	4a43      	ldr	r2, [pc, #268]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7fe ff6b 	bl	8006cf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e20:	4b44      	ldr	r3, [pc, #272]	; (8007f34 <HAL_ADC_ConfigChannel+0x86c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	099b      	lsrs	r3, r3, #6
 8007e26:	4a44      	ldr	r2, [pc, #272]	; (8007f38 <HAL_ADC_ConfigChannel+0x870>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	4613      	mov	r3, r2
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e3a:	e002      	b.n	8007e42 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f9      	bne.n	8007e3c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e48:	e05a      	b.n	8007f00 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a3b      	ldr	r2, [pc, #236]	; (8007f3c <HAL_ADC_ConfigChannel+0x874>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d125      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x7d8>
 8007e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11f      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a31      	ldr	r2, [pc, #196]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d104      	bne.n	8007e74 <HAL_ADC_ConfigChannel+0x7ac>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a34      	ldr	r2, [pc, #208]	; (8007f40 <HAL_ADC_ConfigChannel+0x878>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d047      	beq.n	8007f04 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e7c:	d004      	beq.n	8007e88 <HAL_ADC_ConfigChannel+0x7c0>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2a      	ldr	r2, [pc, #168]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d101      	bne.n	8007e8c <HAL_ADC_ConfigChannel+0x7c4>
 8007e88:	4a29      	ldr	r2, [pc, #164]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007e8a:	e000      	b.n	8007e8e <HAL_ADC_ConfigChannel+0x7c6>
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe ff2c 	bl	8006cf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e9e:	e031      	b.n	8007f04 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <HAL_ADC_ConfigChannel+0x87c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d12d      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d127      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d022      	beq.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec8:	d004      	beq.n	8007ed4 <HAL_ADC_ConfigChannel+0x80c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d101      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x810>
 8007ed4:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007ed6:	e000      	b.n	8007eda <HAL_ADC_ConfigChannel+0x812>
 8007ed8:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fe ff06 	bl	8006cf6 <LL_ADC_SetCommonPathInternalCh>
 8007eea:	e00c      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef0:	f043 0220 	orr.w	r2, r3, #32
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007efe:	e002      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	37d8      	adds	r7, #216	; 0xd8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	50000700 	.word	0x50000700
 8007f20:	c3210000 	.word	0xc3210000
 8007f24:	90c00010 	.word	0x90c00010
 8007f28:	50000600 	.word	0x50000600
 8007f2c:	50000100 	.word	0x50000100
 8007f30:	50000300 	.word	0x50000300
 8007f34:	20000000 	.word	0x20000000
 8007f38:	053e2d63 	.word	0x053e2d63
 8007f3c:	c7520000 	.word	0xc7520000
 8007f40:	50000500 	.word	0x50000500
 8007f44:	cb840000 	.word	0xcb840000

08007f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff f8a3 	bl	80070a0 <LL_ADC_IsEnabled>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d14d      	bne.n	8007ffc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	4b28      	ldr	r3, [pc, #160]	; (8008008 <ADC_Enable+0xc0>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f72:	f043 0210 	orr.w	r2, r3, #16
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7e:	f043 0201 	orr.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e039      	b.n	8007ffe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff f85e 	bl	8007050 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007f94:	f7fe fe6e 	bl	8006c74 <HAL_GetTick>
 8007f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f9a:	e028      	b.n	8007fee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff f87d 	bl	80070a0 <LL_ADC_IsEnabled>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff f84d 	bl	8007050 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007fb6:	f7fe fe5d 	bl	8006c74 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d914      	bls.n	8007fee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d00d      	beq.n	8007fee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd6:	f043 0210 	orr.w	r2, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe2:	f043 0201 	orr.w	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e007      	b.n	8007ffe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d1cf      	bne.n	8007f9c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	8000003f 	.word	0x8000003f

0800800c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff f854 	bl	80070c6 <LL_ADC_IsDisableOngoing>
 800801e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff f83b 	bl	80070a0 <LL_ADC_IsEnabled>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d047      	beq.n	80080c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d144      	bne.n	80080c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030d 	and.w	r3, r3, #13
 8008040:	2b01      	cmp	r3, #1
 8008042:	d10c      	bne.n	800805e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff f815 	bl	8007078 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2203      	movs	r2, #3
 8008054:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008056:	f7fe fe0d 	bl	8006c74 <HAL_GetTick>
 800805a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800805c:	e029      	b.n	80080b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	f043 0210 	orr.w	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806e:	f043 0201 	orr.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e023      	b.n	80080c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800807a:	f7fe fdfb 	bl	8006c74 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d914      	bls.n	80080b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00d      	beq.n	80080b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809a:	f043 0210 	orr.w	r2, r3, #16
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a6:	f043 0201 	orr.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e007      	b.n	80080c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1dc      	bne.n	800807a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d14b      	bne.n	800817c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d021      	beq.n	8008142 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe feb6 	bl	8006e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d032      	beq.n	8008174 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d12b      	bne.n	8008174 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11f      	bne.n	8008174 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	f043 0201 	orr.w	r2, r3, #1
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008140:	e018      	b.n	8008174 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d111      	bne.n	8008174 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d105      	bne.n	8008174 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816c:	f043 0201 	orr.w	r2, r3, #1
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fa89 	bl	800768c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800817a:	e00e      	b.n	800819a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f7ff fa93 	bl	80076b4 <HAL_ADC_ErrorCallback>
}
 800818e:	e004      	b.n	800819a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fa75 	bl	80076a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081dc:	f043 0204 	orr.w	r2, r3, #4
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff fa65 	bl	80076b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <LL_ADC_IsEnabled>:
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d101      	bne.n	800820a <LL_ADC_IsEnabled+0x18>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <LL_ADC_IsEnabled+0x1a>
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <LL_ADC_StartCalibration>:
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800822a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008234:	4313      	orrs	r3, r2
 8008236:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	609a      	str	r2, [r3, #8]
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <LL_ADC_IsCalibrationOnGoing>:
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800825a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800825e:	d101      	bne.n	8008264 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <LL_ADC_REG_IsConversionOngoing>:
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b04      	cmp	r3, #4
 8008284:	d101      	bne.n	800828a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e04d      	b.n	8008350 <HAL_ADCEx_Calibration_Start+0xb8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff fea5 	bl	800800c <ADC_Disable>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d136      	bne.n	800833a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80082d4:	f023 0302 	bic.w	r3, r3, #2
 80082d8:	f043 0202 	orr.w	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff ff96 	bl	8008218 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80082ec:	e014      	b.n	8008318 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4a18      	ldr	r2, [pc, #96]	; (8008358 <HAL_ADCEx_Calibration_Start+0xc0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d90d      	bls.n	8008318 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008300:	f023 0312 	bic.w	r3, r3, #18
 8008304:	f043 0210 	orr.w	r2, r3, #16
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e01b      	b.n	8008350 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff94 	bl	800824a <LL_ADC_IsCalibrationOnGoing>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e2      	bne.n	80082ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	f023 0303 	bic.w	r3, r3, #3
 8008330:	f043 0201 	orr.w	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	65da      	str	r2, [r3, #92]	; 0x5c
 8008338:	e005      	b.n	8008346 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	f043 0210 	orr.w	r2, r3, #16
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	0004de01 	.word	0x0004de01

0800835c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b0a1      	sub	sp, #132	; 0x84
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008376:	2302      	movs	r3, #2
 8008378:	e0e7      	b.n	800854a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8008382:	2300      	movs	r3, #0
 8008384:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8008386:	2300      	movs	r3, #0
 8008388:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008392:	d102      	bne.n	800839a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008394:	4b6f      	ldr	r3, [pc, #444]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008396:	60bb      	str	r3, [r7, #8]
 8008398:	e009      	b.n	80083ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a6e      	ldr	r2, [pc, #440]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d102      	bne.n	80083aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80083a4:	4b6d      	ldr	r3, [pc, #436]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80083a6:	60bb      	str	r3, [r7, #8]
 80083a8:	e001      	b.n	80083ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80083aa:	2300      	movs	r3, #0
 80083ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10b      	bne.n	80083cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0be      	b.n	800854a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff ff4f 	bl	8008272 <LL_ADC_REG_IsConversionOngoing>
 80083d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff ff49 	bl	8008272 <LL_ADC_REG_IsConversionOngoing>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 80a0 	bne.w	8008528 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80083e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 809c 	bne.w	8008528 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083f8:	d004      	beq.n	8008404 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a55      	ldr	r2, [pc, #340]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d101      	bne.n	8008408 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008404:	4b56      	ldr	r3, [pc, #344]	; (8008560 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008406:	e000      	b.n	800840a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008408:	4b56      	ldr	r3, [pc, #344]	; (8008564 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800840a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d04b      	beq.n	80084ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	6859      	ldr	r1, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008426:	035b      	lsls	r3, r3, #13
 8008428:	430b      	orrs	r3, r1
 800842a:	431a      	orrs	r2, r3
 800842c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800842e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008438:	d004      	beq.n	8008444 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a45      	ldr	r2, [pc, #276]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d10f      	bne.n	8008464 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008444:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008448:	f7ff fed3 	bl	80081f2 <LL_ADC_IsEnabled>
 800844c:	4604      	mov	r4, r0
 800844e:	4841      	ldr	r0, [pc, #260]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008450:	f7ff fecf 	bl	80081f2 <LL_ADC_IsEnabled>
 8008454:	4603      	mov	r3, r0
 8008456:	4323      	orrs	r3, r4
 8008458:	2b00      	cmp	r3, #0
 800845a:	bf0c      	ite	eq
 800845c:	2301      	moveq	r3, #1
 800845e:	2300      	movne	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	e012      	b.n	800848a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008464:	483c      	ldr	r0, [pc, #240]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008466:	f7ff fec4 	bl	80081f2 <LL_ADC_IsEnabled>
 800846a:	4604      	mov	r4, r0
 800846c:	483b      	ldr	r0, [pc, #236]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800846e:	f7ff fec0 	bl	80081f2 <LL_ADC_IsEnabled>
 8008472:	4603      	mov	r3, r0
 8008474:	431c      	orrs	r4, r3
 8008476:	483c      	ldr	r0, [pc, #240]	; (8008568 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008478:	f7ff febb 	bl	80081f2 <LL_ADC_IsEnabled>
 800847c:	4603      	mov	r3, r0
 800847e:	4323      	orrs	r3, r4
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d056      	beq.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800848e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008496:	f023 030f 	bic.w	r3, r3, #15
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	6892      	ldr	r2, [r2, #8]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	431a      	orrs	r2, r3
 80084a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80084aa:	e047      	b.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80084ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c0:	d004      	beq.n	80084cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a23      	ldr	r2, [pc, #140]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d10f      	bne.n	80084ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80084cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80084d0:	f7ff fe8f 	bl	80081f2 <LL_ADC_IsEnabled>
 80084d4:	4604      	mov	r4, r0
 80084d6:	481f      	ldr	r0, [pc, #124]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80084d8:	f7ff fe8b 	bl	80081f2 <LL_ADC_IsEnabled>
 80084dc:	4603      	mov	r3, r0
 80084de:	4323      	orrs	r3, r4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e012      	b.n	8008512 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80084ec:	481a      	ldr	r0, [pc, #104]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80084ee:	f7ff fe80 	bl	80081f2 <LL_ADC_IsEnabled>
 80084f2:	4604      	mov	r4, r0
 80084f4:	4819      	ldr	r0, [pc, #100]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80084f6:	f7ff fe7c 	bl	80081f2 <LL_ADC_IsEnabled>
 80084fa:	4603      	mov	r3, r0
 80084fc:	431c      	orrs	r4, r3
 80084fe:	481a      	ldr	r0, [pc, #104]	; (8008568 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008500:	f7ff fe77 	bl	80081f2 <LL_ADC_IsEnabled>
 8008504:	4603      	mov	r3, r0
 8008506:	4323      	orrs	r3, r4
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf0c      	ite	eq
 800850c:	2301      	moveq	r3, #1
 800850e:	2300      	movne	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d012      	beq.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800851e:	f023 030f 	bic.w	r3, r3, #15
 8008522:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008524:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008526:	e009      	b.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800853a:	e000      	b.n	800853e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800853c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008546:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800854a:	4618      	mov	r0, r3
 800854c:	3784      	adds	r7, #132	; 0x84
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	50000100 	.word	0x50000100
 8008558:	50000400 	.word	0x50000400
 800855c:	50000500 	.word	0x50000500
 8008560:	50000300 	.word	0x50000300
 8008564:	50000700 	.word	0x50000700
 8008568:	50000600 	.word	0x50000600

0800856c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <LL_EXTI_EnableIT_0_31+0x20>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4904      	ldr	r1, [pc, #16]	; (800858c <LL_EXTI_EnableIT_0_31+0x20>)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4313      	orrs	r3, r2
 800857e:	600b      	str	r3, [r1, #0]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	40010400 	.word	0x40010400

08008590 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <LL_EXTI_EnableIT_32_63+0x20>)
 800859a:	6a1a      	ldr	r2, [r3, #32]
 800859c:	4904      	ldr	r1, [pc, #16]	; (80085b0 <LL_EXTI_EnableIT_32_63+0x20>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	620b      	str	r3, [r1, #32]
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	40010400 	.word	0x40010400

080085b4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	43db      	mvns	r3, r3
 80085c4:	4904      	ldr	r1, [pc, #16]	; (80085d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	600b      	str	r3, [r1, #0]
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010400 	.word	0x40010400

080085dc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <LL_EXTI_DisableIT_32_63+0x24>)
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	43db      	mvns	r3, r3
 80085ec:	4904      	ldr	r1, [pc, #16]	; (8008600 <LL_EXTI_DisableIT_32_63+0x24>)
 80085ee:	4013      	ands	r3, r2
 80085f0:	620b      	str	r3, [r1, #32]
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40010400 	.word	0x40010400

08008604 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <LL_EXTI_EnableEvent_0_31+0x20>)
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]

}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	40010400 	.word	0x40010400

08008628 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008630:	4b05      	ldr	r3, [pc, #20]	; (8008648 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008634:	4904      	ldr	r1, [pc, #16]	; (8008648 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4313      	orrs	r3, r2
 800863a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40010400 	.word	0x40010400

0800864c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	43db      	mvns	r3, r3
 800865c:	4904      	ldr	r1, [pc, #16]	; (8008670 <LL_EXTI_DisableEvent_0_31+0x24>)
 800865e:	4013      	ands	r3, r2
 8008660:	604b      	str	r3, [r1, #4]
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	40010400 	.word	0x40010400

08008674 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <LL_EXTI_DisableEvent_32_63+0x24>)
 800867e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	43db      	mvns	r3, r3
 8008684:	4904      	ldr	r1, [pc, #16]	; (8008698 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008686:	4013      	ands	r3, r2
 8008688:	624b      	str	r3, [r1, #36]	; 0x24
}
 800868a:	bf00      	nop
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40010400 	.word	0x40010400

0800869c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	4904      	ldr	r1, [pc, #16]	; (80086bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	608b      	str	r3, [r1, #8]

}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	40010400 	.word	0x40010400

080086c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80086ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086cc:	4904      	ldr	r1, [pc, #16]	; (80086e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40010400 	.word	0x40010400

080086e4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	43db      	mvns	r3, r3
 80086f4:	4904      	ldr	r1, [pc, #16]	; (8008708 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	608b      	str	r3, [r1, #8]

}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40010400 	.word	0x40010400

0800870c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008714:	4b06      	ldr	r3, [pc, #24]	; (8008730 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	43db      	mvns	r3, r3
 800871c:	4904      	ldr	r1, [pc, #16]	; (8008730 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800871e:	4013      	ands	r3, r2
 8008720:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40010400 	.word	0x40010400

08008734 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	4904      	ldr	r1, [pc, #16]	; (8008754 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4313      	orrs	r3, r2
 8008746:	60cb      	str	r3, [r1, #12]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	40010400 	.word	0x40010400

08008758 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	4904      	ldr	r1, [pc, #16]	; (8008778 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4313      	orrs	r3, r2
 800876a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40010400 	.word	0x40010400

0800877c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	43db      	mvns	r3, r3
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800878e:	4013      	ands	r3, r2
 8008790:	60cb      	str	r3, [r1, #12]
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010400 	.word	0x40010400

080087a4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80087ac:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	43db      	mvns	r3, r3
 80087b4:	4904      	ldr	r1, [pc, #16]	; (80087c8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40010400 	.word	0x40010400

080087cc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80087d4:	4a04      	ldr	r2, [pc, #16]	; (80087e8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6153      	str	r3, [r2, #20]
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40010400 	.word	0x40010400

080087ec <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40010400 	.word	0x40010400

0800880c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	77fb      	strb	r3, [r7, #31]
 8008826:	e181      	b.n	8008b2c <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008836:	d102      	bne.n	800883e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	77fb      	strb	r3, [r7, #31]
 800883c:	e176      	b.n	8008b2c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	7f5b      	ldrb	r3, [r3, #29]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d108      	bne.n	800885a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7fd fb51 	bl	8005efc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008864:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b90      	ldr	r3, [pc, #576]	; (8008acc <HAL_COMP_Init+0x2c0>)
 800888c:	4013      	ands	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6979      	ldr	r1, [r7, #20]
 8008894:	430b      	orrs	r3, r1
 8008896:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <HAL_COMP_Init+0xc8>
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d113      	bne.n	80088d4 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80088ac:	4b88      	ldr	r3, [pc, #544]	; (8008ad0 <HAL_COMP_Init+0x2c4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	099b      	lsrs	r3, r3, #6
 80088b2:	4a88      	ldr	r2, [pc, #544]	; (8008ad4 <HAL_COMP_Init+0x2c8>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	099b      	lsrs	r3, r3, #6
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80088c6:	e002      	b.n	80088ce <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f9      	bne.n	80088c8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a7f      	ldr	r2, [pc, #508]	; (8008ad8 <HAL_COMP_Init+0x2cc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d028      	beq.n	8008930 <HAL_COMP_Init+0x124>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a7e      	ldr	r2, [pc, #504]	; (8008adc <HAL_COMP_Init+0x2d0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d020      	beq.n	800892a <HAL_COMP_Init+0x11e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a7c      	ldr	r2, [pc, #496]	; (8008ae0 <HAL_COMP_Init+0x2d4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d018      	beq.n	8008924 <HAL_COMP_Init+0x118>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a7b      	ldr	r2, [pc, #492]	; (8008ae4 <HAL_COMP_Init+0x2d8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d010      	beq.n	800891e <HAL_COMP_Init+0x112>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a79      	ldr	r2, [pc, #484]	; (8008ae8 <HAL_COMP_Init+0x2dc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d008      	beq.n	8008918 <HAL_COMP_Init+0x10c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a78      	ldr	r2, [pc, #480]	; (8008aec <HAL_COMP_Init+0x2e0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d101      	bne.n	8008914 <HAL_COMP_Init+0x108>
 8008910:	2301      	movs	r3, #1
 8008912:	e00f      	b.n	8008934 <HAL_COMP_Init+0x128>
 8008914:	2302      	movs	r3, #2
 8008916:	e00d      	b.n	8008934 <HAL_COMP_Init+0x128>
 8008918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800891c:	e00a      	b.n	8008934 <HAL_COMP_Init+0x128>
 800891e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008922:	e007      	b.n	8008934 <HAL_COMP_Init+0x128>
 8008924:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008928:	e004      	b.n	8008934 <HAL_COMP_Init+0x128>
 800892a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800892e:	e001      	b.n	8008934 <HAL_COMP_Init+0x128>
 8008930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008934:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 80b6 	beq.w	8008ab0 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d011      	beq.n	8008974 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a65      	ldr	r2, [pc, #404]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d004      	beq.n	8008964 <HAL_COMP_Init+0x158>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a64      	ldr	r2, [pc, #400]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d103      	bne.n	800896c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8008964:	6938      	ldr	r0, [r7, #16]
 8008966:	f7ff feab 	bl	80086c0 <LL_EXTI_EnableRisingTrig_32_63>
 800896a:	e014      	b.n	8008996 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800896c:	6938      	ldr	r0, [r7, #16]
 800896e:	f7ff fe95 	bl	800869c <LL_EXTI_EnableRisingTrig_0_31>
 8008972:	e010      	b.n	8008996 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a5c      	ldr	r2, [pc, #368]	; (8008aec <HAL_COMP_Init+0x2e0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d004      	beq.n	8008988 <HAL_COMP_Init+0x17c>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a5b      	ldr	r2, [pc, #364]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d103      	bne.n	8008990 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8008988:	6938      	ldr	r0, [r7, #16]
 800898a:	f7ff febf 	bl	800870c <LL_EXTI_DisableRisingTrig_32_63>
 800898e:	e002      	b.n	8008996 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008990:	6938      	ldr	r0, [r7, #16]
 8008992:	f7ff fea7 	bl	80086e4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d011      	beq.n	80089c6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a51      	ldr	r2, [pc, #324]	; (8008aec <HAL_COMP_Init+0x2e0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d004      	beq.n	80089b6 <HAL_COMP_Init+0x1aa>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a4f      	ldr	r2, [pc, #316]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d103      	bne.n	80089be <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80089b6:	6938      	ldr	r0, [r7, #16]
 80089b8:	f7ff fece 	bl	8008758 <LL_EXTI_EnableFallingTrig_32_63>
 80089bc:	e014      	b.n	80089e8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80089be:	6938      	ldr	r0, [r7, #16]
 80089c0:	f7ff feb8 	bl	8008734 <LL_EXTI_EnableFallingTrig_0_31>
 80089c4:	e010      	b.n	80089e8 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a48      	ldr	r2, [pc, #288]	; (8008aec <HAL_COMP_Init+0x2e0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d004      	beq.n	80089da <HAL_COMP_Init+0x1ce>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a46      	ldr	r2, [pc, #280]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d103      	bne.n	80089e2 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f7ff fee2 	bl	80087a4 <LL_EXTI_DisableFallingTrig_32_63>
 80089e0:	e002      	b.n	80089e8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f7ff feca 	bl	800877c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3f      	ldr	r2, [pc, #252]	; (8008aec <HAL_COMP_Init+0x2e0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_COMP_Init+0x1f0>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a3e      	ldr	r2, [pc, #248]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d103      	bne.n	8008a04 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80089fc:	6938      	ldr	r0, [r7, #16]
 80089fe:	f7ff fef5 	bl	80087ec <LL_EXTI_ClearFlag_32_63>
 8008a02:	e002      	b.n	8008a0a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8008a04:	6938      	ldr	r0, [r7, #16]
 8008a06:	f7ff fee1 	bl	80087cc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d011      	beq.n	8008a3a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a34      	ldr	r2, [pc, #208]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_COMP_Init+0x21e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a32      	ldr	r2, [pc, #200]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d103      	bne.n	8008a32 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8008a2a:	6938      	ldr	r0, [r7, #16]
 8008a2c:	f7ff fdfc 	bl	8008628 <LL_EXTI_EnableEvent_32_63>
 8008a30:	e014      	b.n	8008a5c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8008a32:	6938      	ldr	r0, [r7, #16]
 8008a34:	f7ff fde6 	bl	8008604 <LL_EXTI_EnableEvent_0_31>
 8008a38:	e010      	b.n	8008a5c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a2b      	ldr	r2, [pc, #172]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_COMP_Init+0x242>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a29      	ldr	r2, [pc, #164]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d103      	bne.n	8008a56 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8008a4e:	6938      	ldr	r0, [r7, #16]
 8008a50:	f7ff fe10 	bl	8008674 <LL_EXTI_DisableEvent_32_63>
 8008a54:	e002      	b.n	8008a5c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f7ff fdf8 	bl	800864c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d011      	beq.n	8008a8c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1f      	ldr	r2, [pc, #124]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d004      	beq.n	8008a7c <HAL_COMP_Init+0x270>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1e      	ldr	r2, [pc, #120]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d103      	bne.n	8008a84 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8008a7c:	6938      	ldr	r0, [r7, #16]
 8008a7e:	f7ff fd87 	bl	8008590 <LL_EXTI_EnableIT_32_63>
 8008a82:	e04b      	b.n	8008b1c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8008a84:	6938      	ldr	r0, [r7, #16]
 8008a86:	f7ff fd71 	bl	800856c <LL_EXTI_EnableIT_0_31>
 8008a8a:	e047      	b.n	8008b1c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a16      	ldr	r2, [pc, #88]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d004      	beq.n	8008aa0 <HAL_COMP_Init+0x294>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d103      	bne.n	8008aa8 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8008aa0:	6938      	ldr	r0, [r7, #16]
 8008aa2:	f7ff fd9b 	bl	80085dc <LL_EXTI_DisableIT_32_63>
 8008aa6:	e039      	b.n	8008b1c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8008aa8:	6938      	ldr	r0, [r7, #16]
 8008aaa:	f7ff fd83 	bl	80085b4 <LL_EXTI_DisableIT_0_31>
 8008aae:	e035      	b.n	8008b1c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a0d      	ldr	r2, [pc, #52]	; (8008aec <HAL_COMP_Init+0x2e0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d004      	beq.n	8008ac4 <HAL_COMP_Init+0x2b8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a0c      	ldr	r2, [pc, #48]	; (8008af0 <HAL_COMP_Init+0x2e4>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d117      	bne.n	8008af4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8008ac4:	6938      	ldr	r0, [r7, #16]
 8008ac6:	f7ff fdd5 	bl	8008674 <LL_EXTI_DisableEvent_32_63>
 8008aca:	e016      	b.n	8008afa <HAL_COMP_Init+0x2ee>
 8008acc:	ff007e0f 	.word	0xff007e0f
 8008ad0:	20000000 	.word	0x20000000
 8008ad4:	053e2d63 	.word	0x053e2d63
 8008ad8:	40010200 	.word	0x40010200
 8008adc:	40010204 	.word	0x40010204
 8008ae0:	40010208 	.word	0x40010208
 8008ae4:	4001020c 	.word	0x4001020c
 8008ae8:	40010210 	.word	0x40010210
 8008aec:	40010214 	.word	0x40010214
 8008af0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8008af4:	6938      	ldr	r0, [r7, #16]
 8008af6:	f7ff fda9 	bl	800864c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <HAL_COMP_Init+0x32c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_COMP_Init+0x302>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a0c      	ldr	r2, [pc, #48]	; (8008b3c <HAL_COMP_Init+0x330>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d103      	bne.n	8008b16 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8008b0e:	6938      	ldr	r0, [r7, #16]
 8008b10:	f7ff fd64 	bl	80085dc <LL_EXTI_DisableIT_32_63>
 8008b14:	e002      	b.n	8008b1c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f7ff fd4c 	bl	80085b4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7f5b      	ldrb	r3, [r3, #29]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d102      	bne.n	8008b2c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8008b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40010214 	.word	0x40010214
 8008b3c:	40010218 	.word	0x40010218

08008b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <__NVIC_SetPriorityGrouping+0x44>)
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b72:	4a04      	ldr	r2, [pc, #16]	; (8008b84 <__NVIC_SetPriorityGrouping+0x44>)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	60d3      	str	r3, [r2, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	e000ed00 	.word	0xe000ed00

08008b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b8c:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	f003 0307 	and.w	r3, r3, #7
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	e000ed00 	.word	0xe000ed00

08008ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	db0b      	blt.n	8008bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	f003 021f 	and.w	r2, r3, #31
 8008bbc:	4907      	ldr	r1, [pc, #28]	; (8008bdc <__NVIC_EnableIRQ+0x38>)
 8008bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8008bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	e000e100 	.word	0xe000e100

08008be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	db0a      	blt.n	8008c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	490c      	ldr	r1, [pc, #48]	; (8008c2c <__NVIC_SetPriority+0x4c>)
 8008bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bfe:	0112      	lsls	r2, r2, #4
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	440b      	add	r3, r1
 8008c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c08:	e00a      	b.n	8008c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	4908      	ldr	r1, [pc, #32]	; (8008c30 <__NVIC_SetPriority+0x50>)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	3b04      	subs	r3, #4
 8008c18:	0112      	lsls	r2, r2, #4
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	761a      	strb	r2, [r3, #24]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	e000e100 	.word	0xe000e100
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b089      	sub	sp, #36	; 0x24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f1c3 0307 	rsb	r3, r3, #7
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	bf28      	it	cs
 8008c52:	2304      	movcs	r3, #4
 8008c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	2b06      	cmp	r3, #6
 8008c5c:	d902      	bls.n	8008c64 <NVIC_EncodePriority+0x30>
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3b03      	subs	r3, #3
 8008c62:	e000      	b.n	8008c66 <NVIC_EncodePriority+0x32>
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c68:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43da      	mvns	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	401a      	ands	r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	fa01 f303 	lsl.w	r3, r1, r3
 8008c86:	43d9      	mvns	r1, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c8c:	4313      	orrs	r3, r2
         );
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3724      	adds	r7, #36	; 0x24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cac:	d301      	bcc.n	8008cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e00f      	b.n	8008cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cb2:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <SysTick_Config+0x40>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cba:	210f      	movs	r1, #15
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	f7ff ff8e 	bl	8008be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <SysTick_Config+0x40>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <SysTick_Config+0x40>)
 8008ccc:	2207      	movs	r2, #7
 8008cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	e000e010 	.word	0xe000e010

08008ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff29 	bl	8008b40 <__NVIC_SetPriorityGrouping>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
 8008d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d04:	f7ff ff40 	bl	8008b88 <__NVIC_GetPriorityGrouping>
 8008d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	6978      	ldr	r0, [r7, #20]
 8008d10:	f7ff ff90 	bl	8008c34 <NVIC_EncodePriority>
 8008d14:	4602      	mov	r2, r0
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff ff5f 	bl	8008be0 <__NVIC_SetPriority>
}
 8008d22:	bf00      	nop
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	4603      	mov	r3, r0
 8008d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ff33 	bl	8008ba4 <__NVIC_EnableIRQ>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff ffa4 	bl	8008c9c <SysTick_Config>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e014      	b.n	8008d9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	791b      	ldrb	r3, [r3, #4]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7fd f951 	bl	8006028 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08a      	sub	sp, #40	; 0x28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	795b      	ldrb	r3, [r3, #5]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_DAC_ConfigChannel+0x18>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e192      	b.n	80090e2 <HAL_DAC_ConfigChannel+0x33e>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d174      	bne.n	8008eba <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008dd0:	f7fd ff50 	bl	8006c74 <HAL_GetTick>
 8008dd4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d134      	bne.n	8008e46 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008ddc:	e011      	b.n	8008e02 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008dde:	f7fd ff49 	bl	8006c74 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d90a      	bls.n	8008e02 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f043 0208 	orr.w	r2, r3, #8
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e16f      	b.n	80090e2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e6      	bne.n	8008dde <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8008e10:	2001      	movs	r0, #1
 8008e12:	f7fd ff3b 	bl	8006c8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8008e20:	e01e      	b.n	8008e60 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008e22:	f7fd ff27 	bl	8006c74 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d90a      	bls.n	8008e46 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f043 0208 	orr.w	r2, r3, #8
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e14d      	b.n	80090e2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dbe8      	blt.n	8008e22 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8008e50:	2001      	movs	r0, #1
 8008e52:	f7fd ff1b 	bl	8006c8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	43db      	mvns	r3, r3
 8008e76:	ea02 0103 	and.w	r1, r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	409a      	lsls	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	21ff      	movs	r1, #255	; 0xff
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	ea02 0103 	and.w	r1, r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d11d      	bne.n	8008efe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	221f      	movs	r2, #31
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed6:	43db      	mvns	r3, r3
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	4013      	ands	r3, r2
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2207      	movs	r2, #7
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f16:	4013      	ands	r3, r2
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d102      	bne.n	8008f28 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	623b      	str	r3, [r7, #32]
 8008f26:	e00f      	b.n	8008f48 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d102      	bne.n	8008f36 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008f30:	2301      	movs	r3, #1
 8008f32:	623b      	str	r3, [r7, #32]
 8008f34:	e008      	b.n	8008f48 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	623b      	str	r3, [r7, #32]
 8008f42:	e001      	b.n	8008f48 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	6a3a      	ldr	r2, [r7, #32]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f62:	fa02 f303 	lsl.w	r3, r2, r3
 8008f66:	43db      	mvns	r3, r3
 8008f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	791b      	ldrb	r3, [r3, #4]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d102      	bne.n	8008f7c <HAL_DAC_ConfigChannel+0x1d8>
 8008f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f7a:	e000      	b.n	8008f7e <HAL_DAC_ConfigChannel+0x1da>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f92:	43db      	mvns	r3, r3
 8008f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f96:	4013      	ands	r3, r2
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	795b      	ldrb	r3, [r3, #5]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d102      	bne.n	8008fa8 <HAL_DAC_ConfigChannel+0x204>
 8008fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fa6:	e000      	b.n	8008faa <HAL_DAC_ConfigChannel+0x206>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d114      	bne.n	8008fea <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008fc0:	f004 f94a 	bl	800d258 <HAL_RCC_GetHCLKFreq>
 8008fc4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4a48      	ldr	r2, [pc, #288]	; (80090ec <HAL_DAC_ConfigChannel+0x348>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d904      	bls.n	8008fd8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd6:	e00f      	b.n	8008ff8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	4a45      	ldr	r2, [pc, #276]	; (80090f0 <HAL_DAC_ConfigChannel+0x34c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d90a      	bls.n	8008ff6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe8:	e006      	b.n	8008ff8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	e000      	b.n	8008ff8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008ff6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009006:	4313      	orrs	r3, r2
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6819      	ldr	r1, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43da      	mvns	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	400a      	ands	r2, r1
 800902e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	43db      	mvns	r3, r3
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	4013      	ands	r3, r2
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	4313      	orrs	r3, r2
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6819      	ldr	r1, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	22c0      	movs	r2, #192	; 0xc0
 800907c:	fa02 f303 	lsl.w	r3, r2, r3
 8009080:	43da      	mvns	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	400a      	ands	r2, r1
 8009088:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	089b      	lsrs	r3, r3, #2
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	089b      	lsrs	r3, r3, #2
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	43db      	mvns	r3, r3
 80090be:	ea02 0103 	and.w	r1, r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	409a      	lsls	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3728      	adds	r7, #40	; 0x28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	09896800 	.word	0x09896800
 80090f0:	04c4b400 	.word	0x04c4b400

080090f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e08d      	b.n	8009222 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_DMA_Init+0x138>)
 800910e:	429a      	cmp	r2, r3
 8009110:	d80f      	bhi.n	8009132 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	4b45      	ldr	r3, [pc, #276]	; (8009230 <HAL_DMA_Init+0x13c>)
 800911a:	4413      	add	r3, r2
 800911c:	4a45      	ldr	r2, [pc, #276]	; (8009234 <HAL_DMA_Init+0x140>)
 800911e:	fba2 2303 	umull	r2, r3, r2, r3
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	009a      	lsls	r2, r3, #2
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a42      	ldr	r2, [pc, #264]	; (8009238 <HAL_DMA_Init+0x144>)
 800912e:	641a      	str	r2, [r3, #64]	; 0x40
 8009130:	e00e      	b.n	8009150 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	4b40      	ldr	r3, [pc, #256]	; (800923c <HAL_DMA_Init+0x148>)
 800913a:	4413      	add	r3, r2
 800913c:	4a3d      	ldr	r2, [pc, #244]	; (8009234 <HAL_DMA_Init+0x140>)
 800913e:	fba2 2303 	umull	r2, r3, r2, r3
 8009142:	091b      	lsrs	r3, r3, #4
 8009144:	009a      	lsls	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a3c      	ldr	r2, [pc, #240]	; (8009240 <HAL_DMA_Init+0x14c>)
 800914e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800918c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa76 	bl	8009694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b0:	d102      	bne.n	80091b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d010      	beq.n	80091f8 <HAL_DMA_Init+0x104>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d80c      	bhi.n	80091f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa96 	bl	8009710 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	e008      	b.n	800920a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40020407 	.word	0x40020407
 8009230:	bffdfff8 	.word	0xbffdfff8
 8009234:	cccccccd 	.word	0xcccccccd
 8009238:	40020000 	.word	0x40020000
 800923c:	bffdfbf8 	.word	0xbffdfbf8
 8009240:	40020400 	.word	0x40020400

08009244 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_DMA_Start_IT+0x20>
 8009260:	2302      	movs	r3, #2
 8009262:	e066      	b.n	8009332 <HAL_DMA_Start_IT+0xee>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b01      	cmp	r3, #1
 8009276:	d155      	bne.n	8009324 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f9bb 	bl	8009618 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d008      	beq.n	80092bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 020e 	orr.w	r2, r2, #14
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e00f      	b.n	80092dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0204 	bic.w	r2, r2, #4
 80092ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 020a 	orr.w	r2, r2, #10
 80092da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009310:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0201 	orr.w	r2, r2, #1
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	e005      	b.n	8009330 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800932c:	2302      	movs	r3, #2
 800932e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800933a:	b480      	push	{r7}
 800933c:	b085      	sub	sp, #20
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d005      	beq.n	800935e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2204      	movs	r2, #4
 8009356:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
 800935c:	e037      	b.n	80093ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 020e 	bic.w	r2, r2, #14
 800936c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800937c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0201 	bic.w	r2, r2, #1
 800938c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	f003 021f 	and.w	r2, r3, #31
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	2101      	movs	r1, #1
 800939c:	fa01 f202 	lsl.w	r2, r1, r2
 80093a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80093aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80093cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d00d      	beq.n	8009420 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	e047      	b.n	80094b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 020e 	bic.w	r2, r2, #14
 800942e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800944a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800944e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009454:	f003 021f 	and.w	r2, r3, #31
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f202 	lsl.w	r2, r1, r2
 8009462:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800946c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00c      	beq.n	8009490 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800948e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
    }
  }
  return status;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d6:	f003 031f 	and.w	r3, r3, #31
 80094da:	2204      	movs	r2, #4
 80094dc:	409a      	lsls	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4013      	ands	r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d026      	beq.n	8009534 <HAL_DMA_IRQHandler+0x7a>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d021      	beq.n	8009534 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0204 	bic.w	r2, r2, #4
 800950c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	f003 021f 	and.w	r2, r3, #31
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	2104      	movs	r1, #4
 800951c:	fa01 f202 	lsl.w	r2, r1, r2
 8009520:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	2b00      	cmp	r3, #0
 8009528:	d071      	beq.n	800960e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009532:	e06c      	b.n	800960e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009538:	f003 031f 	and.w	r3, r3, #31
 800953c:	2202      	movs	r2, #2
 800953e:	409a      	lsls	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4013      	ands	r3, r2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02e      	beq.n	80095a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	2b00      	cmp	r3, #0
 8009550:	d029      	beq.n	80095a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 020a 	bic.w	r2, r2, #10
 800956e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957c:	f003 021f 	and.w	r2, r3, #31
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	2102      	movs	r1, #2
 8009586:	fa01 f202 	lsl.w	r2, r1, r2
 800958a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d038      	beq.n	800960e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80095a4:	e033      	b.n	800960e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	2208      	movs	r2, #8
 80095b0:	409a      	lsls	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4013      	ands	r3, r2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02a      	beq.n	8009610 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d025      	beq.n	8009610 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 020e 	bic.w	r2, r2, #14
 80095d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d8:	f003 021f 	and.w	r2, r3, #31
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	2101      	movs	r1, #1
 80095e2:	fa01 f202 	lsl.w	r2, r1, r2
 80095e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800960e:	bf00      	nop
 8009610:	bf00      	nop
}
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800962e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009640:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	f003 021f 	and.w	r2, r3, #31
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	2101      	movs	r1, #1
 8009650:	fa01 f202 	lsl.w	r2, r1, r2
 8009654:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	2b10      	cmp	r3, #16
 8009664:	d108      	bne.n	8009678 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009676:	e007      	b.n	8009688 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	60da      	str	r2, [r3, #12]
}
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b16      	ldr	r3, [pc, #88]	; (80096fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d802      	bhi.n	80096ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80096a8:	4b15      	ldr	r3, [pc, #84]	; (8009700 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e001      	b.n	80096b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80096ae:	4b15      	ldr	r3, [pc, #84]	; (8009704 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80096b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	3b08      	subs	r3, #8
 80096be:	4a12      	ldr	r2, [pc, #72]	; (8009708 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80096c0:	fba2 2303 	umull	r2, r3, r2, r3
 80096c4:	091b      	lsrs	r3, r3, #4
 80096c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096cc:	089b      	lsrs	r3, r3, #2
 80096ce:	009a      	lsls	r2, r3, #2
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4413      	add	r3, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a0b      	ldr	r2, [pc, #44]	; (800970c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80096de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2201      	movs	r2, #1
 80096e8:	409a      	lsls	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80096ee:	bf00      	nop
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40020407 	.word	0x40020407
 8009700:	40020800 	.word	0x40020800
 8009704:	40020820 	.word	0x40020820
 8009708:	cccccccd 	.word	0xcccccccd
 800970c:	40020880 	.word	0x40020880

08009710 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	461a      	mov	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a08      	ldr	r2, [pc, #32]	; (8009754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009732:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3b01      	subs	r3, #1
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	2201      	movs	r2, #1
 800973e:	409a      	lsls	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009744:	bf00      	nop
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	1000823f 	.word	0x1000823f
 8009754:	40020940 	.word	0x40020940

08009758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009766:	e15a      	b.n	8009a1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	2101      	movs	r1, #1
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	fa01 f303 	lsl.w	r3, r1, r3
 8009774:	4013      	ands	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 814c 	beq.w	8009a18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	2b01      	cmp	r3, #1
 800978a:	d005      	beq.n	8009798 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009794:	2b02      	cmp	r3, #2
 8009796:	d130      	bne.n	80097fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	2203      	movs	r2, #3
 80097a4:	fa02 f303 	lsl.w	r3, r2, r3
 80097a8:	43db      	mvns	r3, r3
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4013      	ands	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097ce:	2201      	movs	r2, #1
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	43db      	mvns	r3, r3
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4013      	ands	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	091b      	lsrs	r3, r3, #4
 80097e4:	f003 0201 	and.w	r2, r3, #1
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	fa02 f303 	lsl.w	r3, r2, r3
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b03      	cmp	r3, #3
 8009804:	d017      	beq.n	8009836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	2203      	movs	r2, #3
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43db      	mvns	r3, r3
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4013      	ands	r3, r2
 800981c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	fa02 f303 	lsl.w	r3, r2, r3
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f003 0303 	and.w	r3, r3, #3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d123      	bne.n	800988a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	08da      	lsrs	r2, r3, #3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3208      	adds	r2, #8
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f003 0307 	and.w	r3, r3, #7
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	220f      	movs	r2, #15
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	43db      	mvns	r3, r3
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4013      	ands	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	691a      	ldr	r2, [r3, #16]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	08da      	lsrs	r2, r3, #3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3208      	adds	r2, #8
 8009884:	6939      	ldr	r1, [r7, #16]
 8009886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	2203      	movs	r2, #3
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	43db      	mvns	r3, r3
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4013      	ands	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f003 0203 	and.w	r2, r3, #3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 80a6 	beq.w	8009a18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098cc:	4b5b      	ldr	r3, [pc, #364]	; (8009a3c <HAL_GPIO_Init+0x2e4>)
 80098ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d0:	4a5a      	ldr	r2, [pc, #360]	; (8009a3c <HAL_GPIO_Init+0x2e4>)
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	6613      	str	r3, [r2, #96]	; 0x60
 80098d8:	4b58      	ldr	r3, [pc, #352]	; (8009a3c <HAL_GPIO_Init+0x2e4>)
 80098da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	60bb      	str	r3, [r7, #8]
 80098e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80098e4:	4a56      	ldr	r2, [pc, #344]	; (8009a40 <HAL_GPIO_Init+0x2e8>)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	3302      	adds	r3, #2
 80098ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	220f      	movs	r2, #15
 80098fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009900:	43db      	mvns	r3, r3
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4013      	ands	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800990e:	d01f      	beq.n	8009950 <HAL_GPIO_Init+0x1f8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a4c      	ldr	r2, [pc, #304]	; (8009a44 <HAL_GPIO_Init+0x2ec>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d019      	beq.n	800994c <HAL_GPIO_Init+0x1f4>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a4b      	ldr	r2, [pc, #300]	; (8009a48 <HAL_GPIO_Init+0x2f0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d013      	beq.n	8009948 <HAL_GPIO_Init+0x1f0>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a4a      	ldr	r2, [pc, #296]	; (8009a4c <HAL_GPIO_Init+0x2f4>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00d      	beq.n	8009944 <HAL_GPIO_Init+0x1ec>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a49      	ldr	r2, [pc, #292]	; (8009a50 <HAL_GPIO_Init+0x2f8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d007      	beq.n	8009940 <HAL_GPIO_Init+0x1e8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a48      	ldr	r2, [pc, #288]	; (8009a54 <HAL_GPIO_Init+0x2fc>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d101      	bne.n	800993c <HAL_GPIO_Init+0x1e4>
 8009938:	2305      	movs	r3, #5
 800993a:	e00a      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 800993c:	2306      	movs	r3, #6
 800993e:	e008      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 8009940:	2304      	movs	r3, #4
 8009942:	e006      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 8009944:	2303      	movs	r3, #3
 8009946:	e004      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 8009948:	2302      	movs	r3, #2
 800994a:	e002      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 800994c:	2301      	movs	r3, #1
 800994e:	e000      	b.n	8009952 <HAL_GPIO_Init+0x1fa>
 8009950:	2300      	movs	r3, #0
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	f002 0203 	and.w	r2, r2, #3
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	4093      	lsls	r3, r2
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009962:	4937      	ldr	r1, [pc, #220]	; (8009a40 <HAL_GPIO_Init+0x2e8>)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	089b      	lsrs	r3, r3, #2
 8009968:	3302      	adds	r3, #2
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009970:	4b39      	ldr	r3, [pc, #228]	; (8009a58 <HAL_GPIO_Init+0x300>)
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	43db      	mvns	r3, r3
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4013      	ands	r3, r2
 800997e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009994:	4a30      	ldr	r2, [pc, #192]	; (8009a58 <HAL_GPIO_Init+0x300>)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800999a:	4b2f      	ldr	r3, [pc, #188]	; (8009a58 <HAL_GPIO_Init+0x300>)
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	43db      	mvns	r3, r3
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4013      	ands	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099be:	4a26      	ldr	r2, [pc, #152]	; (8009a58 <HAL_GPIO_Init+0x300>)
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80099c4:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <HAL_GPIO_Init+0x300>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	43db      	mvns	r3, r3
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4013      	ands	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80099e8:	4a1b      	ldr	r2, [pc, #108]	; (8009a58 <HAL_GPIO_Init+0x300>)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <HAL_GPIO_Init+0x300>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	43db      	mvns	r3, r3
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	4013      	ands	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a12:	4a11      	ldr	r2, [pc, #68]	; (8009a58 <HAL_GPIO_Init+0x300>)
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f47f ae9d 	bne.w	8009768 <HAL_GPIO_Init+0x10>
  }
}
 8009a2e:	bf00      	nop
 8009a30:	bf00      	nop
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	40021000 	.word	0x40021000
 8009a40:	40010000 	.word	0x40010000
 8009a44:	48000400 	.word	0x48000400
 8009a48:	48000800 	.word	0x48000800
 8009a4c:	48000c00 	.word	0x48000c00
 8009a50:	48001000 	.word	0x48001000
 8009a54:	48001400 	.word	0x48001400
 8009a58:	40010400 	.word	0x40010400

08009a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	807b      	strh	r3, [r7, #2]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a6c:	787b      	ldrb	r3, [r7, #1]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a72:	887a      	ldrh	r2, [r7, #2]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a78:	e002      	b.n	8009a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a7a:	887a      	ldrh	r2, [r7, #2]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a9e:	887a      	ldrh	r2, [r7, #2]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	041a      	lsls	r2, r3, #16
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	43d9      	mvns	r1, r3
 8009aaa:	887b      	ldrh	r3, [r7, #2]
 8009aac:	400b      	ands	r3, r1
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	619a      	str	r2, [r3, #24]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e081      	b.n	8009bd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d106      	bne.n	8009aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fc fafa 	bl	80060e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2224      	movs	r2, #36	; 0x24
 8009af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0201 	bic.w	r2, r2, #1
 8009b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d107      	bne.n	8009b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b36:	609a      	str	r2, [r3, #8]
 8009b38:	e006      	b.n	8009b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d104      	bne.n	8009b5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	69d9      	ldr	r1, [r3, #28]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a1a      	ldr	r2, [r3, #32]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	461a      	mov	r2, r3
 8009bec:	460b      	mov	r3, r1
 8009bee:	817b      	strh	r3, [r7, #10]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	f040 80da 	bne.w	8009db6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_I2C_Master_Transmit+0x30>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e0d3      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c18:	f7fd f82c 	bl	8006c74 <HAL_GetTick>
 8009c1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	2319      	movs	r3, #25
 8009c24:	2201      	movs	r2, #1
 8009c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fbee 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e0be      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2221      	movs	r2, #33	; 0x21
 8009c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2210      	movs	r2, #16
 8009c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	893a      	ldrh	r2, [r7, #8]
 8009c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2bff      	cmp	r3, #255	; 0xff
 8009c6a:	d90e      	bls.n	8009c8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	8979      	ldrh	r1, [r7, #10]
 8009c7a:	4b51      	ldr	r3, [pc, #324]	; (8009dc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fd6a 	bl	800a75c <I2C_TransferConfig>
 8009c88:	e06c      	b.n	8009d64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	8979      	ldrh	r1, [r7, #10]
 8009c9c:	4b48      	ldr	r3, [pc, #288]	; (8009dc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fd59 	bl	800a75c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009caa:	e05b      	b.n	8009d64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	6a39      	ldr	r1, [r7, #32]
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 fbeb 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e07b      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	781a      	ldrb	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d034      	beq.n	8009d64 <HAL_I2C_Master_Transmit+0x184>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d130      	bne.n	8009d64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2180      	movs	r1, #128	; 0x80
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fb7d 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e04d      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	2bff      	cmp	r3, #255	; 0xff
 8009d24:	d90e      	bls.n	8009d44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	22ff      	movs	r2, #255	; 0xff
 8009d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	8979      	ldrh	r1, [r7, #10]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 fd0d 	bl	800a75c <I2C_TransferConfig>
 8009d42:	e00f      	b.n	8009d64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	8979      	ldrh	r1, [r7, #10]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 fcfc 	bl	800a75c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d19e      	bne.n	8009cac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	6a39      	ldr	r1, [r7, #32]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fbca 	bl	800a50c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e01a      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2220      	movs	r2, #32
 8009d88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6859      	ldr	r1, [r3, #4]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <HAL_I2C_Master_Transmit+0x1e4>)
 8009d96:	400b      	ands	r3, r1
 8009d98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e000      	b.n	8009db8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009db6:	2302      	movs	r3, #2
  }
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	80002000 	.word	0x80002000
 8009dc4:	fe00e800 	.word	0xfe00e800

08009dc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	817b      	strh	r3, [r7, #10]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	813b      	strh	r3, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	f040 80f9 	bne.w	8009fe2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <HAL_I2C_Mem_Write+0x34>
 8009df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d105      	bne.n	8009e08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0ed      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d101      	bne.n	8009e16 <HAL_I2C_Mem_Write+0x4e>
 8009e12:	2302      	movs	r3, #2
 8009e14:	e0e6      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e1e:	f7fc ff29 	bl	8006c74 <HAL_GetTick>
 8009e22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2319      	movs	r3, #25
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 faeb 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e0d1      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2221      	movs	r2, #33	; 0x21
 8009e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2240      	movs	r2, #64	; 0x40
 8009e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a3a      	ldr	r2, [r7, #32]
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e68:	88f8      	ldrh	r0, [r7, #6]
 8009e6a:	893a      	ldrh	r2, [r7, #8]
 8009e6c:	8979      	ldrh	r1, [r7, #10]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4603      	mov	r3, r0
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f9fb 	bl	800a274 <I2C_RequestMemoryWrite>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0a9      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	2bff      	cmp	r3, #255	; 0xff
 8009e98:	d90e      	bls.n	8009eb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	22ff      	movs	r2, #255	; 0xff
 8009e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	8979      	ldrh	r1, [r7, #10]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fc53 	bl	800a75c <I2C_TransferConfig>
 8009eb6:	e00f      	b.n	8009ed8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	8979      	ldrh	r1, [r7, #10]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fc42 	bl	800a75c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fad5 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e07b      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d034      	beq.n	8009f90 <HAL_I2C_Mem_Write+0x1c8>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d130      	bne.n	8009f90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	2200      	movs	r2, #0
 8009f36:	2180      	movs	r1, #128	; 0x80
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 fa67 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e04d      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2bff      	cmp	r3, #255	; 0xff
 8009f50:	d90e      	bls.n	8009f70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	22ff      	movs	r2, #255	; 0xff
 8009f56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	8979      	ldrh	r1, [r7, #10]
 8009f60:	2300      	movs	r3, #0
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fbf7 	bl	800a75c <I2C_TransferConfig>
 8009f6e:	e00f      	b.n	8009f90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	8979      	ldrh	r1, [r7, #10]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fbe6 	bl	800a75c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d19e      	bne.n	8009ed8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fab4 	bl	800a50c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e01a      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6859      	ldr	r1, [r3, #4]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <HAL_I2C_Mem_Write+0x224>)
 8009fc2:	400b      	ands	r3, r1
 8009fc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e000      	b.n	8009fe4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009fe2:	2302      	movs	r3, #2
  }
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	fe00e800 	.word	0xfe00e800

08009ff0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4603      	mov	r3, r0
 800a000:	817b      	strh	r3, [r7, #10]
 800a002:	460b      	mov	r3, r1
 800a004:	813b      	strh	r3, [r7, #8]
 800a006:	4613      	mov	r3, r2
 800a008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b20      	cmp	r3, #32
 800a014:	f040 80fd 	bne.w	800a212 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <HAL_I2C_Mem_Read+0x34>
 800a01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d105      	bne.n	800a030 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0f1      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_I2C_Mem_Read+0x4e>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e0ea      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a046:	f7fc fe15 	bl	8006c74 <HAL_GetTick>
 800a04a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	2319      	movs	r3, #25
 800a052:	2201      	movs	r2, #1
 800a054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f9d7 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e0d5      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2222      	movs	r2, #34	; 0x22
 800a06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2240      	movs	r2, #64	; 0x40
 800a074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6a3a      	ldr	r2, [r7, #32]
 800a082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a088:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a090:	88f8      	ldrh	r0, [r7, #6]
 800a092:	893a      	ldrh	r2, [r7, #8]
 800a094:	8979      	ldrh	r1, [r7, #10]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4603      	mov	r3, r0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f93b 	bl	800a31c <I2C_RequestMemoryRead>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d005      	beq.n	800a0b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e0ad      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2bff      	cmp	r3, #255	; 0xff
 800a0c0:	d90e      	bls.n	800a0e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	8979      	ldrh	r1, [r7, #10]
 800a0d0:	4b52      	ldr	r3, [pc, #328]	; (800a21c <HAL_I2C_Mem_Read+0x22c>)
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fb3f 	bl	800a75c <I2C_TransferConfig>
 800a0de:	e00f      	b.n	800a100 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	8979      	ldrh	r1, [r7, #10]
 800a0f2:	4b4a      	ldr	r3, [pc, #296]	; (800a21c <HAL_I2C_Mem_Read+0x22c>)
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fb2e 	bl	800a75c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	2200      	movs	r2, #0
 800a108:	2104      	movs	r1, #4
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 f97e 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e07c      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	1c5a      	adds	r2, r3, #1
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d034      	beq.n	800a1c0 <HAL_I2C_Mem_Read+0x1d0>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d130      	bne.n	800a1c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a164:	2200      	movs	r2, #0
 800a166:	2180      	movs	r1, #128	; 0x80
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f94f 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e04d      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2bff      	cmp	r3, #255	; 0xff
 800a180:	d90e      	bls.n	800a1a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	22ff      	movs	r2, #255	; 0xff
 800a186:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	8979      	ldrh	r1, [r7, #10]
 800a190:	2300      	movs	r3, #0
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fadf 	bl	800a75c <I2C_TransferConfig>
 800a19e:	e00f      	b.n	800a1c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	8979      	ldrh	r1, [r7, #10]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 face 	bl	800a75c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d19a      	bne.n	800a100 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 f99c 	bl	800a50c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e01a      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6859      	ldr	r1, [r3, #4]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <HAL_I2C_Mem_Read+0x230>)
 800a1f2:	400b      	ands	r3, r1
 800a1f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	e000      	b.n	800a214 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a212:	2302      	movs	r3, #2
  }
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	80002400 	.word	0x80002400
 800a220:	fe00e800 	.word	0xfe00e800

0800a224 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
  }
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a266:	b2db      	uxtb	r3, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af02      	add	r7, sp, #8
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	461a      	mov	r2, r3
 800a282:	4603      	mov	r3, r0
 800a284:	817b      	strh	r3, [r7, #10]
 800a286:	460b      	mov	r3, r1
 800a288:	813b      	strh	r3, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	8979      	ldrh	r1, [r7, #10]
 800a294:	4b20      	ldr	r3, [pc, #128]	; (800a318 <I2C_RequestMemoryWrite+0xa4>)
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 fa5d 	bl	800a75c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f8f0 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e02c      	b.n	800a310 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d105      	bne.n	800a2c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2bc:	893b      	ldrh	r3, [r7, #8]
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	629a      	str	r2, [r3, #40]	; 0x28
 800a2c6:	e015      	b.n	800a2f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a2c8:	893b      	ldrh	r3, [r7, #8]
 800a2ca:	0a1b      	lsrs	r3, r3, #8
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	69b9      	ldr	r1, [r7, #24]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 f8d6 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e012      	b.n	800a310 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ea:	893b      	ldrh	r3, [r7, #8]
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2180      	movs	r1, #128	; 0x80
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f884 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	80002000 	.word	0x80002000

0800a31c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	461a      	mov	r2, r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	817b      	strh	r3, [r7, #10]
 800a32e:	460b      	mov	r3, r1
 800a330:	813b      	strh	r3, [r7, #8]
 800a332:	4613      	mov	r3, r2
 800a334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a336:	88fb      	ldrh	r3, [r7, #6]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	8979      	ldrh	r1, [r7, #10]
 800a33c:	4b20      	ldr	r3, [pc, #128]	; (800a3c0 <I2C_RequestMemoryRead+0xa4>)
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	2300      	movs	r3, #0
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 fa0a 	bl	800a75c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a348:	69fa      	ldr	r2, [r7, #28]
 800a34a:	69b9      	ldr	r1, [r7, #24]
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f89d 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e02c      	b.n	800a3b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a35c:	88fb      	ldrh	r3, [r7, #6]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d105      	bne.n	800a36e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a362:	893b      	ldrh	r3, [r7, #8]
 800a364:	b2da      	uxtb	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	629a      	str	r2, [r3, #40]	; 0x28
 800a36c:	e015      	b.n	800a39a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a36e:	893b      	ldrh	r3, [r7, #8]
 800a370:	0a1b      	lsrs	r3, r3, #8
 800a372:	b29b      	uxth	r3, r3
 800a374:	b2da      	uxtb	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	69b9      	ldr	r1, [r7, #24]
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f883 	bl	800a48c <I2C_WaitOnTXISFlagUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e012      	b.n	800a3b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a390:	893b      	ldrh	r3, [r7, #8]
 800a392:	b2da      	uxtb	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2140      	movs	r1, #64	; 0x40
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f831 	bl	800a40c <I2C_WaitOnFlagUntilTimeout>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e000      	b.n	800a3b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	80002000 	.word	0x80002000

0800a3c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d103      	bne.n	800a3e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d007      	beq.n	800a400 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	619a      	str	r2, [r3, #24]
  }
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	4613      	mov	r3, r2
 800a41a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a41c:	e022      	b.n	800a464 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a424:	d01e      	beq.n	800a464 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a426:	f7fc fc25 	bl	8006c74 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d302      	bcc.n	800a43c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d113      	bne.n	800a464 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a440:	f043 0220 	orr.w	r2, r3, #32
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e00f      	b.n	800a484 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4013      	ands	r3, r2
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	429a      	cmp	r2, r3
 800a472:	bf0c      	ite	eq
 800a474:	2301      	moveq	r3, #1
 800a476:	2300      	movne	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	461a      	mov	r2, r3
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d0cd      	beq.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a498:	e02c      	b.n	800a4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 f870 	bl	800a584 <I2C_IsErrorOccurred>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e02a      	b.n	800a504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d01e      	beq.n	800a4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7fc fbdd 	bl	8006c74 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d113      	bne.n	800a4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d0:	f043 0220 	orr.w	r2, r3, #32
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e007      	b.n	800a504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d1cb      	bne.n	800a49a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a518:	e028      	b.n	800a56c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 f830 	bl	800a584 <I2C_IsErrorOccurred>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e026      	b.n	800a57c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52e:	f7fc fba1 	bl	8006c74 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d302      	bcc.n	800a544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d113      	bne.n	800a56c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a548:	f043 0220 	orr.w	r2, r3, #32
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e007      	b.n	800a57c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b20      	cmp	r3, #32
 800a578:	d1cf      	bne.n	800a51a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d075      	beq.n	800a69c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2210      	movs	r2, #16
 800a5b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5b8:	e056      	b.n	800a668 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d052      	beq.n	800a668 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5c2:	f7fc fb57 	bl	8006c74 <HAL_GetTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d302      	bcc.n	800a5d8 <I2C_IsErrorOccurred+0x54>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d147      	bne.n	800a668 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fa:	d12e      	bne.n	800a65a <I2C_IsErrorOccurred+0xd6>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a602:	d02a      	beq.n	800a65a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a604:	7cfb      	ldrb	r3, [r7, #19]
 800a606:	2b20      	cmp	r3, #32
 800a608:	d027      	beq.n	800a65a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a618:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a61a:	f7fc fb2b 	bl	8006c74 <HAL_GetTick>
 800a61e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a620:	e01b      	b.n	800a65a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a622:	f7fc fb27 	bl	8006c74 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b19      	cmp	r3, #25
 800a62e:	d914      	bls.n	800a65a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	f043 0220 	orr.w	r2, r3, #32
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b20      	cmp	r3, #32
 800a666:	d1dc      	bne.n	800a622 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b20      	cmp	r3, #32
 800a674:	d003      	beq.n	800a67e <I2C_IsErrorOccurred+0xfa>
 800a676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d09d      	beq.n	800a5ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2220      	movs	r2, #32
 800a68c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	f043 0304 	orr.w	r3, r3, #4
 800a694:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00b      	beq.n	800a6c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	f043 0308 	orr.w	r3, r3, #8
 800a6d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	f043 0302 	orr.w	r3, r3, #2
 800a6f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a702:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a70a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d01c      	beq.n	800a74c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fe56 	bl	800a3c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6859      	ldr	r1, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <I2C_IsErrorOccurred+0x1d4>)
 800a724:	400b      	ands	r3, r1
 800a726:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	431a      	orrs	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a750:	4618      	mov	r0, r3
 800a752:	3728      	adds	r7, #40	; 0x28
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	fe00e800 	.word	0xfe00e800

0800a75c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	817b      	strh	r3, [r7, #10]
 800a76a:	4613      	mov	r3, r2
 800a76c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a76e:	897b      	ldrh	r3, [r7, #10]
 800a770:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a774:	7a7b      	ldrb	r3, [r7, #9]
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a77c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	4313      	orrs	r3, r2
 800a786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a78a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	0d5b      	lsrs	r3, r3, #21
 800a796:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <I2C_TransferConfig+0x60>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	ea02 0103 	and.w	r1, r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	03ff63ff 	.word	0x03ff63ff

0800a7c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b20      	cmp	r3, #32
 800a7d4:	d138      	bne.n	800a848 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e032      	b.n	800a84a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2224      	movs	r2, #36	; 0x24
 800a7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0201 	bic.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a812:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	e000      	b.n	800a84a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a848:	2302      	movs	r3, #2
  }
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d139      	bne.n	800a8e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a876:	2302      	movs	r3, #2
 800a878:	e033      	b.n	800a8e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2224      	movs	r2, #36	; 0x24
 800a886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 0201 	bic.w	r2, r2, #1
 800a898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e000      	b.n	800a8e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
  }
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e0bb      	b.n	800aa7e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b05      	cmp	r3, #5
 800a910:	d101      	bne.n	800a916 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e0b3      	b.n	800aa7e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d101      	bne.n	800a926 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e0ab      	b.n	800aa7e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a926:	4b58      	ldr	r3, [pc, #352]	; (800aa88 <HAL_OPAMP_Init+0x198>)
 800a928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a92a:	4a57      	ldr	r2, [pc, #348]	; (800aa88 <HAL_OPAMP_Init+0x198>)
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	6613      	str	r3, [r2, #96]	; 0x60
 800a932:	4b55      	ldr	r3, [pc, #340]	; (800aa88 <HAL_OPAMP_Init+0x198>)
 800a934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	60bb      	str	r3, [r7, #8]
 800a93c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7fb fc24 	bl	80061a0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	2b40      	cmp	r3, #64	; 0x40
 800a95e:	d003      	beq.n	800a968 <HAL_OPAMP_Init+0x78>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	2b60      	cmp	r3, #96	; 0x60
 800a966:	d133      	bne.n	800a9d0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f023 0110 	bic.w	r1, r3, #16
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b41      	ldr	r3, [pc, #260]	; (800aa8c <HAL_OPAMP_Init+0x19c>)
 800a986:	4013      	ands	r3, r2
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6851      	ldr	r1, [r2, #4]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6892      	ldr	r2, [r2, #8]
 800a990:	4311      	orrs	r1, r2
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6912      	ldr	r2, [r2, #16]
 800a996:	430a      	orrs	r2, r1
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	7d09      	ldrb	r1, [r1, #20]
 800a99c:	2901      	cmp	r1, #1
 800a99e:	d102      	bne.n	800a9a6 <HAL_OPAMP_Init+0xb6>
 800a9a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9a4:	e000      	b.n	800a9a8 <HAL_OPAMP_Init+0xb8>
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4311      	orrs	r1, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9ae:	4311      	orrs	r1, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9b4:	4311      	orrs	r1, r2
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a9ba:	04d2      	lsls	r2, r2, #19
 800a9bc:	4311      	orrs	r1, r2
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a9c2:	0612      	lsls	r2, r2, #24
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6812      	ldr	r2, [r2, #0]
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	e035      	b.n	800aa3c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f023 0110 	bic.w	r1, r3, #16
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	4b27      	ldr	r3, [pc, #156]	; (800aa8c <HAL_OPAMP_Init+0x19c>)
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	6851      	ldr	r1, [r2, #4]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6892      	ldr	r2, [r2, #8]
 800a9f8:	4311      	orrs	r1, r2
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68d2      	ldr	r2, [r2, #12]
 800a9fe:	4311      	orrs	r1, r2
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6912      	ldr	r2, [r2, #16]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	7d09      	ldrb	r1, [r1, #20]
 800aa0a:	2901      	cmp	r1, #1
 800aa0c:	d102      	bne.n	800aa14 <HAL_OPAMP_Init+0x124>
 800aa0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa12:	e000      	b.n	800aa16 <HAL_OPAMP_Init+0x126>
 800aa14:	2100      	movs	r1, #0
 800aa16:	4311      	orrs	r1, r2
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa1c:	4311      	orrs	r1, r2
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aa22:	4311      	orrs	r1, r2
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa28:	04d2      	lsls	r2, r2, #19
 800aa2a:	4311      	orrs	r1, r2
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa30:	0612      	lsls	r2, r2, #24
 800aa32:	4311      	orrs	r1, r2
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	db10      	blt.n	800aa68 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699a      	ldr	r2, [r3, #24]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d103      	bne.n	800aa7c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	40021000 	.word	0x40021000
 800aa8c:	e0003e11 	.word	0xe0003e11

0800aa90 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	e01d      	b.n	800aae4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	d102      	bne.n	800aaba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	73fb      	strb	r3, [r7, #15]
 800aab8:	e014      	b.n	800aae4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d10c      	bne.n	800aae0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0201 	orr.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2204      	movs	r2, #4
 800aada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800aade:	e001      	b.n	800aae4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	e113      	b.n	800ad32 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b05      	cmp	r3, #5
 800ab14:	d102      	bne.n	800ab1c <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	75fb      	strb	r3, [r7, #23]
 800ab1a:	e10a      	b.n	800ad32 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	f040 8102 	bne.w	800ad2e <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f042 0202 	orr.w	r2, r2, #2
 800ab38:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0210 	orr.w	r2, r2, #16
 800ab48:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab58:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800ab68:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f042 0201 	orr.w	r2, r2, #1
 800ab78:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 800ab7a:	2310      	movs	r3, #16
 800ab7c:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 800ab7e:	2308      	movs	r3, #8
 800ab80:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800ab82:	e020      	b.n	800abc6 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	061a      	lsls	r2, r3, #24
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800ab9a:	2002      	movs	r0, #2
 800ab9c:	f7fc f876 	bl	8006c8c <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4413      	add	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]
 800abb6:	e003      	b.n	800abc0 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	085b      	lsrs	r3, r3, #1
 800abc4:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1db      	bne.n	800ab84 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	061a      	lsls	r2, r3, #24
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800abe2:	2002      	movs	r0, #2
 800abe4:	f7fc f852 	bl	8006c8c <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00d      	beq.n	800ac12 <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3301      	adds	r3, #1
 800abfa:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	061a      	lsls	r2, r3, #24
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac24:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 800ac26:	2310      	movs	r3, #16
 800ac28:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 800ac2a:	2308      	movs	r3, #8
 800ac2c:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800ac2e:	e020      	b.n	800ac72 <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	04da      	lsls	r2, r3, #19
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800ac46:	2002      	movs	r0, #2
 800ac48:	f7fc f820 	bl	8006c8c <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d004      	beq.n	800ac64 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4413      	add	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	e003      	b.n	800ac6c <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	085b      	lsrs	r3, r3, #1
 800ac70:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1db      	bne.n	800ac30 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	04da      	lsls	r2, r3, #19
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800ac8e:	2002      	movs	r0, #2
 800ac90:	f7fb fffc 	bl	8006c8c <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00d      	beq.n	800acbe <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3301      	adds	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	04da      	lsls	r2, r3, #19
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800accc:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0202 	bic.w	r2, r2, #2
 800acec:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2210      	movs	r2, #16
 800acfe:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	04da      	lsls	r2, r3, #19
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	061a      	lsls	r2, r3, #24
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e001      	b.n	800ad32 <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad3e:	b08b      	sub	sp, #44	; 0x2c
 800ad40:	af06      	add	r7, sp, #24
 800ad42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e0d7      	b.n	800aefe <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f009 fe18 	bl	8014998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f005 fcd4 	bl	8010722 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
 800ad7e:	e04c      	b.n	800ae1a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	440b      	add	r3, r1
 800ad90:	3301      	adds	r3, #1
 800ad92:	2201      	movs	r2, #1
 800ad94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	440b      	add	r3, r1
 800ada6:	7bfa      	ldrb	r2, [r7, #15]
 800ada8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800adaa:	7bfa      	ldrb	r2, [r7, #15]
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	b298      	uxth	r0, r3
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	00db      	lsls	r3, r3, #3
 800adba:	440b      	add	r3, r1
 800adbc:	3336      	adds	r3, #54	; 0x36
 800adbe:	4602      	mov	r2, r0
 800adc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	440b      	add	r3, r1
 800add2:	3303      	adds	r3, #3
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800add8:	7bfa      	ldrb	r2, [r7, #15]
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	440b      	add	r3, r1
 800ade6:	3338      	adds	r3, #56	; 0x38
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800adec:	7bfa      	ldrb	r2, [r7, #15]
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	440b      	add	r3, r1
 800adfa:	333c      	adds	r3, #60	; 0x3c
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae00:	7bfa      	ldrb	r2, [r7, #15]
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	440b      	add	r3, r1
 800ae0e:	3340      	adds	r3, #64	; 0x40
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	3301      	adds	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	7bfa      	ldrb	r2, [r7, #15]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d3ad      	bcc.n	800ad80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e044      	b.n	800aeb4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	440b      	add	r3, r1
 800ae38:	f203 1369 	addw	r3, r3, #361	; 0x169
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae40:	7bfa      	ldrb	r2, [r7, #15]
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae52:	7bfa      	ldrb	r2, [r7, #15]
 800ae54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae56:	7bfa      	ldrb	r2, [r7, #15]
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	440b      	add	r3, r1
 800ae64:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae6c:	7bfa      	ldrb	r2, [r7, #15]
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	440b      	add	r3, r1
 800ae7a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae82:	7bfa      	ldrb	r2, [r7, #15]
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	440b      	add	r3, r1
 800ae90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae98:	7bfa      	ldrb	r2, [r7, #15]
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	440b      	add	r3, r1
 800aea6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
 800aeb4:	7bfa      	ldrb	r2, [r7, #15]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d3b5      	bcc.n	800ae2a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	687e      	ldr	r6, [r7, #4]
 800aec6:	466d      	mov	r5, sp
 800aec8:	f106 0410 	add.w	r4, r6, #16
 800aecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	1d33      	adds	r3, r6, #4
 800aed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aed8:	6838      	ldr	r0, [r7, #0]
 800aeda:	f005 fc3d 	bl	8010758 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d102      	bne.n	800aefc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fc29 	bl	800c74e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <HAL_PCD_Start+0x16>
 800af18:	2302      	movs	r3, #2
 800af1a:	e012      	b.n	800af42 <HAL_PCD_Start+0x3c>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f005 fbe3 	bl	80106f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f007 fdfc 	bl	8012b30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4618      	mov	r0, r3
 800af58:	f007 fe01 	bl	8012b5e <USB_ReadInterrupts>
 800af5c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fb26 	bl	800b5ba <PCD_EP_ISR_Handler>

    return;
 800af6e:	e110      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af76:	2b00      	cmp	r3, #0
 800af78:	d013      	beq.n	800afa2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af8c:	b292      	uxth	r2, r2
 800af8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f009 fd91 	bl	8014aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af98:	2100      	movs	r1, #0
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8fc 	bl	800b198 <HAL_PCD_SetAddress>

    return;
 800afa0:	e0f7      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00c      	beq.n	800afc6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afbe:	b292      	uxth	r2, r2
 800afc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800afc4:	e0e5      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00c      	beq.n	800afea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afd8:	b29a      	uxth	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe2:	b292      	uxth	r2, r2
 800afe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800afe8:	e0d3      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d034      	beq.n	800b05e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0204 	bic.w	r2, r2, #4
 800b006:	b292      	uxth	r2, r2
 800b008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0208 	bic.w	r2, r2, #8
 800b01e:	b292      	uxth	r2, r2
 800b020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d107      	bne.n	800b03e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b036:	2100      	movs	r1, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f009 ff33 	bl	8014ea4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f009 fd74 	bl	8014b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b056:	b292      	uxth	r2, r2
 800b058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b05c:	e099      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b064:	2b00      	cmp	r3, #0
 800b066:	d027      	beq.n	800b0b8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0208 	orr.w	r2, r2, #8
 800b07a:	b292      	uxth	r2, r2
 800b07c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b092:	b292      	uxth	r2, r2
 800b094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f042 0204 	orr.w	r2, r2, #4
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f009 fd21 	bl	8014af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b0b6:	e06c      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d040      	beq.n	800b144 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0d4:	b292      	uxth	r2, r2
 800b0d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d12b      	bne.n	800b13c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0204 	orr.w	r2, r2, #4
 800b0f6:	b292      	uxth	r2, r2
 800b0f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0208 	orr.w	r2, r2, #8
 800b10e:	b292      	uxth	r2, r2
 800b110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b124:	b29b      	uxth	r3, r3
 800b126:	089b      	lsrs	r3, r3, #2
 800b128:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b132:	2101      	movs	r1, #1
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f009 feb5 	bl	8014ea4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b13a:	e02a      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f009 fcdb 	bl	8014af8 <HAL_PCD_SuspendCallback>
    return;
 800b142:	e026      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00f      	beq.n	800b16e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b160:	b292      	uxth	r2, r2
 800b162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f009 fc99 	bl	8014a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b16c:	e011      	b.n	800b192 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00c      	beq.n	800b192 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b180:	b29a      	uxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b18a:	b292      	uxth	r2, r2
 800b18c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b190:	bf00      	nop
  }
}
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_PCD_SetAddress+0x1a>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	e013      	b.n	800b1da <HAL_PCD_SetAddress+0x42>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	78fa      	ldrb	r2, [r7, #3]
 800b1be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	78fa      	ldrb	r2, [r7, #3]
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f007 fc9c 	bl	8012b08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	4608      	mov	r0, r1
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	70fb      	strb	r3, [r7, #3]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	803b      	strh	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b204:	2b00      	cmp	r3, #0
 800b206:	da0e      	bge.n	800b226 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	4413      	add	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	705a      	strb	r2, [r3, #1]
 800b224:	e00e      	b.n	800b244 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	f003 0207 	and.w	r2, r3, #7
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	4413      	add	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b250:	883a      	ldrh	r2, [r7, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	78ba      	ldrb	r2, [r7, #2]
 800b25a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b26e:	78bb      	ldrb	r3, [r7, #2]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d102      	bne.n	800b27a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_PCD_EP_Open+0xa6>
 800b284:	2302      	movs	r3, #2
 800b286:	e00e      	b.n	800b2a6 <HAL_PCD_EP_Open+0xc4>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	4618      	mov	r0, r3
 800b298:	f005 fa80 	bl	801079c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b2a4:	7afb      	ldrb	r3, [r7, #11]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b2ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da0e      	bge.n	800b2e0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2c2:	78fb      	ldrb	r3, [r7, #3]
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	705a      	strb	r2, [r3, #1]
 800b2de:	e00e      	b.n	800b2fe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2e0:	78fb      	ldrb	r3, [r7, #3]
 800b2e2:	f003 0207 	and.w	r2, r3, #7
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	00db      	lsls	r3, r3, #3
 800b2ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b2fe:	78fb      	ldrb	r3, [r7, #3]
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	b2da      	uxtb	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b310:	2b01      	cmp	r3, #1
 800b312:	d101      	bne.n	800b318 <HAL_PCD_EP_Close+0x6a>
 800b314:	2302      	movs	r3, #2
 800b316:	e00e      	b.n	800b336 <HAL_PCD_EP_Close+0x88>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68f9      	ldr	r1, [r7, #12]
 800b326:	4618      	mov	r0, r3
 800b328:	f005 fdcc 	bl	8010ec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	460b      	mov	r3, r1
 800b34c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	f003 0207 	and.w	r2, r3, #7
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2200      	movs	r2, #0
 800b376:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2200      	movs	r2, #0
 800b37c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	b2da      	uxtb	r2, r3
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b38a:	7afb      	ldrb	r3, [r7, #11]
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	2b00      	cmp	r3, #0
 800b392:	d106      	bne.n	800b3a2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6979      	ldr	r1, [r7, #20]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f005 ff7f 	bl	801129e <USB_EPStartXfer>
 800b3a0:	e005      	b.n	800b3ae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6979      	ldr	r1, [r7, #20]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f005 ff78 	bl	801129e <USB_EPStartXfer>
  }

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	f003 0207 	and.w	r2, r3, #7
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	440b      	add	r3, r1
 800b3d6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b3da:	681b      	ldr	r3, [r3, #0]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	2200      	movs	r2, #0
 800b42c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2201      	movs	r2, #1
 800b432:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6979      	ldr	r1, [r7, #20]
 800b450:	4618      	mov	r0, r3
 800b452:	f005 ff24 	bl	801129e <USB_EPStartXfer>
 800b456:	e005      	b.n	800b464 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	4618      	mov	r0, r3
 800b460:	f005 ff1d 	bl	801129e <USB_EPStartXfer>
  }

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	460b      	mov	r3, r1
 800b478:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	f003 0207 	and.w	r2, r3, #7
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d901      	bls.n	800b48c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e03e      	b.n	800b50a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b48c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b490:	2b00      	cmp	r3, #0
 800b492:	da0e      	bge.n	800b4b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	705a      	strb	r2, [r3, #1]
 800b4b0:	e00c      	b.n	800b4cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <HAL_PCD_EP_SetStall+0x7e>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e00e      	b.n	800b50a <HAL_PCD_EP_SetStall+0x9c>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68f9      	ldr	r1, [r7, #12]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f007 fa05 	bl	801290a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	460b      	mov	r3, r1
 800b51c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b51e:	78fb      	ldrb	r3, [r7, #3]
 800b520:	f003 020f 	and.w	r2, r3, #15
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d901      	bls.n	800b530 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e040      	b.n	800b5b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b534:	2b00      	cmp	r3, #0
 800b536:	da0e      	bge.n	800b556 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	f003 0307 	and.w	r3, r3, #7
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	4413      	add	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	705a      	strb	r2, [r3, #1]
 800b554:	e00e      	b.n	800b574 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	f003 0207 	and.w	r2, r3, #7
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4413      	add	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b57a:	78fb      	ldrb	r3, [r7, #3]
 800b57c:	f003 0307 	and.w	r3, r3, #7
 800b580:	b2da      	uxtb	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d101      	bne.n	800b594 <HAL_PCD_EP_ClrStall+0x82>
 800b590:	2302      	movs	r3, #2
 800b592:	e00e      	b.n	800b5b2 <HAL_PCD_EP_ClrStall+0xa0>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f007 fa02 	bl	80129ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b096      	sub	sp, #88	; 0x58
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b5c2:	e39c      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b5d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b5de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f040 815e 	bne.w	800b8a4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b5e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5ec:	f003 0310 	and.w	r3, r3, #16
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d150      	bne.n	800b696 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b604:	81fb      	strh	r3, [r7, #14]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	89fb      	ldrh	r3, [r7, #14]
 800b60c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b614:	b29b      	uxth	r3, r3
 800b616:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3328      	adds	r3, #40	; 0x28
 800b61c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b626:	b29b      	uxth	r3, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6812      	ldr	r2, [r2, #0]
 800b636:	4413      	add	r3, r2
 800b638:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b644:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b648:	695a      	ldr	r2, [r3, #20]
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	441a      	add	r2, r3
 800b650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b652:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b654:	2100      	movs	r1, #0
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f009 fa07 	bl	8014a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 834a 	beq.w	800bcfe <PCD_EP_ISR_Handler+0x744>
 800b66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f040 8345 	bne.w	800bcfe <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	b292      	uxth	r2, r2
 800b688:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b694:	e333      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b69c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b6a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b6ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d032      	beq.n	800b71a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	461a      	mov	r2, r3
 800b6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	4413      	add	r3, r2
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6812      	ldr	r2, [r2, #0]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	f007 fa87 	bl	8012c02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b700:	4013      	ands	r3, r2
 800b702:	823b      	strh	r3, [r7, #16]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	8a3a      	ldrh	r2, [r7, #16]
 800b70a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b70e:	b292      	uxth	r2, r2
 800b710:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f009 f97c 	bl	8014a10 <HAL_PCD_SetupStageCallback>
 800b718:	e2f1      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b71a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f280 82ed 	bge.w	800bcfe <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b730:	4013      	ands	r3, r2
 800b732:	83fb      	strh	r3, [r7, #30]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	8bfa      	ldrh	r2, [r7, #30]
 800b73a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b73e:	b292      	uxth	r2, r2
 800b740:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6812      	ldr	r2, [r2, #0]
 800b75a:	4413      	add	r3, r2
 800b75c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b768:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d019      	beq.n	800b7a6 <PCD_EP_ISR_Handler+0x1ec>
 800b772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d015      	beq.n	800b7a6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b780:	6959      	ldr	r1, [r3, #20]
 800b782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b784:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b788:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	f007 fa39 	bl	8012c02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b792:	695a      	ldr	r2, [r3, #20]
 800b794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	441a      	add	r2, r3
 800b79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b79e:	2100      	movs	r1, #0
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f009 f947 	bl	8014a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f040 82a3 	bne.w	800bcfe <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	61bb      	str	r3, [r7, #24]
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b3e      	cmp	r3, #62	; 0x3e
 800b7de:	d918      	bls.n	800b812 <PCD_EP_ISR_Handler+0x258>
 800b7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	095b      	lsrs	r3, r3, #5
 800b7e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 031f 	and.w	r3, r3, #31
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <PCD_EP_ISR_Handler+0x240>
 800b7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	029b      	lsls	r3, r3, #10
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	801a      	strh	r2, [r3, #0]
 800b810:	e029      	b.n	800b866 <PCD_EP_ISR_Handler+0x2ac>
 800b812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d112      	bne.n	800b840 <PCD_EP_ISR_Handler+0x286>
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b824:	b29a      	uxth	r2, r3
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b838:	b29a      	uxth	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	801a      	strh	r2, [r3, #0]
 800b83e:	e012      	b.n	800b866 <PCD_EP_ISR_Handler+0x2ac>
 800b840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	085b      	lsrs	r3, r3, #1
 800b846:	647b      	str	r3, [r7, #68]	; 0x44
 800b848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <PCD_EP_ISR_Handler+0x2a0>
 800b854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b856:	3301      	adds	r3, #1
 800b858:	647b      	str	r3, [r7, #68]	; 0x44
 800b85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	029b      	lsls	r3, r3, #10
 800b860:	b29a      	uxth	r2, r3
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b876:	827b      	strh	r3, [r7, #18]
 800b878:	8a7b      	ldrh	r3, [r7, #18]
 800b87a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b87e:	827b      	strh	r3, [r7, #18]
 800b880:	8a7b      	ldrh	r3, [r7, #18]
 800b882:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b886:	827b      	strh	r3, [r7, #18]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	8a7b      	ldrh	r3, [r7, #18]
 800b88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	8013      	strh	r3, [r2, #0]
 800b8a2:	e22c      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b8b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f280 80f6 	bge.w	800baae <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8d8:	4013      	ands	r3, r2
 800b8da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b8f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8f8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b910:	7b1b      	ldrb	r3, [r3, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d123      	bne.n	800b95e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b91e:	b29b      	uxth	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4413      	add	r3, r2
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	4413      	add	r3, r2
 800b930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b93a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b93e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 808e 	beq.w	800ba64 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94e:	6959      	ldr	r1, [r3, #20]
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	88da      	ldrh	r2, [r3, #6]
 800b954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b958:	f007 f953 	bl	8012c02 <USB_ReadPMA>
 800b95c:	e082      	b.n	800ba64 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b960:	78db      	ldrb	r3, [r3, #3]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d10a      	bne.n	800b97c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b966:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b96a:	461a      	mov	r2, r3
 800b96c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9d3 	bl	800bd1a <HAL_PCD_EP_DB_Receive>
 800b974:	4603      	mov	r3, r0
 800b976:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b97a:	e073      	b.n	800ba64 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	461a      	mov	r2, r3
 800b982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b996:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	441a      	add	r2, r3
 800b9a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d022      	beq.n	800ba20 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	4413      	add	r3, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800ba02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d02c      	beq.n	800ba64 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba10:	6959      	ldr	r1, [r3, #20]
 800ba12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba14:	891a      	ldrh	r2, [r3, #8]
 800ba16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba1a:	f007 f8f2 	bl	8012c02 <USB_ReadPMA>
 800ba1e:	e021      	b.n	800ba64 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	4413      	add	r3, r2
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	6812      	ldr	r2, [r2, #0]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800ba48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d009      	beq.n	800ba64 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba56:	6959      	ldr	r1, [r3, #20]
 800ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5a:	895a      	ldrh	r2, [r3, #10]
 800ba5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba60:	f007 f8cf 	bl	8012c02 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ba64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba66:	69da      	ldr	r2, [r3, #28]
 800ba68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba6c:	441a      	add	r2, r3
 800ba6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ba72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba74:	695a      	ldr	r2, [r3, #20]
 800ba76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba7a:	441a      	add	r2, r3
 800ba7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <PCD_EP_ISR_Handler+0x4da>
 800ba88:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d206      	bcs.n	800baa2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f008 ffca 	bl	8014a34 <HAL_PCD_DataOutStageCallback>
 800baa0:	e005      	b.n	800baae <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800baa8:	4618      	mov	r0, r3
 800baaa:	f005 fbf8 	bl	801129e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800baae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 8121 	beq.w	800bcfe <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800babc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	441a      	add	r2, r3
 800bafc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	78db      	ldrb	r3, [r3, #3]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	f000 80a2 	beq.w	800bc5a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb18:	2200      	movs	r2, #0
 800bb1a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	7b1b      	ldrb	r3, [r3, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 8093 	beq.w	800bc4c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bb26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d046      	beq.n	800bbc0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d126      	bne.n	800bb88 <PCD_EP_ISR_Handler+0x5ce>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	4413      	add	r3, r2
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
 800bb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	00da      	lsls	r2, r3, #3
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb60:	623b      	str	r3, [r7, #32]
 800bb62:	6a3b      	ldr	r3, [r7, #32]
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	801a      	strh	r2, [r3, #0]
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	801a      	strh	r2, [r3, #0]
 800bb86:	e061      	b.n	800bc4c <PCD_EP_ISR_Handler+0x692>
 800bb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8a:	785b      	ldrb	r3, [r3, #1]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d15d      	bne.n	800bc4c <PCD_EP_ISR_Handler+0x692>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	4413      	add	r3, r2
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	00da      	lsls	r2, r3, #3
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	2200      	movs	r2, #0
 800bbbc:	801a      	strh	r2, [r3, #0]
 800bbbe:	e045      	b.n	800bc4c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc8:	785b      	ldrb	r3, [r3, #1]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d126      	bne.n	800bc1c <PCD_EP_ISR_Handler+0x662>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe2:	4413      	add	r3, r2
 800bbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	00da      	lsls	r2, r3, #3
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	4413      	add	r3, r2
 800bbf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbf4:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	801a      	strh	r2, [r3, #0]
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	801a      	strh	r2, [r3, #0]
 800bc1a:	e017      	b.n	800bc4c <PCD_EP_ISR_Handler+0x692>
 800bc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1e:	785b      	ldrb	r3, [r3, #1]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d113      	bne.n	800bc4c <PCD_EP_ISR_Handler+0x692>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc32:	4413      	add	r3, r2
 800bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	00da      	lsls	r2, r3, #3
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3e:	4413      	add	r3, r2
 800bc40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc44:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	2200      	movs	r2, #0
 800bc4a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f008 ff09 	bl	8014a6a <HAL_PCD_DataInStageCallback>
 800bc58:	e051      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bc5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d144      	bne.n	800bcf0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	4413      	add	r3, r2
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	6812      	ldr	r2, [r2, #0]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d907      	bls.n	800bcaa <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800bc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc9c:	699a      	ldr	r2, [r3, #24]
 800bc9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca6:	619a      	str	r2, [r3, #24]
 800bca8:	e002      	b.n	800bcb0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800bcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcac:	2200      	movs	r2, #0
 800bcae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f008 fed3 	bl	8014a6a <HAL_PCD_DataInStageCallback>
 800bcc4:	e01b      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcce:	441a      	add	r2, r3
 800bcd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bcd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd6:	69da      	ldr	r2, [r3, #28]
 800bcd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcdc:	441a      	add	r2, r3
 800bcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bce8:	4618      	mov	r0, r3
 800bcea:	f005 fad8 	bl	801129e <USB_EPStartXfer>
 800bcee:	e006      	b.n	800bcfe <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bcf0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f917 	bl	800bf2c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	b21b      	sxth	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f6ff ac5a 	blt.w	800b5c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3758      	adds	r7, #88	; 0x58
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	4613      	mov	r3, r2
 800bd26:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d07c      	beq.n	800be2c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	4413      	add	r3, r2
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	6812      	ldr	r2, [r2, #0]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	699a      	ldr	r2, [r3, #24]
 800bd5c:	8b7b      	ldrh	r3, [r7, #26]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d306      	bcc.n	800bd70 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	8b7b      	ldrh	r3, [r7, #26]
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	619a      	str	r2, [r3, #24]
 800bd6e:	e002      	b.n	800bd76 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d123      	bne.n	800bdc6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd98:	833b      	strh	r3, [r7, #24]
 800bd9a:	8b3b      	ldrh	r3, [r7, #24]
 800bd9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bda0:	833b      	strh	r3, [r7, #24]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	441a      	add	r2, r3
 800bdb0:	8b3b      	ldrh	r3, [r7, #24]
 800bdb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bdc6:	88fb      	ldrh	r3, [r7, #6]
 800bdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01f      	beq.n	800be10 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdea:	82fb      	strh	r3, [r7, #22]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	441a      	add	r2, r3
 800bdfa:	8afb      	ldrh	r3, [r7, #22]
 800bdfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800be10:	8b7b      	ldrh	r3, [r7, #26]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 8085 	beq.w	800bf22 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6818      	ldr	r0, [r3, #0]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	6959      	ldr	r1, [r3, #20]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	891a      	ldrh	r2, [r3, #8]
 800be24:	8b7b      	ldrh	r3, [r7, #26]
 800be26:	f006 feec 	bl	8012c02 <USB_ReadPMA>
 800be2a:	e07a      	b.n	800bf22 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be34:	b29b      	uxth	r3, r3
 800be36:	461a      	mov	r2, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	4413      	add	r3, r2
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	6812      	ldr	r2, [r2, #0]
 800be44:	4413      	add	r3, r2
 800be46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	699a      	ldr	r2, [r3, #24]
 800be56:	8b7b      	ldrh	r3, [r7, #26]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d306      	bcc.n	800be6a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	699a      	ldr	r2, [r3, #24]
 800be60:	8b7b      	ldrh	r3, [r7, #26]
 800be62:	1ad2      	subs	r2, r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	619a      	str	r2, [r3, #24]
 800be68:	e002      	b.n	800be70 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2200      	movs	r2, #0
 800be6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d123      	bne.n	800bec0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be92:	83fb      	strh	r3, [r7, #30]
 800be94:	8bfb      	ldrh	r3, [r7, #30]
 800be96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be9a:	83fb      	strh	r3, [r7, #30]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	441a      	add	r2, r3
 800beaa:	8bfb      	ldrh	r3, [r7, #30]
 800beac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800bec0:	88fb      	ldrh	r3, [r7, #6]
 800bec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d11f      	bne.n	800bf0a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bee4:	83bb      	strh	r3, [r7, #28]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	441a      	add	r2, r3
 800bef4:	8bbb      	ldrh	r3, [r7, #28]
 800bef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800befa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800befe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bf0a:	8b7b      	ldrh	r3, [r7, #26]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d008      	beq.n	800bf22 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	6959      	ldr	r1, [r3, #20]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	895a      	ldrh	r2, [r3, #10]
 800bf1c:	8b7b      	ldrh	r3, [r7, #26]
 800bf1e:	f006 fe70 	bl	8012c02 <USB_ReadPMA>
    }
  }

  return count;
 800bf22:	8b7b      	ldrh	r3, [r7, #26]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b0a2      	sub	sp, #136	; 0x88
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf3a:	88fb      	ldrh	r3, [r7, #6]
 800bf3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 81c5 	beq.w	800c2d0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	461a      	mov	r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	4413      	add	r3, r2
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	6812      	ldr	r2, [r2, #0]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d907      	bls.n	800bf8a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf82:	1ad2      	subs	r2, r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	619a      	str	r2, [r3, #24]
 800bf88:	e002      	b.n	800bf90 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f040 80b9 	bne.w	800c10c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	785b      	ldrb	r3, [r3, #1]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d126      	bne.n	800bff0 <HAL_PCD_EP_DB_Transmit+0xc4>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	4413      	add	r3, r2
 800bfb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	00da      	lsls	r2, r3, #3
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	801a      	strh	r2, [r3, #0]
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	e01a      	b.n	800c026 <HAL_PCD_EP_DB_Transmit+0xfa>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	785b      	ldrb	r3, [r3, #1]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d116      	bne.n	800c026 <HAL_PCD_EP_DB_Transmit+0xfa>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	633b      	str	r3, [r7, #48]	; 0x30
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c006:	b29b      	uxth	r3, r3
 800c008:	461a      	mov	r2, r3
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	4413      	add	r3, r2
 800c00e:	633b      	str	r3, [r7, #48]	; 0x30
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	00da      	lsls	r2, r3, #3
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	4413      	add	r3, r2
 800c01a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	2200      	movs	r2, #0
 800c024:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	623b      	str	r3, [r7, #32]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	785b      	ldrb	r3, [r3, #1]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d126      	bne.n	800c082 <HAL_PCD_EP_DB_Transmit+0x156>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	61bb      	str	r3, [r7, #24]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c042:	b29b      	uxth	r3, r3
 800c044:	461a      	mov	r2, r3
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	4413      	add	r3, r2
 800c04a:	61bb      	str	r3, [r7, #24]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	00da      	lsls	r2, r3, #3
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	4413      	add	r3, r2
 800c056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c066:	b29a      	uxth	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	801a      	strh	r2, [r3, #0]
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	b29b      	uxth	r3, r3
 800c072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	801a      	strh	r2, [r3, #0]
 800c080:	e017      	b.n	800c0b2 <HAL_PCD_EP_DB_Transmit+0x186>
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d113      	bne.n	800c0b2 <HAL_PCD_EP_DB_Transmit+0x186>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c092:	b29b      	uxth	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	4413      	add	r3, r2
 800c09a:	623b      	str	r3, [r7, #32]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	00da      	lsls	r2, r3, #3
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0aa:	61fb      	str	r3, [r7, #28]
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f008 fcd6 	bl	8014a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 82d2 	beq.w	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e4:	827b      	strh	r3, [r7, #18]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	441a      	add	r2, r3
 800c0f4:	8a7b      	ldrh	r3, [r7, #18]
 800c0f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c106:	b29b      	uxth	r3, r3
 800c108:	8013      	strh	r3, [r2, #0]
 800c10a:	e2b0      	b.n	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d021      	beq.n	800c15a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	b29b      	uxth	r3, r3
 800c128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c12c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c130:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	441a      	add	r2, r3
 800c142:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c14a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c14e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c156:	b29b      	uxth	r3, r3
 800c158:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c160:	2b01      	cmp	r3, #1
 800c162:	f040 8284 	bne.w	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	695a      	ldr	r2, [r3, #20]
 800c16a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c16e:	441a      	add	r2, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	69da      	ldr	r2, [r3, #28]
 800c178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c17c:	441a      	add	r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	6a1a      	ldr	r2, [r3, #32]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d309      	bcc.n	800c1a2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	6a1a      	ldr	r2, [r3, #32]
 800c198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c19a:	1ad2      	subs	r2, r2, r3
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	621a      	str	r2, [r3, #32]
 800c1a0:	e015      	b.n	800c1ce <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d107      	bne.n	800c1ba <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c1aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c1ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c1b8:	e009      	b.n	800c1ce <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	785b      	ldrb	r3, [r3, #1]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d155      	bne.n	800c282 <HAL_PCD_EP_DB_Transmit+0x356>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	4413      	add	r3, r2
 800c1ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	00da      	lsls	r2, r3, #3
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c200:	2b3e      	cmp	r3, #62	; 0x3e
 800c202:	d916      	bls.n	800c232 <HAL_PCD_EP_DB_Transmit+0x306>
 800c204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c206:	095b      	lsrs	r3, r3, #5
 800c208:	64bb      	str	r3, [r7, #72]	; 0x48
 800c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20c:	f003 031f 	and.w	r3, r3, #31
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c216:	3b01      	subs	r3, #1
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	029b      	lsls	r3, r3, #10
 800c220:	b29b      	uxth	r3, r3
 800c222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22e:	801a      	strh	r2, [r3, #0]
 800c230:	e043      	b.n	800c2ba <HAL_PCD_EP_DB_Transmit+0x38e>
 800c232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c234:	2b00      	cmp	r3, #0
 800c236:	d112      	bne.n	800c25e <HAL_PCD_EP_DB_Transmit+0x332>
 800c238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c242:	b29a      	uxth	r2, r3
 800c244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c246:	801a      	strh	r2, [r3, #0]
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c256:	b29a      	uxth	r2, r3
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	801a      	strh	r2, [r3, #0]
 800c25c:	e02d      	b.n	800c2ba <HAL_PCD_EP_DB_Transmit+0x38e>
 800c25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c260:	085b      	lsrs	r3, r3, #1
 800c262:	64bb      	str	r3, [r7, #72]	; 0x48
 800c264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <HAL_PCD_EP_DB_Transmit+0x348>
 800c26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c270:	3301      	adds	r3, #1
 800c272:	64bb      	str	r3, [r7, #72]	; 0x48
 800c274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c276:	b29b      	uxth	r3, r3
 800c278:	029b      	lsls	r3, r3, #10
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27e:	801a      	strh	r2, [r3, #0]
 800c280:	e01b      	b.n	800c2ba <HAL_PCD_EP_DB_Transmit+0x38e>
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d117      	bne.n	800c2ba <HAL_PCD_EP_DB_Transmit+0x38e>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	643b      	str	r3, [r7, #64]	; 0x40
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c298:	b29b      	uxth	r3, r3
 800c29a:	461a      	mov	r2, r3
 800c29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29e:	4413      	add	r3, r2
 800c2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	00da      	lsls	r2, r3, #3
 800c2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6959      	ldr	r1, [r3, #20]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	891a      	ldrh	r2, [r3, #8]
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	f006 fc58 	bl	8012b7e <USB_WritePMA>
 800c2ce:	e1ce      	b.n	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	4413      	add	r3, r2
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	6812      	ldr	r2, [r2, #0]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	699a      	ldr	r2, [r3, #24]
 800c2fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c300:	429a      	cmp	r2, r3
 800c302:	d307      	bcc.n	800c314 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	699a      	ldr	r2, [r3, #24]
 800c308:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c30c:	1ad2      	subs	r2, r2, r3
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	619a      	str	r2, [r3, #24]
 800c312:	e002      	b.n	800c31a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f040 80c4 	bne.w	800c4ac <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d126      	bne.n	800c37a <HAL_PCD_EP_DB_Transmit+0x44e>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	66bb      	str	r3, [r7, #104]	; 0x68
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	461a      	mov	r2, r3
 800c33e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c340:	4413      	add	r3, r2
 800c342:	66bb      	str	r3, [r7, #104]	; 0x68
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	00da      	lsls	r2, r3, #3
 800c34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c34c:	4413      	add	r3, r2
 800c34e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c352:	667b      	str	r3, [r7, #100]	; 0x64
 800c354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c35e:	b29a      	uxth	r2, r3
 800c360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c362:	801a      	strh	r2, [r3, #0]
 800c364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	b29b      	uxth	r3, r3
 800c36a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c36e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c372:	b29a      	uxth	r2, r3
 800c374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c376:	801a      	strh	r2, [r3, #0]
 800c378:	e01a      	b.n	800c3b0 <HAL_PCD_EP_DB_Transmit+0x484>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	785b      	ldrb	r3, [r3, #1]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d116      	bne.n	800c3b0 <HAL_PCD_EP_DB_Transmit+0x484>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	673b      	str	r3, [r7, #112]	; 0x70
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c390:	b29b      	uxth	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c396:	4413      	add	r3, r2
 800c398:	673b      	str	r3, [r7, #112]	; 0x70
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	00da      	lsls	r2, r3, #3
 800c3a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	785b      	ldrb	r3, [r3, #1]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d12f      	bne.n	800c41e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	00da      	lsls	r2, r3, #3
 800c3e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c402:	801a      	strh	r2, [r3, #0]
 800c404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c414:	b29a      	uxth	r2, r3
 800c416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c41a:	801a      	strh	r2, [r3, #0]
 800c41c:	e017      	b.n	800c44e <HAL_PCD_EP_DB_Transmit+0x522>
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d113      	bne.n	800c44e <HAL_PCD_EP_DB_Transmit+0x522>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c42e:	b29b      	uxth	r3, r3
 800c430:	461a      	mov	r2, r3
 800c432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c434:	4413      	add	r3, r2
 800c436:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	00da      	lsls	r2, r3, #3
 800c43e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c440:	4413      	add	r3, r2
 800c442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c446:	67bb      	str	r3, [r7, #120]	; 0x78
 800c448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c44a:	2200      	movs	r2, #0
 800c44c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	4619      	mov	r1, r3
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f008 fb08 	bl	8014a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 8104 	bne.w	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	b29b      	uxth	r3, r3
 800c478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c47c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c480:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	441a      	add	r2, r3
 800c492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c49a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c49e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	8013      	strh	r3, [r2, #0]
 800c4aa:	e0e0      	b.n	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c4ac:	88fb      	ldrh	r3, [r7, #6]
 800c4ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d121      	bne.n	800c4fa <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	441a      	add	r2, r3
 800c4e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c500:	2b01      	cmp	r3, #1
 800c502:	f040 80b4 	bne.w	800c66e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	695a      	ldr	r2, [r3, #20]
 800c50a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c50e:	441a      	add	r2, r3
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	69da      	ldr	r2, [r3, #28]
 800c518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c51c:	441a      	add	r2, r3
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6a1a      	ldr	r2, [r3, #32]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d309      	bcc.n	800c542 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	6a1a      	ldr	r2, [r3, #32]
 800c538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c53a:	1ad2      	subs	r2, r2, r3
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	621a      	str	r2, [r3, #32]
 800c540:	e015      	b.n	800c56e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d107      	bne.n	800c55a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800c54a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c54e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c558:	e009      	b.n	800c56e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2200      	movs	r2, #0
 800c564:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	663b      	str	r3, [r7, #96]	; 0x60
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	785b      	ldrb	r3, [r3, #1]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d155      	bne.n	800c628 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	65bb      	str	r3, [r7, #88]	; 0x58
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	461a      	mov	r2, r3
 800c58e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c590:	4413      	add	r3, r2
 800c592:	65bb      	str	r3, [r7, #88]	; 0x58
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	00da      	lsls	r2, r3, #3
 800c59a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c59c:	4413      	add	r3, r2
 800c59e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a6:	2b3e      	cmp	r3, #62	; 0x3e
 800c5a8:	d916      	bls.n	800c5d8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ac:	095b      	lsrs	r3, r3, #5
 800c5ae:	677b      	str	r3, [r7, #116]	; 0x74
 800c5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b2:	f003 031f 	and.w	r3, r3, #31
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <HAL_PCD_EP_DB_Transmit+0x694>
 800c5ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	677b      	str	r3, [r7, #116]	; 0x74
 800c5c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	029b      	lsls	r3, r3, #10
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d4:	801a      	strh	r2, [r3, #0]
 800c5d6:	e040      	b.n	800c65a <HAL_PCD_EP_DB_Transmit+0x72e>
 800c5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d112      	bne.n	800c604 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800c5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ec:	801a      	strh	r2, [r3, #0]
 800c5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c600:	801a      	strh	r2, [r3, #0]
 800c602:	e02a      	b.n	800c65a <HAL_PCD_EP_DB_Transmit+0x72e>
 800c604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c606:	085b      	lsrs	r3, r3, #1
 800c608:	677b      	str	r3, [r7, #116]	; 0x74
 800c60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <HAL_PCD_EP_DB_Transmit+0x6ee>
 800c614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c616:	3301      	adds	r3, #1
 800c618:	677b      	str	r3, [r7, #116]	; 0x74
 800c61a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	029b      	lsls	r3, r3, #10
 800c620:	b29a      	uxth	r2, r3
 800c622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c624:	801a      	strh	r2, [r3, #0]
 800c626:	e018      	b.n	800c65a <HAL_PCD_EP_DB_Transmit+0x72e>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	785b      	ldrb	r3, [r3, #1]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d114      	bne.n	800c65a <HAL_PCD_EP_DB_Transmit+0x72e>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c638:	b29b      	uxth	r3, r3
 800c63a:	461a      	mov	r2, r3
 800c63c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c63e:	4413      	add	r3, r2
 800c640:	663b      	str	r3, [r7, #96]	; 0x60
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	00da      	lsls	r2, r3, #3
 800c648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c64a:	4413      	add	r3, r2
 800c64c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c650:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c654:	b29a      	uxth	r2, r3
 800c656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c658:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6818      	ldr	r0, [r3, #0]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6959      	ldr	r1, [r3, #20]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	895a      	ldrh	r2, [r3, #10]
 800c666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f006 fa88 	bl	8012b7e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c688:	823b      	strh	r3, [r7, #16]
 800c68a:	8a3b      	ldrh	r3, [r7, #16]
 800c68c:	f083 0310 	eor.w	r3, r3, #16
 800c690:	823b      	strh	r3, [r7, #16]
 800c692:	8a3b      	ldrh	r3, [r7, #16]
 800c694:	f083 0320 	eor.w	r3, r3, #32
 800c698:	823b      	strh	r3, [r7, #16]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	441a      	add	r2, r3
 800c6a8:	8a3b      	ldrh	r3, [r7, #16]
 800c6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3788      	adds	r7, #136	; 0x88
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	607b      	str	r3, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	817b      	strh	r3, [r7, #10]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c6da:	897b      	ldrh	r3, [r7, #10]
 800c6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00b      	beq.n	800c6fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6e6:	897b      	ldrh	r3, [r7, #10]
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	4413      	add	r3, r2
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	e009      	b.n	800c712 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c6fe:	897a      	ldrh	r2, [r7, #10]
 800c700:	4613      	mov	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	4413      	add	r3, r2
 800c710:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c712:	893b      	ldrh	r3, [r7, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d107      	bne.n	800c728 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2200      	movs	r2, #0
 800c71c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	b29a      	uxth	r2, r3
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	80da      	strh	r2, [r3, #6]
 800c726:	e00b      	b.n	800c740 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2201      	movs	r2, #1
 800c72c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	b29a      	uxth	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	0c1b      	lsrs	r3, r3, #16
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c74e:	b480      	push	{r7}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c772:	b29b      	uxth	r3, r3
 800c774:	f043 0301 	orr.w	r3, r3, #1
 800c778:	b29a      	uxth	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c786:	b29b      	uxth	r3, r3
 800c788:	f043 0302 	orr.w	r3, r3, #2
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d141      	bne.n	800c836 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c7b2:	4b4b      	ldr	r3, [pc, #300]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c7ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7be:	d131      	bne.n	800c824 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c7c0:	4b47      	ldr	r3, [pc, #284]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7c6:	4a46      	ldr	r2, [pc, #280]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c7d0:	4b43      	ldr	r3, [pc, #268]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c7d8:	4a41      	ldr	r2, [pc, #260]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c7e0:	4b40      	ldr	r3, [pc, #256]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2232      	movs	r2, #50	; 0x32
 800c7e6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ea:	4a3f      	ldr	r2, [pc, #252]	; (800c8e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c7ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f0:	0c9b      	lsrs	r3, r3, #18
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c7f6:	e002      	b.n	800c7fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c7fe:	4b38      	ldr	r3, [pc, #224]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c80a:	d102      	bne.n	800c812 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1f2      	bne.n	800c7f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c812:	4b33      	ldr	r3, [pc, #204]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c81e:	d158      	bne.n	800c8d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e057      	b.n	800c8d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c824:	4b2e      	ldr	r3, [pc, #184]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c82a:	4a2d      	ldr	r2, [pc, #180]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c82c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c834:	e04d      	b.n	800c8d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83c:	d141      	bne.n	800c8c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c83e:	4b28      	ldr	r3, [pc, #160]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84a:	d131      	bne.n	800c8b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c84c:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c852:	4a23      	ldr	r2, [pc, #140]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c85c:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c864:	4a1e      	ldr	r2, [pc, #120]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c86a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c86c:	4b1d      	ldr	r3, [pc, #116]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2232      	movs	r2, #50	; 0x32
 800c872:	fb02 f303 	mul.w	r3, r2, r3
 800c876:	4a1c      	ldr	r2, [pc, #112]	; (800c8e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c878:	fba2 2303 	umull	r2, r3, r2, r3
 800c87c:	0c9b      	lsrs	r3, r3, #18
 800c87e:	3301      	adds	r3, #1
 800c880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c882:	e002      	b.n	800c88a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3b01      	subs	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c88a:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c896:	d102      	bne.n	800c89e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1f2      	bne.n	800c884 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c89e:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8aa:	d112      	bne.n	800c8d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e011      	b.n	800c8d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c8c0:	e007      	b.n	800c8d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c8c2:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c8ca:	4a05      	ldr	r2, [pc, #20]	; (800c8e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	40007000 	.word	0x40007000
 800c8e4:	20000000 	.word	0x20000000
 800c8e8:	431bde83 	.word	0x431bde83

0800c8ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e306      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d075      	beq.n	800c9f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c90a:	4b97      	ldr	r3, [pc, #604]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f003 030c 	and.w	r3, r3, #12
 800c912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c914:	4b94      	ldr	r3, [pc, #592]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f003 0303 	and.w	r3, r3, #3
 800c91c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2b0c      	cmp	r3, #12
 800c922:	d102      	bne.n	800c92a <HAL_RCC_OscConfig+0x3e>
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b03      	cmp	r3, #3
 800c928:	d002      	beq.n	800c930 <HAL_RCC_OscConfig+0x44>
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b08      	cmp	r3, #8
 800c92e:	d10b      	bne.n	800c948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c930:	4b8d      	ldr	r3, [pc, #564]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d05b      	beq.n	800c9f4 <HAL_RCC_OscConfig+0x108>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d157      	bne.n	800c9f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e2e1      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c950:	d106      	bne.n	800c960 <HAL_RCC_OscConfig+0x74>
 800c952:	4b85      	ldr	r3, [pc, #532]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a84      	ldr	r2, [pc, #528]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	e01d      	b.n	800c99c <HAL_RCC_OscConfig+0xb0>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c968:	d10c      	bne.n	800c984 <HAL_RCC_OscConfig+0x98>
 800c96a:	4b7f      	ldr	r3, [pc, #508]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a7e      	ldr	r2, [pc, #504]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	4b7c      	ldr	r3, [pc, #496]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a7b      	ldr	r2, [pc, #492]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c97c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	e00b      	b.n	800c99c <HAL_RCC_OscConfig+0xb0>
 800c984:	4b78      	ldr	r3, [pc, #480]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a77      	ldr	r2, [pc, #476]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c98a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	4b75      	ldr	r3, [pc, #468]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a74      	ldr	r2, [pc, #464]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c99a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d013      	beq.n	800c9cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a4:	f7fa f966 	bl	8006c74 <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9aa:	e008      	b.n	800c9be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9ac:	f7fa f962 	bl	8006c74 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b64      	cmp	r3, #100	; 0x64
 800c9b8:	d901      	bls.n	800c9be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e2a6      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9be:	4b6a      	ldr	r3, [pc, #424]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0f0      	beq.n	800c9ac <HAL_RCC_OscConfig+0xc0>
 800c9ca:	e014      	b.n	800c9f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9cc:	f7fa f952 	bl	8006c74 <HAL_GetTick>
 800c9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c9d2:	e008      	b.n	800c9e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9d4:	f7fa f94e 	bl	8006c74 <HAL_GetTick>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b64      	cmp	r3, #100	; 0x64
 800c9e0:	d901      	bls.n	800c9e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	e292      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c9e6:	4b60      	ldr	r3, [pc, #384]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1f0      	bne.n	800c9d4 <HAL_RCC_OscConfig+0xe8>
 800c9f2:	e000      	b.n	800c9f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d075      	beq.n	800caee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca02:	4b59      	ldr	r3, [pc, #356]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f003 030c 	and.w	r3, r3, #12
 800ca0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca0c:	4b56      	ldr	r3, [pc, #344]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f003 0303 	and.w	r3, r3, #3
 800ca14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	2b0c      	cmp	r3, #12
 800ca1a:	d102      	bne.n	800ca22 <HAL_RCC_OscConfig+0x136>
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d002      	beq.n	800ca28 <HAL_RCC_OscConfig+0x13c>
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d11f      	bne.n	800ca68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca28:	4b4f      	ldr	r3, [pc, #316]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <HAL_RCC_OscConfig+0x154>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e265      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca40:	4b49      	ldr	r3, [pc, #292]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	061b      	lsls	r3, r3, #24
 800ca4e:	4946      	ldr	r1, [pc, #280]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca50:	4313      	orrs	r3, r2
 800ca52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ca54:	4b45      	ldr	r3, [pc, #276]	; (800cb6c <HAL_RCC_OscConfig+0x280>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fa f8bf 	bl	8006bdc <HAL_InitTick>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d043      	beq.n	800caec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	e251      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d023      	beq.n	800cab8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca70:	4b3d      	ldr	r3, [pc, #244]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a3c      	ldr	r2, [pc, #240]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca7c:	f7fa f8fa 	bl	8006c74 <HAL_GetTick>
 800ca80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca82:	e008      	b.n	800ca96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca84:	f7fa f8f6 	bl	8006c74 <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d901      	bls.n	800ca96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e23a      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca96:	4b34      	ldr	r3, [pc, #208]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0f0      	beq.n	800ca84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa2:	4b31      	ldr	r3, [pc, #196]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	061b      	lsls	r3, r3, #24
 800cab0:	492d      	ldr	r1, [pc, #180]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	604b      	str	r3, [r1, #4]
 800cab6:	e01a      	b.n	800caee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cab8:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a2a      	ldr	r2, [pc, #168]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cabe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac4:	f7fa f8d6 	bl	8006c74 <HAL_GetTick>
 800cac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800caca:	e008      	b.n	800cade <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cacc:	f7fa f8d2 	bl	8006c74 <HAL_GetTick>
 800cad0:	4602      	mov	r2, r0
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d901      	bls.n	800cade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cada:	2303      	movs	r3, #3
 800cadc:	e216      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1f0      	bne.n	800cacc <HAL_RCC_OscConfig+0x1e0>
 800caea:	e000      	b.n	800caee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800caec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 0308 	and.w	r3, r3, #8
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d041      	beq.n	800cb7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01c      	beq.n	800cb3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb02:	4b19      	ldr	r3, [pc, #100]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cb04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb08:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cb0a:	f043 0301 	orr.w	r3, r3, #1
 800cb0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb12:	f7fa f8af 	bl	8006c74 <HAL_GetTick>
 800cb16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb18:	e008      	b.n	800cb2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb1a:	f7fa f8ab 	bl	8006c74 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d901      	bls.n	800cb2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e1ef      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb2c:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cb2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0ef      	beq.n	800cb1a <HAL_RCC_OscConfig+0x22e>
 800cb3a:	e020      	b.n	800cb7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cb3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb42:	4a09      	ldr	r2, [pc, #36]	; (800cb68 <HAL_RCC_OscConfig+0x27c>)
 800cb44:	f023 0301 	bic.w	r3, r3, #1
 800cb48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb4c:	f7fa f892 	bl	8006c74 <HAL_GetTick>
 800cb50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb52:	e00d      	b.n	800cb70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb54:	f7fa f88e 	bl	8006c74 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d906      	bls.n	800cb70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e1d2      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
 800cb66:	bf00      	nop
 800cb68:	40021000 	.word	0x40021000
 800cb6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb70:	4b8c      	ldr	r3, [pc, #560]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cb72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1ea      	bne.n	800cb54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0304 	and.w	r3, r3, #4
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 80a6 	beq.w	800ccd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cb90:	4b84      	ldr	r3, [pc, #528]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <HAL_RCC_OscConfig+0x2b4>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e000      	b.n	800cba2 <HAL_RCC_OscConfig+0x2b6>
 800cba0:	2300      	movs	r3, #0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cba6:	4b7f      	ldr	r3, [pc, #508]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbaa:	4a7e      	ldr	r2, [pc, #504]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cbac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbb0:	6593      	str	r3, [r2, #88]	; 0x58
 800cbb2:	4b7c      	ldr	r3, [pc, #496]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbc2:	4b79      	ldr	r3, [pc, #484]	; (800cda8 <HAL_RCC_OscConfig+0x4bc>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d118      	bne.n	800cc00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbce:	4b76      	ldr	r3, [pc, #472]	; (800cda8 <HAL_RCC_OscConfig+0x4bc>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a75      	ldr	r2, [pc, #468]	; (800cda8 <HAL_RCC_OscConfig+0x4bc>)
 800cbd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbda:	f7fa f84b 	bl	8006c74 <HAL_GetTick>
 800cbde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbe0:	e008      	b.n	800cbf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbe2:	f7fa f847 	bl	8006c74 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d901      	bls.n	800cbf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e18b      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbf4:	4b6c      	ldr	r3, [pc, #432]	; (800cda8 <HAL_RCC_OscConfig+0x4bc>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d0f0      	beq.n	800cbe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d108      	bne.n	800cc1a <HAL_RCC_OscConfig+0x32e>
 800cc08:	4b66      	ldr	r3, [pc, #408]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc0e:	4a65      	ldr	r2, [pc, #404]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc10:	f043 0301 	orr.w	r3, r3, #1
 800cc14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc18:	e024      	b.n	800cc64 <HAL_RCC_OscConfig+0x378>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	2b05      	cmp	r3, #5
 800cc20:	d110      	bne.n	800cc44 <HAL_RCC_OscConfig+0x358>
 800cc22:	4b60      	ldr	r3, [pc, #384]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc28:	4a5e      	ldr	r2, [pc, #376]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc2a:	f043 0304 	orr.w	r3, r3, #4
 800cc2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc32:	4b5c      	ldr	r3, [pc, #368]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc38:	4a5a      	ldr	r2, [pc, #360]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc3a:	f043 0301 	orr.w	r3, r3, #1
 800cc3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc42:	e00f      	b.n	800cc64 <HAL_RCC_OscConfig+0x378>
 800cc44:	4b57      	ldr	r3, [pc, #348]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc4a:	4a56      	ldr	r2, [pc, #344]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc4c:	f023 0301 	bic.w	r3, r3, #1
 800cc50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc54:	4b53      	ldr	r3, [pc, #332]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc5a:	4a52      	ldr	r2, [pc, #328]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc5c:	f023 0304 	bic.w	r3, r3, #4
 800cc60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d016      	beq.n	800cc9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc6c:	f7fa f802 	bl	8006c74 <HAL_GetTick>
 800cc70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc72:	e00a      	b.n	800cc8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc74:	f7f9 fffe 	bl	8006c74 <HAL_GetTick>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d901      	bls.n	800cc8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e140      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc8a:	4b46      	ldr	r3, [pc, #280]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0ed      	beq.n	800cc74 <HAL_RCC_OscConfig+0x388>
 800cc98:	e015      	b.n	800ccc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc9a:	f7f9 ffeb 	bl	8006c74 <HAL_GetTick>
 800cc9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cca0:	e00a      	b.n	800ccb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cca2:	f7f9 ffe7 	bl	8006c74 <HAL_GetTick>
 800cca6:	4602      	mov	r2, r0
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d901      	bls.n	800ccb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e129      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccb8:	4b3a      	ldr	r3, [pc, #232]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800ccba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccbe:	f003 0302 	and.w	r3, r3, #2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1ed      	bne.n	800cca2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ccc6:	7ffb      	ldrb	r3, [r7, #31]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d105      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cccc:	4b35      	ldr	r3, [pc, #212]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800ccce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd0:	4a34      	ldr	r2, [pc, #208]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800ccd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0320 	and.w	r3, r3, #32
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d03c      	beq.n	800cd5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	699b      	ldr	r3, [r3, #24]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01c      	beq.n	800cd26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ccec:	4b2d      	ldr	r3, [pc, #180]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800ccee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ccf2:	4a2c      	ldr	r2, [pc, #176]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccfc:	f7f9 ffba 	bl	8006c74 <HAL_GetTick>
 800cd00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd02:	e008      	b.n	800cd16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd04:	f7f9 ffb6 	bl	8006c74 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e0fa      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd16:	4b23      	ldr	r3, [pc, #140]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d0ef      	beq.n	800cd04 <HAL_RCC_OscConfig+0x418>
 800cd24:	e01b      	b.n	800cd5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd26:	4b1f      	ldr	r3, [pc, #124]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd2c:	4a1d      	ldr	r2, [pc, #116]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd2e:	f023 0301 	bic.w	r3, r3, #1
 800cd32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd36:	f7f9 ff9d 	bl	8006c74 <HAL_GetTick>
 800cd3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd3c:	e008      	b.n	800cd50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd3e:	f7f9 ff99 	bl	8006c74 <HAL_GetTick>
 800cd42:	4602      	mov	r2, r0
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d901      	bls.n	800cd50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e0dd      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd50:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd56:	f003 0302 	and.w	r3, r3, #2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1ef      	bne.n	800cd3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 80d1 	beq.w	800cf0a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd68:	4b0e      	ldr	r3, [pc, #56]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f003 030c 	and.w	r3, r3, #12
 800cd70:	2b0c      	cmp	r3, #12
 800cd72:	f000 808b 	beq.w	800ce8c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	2b02      	cmp	r3, #2
 800cd7c:	d15e      	bne.n	800ce3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd7e:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <HAL_RCC_OscConfig+0x4b8>)
 800cd84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd8a:	f7f9 ff73 	bl	8006c74 <HAL_GetTick>
 800cd8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd90:	e00c      	b.n	800cdac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd92:	f7f9 ff6f 	bl	8006c74 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d905      	bls.n	800cdac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e0b3      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
 800cda4:	40021000 	.word	0x40021000
 800cda8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdac:	4b59      	ldr	r3, [pc, #356]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1ec      	bne.n	800cd92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cdb8:	4b56      	ldr	r3, [pc, #344]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	4b56      	ldr	r3, [pc, #344]	; (800cf18 <HAL_RCC_OscConfig+0x62c>)
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6a11      	ldr	r1, [r2, #32]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cdc8:	3a01      	subs	r2, #1
 800cdca:	0112      	lsls	r2, r2, #4
 800cdcc:	4311      	orrs	r1, r2
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cdd2:	0212      	lsls	r2, r2, #8
 800cdd4:	4311      	orrs	r1, r2
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cdda:	0852      	lsrs	r2, r2, #1
 800cddc:	3a01      	subs	r2, #1
 800cdde:	0552      	lsls	r2, r2, #21
 800cde0:	4311      	orrs	r1, r2
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cde6:	0852      	lsrs	r2, r2, #1
 800cde8:	3a01      	subs	r2, #1
 800cdea:	0652      	lsls	r2, r2, #25
 800cdec:	4311      	orrs	r1, r2
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdf2:	06d2      	lsls	r2, r2, #27
 800cdf4:	430a      	orrs	r2, r1
 800cdf6:	4947      	ldr	r1, [pc, #284]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdfc:	4b45      	ldr	r3, [pc, #276]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a44      	ldr	r2, [pc, #272]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce08:	4b42      	ldr	r3, [pc, #264]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	4a41      	ldr	r2, [pc, #260]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce14:	f7f9 ff2e 	bl	8006c74 <HAL_GetTick>
 800ce18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce1a:	e008      	b.n	800ce2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce1c:	f7f9 ff2a 	bl	8006c74 <HAL_GetTick>
 800ce20:	4602      	mov	r2, r0
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d901      	bls.n	800ce2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e06e      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce2e:	4b39      	ldr	r3, [pc, #228]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0f0      	beq.n	800ce1c <HAL_RCC_OscConfig+0x530>
 800ce3a:	e066      	b.n	800cf0a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce3c:	4b35      	ldr	r3, [pc, #212]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a34      	ldr	r2, [pc, #208]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ce48:	4b32      	ldr	r3, [pc, #200]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	4a31      	ldr	r2, [pc, #196]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ce54:	4b2f      	ldr	r3, [pc, #188]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	4a2e      	ldr	r2, [pc, #184]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ce5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce64:	f7f9 ff06 	bl	8006c74 <HAL_GetTick>
 800ce68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce6a:	e008      	b.n	800ce7e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce6c:	f7f9 ff02 	bl	8006c74 <HAL_GetTick>
 800ce70:	4602      	mov	r2, r0
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	1ad3      	subs	r3, r2, r3
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d901      	bls.n	800ce7e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e046      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce7e:	4b25      	ldr	r3, [pc, #148]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1f0      	bne.n	800ce6c <HAL_RCC_OscConfig+0x580>
 800ce8a:	e03e      	b.n	800cf0a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e039      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ce98:	4b1e      	ldr	r3, [pc, #120]	; (800cf14 <HAL_RCC_OscConfig+0x628>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f003 0203 	and.w	r2, r3, #3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d12c      	bne.n	800cf06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d123      	bne.n	800cf06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d11b      	bne.n	800cf06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d113      	bne.n	800cf06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee8:	085b      	lsrs	r3, r3, #1
 800ceea:	3b01      	subs	r3, #1
 800ceec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d109      	bne.n	800cf06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefc:	085b      	lsrs	r3, r3, #1
 800cefe:	3b01      	subs	r3, #1
 800cf00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d001      	beq.n	800cf0a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e000      	b.n	800cf0c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3720      	adds	r7, #32
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	40021000 	.word	0x40021000
 800cf18:	019f800c 	.word	0x019f800c

0800cf1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cf26:	2300      	movs	r3, #0
 800cf28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e11e      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf34:	4b91      	ldr	r3, [pc, #580]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 030f 	and.w	r3, r3, #15
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d910      	bls.n	800cf64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf42:	4b8e      	ldr	r3, [pc, #568]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f023 020f 	bic.w	r2, r3, #15
 800cf4a:	498c      	ldr	r1, [pc, #560]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf52:	4b8a      	ldr	r3, [pc, #552]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d001      	beq.n	800cf64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e106      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d073      	beq.n	800d058 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d129      	bne.n	800cfcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf78:	4b81      	ldr	r3, [pc, #516]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e0f4      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cf88:	f000 f99e 	bl	800d2c8 <RCC_GetSysClockFreqFromPLLSource>
 800cf8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	4a7c      	ldr	r2, [pc, #496]	; (800d184 <HAL_RCC_ClockConfig+0x268>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d93f      	bls.n	800d016 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cf96:	4b7a      	ldr	r3, [pc, #488]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d009      	beq.n	800cfb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d033      	beq.n	800d016 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d12f      	bne.n	800d016 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cfb6:	4b72      	ldr	r3, [pc, #456]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfbe:	4a70      	ldr	r2, [pc, #448]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cfc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cfc6:	2380      	movs	r3, #128	; 0x80
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e024      	b.n	800d016 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d107      	bne.n	800cfe4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfd4:	4b6a      	ldr	r3, [pc, #424]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d109      	bne.n	800cff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e0c6      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfe4:	4b66      	ldr	r3, [pc, #408]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e0be      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cff4:	f000 f8ce 	bl	800d194 <HAL_RCC_GetSysClockFreq>
 800cff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	4a61      	ldr	r2, [pc, #388]	; (800d184 <HAL_RCC_ClockConfig+0x268>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d909      	bls.n	800d016 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d002:	4b5f      	ldr	r3, [pc, #380]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d00a:	4a5d      	ldr	r2, [pc, #372]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d010:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d012:	2380      	movs	r3, #128	; 0x80
 800d014:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d016:	4b5a      	ldr	r3, [pc, #360]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f023 0203 	bic.w	r2, r3, #3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	4957      	ldr	r1, [pc, #348]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d024:	4313      	orrs	r3, r2
 800d026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d028:	f7f9 fe24 	bl	8006c74 <HAL_GetTick>
 800d02c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d02e:	e00a      	b.n	800d046 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d030:	f7f9 fe20 	bl	8006c74 <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d03e:	4293      	cmp	r3, r2
 800d040:	d901      	bls.n	800d046 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e095      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d046:	4b4e      	ldr	r3, [pc, #312]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f003 020c 	and.w	r2, r3, #12
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	429a      	cmp	r2, r3
 800d056:	d1eb      	bne.n	800d030 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d023      	beq.n	800d0ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d005      	beq.n	800d07c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d070:	4b43      	ldr	r3, [pc, #268]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	4a42      	ldr	r2, [pc, #264]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d07a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 0308 	and.w	r3, r3, #8
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d088:	4b3d      	ldr	r3, [pc, #244]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d090:	4a3b      	ldr	r2, [pc, #236]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d098:	4b39      	ldr	r3, [pc, #228]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	4936      	ldr	r1, [pc, #216]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	608b      	str	r3, [r1, #8]
 800d0aa:	e008      	b.n	800d0be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b80      	cmp	r3, #128	; 0x80
 800d0b0:	d105      	bne.n	800d0be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d0b2:	4b33      	ldr	r3, [pc, #204]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	4a32      	ldr	r2, [pc, #200]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d0b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d0be:	4b2f      	ldr	r3, [pc, #188]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 030f 	and.w	r3, r3, #15
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d21d      	bcs.n	800d108 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0cc:	4b2b      	ldr	r3, [pc, #172]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f023 020f 	bic.w	r2, r3, #15
 800d0d4:	4929      	ldr	r1, [pc, #164]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d0dc:	f7f9 fdca 	bl	8006c74 <HAL_GetTick>
 800d0e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0e2:	e00a      	b.n	800d0fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0e4:	f7f9 fdc6 	bl	8006c74 <HAL_GetTick>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d901      	bls.n	800d0fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e03b      	b.n	800d172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0fa:	4b20      	ldr	r3, [pc, #128]	; (800d17c <HAL_RCC_ClockConfig+0x260>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 030f 	and.w	r3, r3, #15
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d1ed      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 0304 	and.w	r3, r3, #4
 800d110:	2b00      	cmp	r3, #0
 800d112:	d008      	beq.n	800d126 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d114:	4b1a      	ldr	r3, [pc, #104]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4917      	ldr	r1, [pc, #92]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d122:	4313      	orrs	r3, r2
 800d124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0308 	and.w	r3, r3, #8
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d132:	4b13      	ldr	r3, [pc, #76]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	490f      	ldr	r1, [pc, #60]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d142:	4313      	orrs	r3, r2
 800d144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d146:	f000 f825 	bl	800d194 <HAL_RCC_GetSysClockFreq>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4b0c      	ldr	r3, [pc, #48]	; (800d180 <HAL_RCC_ClockConfig+0x264>)
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	091b      	lsrs	r3, r3, #4
 800d152:	f003 030f 	and.w	r3, r3, #15
 800d156:	490c      	ldr	r1, [pc, #48]	; (800d188 <HAL_RCC_ClockConfig+0x26c>)
 800d158:	5ccb      	ldrb	r3, [r1, r3]
 800d15a:	f003 031f 	and.w	r3, r3, #31
 800d15e:	fa22 f303 	lsr.w	r3, r2, r3
 800d162:	4a0a      	ldr	r2, [pc, #40]	; (800d18c <HAL_RCC_ClockConfig+0x270>)
 800d164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d166:	4b0a      	ldr	r3, [pc, #40]	; (800d190 <HAL_RCC_ClockConfig+0x274>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7f9 fd36 	bl	8006bdc <HAL_InitTick>
 800d170:	4603      	mov	r3, r0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	40022000 	.word	0x40022000
 800d180:	40021000 	.word	0x40021000
 800d184:	04c4b400 	.word	0x04c4b400
 800d188:	08018514 	.word	0x08018514
 800d18c:	20000000 	.word	0x20000000
 800d190:	20000004 	.word	0x20000004

0800d194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d19a:	4b2c      	ldr	r3, [pc, #176]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f003 030c 	and.w	r3, r3, #12
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	d102      	bne.n	800d1ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d1a6:	4b2a      	ldr	r3, [pc, #168]	; (800d250 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d1a8:	613b      	str	r3, [r7, #16]
 800d1aa:	e047      	b.n	800d23c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d1ac:	4b27      	ldr	r3, [pc, #156]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	f003 030c 	and.w	r3, r3, #12
 800d1b4:	2b08      	cmp	r3, #8
 800d1b6:	d102      	bne.n	800d1be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d1b8:	4b26      	ldr	r3, [pc, #152]	; (800d254 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d1ba:	613b      	str	r3, [r7, #16]
 800d1bc:	e03e      	b.n	800d23c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d1be:	4b23      	ldr	r3, [pc, #140]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	f003 030c 	and.w	r3, r3, #12
 800d1c6:	2b0c      	cmp	r3, #12
 800d1c8:	d136      	bne.n	800d238 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d1ca:	4b20      	ldr	r3, [pc, #128]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f003 0303 	and.w	r3, r3, #3
 800d1d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d1d4:	4b1d      	ldr	r3, [pc, #116]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	091b      	lsrs	r3, r3, #4
 800d1da:	f003 030f 	and.w	r3, r3, #15
 800d1de:	3301      	adds	r3, #1
 800d1e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d10c      	bne.n	800d202 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d1e8:	4a1a      	ldr	r2, [pc, #104]	; (800d254 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f0:	4a16      	ldr	r2, [pc, #88]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1f2:	68d2      	ldr	r2, [r2, #12]
 800d1f4:	0a12      	lsrs	r2, r2, #8
 800d1f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d1fa:	fb02 f303 	mul.w	r3, r2, r3
 800d1fe:	617b      	str	r3, [r7, #20]
      break;
 800d200:	e00c      	b.n	800d21c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d202:	4a13      	ldr	r2, [pc, #76]	; (800d250 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20a:	4a10      	ldr	r2, [pc, #64]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d20c:	68d2      	ldr	r2, [r2, #12]
 800d20e:	0a12      	lsrs	r2, r2, #8
 800d210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d214:	fb02 f303 	mul.w	r3, r2, r3
 800d218:	617b      	str	r3, [r7, #20]
      break;
 800d21a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d21c:	4b0b      	ldr	r3, [pc, #44]	; (800d24c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	0e5b      	lsrs	r3, r3, #25
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	3301      	adds	r3, #1
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	fbb2 f3f3 	udiv	r3, r2, r3
 800d234:	613b      	str	r3, [r7, #16]
 800d236:	e001      	b.n	800d23c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d23c:	693b      	ldr	r3, [r7, #16]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	371c      	adds	r7, #28
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	40021000 	.word	0x40021000
 800d250:	00f42400 	.word	0x00f42400
 800d254:	007a1200 	.word	0x007a1200

0800d258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d258:	b480      	push	{r7}
 800d25a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d25c:	4b03      	ldr	r3, [pc, #12]	; (800d26c <HAL_RCC_GetHCLKFreq+0x14>)
 800d25e:	681b      	ldr	r3, [r3, #0]
}
 800d260:	4618      	mov	r0, r3
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20000000 	.word	0x20000000

0800d270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d274:	f7ff fff0 	bl	800d258 <HAL_RCC_GetHCLKFreq>
 800d278:	4602      	mov	r2, r0
 800d27a:	4b06      	ldr	r3, [pc, #24]	; (800d294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	0a1b      	lsrs	r3, r3, #8
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	4904      	ldr	r1, [pc, #16]	; (800d298 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d286:	5ccb      	ldrb	r3, [r1, r3]
 800d288:	f003 031f 	and.w	r3, r3, #31
 800d28c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d290:	4618      	mov	r0, r3
 800d292:	bd80      	pop	{r7, pc}
 800d294:	40021000 	.word	0x40021000
 800d298:	08018524 	.word	0x08018524

0800d29c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d2a0:	f7ff ffda 	bl	800d258 <HAL_RCC_GetHCLKFreq>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	0adb      	lsrs	r3, r3, #11
 800d2ac:	f003 0307 	and.w	r3, r3, #7
 800d2b0:	4904      	ldr	r1, [pc, #16]	; (800d2c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d2b2:	5ccb      	ldrb	r3, [r1, r3]
 800d2b4:	f003 031f 	and.w	r3, r3, #31
 800d2b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	40021000 	.word	0x40021000
 800d2c4:	08018524 	.word	0x08018524

0800d2c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b087      	sub	sp, #28
 800d2cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d2ce:	4b1e      	ldr	r3, [pc, #120]	; (800d348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	f003 0303 	and.w	r3, r3, #3
 800d2d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d2d8:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	091b      	lsrs	r3, r3, #4
 800d2de:	f003 030f 	and.w	r3, r3, #15
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	2b03      	cmp	r3, #3
 800d2ea:	d10c      	bne.n	800d306 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d2ec:	4a17      	ldr	r2, [pc, #92]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f4:	4a14      	ldr	r2, [pc, #80]	; (800d348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2f6:	68d2      	ldr	r2, [r2, #12]
 800d2f8:	0a12      	lsrs	r2, r2, #8
 800d2fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	617b      	str	r3, [r7, #20]
    break;
 800d304:	e00c      	b.n	800d320 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d306:	4a12      	ldr	r2, [pc, #72]	; (800d350 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d30e:	4a0e      	ldr	r2, [pc, #56]	; (800d348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d310:	68d2      	ldr	r2, [r2, #12]
 800d312:	0a12      	lsrs	r2, r2, #8
 800d314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d318:	fb02 f303 	mul.w	r3, r2, r3
 800d31c:	617b      	str	r3, [r7, #20]
    break;
 800d31e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d320:	4b09      	ldr	r3, [pc, #36]	; (800d348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	0e5b      	lsrs	r3, r3, #25
 800d326:	f003 0303 	and.w	r3, r3, #3
 800d32a:	3301      	adds	r3, #1
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	fbb2 f3f3 	udiv	r3, r2, r3
 800d338:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d33a:	687b      	ldr	r3, [r7, #4]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	371c      	adds	r7, #28
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	40021000 	.word	0x40021000
 800d34c:	007a1200 	.word	0x007a1200
 800d350:	00f42400 	.word	0x00f42400

0800d354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d35c:	2300      	movs	r3, #0
 800d35e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d360:	2300      	movs	r3, #0
 800d362:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f000 8098 	beq.w	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d372:	2300      	movs	r3, #0
 800d374:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d376:	4b43      	ldr	r3, [pc, #268]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10d      	bne.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d382:	4b40      	ldr	r3, [pc, #256]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d386:	4a3f      	ldr	r2, [pc, #252]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d38c:	6593      	str	r3, [r2, #88]	; 0x58
 800d38e:	4b3d      	ldr	r3, [pc, #244]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d396:	60bb      	str	r3, [r7, #8]
 800d398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d39a:	2301      	movs	r3, #1
 800d39c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d39e:	4b3a      	ldr	r3, [pc, #232]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a39      	ldr	r2, [pc, #228]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3aa:	f7f9 fc63 	bl	8006c74 <HAL_GetTick>
 800d3ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3b0:	e009      	b.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3b2:	f7f9 fc5f 	bl	8006c74 <HAL_GetTick>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d902      	bls.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	74fb      	strb	r3, [r7, #19]
        break;
 800d3c4:	e005      	b.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3c6:	4b30      	ldr	r3, [pc, #192]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0ef      	beq.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d3d2:	7cfb      	ldrb	r3, [r7, #19]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d159      	bne.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d01e      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d019      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d3f4:	4b23      	ldr	r3, [pc, #140]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d400:	4b20      	ldr	r3, [pc, #128]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d406:	4a1f      	ldr	r2, [pc, #124]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d40c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d410:	4b1c      	ldr	r3, [pc, #112]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d416:	4a1b      	ldr	r2, [pc, #108]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d41c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d420:	4a18      	ldr	r2, [pc, #96]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d016      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d432:	f7f9 fc1f 	bl	8006c74 <HAL_GetTick>
 800d436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d438:	e00b      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d43a:	f7f9 fc1b 	bl	8006c74 <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	f241 3288 	movw	r2, #5000	; 0x1388
 800d448:	4293      	cmp	r3, r2
 800d44a:	d902      	bls.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	74fb      	strb	r3, [r7, #19]
            break;
 800d450:	e006      	b.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d452:	4b0c      	ldr	r3, [pc, #48]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0ec      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d460:	7cfb      	ldrb	r3, [r7, #19]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10b      	bne.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d466:	4b07      	ldr	r3, [pc, #28]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d46c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d474:	4903      	ldr	r1, [pc, #12]	; (800d484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d476:	4313      	orrs	r3, r2
 800d478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d47c:	e008      	b.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d47e:	7cfb      	ldrb	r3, [r7, #19]
 800d480:	74bb      	strb	r3, [r7, #18]
 800d482:	e005      	b.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d484:	40021000 	.word	0x40021000
 800d488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d48c:	7cfb      	ldrb	r3, [r7, #19]
 800d48e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d490:	7c7b      	ldrb	r3, [r7, #17]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d105      	bne.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d496:	4ba7      	ldr	r3, [pc, #668]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d49a:	4aa6      	ldr	r2, [pc, #664]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d49c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00a      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d4ae:	4ba1      	ldr	r3, [pc, #644]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b4:	f023 0203 	bic.w	r2, r3, #3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	499d      	ldr	r1, [pc, #628]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00a      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d4d0:	4b98      	ldr	r3, [pc, #608]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4d6:	f023 020c 	bic.w	r2, r3, #12
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	4995      	ldr	r1, [pc, #596]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d4f2:	4b90      	ldr	r3, [pc, #576]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	498c      	ldr	r1, [pc, #560]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d502:	4313      	orrs	r3, r2
 800d504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 0308 	and.w	r3, r3, #8
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00a      	beq.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d514:	4b87      	ldr	r3, [pc, #540]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d51a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	4984      	ldr	r1, [pc, #528]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d524:	4313      	orrs	r3, r2
 800d526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 0310 	and.w	r3, r3, #16
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d536:	4b7f      	ldr	r3, [pc, #508]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d53c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	497b      	ldr	r1, [pc, #492]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d546:	4313      	orrs	r3, r2
 800d548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0320 	and.w	r3, r3, #32
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00a      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d558:	4b76      	ldr	r3, [pc, #472]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d55e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	4973      	ldr	r1, [pc, #460]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d568:	4313      	orrs	r3, r2
 800d56a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d57a:	4b6e      	ldr	r3, [pc, #440]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	69db      	ldr	r3, [r3, #28]
 800d588:	496a      	ldr	r1, [pc, #424]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d59c:	4b65      	ldr	r3, [pc, #404]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	4962      	ldr	r1, [pc, #392]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00a      	beq.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d5be:	4b5d      	ldr	r3, [pc, #372]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5cc:	4959      	ldr	r1, [pc, #356]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00a      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5e0:	4b54      	ldr	r3, [pc, #336]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5e6:	f023 0203 	bic.w	r2, r3, #3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ee:	4951      	ldr	r1, [pc, #324]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d602:	4b4c      	ldr	r3, [pc, #304]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	4948      	ldr	r1, [pc, #288]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d612:	4313      	orrs	r3, r2
 800d614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d620:	2b00      	cmp	r3, #0
 800d622:	d015      	beq.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d624:	4b43      	ldr	r3, [pc, #268]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d62a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	4940      	ldr	r1, [pc, #256]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d634:	4313      	orrs	r3, r2
 800d636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d642:	d105      	bne.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d644:	4b3b      	ldr	r3, [pc, #236]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	4a3a      	ldr	r2, [pc, #232]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d64a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d64e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d015      	beq.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d65c:	4b35      	ldr	r3, [pc, #212]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66a:	4932      	ldr	r1, [pc, #200]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d66c:	4313      	orrs	r3, r2
 800d66e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d67a:	d105      	bne.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d67c:	4b2d      	ldr	r3, [pc, #180]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	4a2c      	ldr	r2, [pc, #176]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d686:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d690:	2b00      	cmp	r3, #0
 800d692:	d015      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d694:	4b27      	ldr	r3, [pc, #156]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a2:	4924      	ldr	r1, [pc, #144]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6b2:	d105      	bne.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6b4:	4b1f      	ldr	r3, [pc, #124]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	4a1e      	ldr	r2, [pc, #120]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d015      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d6cc:	4b19      	ldr	r3, [pc, #100]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6da:	4916      	ldr	r1, [pc, #88]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6ea:	d105      	bne.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	4a10      	ldr	r2, [pc, #64]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d019      	beq.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d704:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d70a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	4908      	ldr	r1, [pc, #32]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d714:	4313      	orrs	r3, r2
 800d716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d722:	d109      	bne.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d724:	4b03      	ldr	r3, [pc, #12]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	4a02      	ldr	r2, [pc, #8]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d72a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d72e:	60d3      	str	r3, [r2, #12]
 800d730:	e002      	b.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d732:	bf00      	nop
 800d734:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d015      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d744:	4b29      	ldr	r3, [pc, #164]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d74a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d752:	4926      	ldr	r1, [pc, #152]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d754:	4313      	orrs	r3, r2
 800d756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d762:	d105      	bne.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d764:	4b21      	ldr	r3, [pc, #132]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	4a20      	ldr	r2, [pc, #128]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d76a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d76e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d015      	beq.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d77c:	4b1b      	ldr	r3, [pc, #108]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d782:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78a:	4918      	ldr	r1, [pc, #96]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d78c:	4313      	orrs	r3, r2
 800d78e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d79a:	d105      	bne.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d79c:	4b13      	ldr	r3, [pc, #76]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	4a12      	ldr	r2, [pc, #72]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d015      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d7ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c2:	490a      	ldr	r1, [pc, #40]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d7d2:	d105      	bne.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	4a04      	ldr	r2, [pc, #16]	; (800d7ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d7e0:	7cbb      	ldrb	r3, [r7, #18]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3718      	adds	r7, #24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	40021000 	.word	0x40021000

0800d7f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e049      	b.n	800d896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d106      	bne.n	800d81c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7f8 fd7a 	bl	8006310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3304      	adds	r3, #4
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f000 fbc8 	bl	800dfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d101      	bne.n	800d8b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e049      	b.n	800d944 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d106      	bne.n	800d8ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7f8 fda5 	bl	8006414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f000 fb71 	bl	800dfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d109      	bne.n	800d970 <HAL_TIM_PWM_Start+0x24>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b01      	cmp	r3, #1
 800d966:	bf14      	ite	ne
 800d968:	2301      	movne	r3, #1
 800d96a:	2300      	moveq	r3, #0
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	e03c      	b.n	800d9ea <HAL_TIM_PWM_Start+0x9e>
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b04      	cmp	r3, #4
 800d974:	d109      	bne.n	800d98a <HAL_TIM_PWM_Start+0x3e>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b01      	cmp	r3, #1
 800d980:	bf14      	ite	ne
 800d982:	2301      	movne	r3, #1
 800d984:	2300      	moveq	r3, #0
 800d986:	b2db      	uxtb	r3, r3
 800d988:	e02f      	b.n	800d9ea <HAL_TIM_PWM_Start+0x9e>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d109      	bne.n	800d9a4 <HAL_TIM_PWM_Start+0x58>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b01      	cmp	r3, #1
 800d99a:	bf14      	ite	ne
 800d99c:	2301      	movne	r3, #1
 800d99e:	2300      	moveq	r3, #0
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	e022      	b.n	800d9ea <HAL_TIM_PWM_Start+0x9e>
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b0c      	cmp	r3, #12
 800d9a8:	d109      	bne.n	800d9be <HAL_TIM_PWM_Start+0x72>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	bf14      	ite	ne
 800d9b6:	2301      	movne	r3, #1
 800d9b8:	2300      	moveq	r3, #0
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	e015      	b.n	800d9ea <HAL_TIM_PWM_Start+0x9e>
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d109      	bne.n	800d9d8 <HAL_TIM_PWM_Start+0x8c>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	bf14      	ite	ne
 800d9d0:	2301      	movne	r3, #1
 800d9d2:	2300      	moveq	r3, #0
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	e008      	b.n	800d9ea <HAL_TIM_PWM_Start+0x9e>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	bf14      	ite	ne
 800d9e4:	2301      	movne	r3, #1
 800d9e6:	2300      	moveq	r3, #0
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e0a6      	b.n	800db40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d104      	bne.n	800da02 <HAL_TIM_PWM_Start+0xb6>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da00:	e023      	b.n	800da4a <HAL_TIM_PWM_Start+0xfe>
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b04      	cmp	r3, #4
 800da06:	d104      	bne.n	800da12 <HAL_TIM_PWM_Start+0xc6>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da10:	e01b      	b.n	800da4a <HAL_TIM_PWM_Start+0xfe>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b08      	cmp	r3, #8
 800da16:	d104      	bne.n	800da22 <HAL_TIM_PWM_Start+0xd6>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da20:	e013      	b.n	800da4a <HAL_TIM_PWM_Start+0xfe>
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b0c      	cmp	r3, #12
 800da26:	d104      	bne.n	800da32 <HAL_TIM_PWM_Start+0xe6>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da30:	e00b      	b.n	800da4a <HAL_TIM_PWM_Start+0xfe>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b10      	cmp	r3, #16
 800da36:	d104      	bne.n	800da42 <HAL_TIM_PWM_Start+0xf6>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da40:	e003      	b.n	800da4a <HAL_TIM_PWM_Start+0xfe>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2202      	movs	r2, #2
 800da46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2201      	movs	r2, #1
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	4618      	mov	r0, r3
 800da54:	f000 ff24 	bl	800e8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a3a      	ldr	r2, [pc, #232]	; (800db48 <HAL_TIM_PWM_Start+0x1fc>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d018      	beq.n	800da94 <HAL_TIM_PWM_Start+0x148>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a39      	ldr	r2, [pc, #228]	; (800db4c <HAL_TIM_PWM_Start+0x200>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d013      	beq.n	800da94 <HAL_TIM_PWM_Start+0x148>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a37      	ldr	r2, [pc, #220]	; (800db50 <HAL_TIM_PWM_Start+0x204>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d00e      	beq.n	800da94 <HAL_TIM_PWM_Start+0x148>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a36      	ldr	r2, [pc, #216]	; (800db54 <HAL_TIM_PWM_Start+0x208>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d009      	beq.n	800da94 <HAL_TIM_PWM_Start+0x148>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a34      	ldr	r2, [pc, #208]	; (800db58 <HAL_TIM_PWM_Start+0x20c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d004      	beq.n	800da94 <HAL_TIM_PWM_Start+0x148>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a33      	ldr	r2, [pc, #204]	; (800db5c <HAL_TIM_PWM_Start+0x210>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d101      	bne.n	800da98 <HAL_TIM_PWM_Start+0x14c>
 800da94:	2301      	movs	r3, #1
 800da96:	e000      	b.n	800da9a <HAL_TIM_PWM_Start+0x14e>
 800da98:	2300      	movs	r3, #0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d007      	beq.n	800daae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800daac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a25      	ldr	r2, [pc, #148]	; (800db48 <HAL_TIM_PWM_Start+0x1fc>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d022      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac0:	d01d      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a26      	ldr	r2, [pc, #152]	; (800db60 <HAL_TIM_PWM_Start+0x214>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d018      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a24      	ldr	r2, [pc, #144]	; (800db64 <HAL_TIM_PWM_Start+0x218>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d013      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a23      	ldr	r2, [pc, #140]	; (800db68 <HAL_TIM_PWM_Start+0x21c>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d00e      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a19      	ldr	r2, [pc, #100]	; (800db4c <HAL_TIM_PWM_Start+0x200>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d009      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a18      	ldr	r2, [pc, #96]	; (800db50 <HAL_TIM_PWM_Start+0x204>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d004      	beq.n	800dafe <HAL_TIM_PWM_Start+0x1b2>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a18      	ldr	r2, [pc, #96]	; (800db5c <HAL_TIM_PWM_Start+0x210>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d115      	bne.n	800db2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	689a      	ldr	r2, [r3, #8]
 800db04:	4b19      	ldr	r3, [pc, #100]	; (800db6c <HAL_TIM_PWM_Start+0x220>)
 800db06:	4013      	ands	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b06      	cmp	r3, #6
 800db0e:	d015      	beq.n	800db3c <HAL_TIM_PWM_Start+0x1f0>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db16:	d011      	beq.n	800db3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f042 0201 	orr.w	r2, r2, #1
 800db26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db28:	e008      	b.n	800db3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f042 0201 	orr.w	r2, r2, #1
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	e000      	b.n	800db3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	40012c00 	.word	0x40012c00
 800db4c:	40013400 	.word	0x40013400
 800db50:	40014000 	.word	0x40014000
 800db54:	40014400 	.word	0x40014400
 800db58:	40014800 	.word	0x40014800
 800db5c:	40015000 	.word	0x40015000
 800db60:	40000400 	.word	0x40000400
 800db64:	40000800 	.word	0x40000800
 800db68:	40000c00 	.word	0x40000c00
 800db6c:	00010007 	.word	0x00010007

0800db70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db86:	2b01      	cmp	r3, #1
 800db88:	d101      	bne.n	800db8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db8a:	2302      	movs	r3, #2
 800db8c:	e0ff      	b.n	800dd8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b14      	cmp	r3, #20
 800db9a:	f200 80f0 	bhi.w	800dd7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db9e:	a201      	add	r2, pc, #4	; (adr r2, 800dba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba4:	0800dbf9 	.word	0x0800dbf9
 800dba8:	0800dd7f 	.word	0x0800dd7f
 800dbac:	0800dd7f 	.word	0x0800dd7f
 800dbb0:	0800dd7f 	.word	0x0800dd7f
 800dbb4:	0800dc39 	.word	0x0800dc39
 800dbb8:	0800dd7f 	.word	0x0800dd7f
 800dbbc:	0800dd7f 	.word	0x0800dd7f
 800dbc0:	0800dd7f 	.word	0x0800dd7f
 800dbc4:	0800dc7b 	.word	0x0800dc7b
 800dbc8:	0800dd7f 	.word	0x0800dd7f
 800dbcc:	0800dd7f 	.word	0x0800dd7f
 800dbd0:	0800dd7f 	.word	0x0800dd7f
 800dbd4:	0800dcbb 	.word	0x0800dcbb
 800dbd8:	0800dd7f 	.word	0x0800dd7f
 800dbdc:	0800dd7f 	.word	0x0800dd7f
 800dbe0:	0800dd7f 	.word	0x0800dd7f
 800dbe4:	0800dcfd 	.word	0x0800dcfd
 800dbe8:	0800dd7f 	.word	0x0800dd7f
 800dbec:	0800dd7f 	.word	0x0800dd7f
 800dbf0:	0800dd7f 	.word	0x0800dd7f
 800dbf4:	0800dd3d 	.word	0x0800dd3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 fa88 	bl	800e114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	699a      	ldr	r2, [r3, #24]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f042 0208 	orr.w	r2, r2, #8
 800dc12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	699a      	ldr	r2, [r3, #24]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f022 0204 	bic.w	r2, r2, #4
 800dc22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6999      	ldr	r1, [r3, #24]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	691a      	ldr	r2, [r3, #16]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	619a      	str	r2, [r3, #24]
      break;
 800dc36:	e0a5      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68b9      	ldr	r1, [r7, #8]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fb02 	bl	800e248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	699a      	ldr	r2, [r3, #24]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699a      	ldr	r2, [r3, #24]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6999      	ldr	r1, [r3, #24]
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	021a      	lsls	r2, r3, #8
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	619a      	str	r2, [r3, #24]
      break;
 800dc78:	e084      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68b9      	ldr	r1, [r7, #8]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f000 fb75 	bl	800e370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	69da      	ldr	r2, [r3, #28]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f042 0208 	orr.w	r2, r2, #8
 800dc94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	69da      	ldr	r2, [r3, #28]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f022 0204 	bic.w	r2, r2, #4
 800dca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	69d9      	ldr	r1, [r3, #28]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	691a      	ldr	r2, [r3, #16]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	61da      	str	r2, [r3, #28]
      break;
 800dcb8:	e064      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68b9      	ldr	r1, [r7, #8]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fbe7 	bl	800e494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	69da      	ldr	r2, [r3, #28]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	69da      	ldr	r2, [r3, #28]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	69d9      	ldr	r1, [r3, #28]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	021a      	lsls	r2, r3, #8
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	430a      	orrs	r2, r1
 800dcf8:	61da      	str	r2, [r3, #28]
      break;
 800dcfa:	e043      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fc5a 	bl	800e5bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0208 	orr.w	r2, r2, #8
 800dd16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f022 0204 	bic.w	r2, r2, #4
 800dd26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd3a:	e023      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68b9      	ldr	r1, [r7, #8]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fca4 	bl	800e690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	021a      	lsls	r2, r3, #8
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd7c:	e002      	b.n	800dd84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	75fb      	strb	r3, [r7, #23]
      break;
 800dd82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop

0800dd98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d101      	bne.n	800ddb4 <HAL_TIM_ConfigClockSource+0x1c>
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e0f6      	b.n	800dfa2 <HAL_TIM_ConfigClockSource+0x20a>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ddd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ddd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a6f      	ldr	r2, [pc, #444]	; (800dfac <HAL_TIM_ConfigClockSource+0x214>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	f000 80c1 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800ddf4:	4a6d      	ldr	r2, [pc, #436]	; (800dfac <HAL_TIM_ConfigClockSource+0x214>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	f200 80c6 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddfc:	4a6c      	ldr	r2, [pc, #432]	; (800dfb0 <HAL_TIM_ConfigClockSource+0x218>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	f000 80b9 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de04:	4a6a      	ldr	r2, [pc, #424]	; (800dfb0 <HAL_TIM_ConfigClockSource+0x218>)
 800de06:	4293      	cmp	r3, r2
 800de08:	f200 80be 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de0c:	4a69      	ldr	r2, [pc, #420]	; (800dfb4 <HAL_TIM_ConfigClockSource+0x21c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	f000 80b1 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de14:	4a67      	ldr	r2, [pc, #412]	; (800dfb4 <HAL_TIM_ConfigClockSource+0x21c>)
 800de16:	4293      	cmp	r3, r2
 800de18:	f200 80b6 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de1c:	4a66      	ldr	r2, [pc, #408]	; (800dfb8 <HAL_TIM_ConfigClockSource+0x220>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	f000 80a9 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de24:	4a64      	ldr	r2, [pc, #400]	; (800dfb8 <HAL_TIM_ConfigClockSource+0x220>)
 800de26:	4293      	cmp	r3, r2
 800de28:	f200 80ae 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de2c:	4a63      	ldr	r2, [pc, #396]	; (800dfbc <HAL_TIM_ConfigClockSource+0x224>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	f000 80a1 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de34:	4a61      	ldr	r2, [pc, #388]	; (800dfbc <HAL_TIM_ConfigClockSource+0x224>)
 800de36:	4293      	cmp	r3, r2
 800de38:	f200 80a6 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de3c:	4a60      	ldr	r2, [pc, #384]	; (800dfc0 <HAL_TIM_ConfigClockSource+0x228>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	f000 8099 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de44:	4a5e      	ldr	r2, [pc, #376]	; (800dfc0 <HAL_TIM_ConfigClockSource+0x228>)
 800de46:	4293      	cmp	r3, r2
 800de48:	f200 809e 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de50:	f000 8091 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de58:	f200 8096 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de60:	f000 8089 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800de64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de68:	f200 808e 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de70:	d03e      	beq.n	800def0 <HAL_TIM_ConfigClockSource+0x158>
 800de72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de76:	f200 8087 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de7e:	f000 8086 	beq.w	800df8e <HAL_TIM_ConfigClockSource+0x1f6>
 800de82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de86:	d87f      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de88:	2b70      	cmp	r3, #112	; 0x70
 800de8a:	d01a      	beq.n	800dec2 <HAL_TIM_ConfigClockSource+0x12a>
 800de8c:	2b70      	cmp	r3, #112	; 0x70
 800de8e:	d87b      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de90:	2b60      	cmp	r3, #96	; 0x60
 800de92:	d050      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x19e>
 800de94:	2b60      	cmp	r3, #96	; 0x60
 800de96:	d877      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800de98:	2b50      	cmp	r3, #80	; 0x50
 800de9a:	d03c      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x17e>
 800de9c:	2b50      	cmp	r3, #80	; 0x50
 800de9e:	d873      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800dea0:	2b40      	cmp	r3, #64	; 0x40
 800dea2:	d058      	beq.n	800df56 <HAL_TIM_ConfigClockSource+0x1be>
 800dea4:	2b40      	cmp	r3, #64	; 0x40
 800dea6:	d86f      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800dea8:	2b30      	cmp	r3, #48	; 0x30
 800deaa:	d064      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800deac:	2b30      	cmp	r3, #48	; 0x30
 800deae:	d86b      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800deb0:	2b20      	cmp	r3, #32
 800deb2:	d060      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	d867      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d05c      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800debc:	2b10      	cmp	r3, #16
 800debe:	d05a      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1de>
 800dec0:	e062      	b.n	800df88 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	6899      	ldr	r1, [r3, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	f000 fcc5 	bl	800e860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	609a      	str	r2, [r3, #8]
      break;
 800deee:	e04f      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6818      	ldr	r0, [r3, #0]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	6899      	ldr	r1, [r3, #8]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	685a      	ldr	r2, [r3, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	f000 fcae 	bl	800e860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	689a      	ldr	r2, [r3, #8]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df12:	609a      	str	r2, [r3, #8]
      break;
 800df14:	e03c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	6859      	ldr	r1, [r3, #4]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	461a      	mov	r2, r3
 800df24:	f000 fc20 	bl	800e768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2150      	movs	r1, #80	; 0x50
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fc79 	bl	800e826 <TIM_ITRx_SetConfig>
      break;
 800df34:	e02c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	6859      	ldr	r1, [r3, #4]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	461a      	mov	r2, r3
 800df44:	f000 fc3f 	bl	800e7c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2160      	movs	r1, #96	; 0x60
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fc69 	bl	800e826 <TIM_ITRx_SetConfig>
      break;
 800df54:	e01c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6818      	ldr	r0, [r3, #0]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	6859      	ldr	r1, [r3, #4]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	461a      	mov	r2, r3
 800df64:	f000 fc00 	bl	800e768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2140      	movs	r1, #64	; 0x40
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 fc59 	bl	800e826 <TIM_ITRx_SetConfig>
      break;
 800df74:	e00c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4619      	mov	r1, r3
 800df80:	4610      	mov	r0, r2
 800df82:	f000 fc50 	bl	800e826 <TIM_ITRx_SetConfig>
      break;
 800df86:	e003      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
      break;
 800df8c:	e000      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800df8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	00100070 	.word	0x00100070
 800dfb0:	00100060 	.word	0x00100060
 800dfb4:	00100050 	.word	0x00100050
 800dfb8:	00100040 	.word	0x00100040
 800dfbc:	00100030 	.word	0x00100030
 800dfc0:	00100020 	.word	0x00100020

0800dfc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a46      	ldr	r2, [pc, #280]	; (800e0f0 <TIM_Base_SetConfig+0x12c>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d017      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfe2:	d013      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a43      	ldr	r2, [pc, #268]	; (800e0f4 <TIM_Base_SetConfig+0x130>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d00f      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a42      	ldr	r2, [pc, #264]	; (800e0f8 <TIM_Base_SetConfig+0x134>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d00b      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a41      	ldr	r2, [pc, #260]	; (800e0fc <TIM_Base_SetConfig+0x138>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d007      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a40      	ldr	r2, [pc, #256]	; (800e100 <TIM_Base_SetConfig+0x13c>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d003      	beq.n	800e00c <TIM_Base_SetConfig+0x48>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a3f      	ldr	r2, [pc, #252]	; (800e104 <TIM_Base_SetConfig+0x140>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d108      	bne.n	800e01e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a33      	ldr	r2, [pc, #204]	; (800e0f0 <TIM_Base_SetConfig+0x12c>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d023      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e02c:	d01f      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a30      	ldr	r2, [pc, #192]	; (800e0f4 <TIM_Base_SetConfig+0x130>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d01b      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2f      	ldr	r2, [pc, #188]	; (800e0f8 <TIM_Base_SetConfig+0x134>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d017      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a2e      	ldr	r2, [pc, #184]	; (800e0fc <TIM_Base_SetConfig+0x138>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d013      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a2d      	ldr	r2, [pc, #180]	; (800e100 <TIM_Base_SetConfig+0x13c>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d00f      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a2d      	ldr	r2, [pc, #180]	; (800e108 <TIM_Base_SetConfig+0x144>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d00b      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a2c      	ldr	r2, [pc, #176]	; (800e10c <TIM_Base_SetConfig+0x148>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d007      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a2b      	ldr	r2, [pc, #172]	; (800e110 <TIM_Base_SetConfig+0x14c>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d003      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a26      	ldr	r2, [pc, #152]	; (800e104 <TIM_Base_SetConfig+0x140>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d108      	bne.n	800e080 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	689a      	ldr	r2, [r3, #8]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a12      	ldr	r2, [pc, #72]	; (800e0f0 <TIM_Base_SetConfig+0x12c>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d013      	beq.n	800e0d4 <TIM_Base_SetConfig+0x110>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a14      	ldr	r2, [pc, #80]	; (800e100 <TIM_Base_SetConfig+0x13c>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d00f      	beq.n	800e0d4 <TIM_Base_SetConfig+0x110>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a14      	ldr	r2, [pc, #80]	; (800e108 <TIM_Base_SetConfig+0x144>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d00b      	beq.n	800e0d4 <TIM_Base_SetConfig+0x110>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4a13      	ldr	r2, [pc, #76]	; (800e10c <TIM_Base_SetConfig+0x148>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d007      	beq.n	800e0d4 <TIM_Base_SetConfig+0x110>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a12      	ldr	r2, [pc, #72]	; (800e110 <TIM_Base_SetConfig+0x14c>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d003      	beq.n	800e0d4 <TIM_Base_SetConfig+0x110>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a0d      	ldr	r2, [pc, #52]	; (800e104 <TIM_Base_SetConfig+0x140>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d103      	bne.n	800e0dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	691a      	ldr	r2, [r3, #16]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	615a      	str	r2, [r3, #20]
}
 800e0e2:	bf00      	nop
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	40012c00 	.word	0x40012c00
 800e0f4:	40000400 	.word	0x40000400
 800e0f8:	40000800 	.word	0x40000800
 800e0fc:	40000c00 	.word	0x40000c00
 800e100:	40013400 	.word	0x40013400
 800e104:	40015000 	.word	0x40015000
 800e108:	40014000 	.word	0x40014000
 800e10c:	40014400 	.word	0x40014400
 800e110:	40014800 	.word	0x40014800

0800e114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e114:	b480      	push	{r7}
 800e116:	b087      	sub	sp, #28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	f023 0201 	bic.w	r2, r3, #1
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	699b      	ldr	r3, [r3, #24]
 800e13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f023 0303 	bic.w	r3, r3, #3
 800e14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	4313      	orrs	r3, r2
 800e158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	f023 0302 	bic.w	r3, r3, #2
 800e160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	4313      	orrs	r3, r2
 800e16a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a30      	ldr	r2, [pc, #192]	; (800e230 <TIM_OC1_SetConfig+0x11c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d013      	beq.n	800e19c <TIM_OC1_SetConfig+0x88>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a2f      	ldr	r2, [pc, #188]	; (800e234 <TIM_OC1_SetConfig+0x120>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d00f      	beq.n	800e19c <TIM_OC1_SetConfig+0x88>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a2e      	ldr	r2, [pc, #184]	; (800e238 <TIM_OC1_SetConfig+0x124>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d00b      	beq.n	800e19c <TIM_OC1_SetConfig+0x88>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a2d      	ldr	r2, [pc, #180]	; (800e23c <TIM_OC1_SetConfig+0x128>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d007      	beq.n	800e19c <TIM_OC1_SetConfig+0x88>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a2c      	ldr	r2, [pc, #176]	; (800e240 <TIM_OC1_SetConfig+0x12c>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d003      	beq.n	800e19c <TIM_OC1_SetConfig+0x88>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a2b      	ldr	r2, [pc, #172]	; (800e244 <TIM_OC1_SetConfig+0x130>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d10c      	bne.n	800e1b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f023 0308 	bic.w	r3, r3, #8
 800e1a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	697a      	ldr	r2, [r7, #20]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f023 0304 	bic.w	r3, r3, #4
 800e1b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a1d      	ldr	r2, [pc, #116]	; (800e230 <TIM_OC1_SetConfig+0x11c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d013      	beq.n	800e1e6 <TIM_OC1_SetConfig+0xd2>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a1c      	ldr	r2, [pc, #112]	; (800e234 <TIM_OC1_SetConfig+0x120>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d00f      	beq.n	800e1e6 <TIM_OC1_SetConfig+0xd2>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a1b      	ldr	r2, [pc, #108]	; (800e238 <TIM_OC1_SetConfig+0x124>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d00b      	beq.n	800e1e6 <TIM_OC1_SetConfig+0xd2>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a1a      	ldr	r2, [pc, #104]	; (800e23c <TIM_OC1_SetConfig+0x128>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d007      	beq.n	800e1e6 <TIM_OC1_SetConfig+0xd2>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a19      	ldr	r2, [pc, #100]	; (800e240 <TIM_OC1_SetConfig+0x12c>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d003      	beq.n	800e1e6 <TIM_OC1_SetConfig+0xd2>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a18      	ldr	r2, [pc, #96]	; (800e244 <TIM_OC1_SetConfig+0x130>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d111      	bne.n	800e20a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	699b      	ldr	r3, [r3, #24]
 800e204:	693a      	ldr	r2, [r7, #16]
 800e206:	4313      	orrs	r3, r2
 800e208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	693a      	ldr	r2, [r7, #16]
 800e20e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	685a      	ldr	r2, [r3, #4]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	621a      	str	r2, [r3, #32]
}
 800e224:	bf00      	nop
 800e226:	371c      	adds	r7, #28
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	40012c00 	.word	0x40012c00
 800e234:	40013400 	.word	0x40013400
 800e238:	40014000 	.word	0x40014000
 800e23c:	40014400 	.word	0x40014400
 800e240:	40014800 	.word	0x40014800
 800e244:	40015000 	.word	0x40015000

0800e248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e248:	b480      	push	{r7}
 800e24a:	b087      	sub	sp, #28
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	f023 0210 	bic.w	r2, r3, #16
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	021b      	lsls	r3, r3, #8
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	f023 0320 	bic.w	r3, r3, #32
 800e296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	011b      	lsls	r3, r3, #4
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4a2c      	ldr	r2, [pc, #176]	; (800e358 <TIM_OC2_SetConfig+0x110>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d007      	beq.n	800e2bc <TIM_OC2_SetConfig+0x74>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a2b      	ldr	r2, [pc, #172]	; (800e35c <TIM_OC2_SetConfig+0x114>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d003      	beq.n	800e2bc <TIM_OC2_SetConfig+0x74>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a2a      	ldr	r2, [pc, #168]	; (800e360 <TIM_OC2_SetConfig+0x118>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d10d      	bne.n	800e2d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	011b      	lsls	r3, r3, #4
 800e2ca:	697a      	ldr	r2, [r7, #20]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a1f      	ldr	r2, [pc, #124]	; (800e358 <TIM_OC2_SetConfig+0x110>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d013      	beq.n	800e308 <TIM_OC2_SetConfig+0xc0>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a1e      	ldr	r2, [pc, #120]	; (800e35c <TIM_OC2_SetConfig+0x114>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d00f      	beq.n	800e308 <TIM_OC2_SetConfig+0xc0>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a1e      	ldr	r2, [pc, #120]	; (800e364 <TIM_OC2_SetConfig+0x11c>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d00b      	beq.n	800e308 <TIM_OC2_SetConfig+0xc0>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a1d      	ldr	r2, [pc, #116]	; (800e368 <TIM_OC2_SetConfig+0x120>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d007      	beq.n	800e308 <TIM_OC2_SetConfig+0xc0>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a1c      	ldr	r2, [pc, #112]	; (800e36c <TIM_OC2_SetConfig+0x124>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d003      	beq.n	800e308 <TIM_OC2_SetConfig+0xc0>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a17      	ldr	r2, [pc, #92]	; (800e360 <TIM_OC2_SetConfig+0x118>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d113      	bne.n	800e330 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e30e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	4313      	orrs	r3, r2
 800e322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	621a      	str	r2, [r3, #32]
}
 800e34a:	bf00      	nop
 800e34c:	371c      	adds	r7, #28
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	40012c00 	.word	0x40012c00
 800e35c:	40013400 	.word	0x40013400
 800e360:	40015000 	.word	0x40015000
 800e364:	40014000 	.word	0x40014000
 800e368:	40014400 	.word	0x40014400
 800e36c:	40014800 	.word	0x40014800

0800e370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e370:	b480      	push	{r7}
 800e372:	b087      	sub	sp, #28
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a1b      	ldr	r3, [r3, #32]
 800e37e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	69db      	ldr	r3, [r3, #28]
 800e396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f023 0303 	bic.w	r3, r3, #3
 800e3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	021b      	lsls	r3, r3, #8
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a2b      	ldr	r2, [pc, #172]	; (800e47c <TIM_OC3_SetConfig+0x10c>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d007      	beq.n	800e3e2 <TIM_OC3_SetConfig+0x72>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a2a      	ldr	r2, [pc, #168]	; (800e480 <TIM_OC3_SetConfig+0x110>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d003      	beq.n	800e3e2 <TIM_OC3_SetConfig+0x72>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a29      	ldr	r2, [pc, #164]	; (800e484 <TIM_OC3_SetConfig+0x114>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d10d      	bne.n	800e3fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4a1e      	ldr	r2, [pc, #120]	; (800e47c <TIM_OC3_SetConfig+0x10c>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d013      	beq.n	800e42e <TIM_OC3_SetConfig+0xbe>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4a1d      	ldr	r2, [pc, #116]	; (800e480 <TIM_OC3_SetConfig+0x110>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d00f      	beq.n	800e42e <TIM_OC3_SetConfig+0xbe>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4a1d      	ldr	r2, [pc, #116]	; (800e488 <TIM_OC3_SetConfig+0x118>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d00b      	beq.n	800e42e <TIM_OC3_SetConfig+0xbe>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	4a1c      	ldr	r2, [pc, #112]	; (800e48c <TIM_OC3_SetConfig+0x11c>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d007      	beq.n	800e42e <TIM_OC3_SetConfig+0xbe>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4a1b      	ldr	r2, [pc, #108]	; (800e490 <TIM_OC3_SetConfig+0x120>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d003      	beq.n	800e42e <TIM_OC3_SetConfig+0xbe>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a16      	ldr	r2, [pc, #88]	; (800e484 <TIM_OC3_SetConfig+0x114>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d113      	bne.n	800e456 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e43c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	4313      	orrs	r3, r2
 800e448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	699b      	ldr	r3, [r3, #24]
 800e44e:	011b      	lsls	r3, r3, #4
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	4313      	orrs	r3, r2
 800e454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	685a      	ldr	r2, [r3, #4]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	621a      	str	r2, [r3, #32]
}
 800e470:	bf00      	nop
 800e472:	371c      	adds	r7, #28
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	40012c00 	.word	0x40012c00
 800e480:	40013400 	.word	0x40013400
 800e484:	40015000 	.word	0x40015000
 800e488:	40014000 	.word	0x40014000
 800e48c:	40014400 	.word	0x40014400
 800e490:	40014800 	.word	0x40014800

0800e494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e494:	b480      	push	{r7}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	69db      	ldr	r3, [r3, #28]
 800e4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	021b      	lsls	r3, r3, #8
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	031b      	lsls	r3, r3, #12
 800e4ea:	697a      	ldr	r2, [r7, #20]
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4a2c      	ldr	r2, [pc, #176]	; (800e5a4 <TIM_OC4_SetConfig+0x110>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d007      	beq.n	800e508 <TIM_OC4_SetConfig+0x74>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4a2b      	ldr	r2, [pc, #172]	; (800e5a8 <TIM_OC4_SetConfig+0x114>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d003      	beq.n	800e508 <TIM_OC4_SetConfig+0x74>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4a2a      	ldr	r2, [pc, #168]	; (800e5ac <TIM_OC4_SetConfig+0x118>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d10d      	bne.n	800e524 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	031b      	lsls	r3, r3, #12
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	4313      	orrs	r3, r2
 800e51a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a1f      	ldr	r2, [pc, #124]	; (800e5a4 <TIM_OC4_SetConfig+0x110>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d013      	beq.n	800e554 <TIM_OC4_SetConfig+0xc0>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a1e      	ldr	r2, [pc, #120]	; (800e5a8 <TIM_OC4_SetConfig+0x114>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d00f      	beq.n	800e554 <TIM_OC4_SetConfig+0xc0>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a1e      	ldr	r2, [pc, #120]	; (800e5b0 <TIM_OC4_SetConfig+0x11c>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d00b      	beq.n	800e554 <TIM_OC4_SetConfig+0xc0>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a1d      	ldr	r2, [pc, #116]	; (800e5b4 <TIM_OC4_SetConfig+0x120>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d007      	beq.n	800e554 <TIM_OC4_SetConfig+0xc0>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a1c      	ldr	r2, [pc, #112]	; (800e5b8 <TIM_OC4_SetConfig+0x124>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d003      	beq.n	800e554 <TIM_OC4_SetConfig+0xc0>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <TIM_OC4_SetConfig+0x118>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d113      	bne.n	800e57c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e55a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e562:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	695b      	ldr	r3, [r3, #20]
 800e568:	019b      	lsls	r3, r3, #6
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	019b      	lsls	r3, r3, #6
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	4313      	orrs	r3, r2
 800e57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	693a      	ldr	r2, [r7, #16]
 800e580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	621a      	str	r2, [r3, #32]
}
 800e596:	bf00      	nop
 800e598:	371c      	adds	r7, #28
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	40012c00 	.word	0x40012c00
 800e5a8:	40013400 	.word	0x40013400
 800e5ac:	40015000 	.word	0x40015000
 800e5b0:	40014000 	.word	0x40014000
 800e5b4:	40014400 	.word	0x40014400
 800e5b8:	40014800 	.word	0x40014800

0800e5bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	041b      	lsls	r3, r3, #16
 800e608:	693a      	ldr	r2, [r7, #16]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4a19      	ldr	r2, [pc, #100]	; (800e678 <TIM_OC5_SetConfig+0xbc>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d013      	beq.n	800e63e <TIM_OC5_SetConfig+0x82>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4a18      	ldr	r2, [pc, #96]	; (800e67c <TIM_OC5_SetConfig+0xc0>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d00f      	beq.n	800e63e <TIM_OC5_SetConfig+0x82>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a17      	ldr	r2, [pc, #92]	; (800e680 <TIM_OC5_SetConfig+0xc4>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d00b      	beq.n	800e63e <TIM_OC5_SetConfig+0x82>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a16      	ldr	r2, [pc, #88]	; (800e684 <TIM_OC5_SetConfig+0xc8>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d007      	beq.n	800e63e <TIM_OC5_SetConfig+0x82>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a15      	ldr	r2, [pc, #84]	; (800e688 <TIM_OC5_SetConfig+0xcc>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d003      	beq.n	800e63e <TIM_OC5_SetConfig+0x82>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a14      	ldr	r2, [pc, #80]	; (800e68c <TIM_OC5_SetConfig+0xd0>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d109      	bne.n	800e652 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	021b      	lsls	r3, r3, #8
 800e64c:	697a      	ldr	r2, [r7, #20]
 800e64e:	4313      	orrs	r3, r2
 800e650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	621a      	str	r2, [r3, #32]
}
 800e66c:	bf00      	nop
 800e66e:	371c      	adds	r7, #28
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	40012c00 	.word	0x40012c00
 800e67c:	40013400 	.word	0x40013400
 800e680:	40014000 	.word	0x40014000
 800e684:	40014400 	.word	0x40014400
 800e688:	40014800 	.word	0x40014800
 800e68c:	40015000 	.word	0x40015000

0800e690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e690:	b480      	push	{r7}
 800e692:	b087      	sub	sp, #28
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a1b      	ldr	r3, [r3, #32]
 800e6aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	021b      	lsls	r3, r3, #8
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	051b      	lsls	r3, r3, #20
 800e6de:	693a      	ldr	r2, [r7, #16]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4a1a      	ldr	r2, [pc, #104]	; (800e750 <TIM_OC6_SetConfig+0xc0>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d013      	beq.n	800e714 <TIM_OC6_SetConfig+0x84>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4a19      	ldr	r2, [pc, #100]	; (800e754 <TIM_OC6_SetConfig+0xc4>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d00f      	beq.n	800e714 <TIM_OC6_SetConfig+0x84>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a18      	ldr	r2, [pc, #96]	; (800e758 <TIM_OC6_SetConfig+0xc8>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00b      	beq.n	800e714 <TIM_OC6_SetConfig+0x84>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a17      	ldr	r2, [pc, #92]	; (800e75c <TIM_OC6_SetConfig+0xcc>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d007      	beq.n	800e714 <TIM_OC6_SetConfig+0x84>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a16      	ldr	r2, [pc, #88]	; (800e760 <TIM_OC6_SetConfig+0xd0>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d003      	beq.n	800e714 <TIM_OC6_SetConfig+0x84>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a15      	ldr	r2, [pc, #84]	; (800e764 <TIM_OC6_SetConfig+0xd4>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d109      	bne.n	800e728 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e71a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	695b      	ldr	r3, [r3, #20]
 800e720:	029b      	lsls	r3, r3, #10
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	4313      	orrs	r3, r2
 800e726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	621a      	str	r2, [r3, #32]
}
 800e742:	bf00      	nop
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	40012c00 	.word	0x40012c00
 800e754:	40013400 	.word	0x40013400
 800e758:	40014000 	.word	0x40014000
 800e75c:	40014400 	.word	0x40014400
 800e760:	40014800 	.word	0x40014800
 800e764:	40015000 	.word	0x40015000

0800e768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e768:	b480      	push	{r7}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6a1b      	ldr	r3, [r3, #32]
 800e778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	f023 0201 	bic.w	r2, r3, #1
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f023 030a 	bic.w	r3, r3, #10
 800e7a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	621a      	str	r2, [r3, #32]
}
 800e7ba:	bf00      	nop
 800e7bc:	371c      	adds	r7, #28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b087      	sub	sp, #28
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	f023 0210 	bic.w	r2, r3, #16
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6a1b      	ldr	r3, [r3, #32]
 800e7e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	031b      	lsls	r3, r3, #12
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	011b      	lsls	r3, r3, #4
 800e808:	693a      	ldr	r2, [r7, #16]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	621a      	str	r2, [r3, #32]
}
 800e81a:	bf00      	nop
 800e81c:	371c      	adds	r7, #28
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e826:	b480      	push	{r7}
 800e828:	b085      	sub	sp, #20
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e842:	683a      	ldr	r2, [r7, #0]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	4313      	orrs	r3, r2
 800e848:	f043 0307 	orr.w	r3, r3, #7
 800e84c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	609a      	str	r2, [r3, #8]
}
 800e854:	bf00      	nop
 800e856:	3714      	adds	r7, #20
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e860:	b480      	push	{r7}
 800e862:	b087      	sub	sp, #28
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e87a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	021a      	lsls	r2, r3, #8
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	431a      	orrs	r2, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	4313      	orrs	r3, r2
 800e888:	697a      	ldr	r2, [r7, #20]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	609a      	str	r2, [r3, #8]
}
 800e894:	bf00      	nop
 800e896:	371c      	adds	r7, #28
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f003 031f 	and.w	r3, r3, #31
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a1a      	ldr	r2, [r3, #32]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	401a      	ands	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6a1a      	ldr	r2, [r3, #32]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f003 031f 	and.w	r3, r3, #31
 800e8d2:	6879      	ldr	r1, [r7, #4]
 800e8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d8:	431a      	orrs	r2, r3
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	621a      	str	r2, [r3, #32]
}
 800e8de:	bf00      	nop
 800e8e0:	371c      	adds	r7, #28
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
	...

0800e8ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d109      	bne.n	800e910 <HAL_TIMEx_PWMN_Start+0x24>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b01      	cmp	r3, #1
 800e906:	bf14      	ite	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	2300      	moveq	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	e022      	b.n	800e956 <HAL_TIMEx_PWMN_Start+0x6a>
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b04      	cmp	r3, #4
 800e914:	d109      	bne.n	800e92a <HAL_TIMEx_PWMN_Start+0x3e>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b01      	cmp	r3, #1
 800e920:	bf14      	ite	ne
 800e922:	2301      	movne	r3, #1
 800e924:	2300      	moveq	r3, #0
 800e926:	b2db      	uxtb	r3, r3
 800e928:	e015      	b.n	800e956 <HAL_TIMEx_PWMN_Start+0x6a>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2b08      	cmp	r3, #8
 800e92e:	d109      	bne.n	800e944 <HAL_TIMEx_PWMN_Start+0x58>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b01      	cmp	r3, #1
 800e93a:	bf14      	ite	ne
 800e93c:	2301      	movne	r3, #1
 800e93e:	2300      	moveq	r3, #0
 800e940:	b2db      	uxtb	r3, r3
 800e942:	e008      	b.n	800e956 <HAL_TIMEx_PWMN_Start+0x6a>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	bf14      	ite	ne
 800e950:	2301      	movne	r3, #1
 800e952:	2300      	moveq	r3, #0
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e073      	b.n	800ea46 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d104      	bne.n	800e96e <HAL_TIMEx_PWMN_Start+0x82>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e96c:	e013      	b.n	800e996 <HAL_TIMEx_PWMN_Start+0xaa>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b04      	cmp	r3, #4
 800e972:	d104      	bne.n	800e97e <HAL_TIMEx_PWMN_Start+0x92>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e97c:	e00b      	b.n	800e996 <HAL_TIMEx_PWMN_Start+0xaa>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b08      	cmp	r3, #8
 800e982:	d104      	bne.n	800e98e <HAL_TIMEx_PWMN_Start+0xa2>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e98c:	e003      	b.n	800e996 <HAL_TIMEx_PWMN_Start+0xaa>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2202      	movs	r2, #2
 800e992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2204      	movs	r2, #4
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f000 f9ae 	bl	800ed00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a25      	ldr	r2, [pc, #148]	; (800ea50 <HAL_TIMEx_PWMN_Start+0x164>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d022      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9c6:	d01d      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a21      	ldr	r2, [pc, #132]	; (800ea54 <HAL_TIMEx_PWMN_Start+0x168>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d018      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a20      	ldr	r2, [pc, #128]	; (800ea58 <HAL_TIMEx_PWMN_Start+0x16c>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d013      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a1e      	ldr	r2, [pc, #120]	; (800ea5c <HAL_TIMEx_PWMN_Start+0x170>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d00e      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a1d      	ldr	r2, [pc, #116]	; (800ea60 <HAL_TIMEx_PWMN_Start+0x174>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d009      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a1b      	ldr	r2, [pc, #108]	; (800ea64 <HAL_TIMEx_PWMN_Start+0x178>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d004      	beq.n	800ea04 <HAL_TIMEx_PWMN_Start+0x118>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a1a      	ldr	r2, [pc, #104]	; (800ea68 <HAL_TIMEx_PWMN_Start+0x17c>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d115      	bne.n	800ea30 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	689a      	ldr	r2, [r3, #8]
 800ea0a:	4b18      	ldr	r3, [pc, #96]	; (800ea6c <HAL_TIMEx_PWMN_Start+0x180>)
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b06      	cmp	r3, #6
 800ea14:	d015      	beq.n	800ea42 <HAL_TIMEx_PWMN_Start+0x156>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea1c:	d011      	beq.n	800ea42 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f042 0201 	orr.w	r2, r2, #1
 800ea2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea2e:	e008      	b.n	800ea42 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f042 0201 	orr.w	r2, r2, #1
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	e000      	b.n	800ea44 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	40012c00 	.word	0x40012c00
 800ea54:	40000400 	.word	0x40000400
 800ea58:	40000800 	.word	0x40000800
 800ea5c:	40000c00 	.word	0x40000c00
 800ea60:	40013400 	.word	0x40013400
 800ea64:	40014000 	.word	0x40014000
 800ea68:	40015000 	.word	0x40015000
 800ea6c:	00010007 	.word	0x00010007

0800ea70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d101      	bne.n	800ea88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea84:	2302      	movs	r3, #2
 800ea86:	e074      	b.n	800eb72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a34      	ldr	r2, [pc, #208]	; (800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d009      	beq.n	800eac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a33      	ldr	r2, [pc, #204]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d004      	beq.n	800eac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a31      	ldr	r2, [pc, #196]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d108      	bne.n	800ead8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eacc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	4313      	orrs	r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800eade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a21      	ldr	r2, [pc, #132]	; (800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d022      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb08:	d01d      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a1f      	ldr	r2, [pc, #124]	; (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d018      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a1d      	ldr	r2, [pc, #116]	; (800eb90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d013      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a1c      	ldr	r2, [pc, #112]	; (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00e      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a15      	ldr	r2, [pc, #84]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d009      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a18      	ldr	r2, [pc, #96]	; (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d004      	beq.n	800eb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a11      	ldr	r2, [pc, #68]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d10c      	bne.n	800eb60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3714      	adds	r7, #20
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	40012c00 	.word	0x40012c00
 800eb84:	40013400 	.word	0x40013400
 800eb88:	40015000 	.word	0x40015000
 800eb8c:	40000400 	.word	0x40000400
 800eb90:	40000800 	.word	0x40000800
 800eb94:	40000c00 	.word	0x40000c00
 800eb98:	40014000 	.word	0x40014000

0800eb9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eba6:	2300      	movs	r3, #0
 800eba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	e096      	b.n	800ece6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	041b      	lsls	r3, r3, #16
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a2f      	ldr	r2, [pc, #188]	; (800ecf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d009      	beq.n	800ec50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a2d      	ldr	r2, [pc, #180]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d004      	beq.n	800ec50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a2c      	ldr	r2, [pc, #176]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d106      	bne.n	800ec5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a24      	ldr	r2, [pc, #144]	; (800ecf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d009      	beq.n	800ec7c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a22      	ldr	r2, [pc, #136]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d004      	beq.n	800ec7c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a21      	ldr	r2, [pc, #132]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d12b      	bne.n	800ecd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec86:	051b      	lsls	r3, r3, #20
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca4:	4313      	orrs	r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a11      	ldr	r2, [pc, #68]	; (800ecf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d009      	beq.n	800ecc6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a10      	ldr	r2, [pc, #64]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d004      	beq.n	800ecc6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a0e      	ldr	r2, [pc, #56]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d106      	bne.n	800ecd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	40012c00 	.word	0x40012c00
 800ecf8:	40013400 	.word	0x40013400
 800ecfc:	40015000 	.word	0x40015000

0800ed00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b087      	sub	sp, #28
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	f003 031f 	and.w	r3, r3, #31
 800ed12:	2204      	movs	r2, #4
 800ed14:	fa02 f303 	lsl.w	r3, r2, r3
 800ed18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1a      	ldr	r2, [r3, #32]
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	43db      	mvns	r3, r3
 800ed22:	401a      	ands	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6a1a      	ldr	r2, [r3, #32]
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	f003 031f 	and.w	r3, r3, #31
 800ed32:	6879      	ldr	r1, [r7, #4]
 800ed34:	fa01 f303 	lsl.w	r3, r1, r3
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	621a      	str	r2, [r3, #32]
}
 800ed3e:	bf00      	nop
 800ed40:	371c      	adds	r7, #28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b082      	sub	sp, #8
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d101      	bne.n	800ed5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e042      	b.n	800ede2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d106      	bne.n	800ed74 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7f7 fc5c 	bl	800662c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2224      	movs	r2, #36	; 0x24
 800ed78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f022 0201 	bic.w	r2, r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fc03 	bl	800f598 <UART_SetConfig>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d101      	bne.n	800ed9c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e022      	b.n	800ede2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 fef3 	bl	800fb90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800edb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800edc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f042 0201 	orr.w	r2, r2, #1
 800edd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 ff7a 	bl	800fcd4 <UART_CheckIdleState>
 800ede0:	4603      	mov	r3, r0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b08a      	sub	sp, #40	; 0x28
 800edee:	af02      	add	r7, sp, #8
 800edf0:	60f8      	str	r0, [r7, #12]
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	603b      	str	r3, [r7, #0]
 800edf6:	4613      	mov	r3, r2
 800edf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee00:	2b20      	cmp	r3, #32
 800ee02:	f040 8083 	bne.w	800ef0c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <HAL_UART_Transmit+0x28>
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e07b      	b.n	800ef0e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d101      	bne.n	800ee24 <HAL_UART_Transmit+0x3a>
 800ee20:	2302      	movs	r3, #2
 800ee22:	e074      	b.n	800ef0e <HAL_UART_Transmit+0x124>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2221      	movs	r2, #33	; 0x21
 800ee38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee3c:	f7f7 ff1a 	bl	8006c74 <HAL_GetTick>
 800ee40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	88fa      	ldrh	r2, [r7, #6]
 800ee46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	88fa      	ldrh	r2, [r7, #6]
 800ee4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee5a:	d108      	bne.n	800ee6e <HAL_UART_Transmit+0x84>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d104      	bne.n	800ee6e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	61bb      	str	r3, [r7, #24]
 800ee6c:	e003      	b.n	800ee76 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ee7e:	e02c      	b.n	800eeda <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2200      	movs	r2, #0
 800ee88:	2180      	movs	r1, #128	; 0x80
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f000 ff6d 	bl	800fd6a <UART_WaitOnFlagUntilTimeout>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ee96:	2303      	movs	r3, #3
 800ee98:	e039      	b.n	800ef0e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10b      	bne.n	800eeb8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	461a      	mov	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eeae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	3302      	adds	r3, #2
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	e007      	b.n	800eec8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	781a      	ldrb	r2, [r3, #0]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	3301      	adds	r3, #1
 800eec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eece:	b29b      	uxth	r3, r3
 800eed0:	3b01      	subs	r3, #1
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1cc      	bne.n	800ee80 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2200      	movs	r2, #0
 800eeee:	2140      	movs	r1, #64	; 0x40
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f000 ff3a 	bl	800fd6a <UART_WaitOnFlagUntilTimeout>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eefc:	2303      	movs	r3, #3
 800eefe:	e006      	b.n	800ef0e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2220      	movs	r2, #32
 800ef04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e000      	b.n	800ef0e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ef0c:	2302      	movs	r3, #2
  }
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3720      	adds	r7, #32
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b0ba      	sub	sp, #232	; 0xe8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	69db      	ldr	r3, [r3, #28]
 800ef26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ef3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ef42:	f640 030f 	movw	r3, #2063	; 0x80f
 800ef46:	4013      	ands	r3, r2
 800ef48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ef4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d11b      	bne.n	800ef8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef58:	f003 0320 	and.w	r3, r3, #32
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d015      	beq.n	800ef8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef64:	f003 0320 	and.w	r3, r3, #32
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d105      	bne.n	800ef78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d009      	beq.n	800ef8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f000 82d6 	beq.w	800f52e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	4798      	blx	r3
      }
      return;
 800ef8a:	e2d0      	b.n	800f52e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 811f 	beq.w	800f1d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef9a:	4b8b      	ldr	r3, [pc, #556]	; (800f1c8 <HAL_UART_IRQHandler+0x2b0>)
 800ef9c:	4013      	ands	r3, r2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800efa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800efa6:	4b89      	ldr	r3, [pc, #548]	; (800f1cc <HAL_UART_IRQHandler+0x2b4>)
 800efa8:	4013      	ands	r3, r2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 8112 	beq.w	800f1d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800efb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efb4:	f003 0301 	and.w	r3, r3, #1
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d011      	beq.n	800efe0 <HAL_UART_IRQHandler+0xc8>
 800efbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00b      	beq.n	800efe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2201      	movs	r2, #1
 800efce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efd6:	f043 0201 	orr.w	r2, r3, #1
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efe4:	f003 0302 	and.w	r3, r3, #2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d011      	beq.n	800f010 <HAL_UART_IRQHandler+0xf8>
 800efec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00b      	beq.n	800f010 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2202      	movs	r2, #2
 800effe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f006:	f043 0204 	orr.w	r2, r3, #4
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f014:	f003 0304 	and.w	r3, r3, #4
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d011      	beq.n	800f040 <HAL_UART_IRQHandler+0x128>
 800f01c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00b      	beq.n	800f040 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2204      	movs	r2, #4
 800f02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f036:	f043 0202 	orr.w	r2, r3, #2
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f044:	f003 0308 	and.w	r3, r3, #8
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d017      	beq.n	800f07c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f050:	f003 0320 	and.w	r3, r3, #32
 800f054:	2b00      	cmp	r3, #0
 800f056:	d105      	bne.n	800f064 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f058:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f05c:	4b5a      	ldr	r3, [pc, #360]	; (800f1c8 <HAL_UART_IRQHandler+0x2b0>)
 800f05e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00b      	beq.n	800f07c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2208      	movs	r2, #8
 800f06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f072:	f043 0208 	orr.w	r2, r3, #8
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f084:	2b00      	cmp	r3, #0
 800f086:	d012      	beq.n	800f0ae <HAL_UART_IRQHandler+0x196>
 800f088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f08c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00c      	beq.n	800f0ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f09c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0a4:	f043 0220 	orr.w	r2, r3, #32
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 823c 	beq.w	800f532 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0be:	f003 0320 	and.w	r3, r3, #32
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d013      	beq.n	800f0ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ca:	f003 0320 	and.w	r3, r3, #32
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d105      	bne.n	800f0de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d007      	beq.n	800f0ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d003      	beq.n	800f0ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f102:	2b40      	cmp	r3, #64	; 0x40
 800f104:	d005      	beq.n	800f112 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f10a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d04f      	beq.n	800f1b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 ffdb 	bl	80100ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f122:	2b40      	cmp	r3, #64	; 0x40
 800f124:	d141      	bne.n	800f1aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3308      	adds	r3, #8
 800f12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	3308      	adds	r3, #8
 800f14e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f15e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1d9      	bne.n	800f126 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d013      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17e:	4a14      	ldr	r2, [pc, #80]	; (800f1d0 <HAL_UART_IRQHandler+0x2b8>)
 800f180:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f186:	4618      	mov	r0, r3
 800f188:	f7fa f930 	bl	80093ec <HAL_DMA_Abort_IT>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d017      	beq.n	800f1c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f19c:	4610      	mov	r0, r2
 800f19e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1a0:	e00f      	b.n	800f1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 f9ee 	bl	800f584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1a8:	e00b      	b.n	800f1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f9ea 	bl	800f584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1b0:	e007      	b.n	800f1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 f9e6 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f1c0:	e1b7      	b.n	800f532 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1c2:	bf00      	nop
    return;
 800f1c4:	e1b5      	b.n	800f532 <HAL_UART_IRQHandler+0x61a>
 800f1c6:	bf00      	nop
 800f1c8:	10000001 	.word	0x10000001
 800f1cc:	04000120 	.word	0x04000120
 800f1d0:	08010379 	.word	0x08010379

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	f040 814a 	bne.w	800f472 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e2:	f003 0310 	and.w	r3, r3, #16
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 8143 	beq.w	800f472 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1f0:	f003 0310 	and.w	r3, r3, #16
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f000 813c 	beq.w	800f472 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2210      	movs	r2, #16
 800f200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f20c:	2b40      	cmp	r3, #64	; 0x40
 800f20e:	f040 80b5 	bne.w	800f37c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f21e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 8187 	beq.w	800f536 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f22e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f232:	429a      	cmp	r2, r3
 800f234:	f080 817f 	bcs.w	800f536 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f23e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f003 0320 	and.w	r3, r3, #32
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 8086 	bne.w	800f360 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f260:	e853 3f00 	ldrex	r3, [r3]
 800f264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f26c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	461a      	mov	r2, r3
 800f27a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f27e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f282:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f286:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f28a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f28e:	e841 2300 	strex	r3, r2, [r1]
 800f292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1da      	bne.n	800f254 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2a8:	e853 3f00 	ldrex	r3, [r3]
 800f2ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f2ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2b0:	f023 0301 	bic.w	r3, r3, #1
 800f2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	3308      	adds	r3, #8
 800f2be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f2c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f2c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f2ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2ce:	e841 2300 	strex	r3, r2, [r1]
 800f2d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1e1      	bne.n	800f29e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3308      	adds	r3, #8
 800f2e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2e4:	e853 3f00 	ldrex	r3, [r3]
 800f2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	3308      	adds	r3, #8
 800f2fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f2fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f306:	e841 2300 	strex	r3, r2, [r1]
 800f30a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f30c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1e3      	bne.n	800f2da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2220      	movs	r2, #32
 800f316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f330:	f023 0310 	bic.w	r3, r3, #16
 800f334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	461a      	mov	r2, r3
 800f33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f342:	65bb      	str	r3, [r7, #88]	; 0x58
 800f344:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f346:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f34a:	e841 2300 	strex	r3, r2, [r1]
 800f34e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1e4      	bne.n	800f320 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7f9 ffed 	bl	800933a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	b29b      	uxth	r3, r3
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7f4 fa09 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f37a:	e0dc      	b.n	800f536 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f388:	b29b      	uxth	r3, r3
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f396:	b29b      	uxth	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 80ce 	beq.w	800f53a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f39e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f000 80c9 	beq.w	800f53a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b0:	e853 3f00 	ldrex	r3, [r3]
 800f3b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f3cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3d2:	e841 2300 	strex	r3, r2, [r1]
 800f3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1e4      	bne.n	800f3a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3308      	adds	r3, #8
 800f3e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	e853 3f00 	ldrex	r3, [r3]
 800f3ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f3f4:	f023 0301 	bic.w	r3, r3, #1
 800f3f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3308      	adds	r3, #8
 800f402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f406:	633a      	str	r2, [r7, #48]	; 0x30
 800f408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f40e:	e841 2300 	strex	r3, r2, [r1]
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1e1      	bne.n	800f3de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2220      	movs	r2, #32
 800f41e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	e853 3f00 	ldrex	r3, [r3]
 800f43a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f023 0310 	bic.w	r3, r3, #16
 800f442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f450:	61fb      	str	r3, [r7, #28]
 800f452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f454:	69b9      	ldr	r1, [r7, #24]
 800f456:	69fa      	ldr	r2, [r7, #28]
 800f458:	e841 2300 	strex	r3, r2, [r1]
 800f45c:	617b      	str	r3, [r7, #20]
   return(result);
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e4      	bne.n	800f42e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7f4 f98e 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f470:	e063      	b.n	800f53a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00e      	beq.n	800f49c <HAL_UART_IRQHandler+0x584>
 800f47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f486:	2b00      	cmp	r3, #0
 800f488:	d008      	beq.n	800f49c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 ffb0 	bl	80103fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f49a:	e051      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d014      	beq.n	800f4d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d105      	bne.n	800f4c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d008      	beq.n	800f4d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d03a      	beq.n	800f53e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	4798      	blx	r3
    }
    return;
 800f4d0:	e035      	b.n	800f53e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d009      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x5da>
 800f4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 ff5a 	bl	80103a4 <UART_EndTransmit_IT>
    return;
 800f4f0:	e026      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d009      	beq.n	800f512 <HAL_UART_IRQHandler+0x5fa>
 800f4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 ff89 	bl	8010422 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f510:	e016      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d010      	beq.n	800f540 <HAL_UART_IRQHandler+0x628>
 800f51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f522:	2b00      	cmp	r3, #0
 800f524:	da0c      	bge.n	800f540 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 ff71 	bl	801040e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f52c:	e008      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
      return;
 800f52e:	bf00      	nop
 800f530:	e006      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
    return;
 800f532:	bf00      	nop
 800f534:	e004      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
      return;
 800f536:	bf00      	nop
 800f538:	e002      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
      return;
 800f53a:	bf00      	nop
 800f53c:	e000      	b.n	800f540 <HAL_UART_IRQHandler+0x628>
    return;
 800f53e:	bf00      	nop
  }
}
 800f540:	37e8      	adds	r7, #232	; 0xe8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop

0800f548 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f58c:	bf00      	nop
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f59c:	b08c      	sub	sp, #48	; 0x30
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	689a      	ldr	r2, [r3, #8]
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	431a      	orrs	r2, r3
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	69db      	ldr	r3, [r3, #28]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	4baa      	ldr	r3, [pc, #680]	; (800f870 <UART_SetConfig+0x2d8>)
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	697a      	ldr	r2, [r7, #20]
 800f5cc:	6812      	ldr	r2, [r2, #0]
 800f5ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5d0:	430b      	orrs	r3, r1
 800f5d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	68da      	ldr	r2, [r3, #12]
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	430a      	orrs	r2, r1
 800f5e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a9f      	ldr	r2, [pc, #636]	; (800f874 <UART_SetConfig+0x2dc>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d004      	beq.n	800f604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f600:	4313      	orrs	r3, r2
 800f602:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f60e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	6812      	ldr	r2, [r2, #0]
 800f616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f618:	430b      	orrs	r3, r1
 800f61a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f622:	f023 010f 	bic.w	r1, r3, #15
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	430a      	orrs	r2, r1
 800f630:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a90      	ldr	r2, [pc, #576]	; (800f878 <UART_SetConfig+0x2e0>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d125      	bne.n	800f688 <UART_SetConfig+0xf0>
 800f63c:	4b8f      	ldr	r3, [pc, #572]	; (800f87c <UART_SetConfig+0x2e4>)
 800f63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f642:	f003 0303 	and.w	r3, r3, #3
 800f646:	2b03      	cmp	r3, #3
 800f648:	d81a      	bhi.n	800f680 <UART_SetConfig+0xe8>
 800f64a:	a201      	add	r2, pc, #4	; (adr r2, 800f650 <UART_SetConfig+0xb8>)
 800f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f650:	0800f661 	.word	0x0800f661
 800f654:	0800f671 	.word	0x0800f671
 800f658:	0800f669 	.word	0x0800f669
 800f65c:	0800f679 	.word	0x0800f679
 800f660:	2301      	movs	r3, #1
 800f662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f666:	e116      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f668:	2302      	movs	r3, #2
 800f66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f66e:	e112      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f670:	2304      	movs	r3, #4
 800f672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f676:	e10e      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f678:	2308      	movs	r3, #8
 800f67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67e:	e10a      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f680:	2310      	movs	r3, #16
 800f682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f686:	e106      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a7c      	ldr	r2, [pc, #496]	; (800f880 <UART_SetConfig+0x2e8>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d138      	bne.n	800f704 <UART_SetConfig+0x16c>
 800f692:	4b7a      	ldr	r3, [pc, #488]	; (800f87c <UART_SetConfig+0x2e4>)
 800f694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f698:	f003 030c 	and.w	r3, r3, #12
 800f69c:	2b0c      	cmp	r3, #12
 800f69e:	d82d      	bhi.n	800f6fc <UART_SetConfig+0x164>
 800f6a0:	a201      	add	r2, pc, #4	; (adr r2, 800f6a8 <UART_SetConfig+0x110>)
 800f6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a6:	bf00      	nop
 800f6a8:	0800f6dd 	.word	0x0800f6dd
 800f6ac:	0800f6fd 	.word	0x0800f6fd
 800f6b0:	0800f6fd 	.word	0x0800f6fd
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f6ed 	.word	0x0800f6ed
 800f6bc:	0800f6fd 	.word	0x0800f6fd
 800f6c0:	0800f6fd 	.word	0x0800f6fd
 800f6c4:	0800f6fd 	.word	0x0800f6fd
 800f6c8:	0800f6e5 	.word	0x0800f6e5
 800f6cc:	0800f6fd 	.word	0x0800f6fd
 800f6d0:	0800f6fd 	.word	0x0800f6fd
 800f6d4:	0800f6fd 	.word	0x0800f6fd
 800f6d8:	0800f6f5 	.word	0x0800f6f5
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6e2:	e0d8      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6ea:	e0d4      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f6ec:	2304      	movs	r3, #4
 800f6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6f2:	e0d0      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f6f4:	2308      	movs	r3, #8
 800f6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6fa:	e0cc      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f6fc:	2310      	movs	r3, #16
 800f6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f702:	e0c8      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a5e      	ldr	r2, [pc, #376]	; (800f884 <UART_SetConfig+0x2ec>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d125      	bne.n	800f75a <UART_SetConfig+0x1c2>
 800f70e:	4b5b      	ldr	r3, [pc, #364]	; (800f87c <UART_SetConfig+0x2e4>)
 800f710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f718:	2b30      	cmp	r3, #48	; 0x30
 800f71a:	d016      	beq.n	800f74a <UART_SetConfig+0x1b2>
 800f71c:	2b30      	cmp	r3, #48	; 0x30
 800f71e:	d818      	bhi.n	800f752 <UART_SetConfig+0x1ba>
 800f720:	2b20      	cmp	r3, #32
 800f722:	d00a      	beq.n	800f73a <UART_SetConfig+0x1a2>
 800f724:	2b20      	cmp	r3, #32
 800f726:	d814      	bhi.n	800f752 <UART_SetConfig+0x1ba>
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <UART_SetConfig+0x19a>
 800f72c:	2b10      	cmp	r3, #16
 800f72e:	d008      	beq.n	800f742 <UART_SetConfig+0x1aa>
 800f730:	e00f      	b.n	800f752 <UART_SetConfig+0x1ba>
 800f732:	2300      	movs	r3, #0
 800f734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f738:	e0ad      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f73a:	2302      	movs	r3, #2
 800f73c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f740:	e0a9      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f742:	2304      	movs	r3, #4
 800f744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f748:	e0a5      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f74a:	2308      	movs	r3, #8
 800f74c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f750:	e0a1      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f752:	2310      	movs	r3, #16
 800f754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f758:	e09d      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a4a      	ldr	r2, [pc, #296]	; (800f888 <UART_SetConfig+0x2f0>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d125      	bne.n	800f7b0 <UART_SetConfig+0x218>
 800f764:	4b45      	ldr	r3, [pc, #276]	; (800f87c <UART_SetConfig+0x2e4>)
 800f766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f76a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f76e:	2bc0      	cmp	r3, #192	; 0xc0
 800f770:	d016      	beq.n	800f7a0 <UART_SetConfig+0x208>
 800f772:	2bc0      	cmp	r3, #192	; 0xc0
 800f774:	d818      	bhi.n	800f7a8 <UART_SetConfig+0x210>
 800f776:	2b80      	cmp	r3, #128	; 0x80
 800f778:	d00a      	beq.n	800f790 <UART_SetConfig+0x1f8>
 800f77a:	2b80      	cmp	r3, #128	; 0x80
 800f77c:	d814      	bhi.n	800f7a8 <UART_SetConfig+0x210>
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d002      	beq.n	800f788 <UART_SetConfig+0x1f0>
 800f782:	2b40      	cmp	r3, #64	; 0x40
 800f784:	d008      	beq.n	800f798 <UART_SetConfig+0x200>
 800f786:	e00f      	b.n	800f7a8 <UART_SetConfig+0x210>
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f78e:	e082      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f790:	2302      	movs	r3, #2
 800f792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f796:	e07e      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f798:	2304      	movs	r3, #4
 800f79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f79e:	e07a      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7a6:	e076      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f7a8:	2310      	movs	r3, #16
 800f7aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ae:	e072      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a35      	ldr	r2, [pc, #212]	; (800f88c <UART_SetConfig+0x2f4>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d12a      	bne.n	800f810 <UART_SetConfig+0x278>
 800f7ba:	4b30      	ldr	r3, [pc, #192]	; (800f87c <UART_SetConfig+0x2e4>)
 800f7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7c8:	d01a      	beq.n	800f800 <UART_SetConfig+0x268>
 800f7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7ce:	d81b      	bhi.n	800f808 <UART_SetConfig+0x270>
 800f7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7d4:	d00c      	beq.n	800f7f0 <UART_SetConfig+0x258>
 800f7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7da:	d815      	bhi.n	800f808 <UART_SetConfig+0x270>
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <UART_SetConfig+0x250>
 800f7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e4:	d008      	beq.n	800f7f8 <UART_SetConfig+0x260>
 800f7e6:	e00f      	b.n	800f808 <UART_SetConfig+0x270>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ee:	e052      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7f6:	e04e      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f7f8:	2304      	movs	r3, #4
 800f7fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7fe:	e04a      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f800:	2308      	movs	r3, #8
 800f802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f806:	e046      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f808:	2310      	movs	r3, #16
 800f80a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f80e:	e042      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a17      	ldr	r2, [pc, #92]	; (800f874 <UART_SetConfig+0x2dc>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d13a      	bne.n	800f890 <UART_SetConfig+0x2f8>
 800f81a:	4b18      	ldr	r3, [pc, #96]	; (800f87c <UART_SetConfig+0x2e4>)
 800f81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f828:	d01a      	beq.n	800f860 <UART_SetConfig+0x2c8>
 800f82a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f82e:	d81b      	bhi.n	800f868 <UART_SetConfig+0x2d0>
 800f830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f834:	d00c      	beq.n	800f850 <UART_SetConfig+0x2b8>
 800f836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f83a:	d815      	bhi.n	800f868 <UART_SetConfig+0x2d0>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d003      	beq.n	800f848 <UART_SetConfig+0x2b0>
 800f840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f844:	d008      	beq.n	800f858 <UART_SetConfig+0x2c0>
 800f846:	e00f      	b.n	800f868 <UART_SetConfig+0x2d0>
 800f848:	2300      	movs	r3, #0
 800f84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f84e:	e022      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f850:	2302      	movs	r3, #2
 800f852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f856:	e01e      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f858:	2304      	movs	r3, #4
 800f85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f85e:	e01a      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f860:	2308      	movs	r3, #8
 800f862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f866:	e016      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f868:	2310      	movs	r3, #16
 800f86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f86e:	e012      	b.n	800f896 <UART_SetConfig+0x2fe>
 800f870:	cfff69f3 	.word	0xcfff69f3
 800f874:	40008000 	.word	0x40008000
 800f878:	40013800 	.word	0x40013800
 800f87c:	40021000 	.word	0x40021000
 800f880:	40004400 	.word	0x40004400
 800f884:	40004800 	.word	0x40004800
 800f888:	40004c00 	.word	0x40004c00
 800f88c:	40005000 	.word	0x40005000
 800f890:	2310      	movs	r3, #16
 800f892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4aae      	ldr	r2, [pc, #696]	; (800fb54 <UART_SetConfig+0x5bc>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	f040 8097 	bne.w	800f9d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8a6:	2b08      	cmp	r3, #8
 800f8a8:	d823      	bhi.n	800f8f2 <UART_SetConfig+0x35a>
 800f8aa:	a201      	add	r2, pc, #4	; (adr r2, 800f8b0 <UART_SetConfig+0x318>)
 800f8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b0:	0800f8d5 	.word	0x0800f8d5
 800f8b4:	0800f8f3 	.word	0x0800f8f3
 800f8b8:	0800f8dd 	.word	0x0800f8dd
 800f8bc:	0800f8f3 	.word	0x0800f8f3
 800f8c0:	0800f8e3 	.word	0x0800f8e3
 800f8c4:	0800f8f3 	.word	0x0800f8f3
 800f8c8:	0800f8f3 	.word	0x0800f8f3
 800f8cc:	0800f8f3 	.word	0x0800f8f3
 800f8d0:	0800f8eb 	.word	0x0800f8eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8d4:	f7fd fccc 	bl	800d270 <HAL_RCC_GetPCLK1Freq>
 800f8d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8da:	e010      	b.n	800f8fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f8dc:	4b9e      	ldr	r3, [pc, #632]	; (800fb58 <UART_SetConfig+0x5c0>)
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8e0:	e00d      	b.n	800f8fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8e2:	f7fd fc57 	bl	800d194 <HAL_RCC_GetSysClockFreq>
 800f8e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8e8:	e009      	b.n	800f8fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8f0:	e005      	b.n	800f8fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f8fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8130 	beq.w	800fb66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90a:	4a94      	ldr	r2, [pc, #592]	; (800fb5c <UART_SetConfig+0x5c4>)
 800f90c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f910:	461a      	mov	r2, r3
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	fbb3 f3f2 	udiv	r3, r3, r2
 800f918:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	4613      	mov	r3, r2
 800f920:	005b      	lsls	r3, r3, #1
 800f922:	4413      	add	r3, r2
 800f924:	69ba      	ldr	r2, [r7, #24]
 800f926:	429a      	cmp	r2, r3
 800f928:	d305      	bcc.n	800f936 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	429a      	cmp	r2, r3
 800f934:	d903      	bls.n	800f93e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f93c:	e113      	b.n	800fb66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	2200      	movs	r2, #0
 800f942:	60bb      	str	r3, [r7, #8]
 800f944:	60fa      	str	r2, [r7, #12]
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94a:	4a84      	ldr	r2, [pc, #528]	; (800fb5c <UART_SetConfig+0x5c4>)
 800f94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f950:	b29b      	uxth	r3, r3
 800f952:	2200      	movs	r2, #0
 800f954:	603b      	str	r3, [r7, #0]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f95c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f960:	f7f1 f99a 	bl	8000c98 <__aeabi_uldivmod>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4610      	mov	r0, r2
 800f96a:	4619      	mov	r1, r3
 800f96c:	f04f 0200 	mov.w	r2, #0
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	020b      	lsls	r3, r1, #8
 800f976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f97a:	0202      	lsls	r2, r0, #8
 800f97c:	6979      	ldr	r1, [r7, #20]
 800f97e:	6849      	ldr	r1, [r1, #4]
 800f980:	0849      	lsrs	r1, r1, #1
 800f982:	2000      	movs	r0, #0
 800f984:	460c      	mov	r4, r1
 800f986:	4605      	mov	r5, r0
 800f988:	eb12 0804 	adds.w	r8, r2, r4
 800f98c:	eb43 0905 	adc.w	r9, r3, r5
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	469a      	mov	sl, r3
 800f998:	4693      	mov	fp, r2
 800f99a:	4652      	mov	r2, sl
 800f99c:	465b      	mov	r3, fp
 800f99e:	4640      	mov	r0, r8
 800f9a0:	4649      	mov	r1, r9
 800f9a2:	f7f1 f979 	bl	8000c98 <__aeabi_uldivmod>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f9b4:	d308      	bcc.n	800f9c8 <UART_SetConfig+0x430>
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9bc:	d204      	bcs.n	800f9c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	6a3a      	ldr	r2, [r7, #32]
 800f9c4:	60da      	str	r2, [r3, #12]
 800f9c6:	e0ce      	b.n	800fb66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f9ce:	e0ca      	b.n	800fb66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9d8:	d166      	bne.n	800faa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f9da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f9de:	2b08      	cmp	r3, #8
 800f9e0:	d827      	bhi.n	800fa32 <UART_SetConfig+0x49a>
 800f9e2:	a201      	add	r2, pc, #4	; (adr r2, 800f9e8 <UART_SetConfig+0x450>)
 800f9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e8:	0800fa0d 	.word	0x0800fa0d
 800f9ec:	0800fa15 	.word	0x0800fa15
 800f9f0:	0800fa1d 	.word	0x0800fa1d
 800f9f4:	0800fa33 	.word	0x0800fa33
 800f9f8:	0800fa23 	.word	0x0800fa23
 800f9fc:	0800fa33 	.word	0x0800fa33
 800fa00:	0800fa33 	.word	0x0800fa33
 800fa04:	0800fa33 	.word	0x0800fa33
 800fa08:	0800fa2b 	.word	0x0800fa2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa0c:	f7fd fc30 	bl	800d270 <HAL_RCC_GetPCLK1Freq>
 800fa10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa12:	e014      	b.n	800fa3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa14:	f7fd fc42 	bl	800d29c <HAL_RCC_GetPCLK2Freq>
 800fa18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa1a:	e010      	b.n	800fa3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa1c:	4b4e      	ldr	r3, [pc, #312]	; (800fb58 <UART_SetConfig+0x5c0>)
 800fa1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa20:	e00d      	b.n	800fa3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa22:	f7fd fbb7 	bl	800d194 <HAL_RCC_GetSysClockFreq>
 800fa26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa28:	e009      	b.n	800fa3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa30:	e005      	b.n	800fa3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800fa32:	2300      	movs	r3, #0
 800fa34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fa3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f000 8090 	beq.w	800fb66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4a:	4a44      	ldr	r2, [pc, #272]	; (800fb5c <UART_SetConfig+0x5c4>)
 800fa4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa50:	461a      	mov	r2, r3
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa58:	005a      	lsls	r2, r3, #1
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	085b      	lsrs	r3, r3, #1
 800fa60:	441a      	add	r2, r3
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
 800fa6e:	2b0f      	cmp	r3, #15
 800fa70:	d916      	bls.n	800faa0 <UART_SetConfig+0x508>
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa78:	d212      	bcs.n	800faa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa7a:	6a3b      	ldr	r3, [r7, #32]
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	f023 030f 	bic.w	r3, r3, #15
 800fa82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	085b      	lsrs	r3, r3, #1
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	f003 0307 	and.w	r3, r3, #7
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	8bfb      	ldrh	r3, [r7, #30]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	8bfa      	ldrh	r2, [r7, #30]
 800fa9c:	60da      	str	r2, [r3, #12]
 800fa9e:	e062      	b.n	800fb66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800faa6:	e05e      	b.n	800fb66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800faa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800faac:	2b08      	cmp	r3, #8
 800faae:	d828      	bhi.n	800fb02 <UART_SetConfig+0x56a>
 800fab0:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <UART_SetConfig+0x520>)
 800fab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab6:	bf00      	nop
 800fab8:	0800fadd 	.word	0x0800fadd
 800fabc:	0800fae5 	.word	0x0800fae5
 800fac0:	0800faed 	.word	0x0800faed
 800fac4:	0800fb03 	.word	0x0800fb03
 800fac8:	0800faf3 	.word	0x0800faf3
 800facc:	0800fb03 	.word	0x0800fb03
 800fad0:	0800fb03 	.word	0x0800fb03
 800fad4:	0800fb03 	.word	0x0800fb03
 800fad8:	0800fafb 	.word	0x0800fafb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fadc:	f7fd fbc8 	bl	800d270 <HAL_RCC_GetPCLK1Freq>
 800fae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fae2:	e014      	b.n	800fb0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fae4:	f7fd fbda 	bl	800d29c <HAL_RCC_GetPCLK2Freq>
 800fae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800faea:	e010      	b.n	800fb0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800faec:	4b1a      	ldr	r3, [pc, #104]	; (800fb58 <UART_SetConfig+0x5c0>)
 800faee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800faf0:	e00d      	b.n	800fb0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800faf2:	f7fd fb4f 	bl	800d194 <HAL_RCC_GetSysClockFreq>
 800faf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800faf8:	e009      	b.n	800fb0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fafa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb00:	e005      	b.n	800fb0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fb02:	2300      	movs	r3, #0
 800fb04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fb0c:	bf00      	nop
    }

    if (pclk != 0U)
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d028      	beq.n	800fb66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb18:	4a10      	ldr	r2, [pc, #64]	; (800fb5c <UART_SetConfig+0x5c4>)
 800fb1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	085b      	lsrs	r3, r3, #1
 800fb2c:	441a      	add	r2, r3
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb38:	6a3b      	ldr	r3, [r7, #32]
 800fb3a:	2b0f      	cmp	r3, #15
 800fb3c:	d910      	bls.n	800fb60 <UART_SetConfig+0x5c8>
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb44:	d20c      	bcs.n	800fb60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb46:	6a3b      	ldr	r3, [r7, #32]
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	60da      	str	r2, [r3, #12]
 800fb50:	e009      	b.n	800fb66 <UART_SetConfig+0x5ce>
 800fb52:	bf00      	nop
 800fb54:	40008000 	.word	0x40008000
 800fb58:	00f42400 	.word	0x00f42400
 800fb5c:	0801852c 	.word	0x0801852c
      }
      else
      {
        ret = HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fb82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3730      	adds	r7, #48	; 0x30
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb9c:	f003 0301 	and.w	r3, r3, #1
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00a      	beq.n	800fbba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	430a      	orrs	r2, r1
 800fbb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbbe:	f003 0302 	and.w	r3, r3, #2
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00a      	beq.n	800fbdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	430a      	orrs	r2, r1
 800fbda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe0:	f003 0304 	and.w	r3, r3, #4
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00a      	beq.n	800fbfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc02:	f003 0308 	and.w	r3, r3, #8
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00a      	beq.n	800fc20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	430a      	orrs	r2, r1
 800fc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc24:	f003 0310 	and.w	r3, r3, #16
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00a      	beq.n	800fc42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	430a      	orrs	r2, r1
 800fc40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc46:	f003 0320 	and.w	r3, r3, #32
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00a      	beq.n	800fc64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	430a      	orrs	r2, r1
 800fc62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d01a      	beq.n	800fca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	430a      	orrs	r2, r1
 800fc84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc8e:	d10a      	bne.n	800fca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	430a      	orrs	r2, r1
 800fca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00a      	beq.n	800fcc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	430a      	orrs	r2, r1
 800fcc6:	605a      	str	r2, [r3, #4]
  }
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af02      	add	r7, sp, #8
 800fcda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fce4:	f7f6 ffc6 	bl	8006c74 <HAL_GetTick>
 800fce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f003 0308 	and.w	r3, r3, #8
 800fcf4:	2b08      	cmp	r3, #8
 800fcf6:	d10e      	bne.n	800fd16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcfc:	9300      	str	r3, [sp, #0]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f82f 	bl	800fd6a <UART_WaitOnFlagUntilTimeout>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd12:	2303      	movs	r3, #3
 800fd14:	e025      	b.n	800fd62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f003 0304 	and.w	r3, r3, #4
 800fd20:	2b04      	cmp	r3, #4
 800fd22:	d10e      	bne.n	800fd42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f819 	bl	800fd6a <UART_WaitOnFlagUntilTimeout>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd3e:	2303      	movs	r3, #3
 800fd40:	e00f      	b.n	800fd62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2220      	movs	r2, #32
 800fd46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2220      	movs	r2, #32
 800fd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b09c      	sub	sp, #112	; 0x70
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	60f8      	str	r0, [r7, #12]
 800fd72:	60b9      	str	r1, [r7, #8]
 800fd74:	603b      	str	r3, [r7, #0]
 800fd76:	4613      	mov	r3, r2
 800fd78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd7a:	e0a9      	b.n	800fed0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd82:	f000 80a5 	beq.w	800fed0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd86:	f7f6 ff75 	bl	8006c74 <HAL_GetTick>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	1ad3      	subs	r3, r2, r3
 800fd90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d302      	bcc.n	800fd9c <UART_WaitOnFlagUntilTimeout+0x32>
 800fd96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d140      	bne.n	800fe1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fda4:	e853 3f00 	ldrex	r3, [r3]
 800fda8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fdaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fdb0:	667b      	str	r3, [r7, #100]	; 0x64
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fdc2:	e841 2300 	strex	r3, r2, [r1]
 800fdc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1e6      	bne.n	800fd9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd8:	e853 3f00 	ldrex	r3, [r3]
 800fddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	f023 0301 	bic.w	r3, r3, #1
 800fde4:	663b      	str	r3, [r7, #96]	; 0x60
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	3308      	adds	r3, #8
 800fdec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdee:	64ba      	str	r2, [r7, #72]	; 0x48
 800fdf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdf6:	e841 2300 	strex	r3, r2, [r1]
 800fdfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fdfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d1e5      	bne.n	800fdce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2220      	movs	r2, #32
 800fe06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2220      	movs	r2, #32
 800fe0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e069      	b.n	800fef2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 0304 	and.w	r3, r3, #4
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d051      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	69db      	ldr	r3, [r3, #28]
 800fe32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe3a:	d149      	bne.n	800fed0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	e853 3f00 	ldrex	r3, [r3]
 800fe52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fe5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	461a      	mov	r2, r3
 800fe62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe64:	637b      	str	r3, [r7, #52]	; 0x34
 800fe66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe6c:	e841 2300 	strex	r3, r2, [r1]
 800fe70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d1e6      	bne.n	800fe46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	e853 3f00 	ldrex	r3, [r3]
 800fe86:	613b      	str	r3, [r7, #16]
   return(result);
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	f023 0301 	bic.w	r3, r3, #1
 800fe8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	3308      	adds	r3, #8
 800fe96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe98:	623a      	str	r2, [r7, #32]
 800fe9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9c:	69f9      	ldr	r1, [r7, #28]
 800fe9e:	6a3a      	ldr	r2, [r7, #32]
 800fea0:	e841 2300 	strex	r3, r2, [r1]
 800fea4:	61bb      	str	r3, [r7, #24]
   return(result);
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1e5      	bne.n	800fe78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2220      	movs	r2, #32
 800feb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2220      	movs	r2, #32
 800fec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fecc:	2303      	movs	r3, #3
 800fece:	e010      	b.n	800fef2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	69da      	ldr	r2, [r3, #28]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	4013      	ands	r3, r2
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	429a      	cmp	r2, r3
 800fede:	bf0c      	ite	eq
 800fee0:	2301      	moveq	r3, #1
 800fee2:	2300      	movne	r3, #0
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	461a      	mov	r2, r3
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	429a      	cmp	r2, r3
 800feec:	f43f af46 	beq.w	800fd7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3770      	adds	r7, #112	; 0x70
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
	...

0800fefc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b096      	sub	sp, #88	; 0x58
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	4613      	mov	r3, r2
 800ff08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	88fa      	ldrh	r2, [r7, #6]
 800ff14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2222      	movs	r2, #34	; 0x22
 800ff24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d02c      	beq.n	800ff8a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff34:	4a42      	ldr	r2, [pc, #264]	; (8010040 <UART_Start_Receive_DMA+0x144>)
 800ff36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff3c:	4a41      	ldr	r2, [pc, #260]	; (8010044 <UART_Start_Receive_DMA+0x148>)
 800ff3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff44:	4a40      	ldr	r2, [pc, #256]	; (8010048 <UART_Start_Receive_DMA+0x14c>)
 800ff46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	3324      	adds	r3, #36	; 0x24
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff60:	461a      	mov	r2, r3
 800ff62:	88fb      	ldrh	r3, [r7, #6]
 800ff64:	f7f9 f96e 	bl	8009244 <HAL_DMA_Start_IT>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d00d      	beq.n	800ff8a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2210      	movs	r2, #16
 800ff72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2220      	movs	r2, #32
 800ff82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ff86:	2301      	movs	r3, #1
 800ff88:	e055      	b.n	8010036 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	691b      	ldr	r3, [r3, #16]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d018      	beq.n	800ffcc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa2:	e853 3f00 	ldrex	r3, [r3]
 800ffa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ffae:	657b      	str	r3, [r7, #84]	; 0x54
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffc0:	e841 2300 	strex	r3, r2, [r1]
 800ffc4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ffc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1e6      	bne.n	800ff9a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	3308      	adds	r3, #8
 800ffd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	e853 3f00 	ldrex	r3, [r3]
 800ffda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	f043 0301 	orr.w	r3, r3, #1
 800ffe2:	653b      	str	r3, [r7, #80]	; 0x50
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	3308      	adds	r3, #8
 800ffea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffec:	637a      	str	r2, [r7, #52]	; 0x34
 800ffee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fff4:	e841 2300 	strex	r3, r2, [r1]
 800fff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1e5      	bne.n	800ffcc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3308      	adds	r3, #8
 8010006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	e853 3f00 	ldrex	r3, [r3]
 801000e:	613b      	str	r3, [r7, #16]
   return(result);
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3308      	adds	r3, #8
 801001e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010020:	623a      	str	r2, [r7, #32]
 8010022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010024:	69f9      	ldr	r1, [r7, #28]
 8010026:	6a3a      	ldr	r2, [r7, #32]
 8010028:	e841 2300 	strex	r3, r2, [r1]
 801002c:	61bb      	str	r3, [r7, #24]
   return(result);
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d1e5      	bne.n	8010000 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3758      	adds	r7, #88	; 0x58
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	0801019b 	.word	0x0801019b
 8010044:	080102c1 	.word	0x080102c1
 8010048:	080102f9 	.word	0x080102f9

0801004c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801004c:	b480      	push	{r7}
 801004e:	b08f      	sub	sp, #60	; 0x3c
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	e853 3f00 	ldrex	r3, [r3]
 8010060:	61fb      	str	r3, [r7, #28]
   return(result);
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010068:	637b      	str	r3, [r7, #52]	; 0x34
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010074:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801007a:	e841 2300 	strex	r3, r2, [r1]
 801007e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1e6      	bne.n	8010054 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3308      	adds	r3, #8
 801008c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	e853 3f00 	ldrex	r3, [r3]
 8010094:	60bb      	str	r3, [r7, #8]
   return(result);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801009c:	633b      	str	r3, [r7, #48]	; 0x30
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3308      	adds	r3, #8
 80100a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100a6:	61ba      	str	r2, [r7, #24]
 80100a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100aa:	6979      	ldr	r1, [r7, #20]
 80100ac:	69ba      	ldr	r2, [r7, #24]
 80100ae:	e841 2300 	strex	r3, r2, [r1]
 80100b2:	613b      	str	r3, [r7, #16]
   return(result);
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1e5      	bne.n	8010086 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2220      	movs	r2, #32
 80100be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80100c2:	bf00      	nop
 80100c4:	373c      	adds	r7, #60	; 0x3c
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b095      	sub	sp, #84	; 0x54
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100de:	e853 3f00 	ldrex	r3, [r3]
 80100e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	461a      	mov	r2, r3
 80100f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f4:	643b      	str	r3, [r7, #64]	; 0x40
 80100f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100fc:	e841 2300 	strex	r3, r2, [r1]
 8010100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e6      	bne.n	80100d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	3308      	adds	r3, #8
 801010e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010110:	6a3b      	ldr	r3, [r7, #32]
 8010112:	e853 3f00 	ldrex	r3, [r3]
 8010116:	61fb      	str	r3, [r7, #28]
   return(result);
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801011e:	f023 0301 	bic.w	r3, r3, #1
 8010122:	64bb      	str	r3, [r7, #72]	; 0x48
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	3308      	adds	r3, #8
 801012a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801012c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801012e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010134:	e841 2300 	strex	r3, r2, [r1]
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	2b00      	cmp	r3, #0
 801013e:	d1e3      	bne.n	8010108 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010144:	2b01      	cmp	r3, #1
 8010146:	d118      	bne.n	801017a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	e853 3f00 	ldrex	r3, [r3]
 8010154:	60bb      	str	r3, [r7, #8]
   return(result);
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	f023 0310 	bic.w	r3, r3, #16
 801015c:	647b      	str	r3, [r7, #68]	; 0x44
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010166:	61bb      	str	r3, [r7, #24]
 8010168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016a:	6979      	ldr	r1, [r7, #20]
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	e841 2300 	strex	r3, r2, [r1]
 8010172:	613b      	str	r3, [r7, #16]
   return(result);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d1e6      	bne.n	8010148 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2220      	movs	r2, #32
 801017e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	671a      	str	r2, [r3, #112]	; 0x70
}
 801018e:	bf00      	nop
 8010190:	3754      	adds	r7, #84	; 0x54
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr

0801019a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b09c      	sub	sp, #112	; 0x70
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f003 0320 	and.w	r3, r3, #32
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d171      	bne.n	801029a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80101b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101b8:	2200      	movs	r2, #0
 80101ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80101d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80101de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e6      	bne.n	80101be <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	3308      	adds	r3, #8
 80101f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fa:	e853 3f00 	ldrex	r3, [r3]
 80101fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010202:	f023 0301 	bic.w	r3, r3, #1
 8010206:	667b      	str	r3, [r7, #100]	; 0x64
 8010208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	3308      	adds	r3, #8
 801020e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010210:	647a      	str	r2, [r7, #68]	; 0x44
 8010212:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801021e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e5      	bne.n	80101f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3308      	adds	r3, #8
 801022a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	e853 3f00 	ldrex	r3, [r3]
 8010232:	623b      	str	r3, [r7, #32]
   return(result);
 8010234:	6a3b      	ldr	r3, [r7, #32]
 8010236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801023a:	663b      	str	r3, [r7, #96]	; 0x60
 801023c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	3308      	adds	r3, #8
 8010242:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010244:	633a      	str	r2, [r7, #48]	; 0x30
 8010246:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801024a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801024c:	e841 2300 	strex	r3, r2, [r1]
 8010250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1e5      	bne.n	8010224 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801025a:	2220      	movs	r2, #32
 801025c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010264:	2b01      	cmp	r3, #1
 8010266:	d118      	bne.n	801029a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	e853 3f00 	ldrex	r3, [r3]
 8010274:	60fb      	str	r3, [r7, #12]
   return(result);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f023 0310 	bic.w	r3, r3, #16
 801027c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801027e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010286:	61fb      	str	r3, [r7, #28]
 8010288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028a:	69b9      	ldr	r1, [r7, #24]
 801028c:	69fa      	ldr	r2, [r7, #28]
 801028e:	e841 2300 	strex	r3, r2, [r1]
 8010292:	617b      	str	r3, [r7, #20]
   return(result);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1e6      	bne.n	8010268 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801029a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801029c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d107      	bne.n	80102b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80102a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102a8:	4619      	mov	r1, r3
 80102aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102ac:	f7f3 fa6e 	bl	800378c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102b0:	e002      	b.n	80102b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80102b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102b4:	f7ff f952 	bl	800f55c <HAL_UART_RxCpltCallback>
}
 80102b8:	bf00      	nop
 80102ba:	3770      	adds	r7, #112	; 0x70
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d109      	bne.n	80102ea <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102dc:	085b      	lsrs	r3, r3, #1
 80102de:	b29b      	uxth	r3, r3
 80102e0:	4619      	mov	r1, r3
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7f3 fa52 	bl	800378c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102e8:	e002      	b.n	80102f0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f7ff f940 	bl	800f570 <HAL_UART_RxHalfCpltCallback>
}
 80102f0:	bf00      	nop
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010304:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801030c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010314:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010320:	2b80      	cmp	r3, #128	; 0x80
 8010322:	d109      	bne.n	8010338 <UART_DMAError+0x40>
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	2b21      	cmp	r3, #33	; 0x21
 8010328:	d106      	bne.n	8010338 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2200      	movs	r2, #0
 801032e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010332:	6978      	ldr	r0, [r7, #20]
 8010334:	f7ff fe8a 	bl	801004c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010342:	2b40      	cmp	r3, #64	; 0x40
 8010344:	d109      	bne.n	801035a <UART_DMAError+0x62>
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2b22      	cmp	r3, #34	; 0x22
 801034a:	d106      	bne.n	801035a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	2200      	movs	r2, #0
 8010350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010354:	6978      	ldr	r0, [r7, #20]
 8010356:	f7ff feba 	bl	80100ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010360:	f043 0210 	orr.w	r2, r3, #16
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801036a:	6978      	ldr	r0, [r7, #20]
 801036c:	f7ff f90a 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010370:	bf00      	nop
 8010372:	3718      	adds	r7, #24
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010384:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2200      	movs	r2, #0
 801038a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f7ff f8f4 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801039c:	bf00      	nop
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b088      	sub	sp, #32
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	e853 3f00 	ldrex	r3, [r3]
 80103b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103c0:	61fb      	str	r3, [r7, #28]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	61bb      	str	r3, [r7, #24]
 80103cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ce:	6979      	ldr	r1, [r7, #20]
 80103d0:	69ba      	ldr	r2, [r7, #24]
 80103d2:	e841 2300 	strex	r3, r2, [r1]
 80103d6:	613b      	str	r3, [r7, #16]
   return(result);
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e6      	bne.n	80103ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2220      	movs	r2, #32
 80103e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff f8ab 	bl	800f548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103f2:	bf00      	nop
 80103f4:	3720      	adds	r7, #32
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80103fa:	b480      	push	{r7}
 80103fc:	b083      	sub	sp, #12
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010402:	bf00      	nop
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801040e:	b480      	push	{r7}
 8010410:	b083      	sub	sp, #12
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010416:	bf00      	nop
 8010418:	370c      	adds	r7, #12
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr

08010422 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010436:	b480      	push	{r7}
 8010438:	b085      	sub	sp, #20
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010444:	2b01      	cmp	r3, #1
 8010446:	d101      	bne.n	801044c <HAL_UARTEx_DisableFifoMode+0x16>
 8010448:	2302      	movs	r3, #2
 801044a:	e027      	b.n	801049c <HAL_UARTEx_DisableFifoMode+0x66>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2224      	movs	r2, #36	; 0x24
 8010458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f022 0201 	bic.w	r2, r2, #1
 8010472:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801047a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2220      	movs	r2, #32
 801048e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3714      	adds	r7, #20
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d101      	bne.n	80104c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80104bc:	2302      	movs	r3, #2
 80104be:	e02d      	b.n	801051c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2224      	movs	r2, #36	; 0x24
 80104cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f022 0201 	bic.w	r2, r2, #1
 80104e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	430a      	orrs	r2, r1
 80104fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 f8ab 	bl	8010658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2220      	movs	r2, #32
 801050e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801051a:	2300      	movs	r3, #0
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010534:	2b01      	cmp	r3, #1
 8010536:	d101      	bne.n	801053c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010538:	2302      	movs	r3, #2
 801053a:	e02d      	b.n	8010598 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2224      	movs	r2, #36	; 0x24
 8010548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f022 0201 	bic.w	r2, r2, #1
 8010562:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	430a      	orrs	r2, r1
 8010576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f000 f86d 	bl	8010658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2220      	movs	r2, #32
 801058a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b08c      	sub	sp, #48	; 0x30
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	4613      	mov	r3, r2
 80105ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105b4:	2b20      	cmp	r3, #32
 80105b6:	d14a      	bne.n	801064e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d002      	beq.n	80105c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80105be:	88fb      	ldrh	r3, [r7, #6]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	e043      	b.n	8010650 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d101      	bne.n	80105d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80105d2:	2302      	movs	r3, #2
 80105d4:	e03c      	b.n	8010650 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2201      	movs	r2, #1
 80105da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2201      	movs	r2, #1
 80105e2:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80105e4:	88fb      	ldrh	r3, [r7, #6]
 80105e6:	461a      	mov	r2, r3
 80105e8:	68b9      	ldr	r1, [r7, #8]
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7ff fc86 	bl	800fefc <UART_Start_Receive_DMA>
 80105f0:	4603      	mov	r3, r0
 80105f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80105f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d124      	bne.n	8010648 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010602:	2b01      	cmp	r3, #1
 8010604:	d11d      	bne.n	8010642 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2210      	movs	r2, #16
 801060c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	e853 3f00 	ldrex	r3, [r3]
 801061a:	617b      	str	r3, [r7, #20]
   return(result);
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f043 0310 	orr.w	r3, r3, #16
 8010622:	62bb      	str	r3, [r7, #40]	; 0x28
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	461a      	mov	r2, r3
 801062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062c:	627b      	str	r3, [r7, #36]	; 0x24
 801062e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010630:	6a39      	ldr	r1, [r7, #32]
 8010632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010634:	e841 2300 	strex	r3, r2, [r1]
 8010638:	61fb      	str	r3, [r7, #28]
   return(result);
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e6      	bne.n	801060e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010640:	e002      	b.n	8010648 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010642:	2301      	movs	r3, #1
 8010644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801064c:	e000      	b.n	8010650 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801064e:	2302      	movs	r3, #2
  }
}
 8010650:	4618      	mov	r0, r3
 8010652:	3730      	adds	r7, #48	; 0x30
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010664:	2b00      	cmp	r3, #0
 8010666:	d108      	bne.n	801067a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2201      	movs	r2, #1
 801066c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2201      	movs	r2, #1
 8010674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010678:	e031      	b.n	80106de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801067a:	2308      	movs	r3, #8
 801067c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801067e:	2308      	movs	r3, #8
 8010680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	0e5b      	lsrs	r3, r3, #25
 801068a:	b2db      	uxtb	r3, r3
 801068c:	f003 0307 	and.w	r3, r3, #7
 8010690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	0f5b      	lsrs	r3, r3, #29
 801069a:	b2db      	uxtb	r3, r3
 801069c:	f003 0307 	and.w	r3, r3, #7
 80106a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106a2:	7bbb      	ldrb	r3, [r7, #14]
 80106a4:	7b3a      	ldrb	r2, [r7, #12]
 80106a6:	4911      	ldr	r1, [pc, #68]	; (80106ec <UARTEx_SetNbDataToProcess+0x94>)
 80106a8:	5c8a      	ldrb	r2, [r1, r2]
 80106aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80106ae:	7b3a      	ldrb	r2, [r7, #12]
 80106b0:	490f      	ldr	r1, [pc, #60]	; (80106f0 <UARTEx_SetNbDataToProcess+0x98>)
 80106b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	7b7a      	ldrb	r2, [r7, #13]
 80106c4:	4909      	ldr	r1, [pc, #36]	; (80106ec <UARTEx_SetNbDataToProcess+0x94>)
 80106c6:	5c8a      	ldrb	r2, [r1, r2]
 80106c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80106cc:	7b7a      	ldrb	r2, [r7, #13]
 80106ce:	4908      	ldr	r1, [pc, #32]	; (80106f0 <UARTEx_SetNbDataToProcess+0x98>)
 80106d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80106de:	bf00      	nop
 80106e0:	3714      	adds	r7, #20
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop
 80106ec:	08018544 	.word	0x08018544
 80106f0:	0801854c 	.word	0x0801854c

080106f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010704:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	b29a      	uxth	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010722:	b480      	push	{r7}
 8010724:	b085      	sub	sp, #20
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801072a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801072e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010736:	b29a      	uxth	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	b29b      	uxth	r3, r3
 801073c:	43db      	mvns	r3, r3
 801073e:	b29b      	uxth	r3, r3
 8010740:	4013      	ands	r3, r2
 8010742:	b29a      	uxth	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010758:	b084      	sub	sp, #16
 801075a:	b480      	push	{r7}
 801075c:	b083      	sub	sp, #12
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	f107 0014 	add.w	r0, r7, #20
 8010766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2201      	movs	r2, #1
 801076e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	b004      	add	sp, #16
 8010798:	4770      	bx	lr
	...

0801079c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801079c:	b480      	push	{r7}
 801079e:	b09d      	sub	sp, #116	; 0x74
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80107a6:	2300      	movs	r3, #0
 80107a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80107be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	78db      	ldrb	r3, [r3, #3]
 80107ca:	2b03      	cmp	r3, #3
 80107cc:	d81f      	bhi.n	801080e <USB_ActivateEndpoint+0x72>
 80107ce:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <USB_ActivateEndpoint+0x38>)
 80107d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d4:	080107e5 	.word	0x080107e5
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010817 	.word	0x08010817
 80107e0:	080107f3 	.word	0x080107f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80107e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80107e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80107ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80107f0:	e012      	b.n	8010818 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80107f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80107f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80107fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80107fe:	e00b      	b.n	8010818 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010808:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 801080c:	e004      	b.n	8010818 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801080e:	2301      	movs	r3, #1
 8010810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010814:	e000      	b.n	8010818 <USB_ActivateEndpoint+0x7c>
      break;
 8010816:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	441a      	add	r2, r3
 8010822:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801082a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801082e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010836:	b29b      	uxth	r3, r3
 8010838:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	4413      	add	r3, r2
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	b29b      	uxth	r3, r3
 8010848:	b21b      	sxth	r3, r3
 801084a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801084e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010852:	b21a      	sxth	r2, r3
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	b21b      	sxth	r3, r3
 801085a:	4313      	orrs	r3, r2
 801085c:	b21b      	sxth	r3, r3
 801085e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	441a      	add	r2, r3
 801086c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010880:	b29b      	uxth	r3, r3
 8010882:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	7b1b      	ldrb	r3, [r3, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	f040 8149 	bne.w	8010b20 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	785b      	ldrb	r3, [r3, #1]
 8010892:	2b00      	cmp	r3, #0
 8010894:	f000 8084 	beq.w	80109a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	461a      	mov	r2, r3
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	4413      	add	r3, r2
 80108aa:	61bb      	str	r3, [r7, #24]
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	00da      	lsls	r2, r3, #3
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	4413      	add	r3, r2
 80108b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108ba:	617b      	str	r3, [r7, #20]
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	88db      	ldrh	r3, [r3, #6]
 80108c0:	085b      	lsrs	r3, r3, #1
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	005b      	lsls	r3, r3, #1
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	827b      	strh	r3, [r7, #18]
 80108da:	8a7b      	ldrh	r3, [r7, #18]
 80108dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01b      	beq.n	801091c <USB_ActivateEndpoint+0x180>
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4413      	add	r3, r2
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108fa:	823b      	strh	r3, [r7, #16]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	441a      	add	r2, r3
 8010906:	8a3b      	ldrh	r3, [r7, #16]
 8010908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801090c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010918:	b29b      	uxth	r3, r3
 801091a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	78db      	ldrb	r3, [r3, #3]
 8010920:	2b01      	cmp	r3, #1
 8010922:	d020      	beq.n	8010966 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	4413      	add	r3, r2
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	b29b      	uxth	r3, r3
 8010932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801093a:	81bb      	strh	r3, [r7, #12]
 801093c:	89bb      	ldrh	r3, [r7, #12]
 801093e:	f083 0320 	eor.w	r3, r3, #32
 8010942:	81bb      	strh	r3, [r7, #12]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	441a      	add	r2, r3
 801094e:	89bb      	ldrh	r3, [r7, #12]
 8010950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010960:	b29b      	uxth	r3, r3
 8010962:	8013      	strh	r3, [r2, #0]
 8010964:	e2a6      	b.n	8010eb4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	4413      	add	r3, r2
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	b29b      	uxth	r3, r3
 8010974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801097c:	81fb      	strh	r3, [r7, #14]
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	441a      	add	r2, r3
 8010988:	89fb      	ldrh	r3, [r7, #14]
 801098a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801098e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801099a:	b29b      	uxth	r3, r3
 801099c:	8013      	strh	r3, [r2, #0]
 801099e:	e289      	b.n	8010eb4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	633b      	str	r3, [r7, #48]	; 0x30
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	461a      	mov	r2, r3
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	4413      	add	r3, r2
 80109b2:	633b      	str	r3, [r7, #48]	; 0x30
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	00da      	lsls	r2, r3, #3
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	4413      	add	r3, r2
 80109be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80109c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	88db      	ldrh	r3, [r3, #6]
 80109c8:	085b      	lsrs	r3, r3, #1
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109de:	b29b      	uxth	r3, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e4:	4413      	add	r3, r2
 80109e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	00da      	lsls	r2, r3, #3
 80109ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f0:	4413      	add	r3, r2
 80109f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	2b3e      	cmp	r3, #62	; 0x3e
 80109fe:	d918      	bls.n	8010a32 <USB_ActivateEndpoint+0x296>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	095b      	lsrs	r3, r3, #5
 8010a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	f003 031f 	and.w	r3, r3, #31
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d102      	bne.n	8010a1a <USB_ActivateEndpoint+0x27e>
 8010a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a16:	3b01      	subs	r3, #1
 8010a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	029b      	lsls	r3, r3, #10
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2e:	801a      	strh	r2, [r3, #0]
 8010a30:	e029      	b.n	8010a86 <USB_ActivateEndpoint+0x2ea>
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	691b      	ldr	r3, [r3, #16]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d112      	bne.n	8010a60 <USB_ActivateEndpoint+0x2c4>
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	801a      	strh	r2, [r3, #0]
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	801a      	strh	r2, [r3, #0]
 8010a5e:	e012      	b.n	8010a86 <USB_ActivateEndpoint+0x2ea>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	691b      	ldr	r3, [r3, #16]
 8010a64:	085b      	lsrs	r3, r3, #1
 8010a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <USB_ActivateEndpoint+0x2de>
 8010a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a76:	3301      	adds	r3, #1
 8010a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	029b      	lsls	r3, r3, #10
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	4413      	add	r3, r2
 8010a90:	881b      	ldrh	r3, [r3, #0]
 8010a92:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d01b      	beq.n	8010ad6 <USB_ActivateEndpoint+0x33a>
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	4413      	add	r3, r2
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ab4:	843b      	strh	r3, [r7, #32]
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	441a      	add	r2, r3
 8010ac0:	8c3b      	ldrh	r3, [r7, #32]
 8010ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aec:	83fb      	strh	r3, [r7, #30]
 8010aee:	8bfb      	ldrh	r3, [r7, #30]
 8010af0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010af4:	83fb      	strh	r3, [r7, #30]
 8010af6:	8bfb      	ldrh	r3, [r7, #30]
 8010af8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010afc:	83fb      	strh	r3, [r7, #30]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	441a      	add	r2, r3
 8010b08:	8bfb      	ldrh	r3, [r7, #30]
 8010b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	8013      	strh	r3, [r2, #0]
 8010b1e:	e1c9      	b.n	8010eb4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	78db      	ldrb	r3, [r3, #3]
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d11e      	bne.n	8010b66 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	441a      	add	r2, r3
 8010b4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	8013      	strh	r3, [r2, #0]
 8010b64:	e01d      	b.n	8010ba2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	881b      	ldrh	r3, [r3, #0]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	441a      	add	r2, r3
 8010b8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	461a      	mov	r2, r3
 8010bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bb2:	4413      	add	r3, r2
 8010bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	00da      	lsls	r2, r3, #3
 8010bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	891b      	ldrh	r3, [r3, #8]
 8010bca:	085b      	lsrs	r3, r3, #1
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	005b      	lsls	r3, r3, #1
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bd4:	801a      	strh	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	461a      	mov	r2, r3
 8010be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010be6:	4413      	add	r3, r2
 8010be8:	657b      	str	r3, [r7, #84]	; 0x54
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	00da      	lsls	r2, r3, #3
 8010bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	895b      	ldrh	r3, [r3, #10]
 8010bfe:	085b      	lsrs	r3, r3, #1
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	005b      	lsls	r3, r3, #1
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c08:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	785b      	ldrb	r3, [r3, #1]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f040 8093 	bne.w	8010d3a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010c24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d01b      	beq.n	8010c68 <USB_ActivateEndpoint+0x4cc>
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4413      	add	r3, r2
 8010c3a:	881b      	ldrh	r3, [r3, #0]
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c46:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	441a      	add	r2, r3
 8010c52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	4413      	add	r3, r2
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d01b      	beq.n	8010cb8 <USB_ActivateEndpoint+0x51c>
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	4413      	add	r3, r2
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c96:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	441a      	add	r2, r3
 8010ca2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cce:	873b      	strh	r3, [r7, #56]	; 0x38
 8010cd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010cd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8010cd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010cde:	873b      	strh	r3, [r7, #56]	; 0x38
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	441a      	add	r2, r3
 8010cea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	881b      	ldrh	r3, [r3, #0]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d16:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	441a      	add	r2, r3
 8010d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	8013      	strh	r3, [r2, #0]
 8010d38:	e0bc      	b.n	8010eb4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	4413      	add	r3, r2
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010d4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d01d      	beq.n	8010d92 <USB_ActivateEndpoint+0x5f6>
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	441a      	add	r2, r3
 8010d7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010da2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d01d      	beq.n	8010dea <USB_ActivateEndpoint+0x64e>
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	441a      	add	r2, r3
 8010dd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	78db      	ldrb	r3, [r3, #3]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d024      	beq.n	8010e3c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	4413      	add	r3, r2
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010e0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e10:	f083 0320 	eor.w	r3, r3, #32
 8010e14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	441a      	add	r2, r3
 8010e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	8013      	strh	r3, [r2, #0]
 8010e3a:	e01d      	b.n	8010e78 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	4413      	add	r3, r2
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	441a      	add	r2, r3
 8010e60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	441a      	add	r2, r3
 8010e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010eb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3774      	adds	r7, #116	; 0x74
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b08d      	sub	sp, #52	; 0x34
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	7b1b      	ldrb	r3, [r3, #12]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f040 808e 	bne.w	8010ff4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	785b      	ldrb	r3, [r3, #1]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d044      	beq.n	8010f6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	4413      	add	r3, r2
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	81bb      	strh	r3, [r7, #12]
 8010eee:	89bb      	ldrh	r3, [r7, #12]
 8010ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d01b      	beq.n	8010f30 <USB_DeactivateEndpoint+0x6c>
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f0e:	817b      	strh	r3, [r7, #10]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	441a      	add	r2, r3
 8010f1a:	897b      	ldrh	r3, [r7, #10]
 8010f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f46:	813b      	strh	r3, [r7, #8]
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	441a      	add	r2, r3
 8010f52:	893b      	ldrh	r3, [r7, #8]
 8010f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	8013      	strh	r3, [r2, #0]
 8010f68:	e192      	b.n	8011290 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	4413      	add	r3, r2
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	827b      	strh	r3, [r7, #18]
 8010f78:	8a7b      	ldrh	r3, [r7, #18]
 8010f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d01b      	beq.n	8010fba <USB_DeactivateEndpoint+0xf6>
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	009b      	lsls	r3, r3, #2
 8010f8a:	4413      	add	r3, r2
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f98:	823b      	strh	r3, [r7, #16]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	441a      	add	r2, r3
 8010fa4:	8a3b      	ldrh	r3, [r7, #16]
 8010fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fd0:	81fb      	strh	r3, [r7, #14]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	441a      	add	r2, r3
 8010fdc:	89fb      	ldrh	r3, [r7, #14]
 8010fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	8013      	strh	r3, [r2, #0]
 8010ff2:	e14d      	b.n	8011290 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	785b      	ldrb	r3, [r3, #1]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f040 80a5 	bne.w	8011148 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	843b      	strh	r3, [r7, #32]
 801100c:	8c3b      	ldrh	r3, [r7, #32]
 801100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011012:	2b00      	cmp	r3, #0
 8011014:	d01b      	beq.n	801104e <USB_DeactivateEndpoint+0x18a>
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b29b      	uxth	r3, r3
 8011024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801102c:	83fb      	strh	r3, [r7, #30]
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	441a      	add	r2, r3
 8011038:	8bfb      	ldrh	r3, [r7, #30]
 801103a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801103e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801104a:	b29b      	uxth	r3, r3
 801104c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	4413      	add	r3, r2
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	83bb      	strh	r3, [r7, #28]
 801105c:	8bbb      	ldrh	r3, [r7, #28]
 801105e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011062:	2b00      	cmp	r3, #0
 8011064:	d01b      	beq.n	801109e <USB_DeactivateEndpoint+0x1da>
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	881b      	ldrh	r3, [r3, #0]
 8011072:	b29b      	uxth	r3, r3
 8011074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801107c:	837b      	strh	r3, [r7, #26]
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	441a      	add	r2, r3
 8011088:	8b7b      	ldrh	r3, [r7, #26]
 801108a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801108e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801109a:	b29b      	uxth	r3, r3
 801109c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	009b      	lsls	r3, r3, #2
 80110a6:	4413      	add	r3, r2
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110b4:	833b      	strh	r3, [r7, #24]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	441a      	add	r2, r3
 80110c0:	8b3b      	ldrh	r3, [r7, #24]
 80110c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	009b      	lsls	r3, r3, #2
 80110de:	4413      	add	r3, r2
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ec:	82fb      	strh	r3, [r7, #22]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	441a      	add	r2, r3
 80110f8:	8afb      	ldrh	r3, [r7, #22]
 80110fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801110a:	b29b      	uxth	r3, r3
 801110c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4413      	add	r3, r2
 8011118:	881b      	ldrh	r3, [r3, #0]
 801111a:	b29b      	uxth	r3, r3
 801111c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011124:	82bb      	strh	r3, [r7, #20]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	441a      	add	r2, r3
 8011130:	8abb      	ldrh	r3, [r7, #20]
 8011132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801113e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011142:	b29b      	uxth	r3, r3
 8011144:	8013      	strh	r3, [r2, #0]
 8011146:	e0a3      	b.n	8011290 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	009b      	lsls	r3, r3, #2
 8011150:	4413      	add	r3, r2
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801115c:	2b00      	cmp	r3, #0
 801115e:	d01b      	beq.n	8011198 <USB_DeactivateEndpoint+0x2d4>
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4413      	add	r3, r2
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	b29b      	uxth	r3, r3
 801116e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011176:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	441a      	add	r2, r3
 8011182:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801118c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011194:	b29b      	uxth	r3, r3
 8011196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	4413      	add	r3, r2
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80111a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d01b      	beq.n	80111e8 <USB_DeactivateEndpoint+0x324>
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	4413      	add	r3, r2
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	441a      	add	r2, r3
 80111d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	4413      	add	r3, r2
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	441a      	add	r2, r3
 801120a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801120c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801121c:	b29b      	uxth	r3, r3
 801121e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	b29b      	uxth	r3, r3
 801122e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011236:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	441a      	add	r2, r3
 8011242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801124c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011254:	b29b      	uxth	r3, r3
 8011256:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	4413      	add	r3, r2
 8011262:	881b      	ldrh	r3, [r3, #0]
 8011264:	b29b      	uxth	r3, r3
 8011266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801126a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801126e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	441a      	add	r2, r3
 801127a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801127c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801128c:	b29b      	uxth	r3, r3
 801128e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3734      	adds	r7, #52	; 0x34
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b0c2      	sub	sp, #264	; 0x108
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ac:	6018      	str	r0, [r3, #0]
 80112ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80112b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	785b      	ldrb	r3, [r3, #1]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	f040 867b 	bne.w	8011fc0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80112ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	699a      	ldr	r2, [r3, #24]
 80112d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d908      	bls.n	80112f8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80112e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	691b      	ldr	r3, [r3, #16]
 80112f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80112f6:	e007      	b.n	8011308 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80112f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	7b1b      	ldrb	r3, [r3, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d13a      	bne.n	801138e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801131c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	6959      	ldr	r1, [r3, #20]
 8011324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	88da      	ldrh	r2, [r3, #6]
 8011330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011334:	b29b      	uxth	r3, r3
 8011336:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801133a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801133e:	6800      	ldr	r0, [r0, #0]
 8011340:	f001 fc1d 	bl	8012b7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	613b      	str	r3, [r7, #16]
 8011350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801135e:	b29b      	uxth	r3, r3
 8011360:	461a      	mov	r2, r3
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	4413      	add	r3, r2
 8011366:	613b      	str	r3, [r7, #16]
 8011368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	00da      	lsls	r2, r3, #3
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	4413      	add	r3, r2
 801137a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801137e:	60fb      	str	r3, [r7, #12]
 8011380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011384:	b29a      	uxth	r2, r3
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	801a      	strh	r2, [r3, #0]
 801138a:	f000 bde3 	b.w	8011f54 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801138e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	78db      	ldrb	r3, [r3, #3]
 801139a:	2b02      	cmp	r3, #2
 801139c:	f040 843a 	bne.w	8011c14 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80113a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	6a1a      	ldr	r2, [r3, #32]
 80113ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	f240 83b7 	bls.w	8011b2c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80113be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4413      	add	r3, r2
 80113d8:	881b      	ldrh	r3, [r3, #0]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80113e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	441a      	add	r2, r3
 8011402:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801140a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801140e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011416:	b29b      	uxth	r3, r3
 8011418:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801141a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801141e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	6a1a      	ldr	r2, [r3, #32]
 8011426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801142a:	1ad2      	subs	r2, r2, r3
 801142c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4413      	add	r3, r2
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	b29b      	uxth	r3, r3
 8011456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 81b3 	beq.w	80117c6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	633b      	str	r3, [r7, #48]	; 0x30
 801146c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	785b      	ldrb	r3, [r3, #1]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d16d      	bne.n	8011558 <USB_EPStartXfer+0x2ba>
 801147c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	62bb      	str	r3, [r7, #40]	; 0x28
 8011488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801148c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011496:	b29b      	uxth	r3, r3
 8011498:	461a      	mov	r2, r3
 801149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149c:	4413      	add	r3, r2
 801149e:	62bb      	str	r3, [r7, #40]	; 0x28
 80114a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	00da      	lsls	r2, r3, #3
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	4413      	add	r3, r2
 80114b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80114b6:	627b      	str	r3, [r7, #36]	; 0x24
 80114b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114bc:	2b3e      	cmp	r3, #62	; 0x3e
 80114be:	d91c      	bls.n	80114fa <USB_EPStartXfer+0x25c>
 80114c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c4:	095b      	lsrs	r3, r3, #5
 80114c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80114ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ce:	f003 031f 	and.w	r3, r3, #31
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d104      	bne.n	80114e0 <USB_EPStartXfer+0x242>
 80114d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114da:	3b01      	subs	r3, #1
 80114dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80114e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	029b      	lsls	r3, r3, #10
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	801a      	strh	r2, [r3, #0]
 80114f8:	e053      	b.n	80115a2 <USB_EPStartXfer+0x304>
 80114fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d112      	bne.n	8011528 <USB_EPStartXfer+0x28a>
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	b29b      	uxth	r3, r3
 8011508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801150c:	b29a      	uxth	r2, r3
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	801a      	strh	r2, [r3, #0]
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	b29b      	uxth	r3, r3
 8011518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801151c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011520:	b29a      	uxth	r2, r3
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	801a      	strh	r2, [r3, #0]
 8011526:	e03c      	b.n	80115a2 <USB_EPStartXfer+0x304>
 8011528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801152c:	085b      	lsrs	r3, r3, #1
 801152e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d004      	beq.n	8011548 <USB_EPStartXfer+0x2aa>
 801153e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011542:	3301      	adds	r3, #1
 8011544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011548:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801154c:	b29b      	uxth	r3, r3
 801154e:	029b      	lsls	r3, r3, #10
 8011550:	b29a      	uxth	r2, r3
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	801a      	strh	r2, [r3, #0]
 8011556:	e024      	b.n	80115a2 <USB_EPStartXfer+0x304>
 8011558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801155c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	785b      	ldrb	r3, [r3, #1]
 8011564:	2b01      	cmp	r3, #1
 8011566:	d11c      	bne.n	80115a2 <USB_EPStartXfer+0x304>
 8011568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011576:	b29b      	uxth	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	4413      	add	r3, r2
 801157e:	633b      	str	r3, [r7, #48]	; 0x30
 8011580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	00da      	lsls	r2, r3, #3
 801158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011590:	4413      	add	r3, r2
 8011592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801159c:	b29a      	uxth	r2, r3
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80115a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	895b      	ldrh	r3, [r3, #10]
 80115ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80115b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	6959      	ldr	r1, [r3, #20]
 80115be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80115c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80115cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80115d0:	6800      	ldr	r0, [r0, #0]
 80115d2:	f001 fad4 	bl	8012b7e <USB_WritePMA>
            ep->xfer_buff += len;
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	695a      	ldr	r2, [r3, #20]
 80115e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115e6:	441a      	add	r2, r3
 80115e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80115f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6a1a      	ldr	r2, [r3, #32]
 8011600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	691b      	ldr	r3, [r3, #16]
 801160c:	429a      	cmp	r2, r3
 801160e:	d90f      	bls.n	8011630 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	6a1a      	ldr	r2, [r3, #32]
 801161c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011620:	1ad2      	subs	r2, r2, r3
 8011622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	621a      	str	r2, [r3, #32]
 801162e:	e00e      	b.n	801164e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	6a1b      	ldr	r3, [r3, #32]
 801163c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2200      	movs	r2, #0
 801164c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801164e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	785b      	ldrb	r3, [r3, #1]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d16d      	bne.n	801173a <USB_EPStartXfer+0x49c>
 801165e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	61bb      	str	r3, [r7, #24]
 801166a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801166e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011678:	b29b      	uxth	r3, r3
 801167a:	461a      	mov	r2, r3
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	4413      	add	r3, r2
 8011680:	61bb      	str	r3, [r7, #24]
 8011682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	00da      	lsls	r2, r3, #3
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	4413      	add	r3, r2
 8011694:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011698:	617b      	str	r3, [r7, #20]
 801169a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801169e:	2b3e      	cmp	r3, #62	; 0x3e
 80116a0:	d91c      	bls.n	80116dc <USB_EPStartXfer+0x43e>
 80116a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116a6:	095b      	lsrs	r3, r3, #5
 80116a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80116ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116b0:	f003 031f 	and.w	r3, r3, #31
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d104      	bne.n	80116c2 <USB_EPStartXfer+0x424>
 80116b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116bc:	3b01      	subs	r3, #1
 80116be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80116c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	029b      	lsls	r3, r3, #10
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	801a      	strh	r2, [r3, #0]
 80116da:	e059      	b.n	8011790 <USB_EPStartXfer+0x4f2>
 80116dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d112      	bne.n	801170a <USB_EPStartXfer+0x46c>
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	801a      	strh	r2, [r3, #0]
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011702:	b29a      	uxth	r2, r3
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	801a      	strh	r2, [r3, #0]
 8011708:	e042      	b.n	8011790 <USB_EPStartXfer+0x4f2>
 801170a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801170e:	085b      	lsrs	r3, r3, #1
 8011710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <USB_EPStartXfer+0x48c>
 8011720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011724:	3301      	adds	r3, #1
 8011726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801172a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801172e:	b29b      	uxth	r3, r3
 8011730:	029b      	lsls	r3, r3, #10
 8011732:	b29a      	uxth	r2, r3
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	801a      	strh	r2, [r3, #0]
 8011738:	e02a      	b.n	8011790 <USB_EPStartXfer+0x4f2>
 801173a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	785b      	ldrb	r3, [r3, #1]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d122      	bne.n	8011790 <USB_EPStartXfer+0x4f2>
 801174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	623b      	str	r3, [r7, #32]
 8011756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801175a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011764:	b29b      	uxth	r3, r3
 8011766:	461a      	mov	r2, r3
 8011768:	6a3b      	ldr	r3, [r7, #32]
 801176a:	4413      	add	r3, r2
 801176c:	623b      	str	r3, [r7, #32]
 801176e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	00da      	lsls	r2, r3, #3
 801177c:	6a3b      	ldr	r3, [r7, #32]
 801177e:	4413      	add	r3, r2
 8011780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011784:	61fb      	str	r3, [r7, #28]
 8011786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801178a:	b29a      	uxth	r2, r3
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	891b      	ldrh	r3, [r3, #8]
 801179c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	6959      	ldr	r1, [r3, #20]
 80117ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80117b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80117ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80117be:	6800      	ldr	r0, [r0, #0]
 80117c0:	f001 f9dd 	bl	8012b7e <USB_WritePMA>
 80117c4:	e3c6      	b.n	8011f54 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	785b      	ldrb	r3, [r3, #1]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d16d      	bne.n	80118b2 <USB_EPStartXfer+0x614>
 80117d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80117e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	461a      	mov	r2, r3
 80117f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117f6:	4413      	add	r3, r2
 80117f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80117fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	00da      	lsls	r2, r3, #3
 8011808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801180a:	4413      	add	r3, r2
 801180c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011810:	647b      	str	r3, [r7, #68]	; 0x44
 8011812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011816:	2b3e      	cmp	r3, #62	; 0x3e
 8011818:	d91c      	bls.n	8011854 <USB_EPStartXfer+0x5b6>
 801181a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181e:	095b      	lsrs	r3, r3, #5
 8011820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011828:	f003 031f 	and.w	r3, r3, #31
 801182c:	2b00      	cmp	r3, #0
 801182e:	d104      	bne.n	801183a <USB_EPStartXfer+0x59c>
 8011830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011834:	3b01      	subs	r3, #1
 8011836:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801183a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801183e:	b29b      	uxth	r3, r3
 8011840:	029b      	lsls	r3, r3, #10
 8011842:	b29b      	uxth	r3, r3
 8011844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801184c:	b29a      	uxth	r2, r3
 801184e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011850:	801a      	strh	r2, [r3, #0]
 8011852:	e059      	b.n	8011908 <USB_EPStartXfer+0x66a>
 8011854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011858:	2b00      	cmp	r3, #0
 801185a:	d112      	bne.n	8011882 <USB_EPStartXfer+0x5e4>
 801185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801185e:	881b      	ldrh	r3, [r3, #0]
 8011860:	b29b      	uxth	r3, r3
 8011862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011866:	b29a      	uxth	r2, r3
 8011868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801186a:	801a      	strh	r2, [r3, #0]
 801186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	b29b      	uxth	r3, r3
 8011872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801187a:	b29a      	uxth	r2, r3
 801187c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801187e:	801a      	strh	r2, [r3, #0]
 8011880:	e042      	b.n	8011908 <USB_EPStartXfer+0x66a>
 8011882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011886:	085b      	lsrs	r3, r3, #1
 8011888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801188c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011890:	f003 0301 	and.w	r3, r3, #1
 8011894:	2b00      	cmp	r3, #0
 8011896:	d004      	beq.n	80118a2 <USB_EPStartXfer+0x604>
 8011898:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801189c:	3301      	adds	r3, #1
 801189e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80118a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	029b      	lsls	r3, r3, #10
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ae:	801a      	strh	r2, [r3, #0]
 80118b0:	e02a      	b.n	8011908 <USB_EPStartXfer+0x66a>
 80118b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	785b      	ldrb	r3, [r3, #1]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d122      	bne.n	8011908 <USB_EPStartXfer+0x66a>
 80118c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	653b      	str	r3, [r7, #80]	; 0x50
 80118ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118dc:	b29b      	uxth	r3, r3
 80118de:	461a      	mov	r2, r3
 80118e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e2:	4413      	add	r3, r2
 80118e4:	653b      	str	r3, [r7, #80]	; 0x50
 80118e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	00da      	lsls	r2, r3, #3
 80118f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f6:	4413      	add	r3, r2
 80118f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011902:	b29a      	uxth	r2, r3
 8011904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011906:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801190c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	891b      	ldrh	r3, [r3, #8]
 8011914:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801191c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	6959      	ldr	r1, [r3, #20]
 8011924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011928:	b29b      	uxth	r3, r3
 801192a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801192e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011932:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011936:	6800      	ldr	r0, [r0, #0]
 8011938:	f001 f921 	bl	8012b7e <USB_WritePMA>
            ep->xfer_buff += len;
 801193c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	695a      	ldr	r2, [r3, #20]
 8011948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801194c:	441a      	add	r2, r3
 801194e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	6a1a      	ldr	r2, [r3, #32]
 8011966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801196a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	429a      	cmp	r2, r3
 8011974:	d90f      	bls.n	8011996 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8011976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801197a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6a1a      	ldr	r2, [r3, #32]
 8011982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011986:	1ad2      	subs	r2, r2, r3
 8011988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801198c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	621a      	str	r2, [r3, #32]
 8011994:	e00e      	b.n	80119b4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8011996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801199a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80119a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2200      	movs	r2, #0
 80119b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80119b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	643b      	str	r3, [r7, #64]	; 0x40
 80119c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	785b      	ldrb	r3, [r3, #1]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d16d      	bne.n	8011aac <USB_EPStartXfer+0x80e>
 80119d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	63bb      	str	r3, [r7, #56]	; 0x38
 80119dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	461a      	mov	r2, r3
 80119ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f0:	4413      	add	r3, r2
 80119f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80119f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	00da      	lsls	r2, r3, #3
 8011a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a04:	4413      	add	r3, r2
 8011a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8011a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a10:	2b3e      	cmp	r3, #62	; 0x3e
 8011a12:	d91c      	bls.n	8011a4e <USB_EPStartXfer+0x7b0>
 8011a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a18:	095b      	lsrs	r3, r3, #5
 8011a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a22:	f003 031f 	and.w	r3, r3, #31
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d104      	bne.n	8011a34 <USB_EPStartXfer+0x796>
 8011a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	029b      	lsls	r3, r3, #10
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4a:	801a      	strh	r2, [r3, #0]
 8011a4c:	e053      	b.n	8011af6 <USB_EPStartXfer+0x858>
 8011a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d112      	bne.n	8011a7c <USB_EPStartXfer+0x7de>
 8011a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a64:	801a      	strh	r2, [r3, #0]
 8011a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a78:	801a      	strh	r2, [r3, #0]
 8011a7a:	e03c      	b.n	8011af6 <USB_EPStartXfer+0x858>
 8011a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a80:	085b      	lsrs	r3, r3, #1
 8011a82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a8a:	f003 0301 	and.w	r3, r3, #1
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d004      	beq.n	8011a9c <USB_EPStartXfer+0x7fe>
 8011a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a96:	3301      	adds	r3, #1
 8011a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	029b      	lsls	r3, r3, #10
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa8:	801a      	strh	r2, [r3, #0]
 8011aaa:	e024      	b.n	8011af6 <USB_EPStartXfer+0x858>
 8011aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	785b      	ldrb	r3, [r3, #1]
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d11c      	bne.n	8011af6 <USB_EPStartXfer+0x858>
 8011abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	461a      	mov	r2, r3
 8011ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad0:	4413      	add	r3, r2
 8011ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	00da      	lsls	r2, r3, #3
 8011ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af0:	b29a      	uxth	r2, r3
 8011af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	895b      	ldrh	r3, [r3, #10]
 8011b02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	6959      	ldr	r1, [r3, #20]
 8011b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011b1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	f001 f82a 	bl	8012b7e <USB_WritePMA>
 8011b2a:	e213      	b.n	8011f54 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	6a1b      	ldr	r3, [r3, #32]
 8011b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	441a      	add	r2, r3
 8011b80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bb8:	4413      	add	r3, r2
 8011bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	00da      	lsls	r2, r3, #3
 8011bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bcc:	4413      	add	r3, r2
 8011bce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	6959      	ldr	r1, [r3, #20]
 8011bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011c04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011c08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c0c:	6800      	ldr	r0, [r0, #0]
 8011c0e:	f000 ffb6 	bl	8012b7e <USB_WritePMA>
 8011c12:	e19f      	b.n	8011f54 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	6a1a      	ldr	r2, [r3, #32]
 8011c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c24:	1ad2      	subs	r2, r2, r3
 8011c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	4413      	add	r3, r2
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 80bc 	beq.w	8011dd2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	673b      	str	r3, [r7, #112]	; 0x70
 8011c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	785b      	ldrb	r3, [r3, #1]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d16d      	bne.n	8011d52 <USB_EPStartXfer+0xab4>
 8011c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	461a      	mov	r2, r3
 8011c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c96:	4413      	add	r3, r2
 8011c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	00da      	lsls	r2, r3, #3
 8011ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011caa:	4413      	add	r3, r2
 8011cac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8011cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8011cb8:	d91c      	bls.n	8011cf4 <USB_EPStartXfer+0xa56>
 8011cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cbe:	095b      	lsrs	r3, r3, #5
 8011cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cc8:	f003 031f 	and.w	r3, r3, #31
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d104      	bne.n	8011cda <USB_EPStartXfer+0xa3c>
 8011cd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011cda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	029b      	lsls	r3, r3, #10
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cf0:	801a      	strh	r2, [r3, #0]
 8011cf2:	e053      	b.n	8011d9c <USB_EPStartXfer+0xafe>
 8011cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d112      	bne.n	8011d22 <USB_EPStartXfer+0xa84>
 8011cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d0a:	801a      	strh	r2, [r3, #0]
 8011d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d1e:	801a      	strh	r2, [r3, #0]
 8011d20:	e03c      	b.n	8011d9c <USB_EPStartXfer+0xafe>
 8011d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d26:	085b      	lsrs	r3, r3, #1
 8011d28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d30:	f003 0301 	and.w	r3, r3, #1
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d004      	beq.n	8011d42 <USB_EPStartXfer+0xaa4>
 8011d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011d42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	029b      	lsls	r3, r3, #10
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d4e:	801a      	strh	r2, [r3, #0]
 8011d50:	e024      	b.n	8011d9c <USB_EPStartXfer+0xafe>
 8011d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	785b      	ldrb	r3, [r3, #1]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d11c      	bne.n	8011d9c <USB_EPStartXfer+0xafe>
 8011d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	461a      	mov	r2, r3
 8011d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d76:	4413      	add	r3, r2
 8011d78:	673b      	str	r3, [r7, #112]	; 0x70
 8011d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	00da      	lsls	r2, r3, #3
 8011d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d8a:	4413      	add	r3, r2
 8011d8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	895b      	ldrh	r3, [r3, #10]
 8011da8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	6959      	ldr	r1, [r3, #20]
 8011db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011dc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011dc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	f000 fed7 	bl	8012b7e <USB_WritePMA>
 8011dd0:	e0c0      	b.n	8011f54 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	785b      	ldrb	r3, [r3, #1]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d16d      	bne.n	8011ebe <USB_EPStartXfer+0xc20>
 8011de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	461a      	mov	r2, r3
 8011e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e02:	4413      	add	r3, r2
 8011e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	00da      	lsls	r2, r3, #3
 8011e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e16:	4413      	add	r3, r2
 8011e18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e22:	2b3e      	cmp	r3, #62	; 0x3e
 8011e24:	d91c      	bls.n	8011e60 <USB_EPStartXfer+0xbc2>
 8011e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e2a:	095b      	lsrs	r3, r3, #5
 8011e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e34:	f003 031f 	and.w	r3, r3, #31
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d104      	bne.n	8011e46 <USB_EPStartXfer+0xba8>
 8011e3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e40:	3b01      	subs	r3, #1
 8011e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	029b      	lsls	r3, r3, #10
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e5c:	801a      	strh	r2, [r3, #0]
 8011e5e:	e05f      	b.n	8011f20 <USB_EPStartXfer+0xc82>
 8011e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d112      	bne.n	8011e8e <USB_EPStartXfer+0xbf0>
 8011e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e76:	801a      	strh	r2, [r3, #0]
 8011e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e7a:	881b      	ldrh	r3, [r3, #0]
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e8a:	801a      	strh	r2, [r3, #0]
 8011e8c:	e048      	b.n	8011f20 <USB_EPStartXfer+0xc82>
 8011e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e92:	085b      	lsrs	r3, r3, #1
 8011e94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d004      	beq.n	8011eae <USB_EPStartXfer+0xc10>
 8011ea4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011eae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	029b      	lsls	r3, r3, #10
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011eba:	801a      	strh	r2, [r3, #0]
 8011ebc:	e030      	b.n	8011f20 <USB_EPStartXfer+0xc82>
 8011ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	785b      	ldrb	r3, [r3, #1]
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d128      	bne.n	8011f20 <USB_EPStartXfer+0xc82>
 8011ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	461a      	mov	r2, r3
 8011eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	00da      	lsls	r2, r3, #3
 8011f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f0a:	4413      	add	r3, r2
 8011f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	891b      	ldrh	r3, [r3, #8]
 8011f2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	6959      	ldr	r1, [r3, #20]
 8011f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011f4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011f4e:	6800      	ldr	r0, [r0, #0]
 8011f50:	f000 fe15 	bl	8012b7e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4413      	add	r3, r2
 8011f6e:	881b      	ldrh	r3, [r3, #0]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f7a:	817b      	strh	r3, [r7, #10]
 8011f7c:	897b      	ldrh	r3, [r7, #10]
 8011f7e:	f083 0310 	eor.w	r3, r3, #16
 8011f82:	817b      	strh	r3, [r7, #10]
 8011f84:	897b      	ldrh	r3, [r7, #10]
 8011f86:	f083 0320 	eor.w	r3, r3, #32
 8011f8a:	817b      	strh	r3, [r7, #10]
 8011f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	441a      	add	r2, r3
 8011fa6:	897b      	ldrh	r3, [r7, #10]
 8011fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	8013      	strh	r3, [r2, #0]
 8011fbc:	f000 bc9f 	b.w	80128fe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	7b1b      	ldrb	r3, [r3, #12]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	f040 80ae 	bne.w	801212e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	699a      	ldr	r2, [r3, #24]
 8011fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d917      	bls.n	801201e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8011fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	691b      	ldr	r3, [r3, #16]
 8011ffa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	699a      	ldr	r2, [r3, #24]
 801200a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801200e:	1ad2      	subs	r2, r2, r3
 8012010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	619a      	str	r2, [r3, #24]
 801201c:	e00e      	b.n	801203c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 801201e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	699b      	ldr	r3, [r3, #24]
 801202a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801202e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2200      	movs	r2, #0
 801203a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801203c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801204a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012058:	b29b      	uxth	r3, r3
 801205a:	461a      	mov	r2, r3
 801205c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012060:	4413      	add	r3, r2
 8012062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801206a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	00da      	lsls	r2, r3, #3
 8012074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012078:	4413      	add	r3, r2
 801207a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801207e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012086:	2b3e      	cmp	r3, #62	; 0x3e
 8012088:	d91d      	bls.n	80120c6 <USB_EPStartXfer+0xe28>
 801208a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801208e:	095b      	lsrs	r3, r3, #5
 8012090:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012098:	f003 031f 	and.w	r3, r3, #31
 801209c:	2b00      	cmp	r3, #0
 801209e:	d104      	bne.n	80120aa <USB_EPStartXfer+0xe0c>
 80120a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80120a4:	3b01      	subs	r3, #1
 80120a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	029b      	lsls	r3, r3, #10
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120bc:	b29a      	uxth	r2, r3
 80120be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120c2:	801a      	strh	r2, [r3, #0]
 80120c4:	e3e1      	b.n	801288a <USB_EPStartXfer+0x15ec>
 80120c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d116      	bne.n	80120fc <USB_EPStartXfer+0xe5e>
 80120ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80120da:	b29a      	uxth	r2, r3
 80120dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120e0:	801a      	strh	r2, [r3, #0]
 80120e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120f8:	801a      	strh	r2, [r3, #0]
 80120fa:	e3c6      	b.n	801288a <USB_EPStartXfer+0x15ec>
 80120fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012100:	085b      	lsrs	r3, r3, #1
 8012102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801210a:	f003 0301 	and.w	r3, r3, #1
 801210e:	2b00      	cmp	r3, #0
 8012110:	d004      	beq.n	801211c <USB_EPStartXfer+0xe7e>
 8012112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012116:	3301      	adds	r3, #1
 8012118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801211c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012120:	b29b      	uxth	r3, r3
 8012122:	029b      	lsls	r3, r3, #10
 8012124:	b29a      	uxth	r2, r3
 8012126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801212a:	801a      	strh	r2, [r3, #0]
 801212c:	e3ad      	b.n	801288a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801212e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	78db      	ldrb	r3, [r3, #3]
 801213a:	2b02      	cmp	r3, #2
 801213c:	f040 8200 	bne.w	8012540 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	785b      	ldrb	r3, [r3, #1]
 801214c:	2b00      	cmp	r3, #0
 801214e:	f040 8091 	bne.w	8012274 <USB_EPStartXfer+0xfd6>
 8012152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801216e:	b29b      	uxth	r3, r3
 8012170:	461a      	mov	r2, r3
 8012172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012176:	4413      	add	r3, r2
 8012178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801217c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	00da      	lsls	r2, r3, #3
 801218a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801218e:	4413      	add	r3, r2
 8012190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801219c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	691b      	ldr	r3, [r3, #16]
 80121a4:	2b3e      	cmp	r3, #62	; 0x3e
 80121a6:	d925      	bls.n	80121f4 <USB_EPStartXfer+0xf56>
 80121a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	095b      	lsrs	r3, r3, #5
 80121b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80121ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	691b      	ldr	r3, [r3, #16]
 80121c6:	f003 031f 	and.w	r3, r3, #31
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d104      	bne.n	80121d8 <USB_EPStartXfer+0xf3a>
 80121ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121d2:	3b01      	subs	r3, #1
 80121d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80121d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121dc:	b29b      	uxth	r3, r3
 80121de:	029b      	lsls	r3, r3, #10
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121f0:	801a      	strh	r2, [r3, #0]
 80121f2:	e074      	b.n	80122de <USB_EPStartXfer+0x1040>
 80121f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	691b      	ldr	r3, [r3, #16]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d116      	bne.n	8012232 <USB_EPStartXfer+0xf94>
 8012204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	b29b      	uxth	r3, r3
 801220c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012210:	b29a      	uxth	r2, r3
 8012212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012216:	801a      	strh	r2, [r3, #0]
 8012218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	b29b      	uxth	r3, r3
 8012220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012228:	b29a      	uxth	r2, r3
 801222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801222e:	801a      	strh	r2, [r3, #0]
 8012230:	e055      	b.n	80122de <USB_EPStartXfer+0x1040>
 8012232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	691b      	ldr	r3, [r3, #16]
 801223e:	085b      	lsrs	r3, r3, #1
 8012240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	691b      	ldr	r3, [r3, #16]
 8012250:	f003 0301 	and.w	r3, r3, #1
 8012254:	2b00      	cmp	r3, #0
 8012256:	d004      	beq.n	8012262 <USB_EPStartXfer+0xfc4>
 8012258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801225c:	3301      	adds	r3, #1
 801225e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012266:	b29b      	uxth	r3, r3
 8012268:	029b      	lsls	r3, r3, #10
 801226a:	b29a      	uxth	r2, r3
 801226c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012270:	801a      	strh	r2, [r3, #0]
 8012272:	e034      	b.n	80122de <USB_EPStartXfer+0x1040>
 8012274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	785b      	ldrb	r3, [r3, #1]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d12c      	bne.n	80122de <USB_EPStartXfer+0x1040>
 8012284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	461a      	mov	r2, r3
 80122a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122a8:	4413      	add	r3, r2
 80122aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80122ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	00da      	lsls	r2, r3, #3
 80122bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122c0:	4413      	add	r3, r2
 80122c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80122c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80122ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	691b      	ldr	r3, [r3, #16]
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80122dc:	801a      	strh	r2, [r3, #0]
 80122de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80122ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	785b      	ldrb	r3, [r3, #1]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f040 8091 	bne.w	8012420 <USB_EPStartXfer+0x1182>
 80122fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801230c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801231a:	b29b      	uxth	r3, r3
 801231c:	461a      	mov	r2, r3
 801231e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012322:	4413      	add	r3, r2
 8012324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	00da      	lsls	r2, r3, #3
 8012336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801233a:	4413      	add	r3, r2
 801233c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	691b      	ldr	r3, [r3, #16]
 8012350:	2b3e      	cmp	r3, #62	; 0x3e
 8012352:	d925      	bls.n	80123a0 <USB_EPStartXfer+0x1102>
 8012354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	691b      	ldr	r3, [r3, #16]
 8012360:	095b      	lsrs	r3, r3, #5
 8012362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801236a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	691b      	ldr	r3, [r3, #16]
 8012372:	f003 031f 	and.w	r3, r3, #31
 8012376:	2b00      	cmp	r3, #0
 8012378:	d104      	bne.n	8012384 <USB_EPStartXfer+0x10e6>
 801237a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801237e:	3b01      	subs	r3, #1
 8012380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012388:	b29b      	uxth	r3, r3
 801238a:	029b      	lsls	r3, r3, #10
 801238c:	b29b      	uxth	r3, r3
 801238e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012396:	b29a      	uxth	r2, r3
 8012398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801239c:	801a      	strh	r2, [r3, #0]
 801239e:	e06d      	b.n	801247c <USB_EPStartXfer+0x11de>
 80123a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d116      	bne.n	80123de <USB_EPStartXfer+0x1140>
 80123b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80123bc:	b29a      	uxth	r2, r3
 80123be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123c2:	801a      	strh	r2, [r3, #0]
 80123c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123c8:	881b      	ldrh	r3, [r3, #0]
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123da:	801a      	strh	r2, [r3, #0]
 80123dc:	e04e      	b.n	801247c <USB_EPStartXfer+0x11de>
 80123de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	691b      	ldr	r3, [r3, #16]
 80123ea:	085b      	lsrs	r3, r3, #1
 80123ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80123f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	691b      	ldr	r3, [r3, #16]
 80123fc:	f003 0301 	and.w	r3, r3, #1
 8012400:	2b00      	cmp	r3, #0
 8012402:	d004      	beq.n	801240e <USB_EPStartXfer+0x1170>
 8012404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012408:	3301      	adds	r3, #1
 801240a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801240e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012412:	b29b      	uxth	r3, r3
 8012414:	029b      	lsls	r3, r3, #10
 8012416:	b29a      	uxth	r2, r3
 8012418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801241c:	801a      	strh	r2, [r3, #0]
 801241e:	e02d      	b.n	801247c <USB_EPStartXfer+0x11de>
 8012420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	785b      	ldrb	r3, [r3, #1]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d125      	bne.n	801247c <USB_EPStartXfer+0x11de>
 8012430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801243e:	b29b      	uxth	r3, r3
 8012440:	461a      	mov	r2, r3
 8012442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012446:	4413      	add	r3, r2
 8012448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801244c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	00da      	lsls	r2, r3, #3
 801245a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801245e:	4413      	add	r3, r2
 8012460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801246c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	b29a      	uxth	r2, r3
 8012476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801247a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801247c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	69db      	ldr	r3, [r3, #28]
 8012488:	2b00      	cmp	r3, #0
 801248a:	f000 81fe 	beq.w	801288a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801248e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801249c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	4413      	add	r3, r2
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80124ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d005      	beq.n	80124c6 <USB_EPStartXfer+0x1228>
 80124ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10d      	bne.n	80124e2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80124c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f040 81db 	bne.w	801288a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80124d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 81d4 	bne.w	801288a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80124e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4413      	add	r3, r2
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	b29b      	uxth	r3, r3
 8012500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012508:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801250c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801251a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	441a      	add	r2, r3
 8012526:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801252a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801252e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801253a:	b29b      	uxth	r3, r3
 801253c:	8013      	strh	r3, [r2, #0]
 801253e:	e1a4      	b.n	801288a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	78db      	ldrb	r3, [r3, #3]
 801254c:	2b01      	cmp	r3, #1
 801254e:	f040 819a 	bne.w	8012886 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	699a      	ldr	r2, [r3, #24]
 801255e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	691b      	ldr	r3, [r3, #16]
 801256a:	429a      	cmp	r2, r3
 801256c:	d917      	bls.n	801259e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 801256e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 801257e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	699a      	ldr	r2, [r3, #24]
 801258a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801258e:	1ad2      	subs	r2, r2, r3
 8012590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	619a      	str	r2, [r3, #24]
 801259c:	e00e      	b.n	80125bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 801259e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	699b      	ldr	r3, [r3, #24]
 80125aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80125ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2200      	movs	r2, #0
 80125ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80125bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	785b      	ldrb	r3, [r3, #1]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d178      	bne.n	80126be <USB_EPStartXfer+0x1420>
 80125cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80125da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	461a      	mov	r2, r3
 80125ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80125f0:	4413      	add	r3, r2
 80125f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80125f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	00da      	lsls	r2, r3, #3
 8012604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012608:	4413      	add	r3, r2
 801260a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801260e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012616:	2b3e      	cmp	r3, #62	; 0x3e
 8012618:	d91d      	bls.n	8012656 <USB_EPStartXfer+0x13b8>
 801261a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801261e:	095b      	lsrs	r3, r3, #5
 8012620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012628:	f003 031f 	and.w	r3, r3, #31
 801262c:	2b00      	cmp	r3, #0
 801262e:	d104      	bne.n	801263a <USB_EPStartXfer+0x139c>
 8012630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012634:	3b01      	subs	r3, #1
 8012636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801263a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801263e:	b29b      	uxth	r3, r3
 8012640:	029b      	lsls	r3, r3, #10
 8012642:	b29b      	uxth	r3, r3
 8012644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801264c:	b29a      	uxth	r2, r3
 801264e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012652:	801a      	strh	r2, [r3, #0]
 8012654:	e064      	b.n	8012720 <USB_EPStartXfer+0x1482>
 8012656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801265a:	2b00      	cmp	r3, #0
 801265c:	d116      	bne.n	801268c <USB_EPStartXfer+0x13ee>
 801265e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012662:	881b      	ldrh	r3, [r3, #0]
 8012664:	b29b      	uxth	r3, r3
 8012666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801266a:	b29a      	uxth	r2, r3
 801266c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012670:	801a      	strh	r2, [r3, #0]
 8012672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012676:	881b      	ldrh	r3, [r3, #0]
 8012678:	b29b      	uxth	r3, r3
 801267a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012682:	b29a      	uxth	r2, r3
 8012684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012688:	801a      	strh	r2, [r3, #0]
 801268a:	e049      	b.n	8012720 <USB_EPStartXfer+0x1482>
 801268c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012690:	085b      	lsrs	r3, r3, #1
 8012692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d004      	beq.n	80126ac <USB_EPStartXfer+0x140e>
 80126a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126a6:	3301      	adds	r3, #1
 80126a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80126ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	029b      	lsls	r3, r3, #10
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80126ba:	801a      	strh	r2, [r3, #0]
 80126bc:	e030      	b.n	8012720 <USB_EPStartXfer+0x1482>
 80126be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	785b      	ldrb	r3, [r3, #1]
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d128      	bne.n	8012720 <USB_EPStartXfer+0x1482>
 80126ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80126dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	461a      	mov	r2, r3
 80126ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80126f2:	4413      	add	r3, r2
 80126f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80126f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	00da      	lsls	r2, r3, #3
 8012706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801270a:	4413      	add	r3, r2
 801270c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012718:	b29a      	uxth	r2, r3
 801271a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801271e:	801a      	strh	r2, [r3, #0]
 8012720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801272e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	785b      	ldrb	r3, [r3, #1]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d178      	bne.n	8012830 <USB_EPStartXfer+0x1592>
 801273e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801274c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801275a:	b29b      	uxth	r3, r3
 801275c:	461a      	mov	r2, r3
 801275e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012762:	4413      	add	r3, r2
 8012764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801276c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	00da      	lsls	r2, r3, #3
 8012776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801277a:	4413      	add	r3, r2
 801277c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012788:	2b3e      	cmp	r3, #62	; 0x3e
 801278a:	d91d      	bls.n	80127c8 <USB_EPStartXfer+0x152a>
 801278c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012790:	095b      	lsrs	r3, r3, #5
 8012792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801279a:	f003 031f 	and.w	r3, r3, #31
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d104      	bne.n	80127ac <USB_EPStartXfer+0x150e>
 80127a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80127a6:	3b01      	subs	r3, #1
 80127a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80127ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	029b      	lsls	r3, r3, #10
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127be:	b29a      	uxth	r2, r3
 80127c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127c4:	801a      	strh	r2, [r3, #0]
 80127c6:	e060      	b.n	801288a <USB_EPStartXfer+0x15ec>
 80127c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d116      	bne.n	80127fe <USB_EPStartXfer+0x1560>
 80127d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127d4:	881b      	ldrh	r3, [r3, #0]
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80127dc:	b29a      	uxth	r2, r3
 80127de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127e2:	801a      	strh	r2, [r3, #0]
 80127e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127e8:	881b      	ldrh	r3, [r3, #0]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127fa:	801a      	strh	r2, [r3, #0]
 80127fc:	e045      	b.n	801288a <USB_EPStartXfer+0x15ec>
 80127fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012802:	085b      	lsrs	r3, r3, #1
 8012804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801280c:	f003 0301 	and.w	r3, r3, #1
 8012810:	2b00      	cmp	r3, #0
 8012812:	d004      	beq.n	801281e <USB_EPStartXfer+0x1580>
 8012814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012818:	3301      	adds	r3, #1
 801281a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801281e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012822:	b29b      	uxth	r3, r3
 8012824:	029b      	lsls	r3, r3, #10
 8012826:	b29a      	uxth	r2, r3
 8012828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801282c:	801a      	strh	r2, [r3, #0]
 801282e:	e02c      	b.n	801288a <USB_EPStartXfer+0x15ec>
 8012830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	785b      	ldrb	r3, [r3, #1]
 801283c:	2b01      	cmp	r3, #1
 801283e:	d124      	bne.n	801288a <USB_EPStartXfer+0x15ec>
 8012840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801284e:	b29b      	uxth	r3, r3
 8012850:	461a      	mov	r2, r3
 8012852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012856:	4413      	add	r3, r2
 8012858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801285c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	00da      	lsls	r2, r3, #3
 801286a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801286e:	4413      	add	r3, r2
 8012870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801287c:	b29a      	uxth	r2, r3
 801287e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012882:	801a      	strh	r2, [r3, #0]
 8012884:	e001      	b.n	801288a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8012886:	2301      	movs	r3, #1
 8012888:	e03a      	b.n	8012900 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801288a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4413      	add	r3, r2
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80128bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80128c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	441a      	add	r2, r3
 80128e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	4618      	mov	r0, r3
 8012902:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801290a:	b480      	push	{r7}
 801290c:	b085      	sub	sp, #20
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
 8012912:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	785b      	ldrb	r3, [r3, #1]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d020      	beq.n	801295e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	4413      	add	r3, r2
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	b29b      	uxth	r3, r3
 801292a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801292e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012932:	81bb      	strh	r3, [r7, #12]
 8012934:	89bb      	ldrh	r3, [r7, #12]
 8012936:	f083 0310 	eor.w	r3, r3, #16
 801293a:	81bb      	strh	r3, [r7, #12]
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	441a      	add	r2, r3
 8012946:	89bb      	ldrh	r3, [r7, #12]
 8012948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801294c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012958:	b29b      	uxth	r3, r3
 801295a:	8013      	strh	r3, [r2, #0]
 801295c:	e01f      	b.n	801299e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	4413      	add	r3, r2
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	b29b      	uxth	r3, r3
 801296c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012974:	81fb      	strh	r3, [r7, #14]
 8012976:	89fb      	ldrh	r3, [r7, #14]
 8012978:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801297c:	81fb      	strh	r3, [r7, #14]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	441a      	add	r2, r3
 8012988:	89fb      	ldrh	r3, [r7, #14]
 801298a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801298e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801299a:	b29b      	uxth	r3, r3
 801299c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3714      	adds	r7, #20
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b087      	sub	sp, #28
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	7b1b      	ldrb	r3, [r3, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f040 809d 	bne.w	8012afa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	785b      	ldrb	r3, [r3, #1]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d04c      	beq.n	8012a62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	009b      	lsls	r3, r3, #2
 80129d0:	4413      	add	r3, r2
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	823b      	strh	r3, [r7, #16]
 80129d6:	8a3b      	ldrh	r3, [r7, #16]
 80129d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d01b      	beq.n	8012a18 <USB_EPClearStall+0x6c>
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	881b      	ldrh	r3, [r3, #0]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129f6:	81fb      	strh	r3, [r7, #14]
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	441a      	add	r2, r3
 8012a02:	89fb      	ldrh	r3, [r7, #14]
 8012a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	78db      	ldrb	r3, [r3, #3]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d06c      	beq.n	8012afa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	4413      	add	r3, r2
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a36:	81bb      	strh	r3, [r7, #12]
 8012a38:	89bb      	ldrh	r3, [r7, #12]
 8012a3a:	f083 0320 	eor.w	r3, r3, #32
 8012a3e:	81bb      	strh	r3, [r7, #12]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	441a      	add	r2, r3
 8012a4a:	89bb      	ldrh	r3, [r7, #12]
 8012a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	8013      	strh	r3, [r2, #0]
 8012a60:	e04b      	b.n	8012afa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4413      	add	r3, r2
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	82fb      	strh	r3, [r7, #22]
 8012a70:	8afb      	ldrh	r3, [r7, #22]
 8012a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d01b      	beq.n	8012ab2 <USB_EPClearStall+0x106>
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	4413      	add	r3, r2
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a90:	82bb      	strh	r3, [r7, #20]
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	441a      	add	r2, r3
 8012a9c:	8abb      	ldrh	r3, [r7, #20]
 8012a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	4413      	add	r3, r2
 8012abc:	881b      	ldrh	r3, [r3, #0]
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ac8:	827b      	strh	r3, [r7, #18]
 8012aca:	8a7b      	ldrh	r3, [r7, #18]
 8012acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012ad0:	827b      	strh	r3, [r7, #18]
 8012ad2:	8a7b      	ldrh	r3, [r7, #18]
 8012ad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012ad8:	827b      	strh	r3, [r7, #18]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	441a      	add	r2, r3
 8012ae4:	8a7b      	ldrh	r3, [r7, #18]
 8012ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	371c      	adds	r7, #28
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012b14:	78fb      	ldrb	r3, [r7, #3]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d103      	bne.n	8012b22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2280      	movs	r2, #128	; 0x80
 8012b1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	370c      	adds	r7, #12
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	4770      	bx	lr

08012b30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012b50:	2300      	movs	r3, #0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	370c      	adds	r7, #12
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr

08012b5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b085      	sub	sp, #20
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012b70:	68fb      	ldr	r3, [r7, #12]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3714      	adds	r7, #20
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012b7e:	b480      	push	{r7}
 8012b80:	b08d      	sub	sp, #52	; 0x34
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	4611      	mov	r1, r2
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	80fb      	strh	r3, [r7, #6]
 8012b90:	4613      	mov	r3, r2
 8012b92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012b94:	88bb      	ldrh	r3, [r7, #4]
 8012b96:	3301      	adds	r3, #1
 8012b98:	085b      	lsrs	r3, r3, #1
 8012b9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ba4:	88fa      	ldrh	r2, [r7, #6]
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	4413      	add	r3, r2
 8012baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bb4:	e01b      	b.n	8012bee <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8012bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8012bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	021b      	lsls	r3, r3, #8
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	461a      	mov	r2, r3
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bda:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bde:	3302      	adds	r3, #2
 8012be0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	3301      	adds	r3, #1
 8012be6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8012be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bea:	3b01      	subs	r3, #1
 8012bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d1e0      	bne.n	8012bb6 <USB_WritePMA+0x38>
  }
}
 8012bf4:	bf00      	nop
 8012bf6:	bf00      	nop
 8012bf8:	3734      	adds	r7, #52	; 0x34
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr

08012c02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012c02:	b480      	push	{r7}
 8012c04:	b08b      	sub	sp, #44	; 0x2c
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	60f8      	str	r0, [r7, #12]
 8012c0a:	60b9      	str	r1, [r7, #8]
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	461a      	mov	r2, r3
 8012c10:	460b      	mov	r3, r1
 8012c12:	80fb      	strh	r3, [r7, #6]
 8012c14:	4613      	mov	r3, r2
 8012c16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012c18:	88bb      	ldrh	r3, [r7, #4]
 8012c1a:	085b      	lsrs	r3, r3, #1
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012c28:	88fa      	ldrh	r2, [r7, #6]
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c32:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	627b      	str	r3, [r7, #36]	; 0x24
 8012c38:	e018      	b.n	8012c6c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8012c3a:	6a3b      	ldr	r3, [r7, #32]
 8012c3c:	881b      	ldrh	r3, [r3, #0]
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	3302      	adds	r3, #2
 8012c46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	b2da      	uxtb	r2, r3
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	3301      	adds	r3, #1
 8012c54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	0a1b      	lsrs	r3, r3, #8
 8012c5a:	b2da      	uxtb	r2, r3
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	3301      	adds	r3, #1
 8012c64:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8012c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d1e3      	bne.n	8012c3a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012c72:	88bb      	ldrh	r3, [r7, #4]
 8012c74:	f003 0301 	and.w	r3, r3, #1
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d007      	beq.n	8012c8e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	881b      	ldrh	r3, [r3, #0]
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	b2da      	uxtb	r2, r3
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	701a      	strb	r2, [r3, #0]
  }
}
 8012c8e:	bf00      	nop
 8012c90:	372c      	adds	r7, #44	; 0x2c
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b084      	sub	sp, #16
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012ca6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012caa:	f002 f931 	bl	8014f10 <USBD_static_malloc>
 8012cae:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d105      	bne.n	8012cc2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012cbe:	2302      	movs	r3, #2
 8012cc0:	e066      	b.n	8012d90 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	7c1b      	ldrb	r3, [r3, #16]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d119      	bne.n	8012d06 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cd6:	2202      	movs	r2, #2
 8012cd8:	2181      	movs	r1, #129	; 0x81
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f001 ffbd 	bl	8014c5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cea:	2202      	movs	r2, #2
 8012cec:	2101      	movs	r1, #1
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f001 ffb3 	bl	8014c5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2210      	movs	r2, #16
 8012d00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012d04:	e016      	b.n	8012d34 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012d06:	2340      	movs	r3, #64	; 0x40
 8012d08:	2202      	movs	r2, #2
 8012d0a:	2181      	movs	r1, #129	; 0x81
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f001 ffa4 	bl	8014c5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2201      	movs	r2, #1
 8012d16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012d18:	2340      	movs	r3, #64	; 0x40
 8012d1a:	2202      	movs	r2, #2
 8012d1c:	2101      	movs	r1, #1
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f001 ff9b 	bl	8014c5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2210      	movs	r2, #16
 8012d30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012d34:	2308      	movs	r3, #8
 8012d36:	2203      	movs	r2, #3
 8012d38:	2182      	movs	r1, #130	; 0x82
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f001 ff8d 	bl	8014c5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2201      	movs	r2, #1
 8012d44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2200      	movs	r2, #0
 8012d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7c1b      	ldrb	r3, [r3, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d109      	bne.n	8012d7e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d74:	2101      	movs	r1, #1
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f002 f85f 	bl	8014e3a <USBD_LL_PrepareReceive>
 8012d7c:	e007      	b.n	8012d8e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d84:	2340      	movs	r3, #64	; 0x40
 8012d86:	2101      	movs	r1, #1
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f002 f856 	bl	8014e3a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	460b      	mov	r3, r1
 8012da2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012da4:	2181      	movs	r1, #129	; 0x81
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f001 ff7d 	bl	8014ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012db2:	2101      	movs	r1, #1
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f001 ff76 	bl	8014ca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012dc2:	2182      	movs	r1, #130	; 0x82
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f001 ff6e 	bl	8014ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00e      	beq.n	8012e02 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012df4:	4618      	mov	r0, r3
 8012df6:	f002 f899 	bl	8014f2c <USBD_static_free>
    pdev->pClassData = NULL;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e02:	2300      	movs	r3, #0
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b086      	sub	sp, #24
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e22:	2300      	movs	r3, #0
 8012e24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e26:	2300      	movs	r3, #0
 8012e28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d101      	bne.n	8012e34 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012e30:	2303      	movs	r3, #3
 8012e32:	e0af      	b.n	8012f94 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d03f      	beq.n	8012ec0 <USBD_CDC_Setup+0xb4>
 8012e40:	2b20      	cmp	r3, #32
 8012e42:	f040 809f 	bne.w	8012f84 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	88db      	ldrh	r3, [r3, #6]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d02e      	beq.n	8012eac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	b25b      	sxtb	r3, r3
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	da16      	bge.n	8012e86 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e5e:	689b      	ldr	r3, [r3, #8]
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012e64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e66:	683a      	ldr	r2, [r7, #0]
 8012e68:	88d2      	ldrh	r2, [r2, #6]
 8012e6a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	88db      	ldrh	r3, [r3, #6]
 8012e70:	2b07      	cmp	r3, #7
 8012e72:	bf28      	it	cs
 8012e74:	2307      	movcs	r3, #7
 8012e76:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	89fa      	ldrh	r2, [r7, #14]
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f001 facf 	bl	8014422 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012e84:	e085      	b.n	8012f92 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	785a      	ldrb	r2, [r3, #1]
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	88db      	ldrh	r3, [r3, #6]
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012e9c:	6939      	ldr	r1, [r7, #16]
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	88db      	ldrh	r3, [r3, #6]
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f001 fae8 	bl	801447a <USBD_CtlPrepareRx>
      break;
 8012eaa:	e072      	b.n	8012f92 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	683a      	ldr	r2, [r7, #0]
 8012eb6:	7850      	ldrb	r0, [r2, #1]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	4798      	blx	r3
      break;
 8012ebe:	e068      	b.n	8012f92 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	785b      	ldrb	r3, [r3, #1]
 8012ec4:	2b0b      	cmp	r3, #11
 8012ec6:	d852      	bhi.n	8012f6e <USBD_CDC_Setup+0x162>
 8012ec8:	a201      	add	r2, pc, #4	; (adr r2, 8012ed0 <USBD_CDC_Setup+0xc4>)
 8012eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ece:	bf00      	nop
 8012ed0:	08012f01 	.word	0x08012f01
 8012ed4:	08012f7d 	.word	0x08012f7d
 8012ed8:	08012f6f 	.word	0x08012f6f
 8012edc:	08012f6f 	.word	0x08012f6f
 8012ee0:	08012f6f 	.word	0x08012f6f
 8012ee4:	08012f6f 	.word	0x08012f6f
 8012ee8:	08012f6f 	.word	0x08012f6f
 8012eec:	08012f6f 	.word	0x08012f6f
 8012ef0:	08012f6f 	.word	0x08012f6f
 8012ef4:	08012f6f 	.word	0x08012f6f
 8012ef8:	08012f2b 	.word	0x08012f2b
 8012efc:	08012f55 	.word	0x08012f55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b03      	cmp	r3, #3
 8012f0a:	d107      	bne.n	8012f1c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f0c:	f107 030a 	add.w	r3, r7, #10
 8012f10:	2202      	movs	r2, #2
 8012f12:	4619      	mov	r1, r3
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f001 fa84 	bl	8014422 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f1a:	e032      	b.n	8012f82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f001 fa0e 	bl	8014340 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f24:	2303      	movs	r3, #3
 8012f26:	75fb      	strb	r3, [r7, #23]
          break;
 8012f28:	e02b      	b.n	8012f82 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	2b03      	cmp	r3, #3
 8012f34:	d107      	bne.n	8012f46 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f36:	f107 030d 	add.w	r3, r7, #13
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f001 fa6f 	bl	8014422 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f44:	e01d      	b.n	8012f82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f46:	6839      	ldr	r1, [r7, #0]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f001 f9f9 	bl	8014340 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f4e:	2303      	movs	r3, #3
 8012f50:	75fb      	strb	r3, [r7, #23]
          break;
 8012f52:	e016      	b.n	8012f82 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	2b03      	cmp	r3, #3
 8012f5e:	d00f      	beq.n	8012f80 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012f60:	6839      	ldr	r1, [r7, #0]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f001 f9ec 	bl	8014340 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f68:	2303      	movs	r3, #3
 8012f6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f6c:	e008      	b.n	8012f80 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f6e:	6839      	ldr	r1, [r7, #0]
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f001 f9e5 	bl	8014340 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f76:	2303      	movs	r3, #3
 8012f78:	75fb      	strb	r3, [r7, #23]
          break;
 8012f7a:	e002      	b.n	8012f82 <USBD_CDC_Setup+0x176>
          break;
 8012f7c:	bf00      	nop
 8012f7e:	e008      	b.n	8012f92 <USBD_CDC_Setup+0x186>
          break;
 8012f80:	bf00      	nop
      }
      break;
 8012f82:	e006      	b.n	8012f92 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f001 f9da 	bl	8014340 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f8c:	2303      	movs	r3, #3
 8012f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8012f90:	bf00      	nop
  }

  return (uint8_t)ret;
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3718      	adds	r7, #24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012fae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d101      	bne.n	8012fbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	e04f      	b.n	801305e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012fc6:	78fa      	ldrb	r2, [r7, #3]
 8012fc8:	6879      	ldr	r1, [r7, #4]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4413      	add	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	440b      	add	r3, r1
 8012fd4:	3318      	adds	r3, #24
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d029      	beq.n	8013030 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012fdc:	78fa      	ldrb	r2, [r7, #3]
 8012fde:	6879      	ldr	r1, [r7, #4]
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	4413      	add	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	440b      	add	r3, r1
 8012fea:	3318      	adds	r3, #24
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	78f9      	ldrb	r1, [r7, #3]
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	440b      	add	r3, r1
 8012ff8:	00db      	lsls	r3, r3, #3
 8012ffa:	4403      	add	r3, r0
 8012ffc:	3338      	adds	r3, #56	; 0x38
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	fbb2 f1f3 	udiv	r1, r2, r3
 8013004:	fb01 f303 	mul.w	r3, r1, r3
 8013008:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801300a:	2b00      	cmp	r3, #0
 801300c:	d110      	bne.n	8013030 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801300e:	78fa      	ldrb	r2, [r7, #3]
 8013010:	6879      	ldr	r1, [r7, #4]
 8013012:	4613      	mov	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4413      	add	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	440b      	add	r3, r1
 801301c:	3318      	adds	r3, #24
 801301e:	2200      	movs	r2, #0
 8013020:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013022:	78f9      	ldrb	r1, [r7, #3]
 8013024:	2300      	movs	r3, #0
 8013026:	2200      	movs	r2, #0
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f001 fee5 	bl	8014df8 <USBD_LL_Transmit>
 801302e:	e015      	b.n	801305c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	2200      	movs	r2, #0
 8013034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00b      	beq.n	801305c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	68ba      	ldr	r2, [r7, #8]
 801304e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013052:	68ba      	ldr	r2, [r7, #8]
 8013054:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013058:	78fa      	ldrb	r2, [r7, #3]
 801305a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}

08013066 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013066:	b580      	push	{r7, lr}
 8013068:	b084      	sub	sp, #16
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
 801306e:	460b      	mov	r3, r1
 8013070:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013084:	2303      	movs	r3, #3
 8013086:	e015      	b.n	80130b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013088:	78fb      	ldrb	r3, [r7, #3]
 801308a:	4619      	mov	r1, r3
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f001 fef5 	bl	8014e7c <USBD_LL_GetRxDataSize>
 8013092:	4602      	mov	r2, r0
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130a0:	68db      	ldr	r3, [r3, #12]
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80130ae:	4611      	mov	r1, r2
 80130b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3710      	adds	r7, #16
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d101      	bne.n	80130d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80130d2:	2303      	movs	r3, #3
 80130d4:	e01b      	b.n	801310e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d015      	beq.n	801310c <USBD_CDC_EP0_RxReady+0x50>
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80130e6:	2bff      	cmp	r3, #255	; 0xff
 80130e8:	d010      	beq.n	801310c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80130f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80130fa:	68fa      	ldr	r2, [r7, #12]
 80130fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013100:	b292      	uxth	r2, r2
 8013102:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	22ff      	movs	r2, #255	; 0xff
 8013108:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801310c:	2300      	movs	r3, #0
}
 801310e:	4618      	mov	r0, r3
 8013110:	3710      	adds	r7, #16
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
	...

08013118 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2243      	movs	r2, #67	; 0x43
 8013124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013126:	4b03      	ldr	r3, [pc, #12]	; (8013134 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr
 8013134:	20000094 	.word	0x20000094

08013138 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2243      	movs	r2, #67	; 0x43
 8013144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013146:	4b03      	ldr	r3, [pc, #12]	; (8013154 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013148:	4618      	mov	r0, r3
 801314a:	370c      	adds	r7, #12
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr
 8013154:	20000050 	.word	0x20000050

08013158 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013158:	b480      	push	{r7}
 801315a:	b083      	sub	sp, #12
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2243      	movs	r2, #67	; 0x43
 8013164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013166:	4b03      	ldr	r3, [pc, #12]	; (8013174 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013168:	4618      	mov	r0, r3
 801316a:	370c      	adds	r7, #12
 801316c:	46bd      	mov	sp, r7
 801316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013172:	4770      	bx	lr
 8013174:	200000d8 	.word	0x200000d8

08013178 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013178:	b480      	push	{r7}
 801317a:	b083      	sub	sp, #12
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	220a      	movs	r2, #10
 8013184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013186:	4b03      	ldr	r3, [pc, #12]	; (8013194 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013188:	4618      	mov	r0, r3
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	2000000c 	.word	0x2000000c

08013198 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d101      	bne.n	80131ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80131a8:	2303      	movs	r3, #3
 80131aa:	e004      	b.n	80131b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	683a      	ldr	r2, [r7, #0]
 80131b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80131b4:	2300      	movs	r3, #0
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	370c      	adds	r7, #12
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80131c2:	b480      	push	{r7}
 80131c4:	b087      	sub	sp, #28
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	60f8      	str	r0, [r7, #12]
 80131ca:	60b9      	str	r1, [r7, #8]
 80131cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80131dc:	2303      	movs	r3, #3
 80131de:	e008      	b.n	80131f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	68ba      	ldr	r2, [r7, #8]
 80131e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	371c      	adds	r7, #28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr

080131fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80131fe:	b480      	push	{r7}
 8013200:	b085      	sub	sp, #20
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
 8013206:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801320e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013216:	2303      	movs	r3, #3
 8013218:	e004      	b.n	8013224 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	683a      	ldr	r2, [r7, #0]
 801321e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013222:	2300      	movs	r3, #0
}
 8013224:	4618      	mov	r0, r3
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801323e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013240:	2301      	movs	r3, #1
 8013242:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801324a:	2b00      	cmp	r3, #0
 801324c:	d101      	bne.n	8013252 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801324e:	2303      	movs	r3, #3
 8013250:	e01a      	b.n	8013288 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013258:	2b00      	cmp	r3, #0
 801325a:	d114      	bne.n	8013286 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	2201      	movs	r2, #1
 8013260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801327a:	2181      	movs	r1, #129	; 0x81
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f001 fdbb 	bl	8014df8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013286:	7bfb      	ldrb	r3, [r7, #15]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801329e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80132aa:	2303      	movs	r3, #3
 80132ac:	e016      	b.n	80132dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	7c1b      	ldrb	r3, [r3, #16]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d109      	bne.n	80132ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132c0:	2101      	movs	r1, #1
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f001 fdb9 	bl	8014e3a <USBD_LL_PrepareReceive>
 80132c8:	e007      	b.n	80132da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132d0:	2340      	movs	r3, #64	; 0x40
 80132d2:	2101      	movs	r1, #1
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f001 fdb0 	bl	8014e3a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80132da:	2300      	movs	r3, #0
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	4613      	mov	r3, r2
 80132f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d101      	bne.n	80132fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e01f      	b.n	801333c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2200      	movs	r2, #0
 8013300:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	2200      	movs	r2, #0
 8013308:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2200      	movs	r2, #0
 8013310:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d003      	beq.n	8013322 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2201      	movs	r2, #1
 8013326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	79fa      	ldrb	r2, [r7, #7]
 801332e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f001 fc17 	bl	8014b64 <USBD_LL_Init>
 8013336:	4603      	mov	r3, r0
 8013338:	75fb      	strb	r3, [r7, #23]

  return ret;
 801333a:	7dfb      	ldrb	r3, [r7, #23]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3718      	adds	r7, #24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801334e:	2300      	movs	r3, #0
 8013350:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013358:	2303      	movs	r3, #3
 801335a:	e016      	b.n	801338a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	683a      	ldr	r2, [r7, #0]
 8013360:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336c:	2b00      	cmp	r3, #0
 801336e:	d00b      	beq.n	8013388 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013378:	f107 020e 	add.w	r2, r7, #14
 801337c:	4610      	mov	r0, r2
 801337e:	4798      	blx	r3
 8013380:	4602      	mov	r2, r0
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013388:	2300      	movs	r3, #0
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b082      	sub	sp, #8
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f001 fc42 	bl	8014c24 <USBD_LL_Start>
 80133a0:	4603      	mov	r3, r0
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3708      	adds	r7, #8
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}

080133aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80133b2:	2300      	movs	r3, #0
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	460b      	mov	r3, r1
 80133ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80133cc:	2303      	movs	r3, #3
 80133ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d009      	beq.n	80133ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	78fa      	ldrb	r2, [r7, #3]
 80133e4:	4611      	mov	r1, r2
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	4798      	blx	r3
 80133ea:	4603      	mov	r3, r0
 80133ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80133ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	460b      	mov	r3, r1
 8013402:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801340a:	2b00      	cmp	r3, #0
 801340c:	d007      	beq.n	801341e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	78fa      	ldrb	r2, [r7, #3]
 8013418:	4611      	mov	r1, r2
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	4798      	blx	r3
  }

  return USBD_OK;
 801341e:	2300      	movs	r3, #0
}
 8013420:	4618      	mov	r0, r3
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013438:	6839      	ldr	r1, [r7, #0]
 801343a:	4618      	mov	r0, r3
 801343c:	f000 ff46 	bl	80142cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2201      	movs	r2, #1
 8013444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801344e:	461a      	mov	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801345c:	f003 031f 	and.w	r3, r3, #31
 8013460:	2b02      	cmp	r3, #2
 8013462:	d01a      	beq.n	801349a <USBD_LL_SetupStage+0x72>
 8013464:	2b02      	cmp	r3, #2
 8013466:	d822      	bhi.n	80134ae <USBD_LL_SetupStage+0x86>
 8013468:	2b00      	cmp	r3, #0
 801346a:	d002      	beq.n	8013472 <USBD_LL_SetupStage+0x4a>
 801346c:	2b01      	cmp	r3, #1
 801346e:	d00a      	beq.n	8013486 <USBD_LL_SetupStage+0x5e>
 8013470:	e01d      	b.n	80134ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013478:	4619      	mov	r1, r3
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 f9ee 	bl	801385c <USBD_StdDevReq>
 8013480:	4603      	mov	r3, r0
 8013482:	73fb      	strb	r3, [r7, #15]
      break;
 8013484:	e020      	b.n	80134c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801348c:	4619      	mov	r1, r3
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 fa52 	bl	8013938 <USBD_StdItfReq>
 8013494:	4603      	mov	r3, r0
 8013496:	73fb      	strb	r3, [r7, #15]
      break;
 8013498:	e016      	b.n	80134c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80134a0:	4619      	mov	r1, r3
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 fa91 	bl	80139ca <USBD_StdEPReq>
 80134a8:	4603      	mov	r3, r0
 80134aa:	73fb      	strb	r3, [r7, #15]
      break;
 80134ac:	e00c      	b.n	80134c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80134b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	4619      	mov	r1, r3
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f001 fc11 	bl	8014ce4 <USBD_LL_StallEP>
 80134c2:	4603      	mov	r3, r0
 80134c4:	73fb      	strb	r3, [r7, #15]
      break;
 80134c6:	bf00      	nop
  }

  return ret;
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b086      	sub	sp, #24
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	60f8      	str	r0, [r7, #12]
 80134da:	460b      	mov	r3, r1
 80134dc:	607a      	str	r2, [r7, #4]
 80134de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80134e0:	7afb      	ldrb	r3, [r7, #11]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d138      	bne.n	8013558 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80134ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80134f4:	2b03      	cmp	r3, #3
 80134f6:	d14a      	bne.n	801358e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	689a      	ldr	r2, [r3, #8]
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	429a      	cmp	r2, r3
 8013502:	d913      	bls.n	801352c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	689a      	ldr	r2, [r3, #8]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	1ad2      	subs	r2, r2, r3
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	68da      	ldr	r2, [r3, #12]
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	689b      	ldr	r3, [r3, #8]
 801351a:	4293      	cmp	r3, r2
 801351c:	bf28      	it	cs
 801351e:	4613      	movcs	r3, r2
 8013520:	461a      	mov	r2, r3
 8013522:	6879      	ldr	r1, [r7, #4]
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f000 ffc5 	bl	80144b4 <USBD_CtlContinueRx>
 801352a:	e030      	b.n	801358e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013532:	b2db      	uxtb	r3, r3
 8013534:	2b03      	cmp	r3, #3
 8013536:	d10b      	bne.n	8013550 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801353e:	691b      	ldr	r3, [r3, #16]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d005      	beq.n	8013550 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801354a:	691b      	ldr	r3, [r3, #16]
 801354c:	68f8      	ldr	r0, [r7, #12]
 801354e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	f000 ffc0 	bl	80144d6 <USBD_CtlSendStatus>
 8013556:	e01a      	b.n	801358e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b03      	cmp	r3, #3
 8013562:	d114      	bne.n	801358e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801356a:	699b      	ldr	r3, [r3, #24]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d00e      	beq.n	801358e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013576:	699b      	ldr	r3, [r3, #24]
 8013578:	7afa      	ldrb	r2, [r7, #11]
 801357a:	4611      	mov	r1, r2
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	4798      	blx	r3
 8013580:	4603      	mov	r3, r0
 8013582:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013584:	7dfb      	ldrb	r3, [r7, #23]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d001      	beq.n	801358e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801358a:	7dfb      	ldrb	r3, [r7, #23]
 801358c:	e000      	b.n	8013590 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801358e:	2300      	movs	r3, #0
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	460b      	mov	r3, r1
 80135a2:	607a      	str	r2, [r7, #4]
 80135a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80135a6:	7afb      	ldrb	r3, [r7, #11]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d16b      	bne.n	8013684 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	3314      	adds	r3, #20
 80135b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	d156      	bne.n	801366a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	689a      	ldr	r2, [r3, #8]
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d914      	bls.n	80135f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	689a      	ldr	r2, [r3, #8]
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	1ad2      	subs	r2, r2, r3
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	461a      	mov	r2, r3
 80135dc:	6879      	ldr	r1, [r7, #4]
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f000 ff3a 	bl	8014458 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135e4:	2300      	movs	r3, #0
 80135e6:	2200      	movs	r2, #0
 80135e8:	2100      	movs	r1, #0
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f001 fc25 	bl	8014e3a <USBD_LL_PrepareReceive>
 80135f0:	e03b      	b.n	801366a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	68da      	ldr	r2, [r3, #12]
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d11c      	bne.n	8013638 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	685a      	ldr	r2, [r3, #4]
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013606:	429a      	cmp	r2, r3
 8013608:	d316      	bcc.n	8013638 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	685a      	ldr	r2, [r3, #4]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013614:	429a      	cmp	r2, r3
 8013616:	d20f      	bcs.n	8013638 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013618:	2200      	movs	r2, #0
 801361a:	2100      	movs	r1, #0
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f000 ff1b 	bl	8014458 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2200      	movs	r2, #0
 8013626:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801362a:	2300      	movs	r3, #0
 801362c:	2200      	movs	r2, #0
 801362e:	2100      	movs	r1, #0
 8013630:	68f8      	ldr	r0, [r7, #12]
 8013632:	f001 fc02 	bl	8014e3a <USBD_LL_PrepareReceive>
 8013636:	e018      	b.n	801366a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b03      	cmp	r3, #3
 8013642:	d10b      	bne.n	801365c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d005      	beq.n	801365c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801365c:	2180      	movs	r1, #128	; 0x80
 801365e:	68f8      	ldr	r0, [r7, #12]
 8013660:	f001 fb40 	bl	8014ce4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013664:	68f8      	ldr	r0, [r7, #12]
 8013666:	f000 ff49 	bl	80144fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013670:	2b01      	cmp	r3, #1
 8013672:	d122      	bne.n	80136ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f7ff fe98 	bl	80133aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2200      	movs	r2, #0
 801367e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013682:	e01a      	b.n	80136ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801368a:	b2db      	uxtb	r3, r3
 801368c:	2b03      	cmp	r3, #3
 801368e:	d114      	bne.n	80136ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013696:	695b      	ldr	r3, [r3, #20]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00e      	beq.n	80136ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	7afa      	ldrb	r2, [r7, #11]
 80136a6:	4611      	mov	r1, r2
 80136a8:	68f8      	ldr	r0, [r7, #12]
 80136aa:	4798      	blx	r3
 80136ac:	4603      	mov	r3, r0
 80136ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80136b0:	7dfb      	ldrb	r3, [r7, #23]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d001      	beq.n	80136ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80136b6:	7dfb      	ldrb	r3, [r7, #23]
 80136b8:	e000      	b.n	80136bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80136ba:	2300      	movs	r3, #0
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3718      	adds	r7, #24
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2201      	movs	r2, #1
 80136d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2200      	movs	r2, #0
 80136e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d101      	bne.n	80136f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80136f4:	2303      	movs	r3, #3
 80136f6:	e02f      	b.n	8013758 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00f      	beq.n	8013722 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d009      	beq.n	8013722 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	6852      	ldr	r2, [r2, #4]
 801371a:	b2d2      	uxtb	r2, r2
 801371c:	4611      	mov	r1, r2
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013722:	2340      	movs	r3, #64	; 0x40
 8013724:	2200      	movs	r2, #0
 8013726:	2100      	movs	r1, #0
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f001 fa96 	bl	8014c5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2240      	movs	r2, #64	; 0x40
 801373a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801373e:	2340      	movs	r3, #64	; 0x40
 8013740:	2200      	movs	r2, #0
 8013742:	2180      	movs	r1, #128	; 0x80
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f001 fa88 	bl	8014c5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2201      	movs	r2, #1
 801374e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2240      	movs	r2, #64	; 0x40
 8013754:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013756:	2300      	movs	r3, #0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	78fa      	ldrb	r2, [r7, #3]
 8013770:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr

08013780 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801378e:	b2da      	uxtb	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2204      	movs	r2, #4
 801379a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	2b04      	cmp	r3, #4
 80137be:	d106      	bne.n	80137ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	370c      	adds	r7, #12
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d101      	bne.n	80137f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80137ee:	2303      	movs	r3, #3
 80137f0:	e012      	b.n	8013818 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d10b      	bne.n	8013816 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013804:	69db      	ldr	r3, [r3, #28]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d005      	beq.n	8013816 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013810:	69db      	ldr	r3, [r3, #28]
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013816:	2300      	movs	r3, #0
}
 8013818:	4618      	mov	r0, r3
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013820:	b480      	push	{r7}
 8013822:	b087      	sub	sp, #28
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	3301      	adds	r3, #1
 8013836:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801383e:	8a3b      	ldrh	r3, [r7, #16]
 8013840:	021b      	lsls	r3, r3, #8
 8013842:	b21a      	sxth	r2, r3
 8013844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013848:	4313      	orrs	r3, r2
 801384a:	b21b      	sxth	r3, r3
 801384c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801384e:	89fb      	ldrh	r3, [r7, #14]
}
 8013850:	4618      	mov	r0, r3
 8013852:	371c      	adds	r7, #28
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr

0801385c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013872:	2b40      	cmp	r3, #64	; 0x40
 8013874:	d005      	beq.n	8013882 <USBD_StdDevReq+0x26>
 8013876:	2b40      	cmp	r3, #64	; 0x40
 8013878:	d853      	bhi.n	8013922 <USBD_StdDevReq+0xc6>
 801387a:	2b00      	cmp	r3, #0
 801387c:	d00b      	beq.n	8013896 <USBD_StdDevReq+0x3a>
 801387e:	2b20      	cmp	r3, #32
 8013880:	d14f      	bne.n	8013922 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	6839      	ldr	r1, [r7, #0]
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	4798      	blx	r3
 8013890:	4603      	mov	r3, r0
 8013892:	73fb      	strb	r3, [r7, #15]
      break;
 8013894:	e04a      	b.n	801392c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	785b      	ldrb	r3, [r3, #1]
 801389a:	2b09      	cmp	r3, #9
 801389c:	d83b      	bhi.n	8013916 <USBD_StdDevReq+0xba>
 801389e:	a201      	add	r2, pc, #4	; (adr r2, 80138a4 <USBD_StdDevReq+0x48>)
 80138a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138a4:	080138f9 	.word	0x080138f9
 80138a8:	0801390d 	.word	0x0801390d
 80138ac:	08013917 	.word	0x08013917
 80138b0:	08013903 	.word	0x08013903
 80138b4:	08013917 	.word	0x08013917
 80138b8:	080138d7 	.word	0x080138d7
 80138bc:	080138cd 	.word	0x080138cd
 80138c0:	08013917 	.word	0x08013917
 80138c4:	080138ef 	.word	0x080138ef
 80138c8:	080138e1 	.word	0x080138e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 f9de 	bl	8013c90 <USBD_GetDescriptor>
          break;
 80138d4:	e024      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 fb6d 	bl	8013fb8 <USBD_SetAddress>
          break;
 80138de:	e01f      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80138e0:	6839      	ldr	r1, [r7, #0]
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 fbac 	bl	8014040 <USBD_SetConfig>
 80138e8:	4603      	mov	r3, r0
 80138ea:	73fb      	strb	r3, [r7, #15]
          break;
 80138ec:	e018      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80138ee:	6839      	ldr	r1, [r7, #0]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 fc4b 	bl	801418c <USBD_GetConfig>
          break;
 80138f6:	e013      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80138f8:	6839      	ldr	r1, [r7, #0]
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f000 fc7c 	bl	80141f8 <USBD_GetStatus>
          break;
 8013900:	e00e      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013902:	6839      	ldr	r1, [r7, #0]
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f000 fcab 	bl	8014260 <USBD_SetFeature>
          break;
 801390a:	e009      	b.n	8013920 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801390c:	6839      	ldr	r1, [r7, #0]
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f000 fcba 	bl	8014288 <USBD_ClrFeature>
          break;
 8013914:	e004      	b.n	8013920 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 fd11 	bl	8014340 <USBD_CtlError>
          break;
 801391e:	bf00      	nop
      }
      break;
 8013920:	e004      	b.n	801392c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 fd0b 	bl	8014340 <USBD_CtlError>
      break;
 801392a:	bf00      	nop
  }

  return ret;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop

08013938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b084      	sub	sp, #16
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013942:	2300      	movs	r3, #0
 8013944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801394e:	2b40      	cmp	r3, #64	; 0x40
 8013950:	d005      	beq.n	801395e <USBD_StdItfReq+0x26>
 8013952:	2b40      	cmp	r3, #64	; 0x40
 8013954:	d82f      	bhi.n	80139b6 <USBD_StdItfReq+0x7e>
 8013956:	2b00      	cmp	r3, #0
 8013958:	d001      	beq.n	801395e <USBD_StdItfReq+0x26>
 801395a:	2b20      	cmp	r3, #32
 801395c:	d12b      	bne.n	80139b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013964:	b2db      	uxtb	r3, r3
 8013966:	3b01      	subs	r3, #1
 8013968:	2b02      	cmp	r3, #2
 801396a:	d81d      	bhi.n	80139a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	889b      	ldrh	r3, [r3, #4]
 8013970:	b2db      	uxtb	r3, r3
 8013972:	2b01      	cmp	r3, #1
 8013974:	d813      	bhi.n	801399e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801397c:	689b      	ldr	r3, [r3, #8]
 801397e:	6839      	ldr	r1, [r7, #0]
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	4798      	blx	r3
 8013984:	4603      	mov	r3, r0
 8013986:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	88db      	ldrh	r3, [r3, #6]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d110      	bne.n	80139b2 <USBD_StdItfReq+0x7a>
 8013990:	7bfb      	ldrb	r3, [r7, #15]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d10d      	bne.n	80139b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 fd9d 	bl	80144d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801399c:	e009      	b.n	80139b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801399e:	6839      	ldr	r1, [r7, #0]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fccd 	bl	8014340 <USBD_CtlError>
          break;
 80139a6:	e004      	b.n	80139b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80139a8:	6839      	ldr	r1, [r7, #0]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 fcc8 	bl	8014340 <USBD_CtlError>
          break;
 80139b0:	e000      	b.n	80139b4 <USBD_StdItfReq+0x7c>
          break;
 80139b2:	bf00      	nop
      }
      break;
 80139b4:	e004      	b.n	80139c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80139b6:	6839      	ldr	r1, [r7, #0]
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 fcc1 	bl	8014340 <USBD_CtlError>
      break;
 80139be:	bf00      	nop
  }

  return ret;
 80139c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3710      	adds	r7, #16
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}

080139ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b084      	sub	sp, #16
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	6078      	str	r0, [r7, #4]
 80139d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	889b      	ldrh	r3, [r3, #4]
 80139dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80139e6:	2b40      	cmp	r3, #64	; 0x40
 80139e8:	d007      	beq.n	80139fa <USBD_StdEPReq+0x30>
 80139ea:	2b40      	cmp	r3, #64	; 0x40
 80139ec:	f200 8145 	bhi.w	8013c7a <USBD_StdEPReq+0x2b0>
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d00c      	beq.n	8013a0e <USBD_StdEPReq+0x44>
 80139f4:	2b20      	cmp	r3, #32
 80139f6:	f040 8140 	bne.w	8013c7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	6839      	ldr	r1, [r7, #0]
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	4798      	blx	r3
 8013a08:	4603      	mov	r3, r0
 8013a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a0c:	e13a      	b.n	8013c84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	785b      	ldrb	r3, [r3, #1]
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d007      	beq.n	8013a26 <USBD_StdEPReq+0x5c>
 8013a16:	2b03      	cmp	r3, #3
 8013a18:	f300 8129 	bgt.w	8013c6e <USBD_StdEPReq+0x2a4>
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d07f      	beq.n	8013b20 <USBD_StdEPReq+0x156>
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d03c      	beq.n	8013a9e <USBD_StdEPReq+0xd4>
 8013a24:	e123      	b.n	8013c6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	d002      	beq.n	8013a38 <USBD_StdEPReq+0x6e>
 8013a32:	2b03      	cmp	r3, #3
 8013a34:	d016      	beq.n	8013a64 <USBD_StdEPReq+0x9a>
 8013a36:	e02c      	b.n	8013a92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d00d      	beq.n	8013a5a <USBD_StdEPReq+0x90>
 8013a3e:	7bbb      	ldrb	r3, [r7, #14]
 8013a40:	2b80      	cmp	r3, #128	; 0x80
 8013a42:	d00a      	beq.n	8013a5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a44:	7bbb      	ldrb	r3, [r7, #14]
 8013a46:	4619      	mov	r1, r3
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f001 f94b 	bl	8014ce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a4e:	2180      	movs	r1, #128	; 0x80
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f001 f947 	bl	8014ce4 <USBD_LL_StallEP>
 8013a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a58:	e020      	b.n	8013a9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 fc6f 	bl	8014340 <USBD_CtlError>
              break;
 8013a62:	e01b      	b.n	8013a9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	885b      	ldrh	r3, [r3, #2]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d10e      	bne.n	8013a8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013a6c:	7bbb      	ldrb	r3, [r7, #14]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d00b      	beq.n	8013a8a <USBD_StdEPReq+0xc0>
 8013a72:	7bbb      	ldrb	r3, [r7, #14]
 8013a74:	2b80      	cmp	r3, #128	; 0x80
 8013a76:	d008      	beq.n	8013a8a <USBD_StdEPReq+0xc0>
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	88db      	ldrh	r3, [r3, #6]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d104      	bne.n	8013a8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a80:	7bbb      	ldrb	r3, [r7, #14]
 8013a82:	4619      	mov	r1, r3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f001 f92d 	bl	8014ce4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 fd23 	bl	80144d6 <USBD_CtlSendStatus>

              break;
 8013a90:	e004      	b.n	8013a9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013a92:	6839      	ldr	r1, [r7, #0]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 fc53 	bl	8014340 <USBD_CtlError>
              break;
 8013a9a:	bf00      	nop
          }
          break;
 8013a9c:	e0ec      	b.n	8013c78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b02      	cmp	r3, #2
 8013aa8:	d002      	beq.n	8013ab0 <USBD_StdEPReq+0xe6>
 8013aaa:	2b03      	cmp	r3, #3
 8013aac:	d016      	beq.n	8013adc <USBD_StdEPReq+0x112>
 8013aae:	e030      	b.n	8013b12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ab0:	7bbb      	ldrb	r3, [r7, #14]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00d      	beq.n	8013ad2 <USBD_StdEPReq+0x108>
 8013ab6:	7bbb      	ldrb	r3, [r7, #14]
 8013ab8:	2b80      	cmp	r3, #128	; 0x80
 8013aba:	d00a      	beq.n	8013ad2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013abc:	7bbb      	ldrb	r3, [r7, #14]
 8013abe:	4619      	mov	r1, r3
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f001 f90f 	bl	8014ce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ac6:	2180      	movs	r1, #128	; 0x80
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f001 f90b 	bl	8014ce4 <USBD_LL_StallEP>
 8013ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ad0:	e025      	b.n	8013b1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013ad2:	6839      	ldr	r1, [r7, #0]
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f000 fc33 	bl	8014340 <USBD_CtlError>
              break;
 8013ada:	e020      	b.n	8013b1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	885b      	ldrh	r3, [r3, #2]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d11b      	bne.n	8013b1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ae4:	7bbb      	ldrb	r3, [r7, #14]
 8013ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d004      	beq.n	8013af8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013aee:	7bbb      	ldrb	r3, [r7, #14]
 8013af0:	4619      	mov	r1, r3
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f001 f915 	bl	8014d22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 fcec 	bl	80144d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b04:	689b      	ldr	r3, [r3, #8]
 8013b06:	6839      	ldr	r1, [r7, #0]
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	4798      	blx	r3
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013b10:	e004      	b.n	8013b1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013b12:	6839      	ldr	r1, [r7, #0]
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f000 fc13 	bl	8014340 <USBD_CtlError>
              break;
 8013b1a:	e000      	b.n	8013b1e <USBD_StdEPReq+0x154>
              break;
 8013b1c:	bf00      	nop
          }
          break;
 8013b1e:	e0ab      	b.n	8013c78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b02      	cmp	r3, #2
 8013b2a:	d002      	beq.n	8013b32 <USBD_StdEPReq+0x168>
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d032      	beq.n	8013b96 <USBD_StdEPReq+0x1cc>
 8013b30:	e097      	b.n	8013c62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b32:	7bbb      	ldrb	r3, [r7, #14]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d007      	beq.n	8013b48 <USBD_StdEPReq+0x17e>
 8013b38:	7bbb      	ldrb	r3, [r7, #14]
 8013b3a:	2b80      	cmp	r3, #128	; 0x80
 8013b3c:	d004      	beq.n	8013b48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 fbfd 	bl	8014340 <USBD_CtlError>
                break;
 8013b46:	e091      	b.n	8013c6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	da0b      	bge.n	8013b68 <USBD_StdEPReq+0x19e>
 8013b50:	7bbb      	ldrb	r3, [r7, #14]
 8013b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b56:	4613      	mov	r3, r2
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	4413      	add	r3, r2
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	3310      	adds	r3, #16
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	4413      	add	r3, r2
 8013b64:	3304      	adds	r3, #4
 8013b66:	e00b      	b.n	8013b80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b68:	7bbb      	ldrb	r3, [r7, #14]
 8013b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b6e:	4613      	mov	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	3304      	adds	r3, #4
 8013b80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	2200      	movs	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	2202      	movs	r2, #2
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fc47 	bl	8014422 <USBD_CtlSendData>
              break;
 8013b94:	e06a      	b.n	8013c6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	da11      	bge.n	8013bc2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013b9e:	7bbb      	ldrb	r3, [r7, #14]
 8013ba0:	f003 020f 	and.w	r2, r3, #15
 8013ba4:	6879      	ldr	r1, [r7, #4]
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	009b      	lsls	r3, r3, #2
 8013baa:	4413      	add	r3, r2
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	440b      	add	r3, r1
 8013bb0:	3324      	adds	r3, #36	; 0x24
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d117      	bne.n	8013be8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013bb8:	6839      	ldr	r1, [r7, #0]
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 fbc0 	bl	8014340 <USBD_CtlError>
                  break;
 8013bc0:	e054      	b.n	8013c6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013bc2:	7bbb      	ldrb	r3, [r7, #14]
 8013bc4:	f003 020f 	and.w	r2, r3, #15
 8013bc8:	6879      	ldr	r1, [r7, #4]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	009b      	lsls	r3, r3, #2
 8013bce:	4413      	add	r3, r2
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	440b      	add	r3, r1
 8013bd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013bd8:	881b      	ldrh	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d104      	bne.n	8013be8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013bde:	6839      	ldr	r1, [r7, #0]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 fbad 	bl	8014340 <USBD_CtlError>
                  break;
 8013be6:	e041      	b.n	8013c6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	da0b      	bge.n	8013c08 <USBD_StdEPReq+0x23e>
 8013bf0:	7bbb      	ldrb	r3, [r7, #14]
 8013bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013bf6:	4613      	mov	r3, r2
 8013bf8:	009b      	lsls	r3, r3, #2
 8013bfa:	4413      	add	r3, r2
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	3310      	adds	r3, #16
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	4413      	add	r3, r2
 8013c04:	3304      	adds	r3, #4
 8013c06:	e00b      	b.n	8013c20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c08:	7bbb      	ldrb	r3, [r7, #14]
 8013c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c0e:	4613      	mov	r3, r2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4413      	add	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	3304      	adds	r3, #4
 8013c20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013c22:	7bbb      	ldrb	r3, [r7, #14]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d002      	beq.n	8013c2e <USBD_StdEPReq+0x264>
 8013c28:	7bbb      	ldrb	r3, [r7, #14]
 8013c2a:	2b80      	cmp	r3, #128	; 0x80
 8013c2c:	d103      	bne.n	8013c36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	2200      	movs	r2, #0
 8013c32:	601a      	str	r2, [r3, #0]
 8013c34:	e00e      	b.n	8013c54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013c36:	7bbb      	ldrb	r3, [r7, #14]
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f001 f890 	bl	8014d60 <USBD_LL_IsStallEP>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d003      	beq.n	8013c4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	2201      	movs	r2, #1
 8013c4a:	601a      	str	r2, [r3, #0]
 8013c4c:	e002      	b.n	8013c54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	2200      	movs	r2, #0
 8013c52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	2202      	movs	r2, #2
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 fbe1 	bl	8014422 <USBD_CtlSendData>
              break;
 8013c60:	e004      	b.n	8013c6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013c62:	6839      	ldr	r1, [r7, #0]
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fb6b 	bl	8014340 <USBD_CtlError>
              break;
 8013c6a:	bf00      	nop
          }
          break;
 8013c6c:	e004      	b.n	8013c78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013c6e:	6839      	ldr	r1, [r7, #0]
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f000 fb65 	bl	8014340 <USBD_CtlError>
          break;
 8013c76:	bf00      	nop
      }
      break;
 8013c78:	e004      	b.n	8013c84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fb5f 	bl	8014340 <USBD_CtlError>
      break;
 8013c82:	bf00      	nop
  }

  return ret;
 8013c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	885b      	ldrh	r3, [r3, #2]
 8013caa:	0a1b      	lsrs	r3, r3, #8
 8013cac:	b29b      	uxth	r3, r3
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	2b0e      	cmp	r3, #14
 8013cb2:	f200 8152 	bhi.w	8013f5a <USBD_GetDescriptor+0x2ca>
 8013cb6:	a201      	add	r2, pc, #4	; (adr r2, 8013cbc <USBD_GetDescriptor+0x2c>)
 8013cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cbc:	08013d2d 	.word	0x08013d2d
 8013cc0:	08013d45 	.word	0x08013d45
 8013cc4:	08013d85 	.word	0x08013d85
 8013cc8:	08013f5b 	.word	0x08013f5b
 8013ccc:	08013f5b 	.word	0x08013f5b
 8013cd0:	08013efb 	.word	0x08013efb
 8013cd4:	08013f27 	.word	0x08013f27
 8013cd8:	08013f5b 	.word	0x08013f5b
 8013cdc:	08013f5b 	.word	0x08013f5b
 8013ce0:	08013f5b 	.word	0x08013f5b
 8013ce4:	08013f5b 	.word	0x08013f5b
 8013ce8:	08013f5b 	.word	0x08013f5b
 8013cec:	08013f5b 	.word	0x08013f5b
 8013cf0:	08013f5b 	.word	0x08013f5b
 8013cf4:	08013cf9 	.word	0x08013cf9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cfe:	69db      	ldr	r3, [r3, #28]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d00b      	beq.n	8013d1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d0a:	69db      	ldr	r3, [r3, #28]
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	7c12      	ldrb	r2, [r2, #16]
 8013d10:	f107 0108 	add.w	r1, r7, #8
 8013d14:	4610      	mov	r0, r2
 8013d16:	4798      	blx	r3
 8013d18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d1a:	e126      	b.n	8013f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013d1c:	6839      	ldr	r1, [r7, #0]
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 fb0e 	bl	8014340 <USBD_CtlError>
        err++;
 8013d24:	7afb      	ldrb	r3, [r7, #11]
 8013d26:	3301      	adds	r3, #1
 8013d28:	72fb      	strb	r3, [r7, #11]
      break;
 8013d2a:	e11e      	b.n	8013f6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	7c12      	ldrb	r2, [r2, #16]
 8013d38:	f107 0108 	add.w	r1, r7, #8
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	4798      	blx	r3
 8013d40:	60f8      	str	r0, [r7, #12]
      break;
 8013d42:	e112      	b.n	8013f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	7c1b      	ldrb	r3, [r3, #16]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10d      	bne.n	8013d68 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d54:	f107 0208 	add.w	r2, r7, #8
 8013d58:	4610      	mov	r0, r2
 8013d5a:	4798      	blx	r3
 8013d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	3301      	adds	r3, #1
 8013d62:	2202      	movs	r2, #2
 8013d64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013d66:	e100      	b.n	8013f6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	f107 0208 	add.w	r2, r7, #8
 8013d74:	4610      	mov	r0, r2
 8013d76:	4798      	blx	r3
 8013d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	2202      	movs	r2, #2
 8013d80:	701a      	strb	r2, [r3, #0]
      break;
 8013d82:	e0f2      	b.n	8013f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	885b      	ldrh	r3, [r3, #2]
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b05      	cmp	r3, #5
 8013d8c:	f200 80ac 	bhi.w	8013ee8 <USBD_GetDescriptor+0x258>
 8013d90:	a201      	add	r2, pc, #4	; (adr r2, 8013d98 <USBD_GetDescriptor+0x108>)
 8013d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d96:	bf00      	nop
 8013d98:	08013db1 	.word	0x08013db1
 8013d9c:	08013de5 	.word	0x08013de5
 8013da0:	08013e19 	.word	0x08013e19
 8013da4:	08013e4d 	.word	0x08013e4d
 8013da8:	08013e81 	.word	0x08013e81
 8013dac:	08013eb5 	.word	0x08013eb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013db6:	685b      	ldr	r3, [r3, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00b      	beq.n	8013dd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc2:	685b      	ldr	r3, [r3, #4]
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	7c12      	ldrb	r2, [r2, #16]
 8013dc8:	f107 0108 	add.w	r1, r7, #8
 8013dcc:	4610      	mov	r0, r2
 8013dce:	4798      	blx	r3
 8013dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dd2:	e091      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f000 fab2 	bl	8014340 <USBD_CtlError>
            err++;
 8013ddc:	7afb      	ldrb	r3, [r7, #11]
 8013dde:	3301      	adds	r3, #1
 8013de0:	72fb      	strb	r3, [r7, #11]
          break;
 8013de2:	e089      	b.n	8013ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dea:	689b      	ldr	r3, [r3, #8]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00b      	beq.n	8013e08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013df6:	689b      	ldr	r3, [r3, #8]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	7c12      	ldrb	r2, [r2, #16]
 8013dfc:	f107 0108 	add.w	r1, r7, #8
 8013e00:	4610      	mov	r0, r2
 8013e02:	4798      	blx	r3
 8013e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e06:	e077      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e08:	6839      	ldr	r1, [r7, #0]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 fa98 	bl	8014340 <USBD_CtlError>
            err++;
 8013e10:	7afb      	ldrb	r3, [r7, #11]
 8013e12:	3301      	adds	r3, #1
 8013e14:	72fb      	strb	r3, [r7, #11]
          break;
 8013e16:	e06f      	b.n	8013ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00b      	beq.n	8013e3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	7c12      	ldrb	r2, [r2, #16]
 8013e30:	f107 0108 	add.w	r1, r7, #8
 8013e34:	4610      	mov	r0, r2
 8013e36:	4798      	blx	r3
 8013e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e3a:	e05d      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e3c:	6839      	ldr	r1, [r7, #0]
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 fa7e 	bl	8014340 <USBD_CtlError>
            err++;
 8013e44:	7afb      	ldrb	r3, [r7, #11]
 8013e46:	3301      	adds	r3, #1
 8013e48:	72fb      	strb	r3, [r7, #11]
          break;
 8013e4a:	e055      	b.n	8013ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e52:	691b      	ldr	r3, [r3, #16]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00b      	beq.n	8013e70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e5e:	691b      	ldr	r3, [r3, #16]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	7c12      	ldrb	r2, [r2, #16]
 8013e64:	f107 0108 	add.w	r1, r7, #8
 8013e68:	4610      	mov	r0, r2
 8013e6a:	4798      	blx	r3
 8013e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e6e:	e043      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 fa64 	bl	8014340 <USBD_CtlError>
            err++;
 8013e78:	7afb      	ldrb	r3, [r7, #11]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e7e:	e03b      	b.n	8013ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e86:	695b      	ldr	r3, [r3, #20]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00b      	beq.n	8013ea4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	7c12      	ldrb	r2, [r2, #16]
 8013e98:	f107 0108 	add.w	r1, r7, #8
 8013e9c:	4610      	mov	r0, r2
 8013e9e:	4798      	blx	r3
 8013ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ea2:	e029      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 fa4a 	bl	8014340 <USBD_CtlError>
            err++;
 8013eac:	7afb      	ldrb	r3, [r7, #11]
 8013eae:	3301      	adds	r3, #1
 8013eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8013eb2:	e021      	b.n	8013ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eba:	699b      	ldr	r3, [r3, #24]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00b      	beq.n	8013ed8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ec6:	699b      	ldr	r3, [r3, #24]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	7c12      	ldrb	r2, [r2, #16]
 8013ecc:	f107 0108 	add.w	r1, r7, #8
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	4798      	blx	r3
 8013ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ed6:	e00f      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fa30 	bl	8014340 <USBD_CtlError>
            err++;
 8013ee0:	7afb      	ldrb	r3, [r7, #11]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8013ee6:	e007      	b.n	8013ef8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013ee8:	6839      	ldr	r1, [r7, #0]
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f000 fa28 	bl	8014340 <USBD_CtlError>
          err++;
 8013ef0:	7afb      	ldrb	r3, [r7, #11]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013ef6:	bf00      	nop
      }
      break;
 8013ef8:	e037      	b.n	8013f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	7c1b      	ldrb	r3, [r3, #16]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d109      	bne.n	8013f16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f0a:	f107 0208 	add.w	r2, r7, #8
 8013f0e:	4610      	mov	r0, r2
 8013f10:	4798      	blx	r3
 8013f12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f14:	e029      	b.n	8013f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f16:	6839      	ldr	r1, [r7, #0]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f000 fa11 	bl	8014340 <USBD_CtlError>
        err++;
 8013f1e:	7afb      	ldrb	r3, [r7, #11]
 8013f20:	3301      	adds	r3, #1
 8013f22:	72fb      	strb	r3, [r7, #11]
      break;
 8013f24:	e021      	b.n	8013f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	7c1b      	ldrb	r3, [r3, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10d      	bne.n	8013f4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f36:	f107 0208 	add.w	r2, r7, #8
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	4798      	blx	r3
 8013f3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3301      	adds	r3, #1
 8013f44:	2207      	movs	r2, #7
 8013f46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f48:	e00f      	b.n	8013f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f4a:	6839      	ldr	r1, [r7, #0]
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f000 f9f7 	bl	8014340 <USBD_CtlError>
        err++;
 8013f52:	7afb      	ldrb	r3, [r7, #11]
 8013f54:	3301      	adds	r3, #1
 8013f56:	72fb      	strb	r3, [r7, #11]
      break;
 8013f58:	e007      	b.n	8013f6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013f5a:	6839      	ldr	r1, [r7, #0]
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 f9ef 	bl	8014340 <USBD_CtlError>
      err++;
 8013f62:	7afb      	ldrb	r3, [r7, #11]
 8013f64:	3301      	adds	r3, #1
 8013f66:	72fb      	strb	r3, [r7, #11]
      break;
 8013f68:	bf00      	nop
  }

  if (err != 0U)
 8013f6a:	7afb      	ldrb	r3, [r7, #11]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d11e      	bne.n	8013fae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	88db      	ldrh	r3, [r3, #6]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d016      	beq.n	8013fa6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f78:	893b      	ldrh	r3, [r7, #8]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d00e      	beq.n	8013f9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	88da      	ldrh	r2, [r3, #6]
 8013f82:	893b      	ldrh	r3, [r7, #8]
 8013f84:	4293      	cmp	r3, r2
 8013f86:	bf28      	it	cs
 8013f88:	4613      	movcs	r3, r2
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f8e:	893b      	ldrh	r3, [r7, #8]
 8013f90:	461a      	mov	r2, r3
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 fa44 	bl	8014422 <USBD_CtlSendData>
 8013f9a:	e009      	b.n	8013fb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 f9ce 	bl	8014340 <USBD_CtlError>
 8013fa4:	e004      	b.n	8013fb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 fa95 	bl	80144d6 <USBD_CtlSendStatus>
 8013fac:	e000      	b.n	8013fb0 <USBD_GetDescriptor+0x320>
    return;
 8013fae:	bf00      	nop
  }
}
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop

08013fb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	889b      	ldrh	r3, [r3, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d131      	bne.n	801402e <USBD_SetAddress+0x76>
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	88db      	ldrh	r3, [r3, #6]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d12d      	bne.n	801402e <USBD_SetAddress+0x76>
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	885b      	ldrh	r3, [r3, #2]
 8013fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8013fd8:	d829      	bhi.n	801402e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	885b      	ldrh	r3, [r3, #2]
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	d104      	bne.n	8013ffc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f000 f9a3 	bl	8014340 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffa:	e01d      	b.n	8014038 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	7bfa      	ldrb	r2, [r7, #15]
 8014000:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014004:	7bfb      	ldrb	r3, [r7, #15]
 8014006:	4619      	mov	r1, r3
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fed6 	bl	8014dba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 fa61 	bl	80144d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014014:	7bfb      	ldrb	r3, [r7, #15]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d004      	beq.n	8014024 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2202      	movs	r2, #2
 801401e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014022:	e009      	b.n	8014038 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2201      	movs	r2, #1
 8014028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801402c:	e004      	b.n	8014038 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801402e:	6839      	ldr	r1, [r7, #0]
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 f985 	bl	8014340 <USBD_CtlError>
  }
}
 8014036:	bf00      	nop
 8014038:	bf00      	nop
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801404a:	2300      	movs	r3, #0
 801404c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	885b      	ldrh	r3, [r3, #2]
 8014052:	b2da      	uxtb	r2, r3
 8014054:	4b4c      	ldr	r3, [pc, #304]	; (8014188 <USBD_SetConfig+0x148>)
 8014056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014058:	4b4b      	ldr	r3, [pc, #300]	; (8014188 <USBD_SetConfig+0x148>)
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d905      	bls.n	801406c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014060:	6839      	ldr	r1, [r7, #0]
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 f96c 	bl	8014340 <USBD_CtlError>
    return USBD_FAIL;
 8014068:	2303      	movs	r3, #3
 801406a:	e088      	b.n	801417e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014072:	b2db      	uxtb	r3, r3
 8014074:	2b02      	cmp	r3, #2
 8014076:	d002      	beq.n	801407e <USBD_SetConfig+0x3e>
 8014078:	2b03      	cmp	r3, #3
 801407a:	d025      	beq.n	80140c8 <USBD_SetConfig+0x88>
 801407c:	e071      	b.n	8014162 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801407e:	4b42      	ldr	r3, [pc, #264]	; (8014188 <USBD_SetConfig+0x148>)
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d01c      	beq.n	80140c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014086:	4b40      	ldr	r3, [pc, #256]	; (8014188 <USBD_SetConfig+0x148>)
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	461a      	mov	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014090:	4b3d      	ldr	r3, [pc, #244]	; (8014188 <USBD_SetConfig+0x148>)
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	4619      	mov	r1, r3
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f7ff f992 	bl	80133c0 <USBD_SetClassConfig>
 801409c:	4603      	mov	r3, r0
 801409e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80140a0:	7bfb      	ldrb	r3, [r7, #15]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d004      	beq.n	80140b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80140a6:	6839      	ldr	r1, [r7, #0]
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f000 f949 	bl	8014340 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140ae:	e065      	b.n	801417c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 fa10 	bl	80144d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2203      	movs	r2, #3
 80140ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80140be:	e05d      	b.n	801417c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f000 fa08 	bl	80144d6 <USBD_CtlSendStatus>
      break;
 80140c6:	e059      	b.n	801417c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80140c8:	4b2f      	ldr	r3, [pc, #188]	; (8014188 <USBD_SetConfig+0x148>)
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d112      	bne.n	80140f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2202      	movs	r2, #2
 80140d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80140d8:	4b2b      	ldr	r3, [pc, #172]	; (8014188 <USBD_SetConfig+0x148>)
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	461a      	mov	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80140e2:	4b29      	ldr	r3, [pc, #164]	; (8014188 <USBD_SetConfig+0x148>)
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	4619      	mov	r1, r3
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f7ff f985 	bl	80133f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 f9f1 	bl	80144d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140f4:	e042      	b.n	801417c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80140f6:	4b24      	ldr	r3, [pc, #144]	; (8014188 <USBD_SetConfig+0x148>)
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	461a      	mov	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	429a      	cmp	r2, r3
 8014102:	d02a      	beq.n	801415a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	b2db      	uxtb	r3, r3
 801410a:	4619      	mov	r1, r3
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7ff f973 	bl	80133f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014112:	4b1d      	ldr	r3, [pc, #116]	; (8014188 <USBD_SetConfig+0x148>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	461a      	mov	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801411c:	4b1a      	ldr	r3, [pc, #104]	; (8014188 <USBD_SetConfig+0x148>)
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	4619      	mov	r1, r3
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff f94c 	bl	80133c0 <USBD_SetClassConfig>
 8014128:	4603      	mov	r3, r0
 801412a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801412c:	7bfb      	ldrb	r3, [r7, #15]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00f      	beq.n	8014152 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 f903 	bl	8014340 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	b2db      	uxtb	r3, r3
 8014140:	4619      	mov	r1, r3
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff f958 	bl	80133f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2202      	movs	r2, #2
 801414c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014150:	e014      	b.n	801417c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f000 f9bf 	bl	80144d6 <USBD_CtlSendStatus>
      break;
 8014158:	e010      	b.n	801417c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 f9bb 	bl	80144d6 <USBD_CtlSendStatus>
      break;
 8014160:	e00c      	b.n	801417c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 f8eb 	bl	8014340 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801416a:	4b07      	ldr	r3, [pc, #28]	; (8014188 <USBD_SetConfig+0x148>)
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	4619      	mov	r1, r3
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7ff f941 	bl	80133f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014176:	2303      	movs	r3, #3
 8014178:	73fb      	strb	r3, [r7, #15]
      break;
 801417a:	bf00      	nop
  }

  return ret;
 801417c:	7bfb      	ldrb	r3, [r7, #15]
}
 801417e:	4618      	mov	r0, r3
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	20000aa8 	.word	0x20000aa8

0801418c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	88db      	ldrh	r3, [r3, #6]
 801419a:	2b01      	cmp	r3, #1
 801419c:	d004      	beq.n	80141a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801419e:	6839      	ldr	r1, [r7, #0]
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 f8cd 	bl	8014340 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80141a6:	e023      	b.n	80141f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	2b02      	cmp	r3, #2
 80141b2:	dc02      	bgt.n	80141ba <USBD_GetConfig+0x2e>
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	dc03      	bgt.n	80141c0 <USBD_GetConfig+0x34>
 80141b8:	e015      	b.n	80141e6 <USBD_GetConfig+0x5a>
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	d00b      	beq.n	80141d6 <USBD_GetConfig+0x4a>
 80141be:	e012      	b.n	80141e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2200      	movs	r2, #0
 80141c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3308      	adds	r3, #8
 80141ca:	2201      	movs	r2, #1
 80141cc:	4619      	mov	r1, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 f927 	bl	8014422 <USBD_CtlSendData>
        break;
 80141d4:	e00c      	b.n	80141f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	3304      	adds	r3, #4
 80141da:	2201      	movs	r2, #1
 80141dc:	4619      	mov	r1, r3
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 f91f 	bl	8014422 <USBD_CtlSendData>
        break;
 80141e4:	e004      	b.n	80141f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80141e6:	6839      	ldr	r1, [r7, #0]
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 f8a9 	bl	8014340 <USBD_CtlError>
        break;
 80141ee:	bf00      	nop
}
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014208:	b2db      	uxtb	r3, r3
 801420a:	3b01      	subs	r3, #1
 801420c:	2b02      	cmp	r3, #2
 801420e:	d81e      	bhi.n	801424e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	88db      	ldrh	r3, [r3, #6]
 8014214:	2b02      	cmp	r3, #2
 8014216:	d004      	beq.n	8014222 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014218:	6839      	ldr	r1, [r7, #0]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 f890 	bl	8014340 <USBD_CtlError>
        break;
 8014220:	e01a      	b.n	8014258 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2201      	movs	r2, #1
 8014226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801422e:	2b00      	cmp	r3, #0
 8014230:	d005      	beq.n	801423e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	f043 0202 	orr.w	r2, r3, #2
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	330c      	adds	r3, #12
 8014242:	2202      	movs	r2, #2
 8014244:	4619      	mov	r1, r3
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 f8eb 	bl	8014422 <USBD_CtlSendData>
      break;
 801424c:	e004      	b.n	8014258 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f875 	bl	8014340 <USBD_CtlError>
      break;
 8014256:	bf00      	nop
  }
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	885b      	ldrh	r3, [r3, #2]
 801426e:	2b01      	cmp	r3, #1
 8014270:	d106      	bne.n	8014280 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2201      	movs	r2, #1
 8014276:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f000 f92b 	bl	80144d6 <USBD_CtlSendStatus>
  }
}
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014298:	b2db      	uxtb	r3, r3
 801429a:	3b01      	subs	r3, #1
 801429c:	2b02      	cmp	r3, #2
 801429e:	d80b      	bhi.n	80142b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	885b      	ldrh	r3, [r3, #2]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d10c      	bne.n	80142c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 f910 	bl	80144d6 <USBD_CtlSendStatus>
      }
      break;
 80142b6:	e004      	b.n	80142c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80142b8:	6839      	ldr	r1, [r7, #0]
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f000 f840 	bl	8014340 <USBD_CtlError>
      break;
 80142c0:	e000      	b.n	80142c4 <USBD_ClrFeature+0x3c>
      break;
 80142c2:	bf00      	nop
  }
}
 80142c4:	bf00      	nop
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	781a      	ldrb	r2, [r3, #0]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	3301      	adds	r3, #1
 80142e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	781a      	ldrb	r2, [r3, #0]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	3301      	adds	r3, #1
 80142f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff fa92 	bl	8013820 <SWAPBYTE>
 80142fc:	4603      	mov	r3, r0
 80142fe:	461a      	mov	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	3301      	adds	r3, #1
 8014308:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	3301      	adds	r3, #1
 801430e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014310:	68f8      	ldr	r0, [r7, #12]
 8014312:	f7ff fa85 	bl	8013820 <SWAPBYTE>
 8014316:	4603      	mov	r3, r0
 8014318:	461a      	mov	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	3301      	adds	r3, #1
 8014322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	3301      	adds	r3, #1
 8014328:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801432a:	68f8      	ldr	r0, [r7, #12]
 801432c:	f7ff fa78 	bl	8013820 <SWAPBYTE>
 8014330:	4603      	mov	r3, r0
 8014332:	461a      	mov	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	80da      	strh	r2, [r3, #6]
}
 8014338:	bf00      	nop
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801434a:	2180      	movs	r1, #128	; 0x80
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 fcc9 	bl	8014ce4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014352:	2100      	movs	r1, #0
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 fcc5 	bl	8014ce4 <USBD_LL_StallEP>
}
 801435a:	bf00      	nop
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014362:	b580      	push	{r7, lr}
 8014364:	b086      	sub	sp, #24
 8014366:	af00      	add	r7, sp, #0
 8014368:	60f8      	str	r0, [r7, #12]
 801436a:	60b9      	str	r1, [r7, #8]
 801436c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801436e:	2300      	movs	r3, #0
 8014370:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d036      	beq.n	80143e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801437c:	6938      	ldr	r0, [r7, #16]
 801437e:	f000 f836 	bl	80143ee <USBD_GetLen>
 8014382:	4603      	mov	r3, r0
 8014384:	3301      	adds	r3, #1
 8014386:	b29b      	uxth	r3, r3
 8014388:	005b      	lsls	r3, r3, #1
 801438a:	b29a      	uxth	r2, r3
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014390:	7dfb      	ldrb	r3, [r7, #23]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	4413      	add	r3, r2
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	7812      	ldrb	r2, [r2, #0]
 801439a:	701a      	strb	r2, [r3, #0]
  idx++;
 801439c:	7dfb      	ldrb	r3, [r7, #23]
 801439e:	3301      	adds	r3, #1
 80143a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
 80143a4:	68ba      	ldr	r2, [r7, #8]
 80143a6:	4413      	add	r3, r2
 80143a8:	2203      	movs	r2, #3
 80143aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80143ac:	7dfb      	ldrb	r3, [r7, #23]
 80143ae:	3301      	adds	r3, #1
 80143b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80143b2:	e013      	b.n	80143dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80143b4:	7dfb      	ldrb	r3, [r7, #23]
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	4413      	add	r3, r2
 80143ba:	693a      	ldr	r2, [r7, #16]
 80143bc:	7812      	ldrb	r2, [r2, #0]
 80143be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	3301      	adds	r3, #1
 80143c4:	613b      	str	r3, [r7, #16]
    idx++;
 80143c6:	7dfb      	ldrb	r3, [r7, #23]
 80143c8:	3301      	adds	r3, #1
 80143ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80143cc:	7dfb      	ldrb	r3, [r7, #23]
 80143ce:	68ba      	ldr	r2, [r7, #8]
 80143d0:	4413      	add	r3, r2
 80143d2:	2200      	movs	r2, #0
 80143d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80143d6:	7dfb      	ldrb	r3, [r7, #23]
 80143d8:	3301      	adds	r3, #1
 80143da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1e7      	bne.n	80143b4 <USBD_GetString+0x52>
 80143e4:	e000      	b.n	80143e8 <USBD_GetString+0x86>
    return;
 80143e6:	bf00      	nop
  }
}
 80143e8:	3718      	adds	r7, #24
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80143ee:	b480      	push	{r7}
 80143f0:	b085      	sub	sp, #20
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80143f6:	2300      	movs	r3, #0
 80143f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80143fe:	e005      	b.n	801440c <USBD_GetLen+0x1e>
  {
    len++;
 8014400:	7bfb      	ldrb	r3, [r7, #15]
 8014402:	3301      	adds	r3, #1
 8014404:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	3301      	adds	r3, #1
 801440a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d1f5      	bne.n	8014400 <USBD_GetLen+0x12>
  }

  return len;
 8014414:	7bfb      	ldrb	r3, [r7, #15]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr

08014422 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014422:	b580      	push	{r7, lr}
 8014424:	b084      	sub	sp, #16
 8014426:	af00      	add	r7, sp, #0
 8014428:	60f8      	str	r0, [r7, #12]
 801442a:	60b9      	str	r1, [r7, #8]
 801442c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	2202      	movs	r2, #2
 8014432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	68ba      	ldr	r2, [r7, #8]
 8014446:	2100      	movs	r1, #0
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f000 fcd5 	bl	8014df8 <USBD_LL_Transmit>

  return USBD_OK;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3710      	adds	r7, #16
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	2100      	movs	r1, #0
 801446a:	68f8      	ldr	r0, [r7, #12]
 801446c:	f000 fcc4 	bl	8014df8 <USBD_LL_Transmit>

  return USBD_OK;
 8014470:	2300      	movs	r3, #0
}
 8014472:	4618      	mov	r0, r3
 8014474:	3710      	adds	r7, #16
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}

0801447a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801447a:	b580      	push	{r7, lr}
 801447c:	b084      	sub	sp, #16
 801447e:	af00      	add	r7, sp, #0
 8014480:	60f8      	str	r0, [r7, #12]
 8014482:	60b9      	str	r1, [r7, #8]
 8014484:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2203      	movs	r2, #3
 801448a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	687a      	ldr	r2, [r7, #4]
 801449a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	2100      	movs	r1, #0
 80144a4:	68f8      	ldr	r0, [r7, #12]
 80144a6:	f000 fcc8 	bl	8014e3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144aa:	2300      	movs	r3, #0
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3710      	adds	r7, #16
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68ba      	ldr	r2, [r7, #8]
 80144c4:	2100      	movs	r1, #0
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f000 fcb7 	bl	8014e3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b082      	sub	sp, #8
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2204      	movs	r2, #4
 80144e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80144e6:	2300      	movs	r3, #0
 80144e8:	2200      	movs	r2, #0
 80144ea:	2100      	movs	r1, #0
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f000 fc83 	bl	8014df8 <USBD_LL_Transmit>

  return USBD_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3708      	adds	r7, #8
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2205      	movs	r2, #5
 8014508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801450c:	2300      	movs	r3, #0
 801450e:	2200      	movs	r2, #0
 8014510:	2100      	movs	r1, #0
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 fc91 	bl	8014e3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
	...

08014524 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014528:	2200      	movs	r2, #0
 801452a:	4912      	ldr	r1, [pc, #72]	; (8014574 <MX_USB_Device_Init+0x50>)
 801452c:	4812      	ldr	r0, [pc, #72]	; (8014578 <MX_USB_Device_Init+0x54>)
 801452e:	f7fe fed9 	bl	80132e4 <USBD_Init>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014538:	f7f1 fb3c 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801453c:	490f      	ldr	r1, [pc, #60]	; (801457c <MX_USB_Device_Init+0x58>)
 801453e:	480e      	ldr	r0, [pc, #56]	; (8014578 <MX_USB_Device_Init+0x54>)
 8014540:	f7fe ff00 	bl	8013344 <USBD_RegisterClass>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d001      	beq.n	801454e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801454a:	f7f1 fb33 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801454e:	490c      	ldr	r1, [pc, #48]	; (8014580 <MX_USB_Device_Init+0x5c>)
 8014550:	4809      	ldr	r0, [pc, #36]	; (8014578 <MX_USB_Device_Init+0x54>)
 8014552:	f7fe fe21 	bl	8013198 <USBD_CDC_RegisterInterface>
 8014556:	4603      	mov	r3, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d001      	beq.n	8014560 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801455c:	f7f1 fb2a 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014560:	4805      	ldr	r0, [pc, #20]	; (8014578 <MX_USB_Device_Init+0x54>)
 8014562:	f7fe ff16 	bl	8013392 <USBD_Start>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d001      	beq.n	8014570 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801456c:	f7f1 fb22 	bl	8005bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014570:	bf00      	nop
 8014572:	bd80      	pop	{r7, pc}
 8014574:	20000130 	.word	0x20000130
 8014578:	20000aac 	.word	0x20000aac
 801457c:	20000018 	.word	0x20000018
 8014580:	2000011c 	.word	0x2000011c

08014584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014588:	2200      	movs	r2, #0
 801458a:	4905      	ldr	r1, [pc, #20]	; (80145a0 <CDC_Init_FS+0x1c>)
 801458c:	4805      	ldr	r0, [pc, #20]	; (80145a4 <CDC_Init_FS+0x20>)
 801458e:	f7fe fe18 	bl	80131c2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014592:	4905      	ldr	r1, [pc, #20]	; (80145a8 <CDC_Init_FS+0x24>)
 8014594:	4803      	ldr	r0, [pc, #12]	; (80145a4 <CDC_Init_FS+0x20>)
 8014596:	f7fe fe32 	bl	80131fe <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801459a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801459c:	4618      	mov	r0, r3
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	200015bc 	.word	0x200015bc
 80145a4:	20000aac 	.word	0x20000aac
 80145a8:	20000dbc 	.word	0x20000dbc

080145ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80145ac:	b480      	push	{r7}
 80145ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80145b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	4603      	mov	r3, r0
 80145c4:	6039      	str	r1, [r7, #0]
 80145c6:	71fb      	strb	r3, [r7, #7]
 80145c8:	4613      	mov	r3, r2
 80145ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	2b23      	cmp	r3, #35	; 0x23
 80145d0:	d85a      	bhi.n	8014688 <CDC_Control_FS+0xcc>
 80145d2:	a201      	add	r2, pc, #4	; (adr r2, 80145d8 <CDC_Control_FS+0x1c>)
 80145d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d8:	08014689 	.word	0x08014689
 80145dc:	08014689 	.word	0x08014689
 80145e0:	08014689 	.word	0x08014689
 80145e4:	08014689 	.word	0x08014689
 80145e8:	08014689 	.word	0x08014689
 80145ec:	08014689 	.word	0x08014689
 80145f0:	08014689 	.word	0x08014689
 80145f4:	08014689 	.word	0x08014689
 80145f8:	08014689 	.word	0x08014689
 80145fc:	08014689 	.word	0x08014689
 8014600:	08014689 	.word	0x08014689
 8014604:	08014689 	.word	0x08014689
 8014608:	08014689 	.word	0x08014689
 801460c:	08014689 	.word	0x08014689
 8014610:	08014689 	.word	0x08014689
 8014614:	08014689 	.word	0x08014689
 8014618:	08014689 	.word	0x08014689
 801461c:	08014689 	.word	0x08014689
 8014620:	08014689 	.word	0x08014689
 8014624:	08014689 	.word	0x08014689
 8014628:	08014689 	.word	0x08014689
 801462c:	08014689 	.word	0x08014689
 8014630:	08014689 	.word	0x08014689
 8014634:	08014689 	.word	0x08014689
 8014638:	08014689 	.word	0x08014689
 801463c:	08014689 	.word	0x08014689
 8014640:	08014689 	.word	0x08014689
 8014644:	08014689 	.word	0x08014689
 8014648:	08014689 	.word	0x08014689
 801464c:	08014689 	.word	0x08014689
 8014650:	08014689 	.word	0x08014689
 8014654:	08014689 	.word	0x08014689
 8014658:	08014689 	.word	0x08014689
 801465c:	08014689 	.word	0x08014689
 8014660:	08014669 	.word	0x08014669
 8014664:	08014689 	.word	0x08014689

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	885b      	ldrh	r3, [r3, #2]
 8014670:	f003 0301 	and.w	r3, r3, #1
 8014674:	2b00      	cmp	r3, #0
 8014676:	d003      	beq.n	8014680 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 8014678:	4b07      	ldr	r3, [pc, #28]	; (8014698 <CDC_Control_FS+0xdc>)
 801467a:	2201      	movs	r2, #1
 801467c:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 801467e:	e004      	b.n	801468a <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8014680:	4b05      	ldr	r3, [pc, #20]	; (8014698 <CDC_Control_FS+0xdc>)
 8014682:	2200      	movs	r2, #0
 8014684:	701a      	strb	r2, [r3, #0]
		break;
 8014686:	e000      	b.n	801468a <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8014688:	bf00      	nop
	}

	return (USBD_OK);
 801468a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801468c:	4618      	mov	r0, r3
 801468e:	3714      	adds	r7, #20
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr
 8014698:	20001dbc 	.word	0x20001dbc

0801469c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	480f      	ldr	r0, [pc, #60]	; (80146e8 <CDC_Receive_FS+0x4c>)
 80146aa:	f7fe fda8 	bl	80131fe <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80146ae:	480e      	ldr	r0, [pc, #56]	; (80146e8 <CDC_Receive_FS+0x4c>)
 80146b0:	f7fe fdee 	bl	8013290 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 80146b4:	2240      	movs	r2, #64	; 0x40
 80146b6:	2100      	movs	r1, #0
 80146b8:	480c      	ldr	r0, [pc, #48]	; (80146ec <CDC_Receive_FS+0x50>)
 80146ba:	f000 fe43 	bl	8015344 <memset>
	uint8_t len = (uint8_t) *Len;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 80146c4:	7bfb      	ldrb	r3, [r7, #15]
 80146c6:	461a      	mov	r2, r3
 80146c8:	6879      	ldr	r1, [r7, #4]
 80146ca:	4808      	ldr	r0, [pc, #32]	; (80146ec <CDC_Receive_FS+0x50>)
 80146cc:	f000 fe12 	bl	80152f4 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 80146d0:	7bfb      	ldrb	r3, [r7, #15]
 80146d2:	461a      	mov	r2, r3
 80146d4:	2100      	movs	r1, #0
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 fe34 	bl	8015344 <memset>

	return (USBD_OK);
 80146dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3710      	adds	r7, #16
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20000aac 	.word	0x20000aac
 80146ec:	20000d7c 	.word	0x20000d7c

080146f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80146fc:	2300      	movs	r3, #0
 80146fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8014700:	4b12      	ldr	r3, [pc, #72]	; (801474c <CDC_Transmit_FS+0x5c>)
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d01b      	beq.n	8014740 <CDC_Transmit_FS+0x50>
 8014708:	4b11      	ldr	r3, [pc, #68]	; (8014750 <CDC_Transmit_FS+0x60>)
 801470a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801470e:	b2db      	uxtb	r3, r3
 8014710:	2b03      	cmp	r3, #3
 8014712:	d115      	bne.n	8014740 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8014714:	4b0e      	ldr	r3, [pc, #56]	; (8014750 <CDC_Transmit_FS+0x60>)
 8014716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801471a:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014722:	2b00      	cmp	r3, #0
 8014724:	d001      	beq.n	801472a <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 8014726:	2301      	movs	r3, #1
 8014728:	e00b      	b.n	8014742 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801472a:	887b      	ldrh	r3, [r7, #2]
 801472c:	461a      	mov	r2, r3
 801472e:	6879      	ldr	r1, [r7, #4]
 8014730:	4807      	ldr	r0, [pc, #28]	; (8014750 <CDC_Transmit_FS+0x60>)
 8014732:	f7fe fd46 	bl	80131c2 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014736:	4806      	ldr	r0, [pc, #24]	; (8014750 <CDC_Transmit_FS+0x60>)
 8014738:	f7fe fd7a 	bl	8013230 <USBD_CDC_TransmitPacket>
 801473c:	4603      	mov	r3, r0
 801473e:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8014740:	7bfb      	ldrb	r3, [r7, #15]
}
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	20001dbc 	.word	0x20001dbc
 8014750:	20000aac 	.word	0x20000aac

08014754 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014754:	b480      	push	{r7}
 8014756:	b087      	sub	sp, #28
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	4613      	mov	r3, r2
 8014760:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014762:	2300      	movs	r3, #0
 8014764:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801476a:	4618      	mov	r0, r3
 801476c:	371c      	adds	r7, #28
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr
	...

08014778 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014778:	b480      	push	{r7}
 801477a:	b083      	sub	sp, #12
 801477c:	af00      	add	r7, sp, #0
 801477e:	4603      	mov	r3, r0
 8014780:	6039      	str	r1, [r7, #0]
 8014782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	2212      	movs	r2, #18
 8014788:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801478a:	4b03      	ldr	r3, [pc, #12]	; (8014798 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801478c:	4618      	mov	r0, r3
 801478e:	370c      	adds	r7, #12
 8014790:	46bd      	mov	sp, r7
 8014792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014796:	4770      	bx	lr
 8014798:	20000150 	.word	0x20000150

0801479c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801479c:	b480      	push	{r7}
 801479e:	b083      	sub	sp, #12
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	4603      	mov	r3, r0
 80147a4:	6039      	str	r1, [r7, #0]
 80147a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	2204      	movs	r2, #4
 80147ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80147ae:	4b03      	ldr	r3, [pc, #12]	; (80147bc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	370c      	adds	r7, #12
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr
 80147bc:	20000164 	.word	0x20000164

080147c0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	4603      	mov	r3, r0
 80147c8:	6039      	str	r1, [r7, #0]
 80147ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d105      	bne.n	80147de <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	4907      	ldr	r1, [pc, #28]	; (80147f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80147d6:	4808      	ldr	r0, [pc, #32]	; (80147f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80147d8:	f7ff fdc3 	bl	8014362 <USBD_GetString>
 80147dc:	e004      	b.n	80147e8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	4904      	ldr	r1, [pc, #16]	; (80147f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80147e2:	4805      	ldr	r0, [pc, #20]	; (80147f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80147e4:	f7ff fdbd 	bl	8014362 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147e8:	4b02      	ldr	r3, [pc, #8]	; (80147f4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	20001dc0 	.word	0x20001dc0
 80147f8:	080183cc 	.word	0x080183cc

080147fc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	4603      	mov	r3, r0
 8014804:	6039      	str	r1, [r7, #0]
 8014806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	4904      	ldr	r1, [pc, #16]	; (801481c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801480c:	4804      	ldr	r0, [pc, #16]	; (8014820 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801480e:	f7ff fda8 	bl	8014362 <USBD_GetString>
  return USBD_StrDesc;
 8014812:	4b02      	ldr	r3, [pc, #8]	; (801481c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014814:	4618      	mov	r0, r3
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	20001dc0 	.word	0x20001dc0
 8014820:	080183e4 	.word	0x080183e4

08014824 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	4603      	mov	r3, r0
 801482c:	6039      	str	r1, [r7, #0]
 801482e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	221a      	movs	r2, #26
 8014834:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014836:	f000 f843 	bl	80148c0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801483a:	4b02      	ldr	r3, [pc, #8]	; (8014844 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801483c:	4618      	mov	r0, r3
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	20000168 	.word	0x20000168

08014848 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	4603      	mov	r3, r0
 8014850:	6039      	str	r1, [r7, #0]
 8014852:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014854:	79fb      	ldrb	r3, [r7, #7]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d105      	bne.n	8014866 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	4907      	ldr	r1, [pc, #28]	; (801487c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801485e:	4808      	ldr	r0, [pc, #32]	; (8014880 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014860:	f7ff fd7f 	bl	8014362 <USBD_GetString>
 8014864:	e004      	b.n	8014870 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014866:	683a      	ldr	r2, [r7, #0]
 8014868:	4904      	ldr	r1, [pc, #16]	; (801487c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801486a:	4805      	ldr	r0, [pc, #20]	; (8014880 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801486c:	f7ff fd79 	bl	8014362 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014870:	4b02      	ldr	r3, [pc, #8]	; (801487c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014872:	4618      	mov	r0, r3
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	20001dc0 	.word	0x20001dc0
 8014880:	080183f8 	.word	0x080183f8

08014884 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	6039      	str	r1, [r7, #0]
 801488e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014890:	79fb      	ldrb	r3, [r7, #7]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d105      	bne.n	80148a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014896:	683a      	ldr	r2, [r7, #0]
 8014898:	4907      	ldr	r1, [pc, #28]	; (80148b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801489a:	4808      	ldr	r0, [pc, #32]	; (80148bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801489c:	f7ff fd61 	bl	8014362 <USBD_GetString>
 80148a0:	e004      	b.n	80148ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80148a2:	683a      	ldr	r2, [r7, #0]
 80148a4:	4904      	ldr	r1, [pc, #16]	; (80148b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80148a6:	4805      	ldr	r0, [pc, #20]	; (80148bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80148a8:	f7ff fd5b 	bl	8014362 <USBD_GetString>
  }
  return USBD_StrDesc;
 80148ac:	4b02      	ldr	r3, [pc, #8]	; (80148b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3708      	adds	r7, #8
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	20001dc0 	.word	0x20001dc0
 80148bc:	08018404 	.word	0x08018404

080148c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b084      	sub	sp, #16
 80148c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148c6:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <Get_SerialNum+0x44>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148cc:	4b0e      	ldr	r3, [pc, #56]	; (8014908 <Get_SerialNum+0x48>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148d2:	4b0e      	ldr	r3, [pc, #56]	; (801490c <Get_SerialNum+0x4c>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	4413      	add	r3, r2
 80148de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d009      	beq.n	80148fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80148e6:	2208      	movs	r2, #8
 80148e8:	4909      	ldr	r1, [pc, #36]	; (8014910 <Get_SerialNum+0x50>)
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f000 f814 	bl	8014918 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80148f0:	2204      	movs	r2, #4
 80148f2:	4908      	ldr	r1, [pc, #32]	; (8014914 <Get_SerialNum+0x54>)
 80148f4:	68b8      	ldr	r0, [r7, #8]
 80148f6:	f000 f80f 	bl	8014918 <IntToUnicode>
  }
}
 80148fa:	bf00      	nop
 80148fc:	3710      	adds	r7, #16
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	1fff7590 	.word	0x1fff7590
 8014908:	1fff7594 	.word	0x1fff7594
 801490c:	1fff7598 	.word	0x1fff7598
 8014910:	2000016a 	.word	0x2000016a
 8014914:	2000017a 	.word	0x2000017a

08014918 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014918:	b480      	push	{r7}
 801491a:	b087      	sub	sp, #28
 801491c:	af00      	add	r7, sp, #0
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	4613      	mov	r3, r2
 8014924:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801492a:	2300      	movs	r3, #0
 801492c:	75fb      	strb	r3, [r7, #23]
 801492e:	e027      	b.n	8014980 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	0f1b      	lsrs	r3, r3, #28
 8014934:	2b09      	cmp	r3, #9
 8014936:	d80b      	bhi.n	8014950 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	0f1b      	lsrs	r3, r3, #28
 801493c:	b2da      	uxtb	r2, r3
 801493e:	7dfb      	ldrb	r3, [r7, #23]
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4619      	mov	r1, r3
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	440b      	add	r3, r1
 8014948:	3230      	adds	r2, #48	; 0x30
 801494a:	b2d2      	uxtb	r2, r2
 801494c:	701a      	strb	r2, [r3, #0]
 801494e:	e00a      	b.n	8014966 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	0f1b      	lsrs	r3, r3, #28
 8014954:	b2da      	uxtb	r2, r3
 8014956:	7dfb      	ldrb	r3, [r7, #23]
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	4619      	mov	r1, r3
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	440b      	add	r3, r1
 8014960:	3237      	adds	r2, #55	; 0x37
 8014962:	b2d2      	uxtb	r2, r2
 8014964:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	011b      	lsls	r3, r3, #4
 801496a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801496c:	7dfb      	ldrb	r3, [r7, #23]
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	3301      	adds	r3, #1
 8014972:	68ba      	ldr	r2, [r7, #8]
 8014974:	4413      	add	r3, r2
 8014976:	2200      	movs	r2, #0
 8014978:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801497a:	7dfb      	ldrb	r3, [r7, #23]
 801497c:	3301      	adds	r3, #1
 801497e:	75fb      	strb	r3, [r7, #23]
 8014980:	7dfa      	ldrb	r2, [r7, #23]
 8014982:	79fb      	ldrb	r3, [r7, #7]
 8014984:	429a      	cmp	r2, r3
 8014986:	d3d3      	bcc.n	8014930 <IntToUnicode+0x18>
  }
}
 8014988:	bf00      	nop
 801498a:	bf00      	nop
 801498c:	371c      	adds	r7, #28
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr
	...

08014998 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b098      	sub	sp, #96	; 0x60
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80149a0:	f107 030c 	add.w	r3, r7, #12
 80149a4:	2254      	movs	r2, #84	; 0x54
 80149a6:	2100      	movs	r1, #0
 80149a8:	4618      	mov	r0, r3
 80149aa:	f000 fccb 	bl	8015344 <memset>
  if(pcdHandle->Instance==USB)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	4a15      	ldr	r2, [pc, #84]	; (8014a08 <HAL_PCD_MspInit+0x70>)
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d122      	bne.n	80149fe <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80149b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80149bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80149be:	2300      	movs	r3, #0
 80149c0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80149c2:	f107 030c 	add.w	r3, r7, #12
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7f8 fcc4 	bl	800d354 <HAL_RCCEx_PeriphCLKConfig>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80149d2:	f7f1 f8ef 	bl	8005bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80149d6:	4b0d      	ldr	r3, [pc, #52]	; (8014a0c <HAL_PCD_MspInit+0x74>)
 80149d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149da:	4a0c      	ldr	r2, [pc, #48]	; (8014a0c <HAL_PCD_MspInit+0x74>)
 80149dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80149e0:	6593      	str	r3, [r2, #88]	; 0x58
 80149e2:	4b0a      	ldr	r3, [pc, #40]	; (8014a0c <HAL_PCD_MspInit+0x74>)
 80149e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80149ea:	60bb      	str	r3, [r7, #8]
 80149ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80149ee:	2200      	movs	r2, #0
 80149f0:	2100      	movs	r1, #0
 80149f2:	2014      	movs	r0, #20
 80149f4:	f7f4 f97f 	bl	8008cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80149f8:	2014      	movs	r0, #20
 80149fa:	f7f4 f996 	bl	8008d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80149fe:	bf00      	nop
 8014a00:	3760      	adds	r7, #96	; 0x60
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	40005c00 	.word	0x40005c00
 8014a0c:	40021000 	.word	0x40021000

08014a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014a24:	4619      	mov	r1, r3
 8014a26:	4610      	mov	r0, r2
 8014a28:	f7fe fcfe 	bl	8013428 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014a46:	78fa      	ldrb	r2, [r7, #3]
 8014a48:	6879      	ldr	r1, [r7, #4]
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	78fb      	ldrb	r3, [r7, #3]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	f7fe fd38 	bl	80134d2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014a62:	bf00      	nop
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	460b      	mov	r3, r1
 8014a74:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014a7c:	78fa      	ldrb	r2, [r7, #3]
 8014a7e:	6879      	ldr	r1, [r7, #4]
 8014a80:	4613      	mov	r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	4413      	add	r3, r2
 8014a86:	00db      	lsls	r3, r3, #3
 8014a88:	440b      	add	r3, r1
 8014a8a:	333c      	adds	r3, #60	; 0x3c
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	78fb      	ldrb	r3, [r7, #3]
 8014a90:	4619      	mov	r1, r3
 8014a92:	f7fe fd81 	bl	8013598 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014a96:	bf00      	nop
 8014a98:	3708      	adds	r7, #8
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}

08014a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	b082      	sub	sp, #8
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7fe fe95 	bl	80137dc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014ab2:	bf00      	nop
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}

08014aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014aba:	b580      	push	{r7, lr}
 8014abc:	b084      	sub	sp, #16
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	689b      	ldr	r3, [r3, #8]
 8014aca:	2b02      	cmp	r3, #2
 8014acc:	d001      	beq.n	8014ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014ace:	f7f1 f871 	bl	8005bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014ad8:	7bfa      	ldrb	r2, [r7, #15]
 8014ada:	4611      	mov	r1, r2
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7fe fe3f 	bl	8013760 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7fe fdeb 	bl	80136c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014aee:	bf00      	nop
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
	...

08014af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fe fe3a 	bl	8013780 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	699b      	ldr	r3, [r3, #24]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d005      	beq.n	8014b20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b14:	4b04      	ldr	r3, [pc, #16]	; (8014b28 <HAL_PCD_SuspendCallback+0x30>)
 8014b16:	691b      	ldr	r3, [r3, #16]
 8014b18:	4a03      	ldr	r2, [pc, #12]	; (8014b28 <HAL_PCD_SuspendCallback+0x30>)
 8014b1a:	f043 0306 	orr.w	r3, r3, #6
 8014b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014b20:	bf00      	nop
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	e000ed00 	.word	0xe000ed00

08014b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	699b      	ldr	r3, [r3, #24]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d007      	beq.n	8014b4c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b3c:	4b08      	ldr	r3, [pc, #32]	; (8014b60 <HAL_PCD_ResumeCallback+0x34>)
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	4a07      	ldr	r2, [pc, #28]	; (8014b60 <HAL_PCD_ResumeCallback+0x34>)
 8014b42:	f023 0306 	bic.w	r3, r3, #6
 8014b46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014b48:	f000 f9fa 	bl	8014f40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fe fe2a 	bl	80137ac <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014b58:	bf00      	nop
 8014b5a:	3708      	adds	r7, #8
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	e000ed00 	.word	0xe000ed00

08014b64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014b6c:	4a2b      	ldr	r2, [pc, #172]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	4a29      	ldr	r2, [pc, #164]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8014b7c:	4b27      	ldr	r3, [pc, #156]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b7e:	4a28      	ldr	r2, [pc, #160]	; (8014c20 <USBD_LL_Init+0xbc>)
 8014b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014b82:	4b26      	ldr	r3, [pc, #152]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b84:	2208      	movs	r2, #8
 8014b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014b88:	4b24      	ldr	r3, [pc, #144]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b8a:	2202      	movs	r2, #2
 8014b8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014b8e:	4b23      	ldr	r3, [pc, #140]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b90:	2202      	movs	r2, #2
 8014b92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014b94:	4b21      	ldr	r3, [pc, #132]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014b9a:	4b20      	ldr	r3, [pc, #128]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014ba0:	4b1e      	ldr	r3, [pc, #120]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014ba6:	4b1d      	ldr	r3, [pc, #116]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014ba8:	2200      	movs	r2, #0
 8014baa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014bac:	481b      	ldr	r0, [pc, #108]	; (8014c1c <USBD_LL_Init+0xb8>)
 8014bae:	f7f6 f8c5 	bl	800ad3c <HAL_PCD_Init>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d001      	beq.n	8014bbc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8014bb8:	f7f0 fffc 	bl	8005bb4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bc2:	2318      	movs	r3, #24
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	2100      	movs	r1, #0
 8014bc8:	f7f7 fd7e 	bl	800c6c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bd2:	2358      	movs	r3, #88	; 0x58
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	2180      	movs	r1, #128	; 0x80
 8014bd8:	f7f7 fd76 	bl	800c6c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014be2:	23c0      	movs	r3, #192	; 0xc0
 8014be4:	2200      	movs	r2, #0
 8014be6:	2181      	movs	r1, #129	; 0x81
 8014be8:	f7f7 fd6e 	bl	800c6c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bf2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	2101      	movs	r1, #1
 8014bfa:	f7f7 fd65 	bl	800c6c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c08:	2200      	movs	r2, #0
 8014c0a:	2182      	movs	r1, #130	; 0x82
 8014c0c:	f7f7 fd5c 	bl	800c6c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014c10:	2300      	movs	r3, #0
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3708      	adds	r7, #8
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	20001fc0 	.word	0x20001fc0
 8014c20:	40005c00 	.word	0x40005c00

08014c24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c30:	2300      	movs	r3, #0
 8014c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7f6 f963 	bl	800af06 <HAL_PCD_Start>
 8014c40:	4603      	mov	r3, r0
 8014c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c44:	7bfb      	ldrb	r3, [r7, #15]
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 f9c8 	bl	8014fdc <USBD_Get_USB_Status>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b084      	sub	sp, #16
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	6078      	str	r0, [r7, #4]
 8014c62:	4608      	mov	r0, r1
 8014c64:	4611      	mov	r1, r2
 8014c66:	461a      	mov	r2, r3
 8014c68:	4603      	mov	r3, r0
 8014c6a:	70fb      	strb	r3, [r7, #3]
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	70bb      	strb	r3, [r7, #2]
 8014c70:	4613      	mov	r3, r2
 8014c72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c74:	2300      	movs	r3, #0
 8014c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c82:	78bb      	ldrb	r3, [r7, #2]
 8014c84:	883a      	ldrh	r2, [r7, #0]
 8014c86:	78f9      	ldrb	r1, [r7, #3]
 8014c88:	f7f6 faab 	bl	800b1e2 <HAL_PCD_EP_Open>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
 8014c92:	4618      	mov	r0, r3
 8014c94:	f000 f9a2 	bl	8014fdc <USBD_Get_USB_Status>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ca6:	b580      	push	{r7, lr}
 8014ca8:	b084      	sub	sp, #16
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	6078      	str	r0, [r7, #4]
 8014cae:	460b      	mov	r3, r1
 8014cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cc0:	78fa      	ldrb	r2, [r7, #3]
 8014cc2:	4611      	mov	r1, r2
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f6 faf2 	bl	800b2ae <HAL_PCD_EP_Close>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cce:	7bfb      	ldrb	r3, [r7, #15]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f000 f983 	bl	8014fdc <USBD_Get_USB_Status>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3710      	adds	r7, #16
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	460b      	mov	r3, r1
 8014cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cfe:	78fa      	ldrb	r2, [r7, #3]
 8014d00:	4611      	mov	r1, r2
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7f6 fbb3 	bl	800b46e <HAL_PCD_EP_SetStall>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 f964 	bl	8014fdc <USBD_Get_USB_Status>
 8014d14:	4603      	mov	r3, r0
 8014d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3710      	adds	r7, #16
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b084      	sub	sp, #16
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d3c:	78fa      	ldrb	r2, [r7, #3]
 8014d3e:	4611      	mov	r1, r2
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f6 fbe6 	bl	800b512 <HAL_PCD_EP_ClrStall>
 8014d46:	4603      	mov	r3, r0
 8014d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f945 	bl	8014fdc <USBD_Get_USB_Status>
 8014d52:	4603      	mov	r3, r0
 8014d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b085      	sub	sp, #20
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	da0c      	bge.n	8014d96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014d7c:	78fb      	ldrb	r3, [r7, #3]
 8014d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d82:	68f9      	ldr	r1, [r7, #12]
 8014d84:	1c5a      	adds	r2, r3, #1
 8014d86:	4613      	mov	r3, r2
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	4413      	add	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	440b      	add	r3, r1
 8014d90:	3302      	adds	r3, #2
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	e00b      	b.n	8014dae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014d96:	78fb      	ldrb	r3, [r7, #3]
 8014d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d9c:	68f9      	ldr	r1, [r7, #12]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4413      	add	r3, r2
 8014da4:	00db      	lsls	r3, r3, #3
 8014da6:	440b      	add	r3, r1
 8014da8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014dac:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3714      	adds	r7, #20
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b084      	sub	sp, #16
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dd4:	78fa      	ldrb	r2, [r7, #3]
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7f6 f9dd 	bl	800b198 <HAL_PCD_SetAddress>
 8014dde:	4603      	mov	r3, r0
 8014de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014de2:	7bfb      	ldrb	r3, [r7, #15]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f000 f8f9 	bl	8014fdc <USBD_Get_USB_Status>
 8014dea:	4603      	mov	r3, r0
 8014dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3710      	adds	r7, #16
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b086      	sub	sp, #24
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	60f8      	str	r0, [r7, #12]
 8014e00:	607a      	str	r2, [r7, #4]
 8014e02:	603b      	str	r3, [r7, #0]
 8014e04:	460b      	mov	r3, r1
 8014e06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e16:	7af9      	ldrb	r1, [r7, #11]
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	f7f6 fae4 	bl	800b3e8 <HAL_PCD_EP_Transmit>
 8014e20:	4603      	mov	r3, r0
 8014e22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e24:	7dfb      	ldrb	r3, [r7, #23]
 8014e26:	4618      	mov	r0, r3
 8014e28:	f000 f8d8 	bl	8014fdc <USBD_Get_USB_Status>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e30:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3718      	adds	r7, #24
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b086      	sub	sp, #24
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	60f8      	str	r0, [r7, #12]
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	603b      	str	r3, [r7, #0]
 8014e46:	460b      	mov	r3, r1
 8014e48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e58:	7af9      	ldrb	r1, [r7, #11]
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	f7f6 fa6e 	bl	800b33e <HAL_PCD_EP_Receive>
 8014e62:	4603      	mov	r3, r0
 8014e64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e66:	7dfb      	ldrb	r3, [r7, #23]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f000 f8b7 	bl	8014fdc <USBD_Get_USB_Status>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e72:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3718      	adds	r7, #24
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	460b      	mov	r3, r1
 8014e86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e8e:	78fa      	ldrb	r2, [r7, #3]
 8014e90:	4611      	mov	r1, r2
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f6 fa90 	bl	800b3b8 <HAL_PCD_EP_GetRxCount>
 8014e98:	4603      	mov	r3, r0
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3708      	adds	r7, #8
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
	...

08014ea4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	460b      	mov	r3, r1
 8014eae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8014eb0:	78fb      	ldrb	r3, [r7, #3]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d002      	beq.n	8014ebc <HAL_PCDEx_LPM_Callback+0x18>
 8014eb6:	2b01      	cmp	r3, #1
 8014eb8:	d013      	beq.n	8014ee2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8014eba:	e023      	b.n	8014f04 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	699b      	ldr	r3, [r3, #24]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d007      	beq.n	8014ed4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014ec4:	f000 f83c 	bl	8014f40 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ec8:	4b10      	ldr	r3, [pc, #64]	; (8014f0c <HAL_PCDEx_LPM_Callback+0x68>)
 8014eca:	691b      	ldr	r3, [r3, #16]
 8014ecc:	4a0f      	ldr	r2, [pc, #60]	; (8014f0c <HAL_PCDEx_LPM_Callback+0x68>)
 8014ece:	f023 0306 	bic.w	r3, r3, #6
 8014ed2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe fc66 	bl	80137ac <USBD_LL_Resume>
    break;
 8014ee0:	e010      	b.n	8014f04 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fe fc49 	bl	8013780 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	699b      	ldr	r3, [r3, #24]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d005      	beq.n	8014f02 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ef6:	4b05      	ldr	r3, [pc, #20]	; (8014f0c <HAL_PCDEx_LPM_Callback+0x68>)
 8014ef8:	691b      	ldr	r3, [r3, #16]
 8014efa:	4a04      	ldr	r2, [pc, #16]	; (8014f0c <HAL_PCDEx_LPM_Callback+0x68>)
 8014efc:	f043 0306 	orr.w	r3, r3, #6
 8014f00:	6113      	str	r3, [r2, #16]
    break;
 8014f02:	bf00      	nop
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	e000ed00 	.word	0xe000ed00

08014f10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014f10:	b480      	push	{r7}
 8014f12:	b083      	sub	sp, #12
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014f18:	4b03      	ldr	r3, [pc, #12]	; (8014f28 <USBD_static_malloc+0x18>)
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	370c      	adds	r7, #12
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	200022b4 	.word	0x200022b4

08014f2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]

}
 8014f34:	bf00      	nop
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b094      	sub	sp, #80	; 0x50
 8014f44:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014f46:	f107 0318 	add.w	r3, r7, #24
 8014f4a:	2238      	movs	r2, #56	; 0x38
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f000 f9f8 	bl	8015344 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014f54:	1d3b      	adds	r3, r7, #4
 8014f56:	2200      	movs	r2, #0
 8014f58:	601a      	str	r2, [r3, #0]
 8014f5a:	605a      	str	r2, [r3, #4]
 8014f5c:	609a      	str	r2, [r3, #8]
 8014f5e:	60da      	str	r2, [r3, #12]
 8014f60:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014f62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014f66:	f7f7 fc1d 	bl	800c7a4 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8014f6a:	2322      	movs	r3, #34	; 0x22
 8014f6c:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8014f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014f72:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8014f74:	2340      	movs	r3, #64	; 0x40
 8014f76:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8014f78:	2301      	movs	r3, #1
 8014f7a:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8014f80:	2302      	movs	r3, #2
 8014f82:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8014f84:	2301      	movs	r3, #1
 8014f86:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 8014f88:	2310      	movs	r3, #16
 8014f8a:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8014f8c:	2302      	movs	r3, #2
 8014f8e:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8014f90:	2302      	movs	r3, #2
 8014f92:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8014f94:	2302      	movs	r3, #2
 8014f96:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014f98:	f107 0318 	add.w	r3, r7, #24
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7f7 fca5 	bl	800c8ec <HAL_RCC_OscConfig>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d001      	beq.n	8014fac <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 8014fa8:	f7f0 fe04 	bl	8005bb4 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014fac:	230f      	movs	r3, #15
 8014fae:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014fb0:	2303      	movs	r3, #3
 8014fb2:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8014fc0:	1d3b      	adds	r3, r7, #4
 8014fc2:	2103      	movs	r1, #3
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7f7 ffa9 	bl	800cf1c <HAL_RCC_ClockConfig>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d001      	beq.n	8014fd4 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8014fd0:	f7f0 fdf0 	bl	8005bb4 <Error_Handler>
		  }

}
 8014fd4:	bf00      	nop
 8014fd6:	3750      	adds	r7, #80	; 0x50
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b085      	sub	sp, #20
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014fea:	79fb      	ldrb	r3, [r7, #7]
 8014fec:	2b03      	cmp	r3, #3
 8014fee:	d817      	bhi.n	8015020 <USBD_Get_USB_Status+0x44>
 8014ff0:	a201      	add	r2, pc, #4	; (adr r2, 8014ff8 <USBD_Get_USB_Status+0x1c>)
 8014ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ff6:	bf00      	nop
 8014ff8:	08015009 	.word	0x08015009
 8014ffc:	0801500f 	.word	0x0801500f
 8015000:	08015015 	.word	0x08015015
 8015004:	0801501b 	.word	0x0801501b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015008:	2300      	movs	r3, #0
 801500a:	73fb      	strb	r3, [r7, #15]
    break;
 801500c:	e00b      	b.n	8015026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801500e:	2303      	movs	r3, #3
 8015010:	73fb      	strb	r3, [r7, #15]
    break;
 8015012:	e008      	b.n	8015026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015014:	2301      	movs	r3, #1
 8015016:	73fb      	strb	r3, [r7, #15]
    break;
 8015018:	e005      	b.n	8015026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801501a:	2303      	movs	r3, #3
 801501c:	73fb      	strb	r3, [r7, #15]
    break;
 801501e:	e002      	b.n	8015026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015020:	2303      	movs	r3, #3
 8015022:	73fb      	strb	r3, [r7, #15]
    break;
 8015024:	bf00      	nop
  }
  return usb_status;
 8015026:	7bfb      	ldrb	r3, [r7, #15]
}
 8015028:	4618      	mov	r0, r3
 801502a:	3714      	adds	r7, #20
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8015034:	b10a      	cbz	r2, 801503a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8015036:	f000 b95d 	b.w	80152f4 <memcpy>
 801503a:	4770      	bx	lr

0801503c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801503c:	b508      	push	{r3, lr}
 801503e:	680b      	ldr	r3, [r1, #0]
 8015040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015044:	d302      	bcc.n	801504c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015046:	480d      	ldr	r0, [pc, #52]	; (801507c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015048:	f000 f906 	bl	8015258 <_ZSt20__throw_length_errorPKc>
 801504c:	4293      	cmp	r3, r2
 801504e:	d90b      	bls.n	8015068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015050:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015054:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015058:	d206      	bcs.n	8015068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801505a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801505e:	bf2a      	itet	cs
 8015060:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015064:	6008      	strcc	r0, [r1, #0]
 8015066:	600b      	strcs	r3, [r1, #0]
 8015068:	6808      	ldr	r0, [r1, #0]
 801506a:	3001      	adds	r0, #1
 801506c:	d501      	bpl.n	8015072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801506e:	f000 f8f0 	bl	8015252 <_ZSt17__throw_bad_allocv>
 8015072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015076:	f000 b8db 	b.w	8015230 <_Znwj>
 801507a:	bf00      	nop
 801507c:	08018554 	.word	0x08018554

08015080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015080:	f850 3b08 	ldr.w	r3, [r0], #8
 8015084:	4283      	cmp	r3, r0
 8015086:	d002      	beq.n	801508e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8015088:	4618      	mov	r0, r3
 801508a:	f000 b8cf 	b.w	801522c <_ZdlPv>
 801508e:	4770      	bx	lr

08015090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8015090:	6840      	ldr	r0, [r0, #4]
 8015092:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8015096:	3901      	subs	r1, #1
 8015098:	1a09      	subs	r1, r1, r0
 801509a:	4291      	cmp	r1, r2
 801509c:	b508      	push	{r3, lr}
 801509e:	d202      	bcs.n	80150a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80150a0:	4618      	mov	r0, r3
 80150a2:	f000 f8d9 	bl	8015258 <_ZSt20__throw_length_errorPKc>
 80150a6:	bd08      	pop	{r3, pc}

080150a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80150a8:	2a01      	cmp	r2, #1
 80150aa:	b410      	push	{r4}
 80150ac:	d104      	bne.n	80150b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80150ae:	780a      	ldrb	r2, [r1, #0]
 80150b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150b4:	7002      	strb	r2, [r0, #0]
 80150b6:	4770      	bx	lr
 80150b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150bc:	f7ff bfba 	b.w	8015034 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080150c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80150c0:	2a01      	cmp	r2, #1
 80150c2:	b430      	push	{r4, r5}
 80150c4:	d103      	bne.n	80150ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80150c6:	780b      	ldrb	r3, [r1, #0]
 80150c8:	7003      	strb	r3, [r0, #0]
 80150ca:	bc30      	pop	{r4, r5}
 80150cc:	4770      	bx	lr
 80150ce:	2a00      	cmp	r2, #0
 80150d0:	d0fb      	beq.n	80150ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80150d2:	bc30      	pop	{r4, r5}
 80150d4:	f000 b91c 	b.w	8015310 <memmove>

080150d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80150d8:	460b      	mov	r3, r1
 80150da:	2b01      	cmp	r3, #1
 80150dc:	b410      	push	{r4}
 80150de:	4611      	mov	r1, r2
 80150e0:	4604      	mov	r4, r0
 80150e2:	d103      	bne.n	80150ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80150e4:	7022      	strb	r2, [r4, #0]
 80150e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ea:	4770      	bx	lr
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d0fa      	beq.n	80150e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80150f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150f4:	461a      	mov	r2, r3
 80150f6:	f000 b925 	b.w	8015344 <memset>

080150fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80150fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80150fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015100:	461f      	mov	r7, r3
 8015102:	6843      	ldr	r3, [r0, #4]
 8015104:	eb01 0802 	add.w	r8, r1, r2
 8015108:	1ab2      	subs	r2, r6, r2
 801510a:	441a      	add	r2, r3
 801510c:	eba3 0908 	sub.w	r9, r3, r8
 8015110:	4603      	mov	r3, r0
 8015112:	9201      	str	r2, [sp, #4]
 8015114:	f853 2b08 	ldr.w	r2, [r3], #8
 8015118:	429a      	cmp	r2, r3
 801511a:	bf18      	it	ne
 801511c:	6882      	ldrne	r2, [r0, #8]
 801511e:	460d      	mov	r5, r1
 8015120:	bf08      	it	eq
 8015122:	220f      	moveq	r2, #15
 8015124:	a901      	add	r1, sp, #4
 8015126:	4604      	mov	r4, r0
 8015128:	f7ff ff88 	bl	801503c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801512c:	4682      	mov	sl, r0
 801512e:	b11d      	cbz	r5, 8015138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8015130:	6821      	ldr	r1, [r4, #0]
 8015132:	462a      	mov	r2, r5
 8015134:	f7ff ffb8 	bl	80150a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015138:	b137      	cbz	r7, 8015148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801513a:	b12e      	cbz	r6, 8015148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801513c:	4632      	mov	r2, r6
 801513e:	4639      	mov	r1, r7
 8015140:	eb0a 0005 	add.w	r0, sl, r5
 8015144:	f7ff ffb0 	bl	80150a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015148:	f1b9 0f00 	cmp.w	r9, #0
 801514c:	d007      	beq.n	801515e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801514e:	6821      	ldr	r1, [r4, #0]
 8015150:	4435      	add	r5, r6
 8015152:	464a      	mov	r2, r9
 8015154:	4441      	add	r1, r8
 8015156:	eb0a 0005 	add.w	r0, sl, r5
 801515a:	f7ff ffa5 	bl	80150a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801515e:	4620      	mov	r0, r4
 8015160:	f7ff ff8e 	bl	8015080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015164:	9b01      	ldr	r3, [sp, #4]
 8015166:	f8c4 a000 	str.w	sl, [r4]
 801516a:	60a3      	str	r3, [r4, #8]
 801516c:	b002      	add	sp, #8
 801516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8015172:	f100 0208 	add.w	r2, r0, #8
 8015176:	6002      	str	r2, [r0, #0]
 8015178:	2200      	movs	r2, #0
 801517a:	6042      	str	r2, [r0, #4]
 801517c:	7202      	strb	r2, [r0, #8]
 801517e:	4770      	bx	lr

08015180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015180:	b510      	push	{r4, lr}
 8015182:	4604      	mov	r4, r0
 8015184:	f7ff ff7c 	bl	8015080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015188:	4620      	mov	r0, r4
 801518a:	bd10      	pop	{r4, pc}

0801518c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801518c:	6800      	ldr	r0, [r0, #0]
 801518e:	4408      	add	r0, r1
 8015190:	4770      	bx	lr
	...

08015194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8015194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015198:	4616      	mov	r6, r2
 801519a:	461d      	mov	r5, r3
 801519c:	4604      	mov	r4, r0
 801519e:	4b1c      	ldr	r3, [pc, #112]	; (8015210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 80151a0:	462a      	mov	r2, r5
 80151a2:	460f      	mov	r7, r1
 80151a4:	4631      	mov	r1, r6
 80151a6:	f7ff ff73 	bl	8015090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80151aa:	4623      	mov	r3, r4
 80151ac:	6862      	ldr	r2, [r4, #4]
 80151ae:	f853 0b08 	ldr.w	r0, [r3], #8
 80151b2:	4298      	cmp	r0, r3
 80151b4:	bf18      	it	ne
 80151b6:	68a3      	ldrne	r3, [r4, #8]
 80151b8:	eba5 0806 	sub.w	r8, r5, r6
 80151bc:	4490      	add	r8, r2
 80151be:	bf08      	it	eq
 80151c0:	230f      	moveq	r3, #15
 80151c2:	4543      	cmp	r3, r8
 80151c4:	d31b      	bcc.n	80151fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80151c6:	19f3      	adds	r3, r6, r7
 80151c8:	1ad2      	subs	r2, r2, r3
 80151ca:	d006      	beq.n	80151da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80151cc:	42ae      	cmp	r6, r5
 80151ce:	d004      	beq.n	80151da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80151d0:	4438      	add	r0, r7
 80151d2:	1981      	adds	r1, r0, r6
 80151d4:	4428      	add	r0, r5
 80151d6:	f7ff ff73 	bl	80150c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80151da:	b135      	cbz	r5, 80151ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80151dc:	6820      	ldr	r0, [r4, #0]
 80151de:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80151e2:	4629      	mov	r1, r5
 80151e4:	4438      	add	r0, r7
 80151e6:	f7ff ff77 	bl	80150d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80151ea:	6823      	ldr	r3, [r4, #0]
 80151ec:	f8c4 8004 	str.w	r8, [r4, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	4620      	mov	r0, r4
 80151f4:	f803 2008 	strb.w	r2, [r3, r8]
 80151f8:	b002      	add	sp, #8
 80151fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151fe:	9500      	str	r5, [sp, #0]
 8015200:	2300      	movs	r3, #0
 8015202:	4632      	mov	r2, r6
 8015204:	4639      	mov	r1, r7
 8015206:	4620      	mov	r0, r4
 8015208:	f7ff ff77 	bl	80150fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801520c:	e7e5      	b.n	80151da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 801520e:	bf00      	nop
 8015210:	0801856c 	.word	0x0801856c

08015214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 8015214:	b507      	push	{r0, r1, r2, lr}
 8015216:	9200      	str	r2, [sp, #0]
 8015218:	460b      	mov	r3, r1
 801521a:	6842      	ldr	r2, [r0, #4]
 801521c:	2100      	movs	r1, #0
 801521e:	f7ff ffb9 	bl	8015194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8015222:	b003      	add	sp, #12
 8015224:	f85d fb04 	ldr.w	pc, [sp], #4

08015228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015228:	6800      	ldr	r0, [r0, #0]
 801522a:	4770      	bx	lr

0801522c <_ZdlPv>:
 801522c:	f000 b85a 	b.w	80152e4 <free>

08015230 <_Znwj>:
 8015230:	2801      	cmp	r0, #1
 8015232:	bf38      	it	cc
 8015234:	2001      	movcc	r0, #1
 8015236:	b510      	push	{r4, lr}
 8015238:	4604      	mov	r4, r0
 801523a:	4620      	mov	r0, r4
 801523c:	f000 f84a 	bl	80152d4 <malloc>
 8015240:	b930      	cbnz	r0, 8015250 <_Znwj+0x20>
 8015242:	f000 f80d 	bl	8015260 <_ZSt15get_new_handlerv>
 8015246:	b908      	cbnz	r0, 801524c <_Znwj+0x1c>
 8015248:	f000 f812 	bl	8015270 <abort>
 801524c:	4780      	blx	r0
 801524e:	e7f4      	b.n	801523a <_Znwj+0xa>
 8015250:	bd10      	pop	{r4, pc}

08015252 <_ZSt17__throw_bad_allocv>:
 8015252:	b508      	push	{r3, lr}
 8015254:	f000 f80c 	bl	8015270 <abort>

08015258 <_ZSt20__throw_length_errorPKc>:
 8015258:	b508      	push	{r3, lr}
 801525a:	f000 f809 	bl	8015270 <abort>
	...

08015260 <_ZSt15get_new_handlerv>:
 8015260:	4b02      	ldr	r3, [pc, #8]	; (801526c <_ZSt15get_new_handlerv+0xc>)
 8015262:	6818      	ldr	r0, [r3, #0]
 8015264:	f3bf 8f5b 	dmb	ish
 8015268:	4770      	bx	lr
 801526a:	bf00      	nop
 801526c:	200024d4 	.word	0x200024d4

08015270 <abort>:
 8015270:	b508      	push	{r3, lr}
 8015272:	2006      	movs	r0, #6
 8015274:	f000 fe7e 	bl	8015f74 <raise>
 8015278:	2001      	movs	r0, #1
 801527a:	f7f1 fb9d 	bl	80069b8 <_exit>
	...

08015280 <__errno>:
 8015280:	4b01      	ldr	r3, [pc, #4]	; (8015288 <__errno+0x8>)
 8015282:	6818      	ldr	r0, [r3, #0]
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	20000184 	.word	0x20000184

0801528c <__libc_init_array>:
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	4d0d      	ldr	r5, [pc, #52]	; (80152c4 <__libc_init_array+0x38>)
 8015290:	4c0d      	ldr	r4, [pc, #52]	; (80152c8 <__libc_init_array+0x3c>)
 8015292:	1b64      	subs	r4, r4, r5
 8015294:	10a4      	asrs	r4, r4, #2
 8015296:	2600      	movs	r6, #0
 8015298:	42a6      	cmp	r6, r4
 801529a:	d109      	bne.n	80152b0 <__libc_init_array+0x24>
 801529c:	4d0b      	ldr	r5, [pc, #44]	; (80152cc <__libc_init_array+0x40>)
 801529e:	4c0c      	ldr	r4, [pc, #48]	; (80152d0 <__libc_init_array+0x44>)
 80152a0:	f002 fde0 	bl	8017e64 <_init>
 80152a4:	1b64      	subs	r4, r4, r5
 80152a6:	10a4      	asrs	r4, r4, #2
 80152a8:	2600      	movs	r6, #0
 80152aa:	42a6      	cmp	r6, r4
 80152ac:	d105      	bne.n	80152ba <__libc_init_array+0x2e>
 80152ae:	bd70      	pop	{r4, r5, r6, pc}
 80152b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80152b4:	4798      	blx	r3
 80152b6:	3601      	adds	r6, #1
 80152b8:	e7ee      	b.n	8015298 <__libc_init_array+0xc>
 80152ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80152be:	4798      	blx	r3
 80152c0:	3601      	adds	r6, #1
 80152c2:	e7f2      	b.n	80152aa <__libc_init_array+0x1e>
 80152c4:	0801896c 	.word	0x0801896c
 80152c8:	0801896c 	.word	0x0801896c
 80152cc:	0801896c 	.word	0x0801896c
 80152d0:	08018970 	.word	0x08018970

080152d4 <malloc>:
 80152d4:	4b02      	ldr	r3, [pc, #8]	; (80152e0 <malloc+0xc>)
 80152d6:	4601      	mov	r1, r0
 80152d8:	6818      	ldr	r0, [r3, #0]
 80152da:	f000 b8a7 	b.w	801542c <_malloc_r>
 80152de:	bf00      	nop
 80152e0:	20000184 	.word	0x20000184

080152e4 <free>:
 80152e4:	4b02      	ldr	r3, [pc, #8]	; (80152f0 <free+0xc>)
 80152e6:	4601      	mov	r1, r0
 80152e8:	6818      	ldr	r0, [r3, #0]
 80152ea:	f000 b833 	b.w	8015354 <_free_r>
 80152ee:	bf00      	nop
 80152f0:	20000184 	.word	0x20000184

080152f4 <memcpy>:
 80152f4:	440a      	add	r2, r1
 80152f6:	4291      	cmp	r1, r2
 80152f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80152fc:	d100      	bne.n	8015300 <memcpy+0xc>
 80152fe:	4770      	bx	lr
 8015300:	b510      	push	{r4, lr}
 8015302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015306:	f803 4f01 	strb.w	r4, [r3, #1]!
 801530a:	4291      	cmp	r1, r2
 801530c:	d1f9      	bne.n	8015302 <memcpy+0xe>
 801530e:	bd10      	pop	{r4, pc}

08015310 <memmove>:
 8015310:	4288      	cmp	r0, r1
 8015312:	b510      	push	{r4, lr}
 8015314:	eb01 0402 	add.w	r4, r1, r2
 8015318:	d902      	bls.n	8015320 <memmove+0x10>
 801531a:	4284      	cmp	r4, r0
 801531c:	4623      	mov	r3, r4
 801531e:	d807      	bhi.n	8015330 <memmove+0x20>
 8015320:	1e43      	subs	r3, r0, #1
 8015322:	42a1      	cmp	r1, r4
 8015324:	d008      	beq.n	8015338 <memmove+0x28>
 8015326:	f811 2b01 	ldrb.w	r2, [r1], #1
 801532a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801532e:	e7f8      	b.n	8015322 <memmove+0x12>
 8015330:	4402      	add	r2, r0
 8015332:	4601      	mov	r1, r0
 8015334:	428a      	cmp	r2, r1
 8015336:	d100      	bne.n	801533a <memmove+0x2a>
 8015338:	bd10      	pop	{r4, pc}
 801533a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801533e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015342:	e7f7      	b.n	8015334 <memmove+0x24>

08015344 <memset>:
 8015344:	4402      	add	r2, r0
 8015346:	4603      	mov	r3, r0
 8015348:	4293      	cmp	r3, r2
 801534a:	d100      	bne.n	801534e <memset+0xa>
 801534c:	4770      	bx	lr
 801534e:	f803 1b01 	strb.w	r1, [r3], #1
 8015352:	e7f9      	b.n	8015348 <memset+0x4>

08015354 <_free_r>:
 8015354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015356:	2900      	cmp	r1, #0
 8015358:	d044      	beq.n	80153e4 <_free_r+0x90>
 801535a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801535e:	9001      	str	r0, [sp, #4]
 8015360:	2b00      	cmp	r3, #0
 8015362:	f1a1 0404 	sub.w	r4, r1, #4
 8015366:	bfb8      	it	lt
 8015368:	18e4      	addlt	r4, r4, r3
 801536a:	f001 ff7f 	bl	801726c <__malloc_lock>
 801536e:	4a1e      	ldr	r2, [pc, #120]	; (80153e8 <_free_r+0x94>)
 8015370:	9801      	ldr	r0, [sp, #4]
 8015372:	6813      	ldr	r3, [r2, #0]
 8015374:	b933      	cbnz	r3, 8015384 <_free_r+0x30>
 8015376:	6063      	str	r3, [r4, #4]
 8015378:	6014      	str	r4, [r2, #0]
 801537a:	b003      	add	sp, #12
 801537c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015380:	f001 bf7a 	b.w	8017278 <__malloc_unlock>
 8015384:	42a3      	cmp	r3, r4
 8015386:	d908      	bls.n	801539a <_free_r+0x46>
 8015388:	6825      	ldr	r5, [r4, #0]
 801538a:	1961      	adds	r1, r4, r5
 801538c:	428b      	cmp	r3, r1
 801538e:	bf01      	itttt	eq
 8015390:	6819      	ldreq	r1, [r3, #0]
 8015392:	685b      	ldreq	r3, [r3, #4]
 8015394:	1949      	addeq	r1, r1, r5
 8015396:	6021      	streq	r1, [r4, #0]
 8015398:	e7ed      	b.n	8015376 <_free_r+0x22>
 801539a:	461a      	mov	r2, r3
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	b10b      	cbz	r3, 80153a4 <_free_r+0x50>
 80153a0:	42a3      	cmp	r3, r4
 80153a2:	d9fa      	bls.n	801539a <_free_r+0x46>
 80153a4:	6811      	ldr	r1, [r2, #0]
 80153a6:	1855      	adds	r5, r2, r1
 80153a8:	42a5      	cmp	r5, r4
 80153aa:	d10b      	bne.n	80153c4 <_free_r+0x70>
 80153ac:	6824      	ldr	r4, [r4, #0]
 80153ae:	4421      	add	r1, r4
 80153b0:	1854      	adds	r4, r2, r1
 80153b2:	42a3      	cmp	r3, r4
 80153b4:	6011      	str	r1, [r2, #0]
 80153b6:	d1e0      	bne.n	801537a <_free_r+0x26>
 80153b8:	681c      	ldr	r4, [r3, #0]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	6053      	str	r3, [r2, #4]
 80153be:	4421      	add	r1, r4
 80153c0:	6011      	str	r1, [r2, #0]
 80153c2:	e7da      	b.n	801537a <_free_r+0x26>
 80153c4:	d902      	bls.n	80153cc <_free_r+0x78>
 80153c6:	230c      	movs	r3, #12
 80153c8:	6003      	str	r3, [r0, #0]
 80153ca:	e7d6      	b.n	801537a <_free_r+0x26>
 80153cc:	6825      	ldr	r5, [r4, #0]
 80153ce:	1961      	adds	r1, r4, r5
 80153d0:	428b      	cmp	r3, r1
 80153d2:	bf04      	itt	eq
 80153d4:	6819      	ldreq	r1, [r3, #0]
 80153d6:	685b      	ldreq	r3, [r3, #4]
 80153d8:	6063      	str	r3, [r4, #4]
 80153da:	bf04      	itt	eq
 80153dc:	1949      	addeq	r1, r1, r5
 80153de:	6021      	streq	r1, [r4, #0]
 80153e0:	6054      	str	r4, [r2, #4]
 80153e2:	e7ca      	b.n	801537a <_free_r+0x26>
 80153e4:	b003      	add	sp, #12
 80153e6:	bd30      	pop	{r4, r5, pc}
 80153e8:	200024d8 	.word	0x200024d8

080153ec <sbrk_aligned>:
 80153ec:	b570      	push	{r4, r5, r6, lr}
 80153ee:	4e0e      	ldr	r6, [pc, #56]	; (8015428 <sbrk_aligned+0x3c>)
 80153f0:	460c      	mov	r4, r1
 80153f2:	6831      	ldr	r1, [r6, #0]
 80153f4:	4605      	mov	r5, r0
 80153f6:	b911      	cbnz	r1, 80153fe <sbrk_aligned+0x12>
 80153f8:	f000 fd84 	bl	8015f04 <_sbrk_r>
 80153fc:	6030      	str	r0, [r6, #0]
 80153fe:	4621      	mov	r1, r4
 8015400:	4628      	mov	r0, r5
 8015402:	f000 fd7f 	bl	8015f04 <_sbrk_r>
 8015406:	1c43      	adds	r3, r0, #1
 8015408:	d00a      	beq.n	8015420 <sbrk_aligned+0x34>
 801540a:	1cc4      	adds	r4, r0, #3
 801540c:	f024 0403 	bic.w	r4, r4, #3
 8015410:	42a0      	cmp	r0, r4
 8015412:	d007      	beq.n	8015424 <sbrk_aligned+0x38>
 8015414:	1a21      	subs	r1, r4, r0
 8015416:	4628      	mov	r0, r5
 8015418:	f000 fd74 	bl	8015f04 <_sbrk_r>
 801541c:	3001      	adds	r0, #1
 801541e:	d101      	bne.n	8015424 <sbrk_aligned+0x38>
 8015420:	f04f 34ff 	mov.w	r4, #4294967295
 8015424:	4620      	mov	r0, r4
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	200024dc 	.word	0x200024dc

0801542c <_malloc_r>:
 801542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015430:	1ccd      	adds	r5, r1, #3
 8015432:	f025 0503 	bic.w	r5, r5, #3
 8015436:	3508      	adds	r5, #8
 8015438:	2d0c      	cmp	r5, #12
 801543a:	bf38      	it	cc
 801543c:	250c      	movcc	r5, #12
 801543e:	2d00      	cmp	r5, #0
 8015440:	4607      	mov	r7, r0
 8015442:	db01      	blt.n	8015448 <_malloc_r+0x1c>
 8015444:	42a9      	cmp	r1, r5
 8015446:	d905      	bls.n	8015454 <_malloc_r+0x28>
 8015448:	230c      	movs	r3, #12
 801544a:	603b      	str	r3, [r7, #0]
 801544c:	2600      	movs	r6, #0
 801544e:	4630      	mov	r0, r6
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	4e2e      	ldr	r6, [pc, #184]	; (8015510 <_malloc_r+0xe4>)
 8015456:	f001 ff09 	bl	801726c <__malloc_lock>
 801545a:	6833      	ldr	r3, [r6, #0]
 801545c:	461c      	mov	r4, r3
 801545e:	bb34      	cbnz	r4, 80154ae <_malloc_r+0x82>
 8015460:	4629      	mov	r1, r5
 8015462:	4638      	mov	r0, r7
 8015464:	f7ff ffc2 	bl	80153ec <sbrk_aligned>
 8015468:	1c43      	adds	r3, r0, #1
 801546a:	4604      	mov	r4, r0
 801546c:	d14d      	bne.n	801550a <_malloc_r+0xde>
 801546e:	6834      	ldr	r4, [r6, #0]
 8015470:	4626      	mov	r6, r4
 8015472:	2e00      	cmp	r6, #0
 8015474:	d140      	bne.n	80154f8 <_malloc_r+0xcc>
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	4631      	mov	r1, r6
 801547a:	4638      	mov	r0, r7
 801547c:	eb04 0803 	add.w	r8, r4, r3
 8015480:	f000 fd40 	bl	8015f04 <_sbrk_r>
 8015484:	4580      	cmp	r8, r0
 8015486:	d13a      	bne.n	80154fe <_malloc_r+0xd2>
 8015488:	6821      	ldr	r1, [r4, #0]
 801548a:	3503      	adds	r5, #3
 801548c:	1a6d      	subs	r5, r5, r1
 801548e:	f025 0503 	bic.w	r5, r5, #3
 8015492:	3508      	adds	r5, #8
 8015494:	2d0c      	cmp	r5, #12
 8015496:	bf38      	it	cc
 8015498:	250c      	movcc	r5, #12
 801549a:	4629      	mov	r1, r5
 801549c:	4638      	mov	r0, r7
 801549e:	f7ff ffa5 	bl	80153ec <sbrk_aligned>
 80154a2:	3001      	adds	r0, #1
 80154a4:	d02b      	beq.n	80154fe <_malloc_r+0xd2>
 80154a6:	6823      	ldr	r3, [r4, #0]
 80154a8:	442b      	add	r3, r5
 80154aa:	6023      	str	r3, [r4, #0]
 80154ac:	e00e      	b.n	80154cc <_malloc_r+0xa0>
 80154ae:	6822      	ldr	r2, [r4, #0]
 80154b0:	1b52      	subs	r2, r2, r5
 80154b2:	d41e      	bmi.n	80154f2 <_malloc_r+0xc6>
 80154b4:	2a0b      	cmp	r2, #11
 80154b6:	d916      	bls.n	80154e6 <_malloc_r+0xba>
 80154b8:	1961      	adds	r1, r4, r5
 80154ba:	42a3      	cmp	r3, r4
 80154bc:	6025      	str	r5, [r4, #0]
 80154be:	bf18      	it	ne
 80154c0:	6059      	strne	r1, [r3, #4]
 80154c2:	6863      	ldr	r3, [r4, #4]
 80154c4:	bf08      	it	eq
 80154c6:	6031      	streq	r1, [r6, #0]
 80154c8:	5162      	str	r2, [r4, r5]
 80154ca:	604b      	str	r3, [r1, #4]
 80154cc:	4638      	mov	r0, r7
 80154ce:	f104 060b 	add.w	r6, r4, #11
 80154d2:	f001 fed1 	bl	8017278 <__malloc_unlock>
 80154d6:	f026 0607 	bic.w	r6, r6, #7
 80154da:	1d23      	adds	r3, r4, #4
 80154dc:	1af2      	subs	r2, r6, r3
 80154de:	d0b6      	beq.n	801544e <_malloc_r+0x22>
 80154e0:	1b9b      	subs	r3, r3, r6
 80154e2:	50a3      	str	r3, [r4, r2]
 80154e4:	e7b3      	b.n	801544e <_malloc_r+0x22>
 80154e6:	6862      	ldr	r2, [r4, #4]
 80154e8:	42a3      	cmp	r3, r4
 80154ea:	bf0c      	ite	eq
 80154ec:	6032      	streq	r2, [r6, #0]
 80154ee:	605a      	strne	r2, [r3, #4]
 80154f0:	e7ec      	b.n	80154cc <_malloc_r+0xa0>
 80154f2:	4623      	mov	r3, r4
 80154f4:	6864      	ldr	r4, [r4, #4]
 80154f6:	e7b2      	b.n	801545e <_malloc_r+0x32>
 80154f8:	4634      	mov	r4, r6
 80154fa:	6876      	ldr	r6, [r6, #4]
 80154fc:	e7b9      	b.n	8015472 <_malloc_r+0x46>
 80154fe:	230c      	movs	r3, #12
 8015500:	603b      	str	r3, [r7, #0]
 8015502:	4638      	mov	r0, r7
 8015504:	f001 feb8 	bl	8017278 <__malloc_unlock>
 8015508:	e7a1      	b.n	801544e <_malloc_r+0x22>
 801550a:	6025      	str	r5, [r4, #0]
 801550c:	e7de      	b.n	80154cc <_malloc_r+0xa0>
 801550e:	bf00      	nop
 8015510:	200024d8 	.word	0x200024d8

08015514 <__cvt>:
 8015514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015518:	ec55 4b10 	vmov	r4, r5, d0
 801551c:	2d00      	cmp	r5, #0
 801551e:	460e      	mov	r6, r1
 8015520:	4619      	mov	r1, r3
 8015522:	462b      	mov	r3, r5
 8015524:	bfbb      	ittet	lt
 8015526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801552a:	461d      	movlt	r5, r3
 801552c:	2300      	movge	r3, #0
 801552e:	232d      	movlt	r3, #45	; 0x2d
 8015530:	700b      	strb	r3, [r1, #0]
 8015532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015534:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015538:	4691      	mov	r9, r2
 801553a:	f023 0820 	bic.w	r8, r3, #32
 801553e:	bfbc      	itt	lt
 8015540:	4622      	movlt	r2, r4
 8015542:	4614      	movlt	r4, r2
 8015544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015548:	d005      	beq.n	8015556 <__cvt+0x42>
 801554a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801554e:	d100      	bne.n	8015552 <__cvt+0x3e>
 8015550:	3601      	adds	r6, #1
 8015552:	2102      	movs	r1, #2
 8015554:	e000      	b.n	8015558 <__cvt+0x44>
 8015556:	2103      	movs	r1, #3
 8015558:	ab03      	add	r3, sp, #12
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	ab02      	add	r3, sp, #8
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	ec45 4b10 	vmov	d0, r4, r5
 8015564:	4653      	mov	r3, sl
 8015566:	4632      	mov	r2, r6
 8015568:	f000 fe6e 	bl	8016248 <_dtoa_r>
 801556c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015570:	4607      	mov	r7, r0
 8015572:	d102      	bne.n	801557a <__cvt+0x66>
 8015574:	f019 0f01 	tst.w	r9, #1
 8015578:	d022      	beq.n	80155c0 <__cvt+0xac>
 801557a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801557e:	eb07 0906 	add.w	r9, r7, r6
 8015582:	d110      	bne.n	80155a6 <__cvt+0x92>
 8015584:	783b      	ldrb	r3, [r7, #0]
 8015586:	2b30      	cmp	r3, #48	; 0x30
 8015588:	d10a      	bne.n	80155a0 <__cvt+0x8c>
 801558a:	2200      	movs	r2, #0
 801558c:	2300      	movs	r3, #0
 801558e:	4620      	mov	r0, r4
 8015590:	4629      	mov	r1, r5
 8015592:	f7eb fac1 	bl	8000b18 <__aeabi_dcmpeq>
 8015596:	b918      	cbnz	r0, 80155a0 <__cvt+0x8c>
 8015598:	f1c6 0601 	rsb	r6, r6, #1
 801559c:	f8ca 6000 	str.w	r6, [sl]
 80155a0:	f8da 3000 	ldr.w	r3, [sl]
 80155a4:	4499      	add	r9, r3
 80155a6:	2200      	movs	r2, #0
 80155a8:	2300      	movs	r3, #0
 80155aa:	4620      	mov	r0, r4
 80155ac:	4629      	mov	r1, r5
 80155ae:	f7eb fab3 	bl	8000b18 <__aeabi_dcmpeq>
 80155b2:	b108      	cbz	r0, 80155b8 <__cvt+0xa4>
 80155b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80155b8:	2230      	movs	r2, #48	; 0x30
 80155ba:	9b03      	ldr	r3, [sp, #12]
 80155bc:	454b      	cmp	r3, r9
 80155be:	d307      	bcc.n	80155d0 <__cvt+0xbc>
 80155c0:	9b03      	ldr	r3, [sp, #12]
 80155c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155c4:	1bdb      	subs	r3, r3, r7
 80155c6:	4638      	mov	r0, r7
 80155c8:	6013      	str	r3, [r2, #0]
 80155ca:	b004      	add	sp, #16
 80155cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d0:	1c59      	adds	r1, r3, #1
 80155d2:	9103      	str	r1, [sp, #12]
 80155d4:	701a      	strb	r2, [r3, #0]
 80155d6:	e7f0      	b.n	80155ba <__cvt+0xa6>

080155d8 <__exponent>:
 80155d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155da:	4603      	mov	r3, r0
 80155dc:	2900      	cmp	r1, #0
 80155de:	bfb8      	it	lt
 80155e0:	4249      	neglt	r1, r1
 80155e2:	f803 2b02 	strb.w	r2, [r3], #2
 80155e6:	bfb4      	ite	lt
 80155e8:	222d      	movlt	r2, #45	; 0x2d
 80155ea:	222b      	movge	r2, #43	; 0x2b
 80155ec:	2909      	cmp	r1, #9
 80155ee:	7042      	strb	r2, [r0, #1]
 80155f0:	dd2a      	ble.n	8015648 <__exponent+0x70>
 80155f2:	f10d 0407 	add.w	r4, sp, #7
 80155f6:	46a4      	mov	ip, r4
 80155f8:	270a      	movs	r7, #10
 80155fa:	46a6      	mov	lr, r4
 80155fc:	460a      	mov	r2, r1
 80155fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8015602:	fb07 1516 	mls	r5, r7, r6, r1
 8015606:	3530      	adds	r5, #48	; 0x30
 8015608:	2a63      	cmp	r2, #99	; 0x63
 801560a:	f104 34ff 	add.w	r4, r4, #4294967295
 801560e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015612:	4631      	mov	r1, r6
 8015614:	dcf1      	bgt.n	80155fa <__exponent+0x22>
 8015616:	3130      	adds	r1, #48	; 0x30
 8015618:	f1ae 0502 	sub.w	r5, lr, #2
 801561c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015620:	1c44      	adds	r4, r0, #1
 8015622:	4629      	mov	r1, r5
 8015624:	4561      	cmp	r1, ip
 8015626:	d30a      	bcc.n	801563e <__exponent+0x66>
 8015628:	f10d 0209 	add.w	r2, sp, #9
 801562c:	eba2 020e 	sub.w	r2, r2, lr
 8015630:	4565      	cmp	r5, ip
 8015632:	bf88      	it	hi
 8015634:	2200      	movhi	r2, #0
 8015636:	4413      	add	r3, r2
 8015638:	1a18      	subs	r0, r3, r0
 801563a:	b003      	add	sp, #12
 801563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801563e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015642:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015646:	e7ed      	b.n	8015624 <__exponent+0x4c>
 8015648:	2330      	movs	r3, #48	; 0x30
 801564a:	3130      	adds	r1, #48	; 0x30
 801564c:	7083      	strb	r3, [r0, #2]
 801564e:	70c1      	strb	r1, [r0, #3]
 8015650:	1d03      	adds	r3, r0, #4
 8015652:	e7f1      	b.n	8015638 <__exponent+0x60>

08015654 <_printf_float>:
 8015654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015658:	ed2d 8b02 	vpush	{d8}
 801565c:	b08d      	sub	sp, #52	; 0x34
 801565e:	460c      	mov	r4, r1
 8015660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015664:	4616      	mov	r6, r2
 8015666:	461f      	mov	r7, r3
 8015668:	4605      	mov	r5, r0
 801566a:	f001 fd93 	bl	8017194 <_localeconv_r>
 801566e:	f8d0 a000 	ldr.w	sl, [r0]
 8015672:	4650      	mov	r0, sl
 8015674:	f7ea fe24 	bl	80002c0 <strlen>
 8015678:	2300      	movs	r3, #0
 801567a:	930a      	str	r3, [sp, #40]	; 0x28
 801567c:	6823      	ldr	r3, [r4, #0]
 801567e:	9305      	str	r3, [sp, #20]
 8015680:	f8d8 3000 	ldr.w	r3, [r8]
 8015684:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015688:	3307      	adds	r3, #7
 801568a:	f023 0307 	bic.w	r3, r3, #7
 801568e:	f103 0208 	add.w	r2, r3, #8
 8015692:	f8c8 2000 	str.w	r2, [r8]
 8015696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801569e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80156a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80156a6:	9307      	str	r3, [sp, #28]
 80156a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80156ac:	ee08 0a10 	vmov	s16, r0
 80156b0:	4b9f      	ldr	r3, [pc, #636]	; (8015930 <_printf_float+0x2dc>)
 80156b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156b6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ba:	f7eb fa5f 	bl	8000b7c <__aeabi_dcmpun>
 80156be:	bb88      	cbnz	r0, 8015724 <_printf_float+0xd0>
 80156c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156c4:	4b9a      	ldr	r3, [pc, #616]	; (8015930 <_printf_float+0x2dc>)
 80156c6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ca:	f7eb fa39 	bl	8000b40 <__aeabi_dcmple>
 80156ce:	bb48      	cbnz	r0, 8015724 <_printf_float+0xd0>
 80156d0:	2200      	movs	r2, #0
 80156d2:	2300      	movs	r3, #0
 80156d4:	4640      	mov	r0, r8
 80156d6:	4649      	mov	r1, r9
 80156d8:	f7eb fa28 	bl	8000b2c <__aeabi_dcmplt>
 80156dc:	b110      	cbz	r0, 80156e4 <_printf_float+0x90>
 80156de:	232d      	movs	r3, #45	; 0x2d
 80156e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156e4:	4b93      	ldr	r3, [pc, #588]	; (8015934 <_printf_float+0x2e0>)
 80156e6:	4894      	ldr	r0, [pc, #592]	; (8015938 <_printf_float+0x2e4>)
 80156e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80156ec:	bf94      	ite	ls
 80156ee:	4698      	movls	r8, r3
 80156f0:	4680      	movhi	r8, r0
 80156f2:	2303      	movs	r3, #3
 80156f4:	6123      	str	r3, [r4, #16]
 80156f6:	9b05      	ldr	r3, [sp, #20]
 80156f8:	f023 0204 	bic.w	r2, r3, #4
 80156fc:	6022      	str	r2, [r4, #0]
 80156fe:	f04f 0900 	mov.w	r9, #0
 8015702:	9700      	str	r7, [sp, #0]
 8015704:	4633      	mov	r3, r6
 8015706:	aa0b      	add	r2, sp, #44	; 0x2c
 8015708:	4621      	mov	r1, r4
 801570a:	4628      	mov	r0, r5
 801570c:	f000 f9d8 	bl	8015ac0 <_printf_common>
 8015710:	3001      	adds	r0, #1
 8015712:	f040 8090 	bne.w	8015836 <_printf_float+0x1e2>
 8015716:	f04f 30ff 	mov.w	r0, #4294967295
 801571a:	b00d      	add	sp, #52	; 0x34
 801571c:	ecbd 8b02 	vpop	{d8}
 8015720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015724:	4642      	mov	r2, r8
 8015726:	464b      	mov	r3, r9
 8015728:	4640      	mov	r0, r8
 801572a:	4649      	mov	r1, r9
 801572c:	f7eb fa26 	bl	8000b7c <__aeabi_dcmpun>
 8015730:	b140      	cbz	r0, 8015744 <_printf_float+0xf0>
 8015732:	464b      	mov	r3, r9
 8015734:	2b00      	cmp	r3, #0
 8015736:	bfbc      	itt	lt
 8015738:	232d      	movlt	r3, #45	; 0x2d
 801573a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801573e:	487f      	ldr	r0, [pc, #508]	; (801593c <_printf_float+0x2e8>)
 8015740:	4b7f      	ldr	r3, [pc, #508]	; (8015940 <_printf_float+0x2ec>)
 8015742:	e7d1      	b.n	80156e8 <_printf_float+0x94>
 8015744:	6863      	ldr	r3, [r4, #4]
 8015746:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801574a:	9206      	str	r2, [sp, #24]
 801574c:	1c5a      	adds	r2, r3, #1
 801574e:	d13f      	bne.n	80157d0 <_printf_float+0x17c>
 8015750:	2306      	movs	r3, #6
 8015752:	6063      	str	r3, [r4, #4]
 8015754:	9b05      	ldr	r3, [sp, #20]
 8015756:	6861      	ldr	r1, [r4, #4]
 8015758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801575c:	2300      	movs	r3, #0
 801575e:	9303      	str	r3, [sp, #12]
 8015760:	ab0a      	add	r3, sp, #40	; 0x28
 8015762:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015766:	ab09      	add	r3, sp, #36	; 0x24
 8015768:	ec49 8b10 	vmov	d0, r8, r9
 801576c:	9300      	str	r3, [sp, #0]
 801576e:	6022      	str	r2, [r4, #0]
 8015770:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015774:	4628      	mov	r0, r5
 8015776:	f7ff fecd 	bl	8015514 <__cvt>
 801577a:	9b06      	ldr	r3, [sp, #24]
 801577c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801577e:	2b47      	cmp	r3, #71	; 0x47
 8015780:	4680      	mov	r8, r0
 8015782:	d108      	bne.n	8015796 <_printf_float+0x142>
 8015784:	1cc8      	adds	r0, r1, #3
 8015786:	db02      	blt.n	801578e <_printf_float+0x13a>
 8015788:	6863      	ldr	r3, [r4, #4]
 801578a:	4299      	cmp	r1, r3
 801578c:	dd41      	ble.n	8015812 <_printf_float+0x1be>
 801578e:	f1ab 0b02 	sub.w	fp, fp, #2
 8015792:	fa5f fb8b 	uxtb.w	fp, fp
 8015796:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801579a:	d820      	bhi.n	80157de <_printf_float+0x18a>
 801579c:	3901      	subs	r1, #1
 801579e:	465a      	mov	r2, fp
 80157a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80157a4:	9109      	str	r1, [sp, #36]	; 0x24
 80157a6:	f7ff ff17 	bl	80155d8 <__exponent>
 80157aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157ac:	1813      	adds	r3, r2, r0
 80157ae:	2a01      	cmp	r2, #1
 80157b0:	4681      	mov	r9, r0
 80157b2:	6123      	str	r3, [r4, #16]
 80157b4:	dc02      	bgt.n	80157bc <_printf_float+0x168>
 80157b6:	6822      	ldr	r2, [r4, #0]
 80157b8:	07d2      	lsls	r2, r2, #31
 80157ba:	d501      	bpl.n	80157c0 <_printf_float+0x16c>
 80157bc:	3301      	adds	r3, #1
 80157be:	6123      	str	r3, [r4, #16]
 80157c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d09c      	beq.n	8015702 <_printf_float+0xae>
 80157c8:	232d      	movs	r3, #45	; 0x2d
 80157ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157ce:	e798      	b.n	8015702 <_printf_float+0xae>
 80157d0:	9a06      	ldr	r2, [sp, #24]
 80157d2:	2a47      	cmp	r2, #71	; 0x47
 80157d4:	d1be      	bne.n	8015754 <_printf_float+0x100>
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d1bc      	bne.n	8015754 <_printf_float+0x100>
 80157da:	2301      	movs	r3, #1
 80157dc:	e7b9      	b.n	8015752 <_printf_float+0xfe>
 80157de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80157e2:	d118      	bne.n	8015816 <_printf_float+0x1c2>
 80157e4:	2900      	cmp	r1, #0
 80157e6:	6863      	ldr	r3, [r4, #4]
 80157e8:	dd0b      	ble.n	8015802 <_printf_float+0x1ae>
 80157ea:	6121      	str	r1, [r4, #16]
 80157ec:	b913      	cbnz	r3, 80157f4 <_printf_float+0x1a0>
 80157ee:	6822      	ldr	r2, [r4, #0]
 80157f0:	07d0      	lsls	r0, r2, #31
 80157f2:	d502      	bpl.n	80157fa <_printf_float+0x1a6>
 80157f4:	3301      	adds	r3, #1
 80157f6:	440b      	add	r3, r1
 80157f8:	6123      	str	r3, [r4, #16]
 80157fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80157fc:	f04f 0900 	mov.w	r9, #0
 8015800:	e7de      	b.n	80157c0 <_printf_float+0x16c>
 8015802:	b913      	cbnz	r3, 801580a <_printf_float+0x1b6>
 8015804:	6822      	ldr	r2, [r4, #0]
 8015806:	07d2      	lsls	r2, r2, #31
 8015808:	d501      	bpl.n	801580e <_printf_float+0x1ba>
 801580a:	3302      	adds	r3, #2
 801580c:	e7f4      	b.n	80157f8 <_printf_float+0x1a4>
 801580e:	2301      	movs	r3, #1
 8015810:	e7f2      	b.n	80157f8 <_printf_float+0x1a4>
 8015812:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015818:	4299      	cmp	r1, r3
 801581a:	db05      	blt.n	8015828 <_printf_float+0x1d4>
 801581c:	6823      	ldr	r3, [r4, #0]
 801581e:	6121      	str	r1, [r4, #16]
 8015820:	07d8      	lsls	r0, r3, #31
 8015822:	d5ea      	bpl.n	80157fa <_printf_float+0x1a6>
 8015824:	1c4b      	adds	r3, r1, #1
 8015826:	e7e7      	b.n	80157f8 <_printf_float+0x1a4>
 8015828:	2900      	cmp	r1, #0
 801582a:	bfd4      	ite	le
 801582c:	f1c1 0202 	rsble	r2, r1, #2
 8015830:	2201      	movgt	r2, #1
 8015832:	4413      	add	r3, r2
 8015834:	e7e0      	b.n	80157f8 <_printf_float+0x1a4>
 8015836:	6823      	ldr	r3, [r4, #0]
 8015838:	055a      	lsls	r2, r3, #21
 801583a:	d407      	bmi.n	801584c <_printf_float+0x1f8>
 801583c:	6923      	ldr	r3, [r4, #16]
 801583e:	4642      	mov	r2, r8
 8015840:	4631      	mov	r1, r6
 8015842:	4628      	mov	r0, r5
 8015844:	47b8      	blx	r7
 8015846:	3001      	adds	r0, #1
 8015848:	d12c      	bne.n	80158a4 <_printf_float+0x250>
 801584a:	e764      	b.n	8015716 <_printf_float+0xc2>
 801584c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015850:	f240 80e0 	bls.w	8015a14 <_printf_float+0x3c0>
 8015854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015858:	2200      	movs	r2, #0
 801585a:	2300      	movs	r3, #0
 801585c:	f7eb f95c 	bl	8000b18 <__aeabi_dcmpeq>
 8015860:	2800      	cmp	r0, #0
 8015862:	d034      	beq.n	80158ce <_printf_float+0x27a>
 8015864:	4a37      	ldr	r2, [pc, #220]	; (8015944 <_printf_float+0x2f0>)
 8015866:	2301      	movs	r3, #1
 8015868:	4631      	mov	r1, r6
 801586a:	4628      	mov	r0, r5
 801586c:	47b8      	blx	r7
 801586e:	3001      	adds	r0, #1
 8015870:	f43f af51 	beq.w	8015716 <_printf_float+0xc2>
 8015874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015878:	429a      	cmp	r2, r3
 801587a:	db02      	blt.n	8015882 <_printf_float+0x22e>
 801587c:	6823      	ldr	r3, [r4, #0]
 801587e:	07d8      	lsls	r0, r3, #31
 8015880:	d510      	bpl.n	80158a4 <_printf_float+0x250>
 8015882:	ee18 3a10 	vmov	r3, s16
 8015886:	4652      	mov	r2, sl
 8015888:	4631      	mov	r1, r6
 801588a:	4628      	mov	r0, r5
 801588c:	47b8      	blx	r7
 801588e:	3001      	adds	r0, #1
 8015890:	f43f af41 	beq.w	8015716 <_printf_float+0xc2>
 8015894:	f04f 0800 	mov.w	r8, #0
 8015898:	f104 091a 	add.w	r9, r4, #26
 801589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801589e:	3b01      	subs	r3, #1
 80158a0:	4543      	cmp	r3, r8
 80158a2:	dc09      	bgt.n	80158b8 <_printf_float+0x264>
 80158a4:	6823      	ldr	r3, [r4, #0]
 80158a6:	079b      	lsls	r3, r3, #30
 80158a8:	f100 8105 	bmi.w	8015ab6 <_printf_float+0x462>
 80158ac:	68e0      	ldr	r0, [r4, #12]
 80158ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b0:	4298      	cmp	r0, r3
 80158b2:	bfb8      	it	lt
 80158b4:	4618      	movlt	r0, r3
 80158b6:	e730      	b.n	801571a <_printf_float+0xc6>
 80158b8:	2301      	movs	r3, #1
 80158ba:	464a      	mov	r2, r9
 80158bc:	4631      	mov	r1, r6
 80158be:	4628      	mov	r0, r5
 80158c0:	47b8      	blx	r7
 80158c2:	3001      	adds	r0, #1
 80158c4:	f43f af27 	beq.w	8015716 <_printf_float+0xc2>
 80158c8:	f108 0801 	add.w	r8, r8, #1
 80158cc:	e7e6      	b.n	801589c <_printf_float+0x248>
 80158ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dc39      	bgt.n	8015948 <_printf_float+0x2f4>
 80158d4:	4a1b      	ldr	r2, [pc, #108]	; (8015944 <_printf_float+0x2f0>)
 80158d6:	2301      	movs	r3, #1
 80158d8:	4631      	mov	r1, r6
 80158da:	4628      	mov	r0, r5
 80158dc:	47b8      	blx	r7
 80158de:	3001      	adds	r0, #1
 80158e0:	f43f af19 	beq.w	8015716 <_printf_float+0xc2>
 80158e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158e8:	4313      	orrs	r3, r2
 80158ea:	d102      	bne.n	80158f2 <_printf_float+0x29e>
 80158ec:	6823      	ldr	r3, [r4, #0]
 80158ee:	07d9      	lsls	r1, r3, #31
 80158f0:	d5d8      	bpl.n	80158a4 <_printf_float+0x250>
 80158f2:	ee18 3a10 	vmov	r3, s16
 80158f6:	4652      	mov	r2, sl
 80158f8:	4631      	mov	r1, r6
 80158fa:	4628      	mov	r0, r5
 80158fc:	47b8      	blx	r7
 80158fe:	3001      	adds	r0, #1
 8015900:	f43f af09 	beq.w	8015716 <_printf_float+0xc2>
 8015904:	f04f 0900 	mov.w	r9, #0
 8015908:	f104 0a1a 	add.w	sl, r4, #26
 801590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801590e:	425b      	negs	r3, r3
 8015910:	454b      	cmp	r3, r9
 8015912:	dc01      	bgt.n	8015918 <_printf_float+0x2c4>
 8015914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015916:	e792      	b.n	801583e <_printf_float+0x1ea>
 8015918:	2301      	movs	r3, #1
 801591a:	4652      	mov	r2, sl
 801591c:	4631      	mov	r1, r6
 801591e:	4628      	mov	r0, r5
 8015920:	47b8      	blx	r7
 8015922:	3001      	adds	r0, #1
 8015924:	f43f aef7 	beq.w	8015716 <_printf_float+0xc2>
 8015928:	f109 0901 	add.w	r9, r9, #1
 801592c:	e7ee      	b.n	801590c <_printf_float+0x2b8>
 801592e:	bf00      	nop
 8015930:	7fefffff 	.word	0x7fefffff
 8015934:	08018590 	.word	0x08018590
 8015938:	08018594 	.word	0x08018594
 801593c:	0801859c 	.word	0x0801859c
 8015940:	08018598 	.word	0x08018598
 8015944:	080185a0 	.word	0x080185a0
 8015948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801594a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801594c:	429a      	cmp	r2, r3
 801594e:	bfa8      	it	ge
 8015950:	461a      	movge	r2, r3
 8015952:	2a00      	cmp	r2, #0
 8015954:	4691      	mov	r9, r2
 8015956:	dc37      	bgt.n	80159c8 <_printf_float+0x374>
 8015958:	f04f 0b00 	mov.w	fp, #0
 801595c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015960:	f104 021a 	add.w	r2, r4, #26
 8015964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015966:	9305      	str	r3, [sp, #20]
 8015968:	eba3 0309 	sub.w	r3, r3, r9
 801596c:	455b      	cmp	r3, fp
 801596e:	dc33      	bgt.n	80159d8 <_printf_float+0x384>
 8015970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015974:	429a      	cmp	r2, r3
 8015976:	db3b      	blt.n	80159f0 <_printf_float+0x39c>
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	07da      	lsls	r2, r3, #31
 801597c:	d438      	bmi.n	80159f0 <_printf_float+0x39c>
 801597e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015980:	9a05      	ldr	r2, [sp, #20]
 8015982:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015984:	1a9a      	subs	r2, r3, r2
 8015986:	eba3 0901 	sub.w	r9, r3, r1
 801598a:	4591      	cmp	r9, r2
 801598c:	bfa8      	it	ge
 801598e:	4691      	movge	r9, r2
 8015990:	f1b9 0f00 	cmp.w	r9, #0
 8015994:	dc35      	bgt.n	8015a02 <_printf_float+0x3ae>
 8015996:	f04f 0800 	mov.w	r8, #0
 801599a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801599e:	f104 0a1a 	add.w	sl, r4, #26
 80159a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159a6:	1a9b      	subs	r3, r3, r2
 80159a8:	eba3 0309 	sub.w	r3, r3, r9
 80159ac:	4543      	cmp	r3, r8
 80159ae:	f77f af79 	ble.w	80158a4 <_printf_float+0x250>
 80159b2:	2301      	movs	r3, #1
 80159b4:	4652      	mov	r2, sl
 80159b6:	4631      	mov	r1, r6
 80159b8:	4628      	mov	r0, r5
 80159ba:	47b8      	blx	r7
 80159bc:	3001      	adds	r0, #1
 80159be:	f43f aeaa 	beq.w	8015716 <_printf_float+0xc2>
 80159c2:	f108 0801 	add.w	r8, r8, #1
 80159c6:	e7ec      	b.n	80159a2 <_printf_float+0x34e>
 80159c8:	4613      	mov	r3, r2
 80159ca:	4631      	mov	r1, r6
 80159cc:	4642      	mov	r2, r8
 80159ce:	4628      	mov	r0, r5
 80159d0:	47b8      	blx	r7
 80159d2:	3001      	adds	r0, #1
 80159d4:	d1c0      	bne.n	8015958 <_printf_float+0x304>
 80159d6:	e69e      	b.n	8015716 <_printf_float+0xc2>
 80159d8:	2301      	movs	r3, #1
 80159da:	4631      	mov	r1, r6
 80159dc:	4628      	mov	r0, r5
 80159de:	9205      	str	r2, [sp, #20]
 80159e0:	47b8      	blx	r7
 80159e2:	3001      	adds	r0, #1
 80159e4:	f43f ae97 	beq.w	8015716 <_printf_float+0xc2>
 80159e8:	9a05      	ldr	r2, [sp, #20]
 80159ea:	f10b 0b01 	add.w	fp, fp, #1
 80159ee:	e7b9      	b.n	8015964 <_printf_float+0x310>
 80159f0:	ee18 3a10 	vmov	r3, s16
 80159f4:	4652      	mov	r2, sl
 80159f6:	4631      	mov	r1, r6
 80159f8:	4628      	mov	r0, r5
 80159fa:	47b8      	blx	r7
 80159fc:	3001      	adds	r0, #1
 80159fe:	d1be      	bne.n	801597e <_printf_float+0x32a>
 8015a00:	e689      	b.n	8015716 <_printf_float+0xc2>
 8015a02:	9a05      	ldr	r2, [sp, #20]
 8015a04:	464b      	mov	r3, r9
 8015a06:	4442      	add	r2, r8
 8015a08:	4631      	mov	r1, r6
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	47b8      	blx	r7
 8015a0e:	3001      	adds	r0, #1
 8015a10:	d1c1      	bne.n	8015996 <_printf_float+0x342>
 8015a12:	e680      	b.n	8015716 <_printf_float+0xc2>
 8015a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a16:	2a01      	cmp	r2, #1
 8015a18:	dc01      	bgt.n	8015a1e <_printf_float+0x3ca>
 8015a1a:	07db      	lsls	r3, r3, #31
 8015a1c:	d538      	bpl.n	8015a90 <_printf_float+0x43c>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	4642      	mov	r2, r8
 8015a22:	4631      	mov	r1, r6
 8015a24:	4628      	mov	r0, r5
 8015a26:	47b8      	blx	r7
 8015a28:	3001      	adds	r0, #1
 8015a2a:	f43f ae74 	beq.w	8015716 <_printf_float+0xc2>
 8015a2e:	ee18 3a10 	vmov	r3, s16
 8015a32:	4652      	mov	r2, sl
 8015a34:	4631      	mov	r1, r6
 8015a36:	4628      	mov	r0, r5
 8015a38:	47b8      	blx	r7
 8015a3a:	3001      	adds	r0, #1
 8015a3c:	f43f ae6b 	beq.w	8015716 <_printf_float+0xc2>
 8015a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015a44:	2200      	movs	r2, #0
 8015a46:	2300      	movs	r3, #0
 8015a48:	f7eb f866 	bl	8000b18 <__aeabi_dcmpeq>
 8015a4c:	b9d8      	cbnz	r0, 8015a86 <_printf_float+0x432>
 8015a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a50:	f108 0201 	add.w	r2, r8, #1
 8015a54:	3b01      	subs	r3, #1
 8015a56:	4631      	mov	r1, r6
 8015a58:	4628      	mov	r0, r5
 8015a5a:	47b8      	blx	r7
 8015a5c:	3001      	adds	r0, #1
 8015a5e:	d10e      	bne.n	8015a7e <_printf_float+0x42a>
 8015a60:	e659      	b.n	8015716 <_printf_float+0xc2>
 8015a62:	2301      	movs	r3, #1
 8015a64:	4652      	mov	r2, sl
 8015a66:	4631      	mov	r1, r6
 8015a68:	4628      	mov	r0, r5
 8015a6a:	47b8      	blx	r7
 8015a6c:	3001      	adds	r0, #1
 8015a6e:	f43f ae52 	beq.w	8015716 <_printf_float+0xc2>
 8015a72:	f108 0801 	add.w	r8, r8, #1
 8015a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a78:	3b01      	subs	r3, #1
 8015a7a:	4543      	cmp	r3, r8
 8015a7c:	dcf1      	bgt.n	8015a62 <_printf_float+0x40e>
 8015a7e:	464b      	mov	r3, r9
 8015a80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015a84:	e6dc      	b.n	8015840 <_printf_float+0x1ec>
 8015a86:	f04f 0800 	mov.w	r8, #0
 8015a8a:	f104 0a1a 	add.w	sl, r4, #26
 8015a8e:	e7f2      	b.n	8015a76 <_printf_float+0x422>
 8015a90:	2301      	movs	r3, #1
 8015a92:	4642      	mov	r2, r8
 8015a94:	e7df      	b.n	8015a56 <_printf_float+0x402>
 8015a96:	2301      	movs	r3, #1
 8015a98:	464a      	mov	r2, r9
 8015a9a:	4631      	mov	r1, r6
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	47b8      	blx	r7
 8015aa0:	3001      	adds	r0, #1
 8015aa2:	f43f ae38 	beq.w	8015716 <_printf_float+0xc2>
 8015aa6:	f108 0801 	add.w	r8, r8, #1
 8015aaa:	68e3      	ldr	r3, [r4, #12]
 8015aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015aae:	1a5b      	subs	r3, r3, r1
 8015ab0:	4543      	cmp	r3, r8
 8015ab2:	dcf0      	bgt.n	8015a96 <_printf_float+0x442>
 8015ab4:	e6fa      	b.n	80158ac <_printf_float+0x258>
 8015ab6:	f04f 0800 	mov.w	r8, #0
 8015aba:	f104 0919 	add.w	r9, r4, #25
 8015abe:	e7f4      	b.n	8015aaa <_printf_float+0x456>

08015ac0 <_printf_common>:
 8015ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac4:	4616      	mov	r6, r2
 8015ac6:	4699      	mov	r9, r3
 8015ac8:	688a      	ldr	r2, [r1, #8]
 8015aca:	690b      	ldr	r3, [r1, #16]
 8015acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ad0:	4293      	cmp	r3, r2
 8015ad2:	bfb8      	it	lt
 8015ad4:	4613      	movlt	r3, r2
 8015ad6:	6033      	str	r3, [r6, #0]
 8015ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015adc:	4607      	mov	r7, r0
 8015ade:	460c      	mov	r4, r1
 8015ae0:	b10a      	cbz	r2, 8015ae6 <_printf_common+0x26>
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	6033      	str	r3, [r6, #0]
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	0699      	lsls	r1, r3, #26
 8015aea:	bf42      	ittt	mi
 8015aec:	6833      	ldrmi	r3, [r6, #0]
 8015aee:	3302      	addmi	r3, #2
 8015af0:	6033      	strmi	r3, [r6, #0]
 8015af2:	6825      	ldr	r5, [r4, #0]
 8015af4:	f015 0506 	ands.w	r5, r5, #6
 8015af8:	d106      	bne.n	8015b08 <_printf_common+0x48>
 8015afa:	f104 0a19 	add.w	sl, r4, #25
 8015afe:	68e3      	ldr	r3, [r4, #12]
 8015b00:	6832      	ldr	r2, [r6, #0]
 8015b02:	1a9b      	subs	r3, r3, r2
 8015b04:	42ab      	cmp	r3, r5
 8015b06:	dc26      	bgt.n	8015b56 <_printf_common+0x96>
 8015b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b0c:	1e13      	subs	r3, r2, #0
 8015b0e:	6822      	ldr	r2, [r4, #0]
 8015b10:	bf18      	it	ne
 8015b12:	2301      	movne	r3, #1
 8015b14:	0692      	lsls	r2, r2, #26
 8015b16:	d42b      	bmi.n	8015b70 <_printf_common+0xb0>
 8015b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b1c:	4649      	mov	r1, r9
 8015b1e:	4638      	mov	r0, r7
 8015b20:	47c0      	blx	r8
 8015b22:	3001      	adds	r0, #1
 8015b24:	d01e      	beq.n	8015b64 <_printf_common+0xa4>
 8015b26:	6823      	ldr	r3, [r4, #0]
 8015b28:	68e5      	ldr	r5, [r4, #12]
 8015b2a:	6832      	ldr	r2, [r6, #0]
 8015b2c:	f003 0306 	and.w	r3, r3, #6
 8015b30:	2b04      	cmp	r3, #4
 8015b32:	bf08      	it	eq
 8015b34:	1aad      	subeq	r5, r5, r2
 8015b36:	68a3      	ldr	r3, [r4, #8]
 8015b38:	6922      	ldr	r2, [r4, #16]
 8015b3a:	bf0c      	ite	eq
 8015b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b40:	2500      	movne	r5, #0
 8015b42:	4293      	cmp	r3, r2
 8015b44:	bfc4      	itt	gt
 8015b46:	1a9b      	subgt	r3, r3, r2
 8015b48:	18ed      	addgt	r5, r5, r3
 8015b4a:	2600      	movs	r6, #0
 8015b4c:	341a      	adds	r4, #26
 8015b4e:	42b5      	cmp	r5, r6
 8015b50:	d11a      	bne.n	8015b88 <_printf_common+0xc8>
 8015b52:	2000      	movs	r0, #0
 8015b54:	e008      	b.n	8015b68 <_printf_common+0xa8>
 8015b56:	2301      	movs	r3, #1
 8015b58:	4652      	mov	r2, sl
 8015b5a:	4649      	mov	r1, r9
 8015b5c:	4638      	mov	r0, r7
 8015b5e:	47c0      	blx	r8
 8015b60:	3001      	adds	r0, #1
 8015b62:	d103      	bne.n	8015b6c <_printf_common+0xac>
 8015b64:	f04f 30ff 	mov.w	r0, #4294967295
 8015b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b6c:	3501      	adds	r5, #1
 8015b6e:	e7c6      	b.n	8015afe <_printf_common+0x3e>
 8015b70:	18e1      	adds	r1, r4, r3
 8015b72:	1c5a      	adds	r2, r3, #1
 8015b74:	2030      	movs	r0, #48	; 0x30
 8015b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b7a:	4422      	add	r2, r4
 8015b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b84:	3302      	adds	r3, #2
 8015b86:	e7c7      	b.n	8015b18 <_printf_common+0x58>
 8015b88:	2301      	movs	r3, #1
 8015b8a:	4622      	mov	r2, r4
 8015b8c:	4649      	mov	r1, r9
 8015b8e:	4638      	mov	r0, r7
 8015b90:	47c0      	blx	r8
 8015b92:	3001      	adds	r0, #1
 8015b94:	d0e6      	beq.n	8015b64 <_printf_common+0xa4>
 8015b96:	3601      	adds	r6, #1
 8015b98:	e7d9      	b.n	8015b4e <_printf_common+0x8e>
	...

08015b9c <_printf_i>:
 8015b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba0:	7e0f      	ldrb	r7, [r1, #24]
 8015ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ba4:	2f78      	cmp	r7, #120	; 0x78
 8015ba6:	4691      	mov	r9, r2
 8015ba8:	4680      	mov	r8, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	469a      	mov	sl, r3
 8015bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015bb2:	d807      	bhi.n	8015bc4 <_printf_i+0x28>
 8015bb4:	2f62      	cmp	r7, #98	; 0x62
 8015bb6:	d80a      	bhi.n	8015bce <_printf_i+0x32>
 8015bb8:	2f00      	cmp	r7, #0
 8015bba:	f000 80d8 	beq.w	8015d6e <_printf_i+0x1d2>
 8015bbe:	2f58      	cmp	r7, #88	; 0x58
 8015bc0:	f000 80a3 	beq.w	8015d0a <_printf_i+0x16e>
 8015bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015bcc:	e03a      	b.n	8015c44 <_printf_i+0xa8>
 8015bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015bd2:	2b15      	cmp	r3, #21
 8015bd4:	d8f6      	bhi.n	8015bc4 <_printf_i+0x28>
 8015bd6:	a101      	add	r1, pc, #4	; (adr r1, 8015bdc <_printf_i+0x40>)
 8015bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015bdc:	08015c35 	.word	0x08015c35
 8015be0:	08015c49 	.word	0x08015c49
 8015be4:	08015bc5 	.word	0x08015bc5
 8015be8:	08015bc5 	.word	0x08015bc5
 8015bec:	08015bc5 	.word	0x08015bc5
 8015bf0:	08015bc5 	.word	0x08015bc5
 8015bf4:	08015c49 	.word	0x08015c49
 8015bf8:	08015bc5 	.word	0x08015bc5
 8015bfc:	08015bc5 	.word	0x08015bc5
 8015c00:	08015bc5 	.word	0x08015bc5
 8015c04:	08015bc5 	.word	0x08015bc5
 8015c08:	08015d55 	.word	0x08015d55
 8015c0c:	08015c79 	.word	0x08015c79
 8015c10:	08015d37 	.word	0x08015d37
 8015c14:	08015bc5 	.word	0x08015bc5
 8015c18:	08015bc5 	.word	0x08015bc5
 8015c1c:	08015d77 	.word	0x08015d77
 8015c20:	08015bc5 	.word	0x08015bc5
 8015c24:	08015c79 	.word	0x08015c79
 8015c28:	08015bc5 	.word	0x08015bc5
 8015c2c:	08015bc5 	.word	0x08015bc5
 8015c30:	08015d3f 	.word	0x08015d3f
 8015c34:	682b      	ldr	r3, [r5, #0]
 8015c36:	1d1a      	adds	r2, r3, #4
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	602a      	str	r2, [r5, #0]
 8015c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c44:	2301      	movs	r3, #1
 8015c46:	e0a3      	b.n	8015d90 <_printf_i+0x1f4>
 8015c48:	6820      	ldr	r0, [r4, #0]
 8015c4a:	6829      	ldr	r1, [r5, #0]
 8015c4c:	0606      	lsls	r6, r0, #24
 8015c4e:	f101 0304 	add.w	r3, r1, #4
 8015c52:	d50a      	bpl.n	8015c6a <_printf_i+0xce>
 8015c54:	680e      	ldr	r6, [r1, #0]
 8015c56:	602b      	str	r3, [r5, #0]
 8015c58:	2e00      	cmp	r6, #0
 8015c5a:	da03      	bge.n	8015c64 <_printf_i+0xc8>
 8015c5c:	232d      	movs	r3, #45	; 0x2d
 8015c5e:	4276      	negs	r6, r6
 8015c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c64:	485e      	ldr	r0, [pc, #376]	; (8015de0 <_printf_i+0x244>)
 8015c66:	230a      	movs	r3, #10
 8015c68:	e019      	b.n	8015c9e <_printf_i+0x102>
 8015c6a:	680e      	ldr	r6, [r1, #0]
 8015c6c:	602b      	str	r3, [r5, #0]
 8015c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015c72:	bf18      	it	ne
 8015c74:	b236      	sxthne	r6, r6
 8015c76:	e7ef      	b.n	8015c58 <_printf_i+0xbc>
 8015c78:	682b      	ldr	r3, [r5, #0]
 8015c7a:	6820      	ldr	r0, [r4, #0]
 8015c7c:	1d19      	adds	r1, r3, #4
 8015c7e:	6029      	str	r1, [r5, #0]
 8015c80:	0601      	lsls	r1, r0, #24
 8015c82:	d501      	bpl.n	8015c88 <_printf_i+0xec>
 8015c84:	681e      	ldr	r6, [r3, #0]
 8015c86:	e002      	b.n	8015c8e <_printf_i+0xf2>
 8015c88:	0646      	lsls	r6, r0, #25
 8015c8a:	d5fb      	bpl.n	8015c84 <_printf_i+0xe8>
 8015c8c:	881e      	ldrh	r6, [r3, #0]
 8015c8e:	4854      	ldr	r0, [pc, #336]	; (8015de0 <_printf_i+0x244>)
 8015c90:	2f6f      	cmp	r7, #111	; 0x6f
 8015c92:	bf0c      	ite	eq
 8015c94:	2308      	moveq	r3, #8
 8015c96:	230a      	movne	r3, #10
 8015c98:	2100      	movs	r1, #0
 8015c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c9e:	6865      	ldr	r5, [r4, #4]
 8015ca0:	60a5      	str	r5, [r4, #8]
 8015ca2:	2d00      	cmp	r5, #0
 8015ca4:	bfa2      	ittt	ge
 8015ca6:	6821      	ldrge	r1, [r4, #0]
 8015ca8:	f021 0104 	bicge.w	r1, r1, #4
 8015cac:	6021      	strge	r1, [r4, #0]
 8015cae:	b90e      	cbnz	r6, 8015cb4 <_printf_i+0x118>
 8015cb0:	2d00      	cmp	r5, #0
 8015cb2:	d04d      	beq.n	8015d50 <_printf_i+0x1b4>
 8015cb4:	4615      	mov	r5, r2
 8015cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8015cba:	fb03 6711 	mls	r7, r3, r1, r6
 8015cbe:	5dc7      	ldrb	r7, [r0, r7]
 8015cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015cc4:	4637      	mov	r7, r6
 8015cc6:	42bb      	cmp	r3, r7
 8015cc8:	460e      	mov	r6, r1
 8015cca:	d9f4      	bls.n	8015cb6 <_printf_i+0x11a>
 8015ccc:	2b08      	cmp	r3, #8
 8015cce:	d10b      	bne.n	8015ce8 <_printf_i+0x14c>
 8015cd0:	6823      	ldr	r3, [r4, #0]
 8015cd2:	07de      	lsls	r6, r3, #31
 8015cd4:	d508      	bpl.n	8015ce8 <_printf_i+0x14c>
 8015cd6:	6923      	ldr	r3, [r4, #16]
 8015cd8:	6861      	ldr	r1, [r4, #4]
 8015cda:	4299      	cmp	r1, r3
 8015cdc:	bfde      	ittt	le
 8015cde:	2330      	movle	r3, #48	; 0x30
 8015ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015ce8:	1b52      	subs	r2, r2, r5
 8015cea:	6122      	str	r2, [r4, #16]
 8015cec:	f8cd a000 	str.w	sl, [sp]
 8015cf0:	464b      	mov	r3, r9
 8015cf2:	aa03      	add	r2, sp, #12
 8015cf4:	4621      	mov	r1, r4
 8015cf6:	4640      	mov	r0, r8
 8015cf8:	f7ff fee2 	bl	8015ac0 <_printf_common>
 8015cfc:	3001      	adds	r0, #1
 8015cfe:	d14c      	bne.n	8015d9a <_printf_i+0x1fe>
 8015d00:	f04f 30ff 	mov.w	r0, #4294967295
 8015d04:	b004      	add	sp, #16
 8015d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d0a:	4835      	ldr	r0, [pc, #212]	; (8015de0 <_printf_i+0x244>)
 8015d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015d10:	6829      	ldr	r1, [r5, #0]
 8015d12:	6823      	ldr	r3, [r4, #0]
 8015d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8015d18:	6029      	str	r1, [r5, #0]
 8015d1a:	061d      	lsls	r5, r3, #24
 8015d1c:	d514      	bpl.n	8015d48 <_printf_i+0x1ac>
 8015d1e:	07df      	lsls	r7, r3, #31
 8015d20:	bf44      	itt	mi
 8015d22:	f043 0320 	orrmi.w	r3, r3, #32
 8015d26:	6023      	strmi	r3, [r4, #0]
 8015d28:	b91e      	cbnz	r6, 8015d32 <_printf_i+0x196>
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	f023 0320 	bic.w	r3, r3, #32
 8015d30:	6023      	str	r3, [r4, #0]
 8015d32:	2310      	movs	r3, #16
 8015d34:	e7b0      	b.n	8015c98 <_printf_i+0xfc>
 8015d36:	6823      	ldr	r3, [r4, #0]
 8015d38:	f043 0320 	orr.w	r3, r3, #32
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	2378      	movs	r3, #120	; 0x78
 8015d40:	4828      	ldr	r0, [pc, #160]	; (8015de4 <_printf_i+0x248>)
 8015d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d46:	e7e3      	b.n	8015d10 <_printf_i+0x174>
 8015d48:	0659      	lsls	r1, r3, #25
 8015d4a:	bf48      	it	mi
 8015d4c:	b2b6      	uxthmi	r6, r6
 8015d4e:	e7e6      	b.n	8015d1e <_printf_i+0x182>
 8015d50:	4615      	mov	r5, r2
 8015d52:	e7bb      	b.n	8015ccc <_printf_i+0x130>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	6826      	ldr	r6, [r4, #0]
 8015d58:	6961      	ldr	r1, [r4, #20]
 8015d5a:	1d18      	adds	r0, r3, #4
 8015d5c:	6028      	str	r0, [r5, #0]
 8015d5e:	0635      	lsls	r5, r6, #24
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	d501      	bpl.n	8015d68 <_printf_i+0x1cc>
 8015d64:	6019      	str	r1, [r3, #0]
 8015d66:	e002      	b.n	8015d6e <_printf_i+0x1d2>
 8015d68:	0670      	lsls	r0, r6, #25
 8015d6a:	d5fb      	bpl.n	8015d64 <_printf_i+0x1c8>
 8015d6c:	8019      	strh	r1, [r3, #0]
 8015d6e:	2300      	movs	r3, #0
 8015d70:	6123      	str	r3, [r4, #16]
 8015d72:	4615      	mov	r5, r2
 8015d74:	e7ba      	b.n	8015cec <_printf_i+0x150>
 8015d76:	682b      	ldr	r3, [r5, #0]
 8015d78:	1d1a      	adds	r2, r3, #4
 8015d7a:	602a      	str	r2, [r5, #0]
 8015d7c:	681d      	ldr	r5, [r3, #0]
 8015d7e:	6862      	ldr	r2, [r4, #4]
 8015d80:	2100      	movs	r1, #0
 8015d82:	4628      	mov	r0, r5
 8015d84:	f7ea fa4c 	bl	8000220 <memchr>
 8015d88:	b108      	cbz	r0, 8015d8e <_printf_i+0x1f2>
 8015d8a:	1b40      	subs	r0, r0, r5
 8015d8c:	6060      	str	r0, [r4, #4]
 8015d8e:	6863      	ldr	r3, [r4, #4]
 8015d90:	6123      	str	r3, [r4, #16]
 8015d92:	2300      	movs	r3, #0
 8015d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d98:	e7a8      	b.n	8015cec <_printf_i+0x150>
 8015d9a:	6923      	ldr	r3, [r4, #16]
 8015d9c:	462a      	mov	r2, r5
 8015d9e:	4649      	mov	r1, r9
 8015da0:	4640      	mov	r0, r8
 8015da2:	47d0      	blx	sl
 8015da4:	3001      	adds	r0, #1
 8015da6:	d0ab      	beq.n	8015d00 <_printf_i+0x164>
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	079b      	lsls	r3, r3, #30
 8015dac:	d413      	bmi.n	8015dd6 <_printf_i+0x23a>
 8015dae:	68e0      	ldr	r0, [r4, #12]
 8015db0:	9b03      	ldr	r3, [sp, #12]
 8015db2:	4298      	cmp	r0, r3
 8015db4:	bfb8      	it	lt
 8015db6:	4618      	movlt	r0, r3
 8015db8:	e7a4      	b.n	8015d04 <_printf_i+0x168>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	4632      	mov	r2, r6
 8015dbe:	4649      	mov	r1, r9
 8015dc0:	4640      	mov	r0, r8
 8015dc2:	47d0      	blx	sl
 8015dc4:	3001      	adds	r0, #1
 8015dc6:	d09b      	beq.n	8015d00 <_printf_i+0x164>
 8015dc8:	3501      	adds	r5, #1
 8015dca:	68e3      	ldr	r3, [r4, #12]
 8015dcc:	9903      	ldr	r1, [sp, #12]
 8015dce:	1a5b      	subs	r3, r3, r1
 8015dd0:	42ab      	cmp	r3, r5
 8015dd2:	dcf2      	bgt.n	8015dba <_printf_i+0x21e>
 8015dd4:	e7eb      	b.n	8015dae <_printf_i+0x212>
 8015dd6:	2500      	movs	r5, #0
 8015dd8:	f104 0619 	add.w	r6, r4, #25
 8015ddc:	e7f5      	b.n	8015dca <_printf_i+0x22e>
 8015dde:	bf00      	nop
 8015de0:	080185a2 	.word	0x080185a2
 8015de4:	080185b3 	.word	0x080185b3

08015de8 <iprintf>:
 8015de8:	b40f      	push	{r0, r1, r2, r3}
 8015dea:	4b0a      	ldr	r3, [pc, #40]	; (8015e14 <iprintf+0x2c>)
 8015dec:	b513      	push	{r0, r1, r4, lr}
 8015dee:	681c      	ldr	r4, [r3, #0]
 8015df0:	b124      	cbz	r4, 8015dfc <iprintf+0x14>
 8015df2:	69a3      	ldr	r3, [r4, #24]
 8015df4:	b913      	cbnz	r3, 8015dfc <iprintf+0x14>
 8015df6:	4620      	mov	r0, r4
 8015df8:	f001 f92e 	bl	8017058 <__sinit>
 8015dfc:	ab05      	add	r3, sp, #20
 8015dfe:	9a04      	ldr	r2, [sp, #16]
 8015e00:	68a1      	ldr	r1, [r4, #8]
 8015e02:	9301      	str	r3, [sp, #4]
 8015e04:	4620      	mov	r0, r4
 8015e06:	f001 fe01 	bl	8017a0c <_vfiprintf_r>
 8015e0a:	b002      	add	sp, #8
 8015e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e10:	b004      	add	sp, #16
 8015e12:	4770      	bx	lr
 8015e14:	20000184 	.word	0x20000184

08015e18 <_puts_r>:
 8015e18:	b570      	push	{r4, r5, r6, lr}
 8015e1a:	460e      	mov	r6, r1
 8015e1c:	4605      	mov	r5, r0
 8015e1e:	b118      	cbz	r0, 8015e28 <_puts_r+0x10>
 8015e20:	6983      	ldr	r3, [r0, #24]
 8015e22:	b90b      	cbnz	r3, 8015e28 <_puts_r+0x10>
 8015e24:	f001 f918 	bl	8017058 <__sinit>
 8015e28:	69ab      	ldr	r3, [r5, #24]
 8015e2a:	68ac      	ldr	r4, [r5, #8]
 8015e2c:	b913      	cbnz	r3, 8015e34 <_puts_r+0x1c>
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f001 f912 	bl	8017058 <__sinit>
 8015e34:	4b2c      	ldr	r3, [pc, #176]	; (8015ee8 <_puts_r+0xd0>)
 8015e36:	429c      	cmp	r4, r3
 8015e38:	d120      	bne.n	8015e7c <_puts_r+0x64>
 8015e3a:	686c      	ldr	r4, [r5, #4]
 8015e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e3e:	07db      	lsls	r3, r3, #31
 8015e40:	d405      	bmi.n	8015e4e <_puts_r+0x36>
 8015e42:	89a3      	ldrh	r3, [r4, #12]
 8015e44:	0598      	lsls	r0, r3, #22
 8015e46:	d402      	bmi.n	8015e4e <_puts_r+0x36>
 8015e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e4a:	f001 f9a8 	bl	801719e <__retarget_lock_acquire_recursive>
 8015e4e:	89a3      	ldrh	r3, [r4, #12]
 8015e50:	0719      	lsls	r1, r3, #28
 8015e52:	d51d      	bpl.n	8015e90 <_puts_r+0x78>
 8015e54:	6923      	ldr	r3, [r4, #16]
 8015e56:	b1db      	cbz	r3, 8015e90 <_puts_r+0x78>
 8015e58:	3e01      	subs	r6, #1
 8015e5a:	68a3      	ldr	r3, [r4, #8]
 8015e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015e60:	3b01      	subs	r3, #1
 8015e62:	60a3      	str	r3, [r4, #8]
 8015e64:	bb39      	cbnz	r1, 8015eb6 <_puts_r+0x9e>
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	da38      	bge.n	8015edc <_puts_r+0xc4>
 8015e6a:	4622      	mov	r2, r4
 8015e6c:	210a      	movs	r1, #10
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f000 f89c 	bl	8015fac <__swbuf_r>
 8015e74:	3001      	adds	r0, #1
 8015e76:	d011      	beq.n	8015e9c <_puts_r+0x84>
 8015e78:	250a      	movs	r5, #10
 8015e7a:	e011      	b.n	8015ea0 <_puts_r+0x88>
 8015e7c:	4b1b      	ldr	r3, [pc, #108]	; (8015eec <_puts_r+0xd4>)
 8015e7e:	429c      	cmp	r4, r3
 8015e80:	d101      	bne.n	8015e86 <_puts_r+0x6e>
 8015e82:	68ac      	ldr	r4, [r5, #8]
 8015e84:	e7da      	b.n	8015e3c <_puts_r+0x24>
 8015e86:	4b1a      	ldr	r3, [pc, #104]	; (8015ef0 <_puts_r+0xd8>)
 8015e88:	429c      	cmp	r4, r3
 8015e8a:	bf08      	it	eq
 8015e8c:	68ec      	ldreq	r4, [r5, #12]
 8015e8e:	e7d5      	b.n	8015e3c <_puts_r+0x24>
 8015e90:	4621      	mov	r1, r4
 8015e92:	4628      	mov	r0, r5
 8015e94:	f000 f8dc 	bl	8016050 <__swsetup_r>
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d0dd      	beq.n	8015e58 <_puts_r+0x40>
 8015e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8015ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ea2:	07da      	lsls	r2, r3, #31
 8015ea4:	d405      	bmi.n	8015eb2 <_puts_r+0x9a>
 8015ea6:	89a3      	ldrh	r3, [r4, #12]
 8015ea8:	059b      	lsls	r3, r3, #22
 8015eaa:	d402      	bmi.n	8015eb2 <_puts_r+0x9a>
 8015eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eae:	f001 f977 	bl	80171a0 <__retarget_lock_release_recursive>
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	bd70      	pop	{r4, r5, r6, pc}
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	da04      	bge.n	8015ec4 <_puts_r+0xac>
 8015eba:	69a2      	ldr	r2, [r4, #24]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	dc06      	bgt.n	8015ece <_puts_r+0xb6>
 8015ec0:	290a      	cmp	r1, #10
 8015ec2:	d004      	beq.n	8015ece <_puts_r+0xb6>
 8015ec4:	6823      	ldr	r3, [r4, #0]
 8015ec6:	1c5a      	adds	r2, r3, #1
 8015ec8:	6022      	str	r2, [r4, #0]
 8015eca:	7019      	strb	r1, [r3, #0]
 8015ecc:	e7c5      	b.n	8015e5a <_puts_r+0x42>
 8015ece:	4622      	mov	r2, r4
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f000 f86b 	bl	8015fac <__swbuf_r>
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	d1bf      	bne.n	8015e5a <_puts_r+0x42>
 8015eda:	e7df      	b.n	8015e9c <_puts_r+0x84>
 8015edc:	6823      	ldr	r3, [r4, #0]
 8015ede:	250a      	movs	r5, #10
 8015ee0:	1c5a      	adds	r2, r3, #1
 8015ee2:	6022      	str	r2, [r4, #0]
 8015ee4:	701d      	strb	r5, [r3, #0]
 8015ee6:	e7db      	b.n	8015ea0 <_puts_r+0x88>
 8015ee8:	08018674 	.word	0x08018674
 8015eec:	08018694 	.word	0x08018694
 8015ef0:	08018654 	.word	0x08018654

08015ef4 <puts>:
 8015ef4:	4b02      	ldr	r3, [pc, #8]	; (8015f00 <puts+0xc>)
 8015ef6:	4601      	mov	r1, r0
 8015ef8:	6818      	ldr	r0, [r3, #0]
 8015efa:	f7ff bf8d 	b.w	8015e18 <_puts_r>
 8015efe:	bf00      	nop
 8015f00:	20000184 	.word	0x20000184

08015f04 <_sbrk_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4d06      	ldr	r5, [pc, #24]	; (8015f20 <_sbrk_r+0x1c>)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	4608      	mov	r0, r1
 8015f0e:	602b      	str	r3, [r5, #0]
 8015f10:	f7f0 fdda 	bl	8006ac8 <_sbrk>
 8015f14:	1c43      	adds	r3, r0, #1
 8015f16:	d102      	bne.n	8015f1e <_sbrk_r+0x1a>
 8015f18:	682b      	ldr	r3, [r5, #0]
 8015f1a:	b103      	cbz	r3, 8015f1e <_sbrk_r+0x1a>
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	bd38      	pop	{r3, r4, r5, pc}
 8015f20:	200024e4 	.word	0x200024e4

08015f24 <_raise_r>:
 8015f24:	291f      	cmp	r1, #31
 8015f26:	b538      	push	{r3, r4, r5, lr}
 8015f28:	4604      	mov	r4, r0
 8015f2a:	460d      	mov	r5, r1
 8015f2c:	d904      	bls.n	8015f38 <_raise_r+0x14>
 8015f2e:	2316      	movs	r3, #22
 8015f30:	6003      	str	r3, [r0, #0]
 8015f32:	f04f 30ff 	mov.w	r0, #4294967295
 8015f36:	bd38      	pop	{r3, r4, r5, pc}
 8015f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f3a:	b112      	cbz	r2, 8015f42 <_raise_r+0x1e>
 8015f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f40:	b94b      	cbnz	r3, 8015f56 <_raise_r+0x32>
 8015f42:	4620      	mov	r0, r4
 8015f44:	f000 f830 	bl	8015fa8 <_getpid_r>
 8015f48:	462a      	mov	r2, r5
 8015f4a:	4601      	mov	r1, r0
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f52:	f000 b817 	b.w	8015f84 <_kill_r>
 8015f56:	2b01      	cmp	r3, #1
 8015f58:	d00a      	beq.n	8015f70 <_raise_r+0x4c>
 8015f5a:	1c59      	adds	r1, r3, #1
 8015f5c:	d103      	bne.n	8015f66 <_raise_r+0x42>
 8015f5e:	2316      	movs	r3, #22
 8015f60:	6003      	str	r3, [r0, #0]
 8015f62:	2001      	movs	r0, #1
 8015f64:	e7e7      	b.n	8015f36 <_raise_r+0x12>
 8015f66:	2400      	movs	r4, #0
 8015f68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f6c:	4628      	mov	r0, r5
 8015f6e:	4798      	blx	r3
 8015f70:	2000      	movs	r0, #0
 8015f72:	e7e0      	b.n	8015f36 <_raise_r+0x12>

08015f74 <raise>:
 8015f74:	4b02      	ldr	r3, [pc, #8]	; (8015f80 <raise+0xc>)
 8015f76:	4601      	mov	r1, r0
 8015f78:	6818      	ldr	r0, [r3, #0]
 8015f7a:	f7ff bfd3 	b.w	8015f24 <_raise_r>
 8015f7e:	bf00      	nop
 8015f80:	20000184 	.word	0x20000184

08015f84 <_kill_r>:
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	4d07      	ldr	r5, [pc, #28]	; (8015fa4 <_kill_r+0x20>)
 8015f88:	2300      	movs	r3, #0
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	4608      	mov	r0, r1
 8015f8e:	4611      	mov	r1, r2
 8015f90:	602b      	str	r3, [r5, #0]
 8015f92:	f7f0 fd01 	bl	8006998 <_kill>
 8015f96:	1c43      	adds	r3, r0, #1
 8015f98:	d102      	bne.n	8015fa0 <_kill_r+0x1c>
 8015f9a:	682b      	ldr	r3, [r5, #0]
 8015f9c:	b103      	cbz	r3, 8015fa0 <_kill_r+0x1c>
 8015f9e:	6023      	str	r3, [r4, #0]
 8015fa0:	bd38      	pop	{r3, r4, r5, pc}
 8015fa2:	bf00      	nop
 8015fa4:	200024e4 	.word	0x200024e4

08015fa8 <_getpid_r>:
 8015fa8:	f7f0 bcee 	b.w	8006988 <_getpid>

08015fac <__swbuf_r>:
 8015fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fae:	460e      	mov	r6, r1
 8015fb0:	4614      	mov	r4, r2
 8015fb2:	4605      	mov	r5, r0
 8015fb4:	b118      	cbz	r0, 8015fbe <__swbuf_r+0x12>
 8015fb6:	6983      	ldr	r3, [r0, #24]
 8015fb8:	b90b      	cbnz	r3, 8015fbe <__swbuf_r+0x12>
 8015fba:	f001 f84d 	bl	8017058 <__sinit>
 8015fbe:	4b21      	ldr	r3, [pc, #132]	; (8016044 <__swbuf_r+0x98>)
 8015fc0:	429c      	cmp	r4, r3
 8015fc2:	d12b      	bne.n	801601c <__swbuf_r+0x70>
 8015fc4:	686c      	ldr	r4, [r5, #4]
 8015fc6:	69a3      	ldr	r3, [r4, #24]
 8015fc8:	60a3      	str	r3, [r4, #8]
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	071a      	lsls	r2, r3, #28
 8015fce:	d52f      	bpl.n	8016030 <__swbuf_r+0x84>
 8015fd0:	6923      	ldr	r3, [r4, #16]
 8015fd2:	b36b      	cbz	r3, 8016030 <__swbuf_r+0x84>
 8015fd4:	6923      	ldr	r3, [r4, #16]
 8015fd6:	6820      	ldr	r0, [r4, #0]
 8015fd8:	1ac0      	subs	r0, r0, r3
 8015fda:	6963      	ldr	r3, [r4, #20]
 8015fdc:	b2f6      	uxtb	r6, r6
 8015fde:	4283      	cmp	r3, r0
 8015fe0:	4637      	mov	r7, r6
 8015fe2:	dc04      	bgt.n	8015fee <__swbuf_r+0x42>
 8015fe4:	4621      	mov	r1, r4
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	f000 ffa2 	bl	8016f30 <_fflush_r>
 8015fec:	bb30      	cbnz	r0, 801603c <__swbuf_r+0x90>
 8015fee:	68a3      	ldr	r3, [r4, #8]
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	60a3      	str	r3, [r4, #8]
 8015ff4:	6823      	ldr	r3, [r4, #0]
 8015ff6:	1c5a      	adds	r2, r3, #1
 8015ff8:	6022      	str	r2, [r4, #0]
 8015ffa:	701e      	strb	r6, [r3, #0]
 8015ffc:	6963      	ldr	r3, [r4, #20]
 8015ffe:	3001      	adds	r0, #1
 8016000:	4283      	cmp	r3, r0
 8016002:	d004      	beq.n	801600e <__swbuf_r+0x62>
 8016004:	89a3      	ldrh	r3, [r4, #12]
 8016006:	07db      	lsls	r3, r3, #31
 8016008:	d506      	bpl.n	8016018 <__swbuf_r+0x6c>
 801600a:	2e0a      	cmp	r6, #10
 801600c:	d104      	bne.n	8016018 <__swbuf_r+0x6c>
 801600e:	4621      	mov	r1, r4
 8016010:	4628      	mov	r0, r5
 8016012:	f000 ff8d 	bl	8016f30 <_fflush_r>
 8016016:	b988      	cbnz	r0, 801603c <__swbuf_r+0x90>
 8016018:	4638      	mov	r0, r7
 801601a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801601c:	4b0a      	ldr	r3, [pc, #40]	; (8016048 <__swbuf_r+0x9c>)
 801601e:	429c      	cmp	r4, r3
 8016020:	d101      	bne.n	8016026 <__swbuf_r+0x7a>
 8016022:	68ac      	ldr	r4, [r5, #8]
 8016024:	e7cf      	b.n	8015fc6 <__swbuf_r+0x1a>
 8016026:	4b09      	ldr	r3, [pc, #36]	; (801604c <__swbuf_r+0xa0>)
 8016028:	429c      	cmp	r4, r3
 801602a:	bf08      	it	eq
 801602c:	68ec      	ldreq	r4, [r5, #12]
 801602e:	e7ca      	b.n	8015fc6 <__swbuf_r+0x1a>
 8016030:	4621      	mov	r1, r4
 8016032:	4628      	mov	r0, r5
 8016034:	f000 f80c 	bl	8016050 <__swsetup_r>
 8016038:	2800      	cmp	r0, #0
 801603a:	d0cb      	beq.n	8015fd4 <__swbuf_r+0x28>
 801603c:	f04f 37ff 	mov.w	r7, #4294967295
 8016040:	e7ea      	b.n	8016018 <__swbuf_r+0x6c>
 8016042:	bf00      	nop
 8016044:	08018674 	.word	0x08018674
 8016048:	08018694 	.word	0x08018694
 801604c:	08018654 	.word	0x08018654

08016050 <__swsetup_r>:
 8016050:	4b32      	ldr	r3, [pc, #200]	; (801611c <__swsetup_r+0xcc>)
 8016052:	b570      	push	{r4, r5, r6, lr}
 8016054:	681d      	ldr	r5, [r3, #0]
 8016056:	4606      	mov	r6, r0
 8016058:	460c      	mov	r4, r1
 801605a:	b125      	cbz	r5, 8016066 <__swsetup_r+0x16>
 801605c:	69ab      	ldr	r3, [r5, #24]
 801605e:	b913      	cbnz	r3, 8016066 <__swsetup_r+0x16>
 8016060:	4628      	mov	r0, r5
 8016062:	f000 fff9 	bl	8017058 <__sinit>
 8016066:	4b2e      	ldr	r3, [pc, #184]	; (8016120 <__swsetup_r+0xd0>)
 8016068:	429c      	cmp	r4, r3
 801606a:	d10f      	bne.n	801608c <__swsetup_r+0x3c>
 801606c:	686c      	ldr	r4, [r5, #4]
 801606e:	89a3      	ldrh	r3, [r4, #12]
 8016070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016074:	0719      	lsls	r1, r3, #28
 8016076:	d42c      	bmi.n	80160d2 <__swsetup_r+0x82>
 8016078:	06dd      	lsls	r5, r3, #27
 801607a:	d411      	bmi.n	80160a0 <__swsetup_r+0x50>
 801607c:	2309      	movs	r3, #9
 801607e:	6033      	str	r3, [r6, #0]
 8016080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016084:	81a3      	strh	r3, [r4, #12]
 8016086:	f04f 30ff 	mov.w	r0, #4294967295
 801608a:	e03e      	b.n	801610a <__swsetup_r+0xba>
 801608c:	4b25      	ldr	r3, [pc, #148]	; (8016124 <__swsetup_r+0xd4>)
 801608e:	429c      	cmp	r4, r3
 8016090:	d101      	bne.n	8016096 <__swsetup_r+0x46>
 8016092:	68ac      	ldr	r4, [r5, #8]
 8016094:	e7eb      	b.n	801606e <__swsetup_r+0x1e>
 8016096:	4b24      	ldr	r3, [pc, #144]	; (8016128 <__swsetup_r+0xd8>)
 8016098:	429c      	cmp	r4, r3
 801609a:	bf08      	it	eq
 801609c:	68ec      	ldreq	r4, [r5, #12]
 801609e:	e7e6      	b.n	801606e <__swsetup_r+0x1e>
 80160a0:	0758      	lsls	r0, r3, #29
 80160a2:	d512      	bpl.n	80160ca <__swsetup_r+0x7a>
 80160a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160a6:	b141      	cbz	r1, 80160ba <__swsetup_r+0x6a>
 80160a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160ac:	4299      	cmp	r1, r3
 80160ae:	d002      	beq.n	80160b6 <__swsetup_r+0x66>
 80160b0:	4630      	mov	r0, r6
 80160b2:	f7ff f94f 	bl	8015354 <_free_r>
 80160b6:	2300      	movs	r3, #0
 80160b8:	6363      	str	r3, [r4, #52]	; 0x34
 80160ba:	89a3      	ldrh	r3, [r4, #12]
 80160bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160c0:	81a3      	strh	r3, [r4, #12]
 80160c2:	2300      	movs	r3, #0
 80160c4:	6063      	str	r3, [r4, #4]
 80160c6:	6923      	ldr	r3, [r4, #16]
 80160c8:	6023      	str	r3, [r4, #0]
 80160ca:	89a3      	ldrh	r3, [r4, #12]
 80160cc:	f043 0308 	orr.w	r3, r3, #8
 80160d0:	81a3      	strh	r3, [r4, #12]
 80160d2:	6923      	ldr	r3, [r4, #16]
 80160d4:	b94b      	cbnz	r3, 80160ea <__swsetup_r+0x9a>
 80160d6:	89a3      	ldrh	r3, [r4, #12]
 80160d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160e0:	d003      	beq.n	80160ea <__swsetup_r+0x9a>
 80160e2:	4621      	mov	r1, r4
 80160e4:	4630      	mov	r0, r6
 80160e6:	f001 f881 	bl	80171ec <__smakebuf_r>
 80160ea:	89a0      	ldrh	r0, [r4, #12]
 80160ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160f0:	f010 0301 	ands.w	r3, r0, #1
 80160f4:	d00a      	beq.n	801610c <__swsetup_r+0xbc>
 80160f6:	2300      	movs	r3, #0
 80160f8:	60a3      	str	r3, [r4, #8]
 80160fa:	6963      	ldr	r3, [r4, #20]
 80160fc:	425b      	negs	r3, r3
 80160fe:	61a3      	str	r3, [r4, #24]
 8016100:	6923      	ldr	r3, [r4, #16]
 8016102:	b943      	cbnz	r3, 8016116 <__swsetup_r+0xc6>
 8016104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016108:	d1ba      	bne.n	8016080 <__swsetup_r+0x30>
 801610a:	bd70      	pop	{r4, r5, r6, pc}
 801610c:	0781      	lsls	r1, r0, #30
 801610e:	bf58      	it	pl
 8016110:	6963      	ldrpl	r3, [r4, #20]
 8016112:	60a3      	str	r3, [r4, #8]
 8016114:	e7f4      	b.n	8016100 <__swsetup_r+0xb0>
 8016116:	2000      	movs	r0, #0
 8016118:	e7f7      	b.n	801610a <__swsetup_r+0xba>
 801611a:	bf00      	nop
 801611c:	20000184 	.word	0x20000184
 8016120:	08018674 	.word	0x08018674
 8016124:	08018694 	.word	0x08018694
 8016128:	08018654 	.word	0x08018654

0801612c <quorem>:
 801612c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016130:	6903      	ldr	r3, [r0, #16]
 8016132:	690c      	ldr	r4, [r1, #16]
 8016134:	42a3      	cmp	r3, r4
 8016136:	4607      	mov	r7, r0
 8016138:	f2c0 8081 	blt.w	801623e <quorem+0x112>
 801613c:	3c01      	subs	r4, #1
 801613e:	f101 0814 	add.w	r8, r1, #20
 8016142:	f100 0514 	add.w	r5, r0, #20
 8016146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016154:	3301      	adds	r3, #1
 8016156:	429a      	cmp	r2, r3
 8016158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801615c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016160:	fbb2 f6f3 	udiv	r6, r2, r3
 8016164:	d331      	bcc.n	80161ca <quorem+0x9e>
 8016166:	f04f 0e00 	mov.w	lr, #0
 801616a:	4640      	mov	r0, r8
 801616c:	46ac      	mov	ip, r5
 801616e:	46f2      	mov	sl, lr
 8016170:	f850 2b04 	ldr.w	r2, [r0], #4
 8016174:	b293      	uxth	r3, r2
 8016176:	fb06 e303 	mla	r3, r6, r3, lr
 801617a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801617e:	b29b      	uxth	r3, r3
 8016180:	ebaa 0303 	sub.w	r3, sl, r3
 8016184:	f8dc a000 	ldr.w	sl, [ip]
 8016188:	0c12      	lsrs	r2, r2, #16
 801618a:	fa13 f38a 	uxtah	r3, r3, sl
 801618e:	fb06 e202 	mla	r2, r6, r2, lr
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	9b00      	ldr	r3, [sp, #0]
 8016196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801619a:	b292      	uxth	r2, r2
 801619c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80161a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80161a8:	4581      	cmp	r9, r0
 80161aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161ae:	f84c 3b04 	str.w	r3, [ip], #4
 80161b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80161b6:	d2db      	bcs.n	8016170 <quorem+0x44>
 80161b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80161bc:	b92b      	cbnz	r3, 80161ca <quorem+0x9e>
 80161be:	9b01      	ldr	r3, [sp, #4]
 80161c0:	3b04      	subs	r3, #4
 80161c2:	429d      	cmp	r5, r3
 80161c4:	461a      	mov	r2, r3
 80161c6:	d32e      	bcc.n	8016226 <quorem+0xfa>
 80161c8:	613c      	str	r4, [r7, #16]
 80161ca:	4638      	mov	r0, r7
 80161cc:	f001 fadc 	bl	8017788 <__mcmp>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	db24      	blt.n	801621e <quorem+0xf2>
 80161d4:	3601      	adds	r6, #1
 80161d6:	4628      	mov	r0, r5
 80161d8:	f04f 0c00 	mov.w	ip, #0
 80161dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80161e0:	f8d0 e000 	ldr.w	lr, [r0]
 80161e4:	b293      	uxth	r3, r2
 80161e6:	ebac 0303 	sub.w	r3, ip, r3
 80161ea:	0c12      	lsrs	r2, r2, #16
 80161ec:	fa13 f38e 	uxtah	r3, r3, lr
 80161f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80161f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161fe:	45c1      	cmp	r9, r8
 8016200:	f840 3b04 	str.w	r3, [r0], #4
 8016204:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016208:	d2e8      	bcs.n	80161dc <quorem+0xb0>
 801620a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801620e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016212:	b922      	cbnz	r2, 801621e <quorem+0xf2>
 8016214:	3b04      	subs	r3, #4
 8016216:	429d      	cmp	r5, r3
 8016218:	461a      	mov	r2, r3
 801621a:	d30a      	bcc.n	8016232 <quorem+0x106>
 801621c:	613c      	str	r4, [r7, #16]
 801621e:	4630      	mov	r0, r6
 8016220:	b003      	add	sp, #12
 8016222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016226:	6812      	ldr	r2, [r2, #0]
 8016228:	3b04      	subs	r3, #4
 801622a:	2a00      	cmp	r2, #0
 801622c:	d1cc      	bne.n	80161c8 <quorem+0x9c>
 801622e:	3c01      	subs	r4, #1
 8016230:	e7c7      	b.n	80161c2 <quorem+0x96>
 8016232:	6812      	ldr	r2, [r2, #0]
 8016234:	3b04      	subs	r3, #4
 8016236:	2a00      	cmp	r2, #0
 8016238:	d1f0      	bne.n	801621c <quorem+0xf0>
 801623a:	3c01      	subs	r4, #1
 801623c:	e7eb      	b.n	8016216 <quorem+0xea>
 801623e:	2000      	movs	r0, #0
 8016240:	e7ee      	b.n	8016220 <quorem+0xf4>
 8016242:	0000      	movs	r0, r0
 8016244:	0000      	movs	r0, r0
	...

08016248 <_dtoa_r>:
 8016248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801624c:	ed2d 8b04 	vpush	{d8-d9}
 8016250:	ec57 6b10 	vmov	r6, r7, d0
 8016254:	b093      	sub	sp, #76	; 0x4c
 8016256:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016258:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801625c:	9106      	str	r1, [sp, #24]
 801625e:	ee10 aa10 	vmov	sl, s0
 8016262:	4604      	mov	r4, r0
 8016264:	9209      	str	r2, [sp, #36]	; 0x24
 8016266:	930c      	str	r3, [sp, #48]	; 0x30
 8016268:	46bb      	mov	fp, r7
 801626a:	b975      	cbnz	r5, 801628a <_dtoa_r+0x42>
 801626c:	2010      	movs	r0, #16
 801626e:	f7ff f831 	bl	80152d4 <malloc>
 8016272:	4602      	mov	r2, r0
 8016274:	6260      	str	r0, [r4, #36]	; 0x24
 8016276:	b920      	cbnz	r0, 8016282 <_dtoa_r+0x3a>
 8016278:	4ba7      	ldr	r3, [pc, #668]	; (8016518 <_dtoa_r+0x2d0>)
 801627a:	21ea      	movs	r1, #234	; 0xea
 801627c:	48a7      	ldr	r0, [pc, #668]	; (801651c <_dtoa_r+0x2d4>)
 801627e:	f001 fd4b 	bl	8017d18 <__assert_func>
 8016282:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016286:	6005      	str	r5, [r0, #0]
 8016288:	60c5      	str	r5, [r0, #12]
 801628a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801628c:	6819      	ldr	r1, [r3, #0]
 801628e:	b151      	cbz	r1, 80162a6 <_dtoa_r+0x5e>
 8016290:	685a      	ldr	r2, [r3, #4]
 8016292:	604a      	str	r2, [r1, #4]
 8016294:	2301      	movs	r3, #1
 8016296:	4093      	lsls	r3, r2
 8016298:	608b      	str	r3, [r1, #8]
 801629a:	4620      	mov	r0, r4
 801629c:	f001 f832 	bl	8017304 <_Bfree>
 80162a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162a2:	2200      	movs	r2, #0
 80162a4:	601a      	str	r2, [r3, #0]
 80162a6:	1e3b      	subs	r3, r7, #0
 80162a8:	bfaa      	itet	ge
 80162aa:	2300      	movge	r3, #0
 80162ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80162b0:	f8c8 3000 	strge.w	r3, [r8]
 80162b4:	4b9a      	ldr	r3, [pc, #616]	; (8016520 <_dtoa_r+0x2d8>)
 80162b6:	bfbc      	itt	lt
 80162b8:	2201      	movlt	r2, #1
 80162ba:	f8c8 2000 	strlt.w	r2, [r8]
 80162be:	ea33 030b 	bics.w	r3, r3, fp
 80162c2:	d11b      	bne.n	80162fc <_dtoa_r+0xb4>
 80162c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80162c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80162ca:	6013      	str	r3, [r2, #0]
 80162cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80162d0:	4333      	orrs	r3, r6
 80162d2:	f000 8592 	beq.w	8016dfa <_dtoa_r+0xbb2>
 80162d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162d8:	b963      	cbnz	r3, 80162f4 <_dtoa_r+0xac>
 80162da:	4b92      	ldr	r3, [pc, #584]	; (8016524 <_dtoa_r+0x2dc>)
 80162dc:	e022      	b.n	8016324 <_dtoa_r+0xdc>
 80162de:	4b92      	ldr	r3, [pc, #584]	; (8016528 <_dtoa_r+0x2e0>)
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	3308      	adds	r3, #8
 80162e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80162e6:	6013      	str	r3, [r2, #0]
 80162e8:	9801      	ldr	r0, [sp, #4]
 80162ea:	b013      	add	sp, #76	; 0x4c
 80162ec:	ecbd 8b04 	vpop	{d8-d9}
 80162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f4:	4b8b      	ldr	r3, [pc, #556]	; (8016524 <_dtoa_r+0x2dc>)
 80162f6:	9301      	str	r3, [sp, #4]
 80162f8:	3303      	adds	r3, #3
 80162fa:	e7f3      	b.n	80162e4 <_dtoa_r+0x9c>
 80162fc:	2200      	movs	r2, #0
 80162fe:	2300      	movs	r3, #0
 8016300:	4650      	mov	r0, sl
 8016302:	4659      	mov	r1, fp
 8016304:	f7ea fc08 	bl	8000b18 <__aeabi_dcmpeq>
 8016308:	ec4b ab19 	vmov	d9, sl, fp
 801630c:	4680      	mov	r8, r0
 801630e:	b158      	cbz	r0, 8016328 <_dtoa_r+0xe0>
 8016310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016312:	2301      	movs	r3, #1
 8016314:	6013      	str	r3, [r2, #0]
 8016316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016318:	2b00      	cmp	r3, #0
 801631a:	f000 856b 	beq.w	8016df4 <_dtoa_r+0xbac>
 801631e:	4883      	ldr	r0, [pc, #524]	; (801652c <_dtoa_r+0x2e4>)
 8016320:	6018      	str	r0, [r3, #0]
 8016322:	1e43      	subs	r3, r0, #1
 8016324:	9301      	str	r3, [sp, #4]
 8016326:	e7df      	b.n	80162e8 <_dtoa_r+0xa0>
 8016328:	ec4b ab10 	vmov	d0, sl, fp
 801632c:	aa10      	add	r2, sp, #64	; 0x40
 801632e:	a911      	add	r1, sp, #68	; 0x44
 8016330:	4620      	mov	r0, r4
 8016332:	f001 facf 	bl	80178d4 <__d2b>
 8016336:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801633a:	ee08 0a10 	vmov	s16, r0
 801633e:	2d00      	cmp	r5, #0
 8016340:	f000 8084 	beq.w	801644c <_dtoa_r+0x204>
 8016344:	ee19 3a90 	vmov	r3, s19
 8016348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801634c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016350:	4656      	mov	r6, sl
 8016352:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801635a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801635e:	4b74      	ldr	r3, [pc, #464]	; (8016530 <_dtoa_r+0x2e8>)
 8016360:	2200      	movs	r2, #0
 8016362:	4630      	mov	r0, r6
 8016364:	4639      	mov	r1, r7
 8016366:	f7e9 ffb7 	bl	80002d8 <__aeabi_dsub>
 801636a:	a365      	add	r3, pc, #404	; (adr r3, 8016500 <_dtoa_r+0x2b8>)
 801636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016370:	f7ea f96a 	bl	8000648 <__aeabi_dmul>
 8016374:	a364      	add	r3, pc, #400	; (adr r3, 8016508 <_dtoa_r+0x2c0>)
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	f7e9 ffaf 	bl	80002dc <__adddf3>
 801637e:	4606      	mov	r6, r0
 8016380:	4628      	mov	r0, r5
 8016382:	460f      	mov	r7, r1
 8016384:	f7ea f8f6 	bl	8000574 <__aeabi_i2d>
 8016388:	a361      	add	r3, pc, #388	; (adr r3, 8016510 <_dtoa_r+0x2c8>)
 801638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638e:	f7ea f95b 	bl	8000648 <__aeabi_dmul>
 8016392:	4602      	mov	r2, r0
 8016394:	460b      	mov	r3, r1
 8016396:	4630      	mov	r0, r6
 8016398:	4639      	mov	r1, r7
 801639a:	f7e9 ff9f 	bl	80002dc <__adddf3>
 801639e:	4606      	mov	r6, r0
 80163a0:	460f      	mov	r7, r1
 80163a2:	f7ea fc01 	bl	8000ba8 <__aeabi_d2iz>
 80163a6:	2200      	movs	r2, #0
 80163a8:	9000      	str	r0, [sp, #0]
 80163aa:	2300      	movs	r3, #0
 80163ac:	4630      	mov	r0, r6
 80163ae:	4639      	mov	r1, r7
 80163b0:	f7ea fbbc 	bl	8000b2c <__aeabi_dcmplt>
 80163b4:	b150      	cbz	r0, 80163cc <_dtoa_r+0x184>
 80163b6:	9800      	ldr	r0, [sp, #0]
 80163b8:	f7ea f8dc 	bl	8000574 <__aeabi_i2d>
 80163bc:	4632      	mov	r2, r6
 80163be:	463b      	mov	r3, r7
 80163c0:	f7ea fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80163c4:	b910      	cbnz	r0, 80163cc <_dtoa_r+0x184>
 80163c6:	9b00      	ldr	r3, [sp, #0]
 80163c8:	3b01      	subs	r3, #1
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	9b00      	ldr	r3, [sp, #0]
 80163ce:	2b16      	cmp	r3, #22
 80163d0:	d85a      	bhi.n	8016488 <_dtoa_r+0x240>
 80163d2:	9a00      	ldr	r2, [sp, #0]
 80163d4:	4b57      	ldr	r3, [pc, #348]	; (8016534 <_dtoa_r+0x2ec>)
 80163d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163de:	ec51 0b19 	vmov	r0, r1, d9
 80163e2:	f7ea fba3 	bl	8000b2c <__aeabi_dcmplt>
 80163e6:	2800      	cmp	r0, #0
 80163e8:	d050      	beq.n	801648c <_dtoa_r+0x244>
 80163ea:	9b00      	ldr	r3, [sp, #0]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	2300      	movs	r3, #0
 80163f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80163f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163f6:	1b5d      	subs	r5, r3, r5
 80163f8:	1e6b      	subs	r3, r5, #1
 80163fa:	9305      	str	r3, [sp, #20]
 80163fc:	bf45      	ittet	mi
 80163fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8016402:	9304      	strmi	r3, [sp, #16]
 8016404:	2300      	movpl	r3, #0
 8016406:	2300      	movmi	r3, #0
 8016408:	bf4c      	ite	mi
 801640a:	9305      	strmi	r3, [sp, #20]
 801640c:	9304      	strpl	r3, [sp, #16]
 801640e:	9b00      	ldr	r3, [sp, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	db3d      	blt.n	8016490 <_dtoa_r+0x248>
 8016414:	9b05      	ldr	r3, [sp, #20]
 8016416:	9a00      	ldr	r2, [sp, #0]
 8016418:	920a      	str	r2, [sp, #40]	; 0x28
 801641a:	4413      	add	r3, r2
 801641c:	9305      	str	r3, [sp, #20]
 801641e:	2300      	movs	r3, #0
 8016420:	9307      	str	r3, [sp, #28]
 8016422:	9b06      	ldr	r3, [sp, #24]
 8016424:	2b09      	cmp	r3, #9
 8016426:	f200 8089 	bhi.w	801653c <_dtoa_r+0x2f4>
 801642a:	2b05      	cmp	r3, #5
 801642c:	bfc4      	itt	gt
 801642e:	3b04      	subgt	r3, #4
 8016430:	9306      	strgt	r3, [sp, #24]
 8016432:	9b06      	ldr	r3, [sp, #24]
 8016434:	f1a3 0302 	sub.w	r3, r3, #2
 8016438:	bfcc      	ite	gt
 801643a:	2500      	movgt	r5, #0
 801643c:	2501      	movle	r5, #1
 801643e:	2b03      	cmp	r3, #3
 8016440:	f200 8087 	bhi.w	8016552 <_dtoa_r+0x30a>
 8016444:	e8df f003 	tbb	[pc, r3]
 8016448:	59383a2d 	.word	0x59383a2d
 801644c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016450:	441d      	add	r5, r3
 8016452:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016456:	2b20      	cmp	r3, #32
 8016458:	bfc1      	itttt	gt
 801645a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801645e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016462:	fa0b f303 	lslgt.w	r3, fp, r3
 8016466:	fa26 f000 	lsrgt.w	r0, r6, r0
 801646a:	bfda      	itte	le
 801646c:	f1c3 0320 	rsble	r3, r3, #32
 8016470:	fa06 f003 	lslle.w	r0, r6, r3
 8016474:	4318      	orrgt	r0, r3
 8016476:	f7ea f86d 	bl	8000554 <__aeabi_ui2d>
 801647a:	2301      	movs	r3, #1
 801647c:	4606      	mov	r6, r0
 801647e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016482:	3d01      	subs	r5, #1
 8016484:	930e      	str	r3, [sp, #56]	; 0x38
 8016486:	e76a      	b.n	801635e <_dtoa_r+0x116>
 8016488:	2301      	movs	r3, #1
 801648a:	e7b2      	b.n	80163f2 <_dtoa_r+0x1aa>
 801648c:	900b      	str	r0, [sp, #44]	; 0x2c
 801648e:	e7b1      	b.n	80163f4 <_dtoa_r+0x1ac>
 8016490:	9b04      	ldr	r3, [sp, #16]
 8016492:	9a00      	ldr	r2, [sp, #0]
 8016494:	1a9b      	subs	r3, r3, r2
 8016496:	9304      	str	r3, [sp, #16]
 8016498:	4253      	negs	r3, r2
 801649a:	9307      	str	r3, [sp, #28]
 801649c:	2300      	movs	r3, #0
 801649e:	930a      	str	r3, [sp, #40]	; 0x28
 80164a0:	e7bf      	b.n	8016422 <_dtoa_r+0x1da>
 80164a2:	2300      	movs	r3, #0
 80164a4:	9308      	str	r3, [sp, #32]
 80164a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	dc55      	bgt.n	8016558 <_dtoa_r+0x310>
 80164ac:	2301      	movs	r3, #1
 80164ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80164b2:	461a      	mov	r2, r3
 80164b4:	9209      	str	r2, [sp, #36]	; 0x24
 80164b6:	e00c      	b.n	80164d2 <_dtoa_r+0x28a>
 80164b8:	2301      	movs	r3, #1
 80164ba:	e7f3      	b.n	80164a4 <_dtoa_r+0x25c>
 80164bc:	2300      	movs	r3, #0
 80164be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164c0:	9308      	str	r3, [sp, #32]
 80164c2:	9b00      	ldr	r3, [sp, #0]
 80164c4:	4413      	add	r3, r2
 80164c6:	9302      	str	r3, [sp, #8]
 80164c8:	3301      	adds	r3, #1
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	9303      	str	r3, [sp, #12]
 80164ce:	bfb8      	it	lt
 80164d0:	2301      	movlt	r3, #1
 80164d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80164d4:	2200      	movs	r2, #0
 80164d6:	6042      	str	r2, [r0, #4]
 80164d8:	2204      	movs	r2, #4
 80164da:	f102 0614 	add.w	r6, r2, #20
 80164de:	429e      	cmp	r6, r3
 80164e0:	6841      	ldr	r1, [r0, #4]
 80164e2:	d93d      	bls.n	8016560 <_dtoa_r+0x318>
 80164e4:	4620      	mov	r0, r4
 80164e6:	f000 fecd 	bl	8017284 <_Balloc>
 80164ea:	9001      	str	r0, [sp, #4]
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d13b      	bne.n	8016568 <_dtoa_r+0x320>
 80164f0:	4b11      	ldr	r3, [pc, #68]	; (8016538 <_dtoa_r+0x2f0>)
 80164f2:	4602      	mov	r2, r0
 80164f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80164f8:	e6c0      	b.n	801627c <_dtoa_r+0x34>
 80164fa:	2301      	movs	r3, #1
 80164fc:	e7df      	b.n	80164be <_dtoa_r+0x276>
 80164fe:	bf00      	nop
 8016500:	636f4361 	.word	0x636f4361
 8016504:	3fd287a7 	.word	0x3fd287a7
 8016508:	8b60c8b3 	.word	0x8b60c8b3
 801650c:	3fc68a28 	.word	0x3fc68a28
 8016510:	509f79fb 	.word	0x509f79fb
 8016514:	3fd34413 	.word	0x3fd34413
 8016518:	080185d1 	.word	0x080185d1
 801651c:	080185e8 	.word	0x080185e8
 8016520:	7ff00000 	.word	0x7ff00000
 8016524:	080185cd 	.word	0x080185cd
 8016528:	080185c4 	.word	0x080185c4
 801652c:	080185a1 	.word	0x080185a1
 8016530:	3ff80000 	.word	0x3ff80000
 8016534:	08018738 	.word	0x08018738
 8016538:	08018643 	.word	0x08018643
 801653c:	2501      	movs	r5, #1
 801653e:	2300      	movs	r3, #0
 8016540:	9306      	str	r3, [sp, #24]
 8016542:	9508      	str	r5, [sp, #32]
 8016544:	f04f 33ff 	mov.w	r3, #4294967295
 8016548:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801654c:	2200      	movs	r2, #0
 801654e:	2312      	movs	r3, #18
 8016550:	e7b0      	b.n	80164b4 <_dtoa_r+0x26c>
 8016552:	2301      	movs	r3, #1
 8016554:	9308      	str	r3, [sp, #32]
 8016556:	e7f5      	b.n	8016544 <_dtoa_r+0x2fc>
 8016558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801655e:	e7b8      	b.n	80164d2 <_dtoa_r+0x28a>
 8016560:	3101      	adds	r1, #1
 8016562:	6041      	str	r1, [r0, #4]
 8016564:	0052      	lsls	r2, r2, #1
 8016566:	e7b8      	b.n	80164da <_dtoa_r+0x292>
 8016568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801656a:	9a01      	ldr	r2, [sp, #4]
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	9b03      	ldr	r3, [sp, #12]
 8016570:	2b0e      	cmp	r3, #14
 8016572:	f200 809d 	bhi.w	80166b0 <_dtoa_r+0x468>
 8016576:	2d00      	cmp	r5, #0
 8016578:	f000 809a 	beq.w	80166b0 <_dtoa_r+0x468>
 801657c:	9b00      	ldr	r3, [sp, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	dd32      	ble.n	80165e8 <_dtoa_r+0x3a0>
 8016582:	4ab7      	ldr	r2, [pc, #732]	; (8016860 <_dtoa_r+0x618>)
 8016584:	f003 030f 	and.w	r3, r3, #15
 8016588:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801658c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016590:	9b00      	ldr	r3, [sp, #0]
 8016592:	05d8      	lsls	r0, r3, #23
 8016594:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016598:	d516      	bpl.n	80165c8 <_dtoa_r+0x380>
 801659a:	4bb2      	ldr	r3, [pc, #712]	; (8016864 <_dtoa_r+0x61c>)
 801659c:	ec51 0b19 	vmov	r0, r1, d9
 80165a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80165a4:	f7ea f97a 	bl	800089c <__aeabi_ddiv>
 80165a8:	f007 070f 	and.w	r7, r7, #15
 80165ac:	4682      	mov	sl, r0
 80165ae:	468b      	mov	fp, r1
 80165b0:	2503      	movs	r5, #3
 80165b2:	4eac      	ldr	r6, [pc, #688]	; (8016864 <_dtoa_r+0x61c>)
 80165b4:	b957      	cbnz	r7, 80165cc <_dtoa_r+0x384>
 80165b6:	4642      	mov	r2, r8
 80165b8:	464b      	mov	r3, r9
 80165ba:	4650      	mov	r0, sl
 80165bc:	4659      	mov	r1, fp
 80165be:	f7ea f96d 	bl	800089c <__aeabi_ddiv>
 80165c2:	4682      	mov	sl, r0
 80165c4:	468b      	mov	fp, r1
 80165c6:	e028      	b.n	801661a <_dtoa_r+0x3d2>
 80165c8:	2502      	movs	r5, #2
 80165ca:	e7f2      	b.n	80165b2 <_dtoa_r+0x36a>
 80165cc:	07f9      	lsls	r1, r7, #31
 80165ce:	d508      	bpl.n	80165e2 <_dtoa_r+0x39a>
 80165d0:	4640      	mov	r0, r8
 80165d2:	4649      	mov	r1, r9
 80165d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165d8:	f7ea f836 	bl	8000648 <__aeabi_dmul>
 80165dc:	3501      	adds	r5, #1
 80165de:	4680      	mov	r8, r0
 80165e0:	4689      	mov	r9, r1
 80165e2:	107f      	asrs	r7, r7, #1
 80165e4:	3608      	adds	r6, #8
 80165e6:	e7e5      	b.n	80165b4 <_dtoa_r+0x36c>
 80165e8:	f000 809b 	beq.w	8016722 <_dtoa_r+0x4da>
 80165ec:	9b00      	ldr	r3, [sp, #0]
 80165ee:	4f9d      	ldr	r7, [pc, #628]	; (8016864 <_dtoa_r+0x61c>)
 80165f0:	425e      	negs	r6, r3
 80165f2:	4b9b      	ldr	r3, [pc, #620]	; (8016860 <_dtoa_r+0x618>)
 80165f4:	f006 020f 	and.w	r2, r6, #15
 80165f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	ec51 0b19 	vmov	r0, r1, d9
 8016604:	f7ea f820 	bl	8000648 <__aeabi_dmul>
 8016608:	1136      	asrs	r6, r6, #4
 801660a:	4682      	mov	sl, r0
 801660c:	468b      	mov	fp, r1
 801660e:	2300      	movs	r3, #0
 8016610:	2502      	movs	r5, #2
 8016612:	2e00      	cmp	r6, #0
 8016614:	d17a      	bne.n	801670c <_dtoa_r+0x4c4>
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1d3      	bne.n	80165c2 <_dtoa_r+0x37a>
 801661a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801661c:	2b00      	cmp	r3, #0
 801661e:	f000 8082 	beq.w	8016726 <_dtoa_r+0x4de>
 8016622:	4b91      	ldr	r3, [pc, #580]	; (8016868 <_dtoa_r+0x620>)
 8016624:	2200      	movs	r2, #0
 8016626:	4650      	mov	r0, sl
 8016628:	4659      	mov	r1, fp
 801662a:	f7ea fa7f 	bl	8000b2c <__aeabi_dcmplt>
 801662e:	2800      	cmp	r0, #0
 8016630:	d079      	beq.n	8016726 <_dtoa_r+0x4de>
 8016632:	9b03      	ldr	r3, [sp, #12]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d076      	beq.n	8016726 <_dtoa_r+0x4de>
 8016638:	9b02      	ldr	r3, [sp, #8]
 801663a:	2b00      	cmp	r3, #0
 801663c:	dd36      	ble.n	80166ac <_dtoa_r+0x464>
 801663e:	9b00      	ldr	r3, [sp, #0]
 8016640:	4650      	mov	r0, sl
 8016642:	4659      	mov	r1, fp
 8016644:	1e5f      	subs	r7, r3, #1
 8016646:	2200      	movs	r2, #0
 8016648:	4b88      	ldr	r3, [pc, #544]	; (801686c <_dtoa_r+0x624>)
 801664a:	f7e9 fffd 	bl	8000648 <__aeabi_dmul>
 801664e:	9e02      	ldr	r6, [sp, #8]
 8016650:	4682      	mov	sl, r0
 8016652:	468b      	mov	fp, r1
 8016654:	3501      	adds	r5, #1
 8016656:	4628      	mov	r0, r5
 8016658:	f7e9 ff8c 	bl	8000574 <__aeabi_i2d>
 801665c:	4652      	mov	r2, sl
 801665e:	465b      	mov	r3, fp
 8016660:	f7e9 fff2 	bl	8000648 <__aeabi_dmul>
 8016664:	4b82      	ldr	r3, [pc, #520]	; (8016870 <_dtoa_r+0x628>)
 8016666:	2200      	movs	r2, #0
 8016668:	f7e9 fe38 	bl	80002dc <__adddf3>
 801666c:	46d0      	mov	r8, sl
 801666e:	46d9      	mov	r9, fp
 8016670:	4682      	mov	sl, r0
 8016672:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016676:	2e00      	cmp	r6, #0
 8016678:	d158      	bne.n	801672c <_dtoa_r+0x4e4>
 801667a:	4b7e      	ldr	r3, [pc, #504]	; (8016874 <_dtoa_r+0x62c>)
 801667c:	2200      	movs	r2, #0
 801667e:	4640      	mov	r0, r8
 8016680:	4649      	mov	r1, r9
 8016682:	f7e9 fe29 	bl	80002d8 <__aeabi_dsub>
 8016686:	4652      	mov	r2, sl
 8016688:	465b      	mov	r3, fp
 801668a:	4680      	mov	r8, r0
 801668c:	4689      	mov	r9, r1
 801668e:	f7ea fa6b 	bl	8000b68 <__aeabi_dcmpgt>
 8016692:	2800      	cmp	r0, #0
 8016694:	f040 8295 	bne.w	8016bc2 <_dtoa_r+0x97a>
 8016698:	4652      	mov	r2, sl
 801669a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801669e:	4640      	mov	r0, r8
 80166a0:	4649      	mov	r1, r9
 80166a2:	f7ea fa43 	bl	8000b2c <__aeabi_dcmplt>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	f040 8289 	bne.w	8016bbe <_dtoa_r+0x976>
 80166ac:	ec5b ab19 	vmov	sl, fp, d9
 80166b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f2c0 8148 	blt.w	8016948 <_dtoa_r+0x700>
 80166b8:	9a00      	ldr	r2, [sp, #0]
 80166ba:	2a0e      	cmp	r2, #14
 80166bc:	f300 8144 	bgt.w	8016948 <_dtoa_r+0x700>
 80166c0:	4b67      	ldr	r3, [pc, #412]	; (8016860 <_dtoa_r+0x618>)
 80166c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	f280 80d5 	bge.w	801687c <_dtoa_r+0x634>
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f300 80d1 	bgt.w	801687c <_dtoa_r+0x634>
 80166da:	f040 826f 	bne.w	8016bbc <_dtoa_r+0x974>
 80166de:	4b65      	ldr	r3, [pc, #404]	; (8016874 <_dtoa_r+0x62c>)
 80166e0:	2200      	movs	r2, #0
 80166e2:	4640      	mov	r0, r8
 80166e4:	4649      	mov	r1, r9
 80166e6:	f7e9 ffaf 	bl	8000648 <__aeabi_dmul>
 80166ea:	4652      	mov	r2, sl
 80166ec:	465b      	mov	r3, fp
 80166ee:	f7ea fa31 	bl	8000b54 <__aeabi_dcmpge>
 80166f2:	9e03      	ldr	r6, [sp, #12]
 80166f4:	4637      	mov	r7, r6
 80166f6:	2800      	cmp	r0, #0
 80166f8:	f040 8245 	bne.w	8016b86 <_dtoa_r+0x93e>
 80166fc:	9d01      	ldr	r5, [sp, #4]
 80166fe:	2331      	movs	r3, #49	; 0x31
 8016700:	f805 3b01 	strb.w	r3, [r5], #1
 8016704:	9b00      	ldr	r3, [sp, #0]
 8016706:	3301      	adds	r3, #1
 8016708:	9300      	str	r3, [sp, #0]
 801670a:	e240      	b.n	8016b8e <_dtoa_r+0x946>
 801670c:	07f2      	lsls	r2, r6, #31
 801670e:	d505      	bpl.n	801671c <_dtoa_r+0x4d4>
 8016710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016714:	f7e9 ff98 	bl	8000648 <__aeabi_dmul>
 8016718:	3501      	adds	r5, #1
 801671a:	2301      	movs	r3, #1
 801671c:	1076      	asrs	r6, r6, #1
 801671e:	3708      	adds	r7, #8
 8016720:	e777      	b.n	8016612 <_dtoa_r+0x3ca>
 8016722:	2502      	movs	r5, #2
 8016724:	e779      	b.n	801661a <_dtoa_r+0x3d2>
 8016726:	9f00      	ldr	r7, [sp, #0]
 8016728:	9e03      	ldr	r6, [sp, #12]
 801672a:	e794      	b.n	8016656 <_dtoa_r+0x40e>
 801672c:	9901      	ldr	r1, [sp, #4]
 801672e:	4b4c      	ldr	r3, [pc, #304]	; (8016860 <_dtoa_r+0x618>)
 8016730:	4431      	add	r1, r6
 8016732:	910d      	str	r1, [sp, #52]	; 0x34
 8016734:	9908      	ldr	r1, [sp, #32]
 8016736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801673a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801673e:	2900      	cmp	r1, #0
 8016740:	d043      	beq.n	80167ca <_dtoa_r+0x582>
 8016742:	494d      	ldr	r1, [pc, #308]	; (8016878 <_dtoa_r+0x630>)
 8016744:	2000      	movs	r0, #0
 8016746:	f7ea f8a9 	bl	800089c <__aeabi_ddiv>
 801674a:	4652      	mov	r2, sl
 801674c:	465b      	mov	r3, fp
 801674e:	f7e9 fdc3 	bl	80002d8 <__aeabi_dsub>
 8016752:	9d01      	ldr	r5, [sp, #4]
 8016754:	4682      	mov	sl, r0
 8016756:	468b      	mov	fp, r1
 8016758:	4649      	mov	r1, r9
 801675a:	4640      	mov	r0, r8
 801675c:	f7ea fa24 	bl	8000ba8 <__aeabi_d2iz>
 8016760:	4606      	mov	r6, r0
 8016762:	f7e9 ff07 	bl	8000574 <__aeabi_i2d>
 8016766:	4602      	mov	r2, r0
 8016768:	460b      	mov	r3, r1
 801676a:	4640      	mov	r0, r8
 801676c:	4649      	mov	r1, r9
 801676e:	f7e9 fdb3 	bl	80002d8 <__aeabi_dsub>
 8016772:	3630      	adds	r6, #48	; 0x30
 8016774:	f805 6b01 	strb.w	r6, [r5], #1
 8016778:	4652      	mov	r2, sl
 801677a:	465b      	mov	r3, fp
 801677c:	4680      	mov	r8, r0
 801677e:	4689      	mov	r9, r1
 8016780:	f7ea f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8016784:	2800      	cmp	r0, #0
 8016786:	d163      	bne.n	8016850 <_dtoa_r+0x608>
 8016788:	4642      	mov	r2, r8
 801678a:	464b      	mov	r3, r9
 801678c:	4936      	ldr	r1, [pc, #216]	; (8016868 <_dtoa_r+0x620>)
 801678e:	2000      	movs	r0, #0
 8016790:	f7e9 fda2 	bl	80002d8 <__aeabi_dsub>
 8016794:	4652      	mov	r2, sl
 8016796:	465b      	mov	r3, fp
 8016798:	f7ea f9c8 	bl	8000b2c <__aeabi_dcmplt>
 801679c:	2800      	cmp	r0, #0
 801679e:	f040 80b5 	bne.w	801690c <_dtoa_r+0x6c4>
 80167a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167a4:	429d      	cmp	r5, r3
 80167a6:	d081      	beq.n	80166ac <_dtoa_r+0x464>
 80167a8:	4b30      	ldr	r3, [pc, #192]	; (801686c <_dtoa_r+0x624>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	4650      	mov	r0, sl
 80167ae:	4659      	mov	r1, fp
 80167b0:	f7e9 ff4a 	bl	8000648 <__aeabi_dmul>
 80167b4:	4b2d      	ldr	r3, [pc, #180]	; (801686c <_dtoa_r+0x624>)
 80167b6:	4682      	mov	sl, r0
 80167b8:	468b      	mov	fp, r1
 80167ba:	4640      	mov	r0, r8
 80167bc:	4649      	mov	r1, r9
 80167be:	2200      	movs	r2, #0
 80167c0:	f7e9 ff42 	bl	8000648 <__aeabi_dmul>
 80167c4:	4680      	mov	r8, r0
 80167c6:	4689      	mov	r9, r1
 80167c8:	e7c6      	b.n	8016758 <_dtoa_r+0x510>
 80167ca:	4650      	mov	r0, sl
 80167cc:	4659      	mov	r1, fp
 80167ce:	f7e9 ff3b 	bl	8000648 <__aeabi_dmul>
 80167d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167d4:	9d01      	ldr	r5, [sp, #4]
 80167d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80167d8:	4682      	mov	sl, r0
 80167da:	468b      	mov	fp, r1
 80167dc:	4649      	mov	r1, r9
 80167de:	4640      	mov	r0, r8
 80167e0:	f7ea f9e2 	bl	8000ba8 <__aeabi_d2iz>
 80167e4:	4606      	mov	r6, r0
 80167e6:	f7e9 fec5 	bl	8000574 <__aeabi_i2d>
 80167ea:	3630      	adds	r6, #48	; 0x30
 80167ec:	4602      	mov	r2, r0
 80167ee:	460b      	mov	r3, r1
 80167f0:	4640      	mov	r0, r8
 80167f2:	4649      	mov	r1, r9
 80167f4:	f7e9 fd70 	bl	80002d8 <__aeabi_dsub>
 80167f8:	f805 6b01 	strb.w	r6, [r5], #1
 80167fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167fe:	429d      	cmp	r5, r3
 8016800:	4680      	mov	r8, r0
 8016802:	4689      	mov	r9, r1
 8016804:	f04f 0200 	mov.w	r2, #0
 8016808:	d124      	bne.n	8016854 <_dtoa_r+0x60c>
 801680a:	4b1b      	ldr	r3, [pc, #108]	; (8016878 <_dtoa_r+0x630>)
 801680c:	4650      	mov	r0, sl
 801680e:	4659      	mov	r1, fp
 8016810:	f7e9 fd64 	bl	80002dc <__adddf3>
 8016814:	4602      	mov	r2, r0
 8016816:	460b      	mov	r3, r1
 8016818:	4640      	mov	r0, r8
 801681a:	4649      	mov	r1, r9
 801681c:	f7ea f9a4 	bl	8000b68 <__aeabi_dcmpgt>
 8016820:	2800      	cmp	r0, #0
 8016822:	d173      	bne.n	801690c <_dtoa_r+0x6c4>
 8016824:	4652      	mov	r2, sl
 8016826:	465b      	mov	r3, fp
 8016828:	4913      	ldr	r1, [pc, #76]	; (8016878 <_dtoa_r+0x630>)
 801682a:	2000      	movs	r0, #0
 801682c:	f7e9 fd54 	bl	80002d8 <__aeabi_dsub>
 8016830:	4602      	mov	r2, r0
 8016832:	460b      	mov	r3, r1
 8016834:	4640      	mov	r0, r8
 8016836:	4649      	mov	r1, r9
 8016838:	f7ea f978 	bl	8000b2c <__aeabi_dcmplt>
 801683c:	2800      	cmp	r0, #0
 801683e:	f43f af35 	beq.w	80166ac <_dtoa_r+0x464>
 8016842:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016844:	1e6b      	subs	r3, r5, #1
 8016846:	930f      	str	r3, [sp, #60]	; 0x3c
 8016848:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801684c:	2b30      	cmp	r3, #48	; 0x30
 801684e:	d0f8      	beq.n	8016842 <_dtoa_r+0x5fa>
 8016850:	9700      	str	r7, [sp, #0]
 8016852:	e049      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016854:	4b05      	ldr	r3, [pc, #20]	; (801686c <_dtoa_r+0x624>)
 8016856:	f7e9 fef7 	bl	8000648 <__aeabi_dmul>
 801685a:	4680      	mov	r8, r0
 801685c:	4689      	mov	r9, r1
 801685e:	e7bd      	b.n	80167dc <_dtoa_r+0x594>
 8016860:	08018738 	.word	0x08018738
 8016864:	08018710 	.word	0x08018710
 8016868:	3ff00000 	.word	0x3ff00000
 801686c:	40240000 	.word	0x40240000
 8016870:	401c0000 	.word	0x401c0000
 8016874:	40140000 	.word	0x40140000
 8016878:	3fe00000 	.word	0x3fe00000
 801687c:	9d01      	ldr	r5, [sp, #4]
 801687e:	4656      	mov	r6, sl
 8016880:	465f      	mov	r7, fp
 8016882:	4642      	mov	r2, r8
 8016884:	464b      	mov	r3, r9
 8016886:	4630      	mov	r0, r6
 8016888:	4639      	mov	r1, r7
 801688a:	f7ea f807 	bl	800089c <__aeabi_ddiv>
 801688e:	f7ea f98b 	bl	8000ba8 <__aeabi_d2iz>
 8016892:	4682      	mov	sl, r0
 8016894:	f7e9 fe6e 	bl	8000574 <__aeabi_i2d>
 8016898:	4642      	mov	r2, r8
 801689a:	464b      	mov	r3, r9
 801689c:	f7e9 fed4 	bl	8000648 <__aeabi_dmul>
 80168a0:	4602      	mov	r2, r0
 80168a2:	460b      	mov	r3, r1
 80168a4:	4630      	mov	r0, r6
 80168a6:	4639      	mov	r1, r7
 80168a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80168ac:	f7e9 fd14 	bl	80002d8 <__aeabi_dsub>
 80168b0:	f805 6b01 	strb.w	r6, [r5], #1
 80168b4:	9e01      	ldr	r6, [sp, #4]
 80168b6:	9f03      	ldr	r7, [sp, #12]
 80168b8:	1bae      	subs	r6, r5, r6
 80168ba:	42b7      	cmp	r7, r6
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	d135      	bne.n	801692e <_dtoa_r+0x6e6>
 80168c2:	f7e9 fd0b 	bl	80002dc <__adddf3>
 80168c6:	4642      	mov	r2, r8
 80168c8:	464b      	mov	r3, r9
 80168ca:	4606      	mov	r6, r0
 80168cc:	460f      	mov	r7, r1
 80168ce:	f7ea f94b 	bl	8000b68 <__aeabi_dcmpgt>
 80168d2:	b9d0      	cbnz	r0, 801690a <_dtoa_r+0x6c2>
 80168d4:	4642      	mov	r2, r8
 80168d6:	464b      	mov	r3, r9
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7ea f91c 	bl	8000b18 <__aeabi_dcmpeq>
 80168e0:	b110      	cbz	r0, 80168e8 <_dtoa_r+0x6a0>
 80168e2:	f01a 0f01 	tst.w	sl, #1
 80168e6:	d110      	bne.n	801690a <_dtoa_r+0x6c2>
 80168e8:	4620      	mov	r0, r4
 80168ea:	ee18 1a10 	vmov	r1, s16
 80168ee:	f000 fd09 	bl	8017304 <_Bfree>
 80168f2:	2300      	movs	r3, #0
 80168f4:	9800      	ldr	r0, [sp, #0]
 80168f6:	702b      	strb	r3, [r5, #0]
 80168f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168fa:	3001      	adds	r0, #1
 80168fc:	6018      	str	r0, [r3, #0]
 80168fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016900:	2b00      	cmp	r3, #0
 8016902:	f43f acf1 	beq.w	80162e8 <_dtoa_r+0xa0>
 8016906:	601d      	str	r5, [r3, #0]
 8016908:	e4ee      	b.n	80162e8 <_dtoa_r+0xa0>
 801690a:	9f00      	ldr	r7, [sp, #0]
 801690c:	462b      	mov	r3, r5
 801690e:	461d      	mov	r5, r3
 8016910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016914:	2a39      	cmp	r2, #57	; 0x39
 8016916:	d106      	bne.n	8016926 <_dtoa_r+0x6de>
 8016918:	9a01      	ldr	r2, [sp, #4]
 801691a:	429a      	cmp	r2, r3
 801691c:	d1f7      	bne.n	801690e <_dtoa_r+0x6c6>
 801691e:	9901      	ldr	r1, [sp, #4]
 8016920:	2230      	movs	r2, #48	; 0x30
 8016922:	3701      	adds	r7, #1
 8016924:	700a      	strb	r2, [r1, #0]
 8016926:	781a      	ldrb	r2, [r3, #0]
 8016928:	3201      	adds	r2, #1
 801692a:	701a      	strb	r2, [r3, #0]
 801692c:	e790      	b.n	8016850 <_dtoa_r+0x608>
 801692e:	4ba6      	ldr	r3, [pc, #664]	; (8016bc8 <_dtoa_r+0x980>)
 8016930:	2200      	movs	r2, #0
 8016932:	f7e9 fe89 	bl	8000648 <__aeabi_dmul>
 8016936:	2200      	movs	r2, #0
 8016938:	2300      	movs	r3, #0
 801693a:	4606      	mov	r6, r0
 801693c:	460f      	mov	r7, r1
 801693e:	f7ea f8eb 	bl	8000b18 <__aeabi_dcmpeq>
 8016942:	2800      	cmp	r0, #0
 8016944:	d09d      	beq.n	8016882 <_dtoa_r+0x63a>
 8016946:	e7cf      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016948:	9a08      	ldr	r2, [sp, #32]
 801694a:	2a00      	cmp	r2, #0
 801694c:	f000 80d7 	beq.w	8016afe <_dtoa_r+0x8b6>
 8016950:	9a06      	ldr	r2, [sp, #24]
 8016952:	2a01      	cmp	r2, #1
 8016954:	f300 80ba 	bgt.w	8016acc <_dtoa_r+0x884>
 8016958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801695a:	2a00      	cmp	r2, #0
 801695c:	f000 80b2 	beq.w	8016ac4 <_dtoa_r+0x87c>
 8016960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016964:	9e07      	ldr	r6, [sp, #28]
 8016966:	9d04      	ldr	r5, [sp, #16]
 8016968:	9a04      	ldr	r2, [sp, #16]
 801696a:	441a      	add	r2, r3
 801696c:	9204      	str	r2, [sp, #16]
 801696e:	9a05      	ldr	r2, [sp, #20]
 8016970:	2101      	movs	r1, #1
 8016972:	441a      	add	r2, r3
 8016974:	4620      	mov	r0, r4
 8016976:	9205      	str	r2, [sp, #20]
 8016978:	f000 fd7c 	bl	8017474 <__i2b>
 801697c:	4607      	mov	r7, r0
 801697e:	2d00      	cmp	r5, #0
 8016980:	dd0c      	ble.n	801699c <_dtoa_r+0x754>
 8016982:	9b05      	ldr	r3, [sp, #20]
 8016984:	2b00      	cmp	r3, #0
 8016986:	dd09      	ble.n	801699c <_dtoa_r+0x754>
 8016988:	42ab      	cmp	r3, r5
 801698a:	9a04      	ldr	r2, [sp, #16]
 801698c:	bfa8      	it	ge
 801698e:	462b      	movge	r3, r5
 8016990:	1ad2      	subs	r2, r2, r3
 8016992:	9204      	str	r2, [sp, #16]
 8016994:	9a05      	ldr	r2, [sp, #20]
 8016996:	1aed      	subs	r5, r5, r3
 8016998:	1ad3      	subs	r3, r2, r3
 801699a:	9305      	str	r3, [sp, #20]
 801699c:	9b07      	ldr	r3, [sp, #28]
 801699e:	b31b      	cbz	r3, 80169e8 <_dtoa_r+0x7a0>
 80169a0:	9b08      	ldr	r3, [sp, #32]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	f000 80af 	beq.w	8016b06 <_dtoa_r+0x8be>
 80169a8:	2e00      	cmp	r6, #0
 80169aa:	dd13      	ble.n	80169d4 <_dtoa_r+0x78c>
 80169ac:	4639      	mov	r1, r7
 80169ae:	4632      	mov	r2, r6
 80169b0:	4620      	mov	r0, r4
 80169b2:	f000 fe1f 	bl	80175f4 <__pow5mult>
 80169b6:	ee18 2a10 	vmov	r2, s16
 80169ba:	4601      	mov	r1, r0
 80169bc:	4607      	mov	r7, r0
 80169be:	4620      	mov	r0, r4
 80169c0:	f000 fd6e 	bl	80174a0 <__multiply>
 80169c4:	ee18 1a10 	vmov	r1, s16
 80169c8:	4680      	mov	r8, r0
 80169ca:	4620      	mov	r0, r4
 80169cc:	f000 fc9a 	bl	8017304 <_Bfree>
 80169d0:	ee08 8a10 	vmov	s16, r8
 80169d4:	9b07      	ldr	r3, [sp, #28]
 80169d6:	1b9a      	subs	r2, r3, r6
 80169d8:	d006      	beq.n	80169e8 <_dtoa_r+0x7a0>
 80169da:	ee18 1a10 	vmov	r1, s16
 80169de:	4620      	mov	r0, r4
 80169e0:	f000 fe08 	bl	80175f4 <__pow5mult>
 80169e4:	ee08 0a10 	vmov	s16, r0
 80169e8:	2101      	movs	r1, #1
 80169ea:	4620      	mov	r0, r4
 80169ec:	f000 fd42 	bl	8017474 <__i2b>
 80169f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	4606      	mov	r6, r0
 80169f6:	f340 8088 	ble.w	8016b0a <_dtoa_r+0x8c2>
 80169fa:	461a      	mov	r2, r3
 80169fc:	4601      	mov	r1, r0
 80169fe:	4620      	mov	r0, r4
 8016a00:	f000 fdf8 	bl	80175f4 <__pow5mult>
 8016a04:	9b06      	ldr	r3, [sp, #24]
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	4606      	mov	r6, r0
 8016a0a:	f340 8081 	ble.w	8016b10 <_dtoa_r+0x8c8>
 8016a0e:	f04f 0800 	mov.w	r8, #0
 8016a12:	6933      	ldr	r3, [r6, #16]
 8016a14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016a18:	6918      	ldr	r0, [r3, #16]
 8016a1a:	f000 fcdb 	bl	80173d4 <__hi0bits>
 8016a1e:	f1c0 0020 	rsb	r0, r0, #32
 8016a22:	9b05      	ldr	r3, [sp, #20]
 8016a24:	4418      	add	r0, r3
 8016a26:	f010 001f 	ands.w	r0, r0, #31
 8016a2a:	f000 8092 	beq.w	8016b52 <_dtoa_r+0x90a>
 8016a2e:	f1c0 0320 	rsb	r3, r0, #32
 8016a32:	2b04      	cmp	r3, #4
 8016a34:	f340 808a 	ble.w	8016b4c <_dtoa_r+0x904>
 8016a38:	f1c0 001c 	rsb	r0, r0, #28
 8016a3c:	9b04      	ldr	r3, [sp, #16]
 8016a3e:	4403      	add	r3, r0
 8016a40:	9304      	str	r3, [sp, #16]
 8016a42:	9b05      	ldr	r3, [sp, #20]
 8016a44:	4403      	add	r3, r0
 8016a46:	4405      	add	r5, r0
 8016a48:	9305      	str	r3, [sp, #20]
 8016a4a:	9b04      	ldr	r3, [sp, #16]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dd07      	ble.n	8016a60 <_dtoa_r+0x818>
 8016a50:	ee18 1a10 	vmov	r1, s16
 8016a54:	461a      	mov	r2, r3
 8016a56:	4620      	mov	r0, r4
 8016a58:	f000 fe26 	bl	80176a8 <__lshift>
 8016a5c:	ee08 0a10 	vmov	s16, r0
 8016a60:	9b05      	ldr	r3, [sp, #20]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	dd05      	ble.n	8016a72 <_dtoa_r+0x82a>
 8016a66:	4631      	mov	r1, r6
 8016a68:	461a      	mov	r2, r3
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	f000 fe1c 	bl	80176a8 <__lshift>
 8016a70:	4606      	mov	r6, r0
 8016a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d06e      	beq.n	8016b56 <_dtoa_r+0x90e>
 8016a78:	ee18 0a10 	vmov	r0, s16
 8016a7c:	4631      	mov	r1, r6
 8016a7e:	f000 fe83 	bl	8017788 <__mcmp>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	da67      	bge.n	8016b56 <_dtoa_r+0x90e>
 8016a86:	9b00      	ldr	r3, [sp, #0]
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	ee18 1a10 	vmov	r1, s16
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	220a      	movs	r2, #10
 8016a92:	2300      	movs	r3, #0
 8016a94:	4620      	mov	r0, r4
 8016a96:	f000 fc57 	bl	8017348 <__multadd>
 8016a9a:	9b08      	ldr	r3, [sp, #32]
 8016a9c:	ee08 0a10 	vmov	s16, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	f000 81b1 	beq.w	8016e08 <_dtoa_r+0xbc0>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	220a      	movs	r2, #10
 8016aac:	4620      	mov	r0, r4
 8016aae:	f000 fc4b 	bl	8017348 <__multadd>
 8016ab2:	9b02      	ldr	r3, [sp, #8]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	4607      	mov	r7, r0
 8016ab8:	f300 808e 	bgt.w	8016bd8 <_dtoa_r+0x990>
 8016abc:	9b06      	ldr	r3, [sp, #24]
 8016abe:	2b02      	cmp	r3, #2
 8016ac0:	dc51      	bgt.n	8016b66 <_dtoa_r+0x91e>
 8016ac2:	e089      	b.n	8016bd8 <_dtoa_r+0x990>
 8016ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016aca:	e74b      	b.n	8016964 <_dtoa_r+0x71c>
 8016acc:	9b03      	ldr	r3, [sp, #12]
 8016ace:	1e5e      	subs	r6, r3, #1
 8016ad0:	9b07      	ldr	r3, [sp, #28]
 8016ad2:	42b3      	cmp	r3, r6
 8016ad4:	bfbf      	itttt	lt
 8016ad6:	9b07      	ldrlt	r3, [sp, #28]
 8016ad8:	9607      	strlt	r6, [sp, #28]
 8016ada:	1af2      	sublt	r2, r6, r3
 8016adc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016ade:	bfb6      	itet	lt
 8016ae0:	189b      	addlt	r3, r3, r2
 8016ae2:	1b9e      	subge	r6, r3, r6
 8016ae4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	bfb8      	it	lt
 8016aea:	2600      	movlt	r6, #0
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	bfb7      	itett	lt
 8016af0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016af4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016af8:	1a9d      	sublt	r5, r3, r2
 8016afa:	2300      	movlt	r3, #0
 8016afc:	e734      	b.n	8016968 <_dtoa_r+0x720>
 8016afe:	9e07      	ldr	r6, [sp, #28]
 8016b00:	9d04      	ldr	r5, [sp, #16]
 8016b02:	9f08      	ldr	r7, [sp, #32]
 8016b04:	e73b      	b.n	801697e <_dtoa_r+0x736>
 8016b06:	9a07      	ldr	r2, [sp, #28]
 8016b08:	e767      	b.n	80169da <_dtoa_r+0x792>
 8016b0a:	9b06      	ldr	r3, [sp, #24]
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	dc18      	bgt.n	8016b42 <_dtoa_r+0x8fa>
 8016b10:	f1ba 0f00 	cmp.w	sl, #0
 8016b14:	d115      	bne.n	8016b42 <_dtoa_r+0x8fa>
 8016b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b1a:	b993      	cbnz	r3, 8016b42 <_dtoa_r+0x8fa>
 8016b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016b20:	0d1b      	lsrs	r3, r3, #20
 8016b22:	051b      	lsls	r3, r3, #20
 8016b24:	b183      	cbz	r3, 8016b48 <_dtoa_r+0x900>
 8016b26:	9b04      	ldr	r3, [sp, #16]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	9304      	str	r3, [sp, #16]
 8016b2c:	9b05      	ldr	r3, [sp, #20]
 8016b2e:	3301      	adds	r3, #1
 8016b30:	9305      	str	r3, [sp, #20]
 8016b32:	f04f 0801 	mov.w	r8, #1
 8016b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	f47f af6a 	bne.w	8016a12 <_dtoa_r+0x7ca>
 8016b3e:	2001      	movs	r0, #1
 8016b40:	e76f      	b.n	8016a22 <_dtoa_r+0x7da>
 8016b42:	f04f 0800 	mov.w	r8, #0
 8016b46:	e7f6      	b.n	8016b36 <_dtoa_r+0x8ee>
 8016b48:	4698      	mov	r8, r3
 8016b4a:	e7f4      	b.n	8016b36 <_dtoa_r+0x8ee>
 8016b4c:	f43f af7d 	beq.w	8016a4a <_dtoa_r+0x802>
 8016b50:	4618      	mov	r0, r3
 8016b52:	301c      	adds	r0, #28
 8016b54:	e772      	b.n	8016a3c <_dtoa_r+0x7f4>
 8016b56:	9b03      	ldr	r3, [sp, #12]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dc37      	bgt.n	8016bcc <_dtoa_r+0x984>
 8016b5c:	9b06      	ldr	r3, [sp, #24]
 8016b5e:	2b02      	cmp	r3, #2
 8016b60:	dd34      	ble.n	8016bcc <_dtoa_r+0x984>
 8016b62:	9b03      	ldr	r3, [sp, #12]
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	9b02      	ldr	r3, [sp, #8]
 8016b68:	b96b      	cbnz	r3, 8016b86 <_dtoa_r+0x93e>
 8016b6a:	4631      	mov	r1, r6
 8016b6c:	2205      	movs	r2, #5
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f000 fbea 	bl	8017348 <__multadd>
 8016b74:	4601      	mov	r1, r0
 8016b76:	4606      	mov	r6, r0
 8016b78:	ee18 0a10 	vmov	r0, s16
 8016b7c:	f000 fe04 	bl	8017788 <__mcmp>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	f73f adbb 	bgt.w	80166fc <_dtoa_r+0x4b4>
 8016b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b88:	9d01      	ldr	r5, [sp, #4]
 8016b8a:	43db      	mvns	r3, r3
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	f04f 0800 	mov.w	r8, #0
 8016b92:	4631      	mov	r1, r6
 8016b94:	4620      	mov	r0, r4
 8016b96:	f000 fbb5 	bl	8017304 <_Bfree>
 8016b9a:	2f00      	cmp	r7, #0
 8016b9c:	f43f aea4 	beq.w	80168e8 <_dtoa_r+0x6a0>
 8016ba0:	f1b8 0f00 	cmp.w	r8, #0
 8016ba4:	d005      	beq.n	8016bb2 <_dtoa_r+0x96a>
 8016ba6:	45b8      	cmp	r8, r7
 8016ba8:	d003      	beq.n	8016bb2 <_dtoa_r+0x96a>
 8016baa:	4641      	mov	r1, r8
 8016bac:	4620      	mov	r0, r4
 8016bae:	f000 fba9 	bl	8017304 <_Bfree>
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f000 fba5 	bl	8017304 <_Bfree>
 8016bba:	e695      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016bbc:	2600      	movs	r6, #0
 8016bbe:	4637      	mov	r7, r6
 8016bc0:	e7e1      	b.n	8016b86 <_dtoa_r+0x93e>
 8016bc2:	9700      	str	r7, [sp, #0]
 8016bc4:	4637      	mov	r7, r6
 8016bc6:	e599      	b.n	80166fc <_dtoa_r+0x4b4>
 8016bc8:	40240000 	.word	0x40240000
 8016bcc:	9b08      	ldr	r3, [sp, #32]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 80ca 	beq.w	8016d68 <_dtoa_r+0xb20>
 8016bd4:	9b03      	ldr	r3, [sp, #12]
 8016bd6:	9302      	str	r3, [sp, #8]
 8016bd8:	2d00      	cmp	r5, #0
 8016bda:	dd05      	ble.n	8016be8 <_dtoa_r+0x9a0>
 8016bdc:	4639      	mov	r1, r7
 8016bde:	462a      	mov	r2, r5
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fd61 	bl	80176a8 <__lshift>
 8016be6:	4607      	mov	r7, r0
 8016be8:	f1b8 0f00 	cmp.w	r8, #0
 8016bec:	d05b      	beq.n	8016ca6 <_dtoa_r+0xa5e>
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f000 fb47 	bl	8017284 <_Balloc>
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	b928      	cbnz	r0, 8016c06 <_dtoa_r+0x9be>
 8016bfa:	4b87      	ldr	r3, [pc, #540]	; (8016e18 <_dtoa_r+0xbd0>)
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016c02:	f7ff bb3b 	b.w	801627c <_dtoa_r+0x34>
 8016c06:	693a      	ldr	r2, [r7, #16]
 8016c08:	3202      	adds	r2, #2
 8016c0a:	0092      	lsls	r2, r2, #2
 8016c0c:	f107 010c 	add.w	r1, r7, #12
 8016c10:	300c      	adds	r0, #12
 8016c12:	f7fe fb6f 	bl	80152f4 <memcpy>
 8016c16:	2201      	movs	r2, #1
 8016c18:	4629      	mov	r1, r5
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	f000 fd44 	bl	80176a8 <__lshift>
 8016c20:	9b01      	ldr	r3, [sp, #4]
 8016c22:	f103 0901 	add.w	r9, r3, #1
 8016c26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	9305      	str	r3, [sp, #20]
 8016c2e:	f00a 0301 	and.w	r3, sl, #1
 8016c32:	46b8      	mov	r8, r7
 8016c34:	9304      	str	r3, [sp, #16]
 8016c36:	4607      	mov	r7, r0
 8016c38:	4631      	mov	r1, r6
 8016c3a:	ee18 0a10 	vmov	r0, s16
 8016c3e:	f7ff fa75 	bl	801612c <quorem>
 8016c42:	4641      	mov	r1, r8
 8016c44:	9002      	str	r0, [sp, #8]
 8016c46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016c4a:	ee18 0a10 	vmov	r0, s16
 8016c4e:	f000 fd9b 	bl	8017788 <__mcmp>
 8016c52:	463a      	mov	r2, r7
 8016c54:	9003      	str	r0, [sp, #12]
 8016c56:	4631      	mov	r1, r6
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f000 fdb1 	bl	80177c0 <__mdiff>
 8016c5e:	68c2      	ldr	r2, [r0, #12]
 8016c60:	f109 3bff 	add.w	fp, r9, #4294967295
 8016c64:	4605      	mov	r5, r0
 8016c66:	bb02      	cbnz	r2, 8016caa <_dtoa_r+0xa62>
 8016c68:	4601      	mov	r1, r0
 8016c6a:	ee18 0a10 	vmov	r0, s16
 8016c6e:	f000 fd8b 	bl	8017788 <__mcmp>
 8016c72:	4602      	mov	r2, r0
 8016c74:	4629      	mov	r1, r5
 8016c76:	4620      	mov	r0, r4
 8016c78:	9207      	str	r2, [sp, #28]
 8016c7a:	f000 fb43 	bl	8017304 <_Bfree>
 8016c7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016c82:	ea43 0102 	orr.w	r1, r3, r2
 8016c86:	9b04      	ldr	r3, [sp, #16]
 8016c88:	430b      	orrs	r3, r1
 8016c8a:	464d      	mov	r5, r9
 8016c8c:	d10f      	bne.n	8016cae <_dtoa_r+0xa66>
 8016c8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016c92:	d02a      	beq.n	8016cea <_dtoa_r+0xaa2>
 8016c94:	9b03      	ldr	r3, [sp, #12]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	dd02      	ble.n	8016ca0 <_dtoa_r+0xa58>
 8016c9a:	9b02      	ldr	r3, [sp, #8]
 8016c9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016ca0:	f88b a000 	strb.w	sl, [fp]
 8016ca4:	e775      	b.n	8016b92 <_dtoa_r+0x94a>
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	e7ba      	b.n	8016c20 <_dtoa_r+0x9d8>
 8016caa:	2201      	movs	r2, #1
 8016cac:	e7e2      	b.n	8016c74 <_dtoa_r+0xa2c>
 8016cae:	9b03      	ldr	r3, [sp, #12]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	db04      	blt.n	8016cbe <_dtoa_r+0xa76>
 8016cb4:	9906      	ldr	r1, [sp, #24]
 8016cb6:	430b      	orrs	r3, r1
 8016cb8:	9904      	ldr	r1, [sp, #16]
 8016cba:	430b      	orrs	r3, r1
 8016cbc:	d122      	bne.n	8016d04 <_dtoa_r+0xabc>
 8016cbe:	2a00      	cmp	r2, #0
 8016cc0:	ddee      	ble.n	8016ca0 <_dtoa_r+0xa58>
 8016cc2:	ee18 1a10 	vmov	r1, s16
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 fced 	bl	80176a8 <__lshift>
 8016cce:	4631      	mov	r1, r6
 8016cd0:	ee08 0a10 	vmov	s16, r0
 8016cd4:	f000 fd58 	bl	8017788 <__mcmp>
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	dc03      	bgt.n	8016ce4 <_dtoa_r+0xa9c>
 8016cdc:	d1e0      	bne.n	8016ca0 <_dtoa_r+0xa58>
 8016cde:	f01a 0f01 	tst.w	sl, #1
 8016ce2:	d0dd      	beq.n	8016ca0 <_dtoa_r+0xa58>
 8016ce4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016ce8:	d1d7      	bne.n	8016c9a <_dtoa_r+0xa52>
 8016cea:	2339      	movs	r3, #57	; 0x39
 8016cec:	f88b 3000 	strb.w	r3, [fp]
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	461d      	mov	r5, r3
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016cfa:	2a39      	cmp	r2, #57	; 0x39
 8016cfc:	d071      	beq.n	8016de2 <_dtoa_r+0xb9a>
 8016cfe:	3201      	adds	r2, #1
 8016d00:	701a      	strb	r2, [r3, #0]
 8016d02:	e746      	b.n	8016b92 <_dtoa_r+0x94a>
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	dd07      	ble.n	8016d18 <_dtoa_r+0xad0>
 8016d08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016d0c:	d0ed      	beq.n	8016cea <_dtoa_r+0xaa2>
 8016d0e:	f10a 0301 	add.w	r3, sl, #1
 8016d12:	f88b 3000 	strb.w	r3, [fp]
 8016d16:	e73c      	b.n	8016b92 <_dtoa_r+0x94a>
 8016d18:	9b05      	ldr	r3, [sp, #20]
 8016d1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016d1e:	4599      	cmp	r9, r3
 8016d20:	d047      	beq.n	8016db2 <_dtoa_r+0xb6a>
 8016d22:	ee18 1a10 	vmov	r1, s16
 8016d26:	2300      	movs	r3, #0
 8016d28:	220a      	movs	r2, #10
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f000 fb0c 	bl	8017348 <__multadd>
 8016d30:	45b8      	cmp	r8, r7
 8016d32:	ee08 0a10 	vmov	s16, r0
 8016d36:	f04f 0300 	mov.w	r3, #0
 8016d3a:	f04f 020a 	mov.w	r2, #10
 8016d3e:	4641      	mov	r1, r8
 8016d40:	4620      	mov	r0, r4
 8016d42:	d106      	bne.n	8016d52 <_dtoa_r+0xb0a>
 8016d44:	f000 fb00 	bl	8017348 <__multadd>
 8016d48:	4680      	mov	r8, r0
 8016d4a:	4607      	mov	r7, r0
 8016d4c:	f109 0901 	add.w	r9, r9, #1
 8016d50:	e772      	b.n	8016c38 <_dtoa_r+0x9f0>
 8016d52:	f000 faf9 	bl	8017348 <__multadd>
 8016d56:	4639      	mov	r1, r7
 8016d58:	4680      	mov	r8, r0
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	220a      	movs	r2, #10
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f000 faf2 	bl	8017348 <__multadd>
 8016d64:	4607      	mov	r7, r0
 8016d66:	e7f1      	b.n	8016d4c <_dtoa_r+0xb04>
 8016d68:	9b03      	ldr	r3, [sp, #12]
 8016d6a:	9302      	str	r3, [sp, #8]
 8016d6c:	9d01      	ldr	r5, [sp, #4]
 8016d6e:	ee18 0a10 	vmov	r0, s16
 8016d72:	4631      	mov	r1, r6
 8016d74:	f7ff f9da 	bl	801612c <quorem>
 8016d78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016d7c:	9b01      	ldr	r3, [sp, #4]
 8016d7e:	f805 ab01 	strb.w	sl, [r5], #1
 8016d82:	1aea      	subs	r2, r5, r3
 8016d84:	9b02      	ldr	r3, [sp, #8]
 8016d86:	4293      	cmp	r3, r2
 8016d88:	dd09      	ble.n	8016d9e <_dtoa_r+0xb56>
 8016d8a:	ee18 1a10 	vmov	r1, s16
 8016d8e:	2300      	movs	r3, #0
 8016d90:	220a      	movs	r2, #10
 8016d92:	4620      	mov	r0, r4
 8016d94:	f000 fad8 	bl	8017348 <__multadd>
 8016d98:	ee08 0a10 	vmov	s16, r0
 8016d9c:	e7e7      	b.n	8016d6e <_dtoa_r+0xb26>
 8016d9e:	9b02      	ldr	r3, [sp, #8]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	bfc8      	it	gt
 8016da4:	461d      	movgt	r5, r3
 8016da6:	9b01      	ldr	r3, [sp, #4]
 8016da8:	bfd8      	it	le
 8016daa:	2501      	movle	r5, #1
 8016dac:	441d      	add	r5, r3
 8016dae:	f04f 0800 	mov.w	r8, #0
 8016db2:	ee18 1a10 	vmov	r1, s16
 8016db6:	2201      	movs	r2, #1
 8016db8:	4620      	mov	r0, r4
 8016dba:	f000 fc75 	bl	80176a8 <__lshift>
 8016dbe:	4631      	mov	r1, r6
 8016dc0:	ee08 0a10 	vmov	s16, r0
 8016dc4:	f000 fce0 	bl	8017788 <__mcmp>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	dc91      	bgt.n	8016cf0 <_dtoa_r+0xaa8>
 8016dcc:	d102      	bne.n	8016dd4 <_dtoa_r+0xb8c>
 8016dce:	f01a 0f01 	tst.w	sl, #1
 8016dd2:	d18d      	bne.n	8016cf0 <_dtoa_r+0xaa8>
 8016dd4:	462b      	mov	r3, r5
 8016dd6:	461d      	mov	r5, r3
 8016dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ddc:	2a30      	cmp	r2, #48	; 0x30
 8016dde:	d0fa      	beq.n	8016dd6 <_dtoa_r+0xb8e>
 8016de0:	e6d7      	b.n	8016b92 <_dtoa_r+0x94a>
 8016de2:	9a01      	ldr	r2, [sp, #4]
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d184      	bne.n	8016cf2 <_dtoa_r+0xaaa>
 8016de8:	9b00      	ldr	r3, [sp, #0]
 8016dea:	3301      	adds	r3, #1
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	2331      	movs	r3, #49	; 0x31
 8016df0:	7013      	strb	r3, [r2, #0]
 8016df2:	e6ce      	b.n	8016b92 <_dtoa_r+0x94a>
 8016df4:	4b09      	ldr	r3, [pc, #36]	; (8016e1c <_dtoa_r+0xbd4>)
 8016df6:	f7ff ba95 	b.w	8016324 <_dtoa_r+0xdc>
 8016dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	f47f aa6e 	bne.w	80162de <_dtoa_r+0x96>
 8016e02:	4b07      	ldr	r3, [pc, #28]	; (8016e20 <_dtoa_r+0xbd8>)
 8016e04:	f7ff ba8e 	b.w	8016324 <_dtoa_r+0xdc>
 8016e08:	9b02      	ldr	r3, [sp, #8]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	dcae      	bgt.n	8016d6c <_dtoa_r+0xb24>
 8016e0e:	9b06      	ldr	r3, [sp, #24]
 8016e10:	2b02      	cmp	r3, #2
 8016e12:	f73f aea8 	bgt.w	8016b66 <_dtoa_r+0x91e>
 8016e16:	e7a9      	b.n	8016d6c <_dtoa_r+0xb24>
 8016e18:	08018643 	.word	0x08018643
 8016e1c:	080185a0 	.word	0x080185a0
 8016e20:	080185c4 	.word	0x080185c4

08016e24 <__sflush_r>:
 8016e24:	898a      	ldrh	r2, [r1, #12]
 8016e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	0710      	lsls	r0, r2, #28
 8016e2e:	460c      	mov	r4, r1
 8016e30:	d458      	bmi.n	8016ee4 <__sflush_r+0xc0>
 8016e32:	684b      	ldr	r3, [r1, #4]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	dc05      	bgt.n	8016e44 <__sflush_r+0x20>
 8016e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	dc02      	bgt.n	8016e44 <__sflush_r+0x20>
 8016e3e:	2000      	movs	r0, #0
 8016e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e46:	2e00      	cmp	r6, #0
 8016e48:	d0f9      	beq.n	8016e3e <__sflush_r+0x1a>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e50:	682f      	ldr	r7, [r5, #0]
 8016e52:	602b      	str	r3, [r5, #0]
 8016e54:	d032      	beq.n	8016ebc <__sflush_r+0x98>
 8016e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e58:	89a3      	ldrh	r3, [r4, #12]
 8016e5a:	075a      	lsls	r2, r3, #29
 8016e5c:	d505      	bpl.n	8016e6a <__sflush_r+0x46>
 8016e5e:	6863      	ldr	r3, [r4, #4]
 8016e60:	1ac0      	subs	r0, r0, r3
 8016e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e64:	b10b      	cbz	r3, 8016e6a <__sflush_r+0x46>
 8016e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e68:	1ac0      	subs	r0, r0, r3
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	4602      	mov	r2, r0
 8016e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e70:	6a21      	ldr	r1, [r4, #32]
 8016e72:	4628      	mov	r0, r5
 8016e74:	47b0      	blx	r6
 8016e76:	1c43      	adds	r3, r0, #1
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	d106      	bne.n	8016e8a <__sflush_r+0x66>
 8016e7c:	6829      	ldr	r1, [r5, #0]
 8016e7e:	291d      	cmp	r1, #29
 8016e80:	d82c      	bhi.n	8016edc <__sflush_r+0xb8>
 8016e82:	4a2a      	ldr	r2, [pc, #168]	; (8016f2c <__sflush_r+0x108>)
 8016e84:	40ca      	lsrs	r2, r1
 8016e86:	07d6      	lsls	r6, r2, #31
 8016e88:	d528      	bpl.n	8016edc <__sflush_r+0xb8>
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	6062      	str	r2, [r4, #4]
 8016e8e:	04d9      	lsls	r1, r3, #19
 8016e90:	6922      	ldr	r2, [r4, #16]
 8016e92:	6022      	str	r2, [r4, #0]
 8016e94:	d504      	bpl.n	8016ea0 <__sflush_r+0x7c>
 8016e96:	1c42      	adds	r2, r0, #1
 8016e98:	d101      	bne.n	8016e9e <__sflush_r+0x7a>
 8016e9a:	682b      	ldr	r3, [r5, #0]
 8016e9c:	b903      	cbnz	r3, 8016ea0 <__sflush_r+0x7c>
 8016e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8016ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ea2:	602f      	str	r7, [r5, #0]
 8016ea4:	2900      	cmp	r1, #0
 8016ea6:	d0ca      	beq.n	8016e3e <__sflush_r+0x1a>
 8016ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eac:	4299      	cmp	r1, r3
 8016eae:	d002      	beq.n	8016eb6 <__sflush_r+0x92>
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	f7fe fa4f 	bl	8015354 <_free_r>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eba:	e7c1      	b.n	8016e40 <__sflush_r+0x1c>
 8016ebc:	6a21      	ldr	r1, [r4, #32]
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	47b0      	blx	r6
 8016ec4:	1c41      	adds	r1, r0, #1
 8016ec6:	d1c7      	bne.n	8016e58 <__sflush_r+0x34>
 8016ec8:	682b      	ldr	r3, [r5, #0]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d0c4      	beq.n	8016e58 <__sflush_r+0x34>
 8016ece:	2b1d      	cmp	r3, #29
 8016ed0:	d001      	beq.n	8016ed6 <__sflush_r+0xb2>
 8016ed2:	2b16      	cmp	r3, #22
 8016ed4:	d101      	bne.n	8016eda <__sflush_r+0xb6>
 8016ed6:	602f      	str	r7, [r5, #0]
 8016ed8:	e7b1      	b.n	8016e3e <__sflush_r+0x1a>
 8016eda:	89a3      	ldrh	r3, [r4, #12]
 8016edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ee0:	81a3      	strh	r3, [r4, #12]
 8016ee2:	e7ad      	b.n	8016e40 <__sflush_r+0x1c>
 8016ee4:	690f      	ldr	r7, [r1, #16]
 8016ee6:	2f00      	cmp	r7, #0
 8016ee8:	d0a9      	beq.n	8016e3e <__sflush_r+0x1a>
 8016eea:	0793      	lsls	r3, r2, #30
 8016eec:	680e      	ldr	r6, [r1, #0]
 8016eee:	bf08      	it	eq
 8016ef0:	694b      	ldreq	r3, [r1, #20]
 8016ef2:	600f      	str	r7, [r1, #0]
 8016ef4:	bf18      	it	ne
 8016ef6:	2300      	movne	r3, #0
 8016ef8:	eba6 0807 	sub.w	r8, r6, r7
 8016efc:	608b      	str	r3, [r1, #8]
 8016efe:	f1b8 0f00 	cmp.w	r8, #0
 8016f02:	dd9c      	ble.n	8016e3e <__sflush_r+0x1a>
 8016f04:	6a21      	ldr	r1, [r4, #32]
 8016f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f08:	4643      	mov	r3, r8
 8016f0a:	463a      	mov	r2, r7
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	47b0      	blx	r6
 8016f10:	2800      	cmp	r0, #0
 8016f12:	dc06      	bgt.n	8016f22 <__sflush_r+0xfe>
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f1a:	81a3      	strh	r3, [r4, #12]
 8016f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f20:	e78e      	b.n	8016e40 <__sflush_r+0x1c>
 8016f22:	4407      	add	r7, r0
 8016f24:	eba8 0800 	sub.w	r8, r8, r0
 8016f28:	e7e9      	b.n	8016efe <__sflush_r+0xda>
 8016f2a:	bf00      	nop
 8016f2c:	20400001 	.word	0x20400001

08016f30 <_fflush_r>:
 8016f30:	b538      	push	{r3, r4, r5, lr}
 8016f32:	690b      	ldr	r3, [r1, #16]
 8016f34:	4605      	mov	r5, r0
 8016f36:	460c      	mov	r4, r1
 8016f38:	b913      	cbnz	r3, 8016f40 <_fflush_r+0x10>
 8016f3a:	2500      	movs	r5, #0
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	bd38      	pop	{r3, r4, r5, pc}
 8016f40:	b118      	cbz	r0, 8016f4a <_fflush_r+0x1a>
 8016f42:	6983      	ldr	r3, [r0, #24]
 8016f44:	b90b      	cbnz	r3, 8016f4a <_fflush_r+0x1a>
 8016f46:	f000 f887 	bl	8017058 <__sinit>
 8016f4a:	4b14      	ldr	r3, [pc, #80]	; (8016f9c <_fflush_r+0x6c>)
 8016f4c:	429c      	cmp	r4, r3
 8016f4e:	d11b      	bne.n	8016f88 <_fflush_r+0x58>
 8016f50:	686c      	ldr	r4, [r5, #4]
 8016f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d0ef      	beq.n	8016f3a <_fflush_r+0xa>
 8016f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f5c:	07d0      	lsls	r0, r2, #31
 8016f5e:	d404      	bmi.n	8016f6a <_fflush_r+0x3a>
 8016f60:	0599      	lsls	r1, r3, #22
 8016f62:	d402      	bmi.n	8016f6a <_fflush_r+0x3a>
 8016f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f66:	f000 f91a 	bl	801719e <__retarget_lock_acquire_recursive>
 8016f6a:	4628      	mov	r0, r5
 8016f6c:	4621      	mov	r1, r4
 8016f6e:	f7ff ff59 	bl	8016e24 <__sflush_r>
 8016f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f74:	07da      	lsls	r2, r3, #31
 8016f76:	4605      	mov	r5, r0
 8016f78:	d4e0      	bmi.n	8016f3c <_fflush_r+0xc>
 8016f7a:	89a3      	ldrh	r3, [r4, #12]
 8016f7c:	059b      	lsls	r3, r3, #22
 8016f7e:	d4dd      	bmi.n	8016f3c <_fflush_r+0xc>
 8016f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f82:	f000 f90d 	bl	80171a0 <__retarget_lock_release_recursive>
 8016f86:	e7d9      	b.n	8016f3c <_fflush_r+0xc>
 8016f88:	4b05      	ldr	r3, [pc, #20]	; (8016fa0 <_fflush_r+0x70>)
 8016f8a:	429c      	cmp	r4, r3
 8016f8c:	d101      	bne.n	8016f92 <_fflush_r+0x62>
 8016f8e:	68ac      	ldr	r4, [r5, #8]
 8016f90:	e7df      	b.n	8016f52 <_fflush_r+0x22>
 8016f92:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <_fflush_r+0x74>)
 8016f94:	429c      	cmp	r4, r3
 8016f96:	bf08      	it	eq
 8016f98:	68ec      	ldreq	r4, [r5, #12]
 8016f9a:	e7da      	b.n	8016f52 <_fflush_r+0x22>
 8016f9c:	08018674 	.word	0x08018674
 8016fa0:	08018694 	.word	0x08018694
 8016fa4:	08018654 	.word	0x08018654

08016fa8 <std>:
 8016fa8:	2300      	movs	r3, #0
 8016faa:	b510      	push	{r4, lr}
 8016fac:	4604      	mov	r4, r0
 8016fae:	e9c0 3300 	strd	r3, r3, [r0]
 8016fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fb6:	6083      	str	r3, [r0, #8]
 8016fb8:	8181      	strh	r1, [r0, #12]
 8016fba:	6643      	str	r3, [r0, #100]	; 0x64
 8016fbc:	81c2      	strh	r2, [r0, #14]
 8016fbe:	6183      	str	r3, [r0, #24]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	2208      	movs	r2, #8
 8016fc4:	305c      	adds	r0, #92	; 0x5c
 8016fc6:	f7fe f9bd 	bl	8015344 <memset>
 8016fca:	4b05      	ldr	r3, [pc, #20]	; (8016fe0 <std+0x38>)
 8016fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8016fce:	4b05      	ldr	r3, [pc, #20]	; (8016fe4 <std+0x3c>)
 8016fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8016fd2:	4b05      	ldr	r3, [pc, #20]	; (8016fe8 <std+0x40>)
 8016fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016fd6:	4b05      	ldr	r3, [pc, #20]	; (8016fec <std+0x44>)
 8016fd8:	6224      	str	r4, [r4, #32]
 8016fda:	6323      	str	r3, [r4, #48]	; 0x30
 8016fdc:	bd10      	pop	{r4, pc}
 8016fde:	bf00      	nop
 8016fe0:	08017c6d 	.word	0x08017c6d
 8016fe4:	08017c8f 	.word	0x08017c8f
 8016fe8:	08017cc7 	.word	0x08017cc7
 8016fec:	08017ceb 	.word	0x08017ceb

08016ff0 <_cleanup_r>:
 8016ff0:	4901      	ldr	r1, [pc, #4]	; (8016ff8 <_cleanup_r+0x8>)
 8016ff2:	f000 b8af 	b.w	8017154 <_fwalk_reent>
 8016ff6:	bf00      	nop
 8016ff8:	08016f31 	.word	0x08016f31

08016ffc <__sfmoreglue>:
 8016ffc:	b570      	push	{r4, r5, r6, lr}
 8016ffe:	2268      	movs	r2, #104	; 0x68
 8017000:	1e4d      	subs	r5, r1, #1
 8017002:	4355      	muls	r5, r2
 8017004:	460e      	mov	r6, r1
 8017006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801700a:	f7fe fa0f 	bl	801542c <_malloc_r>
 801700e:	4604      	mov	r4, r0
 8017010:	b140      	cbz	r0, 8017024 <__sfmoreglue+0x28>
 8017012:	2100      	movs	r1, #0
 8017014:	e9c0 1600 	strd	r1, r6, [r0]
 8017018:	300c      	adds	r0, #12
 801701a:	60a0      	str	r0, [r4, #8]
 801701c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017020:	f7fe f990 	bl	8015344 <memset>
 8017024:	4620      	mov	r0, r4
 8017026:	bd70      	pop	{r4, r5, r6, pc}

08017028 <__sfp_lock_acquire>:
 8017028:	4801      	ldr	r0, [pc, #4]	; (8017030 <__sfp_lock_acquire+0x8>)
 801702a:	f000 b8b8 	b.w	801719e <__retarget_lock_acquire_recursive>
 801702e:	bf00      	nop
 8017030:	200024e1 	.word	0x200024e1

08017034 <__sfp_lock_release>:
 8017034:	4801      	ldr	r0, [pc, #4]	; (801703c <__sfp_lock_release+0x8>)
 8017036:	f000 b8b3 	b.w	80171a0 <__retarget_lock_release_recursive>
 801703a:	bf00      	nop
 801703c:	200024e1 	.word	0x200024e1

08017040 <__sinit_lock_acquire>:
 8017040:	4801      	ldr	r0, [pc, #4]	; (8017048 <__sinit_lock_acquire+0x8>)
 8017042:	f000 b8ac 	b.w	801719e <__retarget_lock_acquire_recursive>
 8017046:	bf00      	nop
 8017048:	200024e2 	.word	0x200024e2

0801704c <__sinit_lock_release>:
 801704c:	4801      	ldr	r0, [pc, #4]	; (8017054 <__sinit_lock_release+0x8>)
 801704e:	f000 b8a7 	b.w	80171a0 <__retarget_lock_release_recursive>
 8017052:	bf00      	nop
 8017054:	200024e2 	.word	0x200024e2

08017058 <__sinit>:
 8017058:	b510      	push	{r4, lr}
 801705a:	4604      	mov	r4, r0
 801705c:	f7ff fff0 	bl	8017040 <__sinit_lock_acquire>
 8017060:	69a3      	ldr	r3, [r4, #24]
 8017062:	b11b      	cbz	r3, 801706c <__sinit+0x14>
 8017064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017068:	f7ff bff0 	b.w	801704c <__sinit_lock_release>
 801706c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017070:	6523      	str	r3, [r4, #80]	; 0x50
 8017072:	4b13      	ldr	r3, [pc, #76]	; (80170c0 <__sinit+0x68>)
 8017074:	4a13      	ldr	r2, [pc, #76]	; (80170c4 <__sinit+0x6c>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	62a2      	str	r2, [r4, #40]	; 0x28
 801707a:	42a3      	cmp	r3, r4
 801707c:	bf04      	itt	eq
 801707e:	2301      	moveq	r3, #1
 8017080:	61a3      	streq	r3, [r4, #24]
 8017082:	4620      	mov	r0, r4
 8017084:	f000 f820 	bl	80170c8 <__sfp>
 8017088:	6060      	str	r0, [r4, #4]
 801708a:	4620      	mov	r0, r4
 801708c:	f000 f81c 	bl	80170c8 <__sfp>
 8017090:	60a0      	str	r0, [r4, #8]
 8017092:	4620      	mov	r0, r4
 8017094:	f000 f818 	bl	80170c8 <__sfp>
 8017098:	2200      	movs	r2, #0
 801709a:	60e0      	str	r0, [r4, #12]
 801709c:	2104      	movs	r1, #4
 801709e:	6860      	ldr	r0, [r4, #4]
 80170a0:	f7ff ff82 	bl	8016fa8 <std>
 80170a4:	68a0      	ldr	r0, [r4, #8]
 80170a6:	2201      	movs	r2, #1
 80170a8:	2109      	movs	r1, #9
 80170aa:	f7ff ff7d 	bl	8016fa8 <std>
 80170ae:	68e0      	ldr	r0, [r4, #12]
 80170b0:	2202      	movs	r2, #2
 80170b2:	2112      	movs	r1, #18
 80170b4:	f7ff ff78 	bl	8016fa8 <std>
 80170b8:	2301      	movs	r3, #1
 80170ba:	61a3      	str	r3, [r4, #24]
 80170bc:	e7d2      	b.n	8017064 <__sinit+0xc>
 80170be:	bf00      	nop
 80170c0:	0801858c 	.word	0x0801858c
 80170c4:	08016ff1 	.word	0x08016ff1

080170c8 <__sfp>:
 80170c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ca:	4607      	mov	r7, r0
 80170cc:	f7ff ffac 	bl	8017028 <__sfp_lock_acquire>
 80170d0:	4b1e      	ldr	r3, [pc, #120]	; (801714c <__sfp+0x84>)
 80170d2:	681e      	ldr	r6, [r3, #0]
 80170d4:	69b3      	ldr	r3, [r6, #24]
 80170d6:	b913      	cbnz	r3, 80170de <__sfp+0x16>
 80170d8:	4630      	mov	r0, r6
 80170da:	f7ff ffbd 	bl	8017058 <__sinit>
 80170de:	3648      	adds	r6, #72	; 0x48
 80170e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	d503      	bpl.n	80170f0 <__sfp+0x28>
 80170e8:	6833      	ldr	r3, [r6, #0]
 80170ea:	b30b      	cbz	r3, 8017130 <__sfp+0x68>
 80170ec:	6836      	ldr	r6, [r6, #0]
 80170ee:	e7f7      	b.n	80170e0 <__sfp+0x18>
 80170f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170f4:	b9d5      	cbnz	r5, 801712c <__sfp+0x64>
 80170f6:	4b16      	ldr	r3, [pc, #88]	; (8017150 <__sfp+0x88>)
 80170f8:	60e3      	str	r3, [r4, #12]
 80170fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170fe:	6665      	str	r5, [r4, #100]	; 0x64
 8017100:	f000 f84c 	bl	801719c <__retarget_lock_init_recursive>
 8017104:	f7ff ff96 	bl	8017034 <__sfp_lock_release>
 8017108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801710c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017110:	6025      	str	r5, [r4, #0]
 8017112:	61a5      	str	r5, [r4, #24]
 8017114:	2208      	movs	r2, #8
 8017116:	4629      	mov	r1, r5
 8017118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801711c:	f7fe f912 	bl	8015344 <memset>
 8017120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017128:	4620      	mov	r0, r4
 801712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801712c:	3468      	adds	r4, #104	; 0x68
 801712e:	e7d9      	b.n	80170e4 <__sfp+0x1c>
 8017130:	2104      	movs	r1, #4
 8017132:	4638      	mov	r0, r7
 8017134:	f7ff ff62 	bl	8016ffc <__sfmoreglue>
 8017138:	4604      	mov	r4, r0
 801713a:	6030      	str	r0, [r6, #0]
 801713c:	2800      	cmp	r0, #0
 801713e:	d1d5      	bne.n	80170ec <__sfp+0x24>
 8017140:	f7ff ff78 	bl	8017034 <__sfp_lock_release>
 8017144:	230c      	movs	r3, #12
 8017146:	603b      	str	r3, [r7, #0]
 8017148:	e7ee      	b.n	8017128 <__sfp+0x60>
 801714a:	bf00      	nop
 801714c:	0801858c 	.word	0x0801858c
 8017150:	ffff0001 	.word	0xffff0001

08017154 <_fwalk_reent>:
 8017154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017158:	4606      	mov	r6, r0
 801715a:	4688      	mov	r8, r1
 801715c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017160:	2700      	movs	r7, #0
 8017162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017166:	f1b9 0901 	subs.w	r9, r9, #1
 801716a:	d505      	bpl.n	8017178 <_fwalk_reent+0x24>
 801716c:	6824      	ldr	r4, [r4, #0]
 801716e:	2c00      	cmp	r4, #0
 8017170:	d1f7      	bne.n	8017162 <_fwalk_reent+0xe>
 8017172:	4638      	mov	r0, r7
 8017174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017178:	89ab      	ldrh	r3, [r5, #12]
 801717a:	2b01      	cmp	r3, #1
 801717c:	d907      	bls.n	801718e <_fwalk_reent+0x3a>
 801717e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017182:	3301      	adds	r3, #1
 8017184:	d003      	beq.n	801718e <_fwalk_reent+0x3a>
 8017186:	4629      	mov	r1, r5
 8017188:	4630      	mov	r0, r6
 801718a:	47c0      	blx	r8
 801718c:	4307      	orrs	r7, r0
 801718e:	3568      	adds	r5, #104	; 0x68
 8017190:	e7e9      	b.n	8017166 <_fwalk_reent+0x12>
	...

08017194 <_localeconv_r>:
 8017194:	4800      	ldr	r0, [pc, #0]	; (8017198 <_localeconv_r+0x4>)
 8017196:	4770      	bx	lr
 8017198:	200002d8 	.word	0x200002d8

0801719c <__retarget_lock_init_recursive>:
 801719c:	4770      	bx	lr

0801719e <__retarget_lock_acquire_recursive>:
 801719e:	4770      	bx	lr

080171a0 <__retarget_lock_release_recursive>:
 80171a0:	4770      	bx	lr

080171a2 <__swhatbuf_r>:
 80171a2:	b570      	push	{r4, r5, r6, lr}
 80171a4:	460e      	mov	r6, r1
 80171a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171aa:	2900      	cmp	r1, #0
 80171ac:	b096      	sub	sp, #88	; 0x58
 80171ae:	4614      	mov	r4, r2
 80171b0:	461d      	mov	r5, r3
 80171b2:	da08      	bge.n	80171c6 <__swhatbuf_r+0x24>
 80171b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171b8:	2200      	movs	r2, #0
 80171ba:	602a      	str	r2, [r5, #0]
 80171bc:	061a      	lsls	r2, r3, #24
 80171be:	d410      	bmi.n	80171e2 <__swhatbuf_r+0x40>
 80171c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171c4:	e00e      	b.n	80171e4 <__swhatbuf_r+0x42>
 80171c6:	466a      	mov	r2, sp
 80171c8:	f000 fde6 	bl	8017d98 <_fstat_r>
 80171cc:	2800      	cmp	r0, #0
 80171ce:	dbf1      	blt.n	80171b4 <__swhatbuf_r+0x12>
 80171d0:	9a01      	ldr	r2, [sp, #4]
 80171d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80171d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80171da:	425a      	negs	r2, r3
 80171dc:	415a      	adcs	r2, r3
 80171de:	602a      	str	r2, [r5, #0]
 80171e0:	e7ee      	b.n	80171c0 <__swhatbuf_r+0x1e>
 80171e2:	2340      	movs	r3, #64	; 0x40
 80171e4:	2000      	movs	r0, #0
 80171e6:	6023      	str	r3, [r4, #0]
 80171e8:	b016      	add	sp, #88	; 0x58
 80171ea:	bd70      	pop	{r4, r5, r6, pc}

080171ec <__smakebuf_r>:
 80171ec:	898b      	ldrh	r3, [r1, #12]
 80171ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171f0:	079d      	lsls	r5, r3, #30
 80171f2:	4606      	mov	r6, r0
 80171f4:	460c      	mov	r4, r1
 80171f6:	d507      	bpl.n	8017208 <__smakebuf_r+0x1c>
 80171f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	6123      	str	r3, [r4, #16]
 8017200:	2301      	movs	r3, #1
 8017202:	6163      	str	r3, [r4, #20]
 8017204:	b002      	add	sp, #8
 8017206:	bd70      	pop	{r4, r5, r6, pc}
 8017208:	ab01      	add	r3, sp, #4
 801720a:	466a      	mov	r2, sp
 801720c:	f7ff ffc9 	bl	80171a2 <__swhatbuf_r>
 8017210:	9900      	ldr	r1, [sp, #0]
 8017212:	4605      	mov	r5, r0
 8017214:	4630      	mov	r0, r6
 8017216:	f7fe f909 	bl	801542c <_malloc_r>
 801721a:	b948      	cbnz	r0, 8017230 <__smakebuf_r+0x44>
 801721c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017220:	059a      	lsls	r2, r3, #22
 8017222:	d4ef      	bmi.n	8017204 <__smakebuf_r+0x18>
 8017224:	f023 0303 	bic.w	r3, r3, #3
 8017228:	f043 0302 	orr.w	r3, r3, #2
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	e7e3      	b.n	80171f8 <__smakebuf_r+0xc>
 8017230:	4b0d      	ldr	r3, [pc, #52]	; (8017268 <__smakebuf_r+0x7c>)
 8017232:	62b3      	str	r3, [r6, #40]	; 0x28
 8017234:	89a3      	ldrh	r3, [r4, #12]
 8017236:	6020      	str	r0, [r4, #0]
 8017238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801723c:	81a3      	strh	r3, [r4, #12]
 801723e:	9b00      	ldr	r3, [sp, #0]
 8017240:	6163      	str	r3, [r4, #20]
 8017242:	9b01      	ldr	r3, [sp, #4]
 8017244:	6120      	str	r0, [r4, #16]
 8017246:	b15b      	cbz	r3, 8017260 <__smakebuf_r+0x74>
 8017248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801724c:	4630      	mov	r0, r6
 801724e:	f000 fdb5 	bl	8017dbc <_isatty_r>
 8017252:	b128      	cbz	r0, 8017260 <__smakebuf_r+0x74>
 8017254:	89a3      	ldrh	r3, [r4, #12]
 8017256:	f023 0303 	bic.w	r3, r3, #3
 801725a:	f043 0301 	orr.w	r3, r3, #1
 801725e:	81a3      	strh	r3, [r4, #12]
 8017260:	89a0      	ldrh	r0, [r4, #12]
 8017262:	4305      	orrs	r5, r0
 8017264:	81a5      	strh	r5, [r4, #12]
 8017266:	e7cd      	b.n	8017204 <__smakebuf_r+0x18>
 8017268:	08016ff1 	.word	0x08016ff1

0801726c <__malloc_lock>:
 801726c:	4801      	ldr	r0, [pc, #4]	; (8017274 <__malloc_lock+0x8>)
 801726e:	f7ff bf96 	b.w	801719e <__retarget_lock_acquire_recursive>
 8017272:	bf00      	nop
 8017274:	200024e0 	.word	0x200024e0

08017278 <__malloc_unlock>:
 8017278:	4801      	ldr	r0, [pc, #4]	; (8017280 <__malloc_unlock+0x8>)
 801727a:	f7ff bf91 	b.w	80171a0 <__retarget_lock_release_recursive>
 801727e:	bf00      	nop
 8017280:	200024e0 	.word	0x200024e0

08017284 <_Balloc>:
 8017284:	b570      	push	{r4, r5, r6, lr}
 8017286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017288:	4604      	mov	r4, r0
 801728a:	460d      	mov	r5, r1
 801728c:	b976      	cbnz	r6, 80172ac <_Balloc+0x28>
 801728e:	2010      	movs	r0, #16
 8017290:	f7fe f820 	bl	80152d4 <malloc>
 8017294:	4602      	mov	r2, r0
 8017296:	6260      	str	r0, [r4, #36]	; 0x24
 8017298:	b920      	cbnz	r0, 80172a4 <_Balloc+0x20>
 801729a:	4b18      	ldr	r3, [pc, #96]	; (80172fc <_Balloc+0x78>)
 801729c:	4818      	ldr	r0, [pc, #96]	; (8017300 <_Balloc+0x7c>)
 801729e:	2166      	movs	r1, #102	; 0x66
 80172a0:	f000 fd3a 	bl	8017d18 <__assert_func>
 80172a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172a8:	6006      	str	r6, [r0, #0]
 80172aa:	60c6      	str	r6, [r0, #12]
 80172ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80172ae:	68f3      	ldr	r3, [r6, #12]
 80172b0:	b183      	cbz	r3, 80172d4 <_Balloc+0x50>
 80172b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172ba:	b9b8      	cbnz	r0, 80172ec <_Balloc+0x68>
 80172bc:	2101      	movs	r1, #1
 80172be:	fa01 f605 	lsl.w	r6, r1, r5
 80172c2:	1d72      	adds	r2, r6, #5
 80172c4:	0092      	lsls	r2, r2, #2
 80172c6:	4620      	mov	r0, r4
 80172c8:	f000 fb60 	bl	801798c <_calloc_r>
 80172cc:	b160      	cbz	r0, 80172e8 <_Balloc+0x64>
 80172ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80172d2:	e00e      	b.n	80172f2 <_Balloc+0x6e>
 80172d4:	2221      	movs	r2, #33	; 0x21
 80172d6:	2104      	movs	r1, #4
 80172d8:	4620      	mov	r0, r4
 80172da:	f000 fb57 	bl	801798c <_calloc_r>
 80172de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172e0:	60f0      	str	r0, [r6, #12]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d1e4      	bne.n	80172b2 <_Balloc+0x2e>
 80172e8:	2000      	movs	r0, #0
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	6802      	ldr	r2, [r0, #0]
 80172ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172f2:	2300      	movs	r3, #0
 80172f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172f8:	e7f7      	b.n	80172ea <_Balloc+0x66>
 80172fa:	bf00      	nop
 80172fc:	080185d1 	.word	0x080185d1
 8017300:	080186b4 	.word	0x080186b4

08017304 <_Bfree>:
 8017304:	b570      	push	{r4, r5, r6, lr}
 8017306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017308:	4605      	mov	r5, r0
 801730a:	460c      	mov	r4, r1
 801730c:	b976      	cbnz	r6, 801732c <_Bfree+0x28>
 801730e:	2010      	movs	r0, #16
 8017310:	f7fd ffe0 	bl	80152d4 <malloc>
 8017314:	4602      	mov	r2, r0
 8017316:	6268      	str	r0, [r5, #36]	; 0x24
 8017318:	b920      	cbnz	r0, 8017324 <_Bfree+0x20>
 801731a:	4b09      	ldr	r3, [pc, #36]	; (8017340 <_Bfree+0x3c>)
 801731c:	4809      	ldr	r0, [pc, #36]	; (8017344 <_Bfree+0x40>)
 801731e:	218a      	movs	r1, #138	; 0x8a
 8017320:	f000 fcfa 	bl	8017d18 <__assert_func>
 8017324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017328:	6006      	str	r6, [r0, #0]
 801732a:	60c6      	str	r6, [r0, #12]
 801732c:	b13c      	cbz	r4, 801733e <_Bfree+0x3a>
 801732e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017330:	6862      	ldr	r2, [r4, #4]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017338:	6021      	str	r1, [r4, #0]
 801733a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	080185d1 	.word	0x080185d1
 8017344:	080186b4 	.word	0x080186b4

08017348 <__multadd>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	690d      	ldr	r5, [r1, #16]
 801734e:	4607      	mov	r7, r0
 8017350:	460c      	mov	r4, r1
 8017352:	461e      	mov	r6, r3
 8017354:	f101 0c14 	add.w	ip, r1, #20
 8017358:	2000      	movs	r0, #0
 801735a:	f8dc 3000 	ldr.w	r3, [ip]
 801735e:	b299      	uxth	r1, r3
 8017360:	fb02 6101 	mla	r1, r2, r1, r6
 8017364:	0c1e      	lsrs	r6, r3, #16
 8017366:	0c0b      	lsrs	r3, r1, #16
 8017368:	fb02 3306 	mla	r3, r2, r6, r3
 801736c:	b289      	uxth	r1, r1
 801736e:	3001      	adds	r0, #1
 8017370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017374:	4285      	cmp	r5, r0
 8017376:	f84c 1b04 	str.w	r1, [ip], #4
 801737a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801737e:	dcec      	bgt.n	801735a <__multadd+0x12>
 8017380:	b30e      	cbz	r6, 80173c6 <__multadd+0x7e>
 8017382:	68a3      	ldr	r3, [r4, #8]
 8017384:	42ab      	cmp	r3, r5
 8017386:	dc19      	bgt.n	80173bc <__multadd+0x74>
 8017388:	6861      	ldr	r1, [r4, #4]
 801738a:	4638      	mov	r0, r7
 801738c:	3101      	adds	r1, #1
 801738e:	f7ff ff79 	bl	8017284 <_Balloc>
 8017392:	4680      	mov	r8, r0
 8017394:	b928      	cbnz	r0, 80173a2 <__multadd+0x5a>
 8017396:	4602      	mov	r2, r0
 8017398:	4b0c      	ldr	r3, [pc, #48]	; (80173cc <__multadd+0x84>)
 801739a:	480d      	ldr	r0, [pc, #52]	; (80173d0 <__multadd+0x88>)
 801739c:	21b5      	movs	r1, #181	; 0xb5
 801739e:	f000 fcbb 	bl	8017d18 <__assert_func>
 80173a2:	6922      	ldr	r2, [r4, #16]
 80173a4:	3202      	adds	r2, #2
 80173a6:	f104 010c 	add.w	r1, r4, #12
 80173aa:	0092      	lsls	r2, r2, #2
 80173ac:	300c      	adds	r0, #12
 80173ae:	f7fd ffa1 	bl	80152f4 <memcpy>
 80173b2:	4621      	mov	r1, r4
 80173b4:	4638      	mov	r0, r7
 80173b6:	f7ff ffa5 	bl	8017304 <_Bfree>
 80173ba:	4644      	mov	r4, r8
 80173bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173c0:	3501      	adds	r5, #1
 80173c2:	615e      	str	r6, [r3, #20]
 80173c4:	6125      	str	r5, [r4, #16]
 80173c6:	4620      	mov	r0, r4
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	08018643 	.word	0x08018643
 80173d0:	080186b4 	.word	0x080186b4

080173d4 <__hi0bits>:
 80173d4:	0c03      	lsrs	r3, r0, #16
 80173d6:	041b      	lsls	r3, r3, #16
 80173d8:	b9d3      	cbnz	r3, 8017410 <__hi0bits+0x3c>
 80173da:	0400      	lsls	r0, r0, #16
 80173dc:	2310      	movs	r3, #16
 80173de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80173e2:	bf04      	itt	eq
 80173e4:	0200      	lsleq	r0, r0, #8
 80173e6:	3308      	addeq	r3, #8
 80173e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80173ec:	bf04      	itt	eq
 80173ee:	0100      	lsleq	r0, r0, #4
 80173f0:	3304      	addeq	r3, #4
 80173f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80173f6:	bf04      	itt	eq
 80173f8:	0080      	lsleq	r0, r0, #2
 80173fa:	3302      	addeq	r3, #2
 80173fc:	2800      	cmp	r0, #0
 80173fe:	db05      	blt.n	801740c <__hi0bits+0x38>
 8017400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017404:	f103 0301 	add.w	r3, r3, #1
 8017408:	bf08      	it	eq
 801740a:	2320      	moveq	r3, #32
 801740c:	4618      	mov	r0, r3
 801740e:	4770      	bx	lr
 8017410:	2300      	movs	r3, #0
 8017412:	e7e4      	b.n	80173de <__hi0bits+0xa>

08017414 <__lo0bits>:
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	f013 0207 	ands.w	r2, r3, #7
 801741a:	4601      	mov	r1, r0
 801741c:	d00b      	beq.n	8017436 <__lo0bits+0x22>
 801741e:	07da      	lsls	r2, r3, #31
 8017420:	d423      	bmi.n	801746a <__lo0bits+0x56>
 8017422:	0798      	lsls	r0, r3, #30
 8017424:	bf49      	itett	mi
 8017426:	085b      	lsrmi	r3, r3, #1
 8017428:	089b      	lsrpl	r3, r3, #2
 801742a:	2001      	movmi	r0, #1
 801742c:	600b      	strmi	r3, [r1, #0]
 801742e:	bf5c      	itt	pl
 8017430:	600b      	strpl	r3, [r1, #0]
 8017432:	2002      	movpl	r0, #2
 8017434:	4770      	bx	lr
 8017436:	b298      	uxth	r0, r3
 8017438:	b9a8      	cbnz	r0, 8017466 <__lo0bits+0x52>
 801743a:	0c1b      	lsrs	r3, r3, #16
 801743c:	2010      	movs	r0, #16
 801743e:	b2da      	uxtb	r2, r3
 8017440:	b90a      	cbnz	r2, 8017446 <__lo0bits+0x32>
 8017442:	3008      	adds	r0, #8
 8017444:	0a1b      	lsrs	r3, r3, #8
 8017446:	071a      	lsls	r2, r3, #28
 8017448:	bf04      	itt	eq
 801744a:	091b      	lsreq	r3, r3, #4
 801744c:	3004      	addeq	r0, #4
 801744e:	079a      	lsls	r2, r3, #30
 8017450:	bf04      	itt	eq
 8017452:	089b      	lsreq	r3, r3, #2
 8017454:	3002      	addeq	r0, #2
 8017456:	07da      	lsls	r2, r3, #31
 8017458:	d403      	bmi.n	8017462 <__lo0bits+0x4e>
 801745a:	085b      	lsrs	r3, r3, #1
 801745c:	f100 0001 	add.w	r0, r0, #1
 8017460:	d005      	beq.n	801746e <__lo0bits+0x5a>
 8017462:	600b      	str	r3, [r1, #0]
 8017464:	4770      	bx	lr
 8017466:	4610      	mov	r0, r2
 8017468:	e7e9      	b.n	801743e <__lo0bits+0x2a>
 801746a:	2000      	movs	r0, #0
 801746c:	4770      	bx	lr
 801746e:	2020      	movs	r0, #32
 8017470:	4770      	bx	lr
	...

08017474 <__i2b>:
 8017474:	b510      	push	{r4, lr}
 8017476:	460c      	mov	r4, r1
 8017478:	2101      	movs	r1, #1
 801747a:	f7ff ff03 	bl	8017284 <_Balloc>
 801747e:	4602      	mov	r2, r0
 8017480:	b928      	cbnz	r0, 801748e <__i2b+0x1a>
 8017482:	4b05      	ldr	r3, [pc, #20]	; (8017498 <__i2b+0x24>)
 8017484:	4805      	ldr	r0, [pc, #20]	; (801749c <__i2b+0x28>)
 8017486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801748a:	f000 fc45 	bl	8017d18 <__assert_func>
 801748e:	2301      	movs	r3, #1
 8017490:	6144      	str	r4, [r0, #20]
 8017492:	6103      	str	r3, [r0, #16]
 8017494:	bd10      	pop	{r4, pc}
 8017496:	bf00      	nop
 8017498:	08018643 	.word	0x08018643
 801749c:	080186b4 	.word	0x080186b4

080174a0 <__multiply>:
 80174a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a4:	4691      	mov	r9, r2
 80174a6:	690a      	ldr	r2, [r1, #16]
 80174a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	bfb8      	it	lt
 80174b0:	460b      	movlt	r3, r1
 80174b2:	460c      	mov	r4, r1
 80174b4:	bfbc      	itt	lt
 80174b6:	464c      	movlt	r4, r9
 80174b8:	4699      	movlt	r9, r3
 80174ba:	6927      	ldr	r7, [r4, #16]
 80174bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80174c0:	68a3      	ldr	r3, [r4, #8]
 80174c2:	6861      	ldr	r1, [r4, #4]
 80174c4:	eb07 060a 	add.w	r6, r7, sl
 80174c8:	42b3      	cmp	r3, r6
 80174ca:	b085      	sub	sp, #20
 80174cc:	bfb8      	it	lt
 80174ce:	3101      	addlt	r1, #1
 80174d0:	f7ff fed8 	bl	8017284 <_Balloc>
 80174d4:	b930      	cbnz	r0, 80174e4 <__multiply+0x44>
 80174d6:	4602      	mov	r2, r0
 80174d8:	4b44      	ldr	r3, [pc, #272]	; (80175ec <__multiply+0x14c>)
 80174da:	4845      	ldr	r0, [pc, #276]	; (80175f0 <__multiply+0x150>)
 80174dc:	f240 115d 	movw	r1, #349	; 0x15d
 80174e0:	f000 fc1a 	bl	8017d18 <__assert_func>
 80174e4:	f100 0514 	add.w	r5, r0, #20
 80174e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80174ec:	462b      	mov	r3, r5
 80174ee:	2200      	movs	r2, #0
 80174f0:	4543      	cmp	r3, r8
 80174f2:	d321      	bcc.n	8017538 <__multiply+0x98>
 80174f4:	f104 0314 	add.w	r3, r4, #20
 80174f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80174fc:	f109 0314 	add.w	r3, r9, #20
 8017500:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017504:	9202      	str	r2, [sp, #8]
 8017506:	1b3a      	subs	r2, r7, r4
 8017508:	3a15      	subs	r2, #21
 801750a:	f022 0203 	bic.w	r2, r2, #3
 801750e:	3204      	adds	r2, #4
 8017510:	f104 0115 	add.w	r1, r4, #21
 8017514:	428f      	cmp	r7, r1
 8017516:	bf38      	it	cc
 8017518:	2204      	movcc	r2, #4
 801751a:	9201      	str	r2, [sp, #4]
 801751c:	9a02      	ldr	r2, [sp, #8]
 801751e:	9303      	str	r3, [sp, #12]
 8017520:	429a      	cmp	r2, r3
 8017522:	d80c      	bhi.n	801753e <__multiply+0x9e>
 8017524:	2e00      	cmp	r6, #0
 8017526:	dd03      	ble.n	8017530 <__multiply+0x90>
 8017528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801752c:	2b00      	cmp	r3, #0
 801752e:	d05a      	beq.n	80175e6 <__multiply+0x146>
 8017530:	6106      	str	r6, [r0, #16]
 8017532:	b005      	add	sp, #20
 8017534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017538:	f843 2b04 	str.w	r2, [r3], #4
 801753c:	e7d8      	b.n	80174f0 <__multiply+0x50>
 801753e:	f8b3 a000 	ldrh.w	sl, [r3]
 8017542:	f1ba 0f00 	cmp.w	sl, #0
 8017546:	d024      	beq.n	8017592 <__multiply+0xf2>
 8017548:	f104 0e14 	add.w	lr, r4, #20
 801754c:	46a9      	mov	r9, r5
 801754e:	f04f 0c00 	mov.w	ip, #0
 8017552:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017556:	f8d9 1000 	ldr.w	r1, [r9]
 801755a:	fa1f fb82 	uxth.w	fp, r2
 801755e:	b289      	uxth	r1, r1
 8017560:	fb0a 110b 	mla	r1, sl, fp, r1
 8017564:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017568:	f8d9 2000 	ldr.w	r2, [r9]
 801756c:	4461      	add	r1, ip
 801756e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017572:	fb0a c20b 	mla	r2, sl, fp, ip
 8017576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801757a:	b289      	uxth	r1, r1
 801757c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017580:	4577      	cmp	r7, lr
 8017582:	f849 1b04 	str.w	r1, [r9], #4
 8017586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801758a:	d8e2      	bhi.n	8017552 <__multiply+0xb2>
 801758c:	9a01      	ldr	r2, [sp, #4]
 801758e:	f845 c002 	str.w	ip, [r5, r2]
 8017592:	9a03      	ldr	r2, [sp, #12]
 8017594:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017598:	3304      	adds	r3, #4
 801759a:	f1b9 0f00 	cmp.w	r9, #0
 801759e:	d020      	beq.n	80175e2 <__multiply+0x142>
 80175a0:	6829      	ldr	r1, [r5, #0]
 80175a2:	f104 0c14 	add.w	ip, r4, #20
 80175a6:	46ae      	mov	lr, r5
 80175a8:	f04f 0a00 	mov.w	sl, #0
 80175ac:	f8bc b000 	ldrh.w	fp, [ip]
 80175b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80175b4:	fb09 220b 	mla	r2, r9, fp, r2
 80175b8:	4492      	add	sl, r2
 80175ba:	b289      	uxth	r1, r1
 80175bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80175c0:	f84e 1b04 	str.w	r1, [lr], #4
 80175c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80175c8:	f8be 1000 	ldrh.w	r1, [lr]
 80175cc:	0c12      	lsrs	r2, r2, #16
 80175ce:	fb09 1102 	mla	r1, r9, r2, r1
 80175d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80175d6:	4567      	cmp	r7, ip
 80175d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80175dc:	d8e6      	bhi.n	80175ac <__multiply+0x10c>
 80175de:	9a01      	ldr	r2, [sp, #4]
 80175e0:	50a9      	str	r1, [r5, r2]
 80175e2:	3504      	adds	r5, #4
 80175e4:	e79a      	b.n	801751c <__multiply+0x7c>
 80175e6:	3e01      	subs	r6, #1
 80175e8:	e79c      	b.n	8017524 <__multiply+0x84>
 80175ea:	bf00      	nop
 80175ec:	08018643 	.word	0x08018643
 80175f0:	080186b4 	.word	0x080186b4

080175f4 <__pow5mult>:
 80175f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175f8:	4615      	mov	r5, r2
 80175fa:	f012 0203 	ands.w	r2, r2, #3
 80175fe:	4606      	mov	r6, r0
 8017600:	460f      	mov	r7, r1
 8017602:	d007      	beq.n	8017614 <__pow5mult+0x20>
 8017604:	4c25      	ldr	r4, [pc, #148]	; (801769c <__pow5mult+0xa8>)
 8017606:	3a01      	subs	r2, #1
 8017608:	2300      	movs	r3, #0
 801760a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801760e:	f7ff fe9b 	bl	8017348 <__multadd>
 8017612:	4607      	mov	r7, r0
 8017614:	10ad      	asrs	r5, r5, #2
 8017616:	d03d      	beq.n	8017694 <__pow5mult+0xa0>
 8017618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801761a:	b97c      	cbnz	r4, 801763c <__pow5mult+0x48>
 801761c:	2010      	movs	r0, #16
 801761e:	f7fd fe59 	bl	80152d4 <malloc>
 8017622:	4602      	mov	r2, r0
 8017624:	6270      	str	r0, [r6, #36]	; 0x24
 8017626:	b928      	cbnz	r0, 8017634 <__pow5mult+0x40>
 8017628:	4b1d      	ldr	r3, [pc, #116]	; (80176a0 <__pow5mult+0xac>)
 801762a:	481e      	ldr	r0, [pc, #120]	; (80176a4 <__pow5mult+0xb0>)
 801762c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017630:	f000 fb72 	bl	8017d18 <__assert_func>
 8017634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017638:	6004      	str	r4, [r0, #0]
 801763a:	60c4      	str	r4, [r0, #12]
 801763c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017644:	b94c      	cbnz	r4, 801765a <__pow5mult+0x66>
 8017646:	f240 2171 	movw	r1, #625	; 0x271
 801764a:	4630      	mov	r0, r6
 801764c:	f7ff ff12 	bl	8017474 <__i2b>
 8017650:	2300      	movs	r3, #0
 8017652:	f8c8 0008 	str.w	r0, [r8, #8]
 8017656:	4604      	mov	r4, r0
 8017658:	6003      	str	r3, [r0, #0]
 801765a:	f04f 0900 	mov.w	r9, #0
 801765e:	07eb      	lsls	r3, r5, #31
 8017660:	d50a      	bpl.n	8017678 <__pow5mult+0x84>
 8017662:	4639      	mov	r1, r7
 8017664:	4622      	mov	r2, r4
 8017666:	4630      	mov	r0, r6
 8017668:	f7ff ff1a 	bl	80174a0 <__multiply>
 801766c:	4639      	mov	r1, r7
 801766e:	4680      	mov	r8, r0
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff fe47 	bl	8017304 <_Bfree>
 8017676:	4647      	mov	r7, r8
 8017678:	106d      	asrs	r5, r5, #1
 801767a:	d00b      	beq.n	8017694 <__pow5mult+0xa0>
 801767c:	6820      	ldr	r0, [r4, #0]
 801767e:	b938      	cbnz	r0, 8017690 <__pow5mult+0x9c>
 8017680:	4622      	mov	r2, r4
 8017682:	4621      	mov	r1, r4
 8017684:	4630      	mov	r0, r6
 8017686:	f7ff ff0b 	bl	80174a0 <__multiply>
 801768a:	6020      	str	r0, [r4, #0]
 801768c:	f8c0 9000 	str.w	r9, [r0]
 8017690:	4604      	mov	r4, r0
 8017692:	e7e4      	b.n	801765e <__pow5mult+0x6a>
 8017694:	4638      	mov	r0, r7
 8017696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801769a:	bf00      	nop
 801769c:	08018800 	.word	0x08018800
 80176a0:	080185d1 	.word	0x080185d1
 80176a4:	080186b4 	.word	0x080186b4

080176a8 <__lshift>:
 80176a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176ac:	460c      	mov	r4, r1
 80176ae:	6849      	ldr	r1, [r1, #4]
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80176b6:	68a3      	ldr	r3, [r4, #8]
 80176b8:	4607      	mov	r7, r0
 80176ba:	4691      	mov	r9, r2
 80176bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80176c0:	f108 0601 	add.w	r6, r8, #1
 80176c4:	42b3      	cmp	r3, r6
 80176c6:	db0b      	blt.n	80176e0 <__lshift+0x38>
 80176c8:	4638      	mov	r0, r7
 80176ca:	f7ff fddb 	bl	8017284 <_Balloc>
 80176ce:	4605      	mov	r5, r0
 80176d0:	b948      	cbnz	r0, 80176e6 <__lshift+0x3e>
 80176d2:	4602      	mov	r2, r0
 80176d4:	4b2a      	ldr	r3, [pc, #168]	; (8017780 <__lshift+0xd8>)
 80176d6:	482b      	ldr	r0, [pc, #172]	; (8017784 <__lshift+0xdc>)
 80176d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80176dc:	f000 fb1c 	bl	8017d18 <__assert_func>
 80176e0:	3101      	adds	r1, #1
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	e7ee      	b.n	80176c4 <__lshift+0x1c>
 80176e6:	2300      	movs	r3, #0
 80176e8:	f100 0114 	add.w	r1, r0, #20
 80176ec:	f100 0210 	add.w	r2, r0, #16
 80176f0:	4618      	mov	r0, r3
 80176f2:	4553      	cmp	r3, sl
 80176f4:	db37      	blt.n	8017766 <__lshift+0xbe>
 80176f6:	6920      	ldr	r0, [r4, #16]
 80176f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80176fc:	f104 0314 	add.w	r3, r4, #20
 8017700:	f019 091f 	ands.w	r9, r9, #31
 8017704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801770c:	d02f      	beq.n	801776e <__lshift+0xc6>
 801770e:	f1c9 0e20 	rsb	lr, r9, #32
 8017712:	468a      	mov	sl, r1
 8017714:	f04f 0c00 	mov.w	ip, #0
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	fa02 f209 	lsl.w	r2, r2, r9
 801771e:	ea42 020c 	orr.w	r2, r2, ip
 8017722:	f84a 2b04 	str.w	r2, [sl], #4
 8017726:	f853 2b04 	ldr.w	r2, [r3], #4
 801772a:	4298      	cmp	r0, r3
 801772c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017730:	d8f2      	bhi.n	8017718 <__lshift+0x70>
 8017732:	1b03      	subs	r3, r0, r4
 8017734:	3b15      	subs	r3, #21
 8017736:	f023 0303 	bic.w	r3, r3, #3
 801773a:	3304      	adds	r3, #4
 801773c:	f104 0215 	add.w	r2, r4, #21
 8017740:	4290      	cmp	r0, r2
 8017742:	bf38      	it	cc
 8017744:	2304      	movcc	r3, #4
 8017746:	f841 c003 	str.w	ip, [r1, r3]
 801774a:	f1bc 0f00 	cmp.w	ip, #0
 801774e:	d001      	beq.n	8017754 <__lshift+0xac>
 8017750:	f108 0602 	add.w	r6, r8, #2
 8017754:	3e01      	subs	r6, #1
 8017756:	4638      	mov	r0, r7
 8017758:	612e      	str	r6, [r5, #16]
 801775a:	4621      	mov	r1, r4
 801775c:	f7ff fdd2 	bl	8017304 <_Bfree>
 8017760:	4628      	mov	r0, r5
 8017762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017766:	f842 0f04 	str.w	r0, [r2, #4]!
 801776a:	3301      	adds	r3, #1
 801776c:	e7c1      	b.n	80176f2 <__lshift+0x4a>
 801776e:	3904      	subs	r1, #4
 8017770:	f853 2b04 	ldr.w	r2, [r3], #4
 8017774:	f841 2f04 	str.w	r2, [r1, #4]!
 8017778:	4298      	cmp	r0, r3
 801777a:	d8f9      	bhi.n	8017770 <__lshift+0xc8>
 801777c:	e7ea      	b.n	8017754 <__lshift+0xac>
 801777e:	bf00      	nop
 8017780:	08018643 	.word	0x08018643
 8017784:	080186b4 	.word	0x080186b4

08017788 <__mcmp>:
 8017788:	b530      	push	{r4, r5, lr}
 801778a:	6902      	ldr	r2, [r0, #16]
 801778c:	690c      	ldr	r4, [r1, #16]
 801778e:	1b12      	subs	r2, r2, r4
 8017790:	d10e      	bne.n	80177b0 <__mcmp+0x28>
 8017792:	f100 0314 	add.w	r3, r0, #20
 8017796:	3114      	adds	r1, #20
 8017798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801779c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80177a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80177a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80177a8:	42a5      	cmp	r5, r4
 80177aa:	d003      	beq.n	80177b4 <__mcmp+0x2c>
 80177ac:	d305      	bcc.n	80177ba <__mcmp+0x32>
 80177ae:	2201      	movs	r2, #1
 80177b0:	4610      	mov	r0, r2
 80177b2:	bd30      	pop	{r4, r5, pc}
 80177b4:	4283      	cmp	r3, r0
 80177b6:	d3f3      	bcc.n	80177a0 <__mcmp+0x18>
 80177b8:	e7fa      	b.n	80177b0 <__mcmp+0x28>
 80177ba:	f04f 32ff 	mov.w	r2, #4294967295
 80177be:	e7f7      	b.n	80177b0 <__mcmp+0x28>

080177c0 <__mdiff>:
 80177c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c4:	460c      	mov	r4, r1
 80177c6:	4606      	mov	r6, r0
 80177c8:	4611      	mov	r1, r2
 80177ca:	4620      	mov	r0, r4
 80177cc:	4690      	mov	r8, r2
 80177ce:	f7ff ffdb 	bl	8017788 <__mcmp>
 80177d2:	1e05      	subs	r5, r0, #0
 80177d4:	d110      	bne.n	80177f8 <__mdiff+0x38>
 80177d6:	4629      	mov	r1, r5
 80177d8:	4630      	mov	r0, r6
 80177da:	f7ff fd53 	bl	8017284 <_Balloc>
 80177de:	b930      	cbnz	r0, 80177ee <__mdiff+0x2e>
 80177e0:	4b3a      	ldr	r3, [pc, #232]	; (80178cc <__mdiff+0x10c>)
 80177e2:	4602      	mov	r2, r0
 80177e4:	f240 2132 	movw	r1, #562	; 0x232
 80177e8:	4839      	ldr	r0, [pc, #228]	; (80178d0 <__mdiff+0x110>)
 80177ea:	f000 fa95 	bl	8017d18 <__assert_func>
 80177ee:	2301      	movs	r3, #1
 80177f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80177f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f8:	bfa4      	itt	ge
 80177fa:	4643      	movge	r3, r8
 80177fc:	46a0      	movge	r8, r4
 80177fe:	4630      	mov	r0, r6
 8017800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017804:	bfa6      	itte	ge
 8017806:	461c      	movge	r4, r3
 8017808:	2500      	movge	r5, #0
 801780a:	2501      	movlt	r5, #1
 801780c:	f7ff fd3a 	bl	8017284 <_Balloc>
 8017810:	b920      	cbnz	r0, 801781c <__mdiff+0x5c>
 8017812:	4b2e      	ldr	r3, [pc, #184]	; (80178cc <__mdiff+0x10c>)
 8017814:	4602      	mov	r2, r0
 8017816:	f44f 7110 	mov.w	r1, #576	; 0x240
 801781a:	e7e5      	b.n	80177e8 <__mdiff+0x28>
 801781c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017820:	6926      	ldr	r6, [r4, #16]
 8017822:	60c5      	str	r5, [r0, #12]
 8017824:	f104 0914 	add.w	r9, r4, #20
 8017828:	f108 0514 	add.w	r5, r8, #20
 801782c:	f100 0e14 	add.w	lr, r0, #20
 8017830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017838:	f108 0210 	add.w	r2, r8, #16
 801783c:	46f2      	mov	sl, lr
 801783e:	2100      	movs	r1, #0
 8017840:	f859 3b04 	ldr.w	r3, [r9], #4
 8017844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017848:	fa1f f883 	uxth.w	r8, r3
 801784c:	fa11 f18b 	uxtah	r1, r1, fp
 8017850:	0c1b      	lsrs	r3, r3, #16
 8017852:	eba1 0808 	sub.w	r8, r1, r8
 8017856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801785a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801785e:	fa1f f888 	uxth.w	r8, r8
 8017862:	1419      	asrs	r1, r3, #16
 8017864:	454e      	cmp	r6, r9
 8017866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801786a:	f84a 3b04 	str.w	r3, [sl], #4
 801786e:	d8e7      	bhi.n	8017840 <__mdiff+0x80>
 8017870:	1b33      	subs	r3, r6, r4
 8017872:	3b15      	subs	r3, #21
 8017874:	f023 0303 	bic.w	r3, r3, #3
 8017878:	3304      	adds	r3, #4
 801787a:	3415      	adds	r4, #21
 801787c:	42a6      	cmp	r6, r4
 801787e:	bf38      	it	cc
 8017880:	2304      	movcc	r3, #4
 8017882:	441d      	add	r5, r3
 8017884:	4473      	add	r3, lr
 8017886:	469e      	mov	lr, r3
 8017888:	462e      	mov	r6, r5
 801788a:	4566      	cmp	r6, ip
 801788c:	d30e      	bcc.n	80178ac <__mdiff+0xec>
 801788e:	f10c 0203 	add.w	r2, ip, #3
 8017892:	1b52      	subs	r2, r2, r5
 8017894:	f022 0203 	bic.w	r2, r2, #3
 8017898:	3d03      	subs	r5, #3
 801789a:	45ac      	cmp	ip, r5
 801789c:	bf38      	it	cc
 801789e:	2200      	movcc	r2, #0
 80178a0:	441a      	add	r2, r3
 80178a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80178a6:	b17b      	cbz	r3, 80178c8 <__mdiff+0x108>
 80178a8:	6107      	str	r7, [r0, #16]
 80178aa:	e7a3      	b.n	80177f4 <__mdiff+0x34>
 80178ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80178b0:	fa11 f288 	uxtah	r2, r1, r8
 80178b4:	1414      	asrs	r4, r2, #16
 80178b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80178ba:	b292      	uxth	r2, r2
 80178bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80178c0:	f84e 2b04 	str.w	r2, [lr], #4
 80178c4:	1421      	asrs	r1, r4, #16
 80178c6:	e7e0      	b.n	801788a <__mdiff+0xca>
 80178c8:	3f01      	subs	r7, #1
 80178ca:	e7ea      	b.n	80178a2 <__mdiff+0xe2>
 80178cc:	08018643 	.word	0x08018643
 80178d0:	080186b4 	.word	0x080186b4

080178d4 <__d2b>:
 80178d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178d8:	4689      	mov	r9, r1
 80178da:	2101      	movs	r1, #1
 80178dc:	ec57 6b10 	vmov	r6, r7, d0
 80178e0:	4690      	mov	r8, r2
 80178e2:	f7ff fccf 	bl	8017284 <_Balloc>
 80178e6:	4604      	mov	r4, r0
 80178e8:	b930      	cbnz	r0, 80178f8 <__d2b+0x24>
 80178ea:	4602      	mov	r2, r0
 80178ec:	4b25      	ldr	r3, [pc, #148]	; (8017984 <__d2b+0xb0>)
 80178ee:	4826      	ldr	r0, [pc, #152]	; (8017988 <__d2b+0xb4>)
 80178f0:	f240 310a 	movw	r1, #778	; 0x30a
 80178f4:	f000 fa10 	bl	8017d18 <__assert_func>
 80178f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80178fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017900:	bb35      	cbnz	r5, 8017950 <__d2b+0x7c>
 8017902:	2e00      	cmp	r6, #0
 8017904:	9301      	str	r3, [sp, #4]
 8017906:	d028      	beq.n	801795a <__d2b+0x86>
 8017908:	4668      	mov	r0, sp
 801790a:	9600      	str	r6, [sp, #0]
 801790c:	f7ff fd82 	bl	8017414 <__lo0bits>
 8017910:	9900      	ldr	r1, [sp, #0]
 8017912:	b300      	cbz	r0, 8017956 <__d2b+0x82>
 8017914:	9a01      	ldr	r2, [sp, #4]
 8017916:	f1c0 0320 	rsb	r3, r0, #32
 801791a:	fa02 f303 	lsl.w	r3, r2, r3
 801791e:	430b      	orrs	r3, r1
 8017920:	40c2      	lsrs	r2, r0
 8017922:	6163      	str	r3, [r4, #20]
 8017924:	9201      	str	r2, [sp, #4]
 8017926:	9b01      	ldr	r3, [sp, #4]
 8017928:	61a3      	str	r3, [r4, #24]
 801792a:	2b00      	cmp	r3, #0
 801792c:	bf14      	ite	ne
 801792e:	2202      	movne	r2, #2
 8017930:	2201      	moveq	r2, #1
 8017932:	6122      	str	r2, [r4, #16]
 8017934:	b1d5      	cbz	r5, 801796c <__d2b+0x98>
 8017936:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801793a:	4405      	add	r5, r0
 801793c:	f8c9 5000 	str.w	r5, [r9]
 8017940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017944:	f8c8 0000 	str.w	r0, [r8]
 8017948:	4620      	mov	r0, r4
 801794a:	b003      	add	sp, #12
 801794c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017954:	e7d5      	b.n	8017902 <__d2b+0x2e>
 8017956:	6161      	str	r1, [r4, #20]
 8017958:	e7e5      	b.n	8017926 <__d2b+0x52>
 801795a:	a801      	add	r0, sp, #4
 801795c:	f7ff fd5a 	bl	8017414 <__lo0bits>
 8017960:	9b01      	ldr	r3, [sp, #4]
 8017962:	6163      	str	r3, [r4, #20]
 8017964:	2201      	movs	r2, #1
 8017966:	6122      	str	r2, [r4, #16]
 8017968:	3020      	adds	r0, #32
 801796a:	e7e3      	b.n	8017934 <__d2b+0x60>
 801796c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017974:	f8c9 0000 	str.w	r0, [r9]
 8017978:	6918      	ldr	r0, [r3, #16]
 801797a:	f7ff fd2b 	bl	80173d4 <__hi0bits>
 801797e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017982:	e7df      	b.n	8017944 <__d2b+0x70>
 8017984:	08018643 	.word	0x08018643
 8017988:	080186b4 	.word	0x080186b4

0801798c <_calloc_r>:
 801798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801798e:	fba1 2402 	umull	r2, r4, r1, r2
 8017992:	b94c      	cbnz	r4, 80179a8 <_calloc_r+0x1c>
 8017994:	4611      	mov	r1, r2
 8017996:	9201      	str	r2, [sp, #4]
 8017998:	f7fd fd48 	bl	801542c <_malloc_r>
 801799c:	9a01      	ldr	r2, [sp, #4]
 801799e:	4605      	mov	r5, r0
 80179a0:	b930      	cbnz	r0, 80179b0 <_calloc_r+0x24>
 80179a2:	4628      	mov	r0, r5
 80179a4:	b003      	add	sp, #12
 80179a6:	bd30      	pop	{r4, r5, pc}
 80179a8:	220c      	movs	r2, #12
 80179aa:	6002      	str	r2, [r0, #0]
 80179ac:	2500      	movs	r5, #0
 80179ae:	e7f8      	b.n	80179a2 <_calloc_r+0x16>
 80179b0:	4621      	mov	r1, r4
 80179b2:	f7fd fcc7 	bl	8015344 <memset>
 80179b6:	e7f4      	b.n	80179a2 <_calloc_r+0x16>

080179b8 <__sfputc_r>:
 80179b8:	6893      	ldr	r3, [r2, #8]
 80179ba:	3b01      	subs	r3, #1
 80179bc:	2b00      	cmp	r3, #0
 80179be:	b410      	push	{r4}
 80179c0:	6093      	str	r3, [r2, #8]
 80179c2:	da08      	bge.n	80179d6 <__sfputc_r+0x1e>
 80179c4:	6994      	ldr	r4, [r2, #24]
 80179c6:	42a3      	cmp	r3, r4
 80179c8:	db01      	blt.n	80179ce <__sfputc_r+0x16>
 80179ca:	290a      	cmp	r1, #10
 80179cc:	d103      	bne.n	80179d6 <__sfputc_r+0x1e>
 80179ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179d2:	f7fe baeb 	b.w	8015fac <__swbuf_r>
 80179d6:	6813      	ldr	r3, [r2, #0]
 80179d8:	1c58      	adds	r0, r3, #1
 80179da:	6010      	str	r0, [r2, #0]
 80179dc:	7019      	strb	r1, [r3, #0]
 80179de:	4608      	mov	r0, r1
 80179e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179e4:	4770      	bx	lr

080179e6 <__sfputs_r>:
 80179e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179e8:	4606      	mov	r6, r0
 80179ea:	460f      	mov	r7, r1
 80179ec:	4614      	mov	r4, r2
 80179ee:	18d5      	adds	r5, r2, r3
 80179f0:	42ac      	cmp	r4, r5
 80179f2:	d101      	bne.n	80179f8 <__sfputs_r+0x12>
 80179f4:	2000      	movs	r0, #0
 80179f6:	e007      	b.n	8017a08 <__sfputs_r+0x22>
 80179f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179fc:	463a      	mov	r2, r7
 80179fe:	4630      	mov	r0, r6
 8017a00:	f7ff ffda 	bl	80179b8 <__sfputc_r>
 8017a04:	1c43      	adds	r3, r0, #1
 8017a06:	d1f3      	bne.n	80179f0 <__sfputs_r+0xa>
 8017a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a0c <_vfiprintf_r>:
 8017a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	460d      	mov	r5, r1
 8017a12:	b09d      	sub	sp, #116	; 0x74
 8017a14:	4614      	mov	r4, r2
 8017a16:	4698      	mov	r8, r3
 8017a18:	4606      	mov	r6, r0
 8017a1a:	b118      	cbz	r0, 8017a24 <_vfiprintf_r+0x18>
 8017a1c:	6983      	ldr	r3, [r0, #24]
 8017a1e:	b90b      	cbnz	r3, 8017a24 <_vfiprintf_r+0x18>
 8017a20:	f7ff fb1a 	bl	8017058 <__sinit>
 8017a24:	4b89      	ldr	r3, [pc, #548]	; (8017c4c <_vfiprintf_r+0x240>)
 8017a26:	429d      	cmp	r5, r3
 8017a28:	d11b      	bne.n	8017a62 <_vfiprintf_r+0x56>
 8017a2a:	6875      	ldr	r5, [r6, #4]
 8017a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a2e:	07d9      	lsls	r1, r3, #31
 8017a30:	d405      	bmi.n	8017a3e <_vfiprintf_r+0x32>
 8017a32:	89ab      	ldrh	r3, [r5, #12]
 8017a34:	059a      	lsls	r2, r3, #22
 8017a36:	d402      	bmi.n	8017a3e <_vfiprintf_r+0x32>
 8017a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a3a:	f7ff fbb0 	bl	801719e <__retarget_lock_acquire_recursive>
 8017a3e:	89ab      	ldrh	r3, [r5, #12]
 8017a40:	071b      	lsls	r3, r3, #28
 8017a42:	d501      	bpl.n	8017a48 <_vfiprintf_r+0x3c>
 8017a44:	692b      	ldr	r3, [r5, #16]
 8017a46:	b9eb      	cbnz	r3, 8017a84 <_vfiprintf_r+0x78>
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7fe fb00 	bl	8016050 <__swsetup_r>
 8017a50:	b1c0      	cbz	r0, 8017a84 <_vfiprintf_r+0x78>
 8017a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a54:	07dc      	lsls	r4, r3, #31
 8017a56:	d50e      	bpl.n	8017a76 <_vfiprintf_r+0x6a>
 8017a58:	f04f 30ff 	mov.w	r0, #4294967295
 8017a5c:	b01d      	add	sp, #116	; 0x74
 8017a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a62:	4b7b      	ldr	r3, [pc, #492]	; (8017c50 <_vfiprintf_r+0x244>)
 8017a64:	429d      	cmp	r5, r3
 8017a66:	d101      	bne.n	8017a6c <_vfiprintf_r+0x60>
 8017a68:	68b5      	ldr	r5, [r6, #8]
 8017a6a:	e7df      	b.n	8017a2c <_vfiprintf_r+0x20>
 8017a6c:	4b79      	ldr	r3, [pc, #484]	; (8017c54 <_vfiprintf_r+0x248>)
 8017a6e:	429d      	cmp	r5, r3
 8017a70:	bf08      	it	eq
 8017a72:	68f5      	ldreq	r5, [r6, #12]
 8017a74:	e7da      	b.n	8017a2c <_vfiprintf_r+0x20>
 8017a76:	89ab      	ldrh	r3, [r5, #12]
 8017a78:	0598      	lsls	r0, r3, #22
 8017a7a:	d4ed      	bmi.n	8017a58 <_vfiprintf_r+0x4c>
 8017a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a7e:	f7ff fb8f 	bl	80171a0 <__retarget_lock_release_recursive>
 8017a82:	e7e9      	b.n	8017a58 <_vfiprintf_r+0x4c>
 8017a84:	2300      	movs	r3, #0
 8017a86:	9309      	str	r3, [sp, #36]	; 0x24
 8017a88:	2320      	movs	r3, #32
 8017a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a92:	2330      	movs	r3, #48	; 0x30
 8017a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c58 <_vfiprintf_r+0x24c>
 8017a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a9c:	f04f 0901 	mov.w	r9, #1
 8017aa0:	4623      	mov	r3, r4
 8017aa2:	469a      	mov	sl, r3
 8017aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017aa8:	b10a      	cbz	r2, 8017aae <_vfiprintf_r+0xa2>
 8017aaa:	2a25      	cmp	r2, #37	; 0x25
 8017aac:	d1f9      	bne.n	8017aa2 <_vfiprintf_r+0x96>
 8017aae:	ebba 0b04 	subs.w	fp, sl, r4
 8017ab2:	d00b      	beq.n	8017acc <_vfiprintf_r+0xc0>
 8017ab4:	465b      	mov	r3, fp
 8017ab6:	4622      	mov	r2, r4
 8017ab8:	4629      	mov	r1, r5
 8017aba:	4630      	mov	r0, r6
 8017abc:	f7ff ff93 	bl	80179e6 <__sfputs_r>
 8017ac0:	3001      	adds	r0, #1
 8017ac2:	f000 80aa 	beq.w	8017c1a <_vfiprintf_r+0x20e>
 8017ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ac8:	445a      	add	r2, fp
 8017aca:	9209      	str	r2, [sp, #36]	; 0x24
 8017acc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 80a2 	beq.w	8017c1a <_vfiprintf_r+0x20e>
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8017adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ae0:	f10a 0a01 	add.w	sl, sl, #1
 8017ae4:	9304      	str	r3, [sp, #16]
 8017ae6:	9307      	str	r3, [sp, #28]
 8017ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aec:	931a      	str	r3, [sp, #104]	; 0x68
 8017aee:	4654      	mov	r4, sl
 8017af0:	2205      	movs	r2, #5
 8017af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017af6:	4858      	ldr	r0, [pc, #352]	; (8017c58 <_vfiprintf_r+0x24c>)
 8017af8:	f7e8 fb92 	bl	8000220 <memchr>
 8017afc:	9a04      	ldr	r2, [sp, #16]
 8017afe:	b9d8      	cbnz	r0, 8017b38 <_vfiprintf_r+0x12c>
 8017b00:	06d1      	lsls	r1, r2, #27
 8017b02:	bf44      	itt	mi
 8017b04:	2320      	movmi	r3, #32
 8017b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b0a:	0713      	lsls	r3, r2, #28
 8017b0c:	bf44      	itt	mi
 8017b0e:	232b      	movmi	r3, #43	; 0x2b
 8017b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b14:	f89a 3000 	ldrb.w	r3, [sl]
 8017b18:	2b2a      	cmp	r3, #42	; 0x2a
 8017b1a:	d015      	beq.n	8017b48 <_vfiprintf_r+0x13c>
 8017b1c:	9a07      	ldr	r2, [sp, #28]
 8017b1e:	4654      	mov	r4, sl
 8017b20:	2000      	movs	r0, #0
 8017b22:	f04f 0c0a 	mov.w	ip, #10
 8017b26:	4621      	mov	r1, r4
 8017b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b2c:	3b30      	subs	r3, #48	; 0x30
 8017b2e:	2b09      	cmp	r3, #9
 8017b30:	d94e      	bls.n	8017bd0 <_vfiprintf_r+0x1c4>
 8017b32:	b1b0      	cbz	r0, 8017b62 <_vfiprintf_r+0x156>
 8017b34:	9207      	str	r2, [sp, #28]
 8017b36:	e014      	b.n	8017b62 <_vfiprintf_r+0x156>
 8017b38:	eba0 0308 	sub.w	r3, r0, r8
 8017b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8017b40:	4313      	orrs	r3, r2
 8017b42:	9304      	str	r3, [sp, #16]
 8017b44:	46a2      	mov	sl, r4
 8017b46:	e7d2      	b.n	8017aee <_vfiprintf_r+0xe2>
 8017b48:	9b03      	ldr	r3, [sp, #12]
 8017b4a:	1d19      	adds	r1, r3, #4
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	9103      	str	r1, [sp, #12]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	bfbb      	ittet	lt
 8017b54:	425b      	neglt	r3, r3
 8017b56:	f042 0202 	orrlt.w	r2, r2, #2
 8017b5a:	9307      	strge	r3, [sp, #28]
 8017b5c:	9307      	strlt	r3, [sp, #28]
 8017b5e:	bfb8      	it	lt
 8017b60:	9204      	strlt	r2, [sp, #16]
 8017b62:	7823      	ldrb	r3, [r4, #0]
 8017b64:	2b2e      	cmp	r3, #46	; 0x2e
 8017b66:	d10c      	bne.n	8017b82 <_vfiprintf_r+0x176>
 8017b68:	7863      	ldrb	r3, [r4, #1]
 8017b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b6c:	d135      	bne.n	8017bda <_vfiprintf_r+0x1ce>
 8017b6e:	9b03      	ldr	r3, [sp, #12]
 8017b70:	1d1a      	adds	r2, r3, #4
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	9203      	str	r2, [sp, #12]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	bfb8      	it	lt
 8017b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b7e:	3402      	adds	r4, #2
 8017b80:	9305      	str	r3, [sp, #20]
 8017b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c68 <_vfiprintf_r+0x25c>
 8017b86:	7821      	ldrb	r1, [r4, #0]
 8017b88:	2203      	movs	r2, #3
 8017b8a:	4650      	mov	r0, sl
 8017b8c:	f7e8 fb48 	bl	8000220 <memchr>
 8017b90:	b140      	cbz	r0, 8017ba4 <_vfiprintf_r+0x198>
 8017b92:	2340      	movs	r3, #64	; 0x40
 8017b94:	eba0 000a 	sub.w	r0, r0, sl
 8017b98:	fa03 f000 	lsl.w	r0, r3, r0
 8017b9c:	9b04      	ldr	r3, [sp, #16]
 8017b9e:	4303      	orrs	r3, r0
 8017ba0:	3401      	adds	r4, #1
 8017ba2:	9304      	str	r3, [sp, #16]
 8017ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ba8:	482c      	ldr	r0, [pc, #176]	; (8017c5c <_vfiprintf_r+0x250>)
 8017baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bae:	2206      	movs	r2, #6
 8017bb0:	f7e8 fb36 	bl	8000220 <memchr>
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	d03f      	beq.n	8017c38 <_vfiprintf_r+0x22c>
 8017bb8:	4b29      	ldr	r3, [pc, #164]	; (8017c60 <_vfiprintf_r+0x254>)
 8017bba:	bb1b      	cbnz	r3, 8017c04 <_vfiprintf_r+0x1f8>
 8017bbc:	9b03      	ldr	r3, [sp, #12]
 8017bbe:	3307      	adds	r3, #7
 8017bc0:	f023 0307 	bic.w	r3, r3, #7
 8017bc4:	3308      	adds	r3, #8
 8017bc6:	9303      	str	r3, [sp, #12]
 8017bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bca:	443b      	add	r3, r7
 8017bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8017bce:	e767      	b.n	8017aa0 <_vfiprintf_r+0x94>
 8017bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bd4:	460c      	mov	r4, r1
 8017bd6:	2001      	movs	r0, #1
 8017bd8:	e7a5      	b.n	8017b26 <_vfiprintf_r+0x11a>
 8017bda:	2300      	movs	r3, #0
 8017bdc:	3401      	adds	r4, #1
 8017bde:	9305      	str	r3, [sp, #20]
 8017be0:	4619      	mov	r1, r3
 8017be2:	f04f 0c0a 	mov.w	ip, #10
 8017be6:	4620      	mov	r0, r4
 8017be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bec:	3a30      	subs	r2, #48	; 0x30
 8017bee:	2a09      	cmp	r2, #9
 8017bf0:	d903      	bls.n	8017bfa <_vfiprintf_r+0x1ee>
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d0c5      	beq.n	8017b82 <_vfiprintf_r+0x176>
 8017bf6:	9105      	str	r1, [sp, #20]
 8017bf8:	e7c3      	b.n	8017b82 <_vfiprintf_r+0x176>
 8017bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bfe:	4604      	mov	r4, r0
 8017c00:	2301      	movs	r3, #1
 8017c02:	e7f0      	b.n	8017be6 <_vfiprintf_r+0x1da>
 8017c04:	ab03      	add	r3, sp, #12
 8017c06:	9300      	str	r3, [sp, #0]
 8017c08:	462a      	mov	r2, r5
 8017c0a:	4b16      	ldr	r3, [pc, #88]	; (8017c64 <_vfiprintf_r+0x258>)
 8017c0c:	a904      	add	r1, sp, #16
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f7fd fd20 	bl	8015654 <_printf_float>
 8017c14:	4607      	mov	r7, r0
 8017c16:	1c78      	adds	r0, r7, #1
 8017c18:	d1d6      	bne.n	8017bc8 <_vfiprintf_r+0x1bc>
 8017c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c1c:	07d9      	lsls	r1, r3, #31
 8017c1e:	d405      	bmi.n	8017c2c <_vfiprintf_r+0x220>
 8017c20:	89ab      	ldrh	r3, [r5, #12]
 8017c22:	059a      	lsls	r2, r3, #22
 8017c24:	d402      	bmi.n	8017c2c <_vfiprintf_r+0x220>
 8017c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c28:	f7ff faba 	bl	80171a0 <__retarget_lock_release_recursive>
 8017c2c:	89ab      	ldrh	r3, [r5, #12]
 8017c2e:	065b      	lsls	r3, r3, #25
 8017c30:	f53f af12 	bmi.w	8017a58 <_vfiprintf_r+0x4c>
 8017c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c36:	e711      	b.n	8017a5c <_vfiprintf_r+0x50>
 8017c38:	ab03      	add	r3, sp, #12
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	462a      	mov	r2, r5
 8017c3e:	4b09      	ldr	r3, [pc, #36]	; (8017c64 <_vfiprintf_r+0x258>)
 8017c40:	a904      	add	r1, sp, #16
 8017c42:	4630      	mov	r0, r6
 8017c44:	f7fd ffaa 	bl	8015b9c <_printf_i>
 8017c48:	e7e4      	b.n	8017c14 <_vfiprintf_r+0x208>
 8017c4a:	bf00      	nop
 8017c4c:	08018674 	.word	0x08018674
 8017c50:	08018694 	.word	0x08018694
 8017c54:	08018654 	.word	0x08018654
 8017c58:	0801880c 	.word	0x0801880c
 8017c5c:	08018816 	.word	0x08018816
 8017c60:	08015655 	.word	0x08015655
 8017c64:	080179e7 	.word	0x080179e7
 8017c68:	08018812 	.word	0x08018812

08017c6c <__sread>:
 8017c6c:	b510      	push	{r4, lr}
 8017c6e:	460c      	mov	r4, r1
 8017c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c74:	f000 f8d6 	bl	8017e24 <_read_r>
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	bfab      	itete	ge
 8017c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c80:	181b      	addge	r3, r3, r0
 8017c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c86:	bfac      	ite	ge
 8017c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c8a:	81a3      	strhlt	r3, [r4, #12]
 8017c8c:	bd10      	pop	{r4, pc}

08017c8e <__swrite>:
 8017c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c92:	461f      	mov	r7, r3
 8017c94:	898b      	ldrh	r3, [r1, #12]
 8017c96:	05db      	lsls	r3, r3, #23
 8017c98:	4605      	mov	r5, r0
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	4616      	mov	r6, r2
 8017c9e:	d505      	bpl.n	8017cac <__swrite+0x1e>
 8017ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f000 f898 	bl	8017ddc <_lseek_r>
 8017cac:	89a3      	ldrh	r3, [r4, #12]
 8017cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017cb6:	81a3      	strh	r3, [r4, #12]
 8017cb8:	4632      	mov	r2, r6
 8017cba:	463b      	mov	r3, r7
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc2:	f000 b817 	b.w	8017cf4 <_write_r>

08017cc6 <__sseek>:
 8017cc6:	b510      	push	{r4, lr}
 8017cc8:	460c      	mov	r4, r1
 8017cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cce:	f000 f885 	bl	8017ddc <_lseek_r>
 8017cd2:	1c43      	adds	r3, r0, #1
 8017cd4:	89a3      	ldrh	r3, [r4, #12]
 8017cd6:	bf15      	itete	ne
 8017cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ce2:	81a3      	strheq	r3, [r4, #12]
 8017ce4:	bf18      	it	ne
 8017ce6:	81a3      	strhne	r3, [r4, #12]
 8017ce8:	bd10      	pop	{r4, pc}

08017cea <__sclose>:
 8017cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cee:	f000 b831 	b.w	8017d54 <_close_r>
	...

08017cf4 <_write_r>:
 8017cf4:	b538      	push	{r3, r4, r5, lr}
 8017cf6:	4d07      	ldr	r5, [pc, #28]	; (8017d14 <_write_r+0x20>)
 8017cf8:	4604      	mov	r4, r0
 8017cfa:	4608      	mov	r0, r1
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	2200      	movs	r2, #0
 8017d00:	602a      	str	r2, [r5, #0]
 8017d02:	461a      	mov	r2, r3
 8017d04:	f7ee fe7f 	bl	8006a06 <_write>
 8017d08:	1c43      	adds	r3, r0, #1
 8017d0a:	d102      	bne.n	8017d12 <_write_r+0x1e>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	b103      	cbz	r3, 8017d12 <_write_r+0x1e>
 8017d10:	6023      	str	r3, [r4, #0]
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	200024e4 	.word	0x200024e4

08017d18 <__assert_func>:
 8017d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d1a:	4614      	mov	r4, r2
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	4b09      	ldr	r3, [pc, #36]	; (8017d44 <__assert_func+0x2c>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	4605      	mov	r5, r0
 8017d24:	68d8      	ldr	r0, [r3, #12]
 8017d26:	b14c      	cbz	r4, 8017d3c <__assert_func+0x24>
 8017d28:	4b07      	ldr	r3, [pc, #28]	; (8017d48 <__assert_func+0x30>)
 8017d2a:	9100      	str	r1, [sp, #0]
 8017d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d30:	4906      	ldr	r1, [pc, #24]	; (8017d4c <__assert_func+0x34>)
 8017d32:	462b      	mov	r3, r5
 8017d34:	f000 f81e 	bl	8017d74 <fiprintf>
 8017d38:	f7fd fa9a 	bl	8015270 <abort>
 8017d3c:	4b04      	ldr	r3, [pc, #16]	; (8017d50 <__assert_func+0x38>)
 8017d3e:	461c      	mov	r4, r3
 8017d40:	e7f3      	b.n	8017d2a <__assert_func+0x12>
 8017d42:	bf00      	nop
 8017d44:	20000184 	.word	0x20000184
 8017d48:	0801881d 	.word	0x0801881d
 8017d4c:	0801882a 	.word	0x0801882a
 8017d50:	08018858 	.word	0x08018858

08017d54 <_close_r>:
 8017d54:	b538      	push	{r3, r4, r5, lr}
 8017d56:	4d06      	ldr	r5, [pc, #24]	; (8017d70 <_close_r+0x1c>)
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4604      	mov	r4, r0
 8017d5c:	4608      	mov	r0, r1
 8017d5e:	602b      	str	r3, [r5, #0]
 8017d60:	f7ee fe7e 	bl	8006a60 <_close>
 8017d64:	1c43      	adds	r3, r0, #1
 8017d66:	d102      	bne.n	8017d6e <_close_r+0x1a>
 8017d68:	682b      	ldr	r3, [r5, #0]
 8017d6a:	b103      	cbz	r3, 8017d6e <_close_r+0x1a>
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	bd38      	pop	{r3, r4, r5, pc}
 8017d70:	200024e4 	.word	0x200024e4

08017d74 <fiprintf>:
 8017d74:	b40e      	push	{r1, r2, r3}
 8017d76:	b503      	push	{r0, r1, lr}
 8017d78:	4601      	mov	r1, r0
 8017d7a:	ab03      	add	r3, sp, #12
 8017d7c:	4805      	ldr	r0, [pc, #20]	; (8017d94 <fiprintf+0x20>)
 8017d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d82:	6800      	ldr	r0, [r0, #0]
 8017d84:	9301      	str	r3, [sp, #4]
 8017d86:	f7ff fe41 	bl	8017a0c <_vfiprintf_r>
 8017d8a:	b002      	add	sp, #8
 8017d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d90:	b003      	add	sp, #12
 8017d92:	4770      	bx	lr
 8017d94:	20000184 	.word	0x20000184

08017d98 <_fstat_r>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	4d07      	ldr	r5, [pc, #28]	; (8017db8 <_fstat_r+0x20>)
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	4604      	mov	r4, r0
 8017da0:	4608      	mov	r0, r1
 8017da2:	4611      	mov	r1, r2
 8017da4:	602b      	str	r3, [r5, #0]
 8017da6:	f7ee fe67 	bl	8006a78 <_fstat>
 8017daa:	1c43      	adds	r3, r0, #1
 8017dac:	d102      	bne.n	8017db4 <_fstat_r+0x1c>
 8017dae:	682b      	ldr	r3, [r5, #0]
 8017db0:	b103      	cbz	r3, 8017db4 <_fstat_r+0x1c>
 8017db2:	6023      	str	r3, [r4, #0]
 8017db4:	bd38      	pop	{r3, r4, r5, pc}
 8017db6:	bf00      	nop
 8017db8:	200024e4 	.word	0x200024e4

08017dbc <_isatty_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4d06      	ldr	r5, [pc, #24]	; (8017dd8 <_isatty_r+0x1c>)
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	4608      	mov	r0, r1
 8017dc6:	602b      	str	r3, [r5, #0]
 8017dc8:	f7ee fe66 	bl	8006a98 <_isatty>
 8017dcc:	1c43      	adds	r3, r0, #1
 8017dce:	d102      	bne.n	8017dd6 <_isatty_r+0x1a>
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	b103      	cbz	r3, 8017dd6 <_isatty_r+0x1a>
 8017dd4:	6023      	str	r3, [r4, #0]
 8017dd6:	bd38      	pop	{r3, r4, r5, pc}
 8017dd8:	200024e4 	.word	0x200024e4

08017ddc <_lseek_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4d07      	ldr	r5, [pc, #28]	; (8017dfc <_lseek_r+0x20>)
 8017de0:	4604      	mov	r4, r0
 8017de2:	4608      	mov	r0, r1
 8017de4:	4611      	mov	r1, r2
 8017de6:	2200      	movs	r2, #0
 8017de8:	602a      	str	r2, [r5, #0]
 8017dea:	461a      	mov	r2, r3
 8017dec:	f7ee fe5f 	bl	8006aae <_lseek>
 8017df0:	1c43      	adds	r3, r0, #1
 8017df2:	d102      	bne.n	8017dfa <_lseek_r+0x1e>
 8017df4:	682b      	ldr	r3, [r5, #0]
 8017df6:	b103      	cbz	r3, 8017dfa <_lseek_r+0x1e>
 8017df8:	6023      	str	r3, [r4, #0]
 8017dfa:	bd38      	pop	{r3, r4, r5, pc}
 8017dfc:	200024e4 	.word	0x200024e4

08017e00 <__ascii_mbtowc>:
 8017e00:	b082      	sub	sp, #8
 8017e02:	b901      	cbnz	r1, 8017e06 <__ascii_mbtowc+0x6>
 8017e04:	a901      	add	r1, sp, #4
 8017e06:	b142      	cbz	r2, 8017e1a <__ascii_mbtowc+0x1a>
 8017e08:	b14b      	cbz	r3, 8017e1e <__ascii_mbtowc+0x1e>
 8017e0a:	7813      	ldrb	r3, [r2, #0]
 8017e0c:	600b      	str	r3, [r1, #0]
 8017e0e:	7812      	ldrb	r2, [r2, #0]
 8017e10:	1e10      	subs	r0, r2, #0
 8017e12:	bf18      	it	ne
 8017e14:	2001      	movne	r0, #1
 8017e16:	b002      	add	sp, #8
 8017e18:	4770      	bx	lr
 8017e1a:	4610      	mov	r0, r2
 8017e1c:	e7fb      	b.n	8017e16 <__ascii_mbtowc+0x16>
 8017e1e:	f06f 0001 	mvn.w	r0, #1
 8017e22:	e7f8      	b.n	8017e16 <__ascii_mbtowc+0x16>

08017e24 <_read_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	4d07      	ldr	r5, [pc, #28]	; (8017e44 <_read_r+0x20>)
 8017e28:	4604      	mov	r4, r0
 8017e2a:	4608      	mov	r0, r1
 8017e2c:	4611      	mov	r1, r2
 8017e2e:	2200      	movs	r2, #0
 8017e30:	602a      	str	r2, [r5, #0]
 8017e32:	461a      	mov	r2, r3
 8017e34:	f7ee fdca 	bl	80069cc <_read>
 8017e38:	1c43      	adds	r3, r0, #1
 8017e3a:	d102      	bne.n	8017e42 <_read_r+0x1e>
 8017e3c:	682b      	ldr	r3, [r5, #0]
 8017e3e:	b103      	cbz	r3, 8017e42 <_read_r+0x1e>
 8017e40:	6023      	str	r3, [r4, #0]
 8017e42:	bd38      	pop	{r3, r4, r5, pc}
 8017e44:	200024e4 	.word	0x200024e4

08017e48 <__ascii_wctomb>:
 8017e48:	b149      	cbz	r1, 8017e5e <__ascii_wctomb+0x16>
 8017e4a:	2aff      	cmp	r2, #255	; 0xff
 8017e4c:	bf85      	ittet	hi
 8017e4e:	238a      	movhi	r3, #138	; 0x8a
 8017e50:	6003      	strhi	r3, [r0, #0]
 8017e52:	700a      	strbls	r2, [r1, #0]
 8017e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8017e58:	bf98      	it	ls
 8017e5a:	2001      	movls	r0, #1
 8017e5c:	4770      	bx	lr
 8017e5e:	4608      	mov	r0, r1
 8017e60:	4770      	bx	lr
	...

08017e64 <_init>:
 8017e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e66:	bf00      	nop
 8017e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6a:	bc08      	pop	{r3}
 8017e6c:	469e      	mov	lr, r3
 8017e6e:	4770      	bx	lr

08017e70 <_fini>:
 8017e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e72:	bf00      	nop
 8017e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e76:	bc08      	pop	{r3}
 8017e78:	469e      	mov	lr, r3
 8017e7a:	4770      	bx	lr
