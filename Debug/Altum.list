
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  08018168  08018168  00028168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ddc  08018ddc  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08018ddc  08018ddc  00028ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018de4  08018de4  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018de4  08018de4  00028de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018de8  08018de8  00028de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08018dec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  20000354  08019140  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024e0  08019140  000324e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049bb8  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073ff  00000000  00000000  00079f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002588  00000000  00000000  00081340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002338  00000000  00000000  000838c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d22a  00000000  00000000  00085c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ea93  00000000  00000000  000c2e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d052  00000000  00000000  001018bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027e90f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b1b0  00000000  00000000  0027e960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018150 	.word	0x08018150

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08018150 	.word	0x08018150

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	6053      	str	r3, [r2, #4]
 8000f54:	6093      	str	r3, [r2, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	330c      	adds	r3, #12
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3314      	adds	r3, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	861a      	strh	r2, [r3, #48]	; 0x30
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 f954 	bl	8005270 <_ZN10Components9get_ADC_1Ev>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f006 f85d 	bl	800708c <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 f956 	bl	8005288 <_ZN10Components9get_ADC_2Ev>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	330c      	adds	r3, #12
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f006 f852 	bl	800708c <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 f959 	bl	80052a4 <_ZN10Components9get_ADC_5Ev>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3314      	adds	r3, #20
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f006 f847 	bl	800708c <HAL_ADC_Start_DMA>



}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4618      	mov	r0, r3
 8001014:	f003 f9cc 	bl	80043b0 <_ZN4SBUS8B_buttonEv>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <_ZN9Convertor9updateLEDEv+0x28>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001028:	da01      	bge.n	800102e <_ZN9Convertor9updateLEDEv+0x28>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <_ZN9Convertor9updateLEDEv+0x2a>
 800102e:	2300      	movs	r3, #0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d015      	beq.n	8001060 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800103a:	b29b      	uxth	r3, r3
 800103c:	33fa      	adds	r3, #250	; 0xfa
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fc1d 	bl	8002890 <_ZN11Initializer13get_LED_TimerEv>
 8001056:	4603      	mov	r3, r0
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4622      	mov	r2, r4
 800105c:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 800105e:	e026      	b.n	80010ae <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	4618      	mov	r0, r3
 8001066:	f003 f949 	bl	80042fc <_ZN4SBUS8A_buttonEv>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <_ZN9Convertor9updateLEDEv+0x78>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001076:	2b00      	cmp	r3, #0
 8001078:	dd01      	ble.n	800107e <_ZN9Convertor9updateLEDEv+0x78>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <_ZN9Convertor9updateLEDEv+0x7a>
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d014      	beq.n	80010ae <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800108a:	b29b      	uxth	r3, r3
 800108c:	3bfa      	subs	r3, #250	; 0xfa
 800108e:	b29b      	uxth	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fbf5 	bl	8002890 <_ZN11Initializer13get_LED_TimerEv>
 80010a6:	4603      	mov	r3, r0
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4622      	mov	r2, r4
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}

080010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 80010c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db76      	blt.n	80011bc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 80010d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfb8      	it	lt
 80010dc:	425b      	neglt	r3, r3
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e03c      	b.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d109      	bne.n	8001102 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 80010ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bfb8      	it	lt
 80010f6:	425b      	neglt	r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001100:	e02f      	b.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b08      	cmp	r3, #8
 8001106:	d109      	bne.n	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 8001108:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800110c:	2b00      	cmp	r3, #0
 800110e:	bfb8      	it	lt
 8001110:	425b      	neglt	r3, r3
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c
 800111a:	e022      	b.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d109      	bne.n	8001136 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 8001122:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bfb8      	it	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	641a      	str	r2, [r3, #64]	; 0x40
 8001134:	e015      	b.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d109      	bne.n	8001150 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 800113c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bfb8      	it	lt
 8001144:	425b      	neglt	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	649a      	str	r2, [r3, #72]	; 0x48
 800114e:	e008      	b.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001150:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001154:	2b00      	cmp	r3, #0
 8001156:	bfb8      	it	lt
 8001158:	425b      	neglt	r3, r3
 800115a:	b29a      	uxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 8001170:	e09e      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d104      	bne.n	8001182 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001180:	e096      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d104      	bne.n	8001192 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001190:	e08e      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d104      	bne.n	80011a2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011a0:	e086      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d104      	bne.n	80011b2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	649a      	str	r2, [r3, #72]	; 0x48
}
 80011b0:	e07e      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011ba:	e079      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 80011bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da75      	bge.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e023      	b.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d104      	bne.n	80011e4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
 80011e2:	e01b      	b.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d104      	bne.n	80011f4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011f2:	e013      	b.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d104      	bne.n	8001204 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
 8001202:	e00b      	b.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b10      	cmp	r3, #16
 8001208:	d104      	bne.n	8001214 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	649a      	str	r2, [r3, #72]	; 0x48
 8001212:	e003      	b.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 8001222:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfb8      	it	lt
 800122a:	425b      	neglt	r3, r3
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001234:	e03c      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d109      	bne.n	8001250 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 800123c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfb8      	it	lt
 8001244:	425b      	neglt	r3, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800124e:	e02f      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d109      	bne.n	800126a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 8001256:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800125a:	2b00      	cmp	r3, #0
 800125c:	bfb8      	it	lt
 800125e:	425b      	neglt	r3, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001268:	e022      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d109      	bne.n	8001284 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 8001270:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001274:	2b00      	cmp	r3, #0
 8001276:	bfb8      	it	lt
 8001278:	425b      	neglt	r3, r3
 800127a:	b29a      	uxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001282:	e015      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d109      	bne.n	800129e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 800128a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfb8      	it	lt
 8001292:	425b      	neglt	r3, r3
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800129c:	e008      	b.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800129e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bfb8      	it	lt
 80012a6:	425b      	neglt	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fedc 	bl	800408c <_ZN4SBUS9getRightYEv>
 80012d4:	eef0 7a40 	vmov.f32	s15, s0
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	dd10      	ble.n	8001312 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfb8      	it	lt
 80012fa:	425b      	neglt	r3, r3
 80012fc:	b29c      	uxth	r4, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 faf5 	bl	80028f2 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 8001308:	4603      	mov	r3, r0
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4622      	mov	r2, r4
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 8001310:	e008      	b.n	8001324 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 faeb 	bl	80028f2 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 800131c:	4603      	mov	r3, r0
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b087      	sub	sp, #28
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 ff0f 	bl	800415c <_ZN4SBUS9getRightXEv>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
 8001342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001346:	ee17 3a90 	vmov	r3, s15
 800134a:	b21a      	sxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <_ZN9Convertor14updateSelectorEv+0x8c>)
 8001352:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <_ZN9Convertor14updateSelectorEv+0x90>)
 8001356:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800135e:	2b00      	cmp	r3, #0
 8001360:	dd10      	ble.n	8001384 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fa9b 	bl	80028a8 <_ZN11Initializer18get_selector_TimerEv>
 8001372:	4602      	mov	r2, r0
 8001374:	2308      	movs	r3, #8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	230c      	movs	r3, #12
 800137a:	4621      	mov	r1, r4
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fe9a 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 8001382:	e014      	b.n	80013ae <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800138a:	2b00      	cmp	r3, #0
 800138c:	da0f      	bge.n	80013ae <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fa85 	bl	80028a8 <_ZN11Initializer18get_selector_TimerEv>
 800139e:	4602      	mov	r2, r0
 80013a0:	2308      	movs	r3, #8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	230c      	movs	r3, #12
 80013a6:	4621      	mov	r1, r4
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fe84 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	42dc0000 	.word	0x42dc0000
 80013bc:	44700000 	.word	0x44700000

080013c0 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fda3 	bl	8003f18 <_ZN4SBUS8getLeftYEv>
 80013d2:	eef0 7a40 	vmov.f32	s15, s0
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 3a90 	vmov	r3, s15
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd10      	ble.n	8001410 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fa61 	bl	80028c0 <_ZN11Initializer19get_pushMotor_TimerEv>
 80013fe:	4602      	mov	r2, r0
 8001400:	2308      	movs	r3, #8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2304      	movs	r3, #4
 8001406:	4621      	mov	r1, r4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe54 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 800140e:	e014      	b.n	800143a <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001416:	2b00      	cmp	r3, #0
 8001418:	da0f      	bge.n	800143a <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fa4b 	bl	80028c0 <_ZN11Initializer19get_pushMotor_TimerEv>
 800142a:	4602      	mov	r2, r0
 800142c:	2308      	movs	r3, #8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2304      	movs	r3, #4
 8001432:	4621      	mov	r1, r4
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fe3e 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}

08001442 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b085      	sub	sp, #20
 8001446:	af02      	add	r7, sp, #8
 8001448:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 feec 	bl	800422c <_ZN4SBUS11getJogWheelEv>
 8001454:	eef0 7a40 	vmov.f32	s15, s0
 8001458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145c:	ee17 3a90 	vmov	r3, s15
 8001460:	b21a      	sxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd10      	ble.n	8001492 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fa2c 	bl	80028d8 <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001480:	4602      	mov	r2, r0
 8001482:	2300      	movs	r3, #0
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2304      	movs	r3, #4
 8001488:	4621      	mov	r1, r4
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe13 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 8001490:	e014      	b.n	80014bc <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0f      	bge.n	80014bc <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fa16 	bl	80028d8 <_ZN11Initializer20get_fluidMotor_TimerEv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	2300      	movs	r3, #0
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2304      	movs	r3, #4
 80014b4:	4621      	mov	r1, r4
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fdfd 	bl	80010b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}

080014c4 <_ZN9Convertor15get_selectorPWMEv>:


int16_t Convertor::get_selectorPWM(void){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

	return this->_selectorPWM;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_ZN9Convertor12get_fluidPWMEv>:


int16_t Convertor::get_fluidPWM(void){
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]

	return this->_fluidPWM;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN9Convertor11get_pushPWMEv>:


int16_t Convertor::get_pushPWM(void){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]


	return this->_pushMotorPWM;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e

}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZN9Convertor19get_cleanerMotorPWMEv>:

int16_t Convertor::get_cleanerMotorPWM(void){
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]

	return this->_cleanerMotorPWM;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a


}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_ZN9Convertor10get_LEDPWMEv>:

int16_t Convertor::get_LEDPWM(void){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

	return _ledPWM;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_ZN9Convertor21get_selector_positionEv>:

int16_t Convertor::get_selector_position(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

	return ADC_1_Buffer[0] / 4.095;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fffd 	bl	8000554 <__aeabi_ui2d>
 800155a:	a309      	add	r3, pc, #36	; (adr r3, 8001580 <_ZN9Convertor21get_selector_positionEv+0x38>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f99c 	bl	800089c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb1c 	bl	8000ba8 <__aeabi_d2iz>
 8001570:	4603      	mov	r3, r0
 8001572:	b21b      	sxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	ae147ae1 	.word	0xae147ae1
 8001584:	40106147 	.word	0x40106147

08001588 <_ZN9Convertor17get_fluidPositionEv>:

int16_t Convertor::get_fluidPosition(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	return ADC_1_Buffer[3] / 4.095;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffdd 	bl	8000554 <__aeabi_ui2d>
 800159a:	a309      	add	r3, pc, #36	; (adr r3, 80015c0 <_ZN9Convertor17get_fluidPositionEv+0x38>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f97c 	bl	800089c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fafc 	bl	8000ba8 <__aeabi_d2iz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b21b      	sxth	r3, r3

}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	f3af 8000 	nop.w
 80015c0:	ae147ae1 	.word	0xae147ae1
 80015c4:	40106147 	.word	0x40106147

080015c8 <_ZN9Convertor16get_pushPositionEv>:

int16_t Convertor::get_pushPosition(void){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

	return ADC_1_Buffer[2] / 4.095;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffbd 	bl	8000554 <__aeabi_ui2d>
 80015da:	a309      	add	r3, pc, #36	; (adr r3, 8001600 <_ZN9Convertor16get_pushPositionEv+0x38>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f95c 	bl	800089c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fadc 	bl	8000ba8 <__aeabi_d2iz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b21b      	sxth	r3, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	f3af 8000 	nop.w
 8001600:	ae147ae1 	.word	0xae147ae1
 8001604:	40106147 	.word	0x40106147

08001608 <_ZN9Convertor14get_LEDCurrentEv>:


int16_t Convertor::get_LEDCurrent(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

	return ADC_2_Buffer[0] / 4.095;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff9d 	bl	8000554 <__aeabi_ui2d>
 800161a:	a309      	add	r3, pc, #36	; (adr r3, 8001640 <_ZN9Convertor14get_LEDCurrentEv+0x38>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f93c 	bl	800089c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fabc 	bl	8000ba8 <__aeabi_d2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	b21b      	sxth	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	ae147ae1 	.word	0xae147ae1
 8001644:	40106147 	.word	0x40106147

08001648 <_ZN9Convertor16get_fluidCurrentEv>:

int16_t Convertor::get_fluidCurrent(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]


	return ADC_2_Buffer[1] / 4.095;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff7d 	bl	8000554 <__aeabi_ui2d>
 800165a:	a309      	add	r3, pc, #36	; (adr r3, 8001680 <_ZN9Convertor16get_fluidCurrentEv+0x38>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f91c 	bl	800089c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa9c 	bl	8000ba8 <__aeabi_d2iz>
 8001670:	4603      	mov	r3, r0
 8001672:	b21b      	sxth	r3, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	ae147ae1 	.word	0xae147ae1
 8001684:	40106147 	.word	0x40106147

08001688 <_ZN9Convertor15get_pushCurrentEv>:

int16_t Convertor::get_pushCurrent(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	return ADC_5_Buffer[0] / 4.095;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff5d 	bl	8000554 <__aeabi_ui2d>
 800169a:	a309      	add	r3, pc, #36	; (adr r3, 80016c0 <_ZN9Convertor15get_pushCurrentEv+0x38>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f8fc 	bl	800089c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa7c 	bl	8000ba8 <__aeabi_d2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b21b      	sxth	r3, r3

}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f3af 8000 	nop.w
 80016c0:	ae147ae1 	.word	0xae147ae1
 80016c4:	40106147 	.word	0x40106147

080016c8 <_ZN9Convertor19get_selectorCurrentEv>:

int16_t Convertor::get_selectorCurrent(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

	return ADC_5_Buffer[1] / 4.095;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff3d 	bl	8000554 <__aeabi_ui2d>
 80016da:	a309      	add	r3, pc, #36	; (adr r3, 8001700 <_ZN9Convertor19get_selectorCurrentEv+0x38>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f8dc 	bl	800089c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa5c 	bl	8000ba8 <__aeabi_d2iz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b21b      	sxth	r3, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	f3af 8000 	nop.w
 8001700:	ae147ae1 	.word	0xae147ae1
 8001704:	40106147 	.word	0x40106147

08001708 <_ZN9Convertor7processEv>:


void Convertor::process(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]


	this->updateLED();
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc78 	bl	8001006 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe08 	bl	800132c <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fe4f 	bl	80013c0 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe8d 	bl	8001442 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fdc7 	bl	80012bc <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fc41 	bl	8000fb6 <_ZN9Convertor6getADCEv>

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x34>)
 800174c:	609a      	str	r2, [r3, #8]

	this->_huart1 = huart1;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
	this->initClock();
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f001 f832 	bl	80027c4 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 ff89 	bl	8002678 <_ZN11Initializer8initGPIOEv>
}
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000074c 	.word	0x2000074c

08001774 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]


	this->initDMA();
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 ff25 	bl	80025cc <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f822 	bl	80017cc <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f923 	bl	80019d4 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f99a 	bl	8001ac8 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fa53 	bl	8001c40 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fb32 	bl	8001e04 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fc45 	bl	8002030 <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fd0c 	bl	80021c4 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fd79 	bl	80022a4 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fdfe 	bl	80023b4 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fe8b 	bl	80024d4 <_ZN11Initializer8initI2C2Ev>


    MX_USB_Device_Init();
 80017be:	f013 f96b 	bl	8014a98 <MX_USB_Device_Init>


}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09e      	sub	sp, #120	; 0x78
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 80017da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017de:	6613      	str	r3, [r2, #96]	; 0x60
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	2234      	movs	r2, #52	; 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f013 fef8 	bl	8015618 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a68      	ldr	r2, [pc, #416]	; (80019cc <_ZN11Initializer9initTIM_1Ev+0x200>)
 800182c:	60da      	str	r2, [r3, #12]
	  htim1.Init.Prescaler = 8;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2208      	movs	r2, #8
 8001832:	611a      	str	r2, [r3, #16]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
	  htim1.Init.Period = 1080;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001840:	619a      	str	r2, [r3, #24]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
	  htim1.Init.RepetitionCounter = 0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	330c      	adds	r3, #12
 8001858:	4618      	mov	r0, r3
 800185a:	f00c fa83 	bl	800dd64 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f001 f85a 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001874:	4856      	ldr	r0, [pc, #344]	; (80019d0 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001876:	f014 fb41 	bl	8015efc <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	330c      	adds	r3, #12
 8001884:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f00c fd3e 	bl	800e30c <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f001 f841 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	330c      	adds	r3, #12
 80018aa:	4618      	mov	r0, r3
 80018ac:	f00c fab1 	bl	800de12 <HAL_TIM_PWM_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f001 f831 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80018c6:	4842      	ldr	r0, [pc, #264]	; (80019d0 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80018c8:	f014 fb18 	bl	8015efc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	330c      	adds	r3, #12
 80018dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00d fb7e 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 f815 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	330c      	adds	r3, #12
 800191e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001922:	2208      	movs	r2, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f00c fbdd 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fff4 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001942:	f014 fadb 	bl	8015efc <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	330c      	adds	r3, #12
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f00d fbc1 	bl	800f110 <HAL_TIMEx_ConfigBreakDeadTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 ffc2 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80019a6:	f014 faa9 	bl	8015efc <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	330c      	adds	r3, #12
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fb1c 	bl	8005fec <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	330c      	adds	r3, #12
 80019b8:	2108      	movs	r1, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00d fa50 	bl	800ee60 <HAL_TIMEx_PWMN_Start>


}
 80019c0:	bf00      	nop
 80019c2:	3778      	adds	r7, #120	; 0x78
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	08018168 	.word	0x08018168

080019d4 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.Prescaler = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.Period = 4.294967295E9;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f04f 32ff 	mov.w	r2, #4294967295
 8001a16:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00c f997 	bl	800dd64 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 ff6e 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001a4c:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001a4e:	f014 fa55 	bl	8015efc <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a5e:	f107 0218 	add.w	r2, r7, #24
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00c fc51 	bl	800e30c <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 ff54 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001a80:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001a82:	f014 fa3b 	bl	8015efc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a94:	f107 020c 	add.w	r2, r7, #12
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d faa2 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 ff39 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001ab6:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001ab8:	f014 fa20 	bl	8015efc <iprintf>

	  }


}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	08018180 	.word	0x08018180

08001ac8 <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8001ad0:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	4a57      	ldr	r2, [pc, #348]	; (8001c34 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	6593      	str	r3, [r2, #88]	; 0x58
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4b      	ldr	r2, [pc, #300]	; (8001c38 <_ZN11Initializer9initTIM_3Ev+0x170>)
 8001b0c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.Prescaler = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.Period = 1000;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00c f966 	bl	800de12 <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fee6 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001b5c:	4837      	ldr	r0, [pc, #220]	; (8001c3c <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001b5e:	f014 f9cd 	bl	8015efc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b70:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00d fa34 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fecb 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001b92:	482a      	ldr	r0, [pc, #168]	; (8001c3c <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001b94:	f014 f9b2 	bl	8015efc <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b98:	2360      	movs	r3, #96	; 0x60
 8001b9a:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001bae:	f107 0110 	add.w	r1, r7, #16
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00c fa95 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 feac 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001bd0:	481a      	ldr	r0, [pc, #104]	; (8001c3c <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001bd2:	f014 f993 	bl	8015efc <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001bdc:	f107 0110 	add.w	r1, r7, #16
 8001be0:	2204      	movs	r2, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00c fa7e 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fe95 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001bfe:	480f      	ldr	r0, [pc, #60]	; (8001c3c <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001c00:	f014 f97c 	bl	8015efc <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 f9ee 	bl	8005fec <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00c f951 	bl	800dec0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c24:	2104      	movs	r1, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00c f94a 	bl	800dec0 <HAL_TIM_PWM_Start>



}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	08018198 	.word	0x08018198

08001c40 <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b092      	sub	sp, #72	; 0x48
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	; (8001df8 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.Prescaler = 2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.Period = 1000;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca6:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	669a      	str	r2, [r3, #104]	; 0x68
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	671a      	str	r2, [r3, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3358      	adds	r3, #88	; 0x58
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00c f853 	bl	800dd64 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fe2a 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001cd4:	484a      	ldr	r0, [pc, #296]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001cd6:	f014 f911 	bl	8015efc <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3358      	adds	r3, #88	; 0x58
 8001ce4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00c fb0e 	bl	800e30c <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fe11 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d06:	483e      	ldr	r0, [pc, #248]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d08:	f014 f8f8 	bl	8015efc <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3358      	adds	r3, #88	; 0x58
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00c f87e 	bl	800de12 <HAL_TIM_PWM_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fdfe 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d2c:	4834      	ldr	r0, [pc, #208]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d2e:	f014 f8e5 	bl	8015efc <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3358      	adds	r3, #88	; 0x58
 8001d3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00d f94d 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fde4 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d60:	4827      	ldr	r0, [pc, #156]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d62:	f014 f8cb 	bl	8015efc <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
 8001d68:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3358      	adds	r3, #88	; 0x58
 8001d7a:	f107 0110 	add.w	r1, r7, #16
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00c f9af 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fdc6 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d9e:	f014 f8ad 	bl	8015efc <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3358      	adds	r3, #88	; 0x58
 8001da6:	f107 0110 	add.w	r1, r7, #16
 8001daa:	2208      	movs	r2, #8
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00c f999 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fdb0 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001dca:	f014 f897 	bl	8015efc <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3358      	adds	r3, #88	; 0x58
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f90a 	bl	8005fec <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3358      	adds	r3, #88	; 0x58
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00c f86e 	bl	800dec0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3358      	adds	r3, #88	; 0x58
 8001de8:	2104      	movs	r1, #4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00c f868 	bl	800dec0 <HAL_TIM_PWM_Start>


}
 8001df0:	bf00      	nop
 8001df2:	3748      	adds	r7, #72	; 0x48
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	080181b0 	.word	0x080181b0

08001e04 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09e      	sub	sp, #120	; 0x78
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001e0c:	4b86      	ldr	r3, [pc, #536]	; (8002028 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	4a85      	ldr	r2, [pc, #532]	; (8002028 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e16:	6613      	str	r3, [r2, #96]	; 0x60
 8001e18:	4b83      	ldr	r3, [pc, #524]	; (8002028 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	2234      	movs	r2, #52	; 0x34
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f013 fbdc 	bl	8015618 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001e64:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.Prescaler = 2;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.Period = 1000;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e7e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.RepetitionCounter = 0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	33f0      	adds	r3, #240	; 0xf0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00b ff60 	bl	800dd64 <HAL_TIM_Base_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fd37 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	33f0      	adds	r3, #240	; 0xf0
 8001ec4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00c fa1e 	bl	800e30c <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fd21 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	33f0      	adds	r3, #240	; 0xf0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00b ff91 	bl	800de12 <HAL_TIM_PWM_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fd11 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	33f0      	adds	r3, #240	; 0xf0
 8001f16:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00d f861 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fcf8 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	33f0      	adds	r3, #240	; 0xf0
 8001f58:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00c f8c0 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fcd7 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	33f0      	adds	r3, #240	; 0xf0
 8001f7e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001f82:	220c      	movs	r2, #12
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00c f8ad 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fcc4 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb8:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	33f0      	adds	r3, #240	; 0xf0
 8001fdc:	f107 020c 	add.w	r2, r7, #12
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00d f894 	bl	800f110 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fc95 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	33f0      	adds	r3, #240	; 0xf0
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fff2 	bl	8005fec <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	33f0      	adds	r3, #240	; 0xf0
 800200c:	2108      	movs	r1, #8
 800200e:	4618      	mov	r0, r3
 8002010:	f00b ff56 	bl	800dec0 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	33f0      	adds	r3, #240	; 0xf0
 8002018:	210c      	movs	r1, #12
 800201a:	4618      	mov	r0, r3
 800201c:	f00c ff20 	bl	800ee60 <HAL_TIMEx_PWMN_Start>




}
 8002020:	bf00      	nop
 8002022:	3778      	adds	r7, #120	; 0x78
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40013400 	.word	0x40013400

08002030 <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8002030:	b580      	push	{r7, lr}
 8002032:	b098      	sub	sp, #96	; 0x60
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002038:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <_ZN11Initializer10initTIM_16Ev+0x188>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203c:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <_ZN11Initializer10initTIM_16Ev+0x188>)
 800203e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002042:	6613      	str	r3, [r2, #96]	; 0x60
 8002044:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002050:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	615a      	str	r2, [r3, #20]
 8002062:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2234      	movs	r2, #52	; 0x34
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f013 fad3 	bl	8015618 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8002076:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.Prescaler = 128;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.Period = 1000;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002090:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.RepetitionCounter = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	33a4      	adds	r3, #164	; 0xa4
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00b fe57 	bl	800dd64 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fc2e 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020cc:	483c      	ldr	r0, [pc, #240]	; (80021c0 <_ZN11Initializer10initTIM_16Ev+0x190>)
 80020ce:	f013 ff15 	bl	8015efc <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	33a4      	adds	r3, #164	; 0xa4
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00b fe9b 	bl	800de12 <HAL_TIM_PWM_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fc1b 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020f2:	4833      	ldr	r0, [pc, #204]	; (80021c0 <_ZN11Initializer10initTIM_16Ev+0x190>)
 80020f4:	f013 ff02 	bl	8015efc <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f8:	2360      	movs	r3, #96	; 0x60
 80020fa:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	33a4      	adds	r3, #164	; 0xa4
 8002118:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800211c:	2200      	movs	r2, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f00b ffe0 	bl	800e0e4 <HAL_TIM_PWM_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fbf7 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800213a:	4821      	ldr	r0, [pc, #132]	; (80021c0 <_ZN11Initializer10initTIM_16Ev+0x190>)
 800213c:	f013 fede 	bl	8015efc <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	33a4      	adds	r3, #164	; 0xa4
 8002166:	f107 0210 	add.w	r2, r7, #16
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f00c ffcf 	bl	800f110 <HAL_TIMEx_ConfigBreakDeadTime>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fbd0 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <_ZN11Initializer10initTIM_16Ev+0x190>)
 800218a:	f013 feb7 	bl	8015efc <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	33a4      	adds	r3, #164	; 0xa4
 8002192:	4618      	mov	r0, r3
 8002194:	f003 ff2a 	bl	8005fec <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	33a4      	adds	r3, #164	; 0xa4
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00b fe8e 	bl	800dec0 <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021aa:	2200      	movs	r2, #0
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34





}
 80021ae:	bf00      	nop
 80021b0:	3760      	adds	r7, #96	; 0x60
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	080181c8 	.word	0x080181c8

080021c4 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09c      	sub	sp, #112	; 0x70
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <_ZN11Initializer10initTIM_20Ev+0xd8>)
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 80021f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4618      	mov	r0, r3
 800220a:	f00b fdab 	bl	800dd64 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fb82 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002224:	481e      	ldr	r0, [pc, #120]	; (80022a0 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002226:	f013 fe69 	bl	8015efc <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002230:	f107 0214 	add.w	r2, r7, #20
 8002234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f00c f866 	bl	800e30c <HAL_TIM_ConfigClockSource>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fb69 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002258:	f013 fe50 	bl	8015efc <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002268:	f107 0208 	add.w	r2, r7, #8
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f00c feb6 	bl	800efe4 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fb4d 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002290:	f013 fe34 	bl	8015efc <iprintf>

	  }



}
 8002294:	bf00      	nop
 8002296:	3770      	adds	r7, #112	; 0x70
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40015000 	.word	0x40015000
 80022a0:	080181c8 	.word	0x080181c8

080022a4 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <_ZN11Initializer11initUSART_1Ev+0x108>)
 80022b2:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80022bc:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f00c ffd7 	bl	800f2be <HAL_UART_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fb01 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002326:	4822      	ldr	r0, [pc, #136]	; (80023b0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002328:	f013 fde8 	bl	8015efc <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f00e fb72 	bl	8010a1c <HAL_UARTEx_SetTxFifoThreshold>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 faed 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002350:	f013 fdd4 	bl	8015efc <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00e fb9c 	bl	8010a98 <HAL_UARTEx_SetRxFifoThreshold>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fad9 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002376:	480e      	ldr	r0, [pc, #56]	; (80023b0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002378:	f013 fdc0 	bl	8015efc <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f00e fb12 	bl	80109aa <HAL_UARTEx_DisableFifoMode>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fac6 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800239e:	f013 fdad 	bl	8015efc <iprintf>

	  }



}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40013800 	.word	0x40013800
 80023b0:	080181e0 	.word	0x080181e0

080023b4 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <_ZN11Initializer11initUSART_2Ev+0x114>)
 80023c2:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a40      	ldr	r2, [pc, #256]	; (80024cc <_ZN11Initializer11initUSART_2Ev+0x118>)
 80023ca:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d4:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e6:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	220c      	movs	r2, #12
 80023ee:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f00c ff49 	bl	800f2be <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fa73 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002442:	4823      	ldr	r0, [pc, #140]	; (80024d0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002444:	f013 fd5a 	bl	8015efc <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f00e fae4 	bl	8010a1c <HAL_UARTEx_SetTxFifoThreshold>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa5f 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800246a:	4819      	ldr	r0, [pc, #100]	; (80024d0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800246c:	f013 fd46 	bl	8015efc <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f00e fb0e 	bl	8010a98 <HAL_UARTEx_SetRxFifoThreshold>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa4b 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002492:	480f      	ldr	r0, [pc, #60]	; (80024d0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002494:	f013 fd32 	bl	8015efc <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	f00e fa84 	bl	80109aa <HAL_UARTEx_DisableFifoMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa38 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80024ba:	f013 fd1f 	bl	8015efc <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40004400 	.word	0x40004400
 80024cc:	000186a0 	.word	0x000186a0
 80024d0:	080181f4 	.word	0x080181f4

080024d4 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

	  hi2c_ptr->Instance = I2C2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a36      	ldr	r2, [pc, #216]	; (80025bc <_ZN11Initializer8initI2C2Ev+0xe8>)
 80024e2:	601a      	str	r2, [r3, #0]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <_ZN11Initializer8initI2C2Ev+0xec>)
 80024ea:	605a      	str	r2, [r3, #4]
	  hi2c_ptr->Init.OwnAddress1 = 0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2201      	movs	r2, #1
 80024fa:	60da      	str	r2, [r3, #12]
	  hi2c_ptr->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	615a      	str	r2, [r3, #20]
	  hi2c_ptr->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f007 f8ab 	bl	8009684 <HAL_I2C_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <_ZN11Initializer8initI2C2Ev+0x76>
	  {
	    Error_Handler();
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9f2 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002544:	481f      	ldr	r0, [pc, #124]	; (80025c4 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002546:	f013 fcd9 	bl	8015efc <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f008 fbef 	bl	800ad34 <HAL_I2CEx_ConfigAnalogFilter>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <_ZN11Initializer8initI2C2Ev+0x9e>
	  {
	    this->Error_Handler();
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f9de 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 800256c:	4815      	ldr	r0, [pc, #84]	; (80025c4 <_ZN11Initializer8initI2C2Ev+0xf0>)
 800256e:	f013 fcc5 	bl	8015efc <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f008 fc26 	bl	800adca <HAL_I2CEx_ConfigDigitalFilter>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <_ZN11Initializer8initI2C2Ev+0xc6>
	  {
	    this->Error_Handler();
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9ca 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002596:	f013 fcb1 	bl	8015efc <iprintf>

	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <_ZN11Initializer8initI2C2Ev+0xf4>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <_ZN11Initializer8initI2C2Ev+0xf4>)
 80025a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_ZN11Initializer8initI2C2Ev+0xf4>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]


}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40005800 	.word	0x40005800
 80025c0:	20a0c4df 	.word	0x20a0c4df
 80025c4:	08018208 	.word	0x08018208
 80025c8:	40021000 	.word	0x40021000

080025cc <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6493      	str	r3, [r2, #72]	; 0x48
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6493      	str	r3, [r2, #72]	; 0x48
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	6493      	str	r3, [r2, #72]	; 0x48
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <_ZN11Initializer7initDMAEv+0xa8>)
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	200b      	movs	r0, #11
 8002622:	f006 f93c 	bl	800889e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002626:	200b      	movs	r0, #11
 8002628:	f006 f953 	bl	80088d2 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	200c      	movs	r0, #12
 8002632:	f006 f934 	bl	800889e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002636:	200c      	movs	r0, #12
 8002638:	f006 f94b 	bl	80088d2 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	200d      	movs	r0, #13
 8002642:	f006 f92c 	bl	800889e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002646:	200d      	movs	r0, #13
 8002648:	f006 f943 	bl	80088d2 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	200e      	movs	r0, #14
 8002652:	f006 f924 	bl	800889e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002656:	200e      	movs	r0, #14
 8002658:	f006 f93b 	bl	80088d2 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2038      	movs	r0, #56	; 0x38
 8002662:	f006 f91c 	bl	800889e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002666:	2038      	movs	r0, #56	; 0x38
 8002668:	f006 f933 	bl	80088d2 <HAL_NVIC_EnableIRQ>

}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000

08002678 <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269c:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	4a41      	ldr	r2, [pc, #260]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026ae:	f043 0320 	orr.w	r3, r3, #32
 80026b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c0:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a35      	ldr	r2, [pc, #212]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <_ZN11Initializer8initGPIOEv+0x13c>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800270e:	482a      	ldr	r0, [pc, #168]	; (80027b8 <_ZN11Initializer8initGPIOEv+0x140>)
 8002710:	f006 ff86 	bl	8009620 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	2102      	movs	r1, #2
 8002718:	4828      	ldr	r0, [pc, #160]	; (80027bc <_ZN11Initializer8initGPIOEv+0x144>)
 800271a:	f006 ff81 	bl	8009620 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002724:	4826      	ldr	r0, [pc, #152]	; (80027c0 <_ZN11Initializer8initGPIOEv+0x148>)
 8002726:	f006 ff7b 	bl	8009620 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	2110      	movs	r1, #16
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f006 ff75 	bl	8009620 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 8002736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800273a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	481a      	ldr	r0, [pc, #104]	; (80027b8 <_ZN11Initializer8initGPIOEv+0x140>)
 8002750:	f006 fde4 	bl	800931c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 8002754:	2302      	movs	r3, #2
 8002756:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4814      	ldr	r0, [pc, #80]	; (80027bc <_ZN11Initializer8initGPIOEv+0x144>)
 800276c:	f006 fdd6 	bl	800931c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <_ZN11Initializer8initGPIOEv+0x148>)
 800278a:	f006 fdc7 	bl	800931c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800278e:	2310      	movs	r3, #16
 8002790:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f006 fdb8 	bl	800931c <HAL_GPIO_Init>

}
 80027ac:	bf00      	nop
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48001400 	.word	0x48001400
 80027c0:	48001800 	.word	0x48001800

080027c4 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b096      	sub	sp, #88	; 0x58
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	2238      	movs	r2, #56	; 0x38
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f012 ff1f 	bl	8015618 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ee:	f00a fa93 	bl	800cd18 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80027f2:	2322      	movs	r3, #34	; 0x22
 80027f4:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002800:	2301      	movs	r3, #1
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002804:	2302      	movs	r3, #2
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002808:	2302      	movs	r3, #2
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800280c:	2301      	movs	r3, #1
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002810:	2310      	movs	r3, #16
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002814:	2302      	movs	r3, #2
 8002816:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002818:	2302      	movs	r3, #2
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800281c:	2302      	movs	r3, #2
 800281e:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	4618      	mov	r0, r3
 8002826:	f00a fb1b 	bl	800ce60 <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f874 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002840:	4812      	ldr	r0, [pc, #72]	; (800288c <_ZN11Initializer9initClockEv+0xc8>)
 8002842:	f013 fb5b 	bl	8015efc <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002846:	230f      	movs	r3, #15
 8002848:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284a:	2303      	movs	r3, #3
 800284c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	2103      	movs	r1, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f00a fe15 	bl	800d490 <HAL_RCC_ClockConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f856 	bl	8002928 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 800287c:	4803      	ldr	r0, [pc, #12]	; (800288c <_ZN11Initializer9initClockEv+0xc8>)
 800287e:	f013 fb3d 	bl	8015efc <iprintf>

	  }


}
 8002882:	bf00      	nop
 8002884:	3758      	adds	r7, #88	; 0x58
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	0801821c 	.word	0x0801821c

08002890 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

	return &htim16;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	33a4      	adds	r3, #164	; 0xa4

}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

	return &htim8;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	33f0      	adds	r3, #240	; 0xf0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

	return &htim4;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3358      	adds	r3, #88	; 0x58
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

	return &htim3;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 739e 	add.w	r3, r3, #316	; 0x13c

}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

	return &htim1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	330c      	adds	r3, #12

}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <_ZN11Initializer7get_i2cEv>:

I2C_HandleTypeDef* Initializer::get_i2c(void){
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

	return &hi2c2;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <_ZN11Initializer7get_i2cEv+0x18>)
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000074c 	.word	0x2000074c

08002928 <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b1d      	cmp	r3, #29
 8002938:	d80e      	bhi.n	8002958 <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 800293a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293e:	4808      	ldr	r0, [pc, #32]	; (8002960 <_ZN11Initializer13Error_HandlerEv+0x38>)
 8002940:	f006 fe86 	bl	8009650 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8002944:	2032      	movs	r0, #50	; 0x32
 8002946:	f003 ff75 	bl	8006834 <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 800294a:	4806      	ldr	r0, [pc, #24]	; (8002964 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 800294c:	f013 fb5c 	bl	8016008 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	3301      	adds	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e7ed      	b.n	8002934 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	48000800 	.word	0x48000800
 8002964:	0801823c 	.word	0x0801823c

08002968 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4053      	eors	r3, r2
 800297e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	b25a      	sxtb	r2, r3
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4053      	eors	r3, r2
 800298c:	b25b      	sxtb	r3, r3
 800298e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b29b      	uxth	r3, r3
 8002998:	b21a      	sxth	r2, r3
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4053      	eors	r3, r2
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4053      	eors	r3, r2
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4053      	eors	r3, r2
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	801a      	strh	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029da:	801a      	strh	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80029f4:	f107 030e 	add.w	r3, r7, #14
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ffe7 	bl	80029cc <crc_init>
	while (length--) {
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	807a      	strh	r2, [r7, #2]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f107 020e 	add.w	r2, r7, #14
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ffa1 	bl	8002968 <crc_accumulate>
	while (length--) {
 8002a26:	e7ea      	b.n	80029fe <crc_calculate+0x16>
        }
        return crcTmp;
 8002a28:	89fb      	ldrh	r3, [r7, #14]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	80fa      	strh	r2, [r7, #6]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	617a      	str	r2, [r7, #20]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff80 	bl	8002968 <crc_accumulate>
	while (length--) {
 8002a68:	e7ec      	b.n	8002a44 <crc_accumulate_buffer+0x12>
        }
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <mavlink_sha256_init+0x50>)
 8002a8c:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <mavlink_sha256_init+0x54>)
 8002a92:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <mavlink_sha256_init+0x58>)
 8002a98:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <mavlink_sha256_init+0x5c>)
 8002a9e:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <mavlink_sha256_init+0x60>)
 8002aa4:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <mavlink_sha256_init+0x64>)
 8002aaa:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <mavlink_sha256_init+0x68>)
 8002ab0:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <mavlink_sha256_init+0x6c>)
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	6a09e667 	.word	0x6a09e667
 8002ac8:	bb67ae85 	.word	0xbb67ae85
 8002acc:	3c6ef372 	.word	0x3c6ef372
 8002ad0:	a54ff53a 	.word	0xa54ff53a
 8002ad4:	510e527f 	.word	0x510e527f
 8002ad8:	9b05688c 	.word	0x9b05688c
 8002adc:	1f83d9ab 	.word	0x1f83d9ab
 8002ae0:	5be0cd19 	.word	0x5be0cd19

08002ae4 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b0cf      	sub	sp, #316	; 0x13c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002af2:	6018      	str	r0, [r3, #0]
 8002af4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002af8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002afc:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8002afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8002b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8002b1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8002b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8002b3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8002b4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002b5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002b6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	dc17      	bgt.n	8002bbc <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002b96:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ba8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bba:	e7e3      	b.n	8002b84 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8002bc8:	dc6a      	bgt.n	8002ca0 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bce:	1e9a      	subs	r2, r3, #2
 8002bd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be4:	1e99      	subs	r1, r3, #2
 8002be6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bf2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002bf6:	405a      	eors	r2, r3
 8002bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfc:	1e99      	subs	r1, r3, #2
 8002bfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c0a:	0a9b      	lsrs	r3, r3, #10
 8002c0c:	405a      	eors	r2, r3
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c12:	1fd9      	subs	r1, r3, #7
 8002c14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c20:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c26:	f1a3 010f 	sub.w	r1, r3, #15
 8002c2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c36:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3e:	f1a3 000f 	sub.w	r0, r3, #15
 8002c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c4e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002c52:	4059      	eors	r1, r3
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c58:	f1a3 000f 	sub.w	r0, r3, #15
 8002c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002c6c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c72:	f1a3 0110 	sub.w	r1, r3, #16
 8002c76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c82:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002c84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c9e:	e790      	b.n	8002bc2 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002caa:	2b3f      	cmp	r3, #63	; 0x3f
 8002cac:	dc79      	bgt.n	8002da2 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002cae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cb2:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002cb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002cbe:	405a      	eors	r2, r3
 8002cc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cc4:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002cc8:	405a      	eors	r2, r3
 8002cca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002cce:	441a      	add	r2, r3
 8002cd0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002cd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cd8:	4019      	ands	r1, r3
 8002cda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cde:	43d8      	mvns	r0, r3
 8002ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ce4:	4003      	ands	r3, r0
 8002ce6:	404b      	eors	r3, r1
 8002ce8:	441a      	add	r2, r3
 8002cea:	496d      	ldr	r1, [pc, #436]	; (8002ea0 <mavlink_sha256_calc+0x3bc>)
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cfe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d06:	4413      	add	r3, r2
 8002d08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d10:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002d14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d18:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002d1c:	405a      	eors	r2, r3
 8002d1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d22:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002d26:	405a      	eors	r2, r3
 8002d28:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d30:	4059      	eors	r1, r3
 8002d32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d36:	4019      	ands	r1, r3
 8002d38:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d40:	4003      	ands	r3, r0
 8002d42:	404b      	eors	r3, r1
 8002d44:	4413      	add	r3, r2
 8002d46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002d52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002d5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002d62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002d66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002d78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002d88:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d90:	4413      	add	r3, r2
 8002d92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002da0:	e781      	b.n	8002ca6 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002da2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002da6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002db2:	441a      	add	r2, r3
 8002db4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002dc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002dd0:	441a      	add	r2, r3
 8002dd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002dde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002de2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002dee:	441a      	add	r2, r3
 8002df0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002df4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e0c:	441a      	add	r2, r3
 8002e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002e1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e2a:	441a      	add	r2, r3
 8002e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e48:	441a      	add	r2, r3
 8002e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e4e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002e56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e5a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e66:	441a      	add	r2, r3
 8002e68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002e74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e84:	441a      	add	r2, r3
 8002e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e92:	bf00      	nop
 8002e94:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	080188c4 	.word	0x080188c4

08002ea4 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b09c      	sub	sp, #112	; 0x70
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	441a      	add	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d904      	bls.n	8002edc <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ede:	08db      	lsrs	r3, r3, #3
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d058      	beq.n	8002f9e <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002ef2:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d201      	bcs.n	8002f00 <mavlink_sha256_update+0x5c>
            l = len;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f08:	4413      	add	r3, r2
 8002f0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f012 fb74 	bl	80155fc <memcpy>
	offset += l;
 8002f14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f18:	4413      	add	r3, r2
 8002f1a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f20:	4413      	add	r3, r2
 8002f22:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d1d9      	bne.n	8002ee6 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3328      	adds	r3, #40	; 0x28
 8002f36:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002f38:	2300      	movs	r3, #0
 8002f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	dc24      	bgt.n	8002f8c <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f48:	4413      	add	r3, r2
 8002f4a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002f4c:	f107 0210 	add.w	r2, r7, #16
 8002f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5a:	3303      	adds	r3, #3
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	3301      	adds	r3, #1
 8002f6a:	7812      	ldrb	r2, [r2, #0]
 8002f6c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f74:	3302      	adds	r3, #2
 8002f76:	7812      	ldrb	r2, [r2, #0]
 8002f78:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f86:	3301      	adds	r3, #1
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8a:	e7d7      	b.n	8002f3c <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff fda6 	bl	8002ae4 <mavlink_sha256_calc>
	    offset = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002f9c:	e7a3      	b.n	8002ee6 <mavlink_sha256_update+0x42>
	}
    }
}
 8002f9e:	bf00      	nop
 8002fa0:	3770      	adds	r7, #112	; 0x70
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b098      	sub	sp, #96	; 0x60
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fba:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbe:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3308      	adds	r3, #8
 8002fce:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	3301      	adds	r3, #1
 8002fda:	2247      	movs	r2, #71	; 0x47
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f012 fb1a 	bl	8015618 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fea:	3307      	adds	r3, #7
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	3360      	adds	r3, #96	; 0x60
 8002ff0:	443b      	add	r3, r7
 8002ff2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0a1a      	lsrs	r2, r3, #8
 8002ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffe:	3306      	adds	r3, #6
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	3360      	adds	r3, #96	; 0x60
 8003004:	443b      	add	r3, r7
 8003006:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0c1a      	lsrs	r2, r3, #16
 8003010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003012:	3305      	adds	r3, #5
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	3360      	adds	r3, #96	; 0x60
 8003018:	443b      	add	r3, r7
 800301a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e1a      	lsrs	r2, r3, #24
 8003024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003026:	3304      	adds	r3, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	3360      	adds	r3, #96	; 0x60
 800302c:	443b      	add	r3, r7
 800302e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003038:	3303      	adds	r3, #3
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	3360      	adds	r3, #96	; 0x60
 800303e:	443b      	add	r3, r7
 8003040:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0a1a      	lsrs	r2, r3, #8
 800304a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304c:	3302      	adds	r3, #2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	3360      	adds	r3, #96	; 0x60
 8003052:	443b      	add	r3, r7
 8003054:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c1a      	lsrs	r2, r3, #16
 800305e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003060:	3301      	adds	r3, #1
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	3360      	adds	r3, #96	; 0x60
 8003066:	443b      	add	r3, r7
 8003068:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0e1b      	lsrs	r3, r3, #24
 8003072:	b2d9      	uxtb	r1, r3
 8003074:	f107 020c 	add.w	r2, r7, #12
 8003078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307a:	4413      	add	r3, r2
 800307c:	460a      	mov	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8003080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff09 	bl	8002ea4 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8003092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003094:	78da      	ldrb	r2, [r3, #3]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030a0:	7892      	ldrb	r2, [r2, #2]
 80030a2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3302      	adds	r3, #2
 80030a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030aa:	7852      	ldrb	r2, [r2, #1]
 80030ac:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	3303      	adds	r3, #3
 80030b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3304      	adds	r3, #4
 80030bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030be:	79d2      	ldrb	r2, [r2, #7]
 80030c0:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3305      	adds	r3, #5
 80030c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030c8:	7992      	ldrb	r2, [r2, #6]
 80030ca:	701a      	strb	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3760      	adds	r7, #96	; 0x60
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <mavlink_get_channel_status+0x24>)
 80030ea:	4413      	add	r3, r2
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	20000370 	.word	0x20000370

080030fc <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b0a0      	sub	sp, #128	; 0x80
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <mavlink_sign_packet+0x20>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <mavlink_sign_packet+0x24>
	    return 0;
 800311c:	2300      	movs	r3, #0
 800311e:	e04f      	b.n	80031c0 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	785a      	ldrb	r2, [r3, #1]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800312e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	f107 0110 	add.w	r1, r7, #16
 800313a:	2206      	movs	r2, #6
 800313c:	4618      	mov	r0, r3
 800313e:	f012 fa5d 	bl	80155fc <memcpy>
	signing->timestamp++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003148:	1c54      	adds	r4, r2, #1
 800314a:	f143 0500 	adc.w	r5, r3, #0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8003154:	f107 0318 	add.w	r3, r7, #24
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fc8b 	bl	8002a74 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f103 0110 	add.w	r1, r3, #16
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	2220      	movs	r2, #32
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fe9a 	bl	8002ea4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	f107 0318 	add.w	r3, r7, #24
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fe93 	bl	8002ea4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800317e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8003182:	f107 0318 	add.w	r3, r7, #24
 8003186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fe8a 	bl	8002ea4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	2202      	movs	r2, #2
 8003196:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe82 	bl	8002ea4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	2207      	movs	r2, #7
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fe7b 	bl	8002ea4 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1dda      	adds	r2, r3, #7
 80031b2:	f107 0318 	add.w	r3, r7, #24
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fef4 	bl	8002fa6 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80031be:	230d      	movs	r3, #13
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3780      	adds	r7, #128	; 0x80
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}

080031c8 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d90a      	bls.n	80031f0 <_mav_trim_payload+0x28>
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	3b01      	subs	r3, #1
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <_mav_trim_payload+0x28>
		length--;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80031ee:	e7f1      	b.n	80031d4 <_mav_trim_payload+0xc>
	}
	return length;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80031fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003200:	b08f      	sub	sp, #60	; 0x3c
 8003202:	af04      	add	r7, sp, #16
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	72fb      	strb	r3, [r7, #11]
 800320c:	4613      	mov	r3, r2
 800320e:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7b1b      	ldrb	r3, [r3, #12]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003228:	f083 0301 	eor.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <mavlink_finalize_message_buffer+0x4e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <mavlink_finalize_message_buffer+0x4e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <mavlink_finalize_message_buffer+0x4e>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <mavlink_finalize_message_buffer+0x50>
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8003252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <mavlink_finalize_message_buffer+0x60>
 800325a:	230d      	movs	r3, #13
 800325c:	e000      	b.n	8003260 <mavlink_finalize_message_buffer+0x62>
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8003264:	230a      	movs	r3, #10
 8003266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800326a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22fe      	movs	r2, #254	; 0xfe
 8003276:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003278:	2306      	movs	r3, #6
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800327e:	e002      	b.n	8003286 <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	22fd      	movs	r2, #253	; 0xfd
 8003284:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <mavlink_finalize_message_buffer+0x96>
 800328e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003292:	e009      	b.n	80032a8 <mavlink_finalize_message_buffer+0xaa>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	330c      	adds	r3, #12
 8003298:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff92 	bl	80031c8 <_mav_trim_payload>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	7afa      	ldrb	r2, [r7, #11]
 80032b0:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	7aba      	ldrb	r2, [r7, #10]
 80032b6:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80032be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	791b      	ldrb	r3, [r3, #4]
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	799a      	ldrb	r2, [r3, #6]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	789b      	ldrb	r3, [r3, #2]
 80032f2:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	78db      	ldrb	r3, [r3, #3]
 80032f8:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80032fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	799b      	ldrb	r3, [r3, #6]
 8003306:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	79db      	ldrb	r3, [r3, #7]
 800330c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	7a1b      	ldrb	r3, [r3, #8]
 8003312:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	7a5a      	ldrb	r2, [r3, #9]
 8003318:	7a99      	ldrb	r1, [r3, #10]
 800331a:	0209      	lsls	r1, r1, #8
 800331c:	430a      	orrs	r2, r1
 800331e:	7adb      	ldrb	r3, [r3, #11]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	4313      	orrs	r3, r2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	777b      	strb	r3, [r7, #29]
 8003328:	e030      	b.n	800338c <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	795b      	ldrb	r3, [r3, #5]
 8003334:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	799b      	ldrb	r3, [r3, #6]
 800333a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	79db      	ldrb	r3, [r3, #7]
 8003340:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	7a1b      	ldrb	r3, [r3, #8]
 8003346:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	7a5a      	ldrb	r2, [r3, #9]
 800334c:	7a99      	ldrb	r1, [r3, #10]
 800334e:	0209      	lsls	r1, r1, #8
 8003350:	430a      	orrs	r2, r1
 8003352:	7adb      	ldrb	r3, [r3, #11]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	4313      	orrs	r3, r2
 8003358:	b2db      	uxtb	r3, r3
 800335a:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	7a5a      	ldrb	r2, [r3, #9]
 8003360:	7a99      	ldrb	r1, [r3, #10]
 8003362:	0209      	lsls	r1, r1, #8
 8003364:	430a      	orrs	r2, r1
 8003366:	7adb      	ldrb	r3, [r3, #11]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	4313      	orrs	r3, r2
 800336c:	121b      	asrs	r3, r3, #8
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	7a5a      	ldrb	r2, [r3, #9]
 8003378:	7a99      	ldrb	r1, [r3, #10]
 800337a:	0209      	lsls	r1, r1, #8
 800337c:	430a      	orrs	r2, r1
 800337e:	7adb      	ldrb	r3, [r3, #11]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	4313      	orrs	r3, r2
 8003384:	141b      	asrs	r3, r3, #16
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800338c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	f107 0318 	add.w	r3, r7, #24
 800339a:	3301      	adds	r3, #1
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fb22 	bl	80029e8 <crc_calculate>
 80033a4:	4603      	mov	r3, r0
 80033a6:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f103 010c 	add.w	r1, r3, #12
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	78db      	ldrb	r3, [r3, #3]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	f107 0316 	add.w	r3, r7, #22
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fb3a 	bl	8002a32 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80033be:	f107 0216 	add.w	r2, r7, #22
 80033c2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff facd 	bl	8002968 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80033ce:	8af9      	ldrh	r1, [r7, #22]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	330c      	adds	r3, #12
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	78d2      	ldrb	r2, [r2, #3]
 80033d8:	4413      	add	r3, r2
 80033da:	b2ca      	uxtb	r2, r1
 80033dc:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80033de:	8afb      	ldrh	r3, [r7, #22]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	b299      	uxth	r1, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f103 020c 	add.w	r2, r3, #12
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	b2ca      	uxtb	r2, r1
 80033f4:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80033f6:	8afa      	ldrh	r2, [r7, #22]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80033fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	310c      	adds	r1, #12
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800341e:	4401      	add	r1, r0
 8003420:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003424:	f107 0018 	add.w	r0, r7, #24
 8003428:	9102      	str	r1, [sp, #8]
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4633      	mov	r3, r6
 8003430:	4602      	mov	r2, r0
 8003432:	4629      	mov	r1, r5
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff fe61 	bl	80030fc <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	b29a      	uxth	r2, r3
 8003440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003444:	b29b      	uxth	r3, r3
 8003446:	4413      	add	r3, r2
 8003448:	b29a      	uxth	r2, r3
 800344a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800344e:	b29b      	uxth	r3, r3
 8003450:	4413      	add	r3, r2
 8003452:	b29b      	uxth	r3, r3
 8003454:	3302      	adds	r3, #2
 8003456:	b29b      	uxth	r3, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	372c      	adds	r7, #44	; 0x2c
 800345c:	46bd      	mov	sp, r7
 800345e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003460 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af04      	add	r7, sp, #16
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	70fb      	strb	r3, [r7, #3]
 8003472:	460b      	mov	r3, r1
 8003474:	70bb      	strb	r3, [r7, #2]
 8003476:	4613      	mov	r3, r2
 8003478:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800347a:	787b      	ldrb	r3, [r7, #1]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fe29 	bl	80030d4 <mavlink_get_channel_status>
 8003482:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003484:	78ba      	ldrb	r2, [r7, #2]
 8003486:	78f9      	ldrb	r1, [r7, #3]
 8003488:	f897 3020 	ldrb.w	r3, [r7, #32]
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	7f3b      	ldrb	r3, [r7, #28]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	7e3b      	ldrb	r3, [r7, #24]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff feb0 	bl	80031fe <mavlink_finalize_message_buffer>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	70fb      	strb	r3, [r7, #3]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70bb      	strb	r3, [r7, #2]
 80034be:	4613      	mov	r3, r2
 80034c0:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80034c2:	78ba      	ldrb	r2, [r7, #2]
 80034c4:	78f9      	ldrb	r1, [r7, #3]
 80034c6:	7d3b      	ldrb	r3, [r7, #20]
 80034c8:	9302      	str	r3, [sp, #8]
 80034ca:	7c3b      	ldrb	r3, [r7, #16]
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	787b      	ldrb	r3, [r7, #1]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffc3 	bl	8003460 <mavlink_finalize_message_chan>
 80034da:	4603      	mov	r3, r0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	2bfe      	cmp	r3, #254	; 0xfe
 80034fa:	d13a      	bne.n	8003572 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8003500:	2305      	movs	r3, #5
 8003502:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	789a      	ldrb	r2, [r3, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3301      	adds	r3, #1
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3302      	adds	r3, #2
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	7992      	ldrb	r2, [r2, #6]
 800351c:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3303      	adds	r3, #3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	79d2      	ldrb	r2, [r2, #7]
 8003526:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	7a12      	ldrb	r2, [r2, #8]
 8003530:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	7a5a      	ldrb	r2, [r3, #9]
 8003536:	7a99      	ldrb	r1, [r3, #10]
 8003538:	0209      	lsls	r1, r1, #8
 800353a:	430a      	orrs	r2, r1
 800353c:	7adb      	ldrb	r3, [r3, #11]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	4313      	orrs	r3, r2
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3305      	adds	r3, #5
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1d98      	adds	r0, r3, #6
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f103 010c 	add.w	r1, r3, #12
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	78db      	ldrb	r3, [r3, #3]
 800355a:	461a      	mov	r2, r3
 800355c:	f012 f84e 	bl	80155fc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003560:	7dbb      	ldrb	r3, [r7, #22]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	78d2      	ldrb	r2, [r2, #3]
 8003566:	4413      	add	r3, r2
 8003568:	3301      	adds	r3, #1
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e06c      	b.n	800364c <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fe24 	bl	80031c8 <_mav_trim_payload>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003584:	2309      	movs	r3, #9
 8003586:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	789a      	ldrb	r2, [r3, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3301      	adds	r3, #1
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3302      	adds	r3, #2
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	7912      	ldrb	r2, [r2, #4]
 80035a0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3303      	adds	r3, #3
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	7952      	ldrb	r2, [r2, #5]
 80035aa:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	7992      	ldrb	r2, [r2, #6]
 80035b4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3305      	adds	r3, #5
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	79d2      	ldrb	r2, [r2, #7]
 80035be:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3306      	adds	r3, #6
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	7a12      	ldrb	r2, [r2, #8]
 80035c8:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	7a5a      	ldrb	r2, [r3, #9]
 80035ce:	7a99      	ldrb	r1, [r3, #10]
 80035d0:	0209      	lsls	r1, r1, #8
 80035d2:	430a      	orrs	r2, r1
 80035d4:	7adb      	ldrb	r3, [r3, #11]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	4313      	orrs	r3, r2
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3307      	adds	r3, #7
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	7a5a      	ldrb	r2, [r3, #9]
 80035e8:	7a99      	ldrb	r1, [r3, #10]
 80035ea:	0209      	lsls	r1, r1, #8
 80035ec:	430a      	orrs	r2, r1
 80035ee:	7adb      	ldrb	r3, [r3, #11]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4313      	orrs	r3, r2
 80035f4:	121a      	asrs	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3308      	adds	r3, #8
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	7a5a      	ldrb	r2, [r3, #9]
 8003602:	7a99      	ldrb	r1, [r3, #10]
 8003604:	0209      	lsls	r1, r1, #8
 8003606:	430a      	orrs	r2, r1
 8003608:	7adb      	ldrb	r3, [r3, #11]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	4313      	orrs	r3, r2
 800360e:	141a      	asrs	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3309      	adds	r3, #9
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f103 000a 	add.w	r0, r3, #10
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	4619      	mov	r1, r3
 8003626:	f011 ffe9 	bl	80155fc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800362a:	7dba      	ldrb	r2, [r7, #22]
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	4413      	add	r3, r2
 8003630:	3301      	adds	r3, #1
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	791b      	ldrb	r3, [r3, #4]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <mavlink_msg_to_send_buffer+0x164>
 8003644:	230d      	movs	r3, #13
 8003646:	e000      	b.n	800364a <mavlink_msg_to_send_buffer+0x166>
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b29a      	uxth	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3301      	adds	r3, #1
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1c98      	adds	r0, r3, #2
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800367a:	7dfa      	ldrb	r2, [r7, #23]
 800367c:	4619      	mov	r1, r3
 800367e:	f011 ffbd 	bl	80155fc <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8003682:	7dbb      	ldrb	r3, [r7, #22]
 8003684:	b29a      	uxth	r2, r3
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4413      	add	r3, r2
 800368c:	b29a      	uxth	r2, r3
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4413      	add	r3, r2
 8003694:	b29b      	uxth	r3, r3
 8003696:	3303      	adds	r3, #3
 8003698:	b29b      	uxth	r3, r3
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b08e      	sub	sp, #56	; 0x38
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	613a      	str	r2, [r7, #16]
 80036aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80036ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80036b2:	461a      	mov	r2, r3
 80036b4:	ed87 1a01 	vstr	s2, [r7, #4]
 80036b8:	edc7 1a00 	vstr	s3, [r7]
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]
 80036c0:	460b      	mov	r3, r1
 80036c2:	75bb      	strb	r3, [r7, #22]
 80036c4:	4613      	mov	r3, r2
 80036c6:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 80036d8:	8abb      	ldrh	r3, [r7, #20]
 80036da:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 80036dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036de:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f107 011c 	add.w	r1, r7, #28
 80036e8:	2214      	movs	r2, #20
 80036ea:	4618      	mov	r0, r3
 80036ec:	f011 ff86 	bl	80155fc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 80036f8:	725a      	strb	r2, [r3, #9]
 80036fa:	2200      	movs	r2, #0
 80036fc:	729a      	strb	r2, [r3, #10]
 80036fe:	2200      	movs	r2, #0
 8003700:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8003702:	7dba      	ldrb	r2, [r7, #22]
 8003704:	7df9      	ldrb	r1, [r7, #23]
 8003706:	2314      	movs	r3, #20
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	2314      	movs	r3, #20
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2314      	movs	r3, #20
 8003710:	6938      	ldr	r0, [r7, #16]
 8003712:	f7ff fec9 	bl	80034a8 <mavlink_finalize_message>
 8003716:	4603      	mov	r3, r0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3730      	adds	r7, #48	; 0x30
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	603a      	str	r2, [r7, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
 800372e:	460b      	mov	r3, r1
 8003730:	71bb      	strb	r3, [r7, #6]
 8003732:	4613      	mov	r3, r2
 8003734:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800373a:	797b      	ldrb	r3, [r7, #5]
 800373c:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 800373e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003742:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8003744:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003748:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800374a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800374e:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8003750:	2303      	movs	r3, #3
 8003752:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	f107 010c 	add.w	r1, r7, #12
 800375c:	2209      	movs	r2, #9
 800375e:	4618      	mov	r0, r3
 8003760:	f011 ff4c 	bl	80155fc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	725a      	strb	r2, [r3, #9]
 800376a:	2200      	movs	r2, #0
 800376c:	729a      	strb	r2, [r3, #10]
 800376e:	2200      	movs	r2, #0
 8003770:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8003772:	79ba      	ldrb	r2, [r7, #6]
 8003774:	79f9      	ldrb	r1, [r7, #7]
 8003776:	2332      	movs	r3, #50	; 0x32
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2309      	movs	r3, #9
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2309      	movs	r3, #9
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f7ff fe91 	bl	80034a8 <mavlink_finalize_message>
 8003786:	4603      	mov	r3, r0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af04      	add	r7, sp, #16
 8003796:	60ba      	str	r2, [r7, #8]
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	460b      	mov	r3, r1
 80037a0:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	791e      	ldrb	r6, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	795b      	ldrb	r3, [r3, #5]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	7992      	ldrb	r2, [r2, #6]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	6809      	ldr	r1, [r1, #0]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	79c0      	ldrb	r0, [r0, #7]
 80037b6:	7bbd      	ldrb	r5, [r7, #14]
 80037b8:	7bfc      	ldrb	r4, [r7, #15]
 80037ba:	9003      	str	r0, [sp, #12]
 80037bc:	9102      	str	r1, [sp, #8]
 80037be:	9201      	str	r2, [sp, #4]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4633      	mov	r3, r6
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4629      	mov	r1, r5
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ffa9 	bl	8003720 <mavlink_msg_heartbeat_pack>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d8 <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	709a      	strb	r2, [r3, #2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	70da      	strb	r2, [r3, #3]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	711a      	strb	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	715a      	strb	r2, [r3, #5]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	719a      	strb	r2, [r3, #6]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, I2C_HandleTypeDef* i2c)
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter_i2c(i2c)  {
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	731a      	strb	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	81da      	strh	r2, [r3, #14]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc0>)
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	220a      	movs	r2, #10
 8003866:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003880:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f011 fec6 	bl	8015618 <memset>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f203 33f1 	addw	r3, r3, #1009	; 0x3f1
 80038a2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f011 feb5 	bl	8015618 <memset>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80038b4:	4619      	mov	r1, r3
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9c1 2300 	strd	r2, r3, [r1]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff85 	bl	80037d8 <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc4>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6013      	str	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);




}
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08018260 	.word	0x08018260
 80038e4:	200003d0 	.word	0x200003d0

080038e8 <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <HAL_UARTEx_RxEventCallback+0x20>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
	instance
	->process_header();
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f83c 	bl	8003978 <_ZN14MavlinkControl14process_headerEv>



}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200003d0 	.word	0x200003d0

0800390c <_ZN14MavlinkControl9update_RXEv>:

void MavlinkControl::update_RX(void){
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800391e:	2214      	movs	r2, #20
 8003920:	4619      	mov	r1, r3
 8003922:	f00d f8f7 	bl	8010b14 <HAL_UARTEx_ReceiveToIdle_DMA>


}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

	//Every 0.5 sec send a heartbeat to the herelink controller. If this runs continuously this
	//blocks the SBUS protocol

	this->sendTestMessage();
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8fb 	bl	8003b34 <_ZN14MavlinkControl15sendTestMessageEv>

	if(HAL_GetTick() % 500 == 0){
 800393e:	f002 ff6d 	bl	800681c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <_ZN14MavlinkControl9update_TXEv+0x44>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f895 	bl	8003a94 <_ZN14MavlinkControl9heartbeatEv>

	}

}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	10624dd3 	.word	0x10624dd3

08003978 <_ZN14MavlinkControl14process_headerEv>:

void MavlinkControl::process_header(void){
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	//first check the header for value 0xFD

	//NOT EVEN SURE IF I NEED THIS LATER


	if(_receiveBuffer_1[0] == 0xFD){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8003986:	2bfd      	cmp	r3, #253	; 0xfd
 8003988:	d147      	bne.n	8003a1a <_ZN14MavlinkControl14process_headerEv+0xa2>
		_receiveBuffer_2 = _receiveBuffer_1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

		//printf("CHECKING IF LEN IS OK %d \r\n", _tempBuffer[1]);


		_mavlink_received_header.magic = _receiveBuffer_2[0];
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039aa:	785a      	ldrb	r2, [r3, #1]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.incompat_flags = _receiveBuffer_2[2];
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039b8:	789a      	ldrb	r2, [r3, #2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
		_mavlink_received_header.compat_flags = _receiveBuffer_2[3];
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039c6:	78da      	ldrb	r2, [r3, #3]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
		_mavlink_received_header.seq = _receiveBuffer_2[4];
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039d4:	791a      	ldrb	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[5];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039e2:	795a      	ldrb	r2, [r3, #5]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.msgid = _receiveBuffer_2[6] | _receiveBuffer_2[7] | _receiveBuffer_2[8];
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039f0:	3306      	adds	r3, #6
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80039fa:	3307      	adds	r3, #7
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a08:	3308      	adds	r3, #8
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520





}
 8003a18:	e036      	b.n	8003a88 <_ZN14MavlinkControl14process_headerEv+0x110>
	}else if(_receiveBuffer_1[0] == 0xFE){
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8003a20:	2bfe      	cmp	r3, #254	; 0xfe
 8003a22:	d131      	bne.n	8003a88 <_ZN14MavlinkControl14process_headerEv+0x110>
		_receiveBuffer_2 = _receiveBuffer_1;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
		_mavlink_received_header.magic = _receiveBuffer_2[0];
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a44:	785a      	ldrb	r2, [r3, #1]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.seq = _receiveBuffer_2[2];
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a52:	789a      	ldrb	r2, [r3, #2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[3];
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a60:	78da      	ldrb	r2, [r3, #3]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.compid = _receiveBuffer_2[4];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a6e:	791a      	ldrb	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
		_mavlink_received_header.msgid = _receiveBuffer_2[5];
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 8003ab4:	f7ff fe6c 	bl	8003790 <mavlink_msg_heartbeat_encode>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f203 1233 	addw	r2, r3, #307	; 0x133
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	9303      	str	r3, [sp, #12]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9302      	str	r3, [sp, #8]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	f7ff fe1c 	bl	8003720 <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7ff fcf4 	bl	80034e4 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	89da      	ldrh	r2, [r3, #14]
 8003b0a:	2364      	movs	r3, #100	; 0x64
 8003b0c:	f00b fc27 	bl	800f35e <HAL_UART_Transmit>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 8003b20:	4803      	ldr	r0, [pc, #12]	; (8003b30 <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 8003b22:	f012 fa71 	bl	8016008 <puts>
	}

}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	08018264 	.word	0x08018264

08003b34 <_ZN14MavlinkControl15sendTestMessageEv>:

void MavlinkControl::sendTestMessage(void){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]

	float testValue = 122.0f;
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <_ZN14MavlinkControl15sendTestMessageEv+0x8c>)
 8003b3e:	60fb      	str	r3, [r7, #12]

	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though

	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, testValue, 0.0f,0,0,0,0);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f203 1233 	addw	r2, r3, #307	; 0x133
 8003b52:	2300      	movs	r3, #0
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8003bc4 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003b5a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8003bc4 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003bc4 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003b64:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b68:	f7ff fd9b 	bl	80036a2 <mavlink_msg_vfr_hud_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff fcb2 	bl	80034e4 <mavlink_msg_to_send_buffer>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8b3 250a 	ldrh.w	r2, [r3, #1290]	; 0x50a
 8003b9a:	2364      	movs	r3, #100	; 0x64
 8003b9c:	f00b fbdf 	bl	800f35e <HAL_UART_Transmit>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <_ZN14MavlinkControl15sendTestMessageEv+0x82>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 8003bb0:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <_ZN14MavlinkControl15sendTestMessageEv+0x94>)
 8003bb2:	f012 fa29 	bl	8016008 <puts>
	}

}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	42f40000 	.word	0x42f40000
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	08018264 	.word	0x08018264

08003bcc <_ZN14MavlinkControl13getFlightTimeEv>:
	}

}


uint32_t MavlinkControl::getFlightTime(void){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

	return this->_flight_time;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fd f809 	bl	8000bf8 <__aeabi_d2uiz>
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	615a      	str	r2, [r3, #20]
 8003c0c:	761a      	strb	r2, [r3, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	331e      	adds	r3, #30
 8003c12:	2220      	movs	r2, #32
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f011 fcfe 	bl	8015618 <memset>

	this->_huart_sbus = huart_sbus;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]





}
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	2219      	movs	r2, #25
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f00c ff68 	bl	8010b14 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f804 	bl	8003c52 <_ZN4SBUS8readSBUSEv>




}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	795b      	ldrb	r3, [r3, #5]
 8003c5e:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	799b      	ldrb	r3, [r3, #6]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8003c6a:	89fa      	ldrh	r2, [r7, #14]
 8003c6c:	89bb      	ldrh	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	799b      	ldrb	r3, [r3, #6]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	79db      	ldrb	r3, [r3, #7]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	015b      	lsls	r3, r3, #5
 8003c8e:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8003c90:	89fa      	ldrh	r2, [r7, #14]
 8003c92:	89bb      	ldrh	r3, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	79db      	ldrb	r3, [r3, #7]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7a1b      	ldrb	r3, [r3, #8]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7a5b      	ldrb	r3, [r3, #9]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	029b      	lsls	r3, r3, #10
 8003cbe:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8003cc0:	89fa      	ldrh	r2, [r7, #14]
 8003cc2:	89bb      	ldrh	r3, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	897b      	ldrh	r3, [r7, #10]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7a5b      	ldrb	r3, [r3, #9]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7a9b      	ldrb	r3, [r3, #10]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	01db      	lsls	r3, r3, #7
 8003cea:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8003cec:	89fa      	ldrh	r2, [r7, #14]
 8003cee:	89bb      	ldrh	r3, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7a9b      	ldrb	r3, [r3, #10]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7adb      	ldrb	r3, [r3, #11]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8003d12:	89fa      	ldrh	r2, [r7, #14]
 8003d14:	89bb      	ldrh	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7adb      	ldrb	r3, [r3, #11]
 8003d28:	09db      	lsrs	r3, r3, #7
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7b1b      	ldrb	r3, [r3, #12]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7b5b      	ldrb	r3, [r3, #13]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	025b      	lsls	r3, r3, #9
 8003d40:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8003d42:	89fa      	ldrh	r2, [r7, #14]
 8003d44:	89bb      	ldrh	r3, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7b5b      	ldrb	r3, [r3, #13]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7b9b      	ldrb	r3, [r3, #14]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003d6e:	89fa      	ldrh	r2, [r7, #14]
 8003d70:	89bb      	ldrh	r3, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7b9b      	ldrb	r3, [r3, #14]
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7bdb      	ldrb	r3, [r3, #15]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8003d94:	89fa      	ldrh	r2, [r7, #14]
 8003d96:	89bb      	ldrh	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7c1b      	ldrb	r3, [r3, #16]
 8003daa:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	7c5b      	ldrb	r3, [r3, #17]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 8003db6:	89fa      	ldrh	r2, [r7, #14]
 8003db8:	89bb      	ldrh	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7c5b      	ldrb	r3, [r3, #17]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7c9b      	ldrb	r3, [r3, #18]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	015b      	lsls	r3, r3, #5
 8003dda:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8003ddc:	89fa      	ldrh	r2, [r7, #14]
 8003dde:	89bb      	ldrh	r3, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7c9b      	ldrb	r3, [r3, #18]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7cdb      	ldrb	r3, [r3, #19]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7d1b      	ldrb	r3, [r3, #20]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003e0c:	89fa      	ldrh	r2, [r7, #14]
 8003e0e:	89bb      	ldrh	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	897b      	ldrh	r3, [r7, #10]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7d1b      	ldrb	r3, [r3, #20]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7d5b      	ldrb	r3, [r3, #21]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	01db      	lsls	r3, r3, #7
 8003e36:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8003e38:	89fa      	ldrh	r2, [r7, #14]
 8003e3a:	89bb      	ldrh	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7d5b      	ldrb	r3, [r3, #21]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7d9b      	ldrb	r3, [r3, #22]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003e5e:	89fa      	ldrh	r2, [r7, #14]
 8003e60:	89bb      	ldrh	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7d9b      	ldrb	r3, [r3, #22]
 8003e74:	09db      	lsrs	r3, r3, #7
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7ddb      	ldrb	r3, [r3, #23]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7e1b      	ldrb	r3, [r3, #24]
 8003e88:	125b      	asrs	r3, r3, #9
 8003e8a:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003e8c:	89fa      	ldrh	r2, [r7, #14]
 8003e8e:	89bb      	ldrh	r3, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	897b      	ldrh	r3, [r7, #10]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7e1b      	ldrb	r3, [r3, #24]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7e5b      	ldrb	r3, [r3, #25]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8003eb8:	89fa      	ldrh	r2, [r7, #14]
 8003eba:	89bb      	ldrh	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7e5b      	ldrb	r3, [r3, #25]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e9b      	ldrb	r3, [r3, #26]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8003ede:	89fa      	ldrh	r2, [r7, #14]
 8003ee0:	89bb      	ldrh	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7edb      	ldrb	r3, [r3, #27]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <_ZN4SBUS8readSBUSEv+0x2b0>
 8003efc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f00:	e000      	b.n	8003f04 <_ZN4SBUS8readSBUSEv+0x2b2>
 8003f02:	2200      	movs	r2, #0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8003f08:	2301      	movs	r3, #1


}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003f24:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8003f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2a:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003f2c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003f30:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003f32:	f240 6394 	movw	r3, #1684	; 0x694
 8003f36:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8003f38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	da14      	bge.n	8003f6e <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003f44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f52:	fb03 f202 	mul.w	r2, r3, r2
 8003f56:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f5e:	1acb      	subs	r3, r1, r3
 8003f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	e01b      	b.n	8003fa6 <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003f6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	dd13      	ble.n	8003fa2 <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8003f7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <_ZN4SBUS8getLeftYEv+0x9c>)
 8003f86:	fb03 f202 	mul.w	r2, r3, r2
 8003f8a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003f8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f92:	1acb      	subs	r3, r1, r3
 8003f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa0:	e001      	b.n	8003fa6 <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8003fa2:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003fb8 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8003fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	fffffc18 	.word	0xfffffc18
 8003fb8:	00000000 	.word	0x00000000

08003fbc <_ZN4SBUS8getLeftXEv>:

float SBUS::getLeftX(void){
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  int16_t raw_value = _channels[3];
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fc8:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003fca:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003fce:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <_ZN4SBUS8getLeftXEv+0xc0>)
 8003fd2:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <_ZN4SBUS8getLeftXEv+0xc4>)
 8003fd6:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8003fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	dd16      	ble.n	8004020 <_ZN4SBUS8getLeftXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003ff2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004084 <_ZN4SBUS8getLeftXEv+0xc8>
 800400a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800400e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004012:	edd7 7a03 	vldr	s15, [r7, #12]
 8004016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	e025      	b.n	800406c <_ZN4SBUS8getLeftXEv+0xb0>

  } else if (raw_value > center_value) {
 8004020:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004038:	d516      	bpl.n	8004068 <_ZN4SBUS8getLeftXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 800403a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004046:	edd7 7a04 	vldr	s15, [r7, #16]
 800404a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004084 <_ZN4SBUS8getLeftXEv+0xc8>
 8004052:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004056:	ed97 7a02 	vldr	s14, [r7, #8]
 800405a:	edd7 7a04 	vldr	s15, [r7, #16]
 800405e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004066:	e001      	b.n	800406c <_ZN4SBUS8getLeftXEv+0xb0>

  } else {

    return 0.0f;
 8004068:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004088 <_ZN4SBUS8getLeftXEv+0xcc>

  }
}
 800406c:	eeb0 0a67 	vmov.f32	s0, s15
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	43b60000 	.word	0x43b60000
 8004080:	44d28000 	.word	0x44d28000
 8004084:	447a0000 	.word	0x447a0000
 8004088:	00000000 	.word	0x00000000

0800408c <_ZN4SBUS9getRightYEv>:


float SBUS::getRightY(void){
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8c1b      	ldrh	r3, [r3, #32]
 8004098:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 800409a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800409e:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <_ZN4SBUS9getRightYEv+0xc0>)
 80040a2:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 80040a4:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <_ZN4SBUS9getRightYEv+0xc4>)
 80040a6:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 80040a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80040b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	dd16      	ble.n	80040f0 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 80040c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80040d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004154 <_ZN4SBUS9getRightYEv+0xc8>
 80040da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040de:	ed97 7a04 	vldr	s14, [r7, #16]
 80040e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	e025      	b.n	800413c <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 80040f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	d516      	bpl.n	8004138 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 800410a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004116:	edd7 7a04 	vldr	s15, [r7, #16]
 800411a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800411e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004154 <_ZN4SBUS9getRightYEv+0xc8>
 8004122:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004126:	ed97 7a03 	vldr	s14, [r7, #12]
 800412a:	edd7 7a04 	vldr	s15, [r7, #16]
 800412e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004136:	e001      	b.n	800413c <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8004138:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004158 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 800413c:	eeb0 0a67 	vmov.f32	s0, s15
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	43b60000 	.word	0x43b60000
 8004150:	44d28000 	.word	0x44d28000
 8004154:	447a0000 	.word	0x447a0000
 8004158:	00000000 	.word	0x00000000

0800415c <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8bdb      	ldrh	r3, [r3, #30]
 8004168:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 800416a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800416e:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <_ZN4SBUS9getRightXEv+0xc0>)
 8004172:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <_ZN4SBUS9getRightXEv+0xc4>)
 8004176:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8004178:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004184:	ed97 7a04 	vldr	s14, [r7, #16]
 8004188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	dd16      	ble.n	80041c0 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8004192:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800419e:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004224 <_ZN4SBUS9getRightXEv+0xc8>
 80041aa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80041b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041be:	e025      	b.n	800420c <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 80041c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80041d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	d516      	bpl.n	8004208 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 80041da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004224 <_ZN4SBUS9getRightXEv+0xc8>
 80041f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80041fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80041fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004206:	e001      	b.n	800420c <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8004208:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004228 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	43b60000 	.word	0x43b60000
 8004220:	44d28000 	.word	0x44d28000
 8004224:	447a0000 	.word	0x447a0000
 8004228:	00000000 	.word	0x00000000

0800422c <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004238:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 800423a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800423e:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8004240:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <_ZN4SBUS11getJogWheelEv+0xc0>)
 8004242:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8004246:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8004248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004254:	ed97 7a04 	vldr	s14, [r7, #16]
 8004258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	dd16      	ble.n	8004290 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8004262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800426e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004276:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80042f4 <_ZN4SBUS11getJogWheelEv+0xc8>
 800427a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800427e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004282:	edd7 7a03 	vldr	s15, [r7, #12]
 8004286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800428a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428e:	e025      	b.n	80042dc <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8004290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429c:	ed97 7a04 	vldr	s14, [r7, #16]
 80042a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d516      	bpl.n	80042d8 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 80042aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80042f4 <_ZN4SBUS11getJogWheelEv+0xc8>
 80042c2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80042ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d6:	e001      	b.n	80042dc <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 80042d8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80042f8 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 80042dc:	eeb0 0a67 	vmov.f32	s0, s15
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	44d28000 	.word	0x44d28000
 80042f0:	43b60000 	.word	0x43b60000
 80042f4:	447a0000 	.word	0x447a0000
 80042f8:	00000000 	.word	0x00000000

080042fc <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800430c:	bf8c      	ite	hi
 800430e:	2301      	movhi	r3, #1
 8004310:	2300      	movls	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <_ZN4SBUS8A_buttonEv+0xac>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d02d      	beq.n	8004378 <_ZN4SBUS8A_buttonEv+0x7c>
 800431c:	2b02      	cmp	r3, #2
 800431e:	dc3b      	bgt.n	8004398 <_ZN4SBUS8A_buttonEv+0x9c>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <_ZN4SBUS8A_buttonEv+0x2e>
 8004324:	2b01      	cmp	r3, #1
 8004326:	d00a      	beq.n	800433e <_ZN4SBUS8A_buttonEv+0x42>
 8004328:	e036      	b.n	8004398 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02e      	beq.n	800438e <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <_ZN4SBUS8A_buttonEv+0xac>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <_ZN4SBUS8A_buttonEv+0xb0>)
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 800433c:	e027      	b.n	800438e <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	f083 0301 	eor.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <_ZN4SBUS8A_buttonEv+0xac>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004350:	e01f      	b.n	8004392 <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <_ZN4SBUS8A_buttonEv+0xb0>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <_ZN4SBUS8A_buttonEv+0xb0>)
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <_ZN4SBUS8A_buttonEv+0xb0>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b31      	cmp	r3, #49	; 0x31
 8004364:	bf8c      	ite	hi
 8004366:	2301      	movhi	r3, #1
 8004368:	2300      	movls	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <_ZN4SBUS8A_buttonEv+0xac>)
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
	      break;
 8004376:	e00c      	b.n	8004392 <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <_ZN4SBUS8A_buttonEv+0xac>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
	        return true;
 800438a:	2301      	movs	r3, #1
 800438c:	e005      	b.n	800439a <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8004396:	bf00      	nop
	  }

	  return false;
 8004398:	2300      	movs	r3, #0

}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	200003d4 	.word	0x200003d4
 80043ac:	200003d5 	.word	0x200003d5

080043b0 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c0:	bf8c      	ite	hi
 80043c2:	2301      	movhi	r3, #1
 80043c4:	2300      	movls	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <_ZN4SBUS8B_buttonEv+0xac>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d02d      	beq.n	800442c <_ZN4SBUS8B_buttonEv+0x7c>
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	dc3b      	bgt.n	800444c <_ZN4SBUS8B_buttonEv+0x9c>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <_ZN4SBUS8B_buttonEv+0x2e>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d00a      	beq.n	80043f2 <_ZN4SBUS8B_buttonEv+0x42>
 80043dc:	e036      	b.n	800444c <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02e      	beq.n	8004442 <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <_ZN4SBUS8B_buttonEv+0xac>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <_ZN4SBUS8B_buttonEv+0xb0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80043f0:	e027      	b.n	8004442 <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f083 0301 	eor.w	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <_ZN4SBUS8B_buttonEv+0xac>)
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004404:	e01f      	b.n	8004446 <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b14      	ldr	r3, [pc, #80]	; (8004460 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b31      	cmp	r3, #49	; 0x31
 8004418:	bf8c      	ite	hi
 800441a:	2301      	movhi	r3, #1
 800441c:	2300      	movls	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <_ZN4SBUS8B_buttonEv+0xac>)
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
	      break;
 800442a:	e00c      	b.n	8004446 <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <_ZN4SBUS8B_buttonEv+0xac>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
	        return true;
 800443e:	2301      	movs	r3, #1
 8004440:	e005      	b.n	800444e <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 800444a:	bf00      	nop
	  }

	  return false;
 800444c:	2300      	movs	r3, #0


}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200003d6 	.word	0x200003d6
 8004460:	200003d7 	.word	0x200003d7

08004464 <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b1d      	cmp	r3, #29
 8004474:	d80e      	bhi.n	8004494 <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800447a:	4808      	ldr	r0, [pc, #32]	; (800449c <_ZN10Components13Error_HandlerEv+0x38>)
 800447c:	f005 f8e8 	bl	8009650 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8004480:	20c8      	movs	r0, #200	; 0xc8
 8004482:	f002 f9d7 	bl	8006834 <HAL_Delay>
		printf("Components error handler !! \r\n");
 8004486:	4806      	ldr	r0, [pc, #24]	; (80044a0 <_ZN10Components13Error_HandlerEv+0x3c>)
 8004488:	f011 fdbe 	bl	8016008 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	3301      	adds	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e7ed      	b.n	8004470 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	48000800 	.word	0x48000800
 80044a0:	0801828c 	.word	0x0801828c

080044a4 <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fb09 	bl	8004ac4 <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fb42 	bl	8004b3c <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb7b 	bl	8004bb4 <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fbb0 	bl	8004c24 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fbe9 	bl	8004c9c <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f86a 	bl	80045a4 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fc19 	bl	8004d08 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fc7e 	bl	8004dd8 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fccf 	bl	8004e80 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fd1e 	bl	8004f24 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fd6d 	bl	8004fc8 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fdae 	bl	8005050 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f95f 	bl	80047b8 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fdec 	bl	80050d8 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fe2d 	bl	8005160 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa1a 	bl	8004940 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fe6b 	bl	80051e8 <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	4618      	mov	r0, r3
 8004518:	f006 fd74 	bl	800b004 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	4618      	mov	r0, r3
 8004522:	f006 fd6f 	bl	800b004 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4618      	mov	r0, r3
 800452c:	f006 fd6a 	bl	800b004 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	4618      	mov	r0, r3
 8004536:	f006 fd65 	bl	800b004 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4618      	mov	r0, r3
 8004540:	f006 fd60 	bl	800b004 <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	4618      	mov	r0, r3
 800454a:	f006 fd8c 	bl	800b066 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	4618      	mov	r0, r3
 8004554:	f006 fd87 	bl	800b066 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4618      	mov	r0, r3
 800455e:	f006 fd82 	bl	800b066 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4618      	mov	r0, r3
 8004568:	f006 fd7d 	bl	800b066 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	4618      	mov	r0, r3
 8004572:	f006 fd78 	bl	800b066 <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	217f      	movs	r1, #127	; 0x7f
 800457c:	4618      	mov	r0, r3
 800457e:	f003 fc5f 	bl	8007e40 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	217f      	movs	r1, #127	; 0x7f
 8004588:	4618      	mov	r0, r3
 800458a:	f003 fc59 	bl	8007e40 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	217f      	movs	r1, #127	; 0x7f
 8004594:	4618      	mov	r0, r3
 8004596:	f003 fc53 	bl	8007e40 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 80045ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2220      	movs	r2, #32
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f011 f829 	bl	8015618 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80045ce:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045d8:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	2201      	movs	r2, #1
 80045f8:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	2208      	movs	r2, #8
 8004600:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	2200      	movs	r2, #0
 8004610:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	2203      	movs	r2, #3
 8004618:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2200      	movs	r2, #0
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	2200      	movs	r2, #0
 8004644:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	221c      	movs	r2, #28
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004660:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2200      	movs	r2, #0
 8004668:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2201      	movs	r2, #1
 8004670:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fb46 	bl	8006d08 <HAL_ADC_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff fee9 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 8004692:	4842      	ldr	r0, [pc, #264]	; (800479c <_ZN10Components10init_ADC_1Ev+0x1f8>)
 8004694:	f011 fc32 	bl	8015efc <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 fc2c 	bl	8007f04 <HAL_ADCEx_MultiModeConfigChannel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fed1 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 80046c2:	4837      	ldr	r0, [pc, #220]	; (80047a0 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 80046c4:	f011 fc1a 	bl	8015efc <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 80046c8:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <_ZN10Components10init_ADC_1Ev+0x200>)
 80046ca:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80046cc:	2306      	movs	r3, #6
 80046ce:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80046d0:	2304      	movs	r3, #4
 80046d2:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046d4:	237f      	movs	r3, #127	; 0x7f
 80046d6:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80046d8:	2304      	movs	r3, #4
 80046da:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f107 020c 	add.w	r2, r7, #12
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f002 fdc0 	bl	8007270 <HAL_ADC_ConfigChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff feaf 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 8004706:	4828      	ldr	r0, [pc, #160]	; (80047a8 <_ZN10Components10init_ADC_1Ev+0x204>)
 8004708:	f011 fbf8 	bl	8015efc <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <_ZN10Components10init_ADC_1Ev+0x208>)
 800470e:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004710:	2312      	movs	r3, #18
 8004712:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004714:	2304      	movs	r3, #4
 8004716:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004718:	237f      	movs	r3, #127	; 0x7f
 800471a:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800471c:	2304      	movs	r3, #4
 800471e:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f107 020c 	add.w	r2, r7, #12
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f002 fd9e 	bl	8007270 <HAL_ADC_ConfigChannel>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fe8d 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 800474a:	4819      	ldr	r0, [pc, #100]	; (80047b0 <_ZN10Components10init_ADC_1Ev+0x20c>)
 800474c:	f011 fbd6 	bl	8015efc <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <_ZN10Components10init_ADC_1Ev+0x210>)
 8004752:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004754:	2318      	movs	r3, #24
 8004756:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004758:	2304      	movs	r3, #4
 800475a:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800475c:	237f      	movs	r3, #127	; 0x7f
 800475e:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004760:	2304      	movs	r3, #4
 8004762:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f107 020c 	add.w	r2, r7, #12
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fd7c 	bl	8007270 <HAL_ADC_ConfigChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fe6b 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 800478e:	4808      	ldr	r0, [pc, #32]	; (80047b0 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004790:	f011 fbb4 	bl	8015efc <iprintf>
		  }


}
 8004794:	bf00      	nop
 8004796:	3738      	adds	r7, #56	; 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	080182ac 	.word	0x080182ac
 80047a0:	080182c0 	.word	0x080182c0
 80047a4:	2e300800 	.word	0x2e300800
 80047a8:	080182f0 	.word	0x080182f0
 80047ac:	3ac04000 	.word	0x3ac04000
 80047b0:	08018314 	.word	0x08018314
 80047b4:	32601000 	.word	0x32601000

080047b8 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	2220      	movs	r2, #32
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f010 ff25 	bl	8015618 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	4a55      	ldr	r2, [pc, #340]	; (8004928 <_ZN10Components10init_ADC_2Ev+0x170>)
 80047d4:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047de:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	2200      	movs	r2, #0
 80047e6:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2200      	movs	r2, #0
 80047ee:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	2200      	movs	r2, #0
 80047f6:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	2201      	movs	r2, #1
 80047fe:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2208      	movs	r2, #8
 8004806:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	2200      	movs	r2, #0
 8004816:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	2202      	movs	r2, #2
 800481e:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	2200      	movs	r2, #0
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	2200      	movs	r2, #0
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	2218      	movs	r2, #24
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	22e0      	movs	r2, #224	; 0xe0
 8004864:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	2200      	movs	r2, #0
 800486c:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	2201      	movs	r2, #1
 8004874:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	4618      	mov	r0, r3
 800487c:	f002 fa44 	bl	8006d08 <HAL_ADC_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fde7 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 8004896:	4825      	ldr	r0, [pc, #148]	; (800492c <_ZN10Components10init_ADC_2Ev+0x174>)
 8004898:	f011 fbb6 	bl	8016008 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <_ZN10Components10init_ADC_2Ev+0x178>)
 800489e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048a0:	2306      	movs	r3, #6
 80048a2:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80048a8:	237f      	movs	r3, #127	; 0x7f
 80048aa:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80048ac:	2304      	movs	r3, #4
 80048ae:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	f107 0208 	add.w	r2, r7, #8
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f002 fcd6 	bl	8007270 <HAL_ADC_ConfigChannel>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fdc5 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 80048da:	4816      	ldr	r0, [pc, #88]	; (8004934 <_ZN10Components10init_ADC_2Ev+0x17c>)
 80048dc:	f011 fb94 	bl	8016008 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <_ZN10Components10init_ADC_2Ev+0x180>)
 80048e2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80048e4:	230c      	movs	r3, #12
 80048e6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80048e8:	2304      	movs	r3, #4
 80048ea:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80048ec:	237f      	movs	r3, #127	; 0x7f
 80048ee:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80048f0:	2304      	movs	r3, #4
 80048f2:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	f107 0208 	add.w	r2, r7, #8
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 fcb6 	bl	8007270 <HAL_ADC_ConfigChannel>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fda5 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 800491a:	4808      	ldr	r0, [pc, #32]	; (800493c <_ZN10Components10init_ADC_2Ev+0x184>)
 800491c:	f011 fb74 	bl	8016008 <puts>

	  }


}
 8004920:	bf00      	nop
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	50000100 	.word	0x50000100
 800492c:	08018340 	.word	0x08018340
 8004930:	c3290000 	.word	0xc3290000
 8004934:	0801835c 	.word	0x0801835c
 8004938:	cb8c0000 	.word	0xcb8c0000
 800493c:	08018384 	.word	0x08018384

08004940 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	2220      	movs	r2, #32
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f010 fe61 	bl	8015618 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <_ZN10Components10init_ADC_5Ev+0x170>)
 800495c:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004966:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2200      	movs	r2, #0
 8004976:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2201      	movs	r2, #1
 8004986:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2208      	movs	r2, #8
 800498e:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	2200      	movs	r2, #0
 800499e:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2202      	movs	r2, #2
 80049a6:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2200      	movs	r2, #0
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2218      	movs	r2, #24
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	22e0      	movs	r2, #224	; 0xe0
 80049ec:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2200      	movs	r2, #0
 80049f4:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2201      	movs	r2, #1
 80049fc:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 f980 	bl	8006d08 <HAL_ADC_Init>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fd23 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8004a1e:	4825      	ldr	r0, [pc, #148]	; (8004ab4 <_ZN10Components10init_ADC_5Ev+0x174>)
 8004a20:	f011 fa6c 	bl	8015efc <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <_ZN10Components10init_ADC_5Ev+0x178>)
 8004a26:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a28:	2306      	movs	r3, #6
 8004a2a:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a30:	237f      	movs	r3, #127	; 0x7f
 8004a32:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a34:	2304      	movs	r3, #4
 8004a36:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f107 0208 	add.w	r2, r7, #8
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f002 fc12 	bl	8007270 <HAL_ADC_ConfigChannel>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fd01 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8004a62:	4816      	ldr	r0, [pc, #88]	; (8004abc <_ZN10Components10init_ADC_5Ev+0x17c>)
 8004a64:	f011 fa4a 	bl	8015efc <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <_ZN10Components10init_ADC_5Ev+0x180>)
 8004a6a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004a70:	2304      	movs	r3, #4
 8004a72:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a74:	237f      	movs	r3, #127	; 0x7f
 8004a76:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a78:	2304      	movs	r3, #4
 8004a7a:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f107 0208 	add.w	r2, r7, #8
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 fbf2 	bl	8007270 <HAL_ADC_ConfigChannel>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fce1 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8004aa2:	4806      	ldr	r0, [pc, #24]	; (8004abc <_ZN10Components10init_ADC_5Ev+0x17c>)
 8004aa4:	f011 fa2a 	bl	8015efc <iprintf>
	  }




}
 8004aa8:	bf00      	nop
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	50000600 	.word	0x50000600
 8004ab4:	080183ac 	.word	0x080183ac
 8004ab8:	94f00020 	.word	0x94f00020
 8004abc:	080183c4 	.word	0x080183c4
 8004ac0:	8c900008 	.word	0x8c900008

08004ac4 <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <_ZN10Components11init_COMP_1Ev+0x70>)
 8004ad2:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2250      	movs	r2, #80	; 0x50
 8004ae2:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 fc53 	bl	80083b4 <HAL_COMP_Init>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fca0 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 8004b24:	4804      	ldr	r0, [pc, #16]	; (8004b38 <_ZN10Components11init_COMP_1Ev+0x74>)
 8004b26:	f011 f9e9 	bl	8015efc <iprintf>

	  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40010200 	.word	0x40010200
 8004b38:	080183e8 	.word	0x080183e8

08004b3c <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <_ZN10Components11init_COMP_2Ev+0x70>)
 8004b4a:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2250      	movs	r2, #80	; 0x50
 8004b5a:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 fc17 	bl	80083b4 <HAL_COMP_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fc64 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 8004b9c:	4804      	ldr	r0, [pc, #16]	; (8004bb0 <_ZN10Components11init_COMP_2Ev+0x74>)
 8004b9e:	f011 f9ad 	bl	8015efc <iprintf>
	    }




}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40010204 	.word	0x40010204
 8004bb0:	08018400 	.word	0x08018400

08004bb4 <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <_ZN10Components11init_COMP_4Ev+0x68>)
 8004bc2:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2240      	movs	r2, #64	; 0x40
 8004bd2:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2200      	movs	r2, #0
 8004bea:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f003 fbdf 	bl	80083b4 <HAL_COMP_Init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fc2c 	bl	8004464 <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8004c0c:	4804      	ldr	r0, [pc, #16]	; (8004c20 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8004c0e:	f011 f975 	bl	8015efc <iprintf>
    }
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	4001020c 	.word	0x4001020c
 8004c20:	08018418 	.word	0x08018418

08004c24 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <_ZN10Components11init_COMP_5Ev+0x70>)
 8004c32:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2240      	movs	r2, #64	; 0x40
 8004c42:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f003 fba3 	bl	80083b4 <HAL_COMP_Init>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fbf0 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 8004c84:	4804      	ldr	r0, [pc, #16]	; (8004c98 <_ZN10Components11init_COMP_5Ev+0x74>)
 8004c86:	f011 f939 	bl	8015efc <iprintf>

	  }

}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40010210 	.word	0x40010210
 8004c98:	08018430 	.word	0x08018430

08004c9c <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <_ZN10Components11init_COMP_7Ev+0x68>)
 8004caa:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2250      	movs	r2, #80	; 0x50
 8004cba:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f003 fb67 	bl	80083b4 <HAL_COMP_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fbb4 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	   }



}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40010218 	.word	0x40010218

08004d08 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08e      	sub	sp, #56	; 0x38
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	2230      	movs	r2, #48	; 0x30
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f010 fc7d 	bl	8015618 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <_ZN10Components10init_DAC_1Ev+0xc8>)
 8004d24:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f003 fdeb 	bl	8008906 <HAL_DAC_Init>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fb8f 	bl	8004464 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004d46:	4823      	ldr	r0, [pc, #140]	; (8004dd4 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004d48:	f011 f8d8 	bl	8015efc <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004d64:	2302      	movs	r3, #2
 8004d66:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f107 0108 	add.w	r1, r7, #8
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 fde6 	bl	800894c <HAL_DAC_ConfigChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fb67 	bl	8004464 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004d96:	480f      	ldr	r0, [pc, #60]	; (8004dd4 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004d98:	f011 f8b0 	bl	8015efc <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f107 0108 	add.w	r1, r7, #8
 8004da4:	2210      	movs	r2, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f003 fdd0 	bl	800894c <HAL_DAC_ConfigChannel>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fb51 	bl	8004464 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004dc2:	4804      	ldr	r0, [pc, #16]	; (8004dd4 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004dc4:	f011 f89a 	bl	8015efc <iprintf>

    }

}
 8004dc8:	bf00      	nop
 8004dca:	3738      	adds	r7, #56	; 0x38
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	50000800 	.word	0x50000800
 8004dd4:	08018448 	.word	0x08018448

08004dd8 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	; 0x38
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	2230      	movs	r2, #48	; 0x30
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f010 fc15 	bl	8015618 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <_ZN10Components10init_DAC_2Ev+0x9c>)
 8004df4:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 fd83 	bl	8008906 <HAL_DAC_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fb27 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8004e16:	4818      	ldr	r0, [pc, #96]	; (8004e78 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8004e18:	f011 f870 	bl	8015efc <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004e34:	2302      	movs	r3, #2
 8004e36:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e40:	f107 0308 	add.w	r3, r7, #8
 8004e44:	2200      	movs	r2, #0
 8004e46:	4619      	mov	r1, r3
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <_ZN10Components10init_DAC_2Ev+0xa4>)
 8004e4a:	f003 fd7f 	bl	800894c <HAL_DAC_ConfigChannel>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fb00 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8004e64:	4804      	ldr	r0, [pc, #16]	; (8004e78 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8004e66:	f011 f849 	bl	8015efc <iprintf>

	  }


}
 8004e6a:	bf00      	nop
 8004e6c:	3738      	adds	r7, #56	; 0x38
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	50000c00 	.word	0x50000c00
 8004e78:	08018460 	.word	0x08018460
 8004e7c:	200004a0 	.word	0x200004a0

08004e80 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08e      	sub	sp, #56	; 0x38
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004e88:	f107 0308 	add.w	r3, r7, #8
 8004e8c:	2230      	movs	r2, #48	; 0x30
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f010 fbc1 	bl	8015618 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <_ZN10Components10init_DAC_3Ev+0x9c>)
 8004e9c:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 fd2f 	bl	8008906 <HAL_DAC_Init>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fad3 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004ebe:	4818      	ldr	r0, [pc, #96]	; (8004f20 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004ec0:	f011 f81c 	bl	8015efc <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004edc:	2302      	movs	r3, #2
 8004ede:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f107 0108 	add.w	r1, r7, #8
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f003 fd2a 	bl	800894c <HAL_DAC_ConfigChannel>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf14      	ite	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	2300      	moveq	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff faab 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004f0e:	4804      	ldr	r0, [pc, #16]	; (8004f20 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004f10:	f010 fff4 	bl	8015efc <iprintf>

	  }



}
 8004f14:	bf00      	nop
 8004f16:	3738      	adds	r7, #56	; 0x38
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	50001000 	.word	0x50001000
 8004f20:	08018478 	.word	0x08018478

08004f24 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	2230      	movs	r2, #48	; 0x30
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f010 fb6f 	bl	8015618 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <_ZN10Components10init_DAC_4Ev+0x9c>)
 8004f40:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f003 fcdd 	bl	8008906 <HAL_DAC_Init>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fa81 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004f62:	4818      	ldr	r0, [pc, #96]	; (8004fc4 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004f64:	f010 ffca 	bl	8015efc <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004f80:	2302      	movs	r3, #2
 8004f82:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004f84:	2302      	movs	r3, #2
 8004f86:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f107 0108 	add.w	r1, r7, #8
 8004f94:	2200      	movs	r2, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 fcd8 	bl	800894c <HAL_DAC_ConfigChannel>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf14      	ite	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	2300      	moveq	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fa59 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004fb2:	4804      	ldr	r0, [pc, #16]	; (8004fc4 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004fb4:	f010 ffa2 	bl	8015efc <iprintf>

	  }


}
 8004fb8:	bf00      	nop
 8004fba:	3738      	adds	r7, #56	; 0x38
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	50001400 	.word	0x50001400
 8004fc4:	08018490 	.word	0x08018490

08004fc8 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <_ZN10Components9init_OA_1Ev+0x80>)
 8004fd6:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2200      	movs	r2, #0
 8004fde:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	2240      	movs	r2, #64	; 0x40
 8004fe6:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2200      	movs	r2, #0
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2200      	movs	r2, #0
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2200      	movs	r2, #0
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	4618      	mov	r0, r3
 800501e:	f005 ff21 	bl	800ae64 <HAL_OPAMP_Init>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fa16 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 8005038:	4804      	ldr	r0, [pc, #16]	; (800504c <_ZN10Components9init_OA_1Ev+0x84>)
 800503a:	f010 ff5f 	bl	8015efc <iprintf>
	  }


}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40010300 	.word	0x40010300
 800504c:	080184a8 	.word	0x080184a8

08005050 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <_ZN10Components9init_OA_2Ev+0x80>)
 800505e:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	2201      	movs	r2, #1
 800507e:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	2200      	movs	r2, #0
 800508e:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	2200      	movs	r2, #0
 80050a0:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	4618      	mov	r0, r3
 80050a8:	f005 fedc 	bl	800ae64 <HAL_OPAMP_Init>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff f9d1 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 80050c2:	4804      	ldr	r0, [pc, #16]	; (80050d4 <_ZN10Components9init_OA_2Ev+0x84>)
 80050c4:	f010 ff1a 	bl	8015efc <iprintf>

	    }


}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40010304 	.word	0x40010304
 80050d4:	080184c0 	.word	0x080184c0

080050d8 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <_ZN10Components9init_OA_3Ev+0x80>)
 80050e6:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2240      	movs	r2, #64	; 0x40
 80050f6:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	2200      	movs	r2, #0
 80050fe:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	2201      	movs	r2, #1
 8005106:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	2200      	movs	r2, #0
 800510e:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	2200      	movs	r2, #0
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	2200      	movs	r2, #0
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2200      	movs	r2, #0
 8005126:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4618      	mov	r0, r3
 800512e:	f005 fe99 	bl	800ae64 <HAL_OPAMP_Init>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff f98e 	bl	8004464 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 8005148:	4804      	ldr	r0, [pc, #16]	; (800515c <_ZN10Components9init_OA_3Ev+0x84>)
 800514a:	f010 fed7 	bl	8015efc <iprintf>

	   }

}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40010308 	.word	0x40010308
 800515c:	080184d8 	.word	0x080184d8

08005160 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <_ZN10Components9init_OA_4Ev+0x80>)
 800516e:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2200      	movs	r2, #0
 8005186:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	2201      	movs	r2, #1
 800518e:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	2200      	movs	r2, #0
 8005196:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2200      	movs	r2, #0
 800519e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2200      	movs	r2, #0
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 fe54 	bl	800ae64 <HAL_OPAMP_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff f949 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 80051d2:	4804      	ldr	r0, [pc, #16]	; (80051e4 <_ZN10Components9init_OA_4Ev+0x84>)
 80051d4:	f010 fe92 	bl	8015efc <iprintf>

	  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	4001030c 	.word	0x4001030c
 80051e4:	080184f0 	.word	0x080184f0

080051e8 <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <_ZN10Components9init_OA_5Ev+0x80>)
 80051f6:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	2200      	movs	r2, #0
 80051fe:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	2240      	movs	r2, #64	; 0x40
 8005206:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	2200      	movs	r2, #0
 800520e:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	2201      	movs	r2, #1
 8005216:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	2200      	movs	r2, #0
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	2200      	movs	r2, #0
 8005238:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	4618      	mov	r0, r3
 8005240:	f005 fe10 	bl	800ae64 <HAL_OPAMP_Init>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff f905 	bl	8004464 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 800525a:	4804      	ldr	r0, [pc, #16]	; (800526c <_ZN10Components9init_OA_5Ev+0x84>)
 800525c:	f010 fe4e 	bl	8015efc <iprintf>

	  }

}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40010310 	.word	0x40010310
 800526c:	08018508 	.word	0x08018508

08005270 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8005290:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000674 	.word	0x20000674

080052a4 <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	return &hadc5;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <_ZN10Components9get_ADC_5Ev+0x18>)

}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200006e0 	.word	0x200006e0

080052c0 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor){
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	609a      	str	r2, [r3, #8]

}
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <_ZN8Debugger16displayDebugInfoEv>:


void Debugger::displayDebugInfo(void){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]


	if(HAL_GetTick() % 100 == 0){
 80052f8:	f001 fa90 	bl	800681c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b9e      	ldr	r3, [pc, #632]	; (8005578 <_ZN8Debugger16displayDebugInfoEv+0x288>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8128 	beq.w	800556e <_ZN8Debugger16displayDebugInfoEv+0x27e>


		printf("Left joystick Y: %f \r\n", this->_sbus->getLeftY());
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe fdf8 	bl	8003f18 <_ZN4SBUS8getLeftYEv>
 8005328:	ee10 3a10 	vmov	r3, s0
 800532c:	4618      	mov	r0, r3
 800532e:	f7fb f933 	bl	8000598 <__aeabi_f2d>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4891      	ldr	r0, [pc, #580]	; (800557c <_ZN8Debugger16displayDebugInfoEv+0x28c>)
 8005338:	f010 fde0 	bl	8015efc <iprintf>
		printf("\r\n");
 800533c:	4890      	ldr	r0, [pc, #576]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 800533e:	f010 fe63 	bl	8016008 <puts>

		printf("Left joystick X: %f \r\n", this->_sbus->getLeftX());
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fe38 	bl	8003fbc <_ZN4SBUS8getLeftXEv>
 800534c:	ee10 3a10 	vmov	r3, s0
 8005350:	4618      	mov	r0, r3
 8005352:	f7fb f921 	bl	8000598 <__aeabi_f2d>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	488a      	ldr	r0, [pc, #552]	; (8005584 <_ZN8Debugger16displayDebugInfoEv+0x294>)
 800535c:	f010 fdce 	bl	8015efc <iprintf>
		printf("\r\n");
 8005360:	4887      	ldr	r0, [pc, #540]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 8005362:	f010 fe51 	bl	8016008 <puts>

		printf("Right joystick Y:%f \r\n", this->_sbus->getRightY());
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fe8e 	bl	800408c <_ZN4SBUS9getRightYEv>
 8005370:	ee10 3a10 	vmov	r3, s0
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb f90f 	bl	8000598 <__aeabi_f2d>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4882      	ldr	r0, [pc, #520]	; (8005588 <_ZN8Debugger16displayDebugInfoEv+0x298>)
 8005380:	f010 fdbc 	bl	8015efc <iprintf>
		printf("\r\n");
 8005384:	487e      	ldr	r0, [pc, #504]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 8005386:	f010 fe3f 	bl	8016008 <puts>

		printf("Right joystick X: %f \r\n", this->_sbus->getRightX());
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fee4 	bl	800415c <_ZN4SBUS9getRightXEv>
 8005394:	ee10 3a10 	vmov	r3, s0
 8005398:	4618      	mov	r0, r3
 800539a:	f7fb f8fd 	bl	8000598 <__aeabi_f2d>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	487a      	ldr	r0, [pc, #488]	; (800558c <_ZN8Debugger16displayDebugInfoEv+0x29c>)
 80053a4:	f010 fdaa 	bl	8015efc <iprintf>

		printf("Jogwheel: %f \r\n", this->_sbus->getJogWheel());
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe ff3d 	bl	800422c <_ZN4SBUS11getJogWheelEv>
 80053b2:	ee10 3a10 	vmov	r3, s0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb f8ee 	bl	8000598 <__aeabi_f2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4873      	ldr	r0, [pc, #460]	; (8005590 <_ZN8Debugger16displayDebugInfoEv+0x2a0>)
 80053c2:	f010 fd9b 	bl	8015efc <iprintf>


		printf("LedPWM: %d\r\n", this->_convertor->get_LEDPWM());
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc f8ae 	bl	800152c <_ZN9Convertor10get_LEDPWMEv>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4619      	mov	r1, r3
 80053d4:	486f      	ldr	r0, [pc, #444]	; (8005594 <_ZN8Debugger16displayDebugInfoEv+0x2a4>)
 80053d6:	f010 fd91 	bl	8015efc <iprintf>
		printf("selectorPWM: %d\r\n", this->_convertor->get_selectorPWM());
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fc f870 	bl	80014c4 <_ZN9Convertor15get_selectorPWMEv>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4619      	mov	r1, r3
 80053e8:	486b      	ldr	r0, [pc, #428]	; (8005598 <_ZN8Debugger16displayDebugInfoEv+0x2a8>)
 80053ea:	f010 fd87 	bl	8015efc <iprintf>
		printf("push motor PWM: %d \r\n", this->_convertor->get_pushPWM());
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fc f880 	bl	80014f8 <_ZN9Convertor11get_pushPWMEv>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4619      	mov	r1, r3
 80053fc:	4867      	ldr	r0, [pc, #412]	; (800559c <_ZN8Debugger16displayDebugInfoEv+0x2ac>)
 80053fe:	f010 fd7d 	bl	8015efc <iprintf>
		printf("fluid motor PWM: %d \r\n", this->_convertor->get_fluidPWM());
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fc f869 	bl	80014de <_ZN9Convertor12get_fluidPWMEv>
 800540c:	4603      	mov	r3, r0
 800540e:	4619      	mov	r1, r3
 8005410:	4863      	ldr	r0, [pc, #396]	; (80055a0 <_ZN8Debugger16displayDebugInfoEv+0x2b0>)
 8005412:	f010 fd73 	bl	8015efc <iprintf>
		printf("cleaner motor PWM: %d \r\n", this->_convertor->get_cleanerMotorPWM());
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fc f879 	bl	8001512 <_ZN9Convertor19get_cleanerMotorPWMEv>
 8005420:	4603      	mov	r3, r0
 8005422:	4619      	mov	r1, r3
 8005424:	485f      	ldr	r0, [pc, #380]	; (80055a4 <_ZN8Debugger16displayDebugInfoEv+0x2b4>)
 8005426:	f010 fd69 	bl	8015efc <iprintf>
		printf("\r\n");
 800542a:	4855      	ldr	r0, [pc, #340]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 800542c:	f010 fdec 	bl	8016008 <puts>

		printf("selector position %d \r\n", this->_convertor->get_selector_position());
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fc f887 	bl	8001548 <_ZN9Convertor21get_selector_positionEv>
 800543a:	4603      	mov	r3, r0
 800543c:	4619      	mov	r1, r3
 800543e:	485a      	ldr	r0, [pc, #360]	; (80055a8 <_ZN8Debugger16displayDebugInfoEv+0x2b8>)
 8005440:	f010 fd5c 	bl	8015efc <iprintf>
		printf("fluid position %d \r\n", this->_convertor->get_fluidPosition());
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fc f89d 	bl	8001588 <_ZN9Convertor17get_fluidPositionEv>
 800544e:	4603      	mov	r3, r0
 8005450:	4619      	mov	r1, r3
 8005452:	4856      	ldr	r0, [pc, #344]	; (80055ac <_ZN8Debugger16displayDebugInfoEv+0x2bc>)
 8005454:	f010 fd52 	bl	8015efc <iprintf>
		printf("push position %d \r\n", this->_convertor->get_pushPosition());
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fc f8b3 	bl	80015c8 <_ZN9Convertor16get_pushPositionEv>
 8005462:	4603      	mov	r3, r0
 8005464:	4619      	mov	r1, r3
 8005466:	4852      	ldr	r0, [pc, #328]	; (80055b0 <_ZN8Debugger16displayDebugInfoEv+0x2c0>)
 8005468:	f010 fd48 	bl	8015efc <iprintf>

		printf("\r\n");
 800546c:	4844      	ldr	r0, [pc, #272]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 800546e:	f010 fdcb 	bl	8016008 <puts>


		printf("led current:  %d \r\n", this->_convertor->get_LEDCurrent());
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc f8c6 	bl	8001608 <_ZN9Convertor14get_LEDCurrentEv>
 800547c:	4603      	mov	r3, r0
 800547e:	4619      	mov	r1, r3
 8005480:	484c      	ldr	r0, [pc, #304]	; (80055b4 <_ZN8Debugger16displayDebugInfoEv+0x2c4>)
 8005482:	f010 fd3b 	bl	8015efc <iprintf>
		printf("fluid actuator current: %d \r\n", this->_convertor->get_fluidCurrent());
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc f8dc 	bl	8001648 <_ZN9Convertor16get_fluidCurrentEv>
 8005490:	4603      	mov	r3, r0
 8005492:	4619      	mov	r1, r3
 8005494:	4848      	ldr	r0, [pc, #288]	; (80055b8 <_ZN8Debugger16displayDebugInfoEv+0x2c8>)
 8005496:	f010 fd31 	bl	8015efc <iprintf>
		printf("push motor current: %d \r\n", this->_convertor->get_pushCurrent());
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fc f8f2 	bl	8001688 <_ZN9Convertor15get_pushCurrentEv>
 80054a4:	4603      	mov	r3, r0
 80054a6:	4619      	mov	r1, r3
 80054a8:	4844      	ldr	r0, [pc, #272]	; (80055bc <_ZN8Debugger16displayDebugInfoEv+0x2cc>)
 80054aa:	f010 fd27 	bl	8015efc <iprintf>
		printf("selector motor current: %d \r\n", this->_convertor->get_selectorCurrent());
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc f908 	bl	80016c8 <_ZN9Convertor19get_selectorCurrentEv>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4619      	mov	r1, r3
 80054bc:	4840      	ldr	r0, [pc, #256]	; (80055c0 <_ZN8Debugger16displayDebugInfoEv+0x2d0>)
 80054be:	f010 fd1d 	bl	8015efc <iprintf>

		printf("\r\n");
 80054c2:	482f      	ldr	r0, [pc, #188]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 80054c4:	f010 fda0 	bl	8016008 <puts>


		printf("flight time %d \r\n", _mavlink->getFlightTime());
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe fb7d 	bl	8003bcc <_ZN14MavlinkControl13getFlightTimeEv>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4619      	mov	r1, r3
 80054d6:	483b      	ldr	r0, [pc, #236]	; (80055c4 <_ZN8Debugger16displayDebugInfoEv+0x2d4>)
 80054d8:	f010 fd10 	bl	8015efc <iprintf>

		printf("\r\n");
 80054dc:	4828      	ldr	r0, [pc, #160]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 80054de:	f010 fd93 	bl	8016008 <puts>

		printf("Mavlink start of message: %d \r\n", _mavlink->_mavlink_received_header.magic);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80054ea:	4619      	mov	r1, r3
 80054ec:	4836      	ldr	r0, [pc, #216]	; (80055c8 <_ZN8Debugger16displayDebugInfoEv+0x2d8>)
 80054ee:	f010 fd05 	bl	8015efc <iprintf>
		printf("Mavlink payload length: %d \r\n", _mavlink->_mavlink_received_header.len);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 80054fa:	4619      	mov	r1, r3
 80054fc:	4833      	ldr	r0, [pc, #204]	; (80055cc <_ZN8Debugger16displayDebugInfoEv+0x2dc>)
 80054fe:	f010 fcfd 	bl	8015efc <iprintf>
		printf("Mavlink incompat flags: %d \r\n", _mavlink->_mavlink_received_header.incompat_flags);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 800550a:	4619      	mov	r1, r3
 800550c:	4830      	ldr	r0, [pc, #192]	; (80055d0 <_ZN8Debugger16displayDebugInfoEv+0x2e0>)
 800550e:	f010 fcf5 	bl	8015efc <iprintf>
		printf("Mavlink compat flags: %d \r\n", _mavlink->_mavlink_received_header.compat_flags);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f893 351b 	ldrb.w	r3, [r3, #1307]	; 0x51b
 800551a:	4619      	mov	r1, r3
 800551c:	482d      	ldr	r0, [pc, #180]	; (80055d4 <_ZN8Debugger16displayDebugInfoEv+0x2e4>)
 800551e:	f010 fced 	bl	8015efc <iprintf>
		printf("Mavlink seq: %d \r\n", _mavlink->_mavlink_received_header.seq);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800552a:	4619      	mov	r1, r3
 800552c:	482a      	ldr	r0, [pc, #168]	; (80055d8 <_ZN8Debugger16displayDebugInfoEv+0x2e8>)
 800552e:	f010 fce5 	bl	8015efc <iprintf>
		printf("Mavlink sys id: %d \r\n", _mavlink->_mavlink_received_header.sysid);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 800553a:	4619      	mov	r1, r3
 800553c:	4827      	ldr	r0, [pc, #156]	; (80055dc <_ZN8Debugger16displayDebugInfoEv+0x2ec>)
 800553e:	f010 fcdd 	bl	8015efc <iprintf>
		printf("Mavlink comp id: %d \r\n", _mavlink->_mavlink_received_header.compid);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800554a:	4619      	mov	r1, r3
 800554c:	4824      	ldr	r0, [pc, #144]	; (80055e0 <_ZN8Debugger16displayDebugInfoEv+0x2f0>)
 800554e:	f010 fcd5 	bl	8015efc <iprintf>
		printf("Mavlink msg id: %d \r\n", _mavlink->_mavlink_received_header.msgid);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 800555a:	4619      	mov	r1, r3
 800555c:	4821      	ldr	r0, [pc, #132]	; (80055e4 <_ZN8Debugger16displayDebugInfoEv+0x2f4>)
 800555e:	f010 fccd 	bl	8015efc <iprintf>

		printf("\r\n");
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 8005564:	f010 fd50 	bl	8016008 <puts>
		printf("\r\n");
 8005568:	4805      	ldr	r0, [pc, #20]	; (8005580 <_ZN8Debugger16displayDebugInfoEv+0x290>)
 800556a:	f010 fd4d 	bl	8016008 <puts>


	}


}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	51eb851f 	.word	0x51eb851f
 800557c:	08018520 	.word	0x08018520
 8005580:	08018538 	.word	0x08018538
 8005584:	0801853c 	.word	0x0801853c
 8005588:	08018554 	.word	0x08018554
 800558c:	0801856c 	.word	0x0801856c
 8005590:	08018584 	.word	0x08018584
 8005594:	08018594 	.word	0x08018594
 8005598:	080185a4 	.word	0x080185a4
 800559c:	080185b8 	.word	0x080185b8
 80055a0:	080185d0 	.word	0x080185d0
 80055a4:	080185e8 	.word	0x080185e8
 80055a8:	08018604 	.word	0x08018604
 80055ac:	0801861c 	.word	0x0801861c
 80055b0:	08018634 	.word	0x08018634
 80055b4:	08018648 	.word	0x08018648
 80055b8:	0801865c 	.word	0x0801865c
 80055bc:	0801867c 	.word	0x0801867c
 80055c0:	08018698 	.word	0x08018698
 80055c4:	080186b8 	.word	0x080186b8
 80055c8:	080186cc 	.word	0x080186cc
 80055cc:	080186ec 	.word	0x080186ec
 80055d0:	0801870c 	.word	0x0801870c
 80055d4:	0801872c 	.word	0x0801872c
 80055d8:	08018748 	.word	0x08018748
 80055dc:	0801875c 	.word	0x0801875c
 80055e0:	08018774 	.word	0x08018774
 80055e4:	0801878c 	.word	0x0801878c

080055e8 <main>:
//UART HANDLES IN MAIN FOR NOW, DMA HANDLES are created in stm32g4xx_hal_msp.c file
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


int main(void){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	f5ad 6dfa 	sub.w	sp, sp, #2000	; 0x7d0
 80055ee:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 80055f0:	f001 f8af 	bl	8006752 <HAL_Init>
	//Initialize clock/DMA/... configurations and components.
	HAL_Delay(100);
 80055f4:	2064      	movs	r0, #100	; 0x64
 80055f6:	f001 f91d 	bl	8006834 <HAL_Delay>
	Initializer init(&huart1, &huart2);
 80055fa:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80055fe:	4a48      	ldr	r2, [pc, #288]	; (8005720 <main+0x138>)
 8005600:	4948      	ldr	r1, [pc, #288]	; (8005724 <main+0x13c>)
 8005602:	4618      	mov	r0, r3
 8005604:	f7fc f89a 	bl	800173c <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8005608:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800560c:	4618      	mov	r0, r3
 800560e:	f7fc f8b1 	bl	8001774 <_ZN11Initializer12init_ConfigsEv>

	Components components;
 8005612:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8005616:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800561a:	4a43      	ldr	r2, [pc, #268]	; (8005728 <main+0x140>)
 800561c:	4618      	mov	r0, r3
 800561e:	4611      	mov	r1, r2
 8005620:	2344      	movs	r3, #68	; 0x44
 8005622:	461a      	mov	r2, r3
 8005624:	f00f ffea 	bl	80155fc <memcpy>
	components.init_Components();
 8005628:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe ff39 	bl	80044a4 <_ZN10Components15init_ComponentsEv>

	HAL_Delay(100);
 8005632:	2064      	movs	r0, #100	; 0x64
 8005634:	f001 f8fe 	bl	8006834 <HAL_Delay>
	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8005638:	f207 5374 	addw	r3, r7, #1396	; 0x574
 800563c:	4938      	ldr	r1, [pc, #224]	; (8005720 <main+0x138>)
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fad6 	bl	8003bf0 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1, init.get_i2c());
 8005644:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8005648:	4618      	mov	r0, r3
 800564a:	f7fd f95f 	bl	800290c <_ZN11Initializer7get_i2cEv>
 800564e:	4602      	mov	r2, r0
 8005650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005654:	4933      	ldr	r1, [pc, #204]	; (8005724 <main+0x13c>)
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe f8e2 	bl	8003820 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 800565c:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 8005660:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8005664:	f207 5174 	addw	r1, r7, #1396	; 0x574
 8005668:	f107 0014 	add.w	r0, r7, #20
 800566c:	f7fb fc66 	bl	8000f3c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Debugger debugger(&sbus, &mavlink, &convertor);
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005678:	f207 5174 	addw	r1, r7, #1396	; 0x574
 800567c:	f107 0008 	add.w	r0, r7, #8
 8005680:	f7ff fe1e 	bl	80052c0 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>

	//Altimeter altimeter(init.get_i2c());

	HAL_Delay(100);
 8005684:	2064      	movs	r0, #100	; 0x64
 8005686:	f001 f8d5 	bl	8006834 <HAL_Delay>
	//altimeter.init_altimeter();

	printf(" sanity check \r \n");
 800568a:	4828      	ldr	r0, [pc, #160]	; (800572c <main+0x144>)
 800568c:	f010 fcbc 	bl	8016008 <puts>



	/* Main loop */
	while (1){
		uint8_t data[] = {0x01, 0x02, 0x03};
 8005690:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8005694:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8005698:	4a25      	ldr	r2, [pc, #148]	; (8005730 <main+0x148>)
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	4611      	mov	r1, r2
 800569e:	8019      	strh	r1, [r3, #0]
 80056a0:	3302      	adds	r3, #2
 80056a2:	0c12      	lsrs	r2, r2, #16
 80056a4:	701a      	strb	r2, [r3, #0]
		uint8_t address = 0x50;
 80056a6:	2350      	movs	r3, #80	; 0x50
 80056a8:	f887 37cf 	strb.w	r3, [r7, #1999]	; 0x7cf
		HAL_I2C_Master_Transmit_IT(&hi2c2, address, data, 3);
 80056ac:	f897 37cf 	ldrb.w	r3, [r7, #1999]	; 0x7cf
 80056b0:	b299      	uxth	r1, r3
 80056b2:	1d3a      	adds	r2, r7, #4
 80056b4:	2303      	movs	r3, #3
 80056b6:	481f      	ldr	r0, [pc, #124]	; (8005734 <main+0x14c>)
 80056b8:	f004 f874 	bl	80097a4 <HAL_I2C_Master_Transmit_IT>
		//signal led
		if(HAL_GetTick() % 1000 == 0){
 80056bc:	f001 f8ae 	bl	800681c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <main+0x150>)
 80056c4:	fba3 1302 	umull	r1, r3, r3, r2
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <main+0x104>

			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 80056e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056e6:	4815      	ldr	r0, [pc, #84]	; (800573c <main+0x154>)
 80056e8:	f003 ffb2 	bl	8009650 <HAL_GPIO_TogglePin>


		}

		  sbus.update();
 80056ec:	f207 5374 	addw	r3, r7, #1396	; 0x574
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fa9b 	bl	8003c2c <_ZN4SBUS6updateEv>
		  convertor.process();
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc f804 	bl	8001708 <_ZN9Convertor7processEv>
		  mavlink.update_TX();
 8005700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe f913 	bl	8003930 <_ZN14MavlinkControl9update_TXEv>
		  mavlink.update_RX();
 800570a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe f8fc 	bl	800390c <_ZN14MavlinkControl9update_RXEv>
		  //mavlink.readFlightTime();
		  //debugger.displayMavlink_header();
		  //debugger.displaySBUS_channels();
		  debugger.displayDebugInfo();
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fde9 	bl	80052f0 <_ZN8Debugger16displayDebugInfoEv>
		  //debugger.displayMavlink_RAW();



	}
 800571e:	e7b7      	b.n	8005690 <main+0xa8>
 8005720:	20000828 	.word	0x20000828
 8005724:	20000798 	.word	0x20000798
 8005728:	080187f4 	.word	0x080187f4
 800572c:	080187e0 	.word	0x080187e0
 8005730:	08018838 	.word	0x08018838
 8005734:	2000074c 	.word	0x2000074c
 8005738:	10624dd3 	.word	0x10624dd3
 800573c:	48000800 	.word	0x48000800

08005740 <Error_Handler>:
}




void Error_Handler(void){
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005746:	2300      	movs	r3, #0
 8005748:	71fb      	strb	r3, [r7, #7]
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b1d      	cmp	r3, #29
 800574e:	d80e      	bhi.n	800576e <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8005750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005754:	4808      	ldr	r0, [pc, #32]	; (8005778 <Error_Handler+0x38>)
 8005756:	f003 ff7b 	bl	8009650 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 800575a:	4808      	ldr	r0, [pc, #32]	; (800577c <Error_Handler+0x3c>)
 800575c:	f010 fc54 	bl	8016008 <puts>
		HAL_Delay(100);
 8005760:	2064      	movs	r0, #100	; 0x64
 8005762:	f001 f867 	bl	8006834 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	3301      	adds	r3, #1
 800576a:	71fb      	strb	r3, [r7, #7]
 800576c:	e7ed      	b.n	800574a <Error_Handler+0xa>
	}

}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	48000800 	.word	0x48000800
 800577c:	0801883c 	.word	0x0801883c

08005780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_MspInit+0x44>)
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <HAL_MspInit+0x44>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6613      	str	r3, [r2, #96]	; 0x60
 8005792:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <HAL_MspInit+0x44>)
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <HAL_MspInit+0x44>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <HAL_MspInit+0x44>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_MspInit+0x44>)
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000

080057c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b0a2      	sub	sp, #136	; 0x88
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057e0:	f107 0320 	add.w	r3, r7, #32
 80057e4:	2254      	movs	r2, #84	; 0x54
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f00f ff15 	bl	8015618 <memset>
  if(hadc->Instance==ADC1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f6:	f040 8086 	bne.w	8005906 <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80057fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005800:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005804:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005806:	f107 0320 	add.w	r3, r7, #32
 800580a:	4618      	mov	r0, r3
 800580c:	f008 f85c 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005816:	f7ff ff93 	bl	8005740 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800581a:	4b8e      	ldr	r3, [pc, #568]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	4a8c      	ldr	r2, [pc, #560]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 8005822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005824:	4b8b      	ldr	r3, [pc, #556]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10b      	bne.n	8005844 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800582c:	4b8a      	ldr	r3, [pc, #552]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 800582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005830:	4a89      	ldr	r2, [pc, #548]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005838:	4b87      	ldr	r3, [pc, #540]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 800583a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005844:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005850:	4b81      	ldr	r3, [pc, #516]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800585c:	4b7e      	ldr	r3, [pc, #504]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 800585e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005860:	4a7d      	ldr	r2, [pc, #500]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005868:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8005874:	2301      	movs	r3, #1
 8005876:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005878:	2303      	movs	r3, #3
 800587a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587c:	2300      	movs	r3, #0
 800587e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8005880:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588a:	f003 fd47 	bl	800931c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 800588e:	f641 0302 	movw	r3, #6146	; 0x1802
 8005892:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005894:	2303      	movs	r3, #3
 8005896:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005898:	2300      	movs	r3, #0
 800589a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800589c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80058a0:	4619      	mov	r1, r3
 80058a2:	486e      	ldr	r0, [pc, #440]	; (8005a5c <HAL_ADC_MspInit+0x294>)
 80058a4:	f003 fd3a 	bl	800931c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80058a8:	4b6d      	ldr	r3, [pc, #436]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058aa:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <HAL_ADC_MspInit+0x29c>)
 80058ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80058ae:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058b0:	2205      	movs	r2, #5
 80058b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058ba:	4b69      	ldr	r3, [pc, #420]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058bc:	2200      	movs	r2, #0
 80058be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80058c0:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058c6:	4b66      	ldr	r3, [pc, #408]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058ce:	4b64      	ldr	r3, [pc, #400]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80058d6:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058d8:	2200      	movs	r2, #0
 80058da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80058dc:	4b60      	ldr	r3, [pc, #384]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058de:	2200      	movs	r2, #0
 80058e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80058e2:	485f      	ldr	r0, [pc, #380]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058e4:	f003 f9da 	bl	8008c9c <HAL_DMA_Init>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80058ee:	f7ff ff27 	bl	8005740 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a5a      	ldr	r2, [pc, #360]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
 80058f8:	4a59      	ldr	r2, [pc, #356]	; (8005a60 <HAL_ADC_MspInit+0x298>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 80058fe:	485a      	ldr	r0, [pc, #360]	; (8005a68 <HAL_ADC_MspInit+0x2a0>)
 8005900:	f010 fb82 	bl	8016008 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8005904:	e0a1      	b.n	8005a4a <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC2)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <HAL_ADC_MspInit+0x2a4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d150      	bne.n	80059b2 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005914:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005916:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800591a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800591c:	f107 0320 	add.w	r3, r7, #32
 8005920:	4618      	mov	r0, r3
 8005922:	f007 ffd1 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 800592c:	f7ff ff08 	bl	8005740 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005930:	4b48      	ldr	r3, [pc, #288]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a47      	ldr	r2, [pc, #284]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 8005938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800593a:	4b46      	ldr	r3, [pc, #280]	; (8005a54 <HAL_ADC_MspInit+0x28c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10b      	bne.n	800595a <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005942:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	4a44      	ldr	r2, [pc, #272]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800594c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800594e:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 800595c:	4a45      	ldr	r2, [pc, #276]	; (8005a74 <HAL_ADC_MspInit+0x2ac>)
 800595e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005966:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800596c:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 800596e:	2200      	movs	r2, #0
 8005970:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005972:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 800597a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800597e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005980:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005986:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 800598a:	2200      	movs	r2, #0
 800598c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800598e:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005990:	2200      	movs	r2, #0
 8005992:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005994:	4836      	ldr	r0, [pc, #216]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 8005996:	f003 f981 	bl	8008c9c <HAL_DMA_Init>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80059a0:	f7ff fece 	bl	8005740 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
 80059aa:	4a31      	ldr	r2, [pc, #196]	; (8005a70 <HAL_ADC_MspInit+0x2a8>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6293      	str	r3, [r2, #40]	; 0x28
}
 80059b0:	e04b      	b.n	8005a4a <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC5)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a30      	ldr	r2, [pc, #192]	; (8005a78 <HAL_ADC_MspInit+0x2b0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d146      	bne.n	8005a4a <HAL_ADC_MspInit+0x282>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80059bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80059c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059c8:	f107 0320 	add.w	r3, r7, #32
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 ff7b 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_ADC_MspInit+0x214>
      Error_Handler();
 80059d8:	f7ff feb2 	bl	8005740 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80059dc:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 80059de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 80059e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <HAL_ADC_MspInit+0x290>)
 80059ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 80059f6:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_ADC_MspInit+0x2b8>)
 80059f8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80059fa:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 80059fc:	2227      	movs	r2, #39	; 0x27
 80059fe:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a00:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a0e:	2280      	movs	r2, #128	; 0x80
 8005a10:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a12:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a18:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a1a:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a20:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a30:	f003 f934 	bl	8008c9c <HAL_DMA_Init>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_ADC_MspInit+0x276>
      Error_Handler();
 8005a3a:	f7ff fe81 	bl	8005740 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0e      	ldr	r2, [pc, #56]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <HAL_ADC_MspInit+0x2b4>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005a4a:	bf00      	nop
 8005a4c:	3788      	adds	r7, #136	; 0x88
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000a98 	.word	0x20000a98
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	200008b8 	.word	0x200008b8
 8005a64:	4002001c 	.word	0x4002001c
 8005a68:	08018860 	.word	0x08018860
 8005a6c:	50000100 	.word	0x50000100
 8005a70:	20000918 	.word	0x20000918
 8005a74:	40020030 	.word	0x40020030
 8005a78:	50000600 	.word	0x50000600
 8005a7c:	20000978 	.word	0x20000978
 8005a80:	40020044 	.word	0x40020044

08005a84 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	; 0x30
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 031c 	add.w	r3, r7, #28
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3d      	ldr	r2, [pc, #244]	; (8005b98 <HAL_COMP_MspInit+0x114>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d119      	bne.n	8005ada <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	4b3d      	ldr	r3, [pc, #244]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ab2:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aca:	f107 031c 	add.w	r3, r7, #28
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad4:	f003 fc22 	bl	800931c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8005ad8:	e05a      	b.n	8005b90 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <HAL_COMP_MspInit+0x11c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d118      	bne.n	8005b16 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae4:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	4a2c      	ldr	r2, [pc, #176]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005aea:	f043 0302 	orr.w	r3, r3, #2
 8005aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005af0:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8005afc:	2301      	movs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b00:	2303      	movs	r3, #3
 8005b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8005b08:	f107 031c 	add.w	r3, r7, #28
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4825      	ldr	r0, [pc, #148]	; (8005ba4 <HAL_COMP_MspInit+0x120>)
 8005b10:	f003 fc04 	bl	800931c <HAL_GPIO_Init>
}
 8005b14:	e03c      	b.n	8005b90 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <HAL_COMP_MspInit+0x124>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d119      	bne.n	8005b54 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b26:	f043 0302 	orr.w	r3, r3, #2
 8005b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8005b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8005b46:	f107 031c 	add.w	r3, r7, #28
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4815      	ldr	r0, [pc, #84]	; (8005ba4 <HAL_COMP_MspInit+0x120>)
 8005b4e:	f003 fbe5 	bl	800931c <HAL_GPIO_Init>
}
 8005b52:	e01d      	b.n	8005b90 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a14      	ldr	r2, [pc, #80]	; (8005bac <HAL_COMP_MspInit+0x128>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d118      	bne.n	8005b90 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b62:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <HAL_COMP_MspInit+0x118>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8005b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8005b84:	f107 031c 	add.w	r3, r7, #28
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4806      	ldr	r0, [pc, #24]	; (8005ba4 <HAL_COMP_MspInit+0x120>)
 8005b8c:	f003 fbc6 	bl	800931c <HAL_GPIO_Init>
}
 8005b90:	bf00      	nop
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40010204 	.word	0x40010204
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	4001020c 	.word	0x4001020c
 8005ba4:	48000400 	.word	0x48000400
 8005ba8:	40010210 	.word	0x40010210
 8005bac:	40010218 	.word	0x40010218

08005bb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <HAL_DAC_MspInit+0xa4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10c      	bne.n	8005bdc <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005bc2:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bce:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8005bda:	e034      	b.n	8005c46 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_DAC_MspInit+0xac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10c      	bne.n	8005c00 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bf2:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
}
 8005bfe:	e022      	b.n	8005c46 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_DAC_MspInit+0xb0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10c      	bne.n	8005c24 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	e010      	b.n	8005c46 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <HAL_DAC_MspInit+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10b      	bne.n	8005c46 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <HAL_DAC_MspInit+0xa8>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	50000800 	.word	0x50000800
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	50000c00 	.word	0x50000c00
 8005c60:	50001000 	.word	0x50001000
 8005c64:	50001400 	.word	0x50001400

08005c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b09e      	sub	sp, #120	; 0x78
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	2254      	movs	r2, #84	; 0x54
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f00f fcc5 	bl	8015618 <memset>
  if(hi2c->Instance==I2C2)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <HAL_I2C_MspInit+0xc8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d147      	bne.n	8005d28 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f007 fe0f 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005cb0:	f7ff fd46 	bl	8005740 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb4:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb8:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ccc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cd0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cd2:	2312      	movs	r3, #18
 8005cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005cde:	2304      	movs	r3, #4
 8005ce0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ce2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cec:	f003 fb16 	bl	800931c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <HAL_I2C_MspInit+0xcc>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2021      	movs	r0, #33	; 0x21
 8005d0e:	f002 fdc6 	bl	800889e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005d12:	2021      	movs	r0, #33	; 0x21
 8005d14:	f002 fddd 	bl	80088d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	2022      	movs	r0, #34	; 0x22
 8005d1e:	f002 fdbe 	bl	800889e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005d22:	2022      	movs	r0, #34	; 0x22
 8005d24:	f002 fdd5 	bl	80088d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005d28:	bf00      	nop
 8005d2a:	3778      	adds	r7, #120	; 0x78
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40005800 	.word	0x40005800
 8005d34:	40021000 	.word	0x40021000

08005d38 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d40:	f107 031c 	add.w	r3, r7, #28
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	605a      	str	r2, [r3, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4d      	ldr	r2, [pc, #308]	; (8005e8c <HAL_OPAMP_MspInit+0x154>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d119      	bne.n	8005d8e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5a:	4b4d      	ldr	r3, [pc, #308]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5e:	4a4c      	ldr	r2, [pc, #304]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d66:	4b4a      	ldr	r3, [pc, #296]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 8005d72:	230a      	movs	r3, #10
 8005d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d76:	2303      	movs	r3, #3
 8005d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7e:	f107 031c 	add.w	r3, r7, #28
 8005d82:	4619      	mov	r1, r3
 8005d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d88:	f003 fac8 	bl	800931c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8005d8c:	e079      	b.n	8005e82 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a40      	ldr	r2, [pc, #256]	; (8005e94 <HAL_OPAMP_MspInit+0x15c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d119      	bne.n	8005dcc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d98:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9c:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005da4:	4b3a      	ldr	r3, [pc, #232]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005db0:	23a0      	movs	r3, #160	; 0xa0
 8005db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005db4:	2303      	movs	r3, #3
 8005db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbc:	f107 031c 	add.w	r3, r7, #28
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dc6:	f003 faa9 	bl	800931c <HAL_GPIO_Init>
}
 8005dca:	e05a      	b.n	8005e82 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <HAL_OPAMP_MspInit+0x160>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d118      	bne.n	8005e08 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dd6:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	4a2d      	ldr	r2, [pc, #180]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005ddc:	f043 0302 	orr.w	r3, r3, #2
 8005de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de2:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 8005dee:	2305      	movs	r3, #5
 8005df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005df2:	2303      	movs	r3, #3
 8005df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfa:	f107 031c 	add.w	r3, r7, #28
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4826      	ldr	r0, [pc, #152]	; (8005e9c <HAL_OPAMP_MspInit+0x164>)
 8005e02:	f003 fa8b 	bl	800931c <HAL_GPIO_Init>
}
 8005e06:	e03c      	b.n	8005e82 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <HAL_OPAMP_MspInit+0x168>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d119      	bne.n	8005e46 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e18:	f043 0302 	orr.w	r3, r3, #2
 8005e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e1e:	4b1c      	ldr	r3, [pc, #112]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8005e2a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e30:	2303      	movs	r3, #3
 8005e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4817      	ldr	r0, [pc, #92]	; (8005e9c <HAL_OPAMP_MspInit+0x164>)
 8005e40:	f003 fa6c 	bl	800931c <HAL_GPIO_Init>
}
 8005e44:	e01d      	b.n	8005e82 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_OPAMP_MspInit+0x16c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d118      	bne.n	8005e82 <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e54:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <HAL_OPAMP_MspInit+0x158>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8005e68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e76:	f107 031c 	add.w	r3, r7, #28
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4807      	ldr	r0, [pc, #28]	; (8005e9c <HAL_OPAMP_MspInit+0x164>)
 8005e7e:	f003 fa4d 	bl	800931c <HAL_GPIO_Init>
}
 8005e82:	bf00      	nop
 8005e84:	3730      	adds	r7, #48	; 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40010300 	.word	0x40010300
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40010304 	.word	0x40010304
 8005e98:	40010308 	.word	0x40010308
 8005e9c:	48000400 	.word	0x48000400
 8005ea0:	4001030c 	.word	0x4001030c
 8005ea4:	40010310 	.word	0x40010310

08005ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <HAL_TIM_Base_MspInit+0xec>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	4a36      	ldr	r2, [pc, #216]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8005ec6:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8005ed2:	e058      	b.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005edc:	d10c      	bne.n	8005ef8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ede:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	4a2d      	ldr	r2, [pc, #180]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8005eea:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
}
 8005ef6:	e046      	b.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a27      	ldr	r2, [pc, #156]	; (8005f9c <HAL_TIM_Base_MspInit+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f02:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0e:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]
}
 8005f1a:	e034      	b.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005f26:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f30:	6613      	str	r3, [r2, #96]	; 0x60
 8005f32:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
}
 8005f3e:	e022      	b.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <HAL_TIM_Base_MspInit+0xfc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10c      	bne.n	8005f64 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4e:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f54:	6613      	str	r3, [r2, #96]	; 0x60
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	e010      	b.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a0f      	ldr	r2, [pc, #60]	; (8005fa8 <HAL_TIM_Base_MspInit+0x100>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d10b      	bne.n	8005f86 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f78:	6613      	str	r3, [r2, #96]	; 0x60
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <HAL_TIM_Base_MspInit+0xf0>)
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
}
 8005f86:	bf00      	nop
 8005f88:	3724      	adds	r7, #36	; 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40015000 	.word	0x40015000

08005fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <HAL_TIM_PWM_MspInit+0x38>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005fc4:	f043 0302 	orr.w	r3, r3, #2
 8005fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40021000 	.word	0x40021000

08005fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08e      	sub	sp, #56	; 0x38
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a65      	ldr	r2, [pc, #404]	; (80061a0 <HAL_TIM_MspPostInit+0x1b4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d11c      	bne.n	8006048 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800600e:	4b65      	ldr	r3, [pc, #404]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006012:	4a64      	ldr	r2, [pc, #400]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006014:	f043 0320 	orr.w	r3, r3, #32
 8006018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800601a:	4b62      	ldr	r3, [pc, #392]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 800601c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8006026:	2301      	movs	r3, #1
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602a:	2302      	movs	r3, #2
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602e:	2300      	movs	r3, #0
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006032:	2300      	movs	r3, #0
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8006036:	2306      	movs	r3, #6
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 800603a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800603e:	4619      	mov	r1, r3
 8006040:	4859      	ldr	r0, [pc, #356]	; (80061a8 <HAL_TIM_MspPostInit+0x1bc>)
 8006042:	f003 f96b 	bl	800931c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8006046:	e0a6      	b.n	8006196 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a57      	ldr	r2, [pc, #348]	; (80061ac <HAL_TIM_MspPostInit+0x1c0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d11c      	bne.n	800608c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006052:	4b54      	ldr	r3, [pc, #336]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	4a53      	ldr	r2, [pc, #332]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800605e:	4b51      	ldr	r3, [pc, #324]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 800606a:	2330      	movs	r3, #48	; 0x30
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606e:	2302      	movs	r3, #2
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006072:	2300      	movs	r3, #0
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006076:	2300      	movs	r3, #0
 8006078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800607a:	2302      	movs	r3, #2
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800607e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006082:	4619      	mov	r1, r3
 8006084:	484a      	ldr	r0, [pc, #296]	; (80061b0 <HAL_TIM_MspPostInit+0x1c4>)
 8006086:	f003 f949 	bl	800931c <HAL_GPIO_Init>
}
 800608a:	e084      	b.n	8006196 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a48      	ldr	r2, [pc, #288]	; (80061b4 <HAL_TIM_MspPostInit+0x1c8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d11d      	bne.n	80060d2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006096:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060a2:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 80060ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060bc:	2300      	movs	r3, #0
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80060c0:	2302      	movs	r3, #2
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c8:	4619      	mov	r1, r3
 80060ca:	4839      	ldr	r0, [pc, #228]	; (80061b0 <HAL_TIM_MspPostInit+0x1c4>)
 80060cc:	f003 f926 	bl	800931c <HAL_GPIO_Init>
}
 80060d0:	e061      	b.n	8006196 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <HAL_TIM_MspPostInit+0x1cc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d13a      	bne.n	8006152 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060dc:	4b31      	ldr	r3, [pc, #196]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e0:	4a30      	ldr	r2, [pc, #192]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060e8:	4b2e      	ldr	r3, [pc, #184]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060f4:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f8:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 80060fa:	f043 0302 	orr.w	r3, r3, #2
 80060fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006100:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 800610c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006112:	2302      	movs	r3, #2
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006116:	2300      	movs	r3, #0
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611a:	2300      	movs	r3, #0
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 800611e:	2306      	movs	r3, #6
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8006122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006126:	4619      	mov	r1, r3
 8006128:	4824      	ldr	r0, [pc, #144]	; (80061bc <HAL_TIM_MspPostInit+0x1d0>)
 800612a:	f003 f8f7 	bl	800931c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 800612e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006134:	2302      	movs	r3, #2
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006138:	2300      	movs	r3, #0
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613c:	2300      	movs	r3, #0
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8006140:	230a      	movs	r3, #10
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8006144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006148:	4619      	mov	r1, r3
 800614a:	4819      	ldr	r0, [pc, #100]	; (80061b0 <HAL_TIM_MspPostInit+0x1c4>)
 800614c:	f003 f8e6 	bl	800931c <HAL_GPIO_Init>
}
 8006150:	e021      	b.n	8006196 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <HAL_TIM_MspPostInit+0x1d4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d11c      	bne.n	8006196 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800615c:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	4a10      	ldr	r2, [pc, #64]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_TIM_MspPostInit+0x1b8>)
 800616a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006178:	2302      	movs	r3, #2
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006180:	2300      	movs	r3, #0
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006184:	2301      	movs	r3, #1
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8006188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800618c:	4619      	mov	r1, r3
 800618e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006192:	f003 f8c3 	bl	800931c <HAL_GPIO_Init>
}
 8006196:	bf00      	nop
 8006198:	3738      	adds	r7, #56	; 0x38
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40021000 	.word	0x40021000
 80061a8:	48001400 	.word	0x48001400
 80061ac:	40000400 	.word	0x40000400
 80061b0:	48000400 	.word	0x48000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40013400 	.word	0x40013400
 80061bc:	48000800 	.word	0x48000800
 80061c0:	40014400 	.word	0x40014400

080061c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b0a2      	sub	sp, #136	; 0x88
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061dc:	f107 0320 	add.w	r3, r7, #32
 80061e0:	2254      	movs	r2, #84	; 0x54
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f00f fa17 	bl	8015618 <memset>
  if(huart->Instance==USART1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a81      	ldr	r2, [pc, #516]	; (80063f4 <HAL_UART_MspInit+0x230>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	f040 808b 	bne.w	800630c <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061fe:	f107 0320 	add.w	r3, r7, #32
 8006202:	4618      	mov	r0, r3
 8006204:	f007 fb60 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800620e:	f7ff fa97 	bl	8005740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006212:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006216:	4a78      	ldr	r2, [pc, #480]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800621c:	6613      	str	r3, [r2, #96]	; 0x60
 800621e:	4b76      	ldr	r3, [pc, #472]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800622a:	4b73      	ldr	r3, [pc, #460]	; (80063f8 <HAL_UART_MspInit+0x234>)
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622e:	4a72      	ldr	r2, [pc, #456]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006236:	4b70      	ldr	r3, [pc, #448]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006242:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	4a6c      	ldr	r2, [pc, #432]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800624e:	4b6a      	ldr	r3, [pc, #424]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800625a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800625e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	2302      	movs	r3, #2
 8006262:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	2300      	movs	r3, #0
 8006266:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006268:	2300      	movs	r3, #0
 800626a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800626e:	2307      	movs	r3, #7
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006274:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006278:	4619      	mov	r1, r3
 800627a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800627e:	f003 f84d 	bl	800931c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006286:	2302      	movs	r3, #2
 8006288:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628a:	2300      	movs	r3, #0
 800628c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006294:	2307      	movs	r3, #7
 8006296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800629a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800629e:	4619      	mov	r1, r3
 80062a0:	4856      	ldr	r0, [pc, #344]	; (80063fc <HAL_UART_MspInit+0x238>)
 80062a2:	f003 f83b 	bl	800931c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80062a6:	4b56      	ldr	r3, [pc, #344]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062a8:	4a56      	ldr	r2, [pc, #344]	; (8006404 <HAL_UART_MspInit+0x240>)
 80062aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80062ac:	4b54      	ldr	r3, [pc, #336]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062ae:	2218      	movs	r2, #24
 80062b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062b2:	4b53      	ldr	r3, [pc, #332]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062b8:	4b51      	ldr	r3, [pc, #324]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062be:	4b50      	ldr	r3, [pc, #320]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062c4:	4b4e      	ldr	r3, [pc, #312]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062ca:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80062d0:	4b4b      	ldr	r3, [pc, #300]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80062d6:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80062de:	4848      	ldr	r0, [pc, #288]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062e0:	f002 fcdc 	bl	8008c9c <HAL_DMA_Init>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80062ea:	f7ff fa29 	bl	8005740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a43      	ldr	r2, [pc, #268]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80062f4:	4a42      	ldr	r2, [pc, #264]	; (8006400 <HAL_UART_MspInit+0x23c>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80062fa:	2200      	movs	r2, #0
 80062fc:	2100      	movs	r1, #0
 80062fe:	2025      	movs	r0, #37	; 0x25
 8006300:	f002 facd 	bl	800889e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006304:	2025      	movs	r0, #37	; 0x25
 8006306:	f002 fae4 	bl	80088d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800630a:	e06f      	b.n	80063ec <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a3d      	ldr	r2, [pc, #244]	; (8006408 <HAL_UART_MspInit+0x244>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d16a      	bne.n	80063ec <HAL_UART_MspInit+0x228>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006316:	2302      	movs	r3, #2
 8006318:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800631a:	2300      	movs	r3, #0
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800631e:	f107 0320 	add.w	r3, r7, #32
 8006322:	4618      	mov	r0, r3
 8006324:	f007 fad0 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800632e:	f7ff fa07 	bl	8005740 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006332:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	4a30      	ldr	r2, [pc, #192]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633c:	6593      	str	r3, [r2, #88]	; 0x58
 800633e:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800634a:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <HAL_UART_MspInit+0x234>)
 800634c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634e:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006356:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <HAL_UART_MspInit+0x234>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8006362:	f248 0304 	movw	r3, #32772	; 0x8004
 8006366:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006368:	2302      	movs	r3, #2
 800636a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636c:	2300      	movs	r3, #0
 800636e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006376:	2307      	movs	r3, #7
 8006378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800637c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006380:	4619      	mov	r1, r3
 8006382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006386:	f002 ffc9 	bl	800931c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 800638a:	4b20      	ldr	r3, [pc, #128]	; (800640c <HAL_UART_MspInit+0x248>)
 800638c:	4a20      	ldr	r2, [pc, #128]	; (8006410 <HAL_UART_MspInit+0x24c>)
 800638e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006390:	4b1e      	ldr	r3, [pc, #120]	; (800640c <HAL_UART_MspInit+0x248>)
 8006392:	221a      	movs	r2, #26
 8006394:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006396:	4b1d      	ldr	r3, [pc, #116]	; (800640c <HAL_UART_MspInit+0x248>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <HAL_UART_MspInit+0x248>)
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <HAL_UART_MspInit+0x248>)
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063a8:	4b18      	ldr	r3, [pc, #96]	; (800640c <HAL_UART_MspInit+0x248>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ae:	4b17      	ldr	r3, [pc, #92]	; (800640c <HAL_UART_MspInit+0x248>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80063b4:	4b15      	ldr	r3, [pc, #84]	; (800640c <HAL_UART_MspInit+0x248>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <HAL_UART_MspInit+0x248>)
 80063bc:	2200      	movs	r2, #0
 80063be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80063c0:	4812      	ldr	r0, [pc, #72]	; (800640c <HAL_UART_MspInit+0x248>)
 80063c2:	f002 fc6b 	bl	8008c9c <HAL_DMA_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 80063cc:	f7ff f9b8 	bl	8005740 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0e      	ldr	r2, [pc, #56]	; (800640c <HAL_UART_MspInit+0x248>)
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80063d6:	4a0d      	ldr	r2, [pc, #52]	; (800640c <HAL_UART_MspInit+0x248>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063dc:	2200      	movs	r2, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	2026      	movs	r0, #38	; 0x26
 80063e2:	f002 fa5c 	bl	800889e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063e6:	2026      	movs	r0, #38	; 0x26
 80063e8:	f002 fa73 	bl	80088d2 <HAL_NVIC_EnableIRQ>
}
 80063ec:	bf00      	nop
 80063ee:	3788      	adds	r7, #136	; 0x88
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40013800 	.word	0x40013800
 80063f8:	40021000 	.word	0x40021000
 80063fc:	48000400 	.word	0x48000400
 8006400:	200009d8 	.word	0x200009d8
 8006404:	40020008 	.word	0x40020008
 8006408:	40004400 	.word	0x40004400
 800640c:	20000a38 	.word	0x20000a38
 8006410:	40020408 	.word	0x40020408

08006414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006418:	e7fe      	b.n	8006418 <NMI_Handler+0x4>

0800641a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800641a:	b480      	push	{r7}
 800641c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800641e:	e7fe      	b.n	800641e <HardFault_Handler+0x4>

08006420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006424:	e7fe      	b.n	8006424 <MemManage_Handler+0x4>

08006426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800642a:	e7fe      	b.n	800642a <BusFault_Handler+0x4>

0800642c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006430:	e7fe      	b.n	8006430 <UsageFault_Handler+0x4>

08006432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006432:	b480      	push	{r7}
 8006434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006460:	f000 f9ca 	bl	80067f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006464:	bf00      	nop
 8006466:	bd80      	pop	{r7, pc}

08006468 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800646c:	4802      	ldr	r0, [pc, #8]	; (8006478 <DMA1_Channel1_IRQHandler+0x10>)
 800646e:	f002 fdf8 	bl	8009062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200009d8 	.word	0x200009d8

0800647c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <DMA1_Channel2_IRQHandler+0x10>)
 8006482:	f002 fdee 	bl	8009062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200008b8 	.word	0x200008b8

08006490 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006494:	4802      	ldr	r0, [pc, #8]	; (80064a0 <DMA1_Channel3_IRQHandler+0x10>)
 8006496:	f002 fde4 	bl	8009062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000918 	.word	0x20000918

080064a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80064a8:	4802      	ldr	r0, [pc, #8]	; (80064b4 <DMA1_Channel4_IRQHandler+0x10>)
 80064aa:	f002 fdda 	bl	8009062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000978 	.word	0x20000978

080064b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80064bc:	4802      	ldr	r0, [pc, #8]	; (80064c8 <USB_LP_IRQHandler+0x10>)
 80064be:	f004 fffe 	bl	800b4be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20001fbc 	.word	0x20001fbc

080064cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80064d0:	4802      	ldr	r0, [pc, #8]	; (80064dc <I2C2_EV_IRQHandler+0x10>)
 80064d2:	f003 f9d7 	bl	8009884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2000074c 	.word	0x2000074c

080064e0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80064e4:	4802      	ldr	r0, [pc, #8]	; (80064f0 <I2C2_ER_IRQHandler+0x10>)
 80064e6:	f003 f9e7 	bl	80098b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	2000074c 	.word	0x2000074c

080064f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064f8:	4802      	ldr	r0, [pc, #8]	; (8006504 <USART1_IRQHandler+0x10>)
 80064fa:	f008 ffc7 	bl	800f48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000798 	.word	0x20000798

08006508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800650c:	4802      	ldr	r0, [pc, #8]	; (8006518 <USART2_IRQHandler+0x10>)
 800650e:	f008 ffbd 	bl	800f48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000828 	.word	0x20000828

0800651c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006520:	4802      	ldr	r0, [pc, #8]	; (800652c <DMA2_Channel1_IRQHandler+0x10>)
 8006522:	f002 fd9e 	bl	8009062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8006526:	bf00      	nop
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000a38 	.word	0x20000a38

08006530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return 1;
 8006534:	2301      	movs	r3, #1
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_kill>:

int _kill(int pid, int sig)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800654a:	f00f f82d 	bl	80155a8 <__errno>
 800654e:	4603      	mov	r3, r0
 8006550:	2216      	movs	r2, #22
 8006552:	601a      	str	r2, [r3, #0]
  return -1;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <_exit>:

void _exit (int status)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006568:	f04f 31ff 	mov.w	r1, #4294967295
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ffe7 	bl	8006540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006572:	e7fe      	b.n	8006572 <_exit+0x12>

08006574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e00a      	b.n	800659c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006586:	f3af 8000 	nop.w
 800658a:	4601      	mov	r1, r0
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	60ba      	str	r2, [r7, #8]
 8006592:	b2ca      	uxtb	r2, r1
 8006594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3301      	adds	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	dbf0      	blt.n	8006586 <_read+0x12>
  }

  return len;
 80065a4:	687b      	ldr	r3, [r7, #4]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d002      	beq.n	80065c6 <_write+0x18>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d115      	bne.n	80065f2 <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	68b8      	ldr	r0, [r7, #8]
 80065ca:	f00e fb4b 	bl	8014c64 <CDC_Transmit_FS>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d0f6      	beq.n	80065c6 <_write+0x18>
		        if (result != USBD_OK)
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <_write+0x40>
		        {
		            errno = EIO;
 80065de:	f00e ffe3 	bl	80155a8 <__errno>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2205      	movs	r2, #5
 80065e6:	601a      	str	r2, [r3, #0]
		            return -1;
 80065e8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ec:	e008      	b.n	8006600 <_write+0x52>
		        }
		        return len;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	e006      	b.n	8006600 <_write+0x52>
		    }
		    errno = EBADF;
 80065f2:	f00e ffd9 	bl	80155a8 <__errno>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2209      	movs	r2, #9
 80065fa:	601a      	str	r2, [r3, #0]
		    return -1;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_close>:

int _close(int file)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006630:	605a      	str	r2, [r3, #4]
  return 0;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <_isatty>:

int _isatty(int file)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006648:	2301      	movs	r3, #1
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <_sbrk+0x5c>)
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <_sbrk+0x60>)
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <_sbrk+0x64>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800668c:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <_sbrk+0x64>)
 800668e:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <_sbrk+0x68>)
 8006690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <_sbrk+0x64>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	d207      	bcs.n	80066b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066a0:	f00e ff82 	bl	80155a8 <__errno>
 80066a4:	4603      	mov	r3, r0
 80066a6:	220c      	movs	r2, #12
 80066a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	e009      	b.n	80066c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <_sbrk+0x64>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <_sbrk+0x64>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <_sbrk+0x64>)
 80066c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20020000 	.word	0x20020000
 80066d0:	00000400 	.word	0x00000400
 80066d4:	20000a9c 	.word	0x20000a9c
 80066d8:	200024e0 	.word	0x200024e0

080066dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <SystemInit+0x20>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	4a05      	ldr	r2, [pc, #20]	; (80066fc <SystemInit+0x20>)
 80066e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006700:	480d      	ldr	r0, [pc, #52]	; (8006738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006702:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006704:	480d      	ldr	r0, [pc, #52]	; (800673c <LoopForever+0x6>)
  ldr r1, =_edata
 8006706:	490e      	ldr	r1, [pc, #56]	; (8006740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006708:	4a0e      	ldr	r2, [pc, #56]	; (8006744 <LoopForever+0xe>)
  movs r3, #0
 800670a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800670c:	e002      	b.n	8006714 <LoopCopyDataInit>

0800670e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800670e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006712:	3304      	adds	r3, #4

08006714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006718:	d3f9      	bcc.n	800670e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800671a:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800671c:	4c0b      	ldr	r4, [pc, #44]	; (800674c <LoopForever+0x16>)
  movs r3, #0
 800671e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006720:	e001      	b.n	8006726 <LoopFillZerobss>

08006722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006724:	3204      	adds	r2, #4

08006726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006728:	d3fb      	bcc.n	8006722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800672a:	f7ff ffd7 	bl	80066dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800672e:	f00e ff41 	bl	80155b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006732:	f7fe ff59 	bl	80055e8 <main>

08006736 <LoopForever>:

LoopForever:
    b LoopForever
 8006736:	e7fe      	b.n	8006736 <LoopForever>
  ldr   r0, =_estack
 8006738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800673c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006740:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8006744:	08018dec 	.word	0x08018dec
  ldr r2, =_sbss
 8006748:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800674c:	200024e0 	.word	0x200024e0

08006750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006750:	e7fe      	b.n	8006750 <ADC1_2_IRQHandler>

08006752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800675c:	2003      	movs	r0, #3
 800675e:	f002 f893 	bl	8008888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006762:	200f      	movs	r0, #15
 8006764:	f000 f80e 	bl	8006784 <HAL_InitTick>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	71fb      	strb	r3, [r7, #7]
 8006772:	e001      	b.n	8006778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006774:	f7ff f804 	bl	8005780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006778:	79fb      	ldrb	r3, [r7, #7]

}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006790:	4b16      	ldr	r3, [pc, #88]	; (80067ec <HAL_InitTick+0x68>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d022      	beq.n	80067de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <HAL_InitTick+0x6c>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b13      	ldr	r3, [pc, #76]	; (80067ec <HAL_InitTick+0x68>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	4618      	mov	r0, r3
 80067ae:	f002 f89e 	bl	80088ee <HAL_SYSTICK_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10f      	bne.n	80067d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d809      	bhi.n	80067d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067be:	2200      	movs	r2, #0
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	f002 f86a 	bl	800889e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80067ca:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <HAL_InitTick+0x70>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e007      	b.n	80067e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
 80067d6:	e004      	b.n	80067e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e001      	b.n	80067e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000008 	.word	0x20000008
 80067f0:	20000000 	.word	0x20000000
 80067f4:	20000004 	.word	0x20000004

080067f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <HAL_IncTick+0x1c>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_IncTick+0x20>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4413      	add	r3, r2
 8006806:	4a03      	ldr	r2, [pc, #12]	; (8006814 <HAL_IncTick+0x1c>)
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000aa0 	.word	0x20000aa0
 8006818:	20000008 	.word	0x20000008

0800681c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  return uwTick;
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <HAL_GetTick+0x14>)
 8006822:	681b      	ldr	r3, [r3, #0]
}
 8006824:	4618      	mov	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000aa0 	.word	0x20000aa0

08006834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800683c:	f7ff ffee 	bl	800681c <HAL_GetTick>
 8006840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d004      	beq.n	8006858 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_Delay+0x40>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006858:	bf00      	nop
 800685a:	f7ff ffdf 	bl	800681c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	429a      	cmp	r2, r3
 8006868:	d8f7      	bhi.n	800685a <HAL_Delay+0x26>
  {
  }
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000008 	.word	0x20000008

08006878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	609a      	str	r2, [r3, #8]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3360      	adds	r3, #96	; 0x60
 80068f2:	461a      	mov	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <LL_ADC_SetOffset+0x44>)
 8006902:	4013      	ands	r3, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	03fff000 	.word	0x03fff000

08006928 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3360      	adds	r3, #96	; 0x60
 8006936:	461a      	mov	r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3360      	adds	r3, #96	; 0x60
 8006964:	461a      	mov	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	431a      	orrs	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3360      	adds	r3, #96	; 0x60
 800699a:	461a      	mov	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3360      	adds	r3, #96	; 0x60
 80069d0:	461a      	mov	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	431a      	orrs	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	615a      	str	r2, [r3, #20]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3330      	adds	r3, #48	; 0x30
 8006a52:	461a      	mov	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	4413      	add	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	211f      	movs	r1, #31
 8006a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	401a      	ands	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0e9b      	lsrs	r3, r3, #26
 8006a7a:	f003 011f 	and.w	r1, r3, #31
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	0e5b      	lsrs	r3, r3, #25
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	4413      	add	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	0d1b      	lsrs	r3, r3, #20
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2107      	movs	r1, #7
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	401a      	ands	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	0d1b      	lsrs	r3, r3, #20
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a0f      	ldr	r2, [pc, #60]	; (8006b3c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10a      	bne.n	8006b1a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006b18:	e00a      	b.n	8006b30 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b26:	43db      	mvns	r3, r3
 8006b28:	401a      	ands	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	407f0000 	.word	0x407f0000

08006b40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 031f 	and.w	r3, r3, #31
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6093      	str	r3, [r2, #8]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b94:	d101      	bne.n	8006b9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be4:	d101      	bne.n	8006bea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c0c:	f043 0201 	orr.w	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c34:	f043 0202 	orr.w	r2, r3, #2
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <LL_ADC_IsEnabled+0x18>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <LL_ADC_IsEnabled+0x1a>
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d101      	bne.n	8006c86 <LL_ADC_IsDisableOngoing+0x18>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <LL_ADC_IsDisableOngoing+0x1a>
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ca8:	f043 0204 	orr.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d101      	bne.n	8006cd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d101      	bne.n	8006cfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d08:	b590      	push	{r4, r7, lr}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e1af      	b.n	8007082 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fe fd49 	bl	80057c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff19 	bl	8006b80 <LL_ADC_IsDeepPowerDownEnabled>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff feff 	bl	8006b5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff ff34 	bl	8006bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d115      	bne.n	8006d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff18 	bl	8006ba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d78:	4b9f      	ldr	r3, [pc, #636]	; (8006ff8 <HAL_ADC_Init+0x2f0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	099b      	lsrs	r3, r3, #6
 8006d7e:	4a9f      	ldr	r2, [pc, #636]	; (8006ffc <HAL_ADC_Init+0x2f4>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	099b      	lsrs	r3, r3, #6
 8006d86:	3301      	adds	r3, #1
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d8c:	e002      	b.n	8006d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f9      	bne.n	8006d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff16 	bl	8006bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dae:	f043 0210 	orr.w	r2, r3, #16
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dba:	f043 0201 	orr.w	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff76 	bl	8006cbc <LL_ADC_REG_IsConversionOngoing>
 8006dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8148 	bne.w	8007070 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 8144 	bne.w	8007070 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006df0:	f043 0202 	orr.w	r2, r3, #2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff ff23 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d141      	bne.n	8006e8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e10:	d004      	beq.n	8006e1c <HAL_ADC_Init+0x114>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7a      	ldr	r2, [pc, #488]	; (8007000 <HAL_ADC_Init+0x2f8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10f      	bne.n	8006e3c <HAL_ADC_Init+0x134>
 8006e1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006e20:	f7ff ff12 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e24:	4604      	mov	r4, r0
 8006e26:	4876      	ldr	r0, [pc, #472]	; (8007000 <HAL_ADC_Init+0x2f8>)
 8006e28:	f7ff ff0e 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4323      	orrs	r3, r4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e012      	b.n	8006e62 <HAL_ADC_Init+0x15a>
 8006e3c:	4871      	ldr	r0, [pc, #452]	; (8007004 <HAL_ADC_Init+0x2fc>)
 8006e3e:	f7ff ff03 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e42:	4604      	mov	r4, r0
 8006e44:	4870      	ldr	r0, [pc, #448]	; (8007008 <HAL_ADC_Init+0x300>)
 8006e46:	f7ff feff 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	431c      	orrs	r4, r3
 8006e4e:	486f      	ldr	r0, [pc, #444]	; (800700c <HAL_ADC_Init+0x304>)
 8006e50:	f7ff fefa 	bl	8006c48 <LL_ADC_IsEnabled>
 8006e54:	4603      	mov	r3, r0
 8006e56:	4323      	orrs	r3, r4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e6e:	d004      	beq.n	8006e7a <HAL_ADC_Init+0x172>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a62      	ldr	r2, [pc, #392]	; (8007000 <HAL_ADC_Init+0x2f8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_Init+0x176>
 8006e7a:	4a65      	ldr	r2, [pc, #404]	; (8007010 <HAL_ADC_Init+0x308>)
 8006e7c:	e000      	b.n	8006e80 <HAL_ADC_Init+0x178>
 8006e7e:	4a65      	ldr	r2, [pc, #404]	; (8007014 <HAL_ADC_Init+0x30c>)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f7ff fcf6 	bl	8006878 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7f5b      	ldrb	r3, [r3, #29]
 8006e90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006e9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006ea2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eaa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006eac:	4313      	orrs	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d106      	bne.n	8006ec8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	045b      	lsls	r3, r3, #17
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d009      	beq.n	8006ee4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	4b4b      	ldr	r3, [pc, #300]	; (8007018 <HAL_ADC_Init+0x310>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	69b9      	ldr	r1, [r7, #24]
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fed2 	bl	8006cbc <LL_ADC_REG_IsConversionOngoing>
 8006f18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fedf 	bl	8006ce2 <LL_ADC_INJ_IsConversionOngoing>
 8006f24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d17f      	bne.n	800702c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d17c      	bne.n	800702c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f3e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4e:	f023 0302 	bic.w	r3, r3, #2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	69b9      	ldr	r1, [r7, #24]
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6911      	ldr	r1, [r2, #16]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006f92:	e013      	b.n	8006fbc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d12a      	bne.n	800701c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fdc:	4311      	orrs	r1, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	611a      	str	r2, [r3, #16]
 8006ff6:	e019      	b.n	800702c <HAL_ADC_Init+0x324>
 8006ff8:	20000000 	.word	0x20000000
 8006ffc:	053e2d63 	.word	0x053e2d63
 8007000:	50000100 	.word	0x50000100
 8007004:	50000400 	.word	0x50000400
 8007008:	50000500 	.word	0x50000500
 800700c:	50000600 	.word	0x50000600
 8007010:	50000300 	.word	0x50000300
 8007014:	50000700 	.word	0x50000700
 8007018:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d10c      	bne.n	800704e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	f023 010f 	bic.w	r1, r3, #15
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	1e5a      	subs	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
 800704c:	e007      	b.n	800705e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 020f 	bic.w	r2, r2, #15
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007062:	f023 0303 	bic.w	r3, r3, #3
 8007066:	f043 0201 	orr.w	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	65da      	str	r2, [r3, #92]	; 0x5c
 800706e:	e007      	b.n	8007080 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007074:	f043 0210 	orr.w	r2, r3, #16
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007080:	7ffb      	ldrb	r3, [r7, #31]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3724      	adds	r7, #36	; 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
 800708a:	bf00      	nop

0800708c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a0:	d004      	beq.n	80070ac <HAL_ADC_Start_DMA+0x20>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5a      	ldr	r2, [pc, #360]	; (8007210 <HAL_ADC_Start_DMA+0x184>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <HAL_ADC_Start_DMA+0x24>
 80070ac:	4b59      	ldr	r3, [pc, #356]	; (8007214 <HAL_ADC_Start_DMA+0x188>)
 80070ae:	e000      	b.n	80070b2 <HAL_ADC_Start_DMA+0x26>
 80070b0:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_ADC_Start_DMA+0x18c>)
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fd44 	bl	8006b40 <LL_ADC_GetMultimode>
 80070b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fdfc 	bl	8006cbc <LL_ADC_REG_IsConversionOngoing>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 809b 	bne.w	8007202 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_ADC_Start_DMA+0x4e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e096      	b.n	8007208 <HAL_ADC_Start_DMA+0x17c>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a4d      	ldr	r2, [pc, #308]	; (800721c <HAL_ADC_Start_DMA+0x190>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d008      	beq.n	80070fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	d002      	beq.n	80070fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d17a      	bne.n	80071f4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fcf6 	bl	8007af0 <ADC_Enable>
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d16d      	bne.n	80071ea <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a3a      	ldr	r2, [pc, #232]	; (8007210 <HAL_ADC_Start_DMA+0x184>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_ADC_Start_DMA+0xb4>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a3b      	ldr	r2, [pc, #236]	; (8007220 <HAL_ADC_Start_DMA+0x194>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d002      	beq.n	800713c <HAL_ADC_Start_DMA+0xb0>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	e003      	b.n	8007144 <HAL_ADC_Start_DMA+0xb8>
 800713c:	4b39      	ldr	r3, [pc, #228]	; (8007224 <HAL_ADC_Start_DMA+0x198>)
 800713e:	e001      	b.n	8007144 <HAL_ADC_Start_DMA+0xb8>
 8007140:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	4293      	cmp	r3, r2
 800714a:	d002      	beq.n	8007152 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f023 0206 	bic.w	r2, r3, #6
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
 8007176:	e002      	b.n	800717e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	4a29      	ldr	r2, [pc, #164]	; (8007228 <HAL_ADC_Start_DMA+0x19c>)
 8007184:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	4a28      	ldr	r2, [pc, #160]	; (800722c <HAL_ADC_Start_DMA+0x1a0>)
 800718c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	4a27      	ldr	r2, [pc, #156]	; (8007230 <HAL_ADC_Start_DMA+0x1a4>)
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	221c      	movs	r2, #28
 800719c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0210 	orr.w	r2, r2, #16
 80071b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3340      	adds	r3, #64	; 0x40
 80071d0:	4619      	mov	r1, r3
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f001 fe09 	bl	8008dec <HAL_DMA_Start_IT>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fd56 	bl	8006c94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80071e8:	e00d      	b.n	8007206 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80071f2:	e008      	b.n	8007206 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007200:	e001      	b.n	8007206 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007202:	2302      	movs	r3, #2
 8007204:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	50000100 	.word	0x50000100
 8007214:	50000300 	.word	0x50000300
 8007218:	50000700 	.word	0x50000700
 800721c:	50000600 	.word	0x50000600
 8007220:	50000500 	.word	0x50000500
 8007224:	50000400 	.word	0x50000400
 8007228:	08007c73 	.word	0x08007c73
 800722c:	08007d4b 	.word	0x08007d4b
 8007230:	08007d67 	.word	0x08007d67

08007234 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b0b6      	sub	sp, #216	; 0xd8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800728a:	2b01      	cmp	r3, #1
 800728c:	d102      	bne.n	8007294 <HAL_ADC_ConfigChannel+0x24>
 800728e:	2302      	movs	r3, #2
 8007290:	f000 bc13 	b.w	8007aba <HAL_ADC_ConfigChannel+0x84a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fd0b 	bl	8006cbc <LL_ADC_REG_IsConversionOngoing>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 83f3 	bne.w	8007a94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7ff fbc1 	bl	8006a42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fcf9 	bl	8006cbc <LL_ADC_REG_IsConversionOngoing>
 80072ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff fd05 	bl	8006ce2 <LL_ADC_INJ_IsConversionOngoing>
 80072d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 81d9 	bne.w	8007698 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80072e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 81d4 	bne.w	8007698 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f8:	d10f      	bne.n	800731a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	4619      	mov	r1, r3
 8007306:	f7ff fbc8 	bl	8006a9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fb6f 	bl	80069f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8007318:	e00e      	b.n	8007338 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	461a      	mov	r2, r3
 8007328:	f7ff fbb7 	bl	8006a9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fb5f 	bl	80069f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d022      	beq.n	80073a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6919      	ldr	r1, [r3, #16]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800736a:	f7ff fab9 	bl	80068e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6919      	ldr	r1, [r3, #16]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	461a      	mov	r2, r3
 800737c:	f7ff fb05 	bl	800698a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6919      	ldr	r1, [r3, #16]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	7f1b      	ldrb	r3, [r3, #28]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d102      	bne.n	8007396 <HAL_ADC_ConfigChannel+0x126>
 8007390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007394:	e000      	b.n	8007398 <HAL_ADC_ConfigChannel+0x128>
 8007396:	2300      	movs	r3, #0
 8007398:	461a      	mov	r2, r3
 800739a:	f7ff fb11 	bl	80069c0 <LL_ADC_SetOffsetSaturation>
 800739e:	e17b      	b.n	8007698 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fabe 	bl	8006928 <LL_ADC_GetOffsetChannel>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <HAL_ADC_ConfigChannel+0x15c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fab3 	bl	8006928 <LL_ADC_GetOffsetChannel>
 80073c2:	4603      	mov	r3, r0
 80073c4:	0e9b      	lsrs	r3, r3, #26
 80073c6:	f003 021f 	and.w	r2, r3, #31
 80073ca:	e01e      	b.n	800740a <HAL_ADC_ConfigChannel+0x19a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff faa8 	bl	8006928 <LL_ADC_GetOffsetChannel>
 80073d8:	4603      	mov	r3, r0
 80073da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80073ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80073fa:	2320      	movs	r3, #32
 80073fc:	e004      	b.n	8007408 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80073fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007402:	fab3 f383 	clz	r3, r3
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007412:	2b00      	cmp	r3, #0
 8007414:	d105      	bne.n	8007422 <HAL_ADC_ConfigChannel+0x1b2>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	0e9b      	lsrs	r3, r3, #26
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	e018      	b.n	8007454 <HAL_ADC_ConfigChannel+0x1e4>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800742e:	fa93 f3a3 	rbit	r3, r3
 8007432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800743e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007446:	2320      	movs	r3, #32
 8007448:	e004      	b.n	8007454 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800744a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800744e:	fab3 f383 	clz	r3, r3
 8007452:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007454:	429a      	cmp	r2, r3
 8007456:	d106      	bne.n	8007466 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2200      	movs	r2, #0
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fa77 	bl	8006954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2101      	movs	r1, #1
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fa5b 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007472:	4603      	mov	r3, r0
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x222>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2101      	movs	r1, #1
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fa50 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007488:	4603      	mov	r3, r0
 800748a:	0e9b      	lsrs	r3, r3, #26
 800748c:	f003 021f 	and.w	r2, r3, #31
 8007490:	e01e      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x260>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2101      	movs	r1, #1
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fa45 	bl	8006928 <LL_ADC_GetOffsetChannel>
 800749e:	4603      	mov	r3, r0
 80074a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074a8:	fa93 f3a3 	rbit	r3, r3
 80074ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80074b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80074b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80074c0:	2320      	movs	r3, #32
 80074c2:	e004      	b.n	80074ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80074c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074c8:	fab3 f383 	clz	r3, r3
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x278>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	0e9b      	lsrs	r3, r3, #26
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	e018      	b.n	800751a <HAL_ADC_ConfigChannel+0x2aa>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80074fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800750c:	2320      	movs	r3, #32
 800750e:	e004      	b.n	800751a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007514:	fab3 f383 	clz	r3, r3
 8007518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800751a:	429a      	cmp	r2, r3
 800751c:	d106      	bne.n	800752c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	2101      	movs	r1, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fa14 	bl	8006954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2102      	movs	r1, #2
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff f9f8 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007538:	4603      	mov	r3, r0
 800753a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <HAL_ADC_ConfigChannel+0x2e8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2102      	movs	r1, #2
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff f9ed 	bl	8006928 <LL_ADC_GetOffsetChannel>
 800754e:	4603      	mov	r3, r0
 8007550:	0e9b      	lsrs	r3, r3, #26
 8007552:	f003 021f 	and.w	r2, r3, #31
 8007556:	e01e      	b.n	8007596 <HAL_ADC_ConfigChannel+0x326>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2102      	movs	r1, #2
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff f9e2 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007564:	4603      	mov	r3, r0
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800756e:	fa93 f3a3 	rbit	r3, r3
 8007572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800757a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800757e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007586:	2320      	movs	r3, #32
 8007588:	e004      	b.n	8007594 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800758a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800758e:	fab3 f383 	clz	r3, r3
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <HAL_ADC_ConfigChannel+0x33e>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0e9b      	lsrs	r3, r3, #26
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	e016      	b.n	80075dc <HAL_ADC_ConfigChannel+0x36c>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ba:	fa93 f3a3 	rbit	r3, r3
 80075be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80075c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80075c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80075ce:	2320      	movs	r3, #32
 80075d0:	e004      	b.n	80075dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80075d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075d6:	fab3 f383 	clz	r3, r3
 80075da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075dc:	429a      	cmp	r2, r3
 80075de:	d106      	bne.n	80075ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2200      	movs	r2, #0
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff f9b3 	bl	8006954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2103      	movs	r1, #3
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff f997 	bl	8006928 <LL_ADC_GetOffsetChannel>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <HAL_ADC_ConfigChannel+0x3aa>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2103      	movs	r1, #3
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff f98c 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007610:	4603      	mov	r3, r0
 8007612:	0e9b      	lsrs	r3, r3, #26
 8007614:	f003 021f 	and.w	r2, r3, #31
 8007618:	e017      	b.n	800764a <HAL_ADC_ConfigChannel+0x3da>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2103      	movs	r1, #3
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff f981 	bl	8006928 <LL_ADC_GetOffsetChannel>
 8007626:	4603      	mov	r3, r0
 8007628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800762c:	fa93 f3a3 	rbit	r3, r3
 8007630:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007634:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800763c:	2320      	movs	r3, #32
 800763e:	e003      	b.n	8007648 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007642:	fab3 f383 	clz	r3, r3
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <HAL_ADC_ConfigChannel+0x3f2>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	0e9b      	lsrs	r3, r3, #26
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	e011      	b.n	8007686 <HAL_ADC_ConfigChannel+0x416>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800766a:	fa93 f3a3 	rbit	r3, r3
 800766e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007672:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800767a:	2320      	movs	r3, #32
 800767c:	e003      	b.n	8007686 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007680:	fab3 f383 	clz	r3, r3
 8007684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007686:	429a      	cmp	r2, r3
 8007688:	d106      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	2103      	movs	r1, #3
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f95e 	bl	8006954 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fad3 	bl	8006c48 <LL_ADC_IsEnabled>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 813d 	bne.w	8007924 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7ff fa1a 	bl	8006af0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4aa2      	ldr	r2, [pc, #648]	; (800794c <HAL_ADC_ConfigChannel+0x6dc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f040 812e 	bne.w	8007924 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x480>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	0e9b      	lsrs	r3, r3, #26
 80076de:	3301      	adds	r3, #1
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	bf94      	ite	ls
 80076e8:	2301      	movls	r3, #1
 80076ea:	2300      	movhi	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	e019      	b.n	8007724 <HAL_ADC_ConfigChannel+0x4b4>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f8:	fa93 f3a3 	rbit	r3, r3
 80076fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80076fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007708:	2320      	movs	r3, #32
 800770a:	e003      	b.n	8007714 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800770c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800770e:	fab3 f383 	clz	r3, r3
 8007712:	b2db      	uxtb	r3, r3
 8007714:	3301      	adds	r3, #1
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2b09      	cmp	r3, #9
 800771c:	bf94      	ite	ls
 800771e:	2301      	movls	r3, #1
 8007720:	2300      	movhi	r3, #0
 8007722:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007724:	2b00      	cmp	r3, #0
 8007726:	d079      	beq.n	800781c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007730:	2b00      	cmp	r3, #0
 8007732:	d107      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x4d4>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0e9b      	lsrs	r3, r3, #26
 800773a:	3301      	adds	r3, #1
 800773c:	069b      	lsls	r3, r3, #26
 800773e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007742:	e015      	b.n	8007770 <HAL_ADC_ConfigChannel+0x500>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774c:	fa93 f3a3 	rbit	r3, r3
 8007750:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007754:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800775c:	2320      	movs	r3, #32
 800775e:	e003      	b.n	8007768 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007762:	fab3 f383 	clz	r3, r3
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3301      	adds	r3, #1
 800776a:	069b      	lsls	r3, r3, #26
 800776c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <HAL_ADC_ConfigChannel+0x520>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	0e9b      	lsrs	r3, r3, #26
 8007782:	3301      	adds	r3, #1
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2101      	movs	r1, #1
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	e017      	b.n	80077c0 <HAL_ADC_ConfigChannel+0x550>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007798:	fa93 f3a3 	rbit	r3, r3
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80077a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80077a8:	2320      	movs	r3, #32
 80077aa:	e003      	b.n	80077b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80077ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ae:	fab3 f383 	clz	r3, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	3301      	adds	r3, #1
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2101      	movs	r1, #1
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	ea42 0103 	orr.w	r1, r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <HAL_ADC_ConfigChannel+0x576>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	0e9b      	lsrs	r3, r3, #26
 80077d6:	3301      	adds	r3, #1
 80077d8:	f003 021f 	and.w	r2, r3, #31
 80077dc:	4613      	mov	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4413      	add	r3, r2
 80077e2:	051b      	lsls	r3, r3, #20
 80077e4:	e018      	b.n	8007818 <HAL_ADC_ConfigChannel+0x5a8>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	fa93 f3a3 	rbit	r3, r3
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80077fe:	2320      	movs	r3, #32
 8007800:	e003      	b.n	800780a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007804:	fab3 f383 	clz	r3, r3
 8007808:	b2db      	uxtb	r3, r3
 800780a:	3301      	adds	r3, #1
 800780c:	f003 021f 	and.w	r2, r3, #31
 8007810:	4613      	mov	r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	4413      	add	r3, r2
 8007816:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007818:	430b      	orrs	r3, r1
 800781a:	e07e      	b.n	800791a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <HAL_ADC_ConfigChannel+0x5c8>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	0e9b      	lsrs	r3, r3, #26
 800782e:	3301      	adds	r3, #1
 8007830:	069b      	lsls	r3, r3, #26
 8007832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007836:	e015      	b.n	8007864 <HAL_ADC_ConfigChannel+0x5f4>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	fa93 f3a3 	rbit	r3, r3
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007850:	2320      	movs	r3, #32
 8007852:	e003      	b.n	800785c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	fab3 f383 	clz	r3, r3
 800785a:	b2db      	uxtb	r3, r3
 800785c:	3301      	adds	r3, #1
 800785e:	069b      	lsls	r3, r3, #26
 8007860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <HAL_ADC_ConfigChannel+0x614>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	0e9b      	lsrs	r3, r3, #26
 8007876:	3301      	adds	r3, #1
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	e017      	b.n	80078b4 <HAL_ADC_ConfigChannel+0x644>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	fa93 f3a3 	rbit	r3, r3
 8007890:	61fb      	str	r3, [r7, #28]
  return result;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800789c:	2320      	movs	r3, #32
 800789e:	e003      	b.n	80078a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	fab3 f383 	clz	r3, r3
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	3301      	adds	r3, #1
 80078aa:	f003 031f 	and.w	r3, r3, #31
 80078ae:	2101      	movs	r1, #1
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	ea42 0103 	orr.w	r1, r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10d      	bne.n	80078e0 <HAL_ADC_ConfigChannel+0x670>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	0e9b      	lsrs	r3, r3, #26
 80078ca:	3301      	adds	r3, #1
 80078cc:	f003 021f 	and.w	r2, r3, #31
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	3b1e      	subs	r3, #30
 80078d8:	051b      	lsls	r3, r3, #20
 80078da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078de:	e01b      	b.n	8007918 <HAL_ADC_ConfigChannel+0x6a8>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	fa93 f3a3 	rbit	r3, r3
 80078ec:	613b      	str	r3, [r7, #16]
  return result;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80078f8:	2320      	movs	r3, #32
 80078fa:	e003      	b.n	8007904 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	fab3 f383 	clz	r3, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	3301      	adds	r3, #1
 8007906:	f003 021f 	and.w	r2, r3, #31
 800790a:	4613      	mov	r3, r2
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	4413      	add	r3, r2
 8007910:	3b1e      	subs	r3, #30
 8007912:	051b      	lsls	r3, r3, #20
 8007914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007918:	430b      	orrs	r3, r1
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	6892      	ldr	r2, [r2, #8]
 800791e:	4619      	mov	r1, r3
 8007920:	f7ff f8bb 	bl	8006a9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <HAL_ADC_ConfigChannel+0x6e0>)
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80be 	beq.w	8007aae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800793a:	d004      	beq.n	8007946 <HAL_ADC_ConfigChannel+0x6d6>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a04      	ldr	r2, [pc, #16]	; (8007954 <HAL_ADC_ConfigChannel+0x6e4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d10a      	bne.n	800795c <HAL_ADC_ConfigChannel+0x6ec>
 8007946:	4b04      	ldr	r3, [pc, #16]	; (8007958 <HAL_ADC_ConfigChannel+0x6e8>)
 8007948:	e009      	b.n	800795e <HAL_ADC_ConfigChannel+0x6ee>
 800794a:	bf00      	nop
 800794c:	407f0000 	.word	0x407f0000
 8007950:	80080000 	.word	0x80080000
 8007954:	50000100 	.word	0x50000100
 8007958:	50000300 	.word	0x50000300
 800795c:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <HAL_ADC_ConfigChannel+0x854>)
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe ffb0 	bl	80068c4 <LL_ADC_GetCommonPathInternalCh>
 8007964:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a56      	ldr	r2, [pc, #344]	; (8007ac8 <HAL_ADC_ConfigChannel+0x858>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_ADC_ConfigChannel+0x70c>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a55      	ldr	r2, [pc, #340]	; (8007acc <HAL_ADC_ConfigChannel+0x85c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d13a      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800797c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d134      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007990:	d005      	beq.n	800799e <HAL_ADC_ConfigChannel+0x72e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4e      	ldr	r2, [pc, #312]	; (8007ad0 <HAL_ADC_ConfigChannel+0x860>)
 8007998:	4293      	cmp	r3, r2
 800799a:	f040 8085 	bne.w	8007aa8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a6:	d004      	beq.n	80079b2 <HAL_ADC_ConfigChannel+0x742>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a49      	ldr	r2, [pc, #292]	; (8007ad4 <HAL_ADC_ConfigChannel+0x864>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <HAL_ADC_ConfigChannel+0x746>
 80079b2:	4a49      	ldr	r2, [pc, #292]	; (8007ad8 <HAL_ADC_ConfigChannel+0x868>)
 80079b4:	e000      	b.n	80079b8 <HAL_ADC_ConfigChannel+0x748>
 80079b6:	4a43      	ldr	r2, [pc, #268]	; (8007ac4 <HAL_ADC_ConfigChannel+0x854>)
 80079b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f7fe ff6b 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079c8:	4b44      	ldr	r3, [pc, #272]	; (8007adc <HAL_ADC_ConfigChannel+0x86c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	099b      	lsrs	r3, r3, #6
 80079ce:	4a44      	ldr	r2, [pc, #272]	; (8007ae0 <HAL_ADC_ConfigChannel+0x870>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80079e2:	e002      	b.n	80079ea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f9      	bne.n	80079e4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079f0:	e05a      	b.n	8007aa8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3b      	ldr	r2, [pc, #236]	; (8007ae4 <HAL_ADC_ConfigChannel+0x874>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d125      	bne.n	8007a48 <HAL_ADC_ConfigChannel+0x7d8>
 80079fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11f      	bne.n	8007a48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a31      	ldr	r2, [pc, #196]	; (8007ad4 <HAL_ADC_ConfigChannel+0x864>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d104      	bne.n	8007a1c <HAL_ADC_ConfigChannel+0x7ac>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a34      	ldr	r2, [pc, #208]	; (8007ae8 <HAL_ADC_ConfigChannel+0x878>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d047      	beq.n	8007aac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a24:	d004      	beq.n	8007a30 <HAL_ADC_ConfigChannel+0x7c0>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <HAL_ADC_ConfigChannel+0x864>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <HAL_ADC_ConfigChannel+0x7c4>
 8007a30:	4a29      	ldr	r2, [pc, #164]	; (8007ad8 <HAL_ADC_ConfigChannel+0x868>)
 8007a32:	e000      	b.n	8007a36 <HAL_ADC_ConfigChannel+0x7c6>
 8007a34:	4a23      	ldr	r2, [pc, #140]	; (8007ac4 <HAL_ADC_ConfigChannel+0x854>)
 8007a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fe ff2c 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a46:	e031      	b.n	8007aac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a27      	ldr	r2, [pc, #156]	; (8007aec <HAL_ADC_ConfigChannel+0x87c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d12d      	bne.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d127      	bne.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1c      	ldr	r2, [pc, #112]	; (8007ad4 <HAL_ADC_ConfigChannel+0x864>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a70:	d004      	beq.n	8007a7c <HAL_ADC_ConfigChannel+0x80c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <HAL_ADC_ConfigChannel+0x864>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d101      	bne.n	8007a80 <HAL_ADC_ConfigChannel+0x810>
 8007a7c:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <HAL_ADC_ConfigChannel+0x868>)
 8007a7e:	e000      	b.n	8007a82 <HAL_ADC_ConfigChannel+0x812>
 8007a80:	4a10      	ldr	r2, [pc, #64]	; (8007ac4 <HAL_ADC_ConfigChannel+0x854>)
 8007a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe ff06 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
 8007a92:	e00c      	b.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007aa6:	e002      	b.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007aac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ab6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	37d8      	adds	r7, #216	; 0xd8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	50000700 	.word	0x50000700
 8007ac8:	c3210000 	.word	0xc3210000
 8007acc:	90c00010 	.word	0x90c00010
 8007ad0:	50000600 	.word	0x50000600
 8007ad4:	50000100 	.word	0x50000100
 8007ad8:	50000300 	.word	0x50000300
 8007adc:	20000000 	.word	0x20000000
 8007ae0:	053e2d63 	.word	0x053e2d63
 8007ae4:	c7520000 	.word	0xc7520000
 8007ae8:	50000500 	.word	0x50000500
 8007aec:	cb840000 	.word	0xcb840000

08007af0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff f8a3 	bl	8006c48 <LL_ADC_IsEnabled>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d14d      	bne.n	8007ba4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <ADC_Enable+0xc0>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00d      	beq.n	8007b32 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1a:	f043 0210 	orr.w	r2, r3, #16
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b26:	f043 0201 	orr.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e039      	b.n	8007ba6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f85e 	bl	8006bf8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007b3c:	f7fe fe6e 	bl	800681c <HAL_GetTick>
 8007b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b42:	e028      	b.n	8007b96 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff f87d 	bl	8006c48 <LL_ADC_IsEnabled>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff f84d 	bl	8006bf8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b5e:	f7fe fe5d 	bl	800681c <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d914      	bls.n	8007b96 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d00d      	beq.n	8007b96 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7e:	f043 0210 	orr.w	r2, r3, #16
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8a:	f043 0201 	orr.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e007      	b.n	8007ba6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d1cf      	bne.n	8007b44 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	8000003f 	.word	0x8000003f

08007bb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff f854 	bl	8006c6e <LL_ADC_IsDisableOngoing>
 8007bc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff f83b 	bl	8006c48 <LL_ADC_IsEnabled>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d047      	beq.n	8007c68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d144      	bne.n	8007c68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 030d 	and.w	r3, r3, #13
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10c      	bne.n	8007c06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff f815 	bl	8006c20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007bfe:	f7fe fe0d 	bl	800681c <HAL_GetTick>
 8007c02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c04:	e029      	b.n	8007c5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0a:	f043 0210 	orr.w	r2, r3, #16
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e023      	b.n	8007c6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c22:	f7fe fdfb 	bl	800681c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d914      	bls.n	8007c5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c42:	f043 0210 	orr.w	r2, r3, #16
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4e:	f043 0201 	orr.w	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e007      	b.n	8007c6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1dc      	bne.n	8007c22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d14b      	bne.n	8007d24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d021      	beq.n	8007cea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe feb6 	bl	8006a1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d032      	beq.n	8007d1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d12b      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11f      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	f043 0201 	orr.w	r2, r3, #1
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ce8:	e018      	b.n	8007d1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d111      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d14:	f043 0201 	orr.w	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fa89 	bl	8007234 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d22:	e00e      	b.n	8007d42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fa93 	bl	800725c <HAL_ADC_ErrorCallback>
}
 8007d36:	e004      	b.n	8007d42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff fa75 	bl	8007248 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d84:	f043 0204 	orr.w	r2, r3, #4
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fa65 	bl	800725c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <LL_ADC_IsEnabled>:
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <LL_ADC_IsEnabled+0x18>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <LL_ADC_IsEnabled+0x1a>
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <LL_ADC_StartCalibration>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <LL_ADC_IsCalibrationOnGoing>:
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e06:	d101      	bne.n	8007e0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d101      	bne.n	8007e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_ADCEx_Calibration_Start+0x1c>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e04d      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fea5 	bl	8007bb4 <ADC_Disable>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d136      	bne.n	8007ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e7c:	f023 0302 	bic.w	r3, r3, #2
 8007e80:	f043 0202 	orr.w	r2, r3, #2
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff96 	bl	8007dc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007e94:	e014      	b.n	8007ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a18      	ldr	r2, [pc, #96]	; (8007f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d90d      	bls.n	8007ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea8:	f023 0312 	bic.w	r3, r3, #18
 8007eac:	f043 0210 	orr.w	r2, r3, #16
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e01b      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff ff94 	bl	8007df2 <LL_ADC_IsCalibrationOnGoing>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e2      	bne.n	8007e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	f043 0201 	orr.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ee0:	e005      	b.n	8007eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee6:	f043 0210 	orr.w	r2, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0004de01 	.word	0x0004de01

08007f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b0a1      	sub	sp, #132	; 0x84
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0e7      	b.n	80080f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f3a:	d102      	bne.n	8007f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007f3c:	4b6f      	ldr	r3, [pc, #444]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	e009      	b.n	8007f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a6e      	ldr	r2, [pc, #440]	; (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d102      	bne.n	8007f52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007f4c:	4b6d      	ldr	r3, [pc, #436]	; (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	e001      	b.n	8007f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0be      	b.n	80080f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff ff4f 	bl	8007e1a <LL_ADC_REG_IsConversionOngoing>
 8007f7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff ff49 	bl	8007e1a <LL_ADC_REG_IsConversionOngoing>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 80a0 	bne.w	80080d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 809c 	bne.w	80080d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fa0:	d004      	beq.n	8007fac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a55      	ldr	r2, [pc, #340]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d101      	bne.n	8007fb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007fac:	4b56      	ldr	r3, [pc, #344]	; (8008108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007fae:	e000      	b.n	8007fb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007fb0:	4b56      	ldr	r3, [pc, #344]	; (800810c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007fb2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d04b      	beq.n	8008054 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fce:	035b      	lsls	r3, r3, #13
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fe0:	d004      	beq.n	8007fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a45      	ldr	r2, [pc, #276]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d10f      	bne.n	800800c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007fec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007ff0:	f7ff fed3 	bl	8007d9a <LL_ADC_IsEnabled>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	4841      	ldr	r0, [pc, #260]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007ff8:	f7ff fecf 	bl	8007d9a <LL_ADC_IsEnabled>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4323      	orrs	r3, r4
 8008000:	2b00      	cmp	r3, #0
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	e012      	b.n	8008032 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800800c:	483c      	ldr	r0, [pc, #240]	; (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800800e:	f7ff fec4 	bl	8007d9a <LL_ADC_IsEnabled>
 8008012:	4604      	mov	r4, r0
 8008014:	483b      	ldr	r0, [pc, #236]	; (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008016:	f7ff fec0 	bl	8007d9a <LL_ADC_IsEnabled>
 800801a:	4603      	mov	r3, r0
 800801c:	431c      	orrs	r4, r3
 800801e:	483c      	ldr	r0, [pc, #240]	; (8008110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008020:	f7ff febb 	bl	8007d9a <LL_ADC_IsEnabled>
 8008024:	4603      	mov	r3, r0
 8008026:	4323      	orrs	r3, r4
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d056      	beq.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800803e:	f023 030f 	bic.w	r3, r3, #15
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	6892      	ldr	r2, [r2, #8]
 800804a:	430a      	orrs	r2, r1
 800804c:	431a      	orrs	r2, r3
 800804e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008050:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008052:	e047      	b.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800805c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800805e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008068:	d004      	beq.n	8008074 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a23      	ldr	r2, [pc, #140]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10f      	bne.n	8008094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008074:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008078:	f7ff fe8f 	bl	8007d9a <LL_ADC_IsEnabled>
 800807c:	4604      	mov	r4, r0
 800807e:	481f      	ldr	r0, [pc, #124]	; (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008080:	f7ff fe8b 	bl	8007d9a <LL_ADC_IsEnabled>
 8008084:	4603      	mov	r3, r0
 8008086:	4323      	orrs	r3, r4
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e012      	b.n	80080ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008094:	481a      	ldr	r0, [pc, #104]	; (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008096:	f7ff fe80 	bl	8007d9a <LL_ADC_IsEnabled>
 800809a:	4604      	mov	r4, r0
 800809c:	4819      	ldr	r0, [pc, #100]	; (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800809e:	f7ff fe7c 	bl	8007d9a <LL_ADC_IsEnabled>
 80080a2:	4603      	mov	r3, r0
 80080a4:	431c      	orrs	r4, r3
 80080a6:	481a      	ldr	r0, [pc, #104]	; (8008110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80080a8:	f7ff fe77 	bl	8007d9a <LL_ADC_IsEnabled>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4323      	orrs	r3, r4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80080be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80080c6:	f023 030f 	bic.w	r3, r3, #15
 80080ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80080cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80080ce:	e009      	b.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d4:	f043 0220 	orr.w	r2, r3, #32
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80080e2:	e000      	b.n	80080e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80080e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80080ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3784      	adds	r7, #132	; 0x84
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd90      	pop	{r4, r7, pc}
 80080fa:	bf00      	nop
 80080fc:	50000100 	.word	0x50000100
 8008100:	50000400 	.word	0x50000400
 8008104:	50000500 	.word	0x50000500
 8008108:	50000300 	.word	0x50000300
 800810c:	50000700 	.word	0x50000700
 8008110:	50000600 	.word	0x50000600

08008114 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <LL_EXTI_EnableIT_0_31+0x20>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	4904      	ldr	r1, [pc, #16]	; (8008134 <LL_EXTI_EnableIT_0_31+0x20>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4313      	orrs	r3, r2
 8008126:	600b      	str	r3, [r1, #0]
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40010400 	.word	0x40010400

08008138 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <LL_EXTI_EnableIT_32_63+0x20>)
 8008142:	6a1a      	ldr	r2, [r3, #32]
 8008144:	4904      	ldr	r1, [pc, #16]	; (8008158 <LL_EXTI_EnableIT_32_63+0x20>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4313      	orrs	r3, r2
 800814a:	620b      	str	r3, [r1, #32]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40010400 	.word	0x40010400

0800815c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008164:	4b06      	ldr	r3, [pc, #24]	; (8008180 <LL_EXTI_DisableIT_0_31+0x24>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	43db      	mvns	r3, r3
 800816c:	4904      	ldr	r1, [pc, #16]	; (8008180 <LL_EXTI_DisableIT_0_31+0x24>)
 800816e:	4013      	ands	r3, r2
 8008170:	600b      	str	r3, [r1, #0]
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010400 	.word	0x40010400

08008184 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <LL_EXTI_DisableIT_32_63+0x24>)
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	43db      	mvns	r3, r3
 8008194:	4904      	ldr	r1, [pc, #16]	; (80081a8 <LL_EXTI_DisableIT_32_63+0x24>)
 8008196:	4013      	ands	r3, r2
 8008198:	620b      	str	r3, [r1, #32]
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010400 	.word	0x40010400

080081ac <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4313      	orrs	r3, r2
 80081be:	604b      	str	r3, [r1, #4]

}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40010400 	.word	0x40010400

080081d0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80081d8:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80081da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081dc:	4904      	ldr	r1, [pc, #16]	; (80081f0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	40010400 	.word	0x40010400

080081f4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <LL_EXTI_DisableEvent_0_31+0x24>)
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	43db      	mvns	r3, r3
 8008204:	4904      	ldr	r1, [pc, #16]	; (8008218 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008206:	4013      	ands	r3, r2
 8008208:	604b      	str	r3, [r1, #4]
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40010400 	.word	0x40010400

0800821c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	43db      	mvns	r3, r3
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <LL_EXTI_DisableEvent_32_63+0x24>)
 800822e:	4013      	ands	r3, r2
 8008230:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40010400 	.word	0x40010400

08008244 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4313      	orrs	r3, r2
 8008256:	608b      	str	r3, [r1, #8]

}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010400 	.word	0x40010400

08008268 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008274:	4904      	ldr	r1, [pc, #16]	; (8008288 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4313      	orrs	r3, r2
 800827a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	40010400 	.word	0x40010400

0800828c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	43db      	mvns	r3, r3
 800829c:	4904      	ldr	r1, [pc, #16]	; (80082b0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800829e:	4013      	ands	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]

}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40010400 	.word	0x40010400

080082b4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80082bc:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80082be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	43db      	mvns	r3, r3
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40010400 	.word	0x40010400

080082dc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60cb      	str	r3, [r1, #12]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40010400 	.word	0x40010400

08008300 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4904      	ldr	r1, [pc, #16]	; (8008320 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4313      	orrs	r3, r2
 8008312:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40010400 	.word	0x40010400

08008324 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	43db      	mvns	r3, r3
 8008334:	4904      	ldr	r1, [pc, #16]	; (8008348 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008336:	4013      	ands	r3, r2
 8008338:	60cb      	str	r3, [r1, #12]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40010400 	.word	0x40010400

0800834c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	43db      	mvns	r3, r3
 800835c:	4904      	ldr	r1, [pc, #16]	; (8008370 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800835e:	4013      	ands	r3, r2
 8008360:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	40010400 	.word	0x40010400

08008374 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800837c:	4a04      	ldr	r2, [pc, #16]	; (8008390 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6153      	str	r3, [r2, #20]
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	40010400 	.word	0x40010400

08008394 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800839c:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40010400 	.word	0x40010400

080083b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	77fb      	strb	r3, [r7, #31]
 80083ce:	e181      	b.n	80086d4 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083de:	d102      	bne.n	80083e6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e176      	b.n	80086d4 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7f5b      	ldrb	r3, [r3, #29]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fd fb41 	bl	8005a84 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800840c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008428:	4313      	orrs	r3, r2
 800842a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b90      	ldr	r3, [pc, #576]	; (8008674 <HAL_COMP_Init+0x2c0>)
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	6979      	ldr	r1, [r7, #20]
 800843c:	430b      	orrs	r3, r1
 800843e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d016      	beq.n	800847c <HAL_COMP_Init+0xc8>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d113      	bne.n	800847c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008454:	4b88      	ldr	r3, [pc, #544]	; (8008678 <HAL_COMP_Init+0x2c4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	099b      	lsrs	r3, r3, #6
 800845a:	4a88      	ldr	r2, [pc, #544]	; (800867c <HAL_COMP_Init+0x2c8>)
 800845c:	fba2 2303 	umull	r2, r3, r2, r3
 8008460:	099b      	lsrs	r3, r3, #6
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800846e:	e002      	b.n	8008476 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3b01      	subs	r3, #1
 8008474:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f9      	bne.n	8008470 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a7f      	ldr	r2, [pc, #508]	; (8008680 <HAL_COMP_Init+0x2cc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d028      	beq.n	80084d8 <HAL_COMP_Init+0x124>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a7e      	ldr	r2, [pc, #504]	; (8008684 <HAL_COMP_Init+0x2d0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d020      	beq.n	80084d2 <HAL_COMP_Init+0x11e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a7c      	ldr	r2, [pc, #496]	; (8008688 <HAL_COMP_Init+0x2d4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d018      	beq.n	80084cc <HAL_COMP_Init+0x118>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a7b      	ldr	r2, [pc, #492]	; (800868c <HAL_COMP_Init+0x2d8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d010      	beq.n	80084c6 <HAL_COMP_Init+0x112>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a79      	ldr	r2, [pc, #484]	; (8008690 <HAL_COMP_Init+0x2dc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d008      	beq.n	80084c0 <HAL_COMP_Init+0x10c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a78      	ldr	r2, [pc, #480]	; (8008694 <HAL_COMP_Init+0x2e0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d101      	bne.n	80084bc <HAL_COMP_Init+0x108>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e00f      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084bc:	2302      	movs	r3, #2
 80084be:	e00d      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084c4:	e00a      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084ca:	e007      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80084d0:	e004      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80084d6:	e001      	b.n	80084dc <HAL_COMP_Init+0x128>
 80084d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084dc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 80b6 	beq.w	8008658 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a65      	ldr	r2, [pc, #404]	; (8008694 <HAL_COMP_Init+0x2e0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_COMP_Init+0x158>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a64      	ldr	r2, [pc, #400]	; (8008698 <HAL_COMP_Init+0x2e4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d103      	bne.n	8008514 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800850c:	6938      	ldr	r0, [r7, #16]
 800850e:	f7ff feab 	bl	8008268 <LL_EXTI_EnableRisingTrig_32_63>
 8008512:	e014      	b.n	800853e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8008514:	6938      	ldr	r0, [r7, #16]
 8008516:	f7ff fe95 	bl	8008244 <LL_EXTI_EnableRisingTrig_0_31>
 800851a:	e010      	b.n	800853e <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5c      	ldr	r2, [pc, #368]	; (8008694 <HAL_COMP_Init+0x2e0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <HAL_COMP_Init+0x17c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a5b      	ldr	r2, [pc, #364]	; (8008698 <HAL_COMP_Init+0x2e4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d103      	bne.n	8008538 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8008530:	6938      	ldr	r0, [r7, #16]
 8008532:	f7ff febf 	bl	80082b4 <LL_EXTI_DisableRisingTrig_32_63>
 8008536:	e002      	b.n	800853e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f7ff fea7 	bl	800828c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a51      	ldr	r2, [pc, #324]	; (8008694 <HAL_COMP_Init+0x2e0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_COMP_Init+0x1aa>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a4f      	ldr	r2, [pc, #316]	; (8008698 <HAL_COMP_Init+0x2e4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d103      	bne.n	8008566 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800855e:	6938      	ldr	r0, [r7, #16]
 8008560:	f7ff fece 	bl	8008300 <LL_EXTI_EnableFallingTrig_32_63>
 8008564:	e014      	b.n	8008590 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8008566:	6938      	ldr	r0, [r7, #16]
 8008568:	f7ff feb8 	bl	80082dc <LL_EXTI_EnableFallingTrig_0_31>
 800856c:	e010      	b.n	8008590 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a48      	ldr	r2, [pc, #288]	; (8008694 <HAL_COMP_Init+0x2e0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <HAL_COMP_Init+0x1ce>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a46      	ldr	r2, [pc, #280]	; (8008698 <HAL_COMP_Init+0x2e4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d103      	bne.n	800858a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8008582:	6938      	ldr	r0, [r7, #16]
 8008584:	f7ff fee2 	bl	800834c <LL_EXTI_DisableFallingTrig_32_63>
 8008588:	e002      	b.n	8008590 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f7ff feca 	bl	8008324 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a3f      	ldr	r2, [pc, #252]	; (8008694 <HAL_COMP_Init+0x2e0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_COMP_Init+0x1f0>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a3e      	ldr	r2, [pc, #248]	; (8008698 <HAL_COMP_Init+0x2e4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d103      	bne.n	80085ac <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80085a4:	6938      	ldr	r0, [r7, #16]
 80085a6:	f7ff fef5 	bl	8008394 <LL_EXTI_ClearFlag_32_63>
 80085aa:	e002      	b.n	80085b2 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80085ac:	6938      	ldr	r0, [r7, #16]
 80085ae:	f7ff fee1 	bl	8008374 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d011      	beq.n	80085e2 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a34      	ldr	r2, [pc, #208]	; (8008694 <HAL_COMP_Init+0x2e0>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_COMP_Init+0x21e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a32      	ldr	r2, [pc, #200]	; (8008698 <HAL_COMP_Init+0x2e4>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d103      	bne.n	80085da <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80085d2:	6938      	ldr	r0, [r7, #16]
 80085d4:	f7ff fdfc 	bl	80081d0 <LL_EXTI_EnableEvent_32_63>
 80085d8:	e014      	b.n	8008604 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f7ff fde6 	bl	80081ac <LL_EXTI_EnableEvent_0_31>
 80085e0:	e010      	b.n	8008604 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2b      	ldr	r2, [pc, #172]	; (8008694 <HAL_COMP_Init+0x2e0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_COMP_Init+0x242>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a29      	ldr	r2, [pc, #164]	; (8008698 <HAL_COMP_Init+0x2e4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d103      	bne.n	80085fe <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80085f6:	6938      	ldr	r0, [r7, #16]
 80085f8:	f7ff fe10 	bl	800821c <LL_EXTI_DisableEvent_32_63>
 80085fc:	e002      	b.n	8008604 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f7ff fdf8 	bl	80081f4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <HAL_COMP_Init+0x2e0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <HAL_COMP_Init+0x270>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <HAL_COMP_Init+0x2e4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d103      	bne.n	800862c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8008624:	6938      	ldr	r0, [r7, #16]
 8008626:	f7ff fd87 	bl	8008138 <LL_EXTI_EnableIT_32_63>
 800862a:	e04b      	b.n	80086c4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800862c:	6938      	ldr	r0, [r7, #16]
 800862e:	f7ff fd71 	bl	8008114 <LL_EXTI_EnableIT_0_31>
 8008632:	e047      	b.n	80086c4 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a16      	ldr	r2, [pc, #88]	; (8008694 <HAL_COMP_Init+0x2e0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d004      	beq.n	8008648 <HAL_COMP_Init+0x294>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <HAL_COMP_Init+0x2e4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d103      	bne.n	8008650 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8008648:	6938      	ldr	r0, [r7, #16]
 800864a:	f7ff fd9b 	bl	8008184 <LL_EXTI_DisableIT_32_63>
 800864e:	e039      	b.n	80086c4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8008650:	6938      	ldr	r0, [r7, #16]
 8008652:	f7ff fd83 	bl	800815c <LL_EXTI_DisableIT_0_31>
 8008656:	e035      	b.n	80086c4 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <HAL_COMP_Init+0x2e0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_COMP_Init+0x2b8>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a0c      	ldr	r2, [pc, #48]	; (8008698 <HAL_COMP_Init+0x2e4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d117      	bne.n	800869c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800866c:	6938      	ldr	r0, [r7, #16]
 800866e:	f7ff fdd5 	bl	800821c <LL_EXTI_DisableEvent_32_63>
 8008672:	e016      	b.n	80086a2 <HAL_COMP_Init+0x2ee>
 8008674:	ff007e0f 	.word	0xff007e0f
 8008678:	20000000 	.word	0x20000000
 800867c:	053e2d63 	.word	0x053e2d63
 8008680:	40010200 	.word	0x40010200
 8008684:	40010204 	.word	0x40010204
 8008688:	40010208 	.word	0x40010208
 800868c:	4001020c 	.word	0x4001020c
 8008690:	40010210 	.word	0x40010210
 8008694:	40010214 	.word	0x40010214
 8008698:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800869c:	6938      	ldr	r0, [r7, #16]
 800869e:	f7ff fda9 	bl	80081f4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a0e      	ldr	r2, [pc, #56]	; (80086e0 <HAL_COMP_Init+0x32c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d004      	beq.n	80086b6 <HAL_COMP_Init+0x302>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <HAL_COMP_Init+0x330>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d103      	bne.n	80086be <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f7ff fd64 	bl	8008184 <LL_EXTI_DisableIT_32_63>
 80086bc:	e002      	b.n	80086c4 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80086be:	6938      	ldr	r0, [r7, #16]
 80086c0:	f7ff fd4c 	bl	800815c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7f5b      	ldrb	r3, [r3, #29]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80086d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3720      	adds	r7, #32
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40010214 	.word	0x40010214
 80086e4:	40010218 	.word	0x40010218

080086e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <__NVIC_SetPriorityGrouping+0x44>)
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008704:	4013      	ands	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800871a:	4a04      	ldr	r2, [pc, #16]	; (800872c <__NVIC_SetPriorityGrouping+0x44>)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	60d3      	str	r3, [r2, #12]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	e000ed00 	.word	0xe000ed00

08008730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <__NVIC_GetPriorityGrouping+0x18>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	f003 0307 	and.w	r3, r3, #7
}
 800873e:	4618      	mov	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	e000ed00 	.word	0xe000ed00

0800874c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875a:	2b00      	cmp	r3, #0
 800875c:	db0b      	blt.n	8008776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	f003 021f 	and.w	r2, r3, #31
 8008764:	4907      	ldr	r1, [pc, #28]	; (8008784 <__NVIC_EnableIRQ+0x38>)
 8008766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	2001      	movs	r0, #1
 800876e:	fa00 f202 	lsl.w	r2, r0, r2
 8008772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	e000e100 	.word	0xe000e100

08008788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db0a      	blt.n	80087b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	490c      	ldr	r1, [pc, #48]	; (80087d4 <__NVIC_SetPriority+0x4c>)
 80087a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a6:	0112      	lsls	r2, r2, #4
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	440b      	add	r3, r1
 80087ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80087b0:	e00a      	b.n	80087c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	4908      	ldr	r1, [pc, #32]	; (80087d8 <__NVIC_SetPriority+0x50>)
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	3b04      	subs	r3, #4
 80087c0:	0112      	lsls	r2, r2, #4
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	440b      	add	r3, r1
 80087c6:	761a      	strb	r2, [r3, #24]
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	e000e100 	.word	0xe000e100
 80087d8:	e000ed00 	.word	0xe000ed00

080087dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087dc:	b480      	push	{r7}
 80087de:	b089      	sub	sp, #36	; 0x24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f1c3 0307 	rsb	r3, r3, #7
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	bf28      	it	cs
 80087fa:	2304      	movcs	r3, #4
 80087fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	3304      	adds	r3, #4
 8008802:	2b06      	cmp	r3, #6
 8008804:	d902      	bls.n	800880c <NVIC_EncodePriority+0x30>
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	3b03      	subs	r3, #3
 800880a:	e000      	b.n	800880e <NVIC_EncodePriority+0x32>
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	43da      	mvns	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	401a      	ands	r2, r3
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008824:	f04f 31ff 	mov.w	r1, #4294967295
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	fa01 f303 	lsl.w	r3, r1, r3
 800882e:	43d9      	mvns	r1, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008834:	4313      	orrs	r3, r2
         );
}
 8008836:	4618      	mov	r0, r3
 8008838:	3724      	adds	r7, #36	; 0x24
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3b01      	subs	r3, #1
 8008850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008854:	d301      	bcc.n	800885a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008856:	2301      	movs	r3, #1
 8008858:	e00f      	b.n	800887a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800885a:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <SysTick_Config+0x40>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3b01      	subs	r3, #1
 8008860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008862:	210f      	movs	r1, #15
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	f7ff ff8e 	bl	8008788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <SysTick_Config+0x40>)
 800886e:	2200      	movs	r2, #0
 8008870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008872:	4b04      	ldr	r3, [pc, #16]	; (8008884 <SysTick_Config+0x40>)
 8008874:	2207      	movs	r2, #7
 8008876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000e010 	.word	0xe000e010

08008888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff ff29 	bl	80086e8 <__NVIC_SetPriorityGrouping>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	4603      	mov	r3, r0
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80088ac:	f7ff ff40 	bl	8008730 <__NVIC_GetPriorityGrouping>
 80088b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	f7ff ff90 	bl	80087dc <NVIC_EncodePriority>
 80088bc:	4602      	mov	r2, r0
 80088be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c2:	4611      	mov	r1, r2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff ff5f 	bl	8008788 <__NVIC_SetPriority>
}
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	4603      	mov	r3, r0
 80088da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ff33 	bl	800874c <__NVIC_EnableIRQ>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff ffa4 	bl	8008844 <SysTick_Config>
 80088fc:	4603      	mov	r3, r0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e014      	b.n	8008942 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	791b      	ldrb	r3, [r3, #4]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fd f941 	bl	8005bb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	795b      	ldrb	r3, [r3, #5]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_DAC_ConfigChannel+0x18>
 8008960:	2302      	movs	r3, #2
 8008962:	e192      	b.n	8008c8a <HAL_DAC_ConfigChannel+0x33e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2202      	movs	r2, #2
 800896e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d174      	bne.n	8008a62 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008978:	f7fd ff50 	bl	800681c <HAL_GetTick>
 800897c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d134      	bne.n	80089ee <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008984:	e011      	b.n	80089aa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008986:	f7fd ff49 	bl	800681c <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b01      	cmp	r3, #1
 8008992:	d90a      	bls.n	80089aa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f043 0208 	orr.w	r2, r3, #8
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2203      	movs	r2, #3
 80089a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e16f      	b.n	8008c8a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e6      	bne.n	8008986 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80089b8:	2001      	movs	r0, #1
 80089ba:	f7fd ff3b 	bl	8006834 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40
 80089c8:	e01e      	b.n	8008a08 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089ca:	f7fd ff27 	bl	800681c <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d90a      	bls.n	80089ee <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	f043 0208 	orr.w	r2, r3, #8
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2203      	movs	r2, #3
 80089e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e14d      	b.n	8008c8a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dbe8      	blt.n	80089ca <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80089f8:	2001      	movs	r0, #1
 80089fa:	f7fd ff1b 	bl	8006834 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008a18:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	ea02 0103 	and.w	r1, r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	409a      	lsls	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	21ff      	movs	r1, #255	; 0xff
 8008a44:	fa01 f303 	lsl.w	r3, r1, r3
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	ea02 0103 	and.w	r1, r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d11d      	bne.n	8008aa6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f003 0310 	and.w	r3, r3, #16
 8008a78:	221f      	movs	r2, #31
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	4013      	ands	r3, r2
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	fa02 f303 	lsl.w	r3, r2, r3
 8008a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2207      	movs	r2, #7
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43db      	mvns	r3, r3
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	4013      	ands	r3, r2
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d102      	bne.n	8008ad0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	623b      	str	r3, [r7, #32]
 8008ace:	e00f      	b.n	8008af0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d102      	bne.n	8008ade <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	623b      	str	r3, [r7, #32]
 8008adc:	e008      	b.n	8008af0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	623b      	str	r3, [r7, #32]
 8008aea:	e001      	b.n	8008af0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b12:	4013      	ands	r3, r2
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	791b      	ldrb	r3, [r3, #4]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d102      	bne.n	8008b24 <HAL_DAC_ConfigChannel+0x1d8>
 8008b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b22:	e000      	b.n	8008b26 <HAL_DAC_ConfigChannel+0x1da>
 8008b24:	2300      	movs	r3, #0
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f003 0310 	and.w	r3, r3, #16
 8008b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b36:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3a:	43db      	mvns	r3, r3
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	4013      	ands	r3, r2
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	795b      	ldrb	r3, [r3, #5]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d102      	bne.n	8008b50 <HAL_DAC_ConfigChannel+0x204>
 8008b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b4e:	e000      	b.n	8008b52 <HAL_DAC_ConfigChannel+0x206>
 8008b50:	2300      	movs	r3, #0
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d114      	bne.n	8008b92 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008b68:	f004 fe30 	bl	800d7cc <HAL_RCC_GetHCLKFreq>
 8008b6c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4a48      	ldr	r2, [pc, #288]	; (8008c94 <HAL_DAC_ConfigChannel+0x348>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d904      	bls.n	8008b80 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7e:	e00f      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4a45      	ldr	r2, [pc, #276]	; (8008c98 <HAL_DAC_ConfigChannel+0x34c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d90a      	bls.n	8008b9e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b90:	e006      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9c:	e000      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008b9e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	43da      	mvns	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	400a      	ands	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f003 0310 	and.w	r3, r3, #16
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	22c0      	movs	r2, #192	; 0xc0
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	43da      	mvns	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	400a      	ands	r2, r1
 8008c30:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	089b      	lsrs	r3, r3, #2
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	089b      	lsrs	r3, r3, #2
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f003 0310 	and.w	r3, r3, #16
 8008c5c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	43db      	mvns	r3, r3
 8008c66:	ea02 0103 	and.w	r1, r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	409a      	lsls	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3728      	adds	r7, #40	; 0x28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	09896800 	.word	0x09896800
 8008c98:	04c4b400 	.word	0x04c4b400

08008c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e08d      	b.n	8008dca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4b47      	ldr	r3, [pc, #284]	; (8008dd4 <HAL_DMA_Init+0x138>)
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d80f      	bhi.n	8008cda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4b45      	ldr	r3, [pc, #276]	; (8008dd8 <HAL_DMA_Init+0x13c>)
 8008cc2:	4413      	add	r3, r2
 8008cc4:	4a45      	ldr	r2, [pc, #276]	; (8008ddc <HAL_DMA_Init+0x140>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	009a      	lsls	r2, r3, #2
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a42      	ldr	r2, [pc, #264]	; (8008de0 <HAL_DMA_Init+0x144>)
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
 8008cd8:	e00e      	b.n	8008cf8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	4b40      	ldr	r3, [pc, #256]	; (8008de4 <HAL_DMA_Init+0x148>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	4a3d      	ldr	r2, [pc, #244]	; (8008ddc <HAL_DMA_Init+0x140>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	091b      	lsrs	r3, r3, #4
 8008cec:	009a      	lsls	r2, r3, #2
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a3c      	ldr	r2, [pc, #240]	; (8008de8 <HAL_DMA_Init+0x14c>)
 8008cf6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa84 	bl	8009258 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d58:	d102      	bne.n	8008d60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d010      	beq.n	8008da0 <HAL_DMA_Init+0x104>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d80c      	bhi.n	8008da0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 faa4 	bl	80092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008d9c:	605a      	str	r2, [r3, #4]
 8008d9e:	e008      	b.n	8008db2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40020407 	.word	0x40020407
 8008dd8:	bffdfff8 	.word	0xbffdfff8
 8008ddc:	cccccccd 	.word	0xcccccccd
 8008de0:	40020000 	.word	0x40020000
 8008de4:	bffdfbf8 	.word	0xbffdfbf8
 8008de8:	40020400 	.word	0x40020400

08008dec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_DMA_Start_IT+0x20>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e066      	b.n	8008eda <HAL_DMA_Start_IT+0xee>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d155      	bne.n	8008ecc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0201 	bic.w	r2, r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f9c9 	bl	80091dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 020e 	orr.w	r2, r2, #14
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e00f      	b.n	8008e84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0204 	bic.w	r2, r2, #4
 8008e72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 020a 	orr.w	r2, r2, #10
 8008e82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d007      	beq.n	8008ea2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ea0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e005      	b.n	8008ed8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d005      	beq.n	8008f06 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e037      	b.n	8008f76 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 020e 	bic.w	r2, r2, #14
 8008f14:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f24:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3a:	f003 021f 	and.w	r2, r3, #31
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	2101      	movs	r1, #1
 8008f44:	fa01 f202 	lsl.w	r2, r1, r2
 8008f48:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f52:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00c      	beq.n	8008f76 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f6a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008f74:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d00d      	beq.n	8008fc8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]
 8008fc6:	e047      	b.n	8009058 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 020e 	bic.w	r2, r2, #14
 8008fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	f003 021f 	and.w	r2, r3, #31
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f202 	lsl.w	r2, r1, r2
 800900a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009014:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800902c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009036:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	4798      	blx	r3
    }
  }
  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907e:	f003 031f 	and.w	r3, r3, #31
 8009082:	2204      	movs	r2, #4
 8009084:	409a      	lsls	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4013      	ands	r3, r2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d026      	beq.n	80090dc <HAL_DMA_IRQHandler+0x7a>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d021      	beq.n	80090dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d107      	bne.n	80090b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0204 	bic.w	r2, r2, #4
 80090b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ba:	f003 021f 	and.w	r2, r3, #31
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2104      	movs	r1, #4
 80090c4:	fa01 f202 	lsl.w	r2, r1, r2
 80090c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d071      	beq.n	80091b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80090da:	e06c      	b.n	80091b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	2202      	movs	r2, #2
 80090e6:	409a      	lsls	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4013      	ands	r3, r2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02e      	beq.n	800914e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d029      	beq.n	800914e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 020a 	bic.w	r2, r2, #10
 8009116:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009124:	f003 021f 	and.w	r2, r3, #31
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	2102      	movs	r1, #2
 800912e:	fa01 f202 	lsl.w	r2, r1, r2
 8009132:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d038      	beq.n	80091b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800914c:	e033      	b.n	80091b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009152:	f003 031f 	and.w	r3, r3, #31
 8009156:	2208      	movs	r2, #8
 8009158:	409a      	lsls	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4013      	ands	r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02a      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d025      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 020e 	bic.w	r2, r2, #14
 800917a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009180:	f003 021f 	and.w	r2, r3, #31
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009188:	2101      	movs	r1, #1
 800918a:	fa01 f202 	lsl.w	r2, r1, r2
 800918e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
}
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80091ce:	b2db      	uxtb	r3, r3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009204:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	f003 021f 	and.w	r2, r3, #31
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	2101      	movs	r1, #1
 8009214:	fa01 f202 	lsl.w	r2, r1, r2
 8009218:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b10      	cmp	r3, #16
 8009228:	d108      	bne.n	800923c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800923a:	e007      	b.n	800924c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	60da      	str	r2, [r3, #12]
}
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009268:	429a      	cmp	r2, r3
 800926a:	d802      	bhi.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800926c:	4b15      	ldr	r3, [pc, #84]	; (80092c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e001      	b.n	8009276 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009272:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009274:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	3b08      	subs	r3, #8
 8009282:	4a12      	ldr	r2, [pc, #72]	; (80092cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	091b      	lsrs	r3, r3, #4
 800928a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	089b      	lsrs	r3, r3, #2
 8009292:	009a      	lsls	r2, r3, #2
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4413      	add	r3, r2
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a0b      	ldr	r2, [pc, #44]	; (80092d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80092a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 031f 	and.w	r3, r3, #31
 80092aa:	2201      	movs	r2, #1
 80092ac:	409a      	lsls	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40020407 	.word	0x40020407
 80092c4:	40020800 	.word	0x40020800
 80092c8:	40020820 	.word	0x40020820
 80092cc:	cccccccd 	.word	0xcccccccd
 80092d0:	40020880 	.word	0x40020880

080092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	461a      	mov	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a08      	ldr	r2, [pc, #32]	; (8009318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80092f6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	f003 031f 	and.w	r3, r3, #31
 8009300:	2201      	movs	r2, #1
 8009302:	409a      	lsls	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	1000823f 	.word	0x1000823f
 8009318:	40020940 	.word	0x40020940

0800931c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800932a:	e15a      	b.n	80095e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	2101      	movs	r1, #1
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	4013      	ands	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 814c 	beq.w	80095dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f003 0303 	and.w	r3, r3, #3
 800934c:	2b01      	cmp	r3, #1
 800934e:	d005      	beq.n	800935c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009358:	2b02      	cmp	r3, #2
 800935a:	d130      	bne.n	80093be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	2203      	movs	r2, #3
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	4013      	ands	r3, r2
 8009372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009392:	2201      	movs	r2, #1
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	43db      	mvns	r3, r3
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4013      	ands	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	091b      	lsrs	r3, r3, #4
 80093a8:	f003 0201 	and.w	r2, r3, #1
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d017      	beq.n	80093fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	2203      	movs	r2, #3
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
 80093da:	43db      	mvns	r3, r3
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4013      	ands	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	fa02 f303 	lsl.w	r3, r2, r3
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f003 0303 	and.w	r3, r3, #3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d123      	bne.n	800944e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	08da      	lsrs	r2, r3, #3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3208      	adds	r2, #8
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	220f      	movs	r2, #15
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	43db      	mvns	r3, r3
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4013      	ands	r3, r2
 8009428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	691a      	ldr	r2, [r3, #16]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	08da      	lsrs	r2, r3, #3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3208      	adds	r2, #8
 8009448:	6939      	ldr	r1, [r7, #16]
 800944a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	2203      	movs	r2, #3
 800945a:	fa02 f303 	lsl.w	r3, r2, r3
 800945e:	43db      	mvns	r3, r3
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4013      	ands	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f003 0203 	and.w	r2, r3, #3
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	fa02 f303 	lsl.w	r3, r2, r3
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 80a6 	beq.w	80095dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009490:	4b5b      	ldr	r3, [pc, #364]	; (8009600 <HAL_GPIO_Init+0x2e4>)
 8009492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009494:	4a5a      	ldr	r2, [pc, #360]	; (8009600 <HAL_GPIO_Init+0x2e4>)
 8009496:	f043 0301 	orr.w	r3, r3, #1
 800949a:	6613      	str	r3, [r2, #96]	; 0x60
 800949c:	4b58      	ldr	r3, [pc, #352]	; (8009600 <HAL_GPIO_Init+0x2e4>)
 800949e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	60bb      	str	r3, [r7, #8]
 80094a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80094a8:	4a56      	ldr	r2, [pc, #344]	; (8009604 <HAL_GPIO_Init+0x2e8>)
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	3302      	adds	r3, #2
 80094b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	220f      	movs	r2, #15
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	43db      	mvns	r3, r3
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4013      	ands	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80094d2:	d01f      	beq.n	8009514 <HAL_GPIO_Init+0x1f8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a4c      	ldr	r2, [pc, #304]	; (8009608 <HAL_GPIO_Init+0x2ec>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d019      	beq.n	8009510 <HAL_GPIO_Init+0x1f4>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a4b      	ldr	r2, [pc, #300]	; (800960c <HAL_GPIO_Init+0x2f0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d013      	beq.n	800950c <HAL_GPIO_Init+0x1f0>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a4a      	ldr	r2, [pc, #296]	; (8009610 <HAL_GPIO_Init+0x2f4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00d      	beq.n	8009508 <HAL_GPIO_Init+0x1ec>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a49      	ldr	r2, [pc, #292]	; (8009614 <HAL_GPIO_Init+0x2f8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <HAL_GPIO_Init+0x1e8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a48      	ldr	r2, [pc, #288]	; (8009618 <HAL_GPIO_Init+0x2fc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d101      	bne.n	8009500 <HAL_GPIO_Init+0x1e4>
 80094fc:	2305      	movs	r3, #5
 80094fe:	e00a      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 8009500:	2306      	movs	r3, #6
 8009502:	e008      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 8009504:	2304      	movs	r3, #4
 8009506:	e006      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 8009508:	2303      	movs	r3, #3
 800950a:	e004      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 800950c:	2302      	movs	r3, #2
 800950e:	e002      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <HAL_GPIO_Init+0x1fa>
 8009514:	2300      	movs	r3, #0
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	f002 0203 	and.w	r2, r2, #3
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	4093      	lsls	r3, r2
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009526:	4937      	ldr	r1, [pc, #220]	; (8009604 <HAL_GPIO_Init+0x2e8>)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	089b      	lsrs	r3, r3, #2
 800952c:	3302      	adds	r3, #2
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009534:	4b39      	ldr	r3, [pc, #228]	; (800961c <HAL_GPIO_Init+0x300>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	43db      	mvns	r3, r3
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	4013      	ands	r3, r2
 8009542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009558:	4a30      	ldr	r2, [pc, #192]	; (800961c <HAL_GPIO_Init+0x300>)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800955e:	4b2f      	ldr	r3, [pc, #188]	; (800961c <HAL_GPIO_Init+0x300>)
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	43db      	mvns	r3, r3
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4013      	ands	r3, r2
 800956c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009582:	4a26      	ldr	r2, [pc, #152]	; (800961c <HAL_GPIO_Init+0x300>)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <HAL_GPIO_Init+0x300>)
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	43db      	mvns	r3, r3
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4013      	ands	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80095ac:	4a1b      	ldr	r2, [pc, #108]	; (800961c <HAL_GPIO_Init+0x300>)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80095b2:	4b1a      	ldr	r3, [pc, #104]	; (800961c <HAL_GPIO_Init+0x300>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	43db      	mvns	r3, r3
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4013      	ands	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80095d6:	4a11      	ldr	r2, [pc, #68]	; (800961c <HAL_GPIO_Init+0x300>)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	3301      	adds	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f47f ae9d 	bne.w	800932c <HAL_GPIO_Init+0x10>
  }
}
 80095f2:	bf00      	nop
 80095f4:	bf00      	nop
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	40021000 	.word	0x40021000
 8009604:	40010000 	.word	0x40010000
 8009608:	48000400 	.word	0x48000400
 800960c:	48000800 	.word	0x48000800
 8009610:	48000c00 	.word	0x48000c00
 8009614:	48001000 	.word	0x48001000
 8009618:	48001400 	.word	0x48001400
 800961c:	40010400 	.word	0x40010400

08009620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	807b      	strh	r3, [r7, #2]
 800962c:	4613      	mov	r3, r2
 800962e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009630:	787b      	ldrb	r3, [r7, #1]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800963c:	e002      	b.n	8009644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800963e:	887a      	ldrh	r2, [r7, #2]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009662:	887a      	ldrh	r2, [r7, #2]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4013      	ands	r3, r2
 8009668:	041a      	lsls	r2, r3, #16
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	43d9      	mvns	r1, r3
 800966e:	887b      	ldrh	r3, [r7, #2]
 8009670:	400b      	ands	r3, r1
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	619a      	str	r2, [r3, #24]
}
 8009678:	bf00      	nop
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e081      	b.n	800979a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fc fadc 	bl	8005c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2224      	movs	r2, #36	; 0x24
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0201 	bic.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d107      	bne.n	80096fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096fa:	609a      	str	r2, [r3, #8]
 80096fc:	e006      	b.n	800970c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800970a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d104      	bne.n	800971e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800971c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800972c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691a      	ldr	r2, [r3, #16]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	69d9      	ldr	r1, [r3, #28]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a1a      	ldr	r2, [r3, #32]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	461a      	mov	r2, r3
 80097b0:	460b      	mov	r3, r1
 80097b2:	817b      	strh	r3, [r7, #10]
 80097b4:	4613      	mov	r3, r2
 80097b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d153      	bne.n	800986c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d2:	d101      	bne.n	80097d8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80097d4:	2302      	movs	r3, #2
 80097d6:	e04a      	b.n	800986e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_I2C_Master_Transmit_IT+0x42>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e043      	b.n	800986e <HAL_I2C_Master_Transmit_IT+0xca>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2221      	movs	r2, #33	; 0x21
 80097f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2210      	movs	r2, #16
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	893a      	ldrh	r2, [r7, #8]
 800980e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	4a18      	ldr	r2, [pc, #96]	; (800987c <HAL_I2C_Master_Transmit_IT+0xd8>)
 800981a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009820:	b29b      	uxth	r3, r3
 8009822:	2bff      	cmp	r3, #255	; 0xff
 8009824:	d906      	bls.n	8009834 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	22ff      	movs	r2, #255	; 0xff
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800982c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	e007      	b.n	8009844 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800983e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009842:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	b2da      	uxtb	r2, r3
 800984a:	8979      	ldrh	r1, [r7, #10]
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f001 f97a 	bl	800ab4c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009860:	2101      	movs	r1, #1
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f001 f9a4 	bl	800abb0 <I2C_Enable_IRQ>

    return HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	e000      	b.n	800986e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	ffff0000 	.word	0xffff0000
 800987c:	08009a4b 	.word	0x08009a4b
 8009880:	80002000 	.word	0x80002000

08009884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
  }
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	0a1b      	lsrs	r3, r3, #8
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d010      	beq.n	80098fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	09db      	lsrs	r3, r3, #7
 80098e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ec:	f043 0201 	orr.w	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	0a9b      	lsrs	r3, r3, #10
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d010      	beq.n	800992c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	09db      	lsrs	r3, r3, #7
 800990e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991a:	f043 0208 	orr.w	r2, r3, #8
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800992a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	0a5b      	lsrs	r3, r3, #9
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d010      	beq.n	800995a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	09db      	lsrs	r3, r3, #7
 800993c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009948:	f043 0202 	orr.w	r2, r3, #2
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009958:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f003 030b 	and.w	r3, r3, #11
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 ffb3 	bl	800a8d8 <I2C_ITError>
  }
}
 8009972:	bf00      	nop
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
 80099d6:	4613      	mov	r3, r2
 80099d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009a16:	bf00      	nop
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	af02      	add	r7, sp, #8
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <I2C_Master_ISR_IT+0x1e>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e114      	b.n	8009c92 <I2C_Master_ISR_IT+0x248>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	091b      	lsrs	r3, r3, #4
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d013      	beq.n	8009aa4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	091b      	lsrs	r3, r3, #4
 8009a80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00d      	beq.n	8009aa4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2210      	movs	r2, #16
 8009a8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	f043 0204 	orr.w	r2, r3, #4
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f001 f812 	bl	800aac6 <I2C_Flush_TXDR>
 8009aa2:	e0e1      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	089b      	lsrs	r3, r3, #2
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d023      	beq.n	8009af8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	089b      	lsrs	r3, r3, #2
 8009ab4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01d      	beq.n	8009af8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f023 0304 	bic.w	r3, r3, #4
 8009ac2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009af6:	e0b7      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01e      	beq.n	8009b42 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d018      	beq.n	8009b42 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b40:	e092      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	09db      	lsrs	r3, r3, #7
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d05d      	beq.n	8009c0a <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	099b      	lsrs	r3, r3, #6
 8009b52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d057      	beq.n	8009c0a <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d040      	beq.n	8009be6 <I2C_Master_ISR_IT+0x19c>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d13c      	bne.n	8009be6 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b78:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2bff      	cmp	r3, #255	; 0xff
 8009b82:	d90e      	bls.n	8009ba2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	22ff      	movs	r2, #255	; 0xff
 8009b88:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	8a79      	ldrh	r1, [r7, #18]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 ffd6 	bl	800ab4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ba0:	e032      	b.n	8009c08 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bb4:	d00b      	beq.n	8009bce <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	8a79      	ldrh	r1, [r7, #18]
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	9000      	str	r0, [sp, #0]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 ffc0 	bl	800ab4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bcc:	e01c      	b.n	8009c08 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	8a79      	ldrh	r1, [r7, #18]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 ffb4 	bl	800ab4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009be4:	e010      	b.n	8009c08 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf4:	d003      	beq.n	8009bfe <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fba9 	bl	800a34e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bfc:	e034      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009bfe:	2140      	movs	r1, #64	; 0x40
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fe69 	bl	800a8d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c06:	e02f      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
 8009c08:	e02e      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	099b      	lsrs	r3, r3, #6
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d028      	beq.n	8009c68 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	099b      	lsrs	r3, r3, #6
 8009c1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d022      	beq.n	8009c68 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d119      	bne.n	8009c60 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c3a:	d015      	beq.n	8009c68 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c44:	d108      	bne.n	8009c58 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c54:	605a      	str	r2, [r3, #4]
 8009c56:	e007      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fb78 	bl	800a34e <I2C_ITMasterSeqCplt>
 8009c5e:	e003      	b.n	8009c68 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c60:	2140      	movs	r1, #64	; 0x40
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fe38 	bl	800a8d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009c80:	6979      	ldr	r1, [r7, #20]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fbfe 	bl	800a484 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <I2C_Slave_ISR_IT+0x24>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e0ec      	b.n	8009e98 <I2C_Slave_ISR_IT+0x1fe>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	095b      	lsrs	r3, r3, #5
 8009cd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009cde:	6939      	ldr	r1, [r7, #16]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fc99 	bl	800a618 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	091b      	lsrs	r3, r3, #4
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04d      	beq.n	8009d8e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	091b      	lsrs	r3, r3, #4
 8009cf6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d047      	beq.n	8009d8e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d128      	bne.n	8009d5a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b28      	cmp	r3, #40	; 0x28
 8009d12:	d108      	bne.n	8009d26 <I2C_Slave_ISR_IT+0x8c>
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d1a:	d104      	bne.n	8009d26 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d1c:	6939      	ldr	r1, [r7, #16]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 fd84 	bl	800a82c <I2C_ITListenCplt>
 8009d24:	e032      	b.n	8009d8c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b29      	cmp	r3, #41	; 0x29
 8009d30:	d10e      	bne.n	8009d50 <I2C_Slave_ISR_IT+0xb6>
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d38:	d00a      	beq.n	8009d50 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2210      	movs	r2, #16
 8009d40:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 febf 	bl	800aac6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 fb3d 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 8009d4e:	e01d      	b.n	8009d8c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2210      	movs	r2, #16
 8009d56:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009d58:	e096      	b.n	8009e88 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2210      	movs	r2, #16
 8009d60:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d66:	f043 0204 	orr.w	r2, r3, #4
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <I2C_Slave_ISR_IT+0xe4>
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d7a:	f040 8085 	bne.w	8009e88 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d82:	4619      	mov	r1, r3
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fda7 	bl	800a8d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009d8a:	e07d      	b.n	8009e88 <I2C_Slave_ISR_IT+0x1ee>
 8009d8c:	e07c      	b.n	8009e88 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	089b      	lsrs	r3, r3, #2
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d030      	beq.n	8009dfc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	089b      	lsrs	r3, r3, #2
 8009d9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d02a      	beq.n	8009dfc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d018      	beq.n	8009de2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d14f      	bne.n	8009e8c <I2C_Slave_ISR_IT+0x1f2>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009df2:	d04b      	beq.n	8009e8c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 fae7 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009dfa:	e047      	b.n	8009e8c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	08db      	lsrs	r3, r3, #3
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	08db      	lsrs	r3, r3, #3
 8009e0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009e14:	6939      	ldr	r1, [r7, #16]
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fa15 	bl	800a246 <I2C_ITAddrCplt>
 8009e1c:	e037      	b.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d031      	beq.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d02b      	beq.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d018      	beq.n	8009e72 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009e70:	e00d      	b.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e78:	d002      	beq.n	8009e80 <I2C_Slave_ISR_IT+0x1e6>
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 faa1 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 8009e86:	e002      	b.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009e88:	bf00      	nop
 8009e8a:	e000      	b.n	8009e8e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009e8c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <I2C_Master_ISR_DMA+0x1a>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e0e1      	b.n	800a07e <I2C_Master_ISR_DMA+0x1de>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	091b      	lsrs	r3, r3, #4
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d017      	beq.n	8009efe <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	091b      	lsrs	r3, r3, #4
 8009ed2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d011      	beq.n	8009efe <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2210      	movs	r2, #16
 8009ee0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009eee:	2120      	movs	r1, #32
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fe5d 	bl	800abb0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fde5 	bl	800aac6 <I2C_Flush_TXDR>
 8009efc:	e0ba      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	09db      	lsrs	r3, r3, #7
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d072      	beq.n	8009ff0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	099b      	lsrs	r3, r3, #6
 8009f0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d06c      	beq.n	8009ff0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f24:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d04e      	beq.n	8009fce <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f3c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	2bff      	cmp	r3, #255	; 0xff
 8009f46:	d906      	bls.n	8009f56 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	22ff      	movs	r2, #255	; 0xff
 8009f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009f4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e010      	b.n	8009f78 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f68:	d003      	beq.n	8009f72 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e002      	b.n	8009f78 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f76:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	8a79      	ldrh	r1, [r7, #18]
 8009f80:	2300      	movs	r3, #0
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fde0 	bl	800ab4c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b22      	cmp	r3, #34	; 0x22
 8009fa8:	d108      	bne.n	8009fbc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fb8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009fba:	e05b      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009fcc:	e052      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fdc:	d003      	beq.n	8009fe6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 f9b5 	bl	800a34e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009fe4:	e046      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009fe6:	2140      	movs	r1, #64	; 0x40
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 fc75 	bl	800a8d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009fee:	e041      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	099b      	lsrs	r3, r3, #6
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d029      	beq.n	800a050 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	099b      	lsrs	r3, r3, #6
 800a000:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a004:	2b00      	cmp	r3, #0
 800a006:	d023      	beq.n	800a050 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d119      	bne.n	800a046 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a01c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a020:	d027      	beq.n	800a072 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a02a:	d108      	bne.n	800a03e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a03a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a03c:	e019      	b.n	800a072 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f985 	bl	800a34e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a044:	e015      	b.n	800a072 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a046:	2140      	movs	r1, #64	; 0x40
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 fc45 	bl	800a8d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a04e:	e010      	b.n	800a072 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	095b      	lsrs	r3, r3, #5
 800a060:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 fa0a 	bl	800a484 <I2C_ITMasterCplt>
 800a070:	e000      	b.n	800a074 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a072:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b088      	sub	sp, #32
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <I2C_Slave_ISR_DMA+0x24>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e0c9      	b.n	800a23e <I2C_Slave_ISR_DMA+0x1b8>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d009      	beq.n	800a0d2 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	095b      	lsrs	r3, r3, #5
 800a0c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 faa3 	bl	800a618 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 809a 	beq.w	800a214 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	091b      	lsrs	r3, r3, #4
 800a0e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8093 	beq.w	800a214 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	0b9b      	lsrs	r3, r3, #14
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0bdb      	lsrs	r3, r3, #15
 800a0fe:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a102:	2b00      	cmp	r3, #0
 800a104:	d07f      	beq.n	800a206 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0bdb      	lsrs	r3, r3, #15
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d007      	beq.n	800a12a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800a126:	2301      	movs	r3, #1
 800a128:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00d      	beq.n	800a14e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	0b9b      	lsrs	r3, r3, #14
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800a14a:	2301      	movs	r3, #1
 800a14c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d128      	bne.n	800a1a6 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b28      	cmp	r3, #40	; 0x28
 800a15e:	d108      	bne.n	800a172 <I2C_Slave_ISR_DMA+0xec>
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a166:	d104      	bne.n	800a172 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fb5e 	bl	800a82c <I2C_ITListenCplt>
 800a170:	e048      	b.n	800a204 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b29      	cmp	r3, #41	; 0x29
 800a17c:	d10e      	bne.n	800a19c <I2C_Slave_ISR_DMA+0x116>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a184:	d00a      	beq.n	800a19c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2210      	movs	r2, #16
 800a18c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fc99 	bl	800aac6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f917 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 800a19a:	e033      	b.n	800a204 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2210      	movs	r2, #16
 800a1a2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a1a4:	e034      	b.n	800a210 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f043 0204 	orr.w	r2, r3, #4
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <I2C_Slave_ISR_DMA+0x14a>
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1ce:	d11f      	bne.n	800a210 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	2b21      	cmp	r3, #33	; 0x21
 800a1d4:	d002      	beq.n	800a1dc <I2C_Slave_ISR_DMA+0x156>
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	2b29      	cmp	r3, #41	; 0x29
 800a1da:	d103      	bne.n	800a1e4 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2221      	movs	r2, #33	; 0x21
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a1e2:	e008      	b.n	800a1f6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b22      	cmp	r3, #34	; 0x22
 800a1e8:	d002      	beq.n	800a1f0 <I2C_Slave_ISR_DMA+0x16a>
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ee:	d102      	bne.n	800a1f6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2222      	movs	r2, #34	; 0x22
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 fb6b 	bl	800a8d8 <I2C_ITError>
      if (treatdmanack == 1U)
 800a202:	e005      	b.n	800a210 <I2C_Slave_ISR_DMA+0x18a>
 800a204:	e004      	b.n	800a210 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2210      	movs	r2, #16
 800a20c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a20e:	e011      	b.n	800a234 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800a210:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a212:	e00f      	b.n	800a234 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	08db      	lsrs	r3, r3, #3
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d009      	beq.n	800a234 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	08db      	lsrs	r3, r3, #3
 800a224:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a22c:	68b9      	ldr	r1, [r7, #8]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 f809 	bl	800a246 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a25c:	2b28      	cmp	r3, #40	; 0x28
 800a25e:	d16a      	bne.n	800a336 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	0c1b      	lsrs	r3, r3, #16
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a27e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	b29b      	uxth	r3, r3
 800a288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a28c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	b29b      	uxth	r3, r3
 800a296:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a29a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d138      	bne.n	800a316 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	09db      	lsrs	r3, r3, #7
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	89bb      	ldrh	r3, [r7, #12]
 800a2ac:	4053      	eors	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f003 0306 	and.w	r3, r3, #6
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d11c      	bne.n	800a2f2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a2b8:	897b      	ldrh	r3, [r7, #10]
 800a2ba:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d13b      	bne.n	800a346 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2208      	movs	r2, #8
 800a2da:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a2e4:	89ba      	ldrh	r2, [r7, #12]
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fb6d 	bl	80099ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a2f0:	e029      	b.n	800a346 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a2f2:	893b      	ldrh	r3, [r7, #8]
 800a2f4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a2f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fcbc 	bl	800ac78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a308:	89ba      	ldrh	r2, [r7, #12]
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff fb5b 	bl	80099ca <HAL_I2C_AddrCallback>
}
 800a314:	e017      	b.n	800a346 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fcac 	bl	800ac78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a328:	89ba      	ldrh	r2, [r7, #12]
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fb4b 	bl	80099ca <HAL_I2C_AddrCallback>
}
 800a334:	e007      	b.n	800a346 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2208      	movs	r2, #8
 800a33c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b21      	cmp	r3, #33	; 0x21
 800a368:	d115      	bne.n	800a396 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2211      	movs	r2, #17
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a37e:	2101      	movs	r1, #1
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fc79 	bl	800ac78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff faf3 	bl	800997a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a394:	e014      	b.n	800a3c0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2220      	movs	r2, #32
 800a39a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2212      	movs	r2, #18
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc63 	bl	800ac78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fae7 	bl	800998e <HAL_I2C_MasterRxCpltCallback>
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	0b9b      	lsrs	r3, r3, #14
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	e00d      	b.n	800a41a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	0bdb      	lsrs	r3, r3, #15
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a418:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b29      	cmp	r3, #41	; 0x29
 800a424:	d112      	bne.n	800a44c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2228      	movs	r2, #40	; 0x28
 800a42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2221      	movs	r2, #33	; 0x21
 800a432:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a434:	2101      	movs	r1, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fc1e 	bl	800ac78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff faac 	bl	80099a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a44a:	e017      	b.n	800a47c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b2a      	cmp	r3, #42	; 0x2a
 800a456:	d111      	bne.n	800a47c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2228      	movs	r2, #40	; 0x28
 800a45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2222      	movs	r2, #34	; 0x22
 800a464:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a466:	2102      	movs	r1, #2
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fc05 	bl	800ac78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fa9d 	bl	80099b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2220      	movs	r2, #32
 800a498:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b21      	cmp	r3, #33	; 0x21
 800a4a4:	d107      	bne.n	800a4b6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fbe5 	bl	800ac78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2211      	movs	r2, #17
 800a4b2:	631a      	str	r2, [r3, #48]	; 0x30
 800a4b4:	e00c      	b.n	800a4d0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b22      	cmp	r3, #34	; 0x22
 800a4c0:	d106      	bne.n	800a4d0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a4c2:	2102      	movs	r1, #2
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fbd7 	bl	800ac78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2212      	movs	r2, #18
 800a4ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6859      	ldr	r1, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b4d      	ldr	r3, [pc, #308]	; (800a610 <I2C_ITMasterCplt+0x18c>)
 800a4dc:	400b      	ands	r3, r1
 800a4de:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a4a      	ldr	r2, [pc, #296]	; (800a614 <I2C_ITMasterCplt+0x190>)
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	091b      	lsrs	r3, r3, #4
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a504:	f043 0204 	orr.w	r2, r3, #4
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b60      	cmp	r3, #96	; 0x60
 800a516:	d10b      	bne.n	800a530 <I2C_ITMasterCplt+0xac>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	089b      	lsrs	r3, r3, #2
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a52e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fac8 	bl	800aac6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b60      	cmp	r3, #96	; 0x60
 800a546:	d002      	beq.n	800a54e <I2C_ITMasterCplt+0xca>
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f9bf 	bl	800a8d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a55a:	e054      	b.n	800a606 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b21      	cmp	r3, #33	; 0x21
 800a566:	d124      	bne.n	800a5b2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b40      	cmp	r3, #64	; 0x40
 800a580:	d10b      	bne.n	800a59a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fa31 	bl	80099fa <HAL_I2C_MemTxCpltCallback>
}
 800a598:	e035      	b.n	800a606 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff f9e5 	bl	800997a <HAL_I2C_MasterTxCpltCallback>
}
 800a5b0:	e029      	b.n	800a606 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b22      	cmp	r3, #34	; 0x22
 800a5bc:	d123      	bne.n	800a606 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d10b      	bne.n	800a5f0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff fa10 	bl	8009a0e <HAL_I2C_MemRxCpltCallback>
}
 800a5ee:	e00a      	b.n	800a606 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff f9c4 	bl	800998e <HAL_I2C_MasterRxCpltCallback>
}
 800a606:	bf00      	nop
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	fe00e800 	.word	0xfe00e800
 800a614:	ffff0000 	.word	0xffff0000

0800a618 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a634:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2220      	movs	r2, #32
 800a63c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	2b21      	cmp	r3, #33	; 0x21
 800a642:	d002      	beq.n	800a64a <I2C_ITSlaveCplt+0x32>
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	2b29      	cmp	r3, #41	; 0x29
 800a648:	d108      	bne.n	800a65c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a64a:	f248 0101 	movw	r1, #32769	; 0x8001
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fb12 	bl	800ac78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2221      	movs	r2, #33	; 0x21
 800a658:	631a      	str	r2, [r3, #48]	; 0x30
 800a65a:	e00d      	b.n	800a678 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	2b22      	cmp	r3, #34	; 0x22
 800a660:	d002      	beq.n	800a668 <I2C_ITSlaveCplt+0x50>
 800a662:	7bfb      	ldrb	r3, [r7, #15]
 800a664:	2b2a      	cmp	r3, #42	; 0x2a
 800a666:	d107      	bne.n	800a678 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a668:	f248 0102 	movw	r1, #32770	; 0x8002
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fb03 	bl	800ac78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2222      	movs	r2, #34	; 0x22
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a686:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6859      	ldr	r1, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b64      	ldr	r3, [pc, #400]	; (800a824 <I2C_ITSlaveCplt+0x20c>)
 800a694:	400b      	ands	r3, r1
 800a696:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa14 	bl	800aac6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	0b9b      	lsrs	r3, r3, #14
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d013      	beq.n	800a6d2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d020      	beq.n	800a704 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6d0:	e018      	b.n	800a704 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	0bdb      	lsrs	r3, r3, #15
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d012      	beq.n	800a704 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	089b      	lsrs	r3, r3, #2
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d020      	beq.n	800a752 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f023 0304 	bic.w	r3, r3, #4
 800a716:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a748:	b29b      	uxth	r3, r3
 800a74a:	3b01      	subs	r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a756:	b29b      	uxth	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a760:	f043 0204 	orr.w	r2, r3, #4
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d010      	beq.n	800a7a0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f8a7 	bl	800a8d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b28      	cmp	r3, #40	; 0x28
 800a794:	d141      	bne.n	800a81a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a796:	6979      	ldr	r1, [r7, #20]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f847 	bl	800a82c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a79e:	e03c      	b.n	800a81a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7a8:	d014      	beq.n	800a7d4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fe0c 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1d      	ldr	r2, [pc, #116]	; (800a828 <I2C_ITSlaveCplt+0x210>)
 800a7b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff f90a 	bl	80099e6 <HAL_I2C_ListenCpltCallback>
}
 800a7d2:	e022      	b.n	800a81a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b22      	cmp	r3, #34	; 0x22
 800a7de:	d10e      	bne.n	800a7fe <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff f8dd 	bl	80099b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a7fc:	e00d      	b.n	800a81a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff f8c4 	bl	80099a2 <HAL_I2C_SlaveTxCpltCallback>
}
 800a81a:	bf00      	nop
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	fe00e800 	.word	0xfe00e800
 800a828:	ffff0000 	.word	0xffff0000

0800a82c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a26      	ldr	r2, [pc, #152]	; (800a8d4 <I2C_ITListenCplt+0xa8>)
 800a83a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	089b      	lsrs	r3, r3, #2
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d022      	beq.n	800a8aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	d012      	beq.n	800a8aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a888:	3b01      	subs	r3, #1
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a894:	b29b      	uxth	r3, r3
 800a896:	3b01      	subs	r3, #1
 800a898:	b29a      	uxth	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a2:	f043 0204 	orr.w	r2, r3, #4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a8aa:	f248 0103 	movw	r1, #32771	; 0x8003
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9e2 	bl	800ac78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2210      	movs	r2, #16
 800a8ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff f88e 	bl	80099e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	ffff0000 	.word	0xffff0000

0800a8d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a5d      	ldr	r2, [pc, #372]	; (800aa6c <I2C_ITError+0x194>)
 800a8f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	431a      	orrs	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b28      	cmp	r3, #40	; 0x28
 800a90e:	d005      	beq.n	800a91c <I2C_ITError+0x44>
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	2b29      	cmp	r3, #41	; 0x29
 800a914:	d002      	beq.n	800a91c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	2b2a      	cmp	r3, #42	; 0x2a
 800a91a:	d10b      	bne.n	800a934 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a91c:	2103      	movs	r1, #3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f9aa 	bl	800ac78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2228      	movs	r2, #40	; 0x28
 800a928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a50      	ldr	r2, [pc, #320]	; (800aa70 <I2C_ITError+0x198>)
 800a930:	635a      	str	r2, [r3, #52]	; 0x34
 800a932:	e011      	b.n	800a958 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a934:	f248 0103 	movw	r1, #32771	; 0x8003
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f99d 	bl	800ac78 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b60      	cmp	r3, #96	; 0x60
 800a948:	d003      	beq.n	800a952 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	d039      	beq.n	800a9da <I2C_ITError+0x102>
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b11      	cmp	r3, #17
 800a96a:	d002      	beq.n	800a972 <I2C_ITError+0x9a>
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b21      	cmp	r3, #33	; 0x21
 800a970:	d133      	bne.n	800a9da <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a97c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a980:	d107      	bne.n	800a992 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a990:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fc12 	bl	80091c0 <HAL_DMA_GetState>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d017      	beq.n	800a9d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	4a33      	ldr	r2, [pc, #204]	; (800aa74 <I2C_ITError+0x19c>)
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe faec 	bl	8008f94 <HAL_DMA_Abort_IT>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d04d      	beq.n	800aa5e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9d0:	e045      	b.n	800aa5e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f850 	bl	800aa78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9d8:	e041      	b.n	800aa5e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d039      	beq.n	800aa56 <I2C_ITError+0x17e>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b12      	cmp	r3, #18
 800a9e6:	d002      	beq.n	800a9ee <I2C_ITError+0x116>
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b22      	cmp	r3, #34	; 0x22
 800a9ec:	d133      	bne.n	800aa56 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9fc:	d107      	bne.n	800aa0e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa0c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe fbd4 	bl	80091c0 <HAL_DMA_GetState>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d017      	beq.n	800aa4e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa22:	4a14      	ldr	r2, [pc, #80]	; (800aa74 <I2C_ITError+0x19c>)
 800aa24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe faae 	bl	8008f94 <HAL_DMA_Abort_IT>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d011      	beq.n	800aa62 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa4c:	e009      	b.n	800aa62 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f812 	bl	800aa78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa54:	e005      	b.n	800aa62 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f80e 	bl	800aa78 <I2C_TreatErrorCallback>
  }
}
 800aa5c:	e002      	b.n	800aa64 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa5e:	bf00      	nop
 800aa60:	e000      	b.n	800aa64 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa62:	bf00      	nop
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	ffff0000 	.word	0xffff0000
 800aa70:	08009c9b 	.word	0x08009c9b
 800aa74:	0800ab0f 	.word	0x0800ab0f

0800aa78 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b60      	cmp	r3, #96	; 0x60
 800aa8a:	d10e      	bne.n	800aaaa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7fe ffc7 	bl	8009a36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aaa8:	e009      	b.n	800aabe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7fe ffb2 	bl	8009a22 <HAL_I2C_ErrorCallback>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d103      	bne.n	800aae4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2200      	movs	r2, #0
 800aae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d007      	beq.n	800ab02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f042 0201 	orr.w	r2, r2, #1
 800ab00:	619a      	str	r2, [r3, #24]
  }
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	2200      	movs	r2, #0
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab38:	2200      	movs	r2, #0
 800ab3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7ff ff9b 	bl	800aa78 <I2C_TreatErrorCallback>
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	607b      	str	r3, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	817b      	strh	r3, [r7, #10]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab5e:	897b      	ldrh	r3, [r7, #10]
 800ab60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab64:	7a7b      	ldrb	r3, [r7, #9]
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab6c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab7a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	0d5b      	lsrs	r3, r3, #21
 800ab86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab8a:	4b08      	ldr	r3, [pc, #32]	; (800abac <I2C_TransferConfig+0x60>)
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	43db      	mvns	r3, r3
 800ab90:	ea02 0103 	and.w	r1, r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	03ff63ff 	.word	0x03ff63ff

0800abb0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc4:	4a2a      	ldr	r2, [pc, #168]	; (800ac70 <I2C_Enable_IRQ+0xc0>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800abce:	4a29      	ldr	r2, [pc, #164]	; (800ac74 <I2C_Enable_IRQ+0xc4>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d11d      	bne.n	800ac10 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800abd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da03      	bge.n	800abe4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800abe2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800abe4:	887b      	ldrh	r3, [r7, #2]
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d103      	bne.n	800abf2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800abf0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800abf2:	887b      	ldrh	r3, [r7, #2]
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d103      	bne.n	800ac00 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800abfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ac00:	887b      	ldrh	r3, [r7, #2]
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d125      	bne.n	800ac52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ac0e:	e020      	b.n	800ac52 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ac10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	da03      	bge.n	800ac20 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ac1e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ac20:	887b      	ldrh	r3, [r7, #2]
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ac30:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ac32:	887b      	ldrh	r3, [r7, #2]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ac42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ac44:	887b      	ldrh	r3, [r7, #2]
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	d103      	bne.n	800ac52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	601a      	str	r2, [r3, #0]
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	08009ea1 	.word	0x08009ea1
 800ac74:	0800a087 	.word	0x0800a087

0800ac78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ac88:	887b      	ldrh	r3, [r7, #2]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00f      	beq.n	800acb2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ac98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aca6:	2b28      	cmp	r3, #40	; 0x28
 800aca8:	d003      	beq.n	800acb2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800acb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800acb2:	887b      	ldrh	r3, [r7, #2]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00f      	beq.n	800acdc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800acc2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800acd0:	2b28      	cmp	r3, #40	; 0x28
 800acd2:	d003      	beq.n	800acdc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800acda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800acdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da03      	bge.n	800acec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800acea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800acec:	887b      	ldrh	r3, [r7, #2]
 800acee:	2b10      	cmp	r3, #16
 800acf0:	d103      	bne.n	800acfa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800acf8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800acfa:	887b      	ldrh	r3, [r7, #2]
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d103      	bne.n	800ad08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f043 0320 	orr.w	r3, r3, #32
 800ad06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ad08:	887b      	ldrh	r3, [r7, #2]
 800ad0a:	2b40      	cmp	r3, #64	; 0x40
 800ad0c:	d103      	bne.n	800ad16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6819      	ldr	r1, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	43da      	mvns	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	400a      	ands	r2, r1
 800ad26:	601a      	str	r2, [r3, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d138      	bne.n	800adbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e032      	b.n	800adbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2224      	movs	r2, #36	; 0x24
 800ad64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0201 	bic.w	r2, r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	e000      	b.n	800adbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adbc:	2302      	movs	r3, #2
  }
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800adca:	b480      	push	{r7}
 800adcc:	b085      	sub	sp, #20
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b20      	cmp	r3, #32
 800adde:	d139      	bne.n	800ae54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800adea:	2302      	movs	r3, #2
 800adec:	e033      	b.n	800ae56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2224      	movs	r2, #36	; 0x24
 800adfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 0201 	bic.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ae1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0201 	orr.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	e000      	b.n	800ae56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ae54:	2302      	movs	r3, #2
  }
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
	...

0800ae64 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e0bb      	b.n	800aff2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d101      	bne.n	800ae8a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e0b3      	b.n	800aff2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d101      	bne.n	800ae9a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e0ab      	b.n	800aff2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae9a:	4b58      	ldr	r3, [pc, #352]	; (800affc <HAL_OPAMP_Init+0x198>)
 800ae9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae9e:	4a57      	ldr	r2, [pc, #348]	; (800affc <HAL_OPAMP_Init+0x198>)
 800aea0:	f043 0301 	orr.w	r3, r3, #1
 800aea4:	6613      	str	r3, [r2, #96]	; 0x60
 800aea6:	4b55      	ldr	r3, [pc, #340]	; (800affc <HAL_OPAMP_Init+0x198>)
 800aea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fa ff36 	bl	8005d38 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b40      	cmp	r3, #64	; 0x40
 800aed2:	d003      	beq.n	800aedc <HAL_OPAMP_Init+0x78>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	2b60      	cmp	r3, #96	; 0x60
 800aeda:	d133      	bne.n	800af44 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f023 0110 	bic.w	r1, r3, #16
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	4b41      	ldr	r3, [pc, #260]	; (800b000 <HAL_OPAMP_Init+0x19c>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6851      	ldr	r1, [r2, #4]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6892      	ldr	r2, [r2, #8]
 800af04:	4311      	orrs	r1, r2
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	6912      	ldr	r2, [r2, #16]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	7d09      	ldrb	r1, [r1, #20]
 800af10:	2901      	cmp	r1, #1
 800af12:	d102      	bne.n	800af1a <HAL_OPAMP_Init+0xb6>
 800af14:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af18:	e000      	b.n	800af1c <HAL_OPAMP_Init+0xb8>
 800af1a:	2100      	movs	r1, #0
 800af1c:	4311      	orrs	r1, r2
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af22:	4311      	orrs	r1, r2
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af28:	4311      	orrs	r1, r2
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af2e:	04d2      	lsls	r2, r2, #19
 800af30:	4311      	orrs	r1, r2
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af36:	0612      	lsls	r2, r2, #24
 800af38:	4311      	orrs	r1, r2
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	430b      	orrs	r3, r1
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	e035      	b.n	800afb0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f023 0110 	bic.w	r1, r3, #16
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4b27      	ldr	r3, [pc, #156]	; (800b000 <HAL_OPAMP_Init+0x19c>)
 800af62:	4013      	ands	r3, r2
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6851      	ldr	r1, [r2, #4]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	6892      	ldr	r2, [r2, #8]
 800af6c:	4311      	orrs	r1, r2
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	68d2      	ldr	r2, [r2, #12]
 800af72:	4311      	orrs	r1, r2
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6912      	ldr	r2, [r2, #16]
 800af78:	430a      	orrs	r2, r1
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	7d09      	ldrb	r1, [r1, #20]
 800af7e:	2901      	cmp	r1, #1
 800af80:	d102      	bne.n	800af88 <HAL_OPAMP_Init+0x124>
 800af82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af86:	e000      	b.n	800af8a <HAL_OPAMP_Init+0x126>
 800af88:	2100      	movs	r1, #0
 800af8a:	4311      	orrs	r1, r2
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af90:	4311      	orrs	r1, r2
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af96:	4311      	orrs	r1, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af9c:	04d2      	lsls	r2, r2, #19
 800af9e:	4311      	orrs	r1, r2
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800afa4:	0612      	lsls	r2, r2, #24
 800afa6:	4311      	orrs	r1, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	430b      	orrs	r3, r1
 800afae:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	db10      	blt.n	800afdc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	431a      	orrs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d103      	bne.n	800aff0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	40021000 	.word	0x40021000
 800b000:	e0003e11 	.word	0xe0003e11

0800b004 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	73fb      	strb	r3, [r7, #15]
 800b01a:	e01d      	b.n	800b058 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b05      	cmp	r3, #5
 800b026:	d102      	bne.n	800b02e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
 800b02c:	e014      	b.n	800b058 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b01      	cmp	r3, #1
 800b038:	d10c      	bne.n	800b054 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f042 0201 	orr.w	r2, r2, #1
 800b048:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2204      	movs	r2, #4
 800b04e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b052:	e001      	b.n	800b058 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b086      	sub	sp, #24
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
 800b07c:	e113      	b.n	800b2a6 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b05      	cmp	r3, #5
 800b088:	d102      	bne.n	800b090 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
 800b08e:	e10a      	b.n	800b2a6 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	f040 8102 	bne.w	800b2a2 <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f042 0202 	orr.w	r2, r2, #2
 800b0ac:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0210 	orr.w	r2, r2, #16
 800b0bc:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0cc:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800b0dc:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f042 0201 	orr.w	r2, r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800b0f6:	e020      	b.n	800b13a <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	061a      	lsls	r2, r3, #24
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800b10e:	2002      	movs	r0, #2
 800b110:	f7fb fb90 	bl	8006834 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	4413      	add	r3, r2
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	e003      	b.n	800b134 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1db      	bne.n	800b0f8 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	061a      	lsls	r2, r3, #24
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800b156:	2002      	movs	r0, #2
 800b158:	f7fb fb6c 	bl	8006834 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00d      	beq.n	800b186 <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3301      	adds	r3, #1
 800b16e:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	061a      	lsls	r2, r3, #24
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b198:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 800b19a:	2310      	movs	r3, #16
 800b19c:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 800b19e:	2308      	movs	r3, #8
 800b1a0:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800b1a2:	e020      	b.n	800b1e6 <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	04da      	lsls	r2, r3, #19
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800b1ba:	2002      	movs	r0, #2
 800b1bc:	f7fb fb3a 	bl	8006834 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e003      	b.n	800b1e0 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	085b      	lsrs	r3, r3, #1
 800b1e4:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1db      	bne.n	800b1a4 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	04da      	lsls	r2, r3, #19
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800b202:	2002      	movs	r0, #2
 800b204:	f7fb fb16 	bl	8006834 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	04da      	lsls	r2, r3, #19
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b240:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 0201 	bic.w	r2, r2, #1
 800b250:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0202 	bic.w	r2, r2, #2
 800b260:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2210      	movs	r2, #16
 800b272:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	04da      	lsls	r2, r3, #19
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	061a      	lsls	r2, r3, #24
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e001      	b.n	800b2a6 <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3718      	adds	r7, #24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	b08b      	sub	sp, #44	; 0x2c
 800b2b4:	af06      	add	r7, sp, #24
 800b2b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e0d7      	b.n	800b472 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f009 fe18 	bl	8014f0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f005 fcd4 	bl	8010c96 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
 800b2f2:	e04c      	b.n	800b38e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	440b      	add	r3, r1
 800b304:	3301      	adds	r3, #1
 800b306:	2201      	movs	r2, #1
 800b308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	6879      	ldr	r1, [r7, #4]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	440b      	add	r3, r1
 800b31a:	7bfa      	ldrb	r2, [r7, #15]
 800b31c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b31e:	7bfa      	ldrb	r2, [r7, #15]
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	b298      	uxth	r0, r3
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	440b      	add	r3, r1
 800b330:	3336      	adds	r3, #54	; 0x36
 800b332:	4602      	mov	r2, r0
 800b334:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	440b      	add	r3, r1
 800b346:	3303      	adds	r3, #3
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b34c:	7bfa      	ldrb	r2, [r7, #15]
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	440b      	add	r3, r1
 800b35a:	3338      	adds	r3, #56	; 0x38
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b360:	7bfa      	ldrb	r2, [r7, #15]
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	440b      	add	r3, r1
 800b36e:	333c      	adds	r3, #60	; 0x3c
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b374:	7bfa      	ldrb	r2, [r7, #15]
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	4613      	mov	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	440b      	add	r3, r1
 800b382:	3340      	adds	r3, #64	; 0x40
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	3301      	adds	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	7bfa      	ldrb	r2, [r7, #15]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	429a      	cmp	r2, r3
 800b396:	d3ad      	bcc.n	800b2f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	e044      	b.n	800b428 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b39e:	7bfa      	ldrb	r2, [r7, #15]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	440b      	add	r3, r1
 800b3ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	440b      	add	r3, r1
 800b3c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b3c6:	7bfa      	ldrb	r2, [r7, #15]
 800b3c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b3ca:	7bfa      	ldrb	r2, [r7, #15]
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b3e0:	7bfa      	ldrb	r2, [r7, #15]
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	440b      	add	r3, r1
 800b3ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b3f6:	7bfa      	ldrb	r2, [r7, #15]
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	440b      	add	r3, r1
 800b404:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	440b      	add	r3, r1
 800b41a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	3301      	adds	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
 800b428:	7bfa      	ldrb	r2, [r7, #15]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d3b5      	bcc.n	800b39e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	687e      	ldr	r6, [r7, #4]
 800b43a:	466d      	mov	r5, sp
 800b43c:	f106 0410 	add.w	r4, r6, #16
 800b440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	602b      	str	r3, [r5, #0]
 800b448:	1d33      	adds	r3, r6, #4
 800b44a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b44c:	6838      	ldr	r0, [r7, #0]
 800b44e:	f005 fc3d 	bl	8010ccc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d102      	bne.n	800b470 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fc29 	bl	800ccc2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b47a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_PCD_Start+0x16>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e012      	b.n	800b4b6 <HAL_PCD_Start+0x3c>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f005 fbe3 	bl	8010c68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f007 fdfc 	bl	80130a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f007 fe01 	bl	80130d2 <USB_ReadInterrupts>
 800b4d0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fb26 	bl	800bb2e <PCD_EP_ISR_Handler>

    return;
 800b4e2:	e110      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d013      	beq.n	800b516 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b500:	b292      	uxth	r2, r2
 800b502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f009 fd91 	bl	801502e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b50c:	2100      	movs	r1, #0
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f8fc 	bl	800b70c <HAL_PCD_SetAddress>

    return;
 800b514:	e0f7      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00c      	beq.n	800b53a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b532:	b292      	uxth	r2, r2
 800b534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b538:	e0e5      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00c      	beq.n	800b55e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b556:	b292      	uxth	r2, r2
 800b558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b55c:	e0d3      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d034      	beq.n	800b5d2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b570:	b29a      	uxth	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0204 	bic.w	r2, r2, #4
 800b57a:	b292      	uxth	r2, r2
 800b57c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0208 	bic.w	r2, r2, #8
 800b592:	b292      	uxth	r2, r2
 800b594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d107      	bne.n	800b5b2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f009 ff33 	bl	8015418 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f009 fd74 	bl	80150a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5ca:	b292      	uxth	r2, r2
 800b5cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b5d0:	e099      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d027      	beq.n	800b62c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f042 0208 	orr.w	r2, r2, #8
 800b5ee:	b292      	uxth	r2, r2
 800b5f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b606:	b292      	uxth	r2, r2
 800b608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0204 	orr.w	r2, r2, #4
 800b61e:	b292      	uxth	r2, r2
 800b620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f009 fd21 	bl	801506c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b62a:	e06c      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b00      	cmp	r3, #0
 800b634:	d040      	beq.n	800b6b8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b63e:	b29a      	uxth	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b648:	b292      	uxth	r2, r2
 800b64a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d12b      	bne.n	800b6b0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b660:	b29a      	uxth	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0204 	orr.w	r2, r2, #4
 800b66a:	b292      	uxth	r2, r2
 800b66c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0208 	orr.w	r2, r2, #8
 800b682:	b292      	uxth	r2, r2
 800b684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b698:	b29b      	uxth	r3, r3
 800b69a:	089b      	lsrs	r3, r3, #2
 800b69c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f009 feb5 	bl	8015418 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b6ae:	e02a      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f009 fcdb 	bl	801506c <HAL_PCD_SuspendCallback>
    return;
 800b6b6:	e026      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b6d4:	b292      	uxth	r2, r2
 800b6d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f009 fc99 	bl	8015012 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b6e0:	e011      	b.n	800b706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00c      	beq.n	800b706 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6fe:	b292      	uxth	r2, r2
 800b700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b704:	bf00      	nop
  }
}
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d101      	bne.n	800b726 <HAL_PCD_SetAddress+0x1a>
 800b722:	2302      	movs	r3, #2
 800b724:	e013      	b.n	800b74e <HAL_PCD_SetAddress+0x42>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	78fa      	ldrb	r2, [r7, #3]
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f007 fc9c 	bl	801307c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	461a      	mov	r2, r3
 800b764:	4603      	mov	r3, r0
 800b766:	70fb      	strb	r3, [r7, #3]
 800b768:	460b      	mov	r3, r1
 800b76a:	803b      	strh	r3, [r7, #0]
 800b76c:	4613      	mov	r3, r2
 800b76e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da0e      	bge.n	800b79a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	4413      	add	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2201      	movs	r2, #1
 800b796:	705a      	strb	r2, [r3, #1]
 800b798:	e00e      	b.n	800b7b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b79a:	78fb      	ldrb	r3, [r7, #3]
 800b79c:	f003 0207 	and.w	r2, r3, #7
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b7c4:	883a      	ldrh	r2, [r7, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	78ba      	ldrb	r2, [r7, #2]
 800b7ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	785b      	ldrb	r3, [r3, #1]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b7e2:	78bb      	ldrb	r3, [r7, #2]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d102      	bne.n	800b7ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d101      	bne.n	800b7fc <HAL_PCD_EP_Open+0xa6>
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	e00e      	b.n	800b81a <HAL_PCD_EP_Open+0xc4>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68f9      	ldr	r1, [r7, #12]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f005 fa80 	bl	8010d10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b818:	7afb      	ldrb	r3, [r7, #11]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	460b      	mov	r3, r1
 800b82c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b82e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b832:	2b00      	cmp	r3, #0
 800b834:	da0e      	bge.n	800b854 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b836:	78fb      	ldrb	r3, [r7, #3]
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4413      	add	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	705a      	strb	r2, [r3, #1]
 800b852:	e00e      	b.n	800b872 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	f003 0207 	and.w	r2, r3, #7
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	4413      	add	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b872:	78fb      	ldrb	r3, [r7, #3]
 800b874:	f003 0307 	and.w	r3, r3, #7
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b884:	2b01      	cmp	r3, #1
 800b886:	d101      	bne.n	800b88c <HAL_PCD_EP_Close+0x6a>
 800b888:	2302      	movs	r3, #2
 800b88a:	e00e      	b.n	800b8aa <HAL_PCD_EP_Close+0x88>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68f9      	ldr	r1, [r7, #12]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f005 fdcc 	bl	8011438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b086      	sub	sp, #24
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	60f8      	str	r0, [r7, #12]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8c2:	7afb      	ldrb	r3, [r7, #11]
 800b8c4:	f003 0207 	and.w	r2, r3, #7
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	f003 0307 	and.w	r3, r3, #7
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6979      	ldr	r1, [r7, #20]
 800b90e:	4618      	mov	r0, r3
 800b910:	f005 ff7f 	bl	8011812 <USB_EPStartXfer>
 800b914:	e005      	b.n	800b922 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6979      	ldr	r1, [r7, #20]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f005 ff78 	bl	8011812 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b938:	78fb      	ldrb	r3, [r7, #3]
 800b93a:	f003 0207 	and.w	r2, r3, #7
 800b93e:	6879      	ldr	r1, [r7, #4]
 800b940:	4613      	mov	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4413      	add	r3, r2
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	440b      	add	r3, r1
 800b94a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b94e:	681b      	ldr	r3, [r3, #0]
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	607a      	str	r2, [r7, #4]
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	460b      	mov	r3, r1
 800b96a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9a8:	7afb      	ldrb	r3, [r7, #11]
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b9b4:	7afb      	ldrb	r3, [r7, #11]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6979      	ldr	r1, [r7, #20]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f005 ff24 	bl	8011812 <USB_EPStartXfer>
 800b9ca:	e005      	b.n	800b9d8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6979      	ldr	r1, [r7, #20]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f005 ff1d 	bl	8011812 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	f003 0207 	and.w	r2, r3, #7
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d901      	bls.n	800ba00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e03e      	b.n	800ba7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da0e      	bge.n	800ba26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	705a      	strb	r2, [r3, #1]
 800ba24:	e00c      	b.n	800ba40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba26:	78fa      	ldrb	r2, [r7, #3]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	4413      	add	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2201      	movs	r2, #1
 800ba44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba46:	78fb      	ldrb	r3, [r7, #3]
 800ba48:	f003 0307 	and.w	r3, r3, #7
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d101      	bne.n	800ba60 <HAL_PCD_EP_SetStall+0x7e>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e00e      	b.n	800ba7e <HAL_PCD_EP_SetStall+0x9c>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68f9      	ldr	r1, [r7, #12]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f007 fa05 	bl	8012e7e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ba92:	78fb      	ldrb	r3, [r7, #3]
 800ba94:	f003 020f 	and.w	r2, r3, #15
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d901      	bls.n	800baa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e040      	b.n	800bb26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800baa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da0e      	bge.n	800baca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	f003 0307 	and.w	r3, r3, #7
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	705a      	strb	r2, [r3, #1]
 800bac8:	e00e      	b.n	800bae8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	f003 0207 	and.w	r2, r3, #7
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	4413      	add	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d101      	bne.n	800bb08 <HAL_PCD_EP_ClrStall+0x82>
 800bb04:	2302      	movs	r3, #2
 800bb06:	e00e      	b.n	800bb26 <HAL_PCD_EP_ClrStall+0xa0>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f007 fa02 	bl	8012f20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b096      	sub	sp, #88	; 0x58
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bb36:	e39c      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800bb44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800bb52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f040 815e 	bne.w	800be18 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800bb5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d150      	bne.n	800bc0a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bb74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb78:	81fb      	strh	r3, [r7, #14]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	89fb      	ldrh	r3, [r7, #14]
 800bb80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3328      	adds	r3, #40	; 0x28
 800bb90:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	4413      	add	r3, r2
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	6812      	ldr	r2, [r2, #0]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbbc:	695a      	ldr	r2, [r3, #20]
 800bbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	441a      	add	r2, r3
 800bbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f009 fa07 	bl	8014fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 834a 	beq.w	800c272 <PCD_EP_ISR_Handler+0x744>
 800bbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f040 8345 	bne.w	800c272 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bc08:	e333      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bc10:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bc1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d032      	beq.n	800bc8e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	461a      	mov	r2, r3
 800bc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	4413      	add	r3, r2
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6812      	ldr	r2, [r2, #0]
 800bc40:	4413      	add	r3, r2
 800bc42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800bc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	f007 fa87 	bl	8013176 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bc74:	4013      	ands	r3, r2
 800bc76:	823b      	strh	r3, [r7, #16]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	8a3a      	ldrh	r2, [r7, #16]
 800bc7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc82:	b292      	uxth	r2, r2
 800bc84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f009 f97c 	bl	8014f84 <HAL_PCD_SetupStageCallback>
 800bc8c:	e2f1      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bc8e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f280 82ed 	bge.w	800c272 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bca4:	4013      	ands	r3, r2
 800bca6:	83fb      	strh	r3, [r7, #30]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	8bfa      	ldrh	r2, [r7, #30]
 800bcae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bcb2:	b292      	uxth	r2, r2
 800bcb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4413      	add	r3, r2
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	6812      	ldr	r2, [r2, #0]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bcda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d019      	beq.n	800bd1a <PCD_EP_ISR_Handler+0x1ec>
 800bce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d015      	beq.n	800bd1a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf4:	6959      	ldr	r1, [r3, #20]
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	f007 fa39 	bl	8013176 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd06:	695a      	ldr	r2, [r3, #20]
 800bd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	441a      	add	r2, r3
 800bd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bd12:	2100      	movs	r1, #0
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f009 f947 	bl	8014fa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f040 82a3 	bne.w	800c272 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	61bb      	str	r3, [r7, #24]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	4413      	add	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b3e      	cmp	r3, #62	; 0x3e
 800bd52:	d918      	bls.n	800bd86 <PCD_EP_ISR_Handler+0x258>
 800bd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	095b      	lsrs	r3, r3, #5
 800bd5a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f003 031f 	and.w	r3, r3, #31
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <PCD_EP_ISR_Handler+0x240>
 800bd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	029b      	lsls	r3, r3, #10
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	801a      	strh	r2, [r3, #0]
 800bd84:	e029      	b.n	800bdda <PCD_EP_ISR_Handler+0x2ac>
 800bd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d112      	bne.n	800bdb4 <PCD_EP_ISR_Handler+0x286>
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bda8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	801a      	strh	r2, [r3, #0]
 800bdb2:	e012      	b.n	800bdda <PCD_EP_ISR_Handler+0x2ac>
 800bdb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	647b      	str	r3, [r7, #68]	; 0x44
 800bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <PCD_EP_ISR_Handler+0x2a0>
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdca:	3301      	adds	r3, #1
 800bdcc:	647b      	str	r3, [r7, #68]	; 0x44
 800bdce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	029b      	lsls	r3, r3, #10
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdea:	827b      	strh	r3, [r7, #18]
 800bdec:	8a7b      	ldrh	r3, [r7, #18]
 800bdee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bdf2:	827b      	strh	r3, [r7, #18]
 800bdf4:	8a7b      	ldrh	r3, [r7, #18]
 800bdf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bdfa:	827b      	strh	r3, [r7, #18]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	8a7b      	ldrh	r3, [r7, #18]
 800be02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be12:	b29b      	uxth	r3, r3
 800be14:	8013      	strh	r3, [r2, #0]
 800be16:	e22c      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	461a      	mov	r2, r3
 800be1e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800be2c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800be30:	2b00      	cmp	r3, #0
 800be32:	f280 80f6 	bge.w	800c022 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29a      	uxth	r2, r3
 800be48:	f640 738f 	movw	r3, #3983	; 0xf8f
 800be4c:	4013      	ands	r3, r2
 800be4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800be64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be68:	b292      	uxth	r2, r2
 800be6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800be6c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800be82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be84:	7b1b      	ldrb	r3, [r3, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d123      	bne.n	800bed2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be92:	b29b      	uxth	r3, r3
 800be94:	461a      	mov	r2, r3
 800be96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	4413      	add	r3, r2
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	4413      	add	r3, r2
 800bea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800beae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800beb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 808e 	beq.w	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec2:	6959      	ldr	r1, [r3, #20]
 800bec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec6:	88da      	ldrh	r2, [r3, #6]
 800bec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800becc:	f007 f953 	bl	8013176 <USB_ReadPMA>
 800bed0:	e082      	b.n	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed4:	78db      	ldrb	r3, [r3, #3]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d10a      	bne.n	800bef0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800beda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bede:	461a      	mov	r2, r3
 800bee0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f9d3 	bl	800c28e <HAL_PCD_EP_DB_Receive>
 800bee8:	4603      	mov	r3, r0
 800beea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800beee:	e073      	b.n	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	461a      	mov	r2, r3
 800bef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	441a      	add	r2, r3
 800bf1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d022      	beq.n	800bf94 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	4413      	add	r3, r2
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	4413      	add	r3, r2
 800bf68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bf76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d02c      	beq.n	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf84:	6959      	ldr	r1, [r3, #20]
 800bf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf88:	891a      	ldrh	r2, [r3, #8]
 800bf8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf8e:	f007 f8f2 	bl	8013176 <USB_ReadPMA>
 800bf92:	e021      	b.n	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	4413      	add	r3, r2
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6812      	ldr	r2, [r2, #0]
 800bfac:	4413      	add	r3, r2
 800bfae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bfbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d009      	beq.n	800bfd8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfca:	6959      	ldr	r1, [r3, #20]
 800bfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfce:	895a      	ldrh	r2, [r3, #10]
 800bfd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfd4:	f007 f8cf 	bl	8013176 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfda:	69da      	ldr	r2, [r3, #28]
 800bfdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfe0:	441a      	add	r2, r3
 800bfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe8:	695a      	ldr	r2, [r3, #20]
 800bfea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfee:	441a      	add	r2, r3
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <PCD_EP_ISR_Handler+0x4da>
 800bffc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	429a      	cmp	r2, r3
 800c006:	d206      	bcs.n	800c016 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f008 ffca 	bl	8014fa8 <HAL_PCD_DataOutStageCallback>
 800c014:	e005      	b.n	800c022 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c01c:	4618      	mov	r0, r3
 800c01e:	f005 fbf8 	bl	8011812 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800c022:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 8121 	beq.w	800c272 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800c030:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	4613      	mov	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	00db      	lsls	r3, r3, #3
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	4413      	add	r3, r2
 800c042:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	b29b      	uxth	r3, r3
 800c056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c05e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	441a      	add	r2, r3
 800c070:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	78db      	ldrb	r3, [r3, #3]
 800c084:	2b02      	cmp	r3, #2
 800c086:	f000 80a2 	beq.w	800c1ce <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800c08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08c:	2200      	movs	r2, #0
 800c08e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c092:	7b1b      	ldrb	r3, [r3, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8093 	beq.w	800c1c0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c09a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d046      	beq.n	800c134 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d126      	bne.n	800c0fc <PCD_EP_ISR_Handler+0x5ce>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	4413      	add	r3, r2
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00da      	lsls	r2, r3, #3
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	801a      	strh	r2, [r3, #0]
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	801a      	strh	r2, [r3, #0]
 800c0fa:	e061      	b.n	800c1c0 <PCD_EP_ISR_Handler+0x692>
 800c0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d15d      	bne.n	800c1c0 <PCD_EP_ISR_Handler+0x692>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c112:	b29b      	uxth	r3, r3
 800c114:	461a      	mov	r2, r3
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	4413      	add	r3, r2
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	00da      	lsls	r2, r3, #3
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	4413      	add	r3, r2
 800c126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c12a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	2200      	movs	r2, #0
 800c130:	801a      	strh	r2, [r3, #0]
 800c132:	e045      	b.n	800c1c0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d126      	bne.n	800c190 <PCD_EP_ISR_Handler+0x662>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c150:	b29b      	uxth	r3, r3
 800c152:	461a      	mov	r2, r3
 800c154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c156:	4413      	add	r3, r2
 800c158:	637b      	str	r3, [r7, #52]	; 0x34
 800c15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	00da      	lsls	r2, r3, #3
 800c160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c162:	4413      	add	r3, r2
 800c164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c168:	633b      	str	r3, [r7, #48]	; 0x30
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c174:	b29a      	uxth	r2, r3
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	801a      	strh	r2, [r3, #0]
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c188:	b29a      	uxth	r2, r3
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	801a      	strh	r2, [r3, #0]
 800c18e:	e017      	b.n	800c1c0 <PCD_EP_ISR_Handler+0x692>
 800c190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c192:	785b      	ldrb	r3, [r3, #1]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d113      	bne.n	800c1c0 <PCD_EP_ISR_Handler+0x692>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a6:	4413      	add	r3, r2
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	00da      	lsls	r2, r3, #3
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1bc:	2200      	movs	r2, #0
 800c1be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f008 ff09 	bl	8014fde <HAL_PCD_DataInStageCallback>
 800c1cc:	e051      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c1ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d144      	bne.n	800c264 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	4413      	add	r3, r2
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c204:	699a      	ldr	r2, [r3, #24]
 800c206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d907      	bls.n	800c21e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800c20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c216:	1ad2      	subs	r2, r2, r3
 800c218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21a:	619a      	str	r2, [r3, #24]
 800c21c:	e002      	b.n	800c224 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800c21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c220:	2200      	movs	r2, #0
 800c222:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d106      	bne.n	800c23a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f008 fed3 	bl	8014fde <HAL_PCD_DataInStageCallback>
 800c238:	e01b      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c23c:	695a      	ldr	r2, [r3, #20]
 800c23e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c242:	441a      	add	r2, r3
 800c244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c246:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c24a:	69da      	ldr	r2, [r3, #28]
 800c24c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c250:	441a      	add	r2, r3
 800c252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c254:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c25c:	4618      	mov	r0, r3
 800c25e:	f005 fad8 	bl	8011812 <USB_EPStartXfer>
 800c262:	e006      	b.n	800c272 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c264:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c268:	461a      	mov	r2, r3
 800c26a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f917 	bl	800c4a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	b21b      	sxth	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f6ff ac5a 	blt.w	800bb38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3758      	adds	r7, #88	; 0x58
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b088      	sub	sp, #32
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	4613      	mov	r3, r2
 800c29a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d07c      	beq.n	800c3a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	4413      	add	r3, r2
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	6812      	ldr	r2, [r2, #0]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	699a      	ldr	r2, [r3, #24]
 800c2d0:	8b7b      	ldrh	r3, [r7, #26]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d306      	bcc.n	800c2e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	699a      	ldr	r2, [r3, #24]
 800c2da:	8b7b      	ldrh	r3, [r7, #26]
 800c2dc:	1ad2      	subs	r2, r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	619a      	str	r2, [r3, #24]
 800c2e2:	e002      	b.n	800c2ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d123      	bne.n	800c33a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	b29b      	uxth	r3, r3
 800c304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c30c:	833b      	strh	r3, [r7, #24]
 800c30e:	8b3b      	ldrh	r3, [r7, #24]
 800c310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c314:	833b      	strh	r3, [r7, #24]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	441a      	add	r2, r3
 800c324:	8b3b      	ldrh	r3, [r7, #24]
 800c326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c336:	b29b      	uxth	r3, r3
 800c338:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d01f      	beq.n	800c384 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	b29b      	uxth	r3, r3
 800c356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c35e:	82fb      	strh	r3, [r7, #22]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	441a      	add	r2, r3
 800c36e:	8afb      	ldrh	r3, [r7, #22]
 800c370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c37c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c380:	b29b      	uxth	r3, r3
 800c382:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c384:	8b7b      	ldrh	r3, [r7, #26]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 8085 	beq.w	800c496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	6959      	ldr	r1, [r3, #20]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	891a      	ldrh	r2, [r3, #8]
 800c398:	8b7b      	ldrh	r3, [r7, #26]
 800c39a:	f006 feec 	bl	8013176 <USB_ReadPMA>
 800c39e:	e07a      	b.n	800c496 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	699a      	ldr	r2, [r3, #24]
 800c3ca:	8b7b      	ldrh	r3, [r7, #26]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d306      	bcc.n	800c3de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	699a      	ldr	r2, [r3, #24]
 800c3d4:	8b7b      	ldrh	r3, [r7, #26]
 800c3d6:	1ad2      	subs	r2, r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	619a      	str	r2, [r3, #24]
 800c3dc:	e002      	b.n	800c3e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d123      	bne.n	800c434 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c406:	83fb      	strh	r3, [r7, #30]
 800c408:	8bfb      	ldrh	r3, [r7, #30]
 800c40a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c40e:	83fb      	strh	r3, [r7, #30]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	461a      	mov	r2, r3
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	441a      	add	r2, r3
 800c41e:	8bfb      	ldrh	r3, [r7, #30]
 800c420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c430:	b29b      	uxth	r3, r3
 800c432:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c434:	88fb      	ldrh	r3, [r7, #6]
 800c436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d11f      	bne.n	800c47e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c458:	83bb      	strh	r3, [r7, #28]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	441a      	add	r2, r3
 800c468:	8bbb      	ldrh	r3, [r7, #28]
 800c46a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c46e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c47e:	8b7b      	ldrh	r3, [r7, #26]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d008      	beq.n	800c496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	6959      	ldr	r1, [r3, #20]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	895a      	ldrh	r2, [r3, #10]
 800c490:	8b7b      	ldrh	r3, [r7, #26]
 800c492:	f006 fe70 	bl	8013176 <USB_ReadPMA>
    }
  }

  return count;
 800c496:	8b7b      	ldrh	r3, [r7, #26]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3720      	adds	r7, #32
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b0a2      	sub	sp, #136	; 0x88
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 81c5 	beq.w	800c844 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4413      	add	r3, r2
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	6812      	ldr	r2, [r2, #0]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	699a      	ldr	r2, [r3, #24]
 800c4e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d907      	bls.n	800c4fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	619a      	str	r2, [r3, #24]
 800c4fc:	e002      	b.n	800c504 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2200      	movs	r2, #0
 800c502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f040 80b9 	bne.w	800c680 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d126      	bne.n	800c564 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c524:	b29b      	uxth	r3, r3
 800c526:	461a      	mov	r2, r3
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	4413      	add	r3, r2
 800c52c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	00da      	lsls	r2, r3, #3
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	4413      	add	r3, r2
 800c538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24
 800c53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	b29b      	uxth	r3, r3
 800c544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c548:	b29a      	uxth	r2, r3
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	801a      	strh	r2, [r3, #0]
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	801a      	strh	r2, [r3, #0]
 800c562:	e01a      	b.n	800c59a <HAL_PCD_EP_DB_Transmit+0xfa>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d116      	bne.n	800c59a <HAL_PCD_EP_DB_Transmit+0xfa>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	633b      	str	r3, [r7, #48]	; 0x30
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	461a      	mov	r2, r3
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	4413      	add	r3, r2
 800c582:	633b      	str	r3, [r7, #48]	; 0x30
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	00da      	lsls	r2, r3, #3
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	4413      	add	r3, r2
 800c58e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	2200      	movs	r2, #0
 800c598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	623b      	str	r3, [r7, #32]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	785b      	ldrb	r3, [r3, #1]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d126      	bne.n	800c5f6 <HAL_PCD_EP_DB_Transmit+0x156>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	4413      	add	r3, r2
 800c5be:	61bb      	str	r3, [r7, #24]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	00da      	lsls	r2, r3, #3
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	801a      	strh	r2, [r3, #0]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	801a      	strh	r2, [r3, #0]
 800c5f4:	e017      	b.n	800c626 <HAL_PCD_EP_DB_Transmit+0x186>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	785b      	ldrb	r3, [r3, #1]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d113      	bne.n	800c626 <HAL_PCD_EP_DB_Transmit+0x186>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c606:	b29b      	uxth	r3, r3
 800c608:	461a      	mov	r2, r3
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	4413      	add	r3, r2
 800c60e:	623b      	str	r3, [r7, #32]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	00da      	lsls	r2, r3, #3
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	4413      	add	r3, r2
 800c61a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	2200      	movs	r2, #0
 800c624:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f008 fcd6 	bl	8014fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c632:	88fb      	ldrh	r3, [r7, #6]
 800c634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 82d2 	beq.w	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	461a      	mov	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c658:	827b      	strh	r3, [r7, #18]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	441a      	add	r2, r3
 800c668:	8a7b      	ldrh	r3, [r7, #18]
 800c66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8013      	strh	r3, [r2, #0]
 800c67e:	e2b0      	b.n	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c680:	88fb      	ldrh	r3, [r7, #6]
 800c682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c686:	2b00      	cmp	r3, #0
 800c688:	d021      	beq.n	800c6ce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	441a      	add	r2, r3
 800c6b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c6ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	f040 8284 	bne.w	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	695a      	ldr	r2, [r3, #20]
 800c6de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6e2:	441a      	add	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	69da      	ldr	r2, [r3, #28]
 800c6ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6f0:	441a      	add	r2, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6a1a      	ldr	r2, [r3, #32]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d309      	bcc.n	800c716 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6a1a      	ldr	r2, [r3, #32]
 800c70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c70e:	1ad2      	subs	r2, r2, r3
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	621a      	str	r2, [r3, #32]
 800c714:	e015      	b.n	800c742 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d107      	bne.n	800c72e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c71e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c722:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c72c:	e009      	b.n	800c742 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2200      	movs	r2, #0
 800c740:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d155      	bne.n	800c7f6 <HAL_PCD_EP_DB_Transmit+0x356>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c758:	b29b      	uxth	r3, r3
 800c75a:	461a      	mov	r2, r3
 800c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75e:	4413      	add	r3, r2
 800c760:	63bb      	str	r3, [r7, #56]	; 0x38
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	00da      	lsls	r2, r3, #3
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	4413      	add	r3, r2
 800c76c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c770:	637b      	str	r3, [r7, #52]	; 0x34
 800c772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c774:	2b3e      	cmp	r3, #62	; 0x3e
 800c776:	d916      	bls.n	800c7a6 <HAL_PCD_EP_DB_Transmit+0x306>
 800c778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c77a:	095b      	lsrs	r3, r3, #5
 800c77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c780:	f003 031f 	and.w	r3, r3, #31
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c78a:	3b01      	subs	r3, #1
 800c78c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c790:	b29b      	uxth	r3, r3
 800c792:	029b      	lsls	r3, r3, #10
 800c794:	b29b      	uxth	r3, r3
 800c796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c79a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a2:	801a      	strh	r2, [r3, #0]
 800c7a4:	e043      	b.n	800c82e <HAL_PCD_EP_DB_Transmit+0x38e>
 800c7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d112      	bne.n	800c7d2 <HAL_PCD_EP_DB_Transmit+0x332>
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ba:	801a      	strh	r2, [r3, #0]
 800c7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	e02d      	b.n	800c82e <HAL_PCD_EP_DB_Transmit+0x38e>
 800c7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d4:	085b      	lsrs	r3, r3, #1
 800c7d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <HAL_PCD_EP_DB_Transmit+0x348>
 800c7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	029b      	lsls	r3, r3, #10
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	801a      	strh	r2, [r3, #0]
 800c7f4:	e01b      	b.n	800c82e <HAL_PCD_EP_DB_Transmit+0x38e>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	785b      	ldrb	r3, [r3, #1]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d117      	bne.n	800c82e <HAL_PCD_EP_DB_Transmit+0x38e>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	643b      	str	r3, [r7, #64]	; 0x40
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c812:	4413      	add	r3, r2
 800c814:	643b      	str	r3, [r7, #64]	; 0x40
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	00da      	lsls	r2, r3, #3
 800c81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c81e:	4413      	add	r3, r2
 800c820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c828:	b29a      	uxth	r2, r3
 800c82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6959      	ldr	r1, [r3, #20]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	891a      	ldrh	r2, [r3, #8]
 800c83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f006 fc58 	bl	80130f2 <USB_WritePMA>
 800c842:	e1ce      	b.n	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	461a      	mov	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	4413      	add	r3, r2
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	6812      	ldr	r2, [r2, #0]
 800c85c:	4413      	add	r3, r2
 800c85e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c868:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c874:	429a      	cmp	r2, r3
 800c876:	d307      	bcc.n	800c888 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	699a      	ldr	r2, [r3, #24]
 800c87c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c880:	1ad2      	subs	r2, r2, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	619a      	str	r2, [r3, #24]
 800c886:	e002      	b.n	800c88e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2200      	movs	r2, #0
 800c88c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	2b00      	cmp	r3, #0
 800c894:	f040 80c4 	bne.w	800ca20 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	785b      	ldrb	r3, [r3, #1]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d126      	bne.n	800c8ee <HAL_PCD_EP_DB_Transmit+0x44e>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8b4:	4413      	add	r3, r2
 800c8b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	00da      	lsls	r2, r3, #3
 800c8be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8c6:	667b      	str	r3, [r7, #100]	; 0x64
 800c8c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d6:	801a      	strh	r2, [r3, #0]
 800c8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8ea:	801a      	strh	r2, [r3, #0]
 800c8ec:	e01a      	b.n	800c924 <HAL_PCD_EP_DB_Transmit+0x484>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d116      	bne.n	800c924 <HAL_PCD_EP_DB_Transmit+0x484>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	673b      	str	r3, [r7, #112]	; 0x70
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c904:	b29b      	uxth	r3, r3
 800c906:	461a      	mov	r2, r3
 800c908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c90a:	4413      	add	r3, r2
 800c90c:	673b      	str	r3, [r7, #112]	; 0x70
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	00da      	lsls	r2, r3, #3
 800c914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c916:	4413      	add	r3, r2
 800c918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c91c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c920:	2200      	movs	r2, #0
 800c922:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d12f      	bne.n	800c992 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c942:	b29b      	uxth	r3, r3
 800c944:	461a      	mov	r2, r3
 800c946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c94a:	4413      	add	r3, r2
 800c94c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	00da      	lsls	r2, r3, #3
 800c956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c95a:	4413      	add	r3, r2
 800c95c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c970:	b29a      	uxth	r2, r3
 800c972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c976:	801a      	strh	r2, [r3, #0]
 800c978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c988:	b29a      	uxth	r2, r3
 800c98a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c98e:	801a      	strh	r2, [r3, #0]
 800c990:	e017      	b.n	800c9c2 <HAL_PCD_EP_DB_Transmit+0x522>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d113      	bne.n	800c9c2 <HAL_PCD_EP_DB_Transmit+0x522>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9a8:	4413      	add	r3, r2
 800c9aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	00da      	lsls	r2, r3, #3
 800c9b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9be:	2200      	movs	r2, #0
 800c9c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f008 fb08 	bl	8014fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c9ce:	88fb      	ldrh	r3, [r7, #6]
 800c9d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f040 8104 	bne.w	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	441a      	add	r2, r3
 800ca06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	8013      	strh	r3, [r2, #0]
 800ca1e:	e0e0      	b.n	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ca20:	88fb      	ldrh	r3, [r7, #6]
 800ca22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d121      	bne.n	800ca6e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	881b      	ldrh	r3, [r3, #0]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	441a      	add	r2, r3
 800ca56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ca5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	f040 80b4 	bne.w	800cbe2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	695a      	ldr	r2, [r3, #20]
 800ca7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca82:	441a      	add	r2, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	69da      	ldr	r2, [r3, #28]
 800ca8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca90:	441a      	add	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6a1a      	ldr	r2, [r3, #32]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d309      	bcc.n	800cab6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	6a1a      	ldr	r2, [r3, #32]
 800caac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	621a      	str	r2, [r3, #32]
 800cab4:	e015      	b.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d107      	bne.n	800cace <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800cabe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cac2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cacc:	e009      	b.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2200      	movs	r2, #0
 800cad8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	663b      	str	r3, [r7, #96]	; 0x60
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	785b      	ldrb	r3, [r3, #1]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d155      	bne.n	800cb9c <HAL_PCD_EP_DB_Transmit+0x6fc>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb04:	4413      	add	r3, r2
 800cb06:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	00da      	lsls	r2, r3, #3
 800cb0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb10:	4413      	add	r3, r2
 800cb12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb16:	657b      	str	r3, [r7, #84]	; 0x54
 800cb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1a:	2b3e      	cmp	r3, #62	; 0x3e
 800cb1c:	d916      	bls.n	800cb4c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800cb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb20:	095b      	lsrs	r3, r3, #5
 800cb22:	677b      	str	r3, [r7, #116]	; 0x74
 800cb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb26:	f003 031f 	and.w	r3, r3, #31
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <HAL_PCD_EP_DB_Transmit+0x694>
 800cb2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb30:	3b01      	subs	r3, #1
 800cb32:	677b      	str	r3, [r7, #116]	; 0x74
 800cb34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	029b      	lsls	r3, r3, #10
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb48:	801a      	strh	r2, [r3, #0]
 800cb4a:	e040      	b.n	800cbce <HAL_PCD_EP_DB_Transmit+0x72e>
 800cb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d112      	bne.n	800cb78 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800cb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb60:	801a      	strh	r2, [r3, #0]
 800cb62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb74:	801a      	strh	r2, [r3, #0]
 800cb76:	e02a      	b.n	800cbce <HAL_PCD_EP_DB_Transmit+0x72e>
 800cb78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb7a:	085b      	lsrs	r3, r3, #1
 800cb7c:	677b      	str	r3, [r7, #116]	; 0x74
 800cb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <HAL_PCD_EP_DB_Transmit+0x6ee>
 800cb88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	677b      	str	r3, [r7, #116]	; 0x74
 800cb8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	029b      	lsls	r3, r3, #10
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb98:	801a      	strh	r2, [r3, #0]
 800cb9a:	e018      	b.n	800cbce <HAL_PCD_EP_DB_Transmit+0x72e>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	785b      	ldrb	r3, [r3, #1]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d114      	bne.n	800cbce <HAL_PCD_EP_DB_Transmit+0x72e>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbb2:	4413      	add	r3, r2
 800cbb4:	663b      	str	r3, [r7, #96]	; 0x60
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	00da      	lsls	r2, r3, #3
 800cbbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	6959      	ldr	r1, [r3, #20]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	895a      	ldrh	r2, [r3, #10]
 800cbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	f006 fa88 	bl	80130f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbfc:	823b      	strh	r3, [r7, #16]
 800cbfe:	8a3b      	ldrh	r3, [r7, #16]
 800cc00:	f083 0310 	eor.w	r3, r3, #16
 800cc04:	823b      	strh	r3, [r7, #16]
 800cc06:	8a3b      	ldrh	r3, [r7, #16]
 800cc08:	f083 0320 	eor.w	r3, r3, #32
 800cc0c:	823b      	strh	r3, [r7, #16]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	441a      	add	r2, r3
 800cc1c:	8a3b      	ldrh	r3, [r7, #16]
 800cc1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3788      	adds	r7, #136	; 0x88
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	607b      	str	r3, [r7, #4]
 800cc46:	460b      	mov	r3, r1
 800cc48:	817b      	strh	r3, [r7, #10]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cc4e:	897b      	ldrh	r3, [r7, #10]
 800cc50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00b      	beq.n	800cc72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc5a:	897b      	ldrh	r3, [r7, #10]
 800cc5c:	f003 0307 	and.w	r3, r3, #7
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e009      	b.n	800cc86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cc72:	897a      	ldrh	r2, [r7, #10]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	4413      	add	r3, r2
 800cc84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cc86:	893b      	ldrh	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d107      	bne.n	800cc9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	80da      	strh	r2, [r3, #6]
 800cc9a:	e00b      	b.n	800ccb4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	0c1b      	lsrs	r3, r3, #16
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b085      	sub	sp, #20
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	f043 0301 	orr.w	r3, r3, #1
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	f043 0302 	orr.w	r3, r3, #2
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
	...

0800cd18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d141      	bne.n	800cdaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cd26:	4b4b      	ldr	r3, [pc, #300]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd32:	d131      	bne.n	800cd98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cd34:	4b47      	ldr	r3, [pc, #284]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd3a:	4a46      	ldr	r2, [pc, #280]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd44:	4b43      	ldr	r3, [pc, #268]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd4c:	4a41      	ldr	r2, [pc, #260]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cd54:	4b40      	ldr	r3, [pc, #256]	; (800ce58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2232      	movs	r2, #50	; 0x32
 800cd5a:	fb02 f303 	mul.w	r3, r2, r3
 800cd5e:	4a3f      	ldr	r2, [pc, #252]	; (800ce5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cd60:	fba2 2303 	umull	r2, r3, r2, r3
 800cd64:	0c9b      	lsrs	r3, r3, #18
 800cd66:	3301      	adds	r3, #1
 800cd68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd6a:	e002      	b.n	800cd72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd72:	4b38      	ldr	r3, [pc, #224]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd7e:	d102      	bne.n	800cd86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1f2      	bne.n	800cd6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cd86:	4b33      	ldr	r3, [pc, #204]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd92:	d158      	bne.n	800ce46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e057      	b.n	800ce48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cd98:	4b2e      	ldr	r3, [pc, #184]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd9e:	4a2d      	ldr	r2, [pc, #180]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cda4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cda8:	e04d      	b.n	800ce46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb0:	d141      	bne.n	800ce36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cdb2:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cdba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdbe:	d131      	bne.n	800ce24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cdc0:	4b24      	ldr	r3, [pc, #144]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdc6:	4a23      	ldr	r2, [pc, #140]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdd0:	4b20      	ldr	r3, [pc, #128]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cdd8:	4a1e      	ldr	r2, [pc, #120]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cde0:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2232      	movs	r2, #50	; 0x32
 800cde6:	fb02 f303 	mul.w	r3, r2, r3
 800cdea:	4a1c      	ldr	r2, [pc, #112]	; (800ce5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cdec:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf0:	0c9b      	lsrs	r3, r3, #18
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdf6:	e002      	b.n	800cdfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdfe:	4b15      	ldr	r3, [pc, #84]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce0a:	d102      	bne.n	800ce12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1f2      	bne.n	800cdf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce12:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce1e:	d112      	bne.n	800ce46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	e011      	b.n	800ce48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce24:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce2a:	4a0a      	ldr	r2, [pc, #40]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ce34:	e007      	b.n	800ce46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ce36:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ce3e:	4a05      	ldr	r2, [pc, #20]	; (800ce54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	40007000 	.word	0x40007000
 800ce58:	20000000 	.word	0x20000000
 800ce5c:	431bde83 	.word	0x431bde83

0800ce60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b088      	sub	sp, #32
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e306      	b.n	800d480 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d075      	beq.n	800cf6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce7e:	4b97      	ldr	r3, [pc, #604]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	f003 030c 	and.w	r3, r3, #12
 800ce86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce88:	4b94      	ldr	r3, [pc, #592]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f003 0303 	and.w	r3, r3, #3
 800ce90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b0c      	cmp	r3, #12
 800ce96:	d102      	bne.n	800ce9e <HAL_RCC_OscConfig+0x3e>
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d002      	beq.n	800cea4 <HAL_RCC_OscConfig+0x44>
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	2b08      	cmp	r3, #8
 800cea2:	d10b      	bne.n	800cebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cea4:	4b8d      	ldr	r3, [pc, #564]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d05b      	beq.n	800cf68 <HAL_RCC_OscConfig+0x108>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d157      	bne.n	800cf68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e2e1      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cec4:	d106      	bne.n	800ced4 <HAL_RCC_OscConfig+0x74>
 800cec6:	4b85      	ldr	r3, [pc, #532]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a84      	ldr	r2, [pc, #528]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ced0:	6013      	str	r3, [r2, #0]
 800ced2:	e01d      	b.n	800cf10 <HAL_RCC_OscConfig+0xb0>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cedc:	d10c      	bne.n	800cef8 <HAL_RCC_OscConfig+0x98>
 800cede:	4b7f      	ldr	r3, [pc, #508]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a7e      	ldr	r2, [pc, #504]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	4b7c      	ldr	r3, [pc, #496]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a7b      	ldr	r2, [pc, #492]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	e00b      	b.n	800cf10 <HAL_RCC_OscConfig+0xb0>
 800cef8:	4b78      	ldr	r3, [pc, #480]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a77      	ldr	r2, [pc, #476]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cefe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	4b75      	ldr	r3, [pc, #468]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a74      	ldr	r2, [pc, #464]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d013      	beq.n	800cf40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf18:	f7f9 fc80 	bl	800681c <HAL_GetTick>
 800cf1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf1e:	e008      	b.n	800cf32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf20:	f7f9 fc7c 	bl	800681c <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	2b64      	cmp	r3, #100	; 0x64
 800cf2c:	d901      	bls.n	800cf32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e2a6      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf32:	4b6a      	ldr	r3, [pc, #424]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d0f0      	beq.n	800cf20 <HAL_RCC_OscConfig+0xc0>
 800cf3e:	e014      	b.n	800cf6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf40:	f7f9 fc6c 	bl	800681c <HAL_GetTick>
 800cf44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cf46:	e008      	b.n	800cf5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf48:	f7f9 fc68 	bl	800681c <HAL_GetTick>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	2b64      	cmp	r3, #100	; 0x64
 800cf54:	d901      	bls.n	800cf5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e292      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cf5a:	4b60      	ldr	r3, [pc, #384]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1f0      	bne.n	800cf48 <HAL_RCC_OscConfig+0xe8>
 800cf66:	e000      	b.n	800cf6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0302 	and.w	r3, r3, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d075      	beq.n	800d062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf76:	4b59      	ldr	r3, [pc, #356]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f003 030c 	and.w	r3, r3, #12
 800cf7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cf80:	4b56      	ldr	r3, [pc, #344]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	f003 0303 	and.w	r3, r3, #3
 800cf88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2b0c      	cmp	r3, #12
 800cf8e:	d102      	bne.n	800cf96 <HAL_RCC_OscConfig+0x136>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d002      	beq.n	800cf9c <HAL_RCC_OscConfig+0x13c>
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	2b04      	cmp	r3, #4
 800cf9a:	d11f      	bne.n	800cfdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cf9c:	4b4f      	ldr	r3, [pc, #316]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d005      	beq.n	800cfb4 <HAL_RCC_OscConfig+0x154>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e265      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfb4:	4b49      	ldr	r3, [pc, #292]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	061b      	lsls	r3, r3, #24
 800cfc2:	4946      	ldr	r1, [pc, #280]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cfc8:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <HAL_RCC_OscConfig+0x280>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7f9 fbd9 	bl	8006784 <HAL_InitTick>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d043      	beq.n	800d060 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e251      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d023      	beq.n	800d02c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfe4:	4b3d      	ldr	r3, [pc, #244]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a3c      	ldr	r2, [pc, #240]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800cfea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cff0:	f7f9 fc14 	bl	800681c <HAL_GetTick>
 800cff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cff6:	e008      	b.n	800d00a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cff8:	f7f9 fc10 	bl	800681c <HAL_GetTick>
 800cffc:	4602      	mov	r2, r0
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	2b02      	cmp	r3, #2
 800d004:	d901      	bls.n	800d00a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d006:	2303      	movs	r3, #3
 800d008:	e23a      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d00a:	4b34      	ldr	r3, [pc, #208]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0f0      	beq.n	800cff8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d016:	4b31      	ldr	r3, [pc, #196]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	061b      	lsls	r3, r3, #24
 800d024:	492d      	ldr	r1, [pc, #180]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d026:	4313      	orrs	r3, r2
 800d028:	604b      	str	r3, [r1, #4]
 800d02a:	e01a      	b.n	800d062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d02c:	4b2b      	ldr	r3, [pc, #172]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a2a      	ldr	r2, [pc, #168]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d038:	f7f9 fbf0 	bl	800681c <HAL_GetTick>
 800d03c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d03e:	e008      	b.n	800d052 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d040:	f7f9 fbec 	bl	800681c <HAL_GetTick>
 800d044:	4602      	mov	r2, r0
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d901      	bls.n	800d052 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e216      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d052:	4b22      	ldr	r3, [pc, #136]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1f0      	bne.n	800d040 <HAL_RCC_OscConfig+0x1e0>
 800d05e:	e000      	b.n	800d062 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0308 	and.w	r3, r3, #8
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d041      	beq.n	800d0f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d01c      	beq.n	800d0b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d076:	4b19      	ldr	r3, [pc, #100]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d07c:	4a17      	ldr	r2, [pc, #92]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d07e:	f043 0301 	orr.w	r3, r3, #1
 800d082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d086:	f7f9 fbc9 	bl	800681c <HAL_GetTick>
 800d08a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d08c:	e008      	b.n	800d0a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d08e:	f7f9 fbc5 	bl	800681c <HAL_GetTick>
 800d092:	4602      	mov	r2, r0
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d901      	bls.n	800d0a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e1ef      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d0a0:	4b0e      	ldr	r3, [pc, #56]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d0a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0a6:	f003 0302 	and.w	r3, r3, #2
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0ef      	beq.n	800d08e <HAL_RCC_OscConfig+0x22e>
 800d0ae:	e020      	b.n	800d0f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d0b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0b6:	4a09      	ldr	r2, [pc, #36]	; (800d0dc <HAL_RCC_OscConfig+0x27c>)
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0c0:	f7f9 fbac 	bl	800681c <HAL_GetTick>
 800d0c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d0c6:	e00d      	b.n	800d0e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0c8:	f7f9 fba8 	bl	800681c <HAL_GetTick>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d906      	bls.n	800d0e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e1d2      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
 800d0da:	bf00      	nop
 800d0dc:	40021000 	.word	0x40021000
 800d0e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d0e4:	4b8c      	ldr	r3, [pc, #560]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1ea      	bne.n	800d0c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0304 	and.w	r3, r3, #4
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 80a6 	beq.w	800d24c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d100:	2300      	movs	r3, #0
 800d102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d104:	4b84      	ldr	r3, [pc, #528]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <HAL_RCC_OscConfig+0x2b4>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <HAL_RCC_OscConfig+0x2b6>
 800d114:	2300      	movs	r3, #0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00d      	beq.n	800d136 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d11a:	4b7f      	ldr	r3, [pc, #508]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11e:	4a7e      	ldr	r2, [pc, #504]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d124:	6593      	str	r3, [r2, #88]	; 0x58
 800d126:	4b7c      	ldr	r3, [pc, #496]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d132:	2301      	movs	r3, #1
 800d134:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d136:	4b79      	ldr	r3, [pc, #484]	; (800d31c <HAL_RCC_OscConfig+0x4bc>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d118      	bne.n	800d174 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d142:	4b76      	ldr	r3, [pc, #472]	; (800d31c <HAL_RCC_OscConfig+0x4bc>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a75      	ldr	r2, [pc, #468]	; (800d31c <HAL_RCC_OscConfig+0x4bc>)
 800d148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d14c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d14e:	f7f9 fb65 	bl	800681c <HAL_GetTick>
 800d152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d154:	e008      	b.n	800d168 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d156:	f7f9 fb61 	bl	800681c <HAL_GetTick>
 800d15a:	4602      	mov	r2, r0
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	2b02      	cmp	r3, #2
 800d162:	d901      	bls.n	800d168 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d164:	2303      	movs	r3, #3
 800d166:	e18b      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d168:	4b6c      	ldr	r3, [pc, #432]	; (800d31c <HAL_RCC_OscConfig+0x4bc>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d170:	2b00      	cmp	r3, #0
 800d172:	d0f0      	beq.n	800d156 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d108      	bne.n	800d18e <HAL_RCC_OscConfig+0x32e>
 800d17c:	4b66      	ldr	r3, [pc, #408]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d182:	4a65      	ldr	r2, [pc, #404]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d184:	f043 0301 	orr.w	r3, r3, #1
 800d188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d18c:	e024      	b.n	800d1d8 <HAL_RCC_OscConfig+0x378>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	2b05      	cmp	r3, #5
 800d194:	d110      	bne.n	800d1b8 <HAL_RCC_OscConfig+0x358>
 800d196:	4b60      	ldr	r3, [pc, #384]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d19c:	4a5e      	ldr	r2, [pc, #376]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d19e:	f043 0304 	orr.w	r3, r3, #4
 800d1a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d1a6:	4b5c      	ldr	r3, [pc, #368]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ac:	4a5a      	ldr	r2, [pc, #360]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1ae:	f043 0301 	orr.w	r3, r3, #1
 800d1b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d1b6:	e00f      	b.n	800d1d8 <HAL_RCC_OscConfig+0x378>
 800d1b8:	4b57      	ldr	r3, [pc, #348]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1be:	4a56      	ldr	r2, [pc, #344]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1c0:	f023 0301 	bic.w	r3, r3, #1
 800d1c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d1c8:	4b53      	ldr	r3, [pc, #332]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ce:	4a52      	ldr	r2, [pc, #328]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d1d0:	f023 0304 	bic.w	r3, r3, #4
 800d1d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d016      	beq.n	800d20e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1e0:	f7f9 fb1c 	bl	800681c <HAL_GetTick>
 800d1e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d1e6:	e00a      	b.n	800d1fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1e8:	f7f9 fb18 	bl	800681c <HAL_GetTick>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d901      	bls.n	800d1fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	e140      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d1fe:	4b46      	ldr	r3, [pc, #280]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d204:	f003 0302 	and.w	r3, r3, #2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d0ed      	beq.n	800d1e8 <HAL_RCC_OscConfig+0x388>
 800d20c:	e015      	b.n	800d23a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d20e:	f7f9 fb05 	bl	800681c <HAL_GetTick>
 800d212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d214:	e00a      	b.n	800d22c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d216:	f7f9 fb01 	bl	800681c <HAL_GetTick>
 800d21a:	4602      	mov	r2, r0
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	f241 3288 	movw	r2, #5000	; 0x1388
 800d224:	4293      	cmp	r3, r2
 800d226:	d901      	bls.n	800d22c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d228:	2303      	movs	r3, #3
 800d22a:	e129      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d22c:	4b3a      	ldr	r3, [pc, #232]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d232:	f003 0302 	and.w	r3, r3, #2
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1ed      	bne.n	800d216 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d23a:	7ffb      	ldrb	r3, [r7, #31]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d105      	bne.n	800d24c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d240:	4b35      	ldr	r3, [pc, #212]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d244:	4a34      	ldr	r2, [pc, #208]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d24a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0320 	and.w	r3, r3, #32
 800d254:	2b00      	cmp	r3, #0
 800d256:	d03c      	beq.n	800d2d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d01c      	beq.n	800d29a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d260:	4b2d      	ldr	r3, [pc, #180]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d266:	4a2c      	ldr	r2, [pc, #176]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d268:	f043 0301 	orr.w	r3, r3, #1
 800d26c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d270:	f7f9 fad4 	bl	800681c <HAL_GetTick>
 800d274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d276:	e008      	b.n	800d28a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d278:	f7f9 fad0 	bl	800681c <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	2b02      	cmp	r3, #2
 800d284:	d901      	bls.n	800d28a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e0fa      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d28a:	4b23      	ldr	r3, [pc, #140]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d28c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d290:	f003 0302 	and.w	r3, r3, #2
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0ef      	beq.n	800d278 <HAL_RCC_OscConfig+0x418>
 800d298:	e01b      	b.n	800d2d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d29a:	4b1f      	ldr	r3, [pc, #124]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d29c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2a0:	4a1d      	ldr	r2, [pc, #116]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d2a2:	f023 0301 	bic.w	r3, r3, #1
 800d2a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2aa:	f7f9 fab7 	bl	800681c <HAL_GetTick>
 800d2ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d2b0:	e008      	b.n	800d2c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d2b2:	f7f9 fab3 	bl	800681c <HAL_GetTick>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d901      	bls.n	800d2c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e0dd      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d2c4:	4b14      	ldr	r3, [pc, #80]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d2c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2ca:	f003 0302 	and.w	r3, r3, #2
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1ef      	bne.n	800d2b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f000 80d1 	beq.w	800d47e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d2dc:	4b0e      	ldr	r3, [pc, #56]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f003 030c 	and.w	r3, r3, #12
 800d2e4:	2b0c      	cmp	r3, #12
 800d2e6:	f000 808b 	beq.w	800d400 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	69db      	ldr	r3, [r3, #28]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d15e      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2f2:	4b09      	ldr	r3, [pc, #36]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a08      	ldr	r2, [pc, #32]	; (800d318 <HAL_RCC_OscConfig+0x4b8>)
 800d2f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2fe:	f7f9 fa8d 	bl	800681c <HAL_GetTick>
 800d302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d304:	e00c      	b.n	800d320 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d306:	f7f9 fa89 	bl	800681c <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b02      	cmp	r3, #2
 800d312:	d905      	bls.n	800d320 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e0b3      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
 800d318:	40021000 	.word	0x40021000
 800d31c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d320:	4b59      	ldr	r3, [pc, #356]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1ec      	bne.n	800d306 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d32c:	4b56      	ldr	r3, [pc, #344]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	4b56      	ldr	r3, [pc, #344]	; (800d48c <HAL_RCC_OscConfig+0x62c>)
 800d332:	4013      	ands	r3, r2
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	6a11      	ldr	r1, [r2, #32]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d33c:	3a01      	subs	r2, #1
 800d33e:	0112      	lsls	r2, r2, #4
 800d340:	4311      	orrs	r1, r2
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d346:	0212      	lsls	r2, r2, #8
 800d348:	4311      	orrs	r1, r2
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d34e:	0852      	lsrs	r2, r2, #1
 800d350:	3a01      	subs	r2, #1
 800d352:	0552      	lsls	r2, r2, #21
 800d354:	4311      	orrs	r1, r2
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d35a:	0852      	lsrs	r2, r2, #1
 800d35c:	3a01      	subs	r2, #1
 800d35e:	0652      	lsls	r2, r2, #25
 800d360:	4311      	orrs	r1, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d366:	06d2      	lsls	r2, r2, #27
 800d368:	430a      	orrs	r2, r1
 800d36a:	4947      	ldr	r1, [pc, #284]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d370:	4b45      	ldr	r3, [pc, #276]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a44      	ldr	r2, [pc, #272]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d37a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d37c:	4b42      	ldr	r3, [pc, #264]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	4a41      	ldr	r2, [pc, #260]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d388:	f7f9 fa48 	bl	800681c <HAL_GetTick>
 800d38c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d38e:	e008      	b.n	800d3a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d390:	f7f9 fa44 	bl	800681c <HAL_GetTick>
 800d394:	4602      	mov	r2, r0
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d901      	bls.n	800d3a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	e06e      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d3a2:	4b39      	ldr	r3, [pc, #228]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d0f0      	beq.n	800d390 <HAL_RCC_OscConfig+0x530>
 800d3ae:	e066      	b.n	800d47e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3b0:	4b35      	ldr	r3, [pc, #212]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a34      	ldr	r2, [pc, #208]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d3bc:	4b32      	ldr	r3, [pc, #200]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	4a31      	ldr	r2, [pc, #196]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3c2:	f023 0303 	bic.w	r3, r3, #3
 800d3c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d3c8:	4b2f      	ldr	r3, [pc, #188]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	4a2e      	ldr	r2, [pc, #184]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d3d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3d8:	f7f9 fa20 	bl	800681c <HAL_GetTick>
 800d3dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d3de:	e008      	b.n	800d3f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3e0:	f7f9 fa1c 	bl	800681c <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d901      	bls.n	800d3f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e046      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d3f2:	4b25      	ldr	r3, [pc, #148]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1f0      	bne.n	800d3e0 <HAL_RCC_OscConfig+0x580>
 800d3fe:	e03e      	b.n	800d47e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	69db      	ldr	r3, [r3, #28]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d101      	bne.n	800d40c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	e039      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d40c:	4b1e      	ldr	r3, [pc, #120]	; (800d488 <HAL_RCC_OscConfig+0x628>)
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f003 0203 	and.w	r2, r3, #3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d12c      	bne.n	800d47a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42a:	3b01      	subs	r3, #1
 800d42c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d42e:	429a      	cmp	r2, r3
 800d430:	d123      	bne.n	800d47a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d43e:	429a      	cmp	r2, r3
 800d440:	d11b      	bne.n	800d47a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d44e:	429a      	cmp	r2, r3
 800d450:	d113      	bne.n	800d47a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	085b      	lsrs	r3, r3, #1
 800d45e:	3b01      	subs	r3, #1
 800d460:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d462:	429a      	cmp	r2, r3
 800d464:	d109      	bne.n	800d47a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d470:	085b      	lsrs	r3, r3, #1
 800d472:	3b01      	subs	r3, #1
 800d474:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d476:	429a      	cmp	r2, r3
 800d478:	d001      	beq.n	800d47e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	40021000 	.word	0x40021000
 800d48c:	019f800c 	.word	0x019f800c

0800d490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e11e      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d4a8:	4b91      	ldr	r3, [pc, #580]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 030f 	and.w	r3, r3, #15
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d910      	bls.n	800d4d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4b6:	4b8e      	ldr	r3, [pc, #568]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f023 020f 	bic.w	r2, r3, #15
 800d4be:	498c      	ldr	r1, [pc, #560]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4c6:	4b8a      	ldr	r3, [pc, #552]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 030f 	and.w	r3, r3, #15
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d001      	beq.n	800d4d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e106      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d073      	beq.n	800d5cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	d129      	bne.n	800d540 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4ec:	4b81      	ldr	r3, [pc, #516]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e0f4      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d4fc:	f000 f99e 	bl	800d83c <RCC_GetSysClockFreqFromPLLSource>
 800d500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	4a7c      	ldr	r2, [pc, #496]	; (800d6f8 <HAL_RCC_ClockConfig+0x268>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d93f      	bls.n	800d58a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d50a:	4b7a      	ldr	r3, [pc, #488]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d033      	beq.n	800d58a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d526:	2b00      	cmp	r3, #0
 800d528:	d12f      	bne.n	800d58a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d52a:	4b72      	ldr	r3, [pc, #456]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d532:	4a70      	ldr	r2, [pc, #448]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d538:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d53a:	2380      	movs	r3, #128	; 0x80
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	e024      	b.n	800d58a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d107      	bne.n	800d558 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d548:	4b6a      	ldr	r3, [pc, #424]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d109      	bne.n	800d568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e0c6      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d558:	4b66      	ldr	r3, [pc, #408]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	e0be      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d568:	f000 f8ce 	bl	800d708 <HAL_RCC_GetSysClockFreq>
 800d56c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	4a61      	ldr	r2, [pc, #388]	; (800d6f8 <HAL_RCC_ClockConfig+0x268>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d909      	bls.n	800d58a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d576:	4b5f      	ldr	r3, [pc, #380]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d57e:	4a5d      	ldr	r2, [pc, #372]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d584:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d586:	2380      	movs	r3, #128	; 0x80
 800d588:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d58a:	4b5a      	ldr	r3, [pc, #360]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	f023 0203 	bic.w	r2, r3, #3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	4957      	ldr	r1, [pc, #348]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d598:	4313      	orrs	r3, r2
 800d59a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d59c:	f7f9 f93e 	bl	800681c <HAL_GetTick>
 800d5a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5a2:	e00a      	b.n	800d5ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5a4:	f7f9 f93a 	bl	800681c <HAL_GetTick>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d901      	bls.n	800d5ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e095      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5ba:	4b4e      	ldr	r3, [pc, #312]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	f003 020c 	and.w	r2, r3, #12
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d1eb      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 0302 	and.w	r3, r3, #2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d023      	beq.n	800d620 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5e4:	4b43      	ldr	r3, [pc, #268]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	4a42      	ldr	r2, [pc, #264]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d5ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d5ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 0308 	and.w	r3, r3, #8
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d007      	beq.n	800d60c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d5fc:	4b3d      	ldr	r3, [pc, #244]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d604:	4a3b      	ldr	r2, [pc, #236]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d60a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d60c:	4b39      	ldr	r3, [pc, #228]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	4936      	ldr	r1, [pc, #216]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d61a:	4313      	orrs	r3, r2
 800d61c:	608b      	str	r3, [r1, #8]
 800d61e:	e008      	b.n	800d632 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b80      	cmp	r3, #128	; 0x80
 800d624:	d105      	bne.n	800d632 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d626:	4b33      	ldr	r3, [pc, #204]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	4a32      	ldr	r2, [pc, #200]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d62c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d630:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d632:	4b2f      	ldr	r3, [pc, #188]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 030f 	and.w	r3, r3, #15
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d21d      	bcs.n	800d67c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d640:	4b2b      	ldr	r3, [pc, #172]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f023 020f 	bic.w	r2, r3, #15
 800d648:	4929      	ldr	r1, [pc, #164]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d650:	f7f9 f8e4 	bl	800681c <HAL_GetTick>
 800d654:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d656:	e00a      	b.n	800d66e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d658:	f7f9 f8e0 	bl	800681c <HAL_GetTick>
 800d65c:	4602      	mov	r2, r0
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	f241 3288 	movw	r2, #5000	; 0x1388
 800d666:	4293      	cmp	r3, r2
 800d668:	d901      	bls.n	800d66e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e03b      	b.n	800d6e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d66e:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <HAL_RCC_ClockConfig+0x260>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 030f 	and.w	r3, r3, #15
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d1ed      	bne.n	800d658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f003 0304 	and.w	r3, r3, #4
 800d684:	2b00      	cmp	r3, #0
 800d686:	d008      	beq.n	800d69a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	4917      	ldr	r1, [pc, #92]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d696:	4313      	orrs	r3, r2
 800d698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f003 0308 	and.w	r3, r3, #8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d009      	beq.n	800d6ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d6a6:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	490f      	ldr	r1, [pc, #60]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d6ba:	f000 f825 	bl	800d708 <HAL_RCC_GetSysClockFreq>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <HAL_RCC_ClockConfig+0x264>)
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	091b      	lsrs	r3, r3, #4
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	490c      	ldr	r1, [pc, #48]	; (800d6fc <HAL_RCC_ClockConfig+0x26c>)
 800d6cc:	5ccb      	ldrb	r3, [r1, r3]
 800d6ce:	f003 031f 	and.w	r3, r3, #31
 800d6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d6:	4a0a      	ldr	r2, [pc, #40]	; (800d700 <HAL_RCC_ClockConfig+0x270>)
 800d6d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d6da:	4b0a      	ldr	r3, [pc, #40]	; (800d704 <HAL_RCC_ClockConfig+0x274>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f9 f850 	bl	8006784 <HAL_InitTick>
 800d6e4:	4603      	mov	r3, r0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	40022000 	.word	0x40022000
 800d6f4:	40021000 	.word	0x40021000
 800d6f8:	04c4b400 	.word	0x04c4b400
 800d6fc:	080189c4 	.word	0x080189c4
 800d700:	20000000 	.word	0x20000000
 800d704:	20000004 	.word	0x20000004

0800d708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d708:	b480      	push	{r7}
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d70e:	4b2c      	ldr	r3, [pc, #176]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f003 030c 	and.w	r3, r3, #12
 800d716:	2b04      	cmp	r3, #4
 800d718:	d102      	bne.n	800d720 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d71a:	4b2a      	ldr	r3, [pc, #168]	; (800d7c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	e047      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d720:	4b27      	ldr	r3, [pc, #156]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f003 030c 	and.w	r3, r3, #12
 800d728:	2b08      	cmp	r3, #8
 800d72a:	d102      	bne.n	800d732 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d72c:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d72e:	613b      	str	r3, [r7, #16]
 800d730:	e03e      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d732:	4b23      	ldr	r3, [pc, #140]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	f003 030c 	and.w	r3, r3, #12
 800d73a:	2b0c      	cmp	r3, #12
 800d73c:	d136      	bne.n	800d7ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d73e:	4b20      	ldr	r3, [pc, #128]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f003 0303 	and.w	r3, r3, #3
 800d746:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d748:	4b1d      	ldr	r3, [pc, #116]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	091b      	lsrs	r3, r3, #4
 800d74e:	f003 030f 	and.w	r3, r3, #15
 800d752:	3301      	adds	r3, #1
 800d754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b03      	cmp	r3, #3
 800d75a:	d10c      	bne.n	800d776 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d75c:	4a1a      	ldr	r2, [pc, #104]	; (800d7c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	fbb2 f3f3 	udiv	r3, r2, r3
 800d764:	4a16      	ldr	r2, [pc, #88]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d766:	68d2      	ldr	r2, [r2, #12]
 800d768:	0a12      	lsrs	r2, r2, #8
 800d76a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
 800d772:	617b      	str	r3, [r7, #20]
      break;
 800d774:	e00c      	b.n	800d790 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d776:	4a13      	ldr	r2, [pc, #76]	; (800d7c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d77e:	4a10      	ldr	r2, [pc, #64]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d780:	68d2      	ldr	r2, [r2, #12]
 800d782:	0a12      	lsrs	r2, r2, #8
 800d784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d788:	fb02 f303 	mul.w	r3, r2, r3
 800d78c:	617b      	str	r3, [r7, #20]
      break;
 800d78e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	0e5b      	lsrs	r3, r3, #25
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	3301      	adds	r3, #1
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a8:	613b      	str	r3, [r7, #16]
 800d7aa:	e001      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d7b0:	693b      	ldr	r3, [r7, #16]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	371c      	adds	r7, #28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	40021000 	.word	0x40021000
 800d7c4:	00f42400 	.word	0x00f42400
 800d7c8:	007a1200 	.word	0x007a1200

0800d7cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7d0:	4b03      	ldr	r3, [pc, #12]	; (800d7e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	20000000 	.word	0x20000000

0800d7e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d7e8:	f7ff fff0 	bl	800d7cc <HAL_RCC_GetHCLKFreq>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	0a1b      	lsrs	r3, r3, #8
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	4904      	ldr	r1, [pc, #16]	; (800d80c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d7fa:	5ccb      	ldrb	r3, [r1, r3]
 800d7fc:	f003 031f 	and.w	r3, r3, #31
 800d800:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d804:	4618      	mov	r0, r3
 800d806:	bd80      	pop	{r7, pc}
 800d808:	40021000 	.word	0x40021000
 800d80c:	080189d4 	.word	0x080189d4

0800d810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d814:	f7ff ffda 	bl	800d7cc <HAL_RCC_GetHCLKFreq>
 800d818:	4602      	mov	r2, r0
 800d81a:	4b06      	ldr	r3, [pc, #24]	; (800d834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	0adb      	lsrs	r3, r3, #11
 800d820:	f003 0307 	and.w	r3, r3, #7
 800d824:	4904      	ldr	r1, [pc, #16]	; (800d838 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d826:	5ccb      	ldrb	r3, [r1, r3]
 800d828:	f003 031f 	and.w	r3, r3, #31
 800d82c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d830:	4618      	mov	r0, r3
 800d832:	bd80      	pop	{r7, pc}
 800d834:	40021000 	.word	0x40021000
 800d838:	080189d4 	.word	0x080189d4

0800d83c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d842:	4b1e      	ldr	r3, [pc, #120]	; (800d8bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d84c:	4b1b      	ldr	r3, [pc, #108]	; (800d8bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	091b      	lsrs	r3, r3, #4
 800d852:	f003 030f 	and.w	r3, r3, #15
 800d856:	3301      	adds	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d10c      	bne.n	800d87a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d860:	4a17      	ldr	r2, [pc, #92]	; (800d8c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	fbb2 f3f3 	udiv	r3, r2, r3
 800d868:	4a14      	ldr	r2, [pc, #80]	; (800d8bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d86a:	68d2      	ldr	r2, [r2, #12]
 800d86c:	0a12      	lsrs	r2, r2, #8
 800d86e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d872:	fb02 f303 	mul.w	r3, r2, r3
 800d876:	617b      	str	r3, [r7, #20]
    break;
 800d878:	e00c      	b.n	800d894 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d87a:	4a12      	ldr	r2, [pc, #72]	; (800d8c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d882:	4a0e      	ldr	r2, [pc, #56]	; (800d8bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d884:	68d2      	ldr	r2, [r2, #12]
 800d886:	0a12      	lsrs	r2, r2, #8
 800d888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d88c:	fb02 f303 	mul.w	r3, r2, r3
 800d890:	617b      	str	r3, [r7, #20]
    break;
 800d892:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d894:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	0e5b      	lsrs	r3, r3, #25
 800d89a:	f003 0303 	and.w	r3, r3, #3
 800d89e:	3301      	adds	r3, #1
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d8ae:	687b      	ldr	r3, [r7, #4]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	371c      	adds	r7, #28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	40021000 	.word	0x40021000
 800d8c0:	007a1200 	.word	0x007a1200
 800d8c4:	00f42400 	.word	0x00f42400

0800d8c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 8098 	beq.w	800da16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8ea:	4b43      	ldr	r3, [pc, #268]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10d      	bne.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8f6:	4b40      	ldr	r3, [pc, #256]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8fa:	4a3f      	ldr	r2, [pc, #252]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d900:	6593      	str	r3, [r2, #88]	; 0x58
 800d902:	4b3d      	ldr	r3, [pc, #244]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d90a:	60bb      	str	r3, [r7, #8]
 800d90c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d90e:	2301      	movs	r3, #1
 800d910:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d912:	4b3a      	ldr	r3, [pc, #232]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a39      	ldr	r2, [pc, #228]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d91c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d91e:	f7f8 ff7d 	bl	800681c <HAL_GetTick>
 800d922:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d924:	e009      	b.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d926:	f7f8 ff79 	bl	800681c <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	2b02      	cmp	r3, #2
 800d932:	d902      	bls.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d934:	2303      	movs	r3, #3
 800d936:	74fb      	strb	r3, [r7, #19]
        break;
 800d938:	e005      	b.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d93a:	4b30      	ldr	r3, [pc, #192]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0ef      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d946:	7cfb      	ldrb	r3, [r7, #19]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d159      	bne.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d94c:	4b2a      	ldr	r3, [pc, #168]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d956:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d01e      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	429a      	cmp	r2, r3
 800d966:	d019      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d968:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d974:	4b20      	ldr	r3, [pc, #128]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d97a:	4a1f      	ldr	r2, [pc, #124]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d97c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d984:	4b1c      	ldr	r3, [pc, #112]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d98a:	4a1b      	ldr	r2, [pc, #108]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d98c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d994:	4a18      	ldr	r2, [pc, #96]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d016      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9a6:	f7f8 ff39 	bl	800681c <HAL_GetTick>
 800d9aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9ac:	e00b      	b.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9ae:	f7f8 ff35 	bl	800681c <HAL_GetTick>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d902      	bls.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	74fb      	strb	r3, [r7, #19]
            break;
 800d9c4:	e006      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9cc:	f003 0302 	and.w	r3, r3, #2
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0ec      	beq.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d9d4:	7cfb      	ldrb	r3, [r7, #19]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10b      	bne.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d9da:	4b07      	ldr	r3, [pc, #28]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e8:	4903      	ldr	r1, [pc, #12]	; (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d9f0:	e008      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d9f2:	7cfb      	ldrb	r3, [r7, #19]
 800d9f4:	74bb      	strb	r3, [r7, #18]
 800d9f6:	e005      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d9f8:	40021000 	.word	0x40021000
 800d9fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da00:	7cfb      	ldrb	r3, [r7, #19]
 800da02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da04:	7c7b      	ldrb	r3, [r7, #17]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d105      	bne.n	800da16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da0a:	4ba7      	ldr	r3, [pc, #668]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da0e:	4aa6      	ldr	r2, [pc, #664]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00a      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800da22:	4ba1      	ldr	r3, [pc, #644]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da28:	f023 0203 	bic.w	r2, r3, #3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	499d      	ldr	r1, [pc, #628]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da32:	4313      	orrs	r3, r2
 800da34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800da44:	4b98      	ldr	r3, [pc, #608]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da4a:	f023 020c 	bic.w	r2, r3, #12
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	4995      	ldr	r1, [pc, #596]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da54:	4313      	orrs	r3, r2
 800da56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0304 	and.w	r3, r3, #4
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00a      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800da66:	4b90      	ldr	r3, [pc, #576]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	498c      	ldr	r1, [pc, #560]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da76:	4313      	orrs	r3, r2
 800da78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f003 0308 	and.w	r3, r3, #8
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00a      	beq.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800da88:	4b87      	ldr	r3, [pc, #540]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	4984      	ldr	r1, [pc, #528]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da98:	4313      	orrs	r3, r2
 800da9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 0310 	and.w	r3, r3, #16
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00a      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800daaa:	4b7f      	ldr	r3, [pc, #508]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	497b      	ldr	r1, [pc, #492]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f003 0320 	and.w	r3, r3, #32
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00a      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dacc:	4b76      	ldr	r3, [pc, #472]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	699b      	ldr	r3, [r3, #24]
 800dada:	4973      	ldr	r1, [pc, #460]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dadc:	4313      	orrs	r3, r2
 800dade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800daee:	4b6e      	ldr	r3, [pc, #440]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	69db      	ldr	r3, [r3, #28]
 800dafc:	496a      	ldr	r1, [pc, #424]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00a      	beq.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800db10:	4b65      	ldr	r3, [pc, #404]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	4962      	ldr	r1, [pc, #392]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db20:	4313      	orrs	r3, r2
 800db22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00a      	beq.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800db32:	4b5d      	ldr	r3, [pc, #372]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db40:	4959      	ldr	r1, [pc, #356]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db42:	4313      	orrs	r3, r2
 800db44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00a      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800db54:	4b54      	ldr	r3, [pc, #336]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db5a:	f023 0203 	bic.w	r2, r3, #3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db62:	4951      	ldr	r1, [pc, #324]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db64:	4313      	orrs	r3, r2
 800db66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00a      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800db76:	4b4c      	ldr	r3, [pc, #304]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db84:	4948      	ldr	r1, [pc, #288]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db86:	4313      	orrs	r3, r2
 800db88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db94:	2b00      	cmp	r3, #0
 800db96:	d015      	beq.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800db98:	4b43      	ldr	r3, [pc, #268]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba6:	4940      	ldr	r1, [pc, #256]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbb6:	d105      	bne.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dbb8:	4b3b      	ldr	r3, [pc, #236]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	4a3a      	ldr	r2, [pc, #232]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d015      	beq.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dbd0:	4b35      	ldr	r3, [pc, #212]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbde:	4932      	ldr	r1, [pc, #200]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbee:	d105      	bne.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dbf0:	4b2d      	ldr	r3, [pc, #180]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	4a2c      	ldr	r2, [pc, #176]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d015      	beq.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dc08:	4b27      	ldr	r3, [pc, #156]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc16:	4924      	ldr	r1, [pc, #144]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dc26:	d105      	bne.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc28:	4b1f      	ldr	r3, [pc, #124]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	4a1e      	ldr	r2, [pc, #120]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d015      	beq.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dc40:	4b19      	ldr	r3, [pc, #100]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4e:	4916      	ldr	r1, [pc, #88]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc50:	4313      	orrs	r3, r2
 800dc52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc5e:	d105      	bne.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc60:	4b11      	ldr	r3, [pc, #68]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	4a10      	ldr	r2, [pc, #64]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d019      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dc78:	4b0b      	ldr	r3, [pc, #44]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc86:	4908      	ldr	r1, [pc, #32]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc96:	d109      	bne.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc98:	4b03      	ldr	r3, [pc, #12]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4a02      	ldr	r2, [pc, #8]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dca2:	60d3      	str	r3, [r2, #12]
 800dca4:	e002      	b.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dca6:	bf00      	nop
 800dca8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d015      	beq.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800dcb8:	4b29      	ldr	r3, [pc, #164]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dcba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc6:	4926      	ldr	r1, [pc, #152]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcd6:	d105      	bne.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dcd8:	4b21      	ldr	r3, [pc, #132]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	4a20      	ldr	r2, [pc, #128]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dcde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dce2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d015      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800dcf0:	4b1b      	ldr	r3, [pc, #108]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dcf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcfe:	4918      	ldr	r1, [pc, #96]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd00:	4313      	orrs	r3, r2
 800dd02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd0e:	d105      	bne.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	4a12      	ldr	r2, [pc, #72]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d015      	beq.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dd2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd36:	490a      	ldr	r1, [pc, #40]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd46:	d105      	bne.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd48:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	4a04      	ldr	r2, [pc, #16]	; (800dd60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800dd54:	7cbb      	ldrb	r3, [r7, #18]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	40021000 	.word	0x40021000

0800dd64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e049      	b.n	800de0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7f8 f88c 	bl	8005ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4619      	mov	r1, r3
 800dda2:	4610      	mov	r0, r2
 800dda4:	f000 fbc8 	bl	800e538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e049      	b.n	800deb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d106      	bne.n	800de3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7f8 f8b7 	bl	8005fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2202      	movs	r2, #2
 800de42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	3304      	adds	r3, #4
 800de4e:	4619      	mov	r1, r3
 800de50:	4610      	mov	r0, r2
 800de52:	f000 fb71 	bl	800e538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2201      	movs	r2, #1
 800de82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d109      	bne.n	800dee4 <HAL_TIM_PWM_Start+0x24>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	2b01      	cmp	r3, #1
 800deda:	bf14      	ite	ne
 800dedc:	2301      	movne	r3, #1
 800dede:	2300      	moveq	r3, #0
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	e03c      	b.n	800df5e <HAL_TIM_PWM_Start+0x9e>
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b04      	cmp	r3, #4
 800dee8:	d109      	bne.n	800defe <HAL_TIM_PWM_Start+0x3e>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b01      	cmp	r3, #1
 800def4:	bf14      	ite	ne
 800def6:	2301      	movne	r3, #1
 800def8:	2300      	moveq	r3, #0
 800defa:	b2db      	uxtb	r3, r3
 800defc:	e02f      	b.n	800df5e <HAL_TIM_PWM_Start+0x9e>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b08      	cmp	r3, #8
 800df02:	d109      	bne.n	800df18 <HAL_TIM_PWM_Start+0x58>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	bf14      	ite	ne
 800df10:	2301      	movne	r3, #1
 800df12:	2300      	moveq	r3, #0
 800df14:	b2db      	uxtb	r3, r3
 800df16:	e022      	b.n	800df5e <HAL_TIM_PWM_Start+0x9e>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b0c      	cmp	r3, #12
 800df1c:	d109      	bne.n	800df32 <HAL_TIM_PWM_Start+0x72>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b01      	cmp	r3, #1
 800df28:	bf14      	ite	ne
 800df2a:	2301      	movne	r3, #1
 800df2c:	2300      	moveq	r3, #0
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	e015      	b.n	800df5e <HAL_TIM_PWM_Start+0x9e>
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b10      	cmp	r3, #16
 800df36:	d109      	bne.n	800df4c <HAL_TIM_PWM_Start+0x8c>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b01      	cmp	r3, #1
 800df42:	bf14      	ite	ne
 800df44:	2301      	movne	r3, #1
 800df46:	2300      	moveq	r3, #0
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	e008      	b.n	800df5e <HAL_TIM_PWM_Start+0x9e>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b01      	cmp	r3, #1
 800df56:	bf14      	ite	ne
 800df58:	2301      	movne	r3, #1
 800df5a:	2300      	moveq	r3, #0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	e0a6      	b.n	800e0b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <HAL_TIM_PWM_Start+0xb6>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df74:	e023      	b.n	800dfbe <HAL_TIM_PWM_Start+0xfe>
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2b04      	cmp	r3, #4
 800df7a:	d104      	bne.n	800df86 <HAL_TIM_PWM_Start+0xc6>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2202      	movs	r2, #2
 800df80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df84:	e01b      	b.n	800dfbe <HAL_TIM_PWM_Start+0xfe>
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b08      	cmp	r3, #8
 800df8a:	d104      	bne.n	800df96 <HAL_TIM_PWM_Start+0xd6>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2202      	movs	r2, #2
 800df90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df94:	e013      	b.n	800dfbe <HAL_TIM_PWM_Start+0xfe>
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b0c      	cmp	r3, #12
 800df9a:	d104      	bne.n	800dfa6 <HAL_TIM_PWM_Start+0xe6>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dfa4:	e00b      	b.n	800dfbe <HAL_TIM_PWM_Start+0xfe>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	2b10      	cmp	r3, #16
 800dfaa:	d104      	bne.n	800dfb6 <HAL_TIM_PWM_Start+0xf6>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dfb4:	e003      	b.n	800dfbe <HAL_TIM_PWM_Start+0xfe>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 ff24 	bl	800ee14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a3a      	ldr	r2, [pc, #232]	; (800e0bc <HAL_TIM_PWM_Start+0x1fc>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d018      	beq.n	800e008 <HAL_TIM_PWM_Start+0x148>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a39      	ldr	r2, [pc, #228]	; (800e0c0 <HAL_TIM_PWM_Start+0x200>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d013      	beq.n	800e008 <HAL_TIM_PWM_Start+0x148>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a37      	ldr	r2, [pc, #220]	; (800e0c4 <HAL_TIM_PWM_Start+0x204>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d00e      	beq.n	800e008 <HAL_TIM_PWM_Start+0x148>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a36      	ldr	r2, [pc, #216]	; (800e0c8 <HAL_TIM_PWM_Start+0x208>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d009      	beq.n	800e008 <HAL_TIM_PWM_Start+0x148>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a34      	ldr	r2, [pc, #208]	; (800e0cc <HAL_TIM_PWM_Start+0x20c>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <HAL_TIM_PWM_Start+0x148>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a33      	ldr	r2, [pc, #204]	; (800e0d0 <HAL_TIM_PWM_Start+0x210>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d101      	bne.n	800e00c <HAL_TIM_PWM_Start+0x14c>
 800e008:	2301      	movs	r3, #1
 800e00a:	e000      	b.n	800e00e <HAL_TIM_PWM_Start+0x14e>
 800e00c:	2300      	movs	r3, #0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a25      	ldr	r2, [pc, #148]	; (800e0bc <HAL_TIM_PWM_Start+0x1fc>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d022      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e034:	d01d      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a26      	ldr	r2, [pc, #152]	; (800e0d4 <HAL_TIM_PWM_Start+0x214>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d018      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a24      	ldr	r2, [pc, #144]	; (800e0d8 <HAL_TIM_PWM_Start+0x218>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d013      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a23      	ldr	r2, [pc, #140]	; (800e0dc <HAL_TIM_PWM_Start+0x21c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d00e      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a19      	ldr	r2, [pc, #100]	; (800e0c0 <HAL_TIM_PWM_Start+0x200>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d009      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a18      	ldr	r2, [pc, #96]	; (800e0c4 <HAL_TIM_PWM_Start+0x204>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d004      	beq.n	800e072 <HAL_TIM_PWM_Start+0x1b2>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a18      	ldr	r2, [pc, #96]	; (800e0d0 <HAL_TIM_PWM_Start+0x210>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d115      	bne.n	800e09e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	689a      	ldr	r2, [r3, #8]
 800e078:	4b19      	ldr	r3, [pc, #100]	; (800e0e0 <HAL_TIM_PWM_Start+0x220>)
 800e07a:	4013      	ands	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b06      	cmp	r3, #6
 800e082:	d015      	beq.n	800e0b0 <HAL_TIM_PWM_Start+0x1f0>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e08a:	d011      	beq.n	800e0b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f042 0201 	orr.w	r2, r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e09c:	e008      	b.n	800e0b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f042 0201 	orr.w	r2, r2, #1
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	e000      	b.n	800e0b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	40012c00 	.word	0x40012c00
 800e0c0:	40013400 	.word	0x40013400
 800e0c4:	40014000 	.word	0x40014000
 800e0c8:	40014400 	.word	0x40014400
 800e0cc:	40014800 	.word	0x40014800
 800e0d0:	40015000 	.word	0x40015000
 800e0d4:	40000400 	.word	0x40000400
 800e0d8:	40000800 	.word	0x40000800
 800e0dc:	40000c00 	.word	0x40000c00
 800e0e0:	00010007 	.word	0x00010007

0800e0e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d101      	bne.n	800e102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e0fe:	2302      	movs	r3, #2
 800e100:	e0ff      	b.n	800e302 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b14      	cmp	r3, #20
 800e10e:	f200 80f0 	bhi.w	800e2f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e112:	a201      	add	r2, pc, #4	; (adr r2, 800e118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e118:	0800e16d 	.word	0x0800e16d
 800e11c:	0800e2f3 	.word	0x0800e2f3
 800e120:	0800e2f3 	.word	0x0800e2f3
 800e124:	0800e2f3 	.word	0x0800e2f3
 800e128:	0800e1ad 	.word	0x0800e1ad
 800e12c:	0800e2f3 	.word	0x0800e2f3
 800e130:	0800e2f3 	.word	0x0800e2f3
 800e134:	0800e2f3 	.word	0x0800e2f3
 800e138:	0800e1ef 	.word	0x0800e1ef
 800e13c:	0800e2f3 	.word	0x0800e2f3
 800e140:	0800e2f3 	.word	0x0800e2f3
 800e144:	0800e2f3 	.word	0x0800e2f3
 800e148:	0800e22f 	.word	0x0800e22f
 800e14c:	0800e2f3 	.word	0x0800e2f3
 800e150:	0800e2f3 	.word	0x0800e2f3
 800e154:	0800e2f3 	.word	0x0800e2f3
 800e158:	0800e271 	.word	0x0800e271
 800e15c:	0800e2f3 	.word	0x0800e2f3
 800e160:	0800e2f3 	.word	0x0800e2f3
 800e164:	0800e2f3 	.word	0x0800e2f3
 800e168:	0800e2b1 	.word	0x0800e2b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	4618      	mov	r0, r3
 800e174:	f000 fa88 	bl	800e688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	699a      	ldr	r2, [r3, #24]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f042 0208 	orr.w	r2, r2, #8
 800e186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	699a      	ldr	r2, [r3, #24]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f022 0204 	bic.w	r2, r2, #4
 800e196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6999      	ldr	r1, [r3, #24]
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	691a      	ldr	r2, [r3, #16]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	619a      	str	r2, [r3, #24]
      break;
 800e1aa:	e0a5      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68b9      	ldr	r1, [r7, #8]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 fb02 	bl	800e7bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	699a      	ldr	r2, [r3, #24]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	699a      	ldr	r2, [r3, #24]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6999      	ldr	r1, [r3, #24]
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	691b      	ldr	r3, [r3, #16]
 800e1e2:	021a      	lsls	r2, r3, #8
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	619a      	str	r2, [r3, #24]
      break;
 800e1ec:	e084      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68b9      	ldr	r1, [r7, #8]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f000 fb75 	bl	800e8e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	69da      	ldr	r2, [r3, #28]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f042 0208 	orr.w	r2, r2, #8
 800e208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	69da      	ldr	r2, [r3, #28]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f022 0204 	bic.w	r2, r2, #4
 800e218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	69d9      	ldr	r1, [r3, #28]
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	691a      	ldr	r2, [r3, #16]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	430a      	orrs	r2, r1
 800e22a:	61da      	str	r2, [r3, #28]
      break;
 800e22c:	e064      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	4618      	mov	r0, r3
 800e236:	f000 fbe7 	bl	800ea08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	69da      	ldr	r2, [r3, #28]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69da      	ldr	r2, [r3, #28]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	69d9      	ldr	r1, [r3, #28]
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	021a      	lsls	r2, r3, #8
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	61da      	str	r2, [r3, #28]
      break;
 800e26e:	e043      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68b9      	ldr	r1, [r7, #8]
 800e276:	4618      	mov	r0, r3
 800e278:	f000 fc5a 	bl	800eb30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f042 0208 	orr.w	r2, r2, #8
 800e28a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f022 0204 	bic.w	r2, r2, #4
 800e29a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	691a      	ldr	r2, [r3, #16]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e2ae:	e023      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68b9      	ldr	r1, [r7, #8]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 fca4 	bl	800ec04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	021a      	lsls	r2, r3, #8
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	430a      	orrs	r2, r1
 800e2ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e2f0:	e002      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e2f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e300:	7dfb      	ldrb	r3, [r7, #23]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop

0800e30c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e320:	2b01      	cmp	r3, #1
 800e322:	d101      	bne.n	800e328 <HAL_TIM_ConfigClockSource+0x1c>
 800e324:	2302      	movs	r3, #2
 800e326:	e0f6      	b.n	800e516 <HAL_TIM_ConfigClockSource+0x20a>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e34a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a6f      	ldr	r2, [pc, #444]	; (800e520 <HAL_TIM_ConfigClockSource+0x214>)
 800e362:	4293      	cmp	r3, r2
 800e364:	f000 80c1 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e368:	4a6d      	ldr	r2, [pc, #436]	; (800e520 <HAL_TIM_ConfigClockSource+0x214>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	f200 80c6 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e370:	4a6c      	ldr	r2, [pc, #432]	; (800e524 <HAL_TIM_ConfigClockSource+0x218>)
 800e372:	4293      	cmp	r3, r2
 800e374:	f000 80b9 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e378:	4a6a      	ldr	r2, [pc, #424]	; (800e524 <HAL_TIM_ConfigClockSource+0x218>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	f200 80be 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e380:	4a69      	ldr	r2, [pc, #420]	; (800e528 <HAL_TIM_ConfigClockSource+0x21c>)
 800e382:	4293      	cmp	r3, r2
 800e384:	f000 80b1 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e388:	4a67      	ldr	r2, [pc, #412]	; (800e528 <HAL_TIM_ConfigClockSource+0x21c>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	f200 80b6 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e390:	4a66      	ldr	r2, [pc, #408]	; (800e52c <HAL_TIM_ConfigClockSource+0x220>)
 800e392:	4293      	cmp	r3, r2
 800e394:	f000 80a9 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e398:	4a64      	ldr	r2, [pc, #400]	; (800e52c <HAL_TIM_ConfigClockSource+0x220>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	f200 80ae 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3a0:	4a63      	ldr	r2, [pc, #396]	; (800e530 <HAL_TIM_ConfigClockSource+0x224>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	f000 80a1 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e3a8:	4a61      	ldr	r2, [pc, #388]	; (800e530 <HAL_TIM_ConfigClockSource+0x224>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	f200 80a6 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3b0:	4a60      	ldr	r2, [pc, #384]	; (800e534 <HAL_TIM_ConfigClockSource+0x228>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	f000 8099 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e3b8:	4a5e      	ldr	r2, [pc, #376]	; (800e534 <HAL_TIM_ConfigClockSource+0x228>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	f200 809e 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e3c4:	f000 8091 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e3c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e3cc:	f200 8096 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3d4:	f000 8089 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e3d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3dc:	f200 808e 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3e4:	d03e      	beq.n	800e464 <HAL_TIM_ConfigClockSource+0x158>
 800e3e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3ea:	f200 8087 	bhi.w	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3f2:	f000 8086 	beq.w	800e502 <HAL_TIM_ConfigClockSource+0x1f6>
 800e3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3fa:	d87f      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e3fc:	2b70      	cmp	r3, #112	; 0x70
 800e3fe:	d01a      	beq.n	800e436 <HAL_TIM_ConfigClockSource+0x12a>
 800e400:	2b70      	cmp	r3, #112	; 0x70
 800e402:	d87b      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e404:	2b60      	cmp	r3, #96	; 0x60
 800e406:	d050      	beq.n	800e4aa <HAL_TIM_ConfigClockSource+0x19e>
 800e408:	2b60      	cmp	r3, #96	; 0x60
 800e40a:	d877      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e40c:	2b50      	cmp	r3, #80	; 0x50
 800e40e:	d03c      	beq.n	800e48a <HAL_TIM_ConfigClockSource+0x17e>
 800e410:	2b50      	cmp	r3, #80	; 0x50
 800e412:	d873      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e414:	2b40      	cmp	r3, #64	; 0x40
 800e416:	d058      	beq.n	800e4ca <HAL_TIM_ConfigClockSource+0x1be>
 800e418:	2b40      	cmp	r3, #64	; 0x40
 800e41a:	d86f      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e41c:	2b30      	cmp	r3, #48	; 0x30
 800e41e:	d064      	beq.n	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e420:	2b30      	cmp	r3, #48	; 0x30
 800e422:	d86b      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e424:	2b20      	cmp	r3, #32
 800e426:	d060      	beq.n	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e428:	2b20      	cmp	r3, #32
 800e42a:	d867      	bhi.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d05c      	beq.n	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e430:	2b10      	cmp	r3, #16
 800e432:	d05a      	beq.n	800e4ea <HAL_TIM_ConfigClockSource+0x1de>
 800e434:	e062      	b.n	800e4fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	6899      	ldr	r1, [r3, #8]
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	685a      	ldr	r2, [r3, #4]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f000 fcc5 	bl	800edd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	609a      	str	r2, [r3, #8]
      break;
 800e462:	e04f      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	6899      	ldr	r1, [r3, #8]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	f000 fcae 	bl	800edd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	689a      	ldr	r2, [r3, #8]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e486:	609a      	str	r2, [r3, #8]
      break;
 800e488:	e03c      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6818      	ldr	r0, [r3, #0]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	6859      	ldr	r1, [r3, #4]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	461a      	mov	r2, r3
 800e498:	f000 fc20 	bl	800ecdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2150      	movs	r1, #80	; 0x50
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 fc79 	bl	800ed9a <TIM_ITRx_SetConfig>
      break;
 800e4a8:	e02c      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	6859      	ldr	r1, [r3, #4]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	f000 fc3f 	bl	800ed3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2160      	movs	r1, #96	; 0x60
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 fc69 	bl	800ed9a <TIM_ITRx_SetConfig>
      break;
 800e4c8:	e01c      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	6859      	ldr	r1, [r3, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f000 fc00 	bl	800ecdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2140      	movs	r1, #64	; 0x40
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f000 fc59 	bl	800ed9a <TIM_ITRx_SetConfig>
      break;
 800e4e8:	e00c      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f000 fc50 	bl	800ed9a <TIM_ITRx_SetConfig>
      break;
 800e4fa:	e003      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e500:	e000      	b.n	800e504 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e514:	7bfb      	ldrb	r3, [r7, #15]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	00100070 	.word	0x00100070
 800e524:	00100060 	.word	0x00100060
 800e528:	00100050 	.word	0x00100050
 800e52c:	00100040 	.word	0x00100040
 800e530:	00100030 	.word	0x00100030
 800e534:	00100020 	.word	0x00100020

0800e538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a46      	ldr	r2, [pc, #280]	; (800e664 <TIM_Base_SetConfig+0x12c>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d017      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e556:	d013      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a43      	ldr	r2, [pc, #268]	; (800e668 <TIM_Base_SetConfig+0x130>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d00f      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a42      	ldr	r2, [pc, #264]	; (800e66c <TIM_Base_SetConfig+0x134>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d00b      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a41      	ldr	r2, [pc, #260]	; (800e670 <TIM_Base_SetConfig+0x138>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d007      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a40      	ldr	r2, [pc, #256]	; (800e674 <TIM_Base_SetConfig+0x13c>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d003      	beq.n	800e580 <TIM_Base_SetConfig+0x48>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a3f      	ldr	r2, [pc, #252]	; (800e678 <TIM_Base_SetConfig+0x140>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d108      	bne.n	800e592 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	4313      	orrs	r3, r2
 800e590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a33      	ldr	r2, [pc, #204]	; (800e664 <TIM_Base_SetConfig+0x12c>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d023      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5a0:	d01f      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4a30      	ldr	r2, [pc, #192]	; (800e668 <TIM_Base_SetConfig+0x130>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d01b      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4a2f      	ldr	r2, [pc, #188]	; (800e66c <TIM_Base_SetConfig+0x134>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d017      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a2e      	ldr	r2, [pc, #184]	; (800e670 <TIM_Base_SetConfig+0x138>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d013      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a2d      	ldr	r2, [pc, #180]	; (800e674 <TIM_Base_SetConfig+0x13c>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d00f      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a2d      	ldr	r2, [pc, #180]	; (800e67c <TIM_Base_SetConfig+0x144>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d00b      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a2c      	ldr	r2, [pc, #176]	; (800e680 <TIM_Base_SetConfig+0x148>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d007      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a2b      	ldr	r2, [pc, #172]	; (800e684 <TIM_Base_SetConfig+0x14c>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d003      	beq.n	800e5e2 <TIM_Base_SetConfig+0xaa>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a26      	ldr	r2, [pc, #152]	; (800e678 <TIM_Base_SetConfig+0x140>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d108      	bne.n	800e5f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a12      	ldr	r2, [pc, #72]	; (800e664 <TIM_Base_SetConfig+0x12c>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d013      	beq.n	800e648 <TIM_Base_SetConfig+0x110>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a14      	ldr	r2, [pc, #80]	; (800e674 <TIM_Base_SetConfig+0x13c>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d00f      	beq.n	800e648 <TIM_Base_SetConfig+0x110>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a14      	ldr	r2, [pc, #80]	; (800e67c <TIM_Base_SetConfig+0x144>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d00b      	beq.n	800e648 <TIM_Base_SetConfig+0x110>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a13      	ldr	r2, [pc, #76]	; (800e680 <TIM_Base_SetConfig+0x148>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d007      	beq.n	800e648 <TIM_Base_SetConfig+0x110>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a12      	ldr	r2, [pc, #72]	; (800e684 <TIM_Base_SetConfig+0x14c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d003      	beq.n	800e648 <TIM_Base_SetConfig+0x110>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a0d      	ldr	r2, [pc, #52]	; (800e678 <TIM_Base_SetConfig+0x140>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d103      	bne.n	800e650 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	691a      	ldr	r2, [r3, #16]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	615a      	str	r2, [r3, #20]
}
 800e656:	bf00      	nop
 800e658:	3714      	adds	r7, #20
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	40012c00 	.word	0x40012c00
 800e668:	40000400 	.word	0x40000400
 800e66c:	40000800 	.word	0x40000800
 800e670:	40000c00 	.word	0x40000c00
 800e674:	40013400 	.word	0x40013400
 800e678:	40015000 	.word	0x40015000
 800e67c:	40014000 	.word	0x40014000
 800e680:	40014400 	.word	0x40014400
 800e684:	40014800 	.word	0x40014800

0800e688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e688:	b480      	push	{r7}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a1b      	ldr	r3, [r3, #32]
 800e696:	f023 0201 	bic.w	r2, r3, #1
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a1b      	ldr	r3, [r3, #32]
 800e6a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f023 0303 	bic.w	r3, r3, #3
 800e6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f023 0302 	bic.w	r3, r3, #2
 800e6d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a30      	ldr	r2, [pc, #192]	; (800e7a4 <TIM_OC1_SetConfig+0x11c>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d013      	beq.n	800e710 <TIM_OC1_SetConfig+0x88>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a2f      	ldr	r2, [pc, #188]	; (800e7a8 <TIM_OC1_SetConfig+0x120>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d00f      	beq.n	800e710 <TIM_OC1_SetConfig+0x88>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a2e      	ldr	r2, [pc, #184]	; (800e7ac <TIM_OC1_SetConfig+0x124>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d00b      	beq.n	800e710 <TIM_OC1_SetConfig+0x88>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a2d      	ldr	r2, [pc, #180]	; (800e7b0 <TIM_OC1_SetConfig+0x128>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d007      	beq.n	800e710 <TIM_OC1_SetConfig+0x88>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a2c      	ldr	r2, [pc, #176]	; (800e7b4 <TIM_OC1_SetConfig+0x12c>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d003      	beq.n	800e710 <TIM_OC1_SetConfig+0x88>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a2b      	ldr	r2, [pc, #172]	; (800e7b8 <TIM_OC1_SetConfig+0x130>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d10c      	bne.n	800e72a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f023 0308 	bic.w	r3, r3, #8
 800e716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	4313      	orrs	r3, r2
 800e720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f023 0304 	bic.w	r3, r3, #4
 800e728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a1d      	ldr	r2, [pc, #116]	; (800e7a4 <TIM_OC1_SetConfig+0x11c>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d013      	beq.n	800e75a <TIM_OC1_SetConfig+0xd2>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4a1c      	ldr	r2, [pc, #112]	; (800e7a8 <TIM_OC1_SetConfig+0x120>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d00f      	beq.n	800e75a <TIM_OC1_SetConfig+0xd2>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a1b      	ldr	r2, [pc, #108]	; (800e7ac <TIM_OC1_SetConfig+0x124>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d00b      	beq.n	800e75a <TIM_OC1_SetConfig+0xd2>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4a1a      	ldr	r2, [pc, #104]	; (800e7b0 <TIM_OC1_SetConfig+0x128>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d007      	beq.n	800e75a <TIM_OC1_SetConfig+0xd2>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4a19      	ldr	r2, [pc, #100]	; (800e7b4 <TIM_OC1_SetConfig+0x12c>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d003      	beq.n	800e75a <TIM_OC1_SetConfig+0xd2>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a18      	ldr	r2, [pc, #96]	; (800e7b8 <TIM_OC1_SetConfig+0x130>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d111      	bne.n	800e77e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	695b      	ldr	r3, [r3, #20]
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	4313      	orrs	r3, r2
 800e772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	621a      	str	r2, [r3, #32]
}
 800e798:	bf00      	nop
 800e79a:	371c      	adds	r7, #28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	40012c00 	.word	0x40012c00
 800e7a8:	40013400 	.word	0x40013400
 800e7ac:	40014000 	.word	0x40014000
 800e7b0:	40014400 	.word	0x40014400
 800e7b4:	40014800 	.word	0x40014800
 800e7b8:	40015000 	.word	0x40015000

0800e7bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	f023 0210 	bic.w	r2, r3, #16
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	021b      	lsls	r3, r3, #8
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	4313      	orrs	r3, r2
 800e802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f023 0320 	bic.w	r3, r3, #32
 800e80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	4313      	orrs	r3, r2
 800e816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a2c      	ldr	r2, [pc, #176]	; (800e8cc <TIM_OC2_SetConfig+0x110>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d007      	beq.n	800e830 <TIM_OC2_SetConfig+0x74>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a2b      	ldr	r2, [pc, #172]	; (800e8d0 <TIM_OC2_SetConfig+0x114>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d003      	beq.n	800e830 <TIM_OC2_SetConfig+0x74>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a2a      	ldr	r2, [pc, #168]	; (800e8d4 <TIM_OC2_SetConfig+0x118>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d10d      	bne.n	800e84c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	011b      	lsls	r3, r3, #4
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	4313      	orrs	r3, r2
 800e842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e84a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1f      	ldr	r2, [pc, #124]	; (800e8cc <TIM_OC2_SetConfig+0x110>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d013      	beq.n	800e87c <TIM_OC2_SetConfig+0xc0>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1e      	ldr	r2, [pc, #120]	; (800e8d0 <TIM_OC2_SetConfig+0x114>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00f      	beq.n	800e87c <TIM_OC2_SetConfig+0xc0>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1e      	ldr	r2, [pc, #120]	; (800e8d8 <TIM_OC2_SetConfig+0x11c>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d00b      	beq.n	800e87c <TIM_OC2_SetConfig+0xc0>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1d      	ldr	r2, [pc, #116]	; (800e8dc <TIM_OC2_SetConfig+0x120>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d007      	beq.n	800e87c <TIM_OC2_SetConfig+0xc0>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a1c      	ldr	r2, [pc, #112]	; (800e8e0 <TIM_OC2_SetConfig+0x124>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d003      	beq.n	800e87c <TIM_OC2_SetConfig+0xc0>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a17      	ldr	r2, [pc, #92]	; (800e8d4 <TIM_OC2_SetConfig+0x118>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d113      	bne.n	800e8a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e88a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	695b      	ldr	r3, [r3, #20]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	4313      	orrs	r3, r2
 800e896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	621a      	str	r2, [r3, #32]
}
 800e8be:	bf00      	nop
 800e8c0:	371c      	adds	r7, #28
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	40012c00 	.word	0x40012c00
 800e8d0:	40013400 	.word	0x40013400
 800e8d4:	40015000 	.word	0x40015000
 800e8d8:	40014000 	.word	0x40014000
 800e8dc:	40014400 	.word	0x40014400
 800e8e0:	40014800 	.word	0x40014800

0800e8e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f023 0303 	bic.w	r3, r3, #3
 800e91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4313      	orrs	r3, r2
 800e928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	021b      	lsls	r3, r3, #8
 800e938:	697a      	ldr	r2, [r7, #20]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a2b      	ldr	r2, [pc, #172]	; (800e9f0 <TIM_OC3_SetConfig+0x10c>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d007      	beq.n	800e956 <TIM_OC3_SetConfig+0x72>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a2a      	ldr	r2, [pc, #168]	; (800e9f4 <TIM_OC3_SetConfig+0x110>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d003      	beq.n	800e956 <TIM_OC3_SetConfig+0x72>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a29      	ldr	r2, [pc, #164]	; (800e9f8 <TIM_OC3_SetConfig+0x114>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d10d      	bne.n	800e972 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e95c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	021b      	lsls	r3, r3, #8
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	4313      	orrs	r3, r2
 800e968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a1e      	ldr	r2, [pc, #120]	; (800e9f0 <TIM_OC3_SetConfig+0x10c>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <TIM_OC3_SetConfig+0xbe>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a1d      	ldr	r2, [pc, #116]	; (800e9f4 <TIM_OC3_SetConfig+0x110>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00f      	beq.n	800e9a2 <TIM_OC3_SetConfig+0xbe>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a1d      	ldr	r2, [pc, #116]	; (800e9fc <TIM_OC3_SetConfig+0x118>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d00b      	beq.n	800e9a2 <TIM_OC3_SetConfig+0xbe>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a1c      	ldr	r2, [pc, #112]	; (800ea00 <TIM_OC3_SetConfig+0x11c>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d007      	beq.n	800e9a2 <TIM_OC3_SetConfig+0xbe>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a1b      	ldr	r2, [pc, #108]	; (800ea04 <TIM_OC3_SetConfig+0x120>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d003      	beq.n	800e9a2 <TIM_OC3_SetConfig+0xbe>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4a16      	ldr	r2, [pc, #88]	; (800e9f8 <TIM_OC3_SetConfig+0x114>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d113      	bne.n	800e9ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	011b      	lsls	r3, r3, #4
 800e9b8:	693a      	ldr	r2, [r7, #16]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	011b      	lsls	r3, r3, #4
 800e9c4:	693a      	ldr	r2, [r7, #16]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	693a      	ldr	r2, [r7, #16]
 800e9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	697a      	ldr	r2, [r7, #20]
 800e9e2:	621a      	str	r2, [r3, #32]
}
 800e9e4:	bf00      	nop
 800e9e6:	371c      	adds	r7, #28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	40012c00 	.word	0x40012c00
 800e9f4:	40013400 	.word	0x40013400
 800e9f8:	40015000 	.word	0x40015000
 800e9fc:	40014000 	.word	0x40014000
 800ea00:	40014400 	.word	0x40014400
 800ea04:	40014800 	.word	0x40014800

0800ea08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a1b      	ldr	r3, [r3, #32]
 800ea16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ea36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	021b      	lsls	r3, r3, #8
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	031b      	lsls	r3, r3, #12
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a2c      	ldr	r2, [pc, #176]	; (800eb18 <TIM_OC4_SetConfig+0x110>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d007      	beq.n	800ea7c <TIM_OC4_SetConfig+0x74>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a2b      	ldr	r2, [pc, #172]	; (800eb1c <TIM_OC4_SetConfig+0x114>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d003      	beq.n	800ea7c <TIM_OC4_SetConfig+0x74>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a2a      	ldr	r2, [pc, #168]	; (800eb20 <TIM_OC4_SetConfig+0x118>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d10d      	bne.n	800ea98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	031b      	lsls	r3, r3, #12
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ea96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a1f      	ldr	r2, [pc, #124]	; (800eb18 <TIM_OC4_SetConfig+0x110>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d013      	beq.n	800eac8 <TIM_OC4_SetConfig+0xc0>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	4a1e      	ldr	r2, [pc, #120]	; (800eb1c <TIM_OC4_SetConfig+0x114>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d00f      	beq.n	800eac8 <TIM_OC4_SetConfig+0xc0>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a1e      	ldr	r2, [pc, #120]	; (800eb24 <TIM_OC4_SetConfig+0x11c>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d00b      	beq.n	800eac8 <TIM_OC4_SetConfig+0xc0>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a1d      	ldr	r2, [pc, #116]	; (800eb28 <TIM_OC4_SetConfig+0x120>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d007      	beq.n	800eac8 <TIM_OC4_SetConfig+0xc0>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4a1c      	ldr	r2, [pc, #112]	; (800eb2c <TIM_OC4_SetConfig+0x124>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d003      	beq.n	800eac8 <TIM_OC4_SetConfig+0xc0>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	4a17      	ldr	r2, [pc, #92]	; (800eb20 <TIM_OC4_SetConfig+0x118>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d113      	bne.n	800eaf0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eace:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ead6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	019b      	lsls	r3, r3, #6
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	4313      	orrs	r3, r2
 800eae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	019b      	lsls	r3, r3, #6
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	621a      	str	r2, [r3, #32]
}
 800eb0a:	bf00      	nop
 800eb0c:	371c      	adds	r7, #28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	40012c00 	.word	0x40012c00
 800eb1c:	40013400 	.word	0x40013400
 800eb20:	40015000 	.word	0x40015000
 800eb24:	40014000 	.word	0x40014000
 800eb28:	40014400 	.word	0x40014400
 800eb2c:	40014800 	.word	0x40014800

0800eb30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eb74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	041b      	lsls	r3, r3, #16
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a19      	ldr	r2, [pc, #100]	; (800ebec <TIM_OC5_SetConfig+0xbc>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d013      	beq.n	800ebb2 <TIM_OC5_SetConfig+0x82>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a18      	ldr	r2, [pc, #96]	; (800ebf0 <TIM_OC5_SetConfig+0xc0>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d00f      	beq.n	800ebb2 <TIM_OC5_SetConfig+0x82>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a17      	ldr	r2, [pc, #92]	; (800ebf4 <TIM_OC5_SetConfig+0xc4>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d00b      	beq.n	800ebb2 <TIM_OC5_SetConfig+0x82>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a16      	ldr	r2, [pc, #88]	; (800ebf8 <TIM_OC5_SetConfig+0xc8>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d007      	beq.n	800ebb2 <TIM_OC5_SetConfig+0x82>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a15      	ldr	r2, [pc, #84]	; (800ebfc <TIM_OC5_SetConfig+0xcc>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d003      	beq.n	800ebb2 <TIM_OC5_SetConfig+0x82>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a14      	ldr	r2, [pc, #80]	; (800ec00 <TIM_OC5_SetConfig+0xd0>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d109      	bne.n	800ebc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ebb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	021b      	lsls	r3, r3, #8
 800ebc0:	697a      	ldr	r2, [r7, #20]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	697a      	ldr	r2, [r7, #20]
 800ebca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	621a      	str	r2, [r3, #32]
}
 800ebe0:	bf00      	nop
 800ebe2:	371c      	adds	r7, #28
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	40012c00 	.word	0x40012c00
 800ebf0:	40013400 	.word	0x40013400
 800ebf4:	40014000 	.word	0x40014000
 800ebf8:	40014400 	.word	0x40014400
 800ebfc:	40014800 	.word	0x40014800
 800ec00:	40015000 	.word	0x40015000

0800ec04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b087      	sub	sp, #28
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a1b      	ldr	r3, [r3, #32]
 800ec12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	021b      	lsls	r3, r3, #8
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	051b      	lsls	r3, r3, #20
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a1a      	ldr	r2, [pc, #104]	; (800ecc4 <TIM_OC6_SetConfig+0xc0>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d013      	beq.n	800ec88 <TIM_OC6_SetConfig+0x84>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a19      	ldr	r2, [pc, #100]	; (800ecc8 <TIM_OC6_SetConfig+0xc4>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00f      	beq.n	800ec88 <TIM_OC6_SetConfig+0x84>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a18      	ldr	r2, [pc, #96]	; (800eccc <TIM_OC6_SetConfig+0xc8>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d00b      	beq.n	800ec88 <TIM_OC6_SetConfig+0x84>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a17      	ldr	r2, [pc, #92]	; (800ecd0 <TIM_OC6_SetConfig+0xcc>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d007      	beq.n	800ec88 <TIM_OC6_SetConfig+0x84>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a16      	ldr	r2, [pc, #88]	; (800ecd4 <TIM_OC6_SetConfig+0xd0>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d003      	beq.n	800ec88 <TIM_OC6_SetConfig+0x84>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a15      	ldr	r2, [pc, #84]	; (800ecd8 <TIM_OC6_SetConfig+0xd4>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d109      	bne.n	800ec9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	029b      	lsls	r3, r3, #10
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	621a      	str	r2, [r3, #32]
}
 800ecb6:	bf00      	nop
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	40012c00 	.word	0x40012c00
 800ecc8:	40013400 	.word	0x40013400
 800eccc:	40014000 	.word	0x40014000
 800ecd0:	40014400 	.word	0x40014400
 800ecd4:	40014800 	.word	0x40014800
 800ecd8:	40015000 	.word	0x40015000

0800ecdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6a1b      	ldr	r3, [r3, #32]
 800ecec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	f023 0201 	bic.w	r2, r3, #1
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ed06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	f023 030a 	bic.w	r3, r3, #10
 800ed18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ed1a:	697a      	ldr	r2, [r7, #20]
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	621a      	str	r2, [r3, #32]
}
 800ed2e:	bf00      	nop
 800ed30:	371c      	adds	r7, #28
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr

0800ed3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b087      	sub	sp, #28
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	f023 0210 	bic.w	r2, r3, #16
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6a1b      	ldr	r3, [r3, #32]
 800ed5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	031b      	lsls	r3, r3, #12
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	011b      	lsls	r3, r3, #4
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	693a      	ldr	r2, [r7, #16]
 800ed8c:	621a      	str	r2, [r3, #32]
}
 800ed8e:	bf00      	nop
 800ed90:	371c      	adds	r7, #28
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800edb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	4313      	orrs	r3, r2
 800edbc:	f043 0307 	orr.w	r3, r3, #7
 800edc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	609a      	str	r2, [r3, #8]
}
 800edc8:	bf00      	nop
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b087      	sub	sp, #28
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	021a      	lsls	r2, r3, #8
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	431a      	orrs	r2, r3
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	4313      	orrs	r3, r2
 800ee00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	609a      	str	r2, [r3, #8]
}
 800ee08:	bf00      	nop
 800ee0a:	371c      	adds	r7, #28
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	f003 031f 	and.w	r3, r3, #31
 800ee26:	2201      	movs	r2, #1
 800ee28:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6a1a      	ldr	r2, [r3, #32]
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	43db      	mvns	r3, r3
 800ee36:	401a      	ands	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6a1a      	ldr	r2, [r3, #32]
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f003 031f 	and.w	r3, r3, #31
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	621a      	str	r2, [r3, #32]
}
 800ee52:	bf00      	nop
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
	...

0800ee60 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d109      	bne.n	800ee84 <HAL_TIMEx_PWMN_Start+0x24>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	e022      	b.n	800eeca <HAL_TIMEx_PWMN_Start+0x6a>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b04      	cmp	r3, #4
 800ee88:	d109      	bne.n	800ee9e <HAL_TIMEx_PWMN_Start+0x3e>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	bf14      	ite	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	2300      	moveq	r3, #0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	e015      	b.n	800eeca <HAL_TIMEx_PWMN_Start+0x6a>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d109      	bne.n	800eeb8 <HAL_TIMEx_PWMN_Start+0x58>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	bf14      	ite	ne
 800eeb0:	2301      	movne	r3, #1
 800eeb2:	2300      	moveq	r3, #0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	e008      	b.n	800eeca <HAL_TIMEx_PWMN_Start+0x6a>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	bf14      	ite	ne
 800eec4:	2301      	movne	r3, #1
 800eec6:	2300      	moveq	r3, #0
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e073      	b.n	800efba <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d104      	bne.n	800eee2 <HAL_TIMEx_PWMN_Start+0x82>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2202      	movs	r2, #2
 800eedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eee0:	e013      	b.n	800ef0a <HAL_TIMEx_PWMN_Start+0xaa>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b04      	cmp	r3, #4
 800eee6:	d104      	bne.n	800eef2 <HAL_TIMEx_PWMN_Start+0x92>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eef0:	e00b      	b.n	800ef0a <HAL_TIMEx_PWMN_Start+0xaa>
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	2b08      	cmp	r3, #8
 800eef6:	d104      	bne.n	800ef02 <HAL_TIMEx_PWMN_Start+0xa2>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2202      	movs	r2, #2
 800eefc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef00:	e003      	b.n	800ef0a <HAL_TIMEx_PWMN_Start+0xaa>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2202      	movs	r2, #2
 800ef06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2204      	movs	r2, #4
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 f9ae 	bl	800f274 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a25      	ldr	r2, [pc, #148]	; (800efc4 <HAL_TIMEx_PWMN_Start+0x164>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d022      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef3a:	d01d      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a21      	ldr	r2, [pc, #132]	; (800efc8 <HAL_TIMEx_PWMN_Start+0x168>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d018      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a20      	ldr	r2, [pc, #128]	; (800efcc <HAL_TIMEx_PWMN_Start+0x16c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d013      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a1e      	ldr	r2, [pc, #120]	; (800efd0 <HAL_TIMEx_PWMN_Start+0x170>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d00e      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a1d      	ldr	r2, [pc, #116]	; (800efd4 <HAL_TIMEx_PWMN_Start+0x174>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d009      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a1b      	ldr	r2, [pc, #108]	; (800efd8 <HAL_TIMEx_PWMN_Start+0x178>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d004      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x118>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a1a      	ldr	r2, [pc, #104]	; (800efdc <HAL_TIMEx_PWMN_Start+0x17c>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d115      	bne.n	800efa4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	689a      	ldr	r2, [r3, #8]
 800ef7e:	4b18      	ldr	r3, [pc, #96]	; (800efe0 <HAL_TIMEx_PWMN_Start+0x180>)
 800ef80:	4013      	ands	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b06      	cmp	r3, #6
 800ef88:	d015      	beq.n	800efb6 <HAL_TIMEx_PWMN_Start+0x156>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef90:	d011      	beq.n	800efb6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f042 0201 	orr.w	r2, r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa2:	e008      	b.n	800efb6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0201 	orr.w	r2, r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	e000      	b.n	800efb8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	40012c00 	.word	0x40012c00
 800efc8:	40000400 	.word	0x40000400
 800efcc:	40000800 	.word	0x40000800
 800efd0:	40000c00 	.word	0x40000c00
 800efd4:	40013400 	.word	0x40013400
 800efd8:	40014000 	.word	0x40014000
 800efdc:	40015000 	.word	0x40015000
 800efe0:	00010007 	.word	0x00010007

0800efe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d101      	bne.n	800effc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eff8:	2302      	movs	r3, #2
 800effa:	e074      	b.n	800f0e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2202      	movs	r2, #2
 800f008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a34      	ldr	r2, [pc, #208]	; (800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d009      	beq.n	800f03a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a33      	ldr	r2, [pc, #204]	; (800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d004      	beq.n	800f03a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a31      	ldr	r2, [pc, #196]	; (800f0fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d108      	bne.n	800f04c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f040:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	4313      	orrs	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	4313      	orrs	r3, r2
 800f060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a21      	ldr	r2, [pc, #132]	; (800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d022      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f07c:	d01d      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d018      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a1d      	ldr	r2, [pc, #116]	; (800f104 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d013      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a1c      	ldr	r2, [pc, #112]	; (800f108 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d00e      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a15      	ldr	r2, [pc, #84]	; (800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d009      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a18      	ldr	r2, [pc, #96]	; (800f10c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d004      	beq.n	800f0ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a11      	ldr	r2, [pc, #68]	; (800f0fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d10c      	bne.n	800f0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	40012c00 	.word	0x40012c00
 800f0f8:	40013400 	.word	0x40013400
 800f0fc:	40015000 	.word	0x40015000
 800f100:	40000400 	.word	0x40000400
 800f104:	40000800 	.word	0x40000800
 800f108:	40000c00 	.word	0x40000c00
 800f10c:	40014000 	.word	0x40014000

0800f110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f11a:	2300      	movs	r3, #0
 800f11c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f124:	2b01      	cmp	r3, #1
 800f126:	d101      	bne.n	800f12c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f128:	2302      	movs	r3, #2
 800f12a:	e096      	b.n	800f25a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	4313      	orrs	r3, r2
 800f140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4313      	orrs	r3, r2
 800f16a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	4313      	orrs	r3, r2
 800f186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	699b      	ldr	r3, [r3, #24]
 800f1a0:	041b      	lsls	r3, r3, #16
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a2f      	ldr	r2, [pc, #188]	; (800f268 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d009      	beq.n	800f1c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a2d      	ldr	r2, [pc, #180]	; (800f26c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d004      	beq.n	800f1c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a2c      	ldr	r2, [pc, #176]	; (800f270 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d106      	bne.n	800f1d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	69db      	ldr	r3, [r3, #28]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a24      	ldr	r2, [pc, #144]	; (800f268 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d009      	beq.n	800f1f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a22      	ldr	r2, [pc, #136]	; (800f26c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d004      	beq.n	800f1f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a21      	ldr	r2, [pc, #132]	; (800f270 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d12b      	bne.n	800f248 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fa:	051b      	lsls	r3, r3, #20
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	4313      	orrs	r3, r2
 800f20c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	4313      	orrs	r3, r2
 800f21a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a11      	ldr	r2, [pc, #68]	; (800f268 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d009      	beq.n	800f23a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a10      	ldr	r2, [pc, #64]	; (800f26c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d004      	beq.n	800f23a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a0e      	ldr	r2, [pc, #56]	; (800f270 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d106      	bne.n	800f248 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f244:	4313      	orrs	r3, r2
 800f246:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	40012c00 	.word	0x40012c00
 800f26c:	40013400 	.word	0x40013400
 800f270:	40015000 	.word	0x40015000

0800f274 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f003 031f 	and.w	r3, r3, #31
 800f286:	2204      	movs	r2, #4
 800f288:	fa02 f303 	lsl.w	r3, r2, r3
 800f28c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	6a1a      	ldr	r2, [r3, #32]
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	43db      	mvns	r3, r3
 800f296:	401a      	ands	r2, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6a1a      	ldr	r2, [r3, #32]
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f003 031f 	and.w	r3, r3, #31
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2ac:	431a      	orrs	r2, r3
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	621a      	str	r2, [r3, #32]
}
 800f2b2:	bf00      	nop
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr

0800f2be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e042      	b.n	800f356 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7f6 ff6e 	bl	80061c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2224      	movs	r2, #36	; 0x24
 800f2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f022 0201 	bic.w	r2, r2, #1
 800f2fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fc03 	bl	800fb0c <UART_SetConfig>
 800f306:	4603      	mov	r3, r0
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d101      	bne.n	800f310 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e022      	b.n	800f356 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 fef3 	bl	8010104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f32c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	689a      	ldr	r2, [r3, #8]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f33c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f042 0201 	orr.w	r2, r2, #1
 800f34c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 ff7a 	bl	8010248 <UART_CheckIdleState>
 800f354:	4603      	mov	r3, r0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b08a      	sub	sp, #40	; 0x28
 800f362:	af02      	add	r7, sp, #8
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	4613      	mov	r3, r2
 800f36c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f374:	2b20      	cmp	r3, #32
 800f376:	f040 8083 	bne.w	800f480 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <HAL_UART_Transmit+0x28>
 800f380:	88fb      	ldrh	r3, [r7, #6]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d101      	bne.n	800f38a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f386:	2301      	movs	r3, #1
 800f388:	e07b      	b.n	800f482 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f390:	2b01      	cmp	r3, #1
 800f392:	d101      	bne.n	800f398 <HAL_UART_Transmit+0x3a>
 800f394:	2302      	movs	r3, #2
 800f396:	e074      	b.n	800f482 <HAL_UART_Transmit+0x124>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2221      	movs	r2, #33	; 0x21
 800f3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f3b0:	f7f7 fa34 	bl	800681c <HAL_GetTick>
 800f3b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	88fa      	ldrh	r2, [r7, #6]
 800f3ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	88fa      	ldrh	r2, [r7, #6]
 800f3c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3ce:	d108      	bne.n	800f3e2 <HAL_UART_Transmit+0x84>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d104      	bne.n	800f3e2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	61bb      	str	r3, [r7, #24]
 800f3e0:	e003      	b.n	800f3ea <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f3f2:	e02c      	b.n	800f44e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2180      	movs	r1, #128	; 0x80
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f000 ff6d 	bl	80102de <UART_WaitOnFlagUntilTimeout>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e039      	b.n	800f482 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10b      	bne.n	800f42c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	881b      	ldrh	r3, [r3, #0]
 800f418:	461a      	mov	r2, r3
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	3302      	adds	r3, #2
 800f428:	61bb      	str	r3, [r7, #24]
 800f42a:	e007      	b.n	800f43c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	3301      	adds	r3, #1
 800f43a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f442:	b29b      	uxth	r3, r3
 800f444:	3b01      	subs	r3, #1
 800f446:	b29a      	uxth	r2, r3
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f454:	b29b      	uxth	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1cc      	bne.n	800f3f4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2200      	movs	r2, #0
 800f462:	2140      	movs	r1, #64	; 0x40
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f000 ff3a 	bl	80102de <UART_WaitOnFlagUntilTimeout>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f470:	2303      	movs	r3, #3
 800f472:	e006      	b.n	800f482 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2220      	movs	r2, #32
 800f478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	e000      	b.n	800f482 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f480:	2302      	movs	r3, #2
  }
}
 800f482:	4618      	mov	r0, r3
 800f484:	3720      	adds	r7, #32
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b0ba      	sub	sp, #232	; 0xe8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	69db      	ldr	r3, [r3, #28]
 800f49a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f4b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f4b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f4c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d11b      	bne.n	800f500 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4cc:	f003 0320 	and.w	r3, r3, #32
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d015      	beq.n	800f500 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4d8:	f003 0320 	and.w	r3, r3, #32
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d105      	bne.n	800f4ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d009      	beq.n	800f500 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f000 82d6 	beq.w	800faa2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	4798      	blx	r3
      }
      return;
 800f4fe:	e2d0      	b.n	800faa2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 811f 	beq.w	800f748 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f50a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f50e:	4b8b      	ldr	r3, [pc, #556]	; (800f73c <HAL_UART_IRQHandler+0x2b0>)
 800f510:	4013      	ands	r3, r2
 800f512:	2b00      	cmp	r3, #0
 800f514:	d106      	bne.n	800f524 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f516:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f51a:	4b89      	ldr	r3, [pc, #548]	; (800f740 <HAL_UART_IRQHandler+0x2b4>)
 800f51c:	4013      	ands	r3, r2
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 8112 	beq.w	800f748 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f528:	f003 0301 	and.w	r3, r3, #1
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d011      	beq.n	800f554 <HAL_UART_IRQHandler+0xc8>
 800f530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00b      	beq.n	800f554 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2201      	movs	r2, #1
 800f542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f54a:	f043 0201 	orr.w	r2, r3, #1
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f558:	f003 0302 	and.w	r3, r3, #2
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d011      	beq.n	800f584 <HAL_UART_IRQHandler+0xf8>
 800f560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2202      	movs	r2, #2
 800f572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f57a:	f043 0204 	orr.w	r2, r3, #4
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f588:	f003 0304 	and.w	r3, r3, #4
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d011      	beq.n	800f5b4 <HAL_UART_IRQHandler+0x128>
 800f590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2204      	movs	r2, #4
 800f5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5aa:	f043 0202 	orr.w	r2, r3, #2
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d017      	beq.n	800f5f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5c4:	f003 0320 	and.w	r3, r3, #32
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d105      	bne.n	800f5d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f5cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f5d0:	4b5a      	ldr	r3, [pc, #360]	; (800f73c <HAL_UART_IRQHandler+0x2b0>)
 800f5d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00b      	beq.n	800f5f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2208      	movs	r2, #8
 800f5de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5e6:	f043 0208 	orr.w	r2, r3, #8
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d012      	beq.n	800f622 <HAL_UART_IRQHandler+0x196>
 800f5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00c      	beq.n	800f622 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f618:	f043 0220 	orr.w	r2, r3, #32
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 823c 	beq.w	800faa6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f632:	f003 0320 	and.w	r3, r3, #32
 800f636:	2b00      	cmp	r3, #0
 800f638:	d013      	beq.n	800f662 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f63a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f63e:	f003 0320 	and.w	r3, r3, #32
 800f642:	2b00      	cmp	r3, #0
 800f644:	d105      	bne.n	800f652 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f64a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d007      	beq.n	800f662 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f656:	2b00      	cmp	r3, #0
 800f658:	d003      	beq.n	800f662 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f676:	2b40      	cmp	r3, #64	; 0x40
 800f678:	d005      	beq.n	800f686 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f67e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f682:	2b00      	cmp	r3, #0
 800f684:	d04f      	beq.n	800f726 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 ffdb 	bl	8010642 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f696:	2b40      	cmp	r3, #64	; 0x40
 800f698:	d141      	bne.n	800f71e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	3308      	adds	r3, #8
 800f6a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6a8:	e853 3f00 	ldrex	r3, [r3]
 800f6ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3308      	adds	r3, #8
 800f6c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f6c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f6d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f6de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1d9      	bne.n	800f69a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d013      	beq.n	800f716 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6f2:	4a14      	ldr	r2, [pc, #80]	; (800f744 <HAL_UART_IRQHandler+0x2b8>)
 800f6f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f9 fc4a 	bl	8008f94 <HAL_DMA_Abort_IT>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d017      	beq.n	800f736 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f710:	4610      	mov	r0, r2
 800f712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f714:	e00f      	b.n	800f736 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 f9ee 	bl	800faf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f71c:	e00b      	b.n	800f736 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 f9ea 	bl	800faf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f724:	e007      	b.n	800f736 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 f9e6 	bl	800faf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f734:	e1b7      	b.n	800faa6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f736:	bf00      	nop
    return;
 800f738:	e1b5      	b.n	800faa6 <HAL_UART_IRQHandler+0x61a>
 800f73a:	bf00      	nop
 800f73c:	10000001 	.word	0x10000001
 800f740:	04000120 	.word	0x04000120
 800f744:	080108ed 	.word	0x080108ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	f040 814a 	bne.w	800f9e6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f756:	f003 0310 	and.w	r3, r3, #16
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f000 8143 	beq.w	800f9e6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f764:	f003 0310 	and.w	r3, r3, #16
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 813c 	beq.w	800f9e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2210      	movs	r2, #16
 800f774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f780:	2b40      	cmp	r3, #64	; 0x40
 800f782:	f040 80b5 	bne.w	800f8f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 8187 	beq.w	800faaa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	f080 817f 	bcs.w	800faaa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f7b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f040 8086 	bne.w	800f8d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7d4:	e853 3f00 	ldrex	r3, [r3]
 800f7d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f7fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f802:	e841 2300 	strex	r3, r2, [r1]
 800f806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1da      	bne.n	800f7c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	3308      	adds	r3, #8
 800f818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f81c:	e853 3f00 	ldrex	r3, [r3]
 800f820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f824:	f023 0301 	bic.w	r3, r3, #1
 800f828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3308      	adds	r3, #8
 800f832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f83a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f842:	e841 2300 	strex	r3, r2, [r1]
 800f846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1e1      	bne.n	800f812 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3308      	adds	r3, #8
 800f854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3308      	adds	r3, #8
 800f86e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f872:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f87a:	e841 2300 	strex	r3, r2, [r1]
 800f87e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e3      	bne.n	800f84e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2220      	movs	r2, #32
 800f88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f89c:	e853 3f00 	ldrex	r3, [r3]
 800f8a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8a4:	f023 0310 	bic.w	r3, r3, #16
 800f8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8be:	e841 2300 	strex	r3, r2, [r1]
 800f8c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d1e4      	bne.n	800f894 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7f9 fb07 	bl	8008ee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	1ad3      	subs	r3, r2, r3
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7f3 fffd 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8ee:	e0dc      	b.n	800faaa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 80ce 	beq.w	800faae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f916:	2b00      	cmp	r3, #0
 800f918:	f000 80c9 	beq.w	800faae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f93e:	647b      	str	r3, [r7, #68]	; 0x44
 800f940:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f946:	e841 2300 	strex	r3, r2, [r1]
 800f94a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1e4      	bne.n	800f91c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	3308      	adds	r3, #8
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	e853 3f00 	ldrex	r3, [r3]
 800f960:	623b      	str	r3, [r7, #32]
   return(result);
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f968:	f023 0301 	bic.w	r3, r3, #1
 800f96c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3308      	adds	r3, #8
 800f976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f97a:	633a      	str	r2, [r7, #48]	; 0x30
 800f97c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f982:	e841 2300 	strex	r3, r2, [r1]
 800f986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1e1      	bne.n	800f952 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2220      	movs	r2, #32
 800f992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	e853 3f00 	ldrex	r3, [r3]
 800f9ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f023 0310 	bic.w	r3, r3, #16
 800f9b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f9c4:	61fb      	str	r3, [r7, #28]
 800f9c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c8:	69b9      	ldr	r1, [r7, #24]
 800f9ca:	69fa      	ldr	r2, [r7, #28]
 800f9cc:	e841 2300 	strex	r3, r2, [r1]
 800f9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1e4      	bne.n	800f9a2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f9d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7f3 ff82 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f9e4:	e063      	b.n	800faae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00e      	beq.n	800fa10 <HAL_UART_IRQHandler+0x584>
 800f9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fa06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 ffb0 	bl	801096e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa0e:	e051      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fa10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d014      	beq.n	800fa46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fa1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d105      	bne.n	800fa34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fa28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d008      	beq.n	800fa46 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d03a      	beq.n	800fab2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	4798      	blx	r3
    }
    return;
 800fa44:	e035      	b.n	800fab2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d009      	beq.n	800fa66 <HAL_UART_IRQHandler+0x5da>
 800fa52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 ff5a 	bl	8010918 <UART_EndTransmit_IT>
    return;
 800fa64:	e026      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d009      	beq.n	800fa86 <HAL_UART_IRQHandler+0x5fa>
 800fa72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 ff89 	bl	8010996 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa84:	e016      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d010      	beq.n	800fab4 <HAL_UART_IRQHandler+0x628>
 800fa92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	da0c      	bge.n	800fab4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 ff71 	bl	8010982 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800faa0:	e008      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
      return;
 800faa2:	bf00      	nop
 800faa4:	e006      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
    return;
 800faa6:	bf00      	nop
 800faa8:	e004      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
      return;
 800faaa:	bf00      	nop
 800faac:	e002      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
      return;
 800faae:	bf00      	nop
 800fab0:	e000      	b.n	800fab4 <HAL_UART_IRQHandler+0x628>
    return;
 800fab2:	bf00      	nop
  }
}
 800fab4:	37e8      	adds	r7, #232	; 0xe8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop

0800fabc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fac4:	bf00      	nop
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb10:	b08c      	sub	sp, #48	; 0x30
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	689a      	ldr	r2, [r3, #8]
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	431a      	orrs	r2, r3
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	431a      	orrs	r2, r3
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	69db      	ldr	r3, [r3, #28]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	4baa      	ldr	r3, [pc, #680]	; (800fde4 <UART_SetConfig+0x2d8>)
 800fb3c:	4013      	ands	r3, r2
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	6812      	ldr	r2, [r2, #0]
 800fb42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb44:	430b      	orrs	r3, r1
 800fb46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	68da      	ldr	r2, [r3, #12]
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	699b      	ldr	r3, [r3, #24]
 800fb62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a9f      	ldr	r2, [pc, #636]	; (800fde8 <UART_SetConfig+0x2dc>)
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d004      	beq.n	800fb78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb74:	4313      	orrs	r3, r2
 800fb76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fb82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	6812      	ldr	r2, [r2, #0]
 800fb8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb8c:	430b      	orrs	r3, r1
 800fb8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb96:	f023 010f 	bic.w	r1, r3, #15
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	430a      	orrs	r2, r1
 800fba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a90      	ldr	r2, [pc, #576]	; (800fdec <UART_SetConfig+0x2e0>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d125      	bne.n	800fbfc <UART_SetConfig+0xf0>
 800fbb0:	4b8f      	ldr	r3, [pc, #572]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbb6:	f003 0303 	and.w	r3, r3, #3
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d81a      	bhi.n	800fbf4 <UART_SetConfig+0xe8>
 800fbbe:	a201      	add	r2, pc, #4	; (adr r2, 800fbc4 <UART_SetConfig+0xb8>)
 800fbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc4:	0800fbd5 	.word	0x0800fbd5
 800fbc8:	0800fbe5 	.word	0x0800fbe5
 800fbcc:	0800fbdd 	.word	0x0800fbdd
 800fbd0:	0800fbed 	.word	0x0800fbed
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbda:	e116      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fbdc:	2302      	movs	r3, #2
 800fbde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbe2:	e112      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fbe4:	2304      	movs	r3, #4
 800fbe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbea:	e10e      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fbec:	2308      	movs	r3, #8
 800fbee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbf2:	e10a      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fbf4:	2310      	movs	r3, #16
 800fbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbfa:	e106      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a7c      	ldr	r2, [pc, #496]	; (800fdf4 <UART_SetConfig+0x2e8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d138      	bne.n	800fc78 <UART_SetConfig+0x16c>
 800fc06:	4b7a      	ldr	r3, [pc, #488]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc0c:	f003 030c 	and.w	r3, r3, #12
 800fc10:	2b0c      	cmp	r3, #12
 800fc12:	d82d      	bhi.n	800fc70 <UART_SetConfig+0x164>
 800fc14:	a201      	add	r2, pc, #4	; (adr r2, 800fc1c <UART_SetConfig+0x110>)
 800fc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1a:	bf00      	nop
 800fc1c:	0800fc51 	.word	0x0800fc51
 800fc20:	0800fc71 	.word	0x0800fc71
 800fc24:	0800fc71 	.word	0x0800fc71
 800fc28:	0800fc71 	.word	0x0800fc71
 800fc2c:	0800fc61 	.word	0x0800fc61
 800fc30:	0800fc71 	.word	0x0800fc71
 800fc34:	0800fc71 	.word	0x0800fc71
 800fc38:	0800fc71 	.word	0x0800fc71
 800fc3c:	0800fc59 	.word	0x0800fc59
 800fc40:	0800fc71 	.word	0x0800fc71
 800fc44:	0800fc71 	.word	0x0800fc71
 800fc48:	0800fc71 	.word	0x0800fc71
 800fc4c:	0800fc69 	.word	0x0800fc69
 800fc50:	2300      	movs	r3, #0
 800fc52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc56:	e0d8      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fc58:	2302      	movs	r3, #2
 800fc5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc5e:	e0d4      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fc60:	2304      	movs	r3, #4
 800fc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc66:	e0d0      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fc68:	2308      	movs	r3, #8
 800fc6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc6e:	e0cc      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fc70:	2310      	movs	r3, #16
 800fc72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc76:	e0c8      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a5e      	ldr	r2, [pc, #376]	; (800fdf8 <UART_SetConfig+0x2ec>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d125      	bne.n	800fcce <UART_SetConfig+0x1c2>
 800fc82:	4b5b      	ldr	r3, [pc, #364]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc8c:	2b30      	cmp	r3, #48	; 0x30
 800fc8e:	d016      	beq.n	800fcbe <UART_SetConfig+0x1b2>
 800fc90:	2b30      	cmp	r3, #48	; 0x30
 800fc92:	d818      	bhi.n	800fcc6 <UART_SetConfig+0x1ba>
 800fc94:	2b20      	cmp	r3, #32
 800fc96:	d00a      	beq.n	800fcae <UART_SetConfig+0x1a2>
 800fc98:	2b20      	cmp	r3, #32
 800fc9a:	d814      	bhi.n	800fcc6 <UART_SetConfig+0x1ba>
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <UART_SetConfig+0x19a>
 800fca0:	2b10      	cmp	r3, #16
 800fca2:	d008      	beq.n	800fcb6 <UART_SetConfig+0x1aa>
 800fca4:	e00f      	b.n	800fcc6 <UART_SetConfig+0x1ba>
 800fca6:	2300      	movs	r3, #0
 800fca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcac:	e0ad      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fcae:	2302      	movs	r3, #2
 800fcb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcb4:	e0a9      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fcb6:	2304      	movs	r3, #4
 800fcb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcbc:	e0a5      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fcbe:	2308      	movs	r3, #8
 800fcc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcc4:	e0a1      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fcc6:	2310      	movs	r3, #16
 800fcc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fccc:	e09d      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a4a      	ldr	r2, [pc, #296]	; (800fdfc <UART_SetConfig+0x2f0>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d125      	bne.n	800fd24 <UART_SetConfig+0x218>
 800fcd8:	4b45      	ldr	r3, [pc, #276]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fce2:	2bc0      	cmp	r3, #192	; 0xc0
 800fce4:	d016      	beq.n	800fd14 <UART_SetConfig+0x208>
 800fce6:	2bc0      	cmp	r3, #192	; 0xc0
 800fce8:	d818      	bhi.n	800fd1c <UART_SetConfig+0x210>
 800fcea:	2b80      	cmp	r3, #128	; 0x80
 800fcec:	d00a      	beq.n	800fd04 <UART_SetConfig+0x1f8>
 800fcee:	2b80      	cmp	r3, #128	; 0x80
 800fcf0:	d814      	bhi.n	800fd1c <UART_SetConfig+0x210>
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <UART_SetConfig+0x1f0>
 800fcf6:	2b40      	cmp	r3, #64	; 0x40
 800fcf8:	d008      	beq.n	800fd0c <UART_SetConfig+0x200>
 800fcfa:	e00f      	b.n	800fd1c <UART_SetConfig+0x210>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd02:	e082      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd04:	2302      	movs	r3, #2
 800fd06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd0a:	e07e      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd0c:	2304      	movs	r3, #4
 800fd0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd12:	e07a      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd14:	2308      	movs	r3, #8
 800fd16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd1a:	e076      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd1c:	2310      	movs	r3, #16
 800fd1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd22:	e072      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a35      	ldr	r2, [pc, #212]	; (800fe00 <UART_SetConfig+0x2f4>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d12a      	bne.n	800fd84 <UART_SetConfig+0x278>
 800fd2e:	4b30      	ldr	r3, [pc, #192]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fd30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd3c:	d01a      	beq.n	800fd74 <UART_SetConfig+0x268>
 800fd3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd42:	d81b      	bhi.n	800fd7c <UART_SetConfig+0x270>
 800fd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd48:	d00c      	beq.n	800fd64 <UART_SetConfig+0x258>
 800fd4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd4e:	d815      	bhi.n	800fd7c <UART_SetConfig+0x270>
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d003      	beq.n	800fd5c <UART_SetConfig+0x250>
 800fd54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd58:	d008      	beq.n	800fd6c <UART_SetConfig+0x260>
 800fd5a:	e00f      	b.n	800fd7c <UART_SetConfig+0x270>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd62:	e052      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd64:	2302      	movs	r3, #2
 800fd66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd6a:	e04e      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd72:	e04a      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd74:	2308      	movs	r3, #8
 800fd76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd7a:	e046      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd7c:	2310      	movs	r3, #16
 800fd7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd82:	e042      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a17      	ldr	r2, [pc, #92]	; (800fde8 <UART_SetConfig+0x2dc>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d13a      	bne.n	800fe04 <UART_SetConfig+0x2f8>
 800fd8e:	4b18      	ldr	r3, [pc, #96]	; (800fdf0 <UART_SetConfig+0x2e4>)
 800fd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fd98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd9c:	d01a      	beq.n	800fdd4 <UART_SetConfig+0x2c8>
 800fd9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fda2:	d81b      	bhi.n	800fddc <UART_SetConfig+0x2d0>
 800fda4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fda8:	d00c      	beq.n	800fdc4 <UART_SetConfig+0x2b8>
 800fdaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdae:	d815      	bhi.n	800fddc <UART_SetConfig+0x2d0>
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d003      	beq.n	800fdbc <UART_SetConfig+0x2b0>
 800fdb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdb8:	d008      	beq.n	800fdcc <UART_SetConfig+0x2c0>
 800fdba:	e00f      	b.n	800fddc <UART_SetConfig+0x2d0>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdc2:	e022      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdca:	e01e      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fdcc:	2304      	movs	r3, #4
 800fdce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdd2:	e01a      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fdd4:	2308      	movs	r3, #8
 800fdd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdda:	e016      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fddc:	2310      	movs	r3, #16
 800fdde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fde2:	e012      	b.n	800fe0a <UART_SetConfig+0x2fe>
 800fde4:	cfff69f3 	.word	0xcfff69f3
 800fde8:	40008000 	.word	0x40008000
 800fdec:	40013800 	.word	0x40013800
 800fdf0:	40021000 	.word	0x40021000
 800fdf4:	40004400 	.word	0x40004400
 800fdf8:	40004800 	.word	0x40004800
 800fdfc:	40004c00 	.word	0x40004c00
 800fe00:	40005000 	.word	0x40005000
 800fe04:	2310      	movs	r3, #16
 800fe06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4aae      	ldr	r2, [pc, #696]	; (80100c8 <UART_SetConfig+0x5bc>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	f040 8097 	bne.w	800ff44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fe1a:	2b08      	cmp	r3, #8
 800fe1c:	d823      	bhi.n	800fe66 <UART_SetConfig+0x35a>
 800fe1e:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <UART_SetConfig+0x318>)
 800fe20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe24:	0800fe49 	.word	0x0800fe49
 800fe28:	0800fe67 	.word	0x0800fe67
 800fe2c:	0800fe51 	.word	0x0800fe51
 800fe30:	0800fe67 	.word	0x0800fe67
 800fe34:	0800fe57 	.word	0x0800fe57
 800fe38:	0800fe67 	.word	0x0800fe67
 800fe3c:	0800fe67 	.word	0x0800fe67
 800fe40:	0800fe67 	.word	0x0800fe67
 800fe44:	0800fe5f 	.word	0x0800fe5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe48:	f7fd fccc 	bl	800d7e4 <HAL_RCC_GetPCLK1Freq>
 800fe4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fe4e:	e010      	b.n	800fe72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe50:	4b9e      	ldr	r3, [pc, #632]	; (80100cc <UART_SetConfig+0x5c0>)
 800fe52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fe54:	e00d      	b.n	800fe72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe56:	f7fd fc57 	bl	800d708 <HAL_RCC_GetSysClockFreq>
 800fe5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fe5c:	e009      	b.n	800fe72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fe64:	e005      	b.n	800fe72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800fe66:	2300      	movs	r3, #0
 800fe68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fe70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8130 	beq.w	80100da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7e:	4a94      	ldr	r2, [pc, #592]	; (80100d0 <UART_SetConfig+0x5c4>)
 800fe80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe84:	461a      	mov	r2, r3
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	4613      	mov	r3, r2
 800fe94:	005b      	lsls	r3, r3, #1
 800fe96:	4413      	add	r3, r2
 800fe98:	69ba      	ldr	r2, [r7, #24]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d305      	bcc.n	800feaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fea4:	69ba      	ldr	r2, [r7, #24]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d903      	bls.n	800feb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800feb0:	e113      	b.n	80100da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb4:	2200      	movs	r2, #0
 800feb6:	60bb      	str	r3, [r7, #8]
 800feb8:	60fa      	str	r2, [r7, #12]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800febe:	4a84      	ldr	r2, [pc, #528]	; (80100d0 <UART_SetConfig+0x5c4>)
 800fec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	2200      	movs	r2, #0
 800fec8:	603b      	str	r3, [r7, #0]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fed4:	f7f0 feb0 	bl	8000c38 <__aeabi_uldivmod>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4610      	mov	r0, r2
 800fede:	4619      	mov	r1, r3
 800fee0:	f04f 0200 	mov.w	r2, #0
 800fee4:	f04f 0300 	mov.w	r3, #0
 800fee8:	020b      	lsls	r3, r1, #8
 800feea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800feee:	0202      	lsls	r2, r0, #8
 800fef0:	6979      	ldr	r1, [r7, #20]
 800fef2:	6849      	ldr	r1, [r1, #4]
 800fef4:	0849      	lsrs	r1, r1, #1
 800fef6:	2000      	movs	r0, #0
 800fef8:	460c      	mov	r4, r1
 800fefa:	4605      	mov	r5, r0
 800fefc:	eb12 0804 	adds.w	r8, r2, r4
 800ff00:	eb43 0905 	adc.w	r9, r3, r5
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	469a      	mov	sl, r3
 800ff0c:	4693      	mov	fp, r2
 800ff0e:	4652      	mov	r2, sl
 800ff10:	465b      	mov	r3, fp
 800ff12:	4640      	mov	r0, r8
 800ff14:	4649      	mov	r1, r9
 800ff16:	f7f0 fe8f 	bl	8000c38 <__aeabi_uldivmod>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4613      	mov	r3, r2
 800ff20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff28:	d308      	bcc.n	800ff3c <UART_SetConfig+0x430>
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff30:	d204      	bcs.n	800ff3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	6a3a      	ldr	r2, [r7, #32]
 800ff38:	60da      	str	r2, [r3, #12]
 800ff3a:	e0ce      	b.n	80100da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ff42:	e0ca      	b.n	80100da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	69db      	ldr	r3, [r3, #28]
 800ff48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff4c:	d166      	bne.n	801001c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ff4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff52:	2b08      	cmp	r3, #8
 800ff54:	d827      	bhi.n	800ffa6 <UART_SetConfig+0x49a>
 800ff56:	a201      	add	r2, pc, #4	; (adr r2, 800ff5c <UART_SetConfig+0x450>)
 800ff58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5c:	0800ff81 	.word	0x0800ff81
 800ff60:	0800ff89 	.word	0x0800ff89
 800ff64:	0800ff91 	.word	0x0800ff91
 800ff68:	0800ffa7 	.word	0x0800ffa7
 800ff6c:	0800ff97 	.word	0x0800ff97
 800ff70:	0800ffa7 	.word	0x0800ffa7
 800ff74:	0800ffa7 	.word	0x0800ffa7
 800ff78:	0800ffa7 	.word	0x0800ffa7
 800ff7c:	0800ff9f 	.word	0x0800ff9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff80:	f7fd fc30 	bl	800d7e4 <HAL_RCC_GetPCLK1Freq>
 800ff84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff86:	e014      	b.n	800ffb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff88:	f7fd fc42 	bl	800d810 <HAL_RCC_GetPCLK2Freq>
 800ff8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff8e:	e010      	b.n	800ffb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff90:	4b4e      	ldr	r3, [pc, #312]	; (80100cc <UART_SetConfig+0x5c0>)
 800ff92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ff94:	e00d      	b.n	800ffb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff96:	f7fd fbb7 	bl	800d708 <HAL_RCC_GetSysClockFreq>
 800ff9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff9c:	e009      	b.n	800ffb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ffa4:	e005      	b.n	800ffb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ffb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f000 8090 	beq.w	80100da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbe:	4a44      	ldr	r2, [pc, #272]	; (80100d0 <UART_SetConfig+0x5c4>)
 800ffc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffcc:	005a      	lsls	r2, r3, #1
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	085b      	lsrs	r3, r3, #1
 800ffd4:	441a      	add	r2, r3
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffe0:	6a3b      	ldr	r3, [r7, #32]
 800ffe2:	2b0f      	cmp	r3, #15
 800ffe4:	d916      	bls.n	8010014 <UART_SetConfig+0x508>
 800ffe6:	6a3b      	ldr	r3, [r7, #32]
 800ffe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffec:	d212      	bcs.n	8010014 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffee:	6a3b      	ldr	r3, [r7, #32]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	f023 030f 	bic.w	r3, r3, #15
 800fff6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	085b      	lsrs	r3, r3, #1
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f003 0307 	and.w	r3, r3, #7
 8010002:	b29a      	uxth	r2, r3
 8010004:	8bfb      	ldrh	r3, [r7, #30]
 8010006:	4313      	orrs	r3, r2
 8010008:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	8bfa      	ldrh	r2, [r7, #30]
 8010010:	60da      	str	r2, [r3, #12]
 8010012:	e062      	b.n	80100da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801001a:	e05e      	b.n	80100da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801001c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010020:	2b08      	cmp	r3, #8
 8010022:	d828      	bhi.n	8010076 <UART_SetConfig+0x56a>
 8010024:	a201      	add	r2, pc, #4	; (adr r2, 801002c <UART_SetConfig+0x520>)
 8010026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002a:	bf00      	nop
 801002c:	08010051 	.word	0x08010051
 8010030:	08010059 	.word	0x08010059
 8010034:	08010061 	.word	0x08010061
 8010038:	08010077 	.word	0x08010077
 801003c:	08010067 	.word	0x08010067
 8010040:	08010077 	.word	0x08010077
 8010044:	08010077 	.word	0x08010077
 8010048:	08010077 	.word	0x08010077
 801004c:	0801006f 	.word	0x0801006f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010050:	f7fd fbc8 	bl	800d7e4 <HAL_RCC_GetPCLK1Freq>
 8010054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010056:	e014      	b.n	8010082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010058:	f7fd fbda 	bl	800d810 <HAL_RCC_GetPCLK2Freq>
 801005c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801005e:	e010      	b.n	8010082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010060:	4b1a      	ldr	r3, [pc, #104]	; (80100cc <UART_SetConfig+0x5c0>)
 8010062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010064:	e00d      	b.n	8010082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010066:	f7fd fb4f 	bl	800d708 <HAL_RCC_GetSysClockFreq>
 801006a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801006c:	e009      	b.n	8010082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801006e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010074:	e005      	b.n	8010082 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010076:	2300      	movs	r3, #0
 8010078:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010080:	bf00      	nop
    }

    if (pclk != 0U)
 8010082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010084:	2b00      	cmp	r3, #0
 8010086:	d028      	beq.n	80100da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	4a10      	ldr	r2, [pc, #64]	; (80100d0 <UART_SetConfig+0x5c4>)
 801008e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010092:	461a      	mov	r2, r3
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	fbb3 f2f2 	udiv	r2, r3, r2
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	085b      	lsrs	r3, r3, #1
 80100a0:	441a      	add	r2, r3
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80100aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	2b0f      	cmp	r3, #15
 80100b0:	d910      	bls.n	80100d4 <UART_SetConfig+0x5c8>
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100b8:	d20c      	bcs.n	80100d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	b29a      	uxth	r2, r3
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	60da      	str	r2, [r3, #12]
 80100c4:	e009      	b.n	80100da <UART_SetConfig+0x5ce>
 80100c6:	bf00      	nop
 80100c8:	40008000 	.word	0x40008000
 80100cc:	00f42400 	.word	0x00f42400
 80100d0:	080189dc 	.word	0x080189dc
      }
      else
      {
        ret = HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2201      	movs	r2, #1
 80100de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	2200      	movs	r2, #0
 80100ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2200      	movs	r2, #0
 80100f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80100f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3730      	adds	r7, #48	; 0x30
 80100fe:	46bd      	mov	sp, r7
 8010100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010110:	f003 0301 	and.w	r3, r3, #1
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00a      	beq.n	801012e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	430a      	orrs	r2, r1
 801012c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010132:	f003 0302 	and.w	r3, r3, #2
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00a      	beq.n	8010150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	430a      	orrs	r2, r1
 801014e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010154:	f003 0304 	and.w	r3, r3, #4
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00a      	beq.n	8010172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	430a      	orrs	r2, r1
 8010170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010176:	f003 0308 	and.w	r3, r3, #8
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00a      	beq.n	8010194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	430a      	orrs	r2, r1
 8010192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010198:	f003 0310 	and.w	r3, r3, #16
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ba:	f003 0320 	and.w	r3, r3, #32
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00a      	beq.n	80101d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d01a      	beq.n	801021a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	430a      	orrs	r2, r1
 80101f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010202:	d10a      	bne.n	801021a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	430a      	orrs	r2, r1
 8010218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00a      	beq.n	801023c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	430a      	orrs	r2, r1
 801023a:	605a      	str	r2, [r3, #4]
  }
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b086      	sub	sp, #24
 801024c:	af02      	add	r7, sp, #8
 801024e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010258:	f7f6 fae0 	bl	800681c <HAL_GetTick>
 801025c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f003 0308 	and.w	r3, r3, #8
 8010268:	2b08      	cmp	r3, #8
 801026a:	d10e      	bne.n	801028a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801026c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2200      	movs	r2, #0
 8010276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f82f 	bl	80102de <UART_WaitOnFlagUntilTimeout>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010286:	2303      	movs	r3, #3
 8010288:	e025      	b.n	80102d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f003 0304 	and.w	r3, r3, #4
 8010294:	2b04      	cmp	r3, #4
 8010296:	d10e      	bne.n	80102b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f819 	bl	80102de <UART_WaitOnFlagUntilTimeout>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102b2:	2303      	movs	r3, #3
 80102b4:	e00f      	b.n	80102d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2220      	movs	r2, #32
 80102ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2220      	movs	r2, #32
 80102c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b09c      	sub	sp, #112	; 0x70
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	60f8      	str	r0, [r7, #12]
 80102e6:	60b9      	str	r1, [r7, #8]
 80102e8:	603b      	str	r3, [r7, #0]
 80102ea:	4613      	mov	r3, r2
 80102ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ee:	e0a9      	b.n	8010444 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f6:	f000 80a5 	beq.w	8010444 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102fa:	f7f6 fa8f 	bl	800681c <HAL_GetTick>
 80102fe:	4602      	mov	r2, r0
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010306:	429a      	cmp	r2, r3
 8010308:	d302      	bcc.n	8010310 <UART_WaitOnFlagUntilTimeout+0x32>
 801030a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801030c:	2b00      	cmp	r3, #0
 801030e:	d140      	bne.n	8010392 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010318:	e853 3f00 	ldrex	r3, [r3]
 801031c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801031e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010324:	667b      	str	r3, [r7, #100]	; 0x64
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	461a      	mov	r2, r3
 801032c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801032e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010336:	e841 2300 	strex	r3, r2, [r1]
 801033a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801033c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1e6      	bne.n	8010310 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3308      	adds	r3, #8
 8010348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034c:	e853 3f00 	ldrex	r3, [r3]
 8010350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010354:	f023 0301 	bic.w	r3, r3, #1
 8010358:	663b      	str	r3, [r7, #96]	; 0x60
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3308      	adds	r3, #8
 8010360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010362:	64ba      	str	r2, [r7, #72]	; 0x48
 8010364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801036a:	e841 2300 	strex	r3, r2, [r1]
 801036e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1e5      	bne.n	8010342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2220      	movs	r2, #32
 801037a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2220      	movs	r2, #32
 8010382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801038e:	2303      	movs	r3, #3
 8010390:	e069      	b.n	8010466 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f003 0304 	and.w	r3, r3, #4
 801039c:	2b00      	cmp	r3, #0
 801039e:	d051      	beq.n	8010444 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80103ae:	d149      	bne.n	8010444 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	e853 3f00 	ldrex	r3, [r3]
 80103c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80103ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	461a      	mov	r2, r3
 80103d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103d8:	637b      	str	r3, [r7, #52]	; 0x34
 80103da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103e0:	e841 2300 	strex	r3, r2, [r1]
 80103e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d1e6      	bne.n	80103ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3308      	adds	r3, #8
 80103f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	e853 3f00 	ldrex	r3, [r3]
 80103fa:	613b      	str	r3, [r7, #16]
   return(result);
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	f023 0301 	bic.w	r3, r3, #1
 8010402:	66bb      	str	r3, [r7, #104]	; 0x68
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3308      	adds	r3, #8
 801040a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801040c:	623a      	str	r2, [r7, #32]
 801040e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010410:	69f9      	ldr	r1, [r7, #28]
 8010412:	6a3a      	ldr	r2, [r7, #32]
 8010414:	e841 2300 	strex	r3, r2, [r1]
 8010418:	61bb      	str	r3, [r7, #24]
   return(result);
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e5      	bne.n	80103ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2220      	movs	r2, #32
 8010424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2220      	movs	r2, #32
 801042c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2220      	movs	r2, #32
 8010434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010440:	2303      	movs	r3, #3
 8010442:	e010      	b.n	8010466 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	69da      	ldr	r2, [r3, #28]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	4013      	ands	r3, r2
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	429a      	cmp	r2, r3
 8010452:	bf0c      	ite	eq
 8010454:	2301      	moveq	r3, #1
 8010456:	2300      	movne	r3, #0
 8010458:	b2db      	uxtb	r3, r3
 801045a:	461a      	mov	r2, r3
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	429a      	cmp	r2, r3
 8010460:	f43f af46 	beq.w	80102f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3770      	adds	r7, #112	; 0x70
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
	...

08010470 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b096      	sub	sp, #88	; 0x58
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	4613      	mov	r3, r2
 801047c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	68ba      	ldr	r2, [r7, #8]
 8010482:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	88fa      	ldrh	r2, [r7, #6]
 8010488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2222      	movs	r2, #34	; 0x22
 8010498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d02c      	beq.n	80104fe <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a8:	4a42      	ldr	r2, [pc, #264]	; (80105b4 <UART_Start_Receive_DMA+0x144>)
 80104aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b0:	4a41      	ldr	r2, [pc, #260]	; (80105b8 <UART_Start_Receive_DMA+0x148>)
 80104b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b8:	4a40      	ldr	r2, [pc, #256]	; (80105bc <UART_Start_Receive_DMA+0x14c>)
 80104ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c0:	2200      	movs	r2, #0
 80104c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3324      	adds	r3, #36	; 0x24
 80104ce:	4619      	mov	r1, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d4:	461a      	mov	r2, r3
 80104d6:	88fb      	ldrh	r3, [r7, #6]
 80104d8:	f7f8 fc88 	bl	8008dec <HAL_DMA_Start_IT>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00d      	beq.n	80104fe <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2210      	movs	r2, #16
 80104e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2200      	movs	r2, #0
 80104ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2220      	movs	r2, #32
 80104f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80104fa:	2301      	movs	r3, #1
 80104fc:	e055      	b.n	80105aa <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d018      	beq.n	8010540 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010516:	e853 3f00 	ldrex	r3, [r3]
 801051a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801051c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010522:	657b      	str	r3, [r7, #84]	; 0x54
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	461a      	mov	r2, r3
 801052a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801052c:	64bb      	str	r3, [r7, #72]	; 0x48
 801052e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010534:	e841 2300 	strex	r3, r2, [r1]
 8010538:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801053a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1e6      	bne.n	801050e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3308      	adds	r3, #8
 8010546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054a:	e853 3f00 	ldrex	r3, [r3]
 801054e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	f043 0301 	orr.w	r3, r3, #1
 8010556:	653b      	str	r3, [r7, #80]	; 0x50
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	3308      	adds	r3, #8
 801055e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010560:	637a      	str	r2, [r7, #52]	; 0x34
 8010562:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010568:	e841 2300 	strex	r3, r2, [r1]
 801056c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1e5      	bne.n	8010540 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3308      	adds	r3, #8
 801057a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	e853 3f00 	ldrex	r3, [r3]
 8010582:	613b      	str	r3, [r7, #16]
   return(result);
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801058a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3308      	adds	r3, #8
 8010592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010594:	623a      	str	r2, [r7, #32]
 8010596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	6a3a      	ldr	r2, [r7, #32]
 801059c:	e841 2300 	strex	r3, r2, [r1]
 80105a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1e5      	bne.n	8010574 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3758      	adds	r7, #88	; 0x58
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	0801070f 	.word	0x0801070f
 80105b8:	08010835 	.word	0x08010835
 80105bc:	0801086d 	.word	0x0801086d

080105c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b08f      	sub	sp, #60	; 0x3c
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	e853 3f00 	ldrex	r3, [r3]
 80105d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80105dc:	637b      	str	r3, [r7, #52]	; 0x34
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ee:	e841 2300 	strex	r3, r2, [r1]
 80105f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1e6      	bne.n	80105c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3308      	adds	r3, #8
 8010600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	60bb      	str	r3, [r7, #8]
   return(result);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010610:	633b      	str	r3, [r7, #48]	; 0x30
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	3308      	adds	r3, #8
 8010618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061a:	61ba      	str	r2, [r7, #24]
 801061c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6979      	ldr	r1, [r7, #20]
 8010620:	69ba      	ldr	r2, [r7, #24]
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	613b      	str	r3, [r7, #16]
   return(result);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e5      	bne.n	80105fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2220      	movs	r2, #32
 8010632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010636:	bf00      	nop
 8010638:	373c      	adds	r7, #60	; 0x3c
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010642:	b480      	push	{r7}
 8010644:	b095      	sub	sp, #84	; 0x54
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010652:	e853 3f00 	ldrex	r3, [r3]
 8010656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801065e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	461a      	mov	r2, r3
 8010666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010668:	643b      	str	r3, [r7, #64]	; 0x40
 801066a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801066e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010670:	e841 2300 	strex	r3, r2, [r1]
 8010674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1e6      	bne.n	801064a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3308      	adds	r3, #8
 8010682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	e853 3f00 	ldrex	r3, [r3]
 801068a:	61fb      	str	r3, [r7, #28]
   return(result);
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010692:	f023 0301 	bic.w	r3, r3, #1
 8010696:	64bb      	str	r3, [r7, #72]	; 0x48
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3308      	adds	r3, #8
 801069e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e3      	bne.n	801067c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d118      	bne.n	80106ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f023 0310 	bic.w	r3, r3, #16
 80106d0:	647b      	str	r3, [r7, #68]	; 0x44
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106da:	61bb      	str	r3, [r7, #24]
 80106dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6979      	ldr	r1, [r7, #20]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	613b      	str	r3, [r7, #16]
   return(result);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e6      	bne.n	80106bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2220      	movs	r2, #32
 80106f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010702:	bf00      	nop
 8010704:	3754      	adds	r7, #84	; 0x54
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr

0801070e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b09c      	sub	sp, #112	; 0x70
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801071a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f003 0320 	and.w	r3, r3, #32
 8010726:	2b00      	cmp	r3, #0
 8010728:	d171      	bne.n	801080e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801072a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801072c:	2200      	movs	r2, #0
 801072e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073a:	e853 3f00 	ldrex	r3, [r3]
 801073e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010746:	66bb      	str	r3, [r7, #104]	; 0x68
 8010748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	461a      	mov	r2, r3
 801074e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010750:	65bb      	str	r3, [r7, #88]	; 0x58
 8010752:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010754:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010758:	e841 2300 	strex	r3, r2, [r1]
 801075c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801075e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1e6      	bne.n	8010732 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	3308      	adds	r3, #8
 801076a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076e:	e853 3f00 	ldrex	r3, [r3]
 8010772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010776:	f023 0301 	bic.w	r3, r3, #1
 801077a:	667b      	str	r3, [r7, #100]	; 0x64
 801077c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	3308      	adds	r3, #8
 8010782:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010784:	647a      	str	r2, [r7, #68]	; 0x44
 8010786:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010788:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801078a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801078c:	e841 2300 	strex	r3, r2, [r1]
 8010790:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010794:	2b00      	cmp	r3, #0
 8010796:	d1e5      	bne.n	8010764 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3308      	adds	r3, #8
 801079e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	e853 3f00 	ldrex	r3, [r3]
 80107a6:	623b      	str	r3, [r7, #32]
   return(result);
 80107a8:	6a3b      	ldr	r3, [r7, #32]
 80107aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107ae:	663b      	str	r3, [r7, #96]	; 0x60
 80107b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	3308      	adds	r3, #8
 80107b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107b8:	633a      	str	r2, [r7, #48]	; 0x30
 80107ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107c0:	e841 2300 	strex	r3, r2, [r1]
 80107c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1e5      	bne.n	8010798 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ce:	2220      	movs	r2, #32
 80107d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d118      	bne.n	801080e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	e853 3f00 	ldrex	r3, [r3]
 80107e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f023 0310 	bic.w	r3, r3, #16
 80107f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	461a      	mov	r2, r3
 80107f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107fa:	61fb      	str	r3, [r7, #28]
 80107fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fe:	69b9      	ldr	r1, [r7, #24]
 8010800:	69fa      	ldr	r2, [r7, #28]
 8010802:	e841 2300 	strex	r3, r2, [r1]
 8010806:	617b      	str	r3, [r7, #20]
   return(result);
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1e6      	bne.n	80107dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801080e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010812:	2b01      	cmp	r3, #1
 8010814:	d107      	bne.n	8010826 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801081c:	4619      	mov	r1, r3
 801081e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010820:	f7f3 f862 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010824:	e002      	b.n	801082c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010826:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010828:	f7ff f952 	bl	800fad0 <HAL_UART_RxCpltCallback>
}
 801082c:	bf00      	nop
 801082e:	3770      	adds	r7, #112	; 0x70
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010840:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010846:	2b01      	cmp	r3, #1
 8010848:	d109      	bne.n	801085e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010850:	085b      	lsrs	r3, r3, #1
 8010852:	b29b      	uxth	r3, r3
 8010854:	4619      	mov	r1, r3
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f7f3 f846 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801085c:	e002      	b.n	8010864 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ff f940 	bl	800fae4 <HAL_UART_RxHalfCpltCallback>
}
 8010864:	bf00      	nop
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010878:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010880:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010888:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010894:	2b80      	cmp	r3, #128	; 0x80
 8010896:	d109      	bne.n	80108ac <UART_DMAError+0x40>
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	2b21      	cmp	r3, #33	; 0x21
 801089c:	d106      	bne.n	80108ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2200      	movs	r2, #0
 80108a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80108a6:	6978      	ldr	r0, [r7, #20]
 80108a8:	f7ff fe8a 	bl	80105c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b6:	2b40      	cmp	r3, #64	; 0x40
 80108b8:	d109      	bne.n	80108ce <UART_DMAError+0x62>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b22      	cmp	r3, #34	; 0x22
 80108be:	d106      	bne.n	80108ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80108c8:	6978      	ldr	r0, [r7, #20]
 80108ca:	f7ff feba 	bl	8010642 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108d4:	f043 0210 	orr.w	r2, r3, #16
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108de:	6978      	ldr	r0, [r7, #20]
 80108e0:	f7ff f90a 	bl	800faf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108e4:	bf00      	nop
 80108e6:	3718      	adds	r7, #24
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f7ff f8f4 	bl	800faf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010910:	bf00      	nop
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b088      	sub	sp, #32
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	e853 3f00 	ldrex	r3, [r3]
 801092c:	60bb      	str	r3, [r7, #8]
   return(result);
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010934:	61fb      	str	r3, [r7, #28]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	461a      	mov	r2, r3
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	61bb      	str	r3, [r7, #24]
 8010940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010942:	6979      	ldr	r1, [r7, #20]
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	e841 2300 	strex	r3, r2, [r1]
 801094a:	613b      	str	r3, [r7, #16]
   return(result);
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1e6      	bne.n	8010920 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2220      	movs	r2, #32
 8010956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff f8ab 	bl	800fabc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010966:	bf00      	nop
 8010968:	3720      	adds	r7, #32
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801096e:	b480      	push	{r7}
 8010970:	b083      	sub	sp, #12
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010976:	bf00      	nop
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr

08010982 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010982:	b480      	push	{r7}
 8010984:	b083      	sub	sp, #12
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801098a:	bf00      	nop
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr

08010996 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010996:	b480      	push	{r7}
 8010998:	b083      	sub	sp, #12
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801099e:	bf00      	nop
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80109aa:	b480      	push	{r7}
 80109ac:	b085      	sub	sp, #20
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d101      	bne.n	80109c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80109bc:	2302      	movs	r3, #2
 80109be:	e027      	b.n	8010a10 <HAL_UARTEx_DisableFifoMode+0x66>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2224      	movs	r2, #36	; 0x24
 80109cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f022 0201 	bic.w	r2, r2, #1
 80109e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80109ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2220      	movs	r2, #32
 8010a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3714      	adds	r7, #20
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d101      	bne.n	8010a34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a30:	2302      	movs	r3, #2
 8010a32:	e02d      	b.n	8010a90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2201      	movs	r2, #1
 8010a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2224      	movs	r2, #36	; 0x24
 8010a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f022 0201 	bic.w	r2, r2, #1
 8010a5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	430a      	orrs	r2, r1
 8010a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 f8ab 	bl	8010bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2220      	movs	r2, #32
 8010a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d101      	bne.n	8010ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010aac:	2302      	movs	r3, #2
 8010aae:	e02d      	b.n	8010b0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2224      	movs	r2, #36	; 0x24
 8010abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f022 0201 	bic.w	r2, r2, #1
 8010ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	689b      	ldr	r3, [r3, #8]
 8010ade:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	430a      	orrs	r2, r1
 8010aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f86d 	bl	8010bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2220      	movs	r2, #32
 8010afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08c      	sub	sp, #48	; 0x30
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b28:	2b20      	cmp	r3, #32
 8010b2a:	d14a      	bne.n	8010bc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010b32:	88fb      	ldrh	r3, [r7, #6]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e043      	b.n	8010bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d101      	bne.n	8010b4a <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010b46:	2302      	movs	r3, #2
 8010b48:	e03c      	b.n	8010bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2201      	movs	r2, #1
 8010b56:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010b58:	88fb      	ldrh	r3, [r7, #6]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	68b9      	ldr	r1, [r7, #8]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f7ff fc86 	bl	8010470 <UART_Start_Receive_DMA>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d124      	bne.n	8010bbc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d11d      	bne.n	8010bb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2210      	movs	r2, #16
 8010b80:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	e853 3f00 	ldrex	r3, [r3]
 8010b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f043 0310 	orr.w	r3, r3, #16
 8010b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ba2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba4:	6a39      	ldr	r1, [r7, #32]
 8010ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ba8:	e841 2300 	strex	r3, r2, [r1]
 8010bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1e6      	bne.n	8010b82 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010bb4:	e002      	b.n	8010bbc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bc0:	e000      	b.n	8010bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010bc2:	2302      	movs	r3, #2
  }
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3730      	adds	r7, #48	; 0x30
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d108      	bne.n	8010bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2201      	movs	r2, #1
 8010be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2201      	movs	r2, #1
 8010be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010bec:	e031      	b.n	8010c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010bee:	2308      	movs	r3, #8
 8010bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010bf2:	2308      	movs	r3, #8
 8010bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	0e5b      	lsrs	r3, r3, #25
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	f003 0307 	and.w	r3, r3, #7
 8010c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	689b      	ldr	r3, [r3, #8]
 8010c0c:	0f5b      	lsrs	r3, r3, #29
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0307 	and.w	r3, r3, #7
 8010c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c16:	7bbb      	ldrb	r3, [r7, #14]
 8010c18:	7b3a      	ldrb	r2, [r7, #12]
 8010c1a:	4911      	ldr	r1, [pc, #68]	; (8010c60 <UARTEx_SetNbDataToProcess+0x94>)
 8010c1c:	5c8a      	ldrb	r2, [r1, r2]
 8010c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c22:	7b3a      	ldrb	r2, [r7, #12]
 8010c24:	490f      	ldr	r1, [pc, #60]	; (8010c64 <UARTEx_SetNbDataToProcess+0x98>)
 8010c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	7b7a      	ldrb	r2, [r7, #13]
 8010c38:	4909      	ldr	r1, [pc, #36]	; (8010c60 <UARTEx_SetNbDataToProcess+0x94>)
 8010c3a:	5c8a      	ldrb	r2, [r1, r2]
 8010c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c40:	7b7a      	ldrb	r2, [r7, #13]
 8010c42:	4908      	ldr	r1, [pc, #32]	; (8010c64 <UARTEx_SetNbDataToProcess+0x98>)
 8010c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010c52:	bf00      	nop
 8010c54:	3714      	adds	r7, #20
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	080189f4 	.word	0x080189f4
 8010c64:	080189fc 	.word	0x080189fc

08010c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010c78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010c7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	b29a      	uxth	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3714      	adds	r7, #20
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010c96:	b480      	push	{r7}
 8010c98:	b085      	sub	sp, #20
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010c9e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010ca2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	43db      	mvns	r3, r3
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3714      	adds	r7, #20
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010ccc:	b084      	sub	sp, #16
 8010cce:	b480      	push	{r7}
 8010cd0:	b083      	sub	sp, #12
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	f107 0014 	add.w	r0, r7, #20
 8010cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	b004      	add	sp, #16
 8010d0c:	4770      	bx	lr
	...

08010d10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b09d      	sub	sp, #116	; 0x74
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d36:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	78db      	ldrb	r3, [r3, #3]
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d81f      	bhi.n	8010d82 <USB_ActivateEndpoint+0x72>
 8010d42:	a201      	add	r2, pc, #4	; (adr r2, 8010d48 <USB_ActivateEndpoint+0x38>)
 8010d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d48:	08010d59 	.word	0x08010d59
 8010d4c:	08010d75 	.word	0x08010d75
 8010d50:	08010d8b 	.word	0x08010d8b
 8010d54:	08010d67 	.word	0x08010d67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010d58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010d60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d64:	e012      	b.n	8010d8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010d66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010d6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d72:	e00b      	b.n	8010d8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010d74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d80:	e004      	b.n	8010d8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010d82:	2301      	movs	r3, #1
 8010d84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010d88:	e000      	b.n	8010d8c <USB_ActivateEndpoint+0x7c>
      break;
 8010d8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	441a      	add	r2, r3
 8010d96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dc6:	b21a      	sxth	r2, r3
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	b21b      	sxth	r3, r3
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	b21b      	sxth	r3, r3
 8010dd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	441a      	add	r2, r3
 8010de0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	7b1b      	ldrb	r3, [r3, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f040 8149 	bne.w	8011094 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	785b      	ldrb	r3, [r3, #1]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f000 8084 	beq.w	8010f14 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	461a      	mov	r2, r3
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	61bb      	str	r3, [r7, #24]
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	00da      	lsls	r2, r3, #3
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	4413      	add	r3, r2
 8010e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e2e:	617b      	str	r3, [r7, #20]
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	88db      	ldrh	r3, [r3, #6]
 8010e34:	085b      	lsrs	r3, r3, #1
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	4413      	add	r3, r2
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	827b      	strh	r3, [r7, #18]
 8010e4e:	8a7b      	ldrh	r3, [r7, #18]
 8010e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d01b      	beq.n	8010e90 <USB_ActivateEndpoint+0x180>
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4413      	add	r3, r2
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e6e:	823b      	strh	r3, [r7, #16]
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	009b      	lsls	r3, r3, #2
 8010e78:	441a      	add	r2, r3
 8010e7a:	8a3b      	ldrh	r3, [r7, #16]
 8010e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	78db      	ldrb	r3, [r3, #3]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d020      	beq.n	8010eda <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010eae:	81bb      	strh	r3, [r7, #12]
 8010eb0:	89bb      	ldrh	r3, [r7, #12]
 8010eb2:	f083 0320 	eor.w	r3, r3, #32
 8010eb6:	81bb      	strh	r3, [r7, #12]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	441a      	add	r2, r3
 8010ec2:	89bb      	ldrh	r3, [r7, #12]
 8010ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	8013      	strh	r3, [r2, #0]
 8010ed8:	e2a6      	b.n	8011428 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	4413      	add	r3, r2
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ef0:	81fb      	strh	r3, [r7, #14]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	441a      	add	r2, r3
 8010efc:	89fb      	ldrh	r3, [r7, #14]
 8010efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	8013      	strh	r3, [r2, #0]
 8010f12:	e289      	b.n	8011428 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	633b      	str	r3, [r7, #48]	; 0x30
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	461a      	mov	r2, r3
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	4413      	add	r3, r2
 8010f26:	633b      	str	r3, [r7, #48]	; 0x30
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	00da      	lsls	r2, r3, #3
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	4413      	add	r3, r2
 8010f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	88db      	ldrh	r3, [r3, #6]
 8010f3c:	085b      	lsrs	r3, r3, #1
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	461a      	mov	r2, r3
 8010f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f58:	4413      	add	r3, r2
 8010f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	00da      	lsls	r2, r3, #3
 8010f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f64:	4413      	add	r3, r2
 8010f66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	2b3e      	cmp	r3, #62	; 0x3e
 8010f72:	d918      	bls.n	8010fa6 <USB_ActivateEndpoint+0x296>
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	095b      	lsrs	r3, r3, #5
 8010f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	691b      	ldr	r3, [r3, #16]
 8010f80:	f003 031f 	and.w	r3, r3, #31
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d102      	bne.n	8010f8e <USB_ActivateEndpoint+0x27e>
 8010f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	029b      	lsls	r3, r3, #10
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	801a      	strh	r2, [r3, #0]
 8010fa4:	e029      	b.n	8010ffa <USB_ActivateEndpoint+0x2ea>
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d112      	bne.n	8010fd4 <USB_ActivateEndpoint+0x2c4>
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	801a      	strh	r2, [r3, #0]
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	801a      	strh	r2, [r3, #0]
 8010fd2:	e012      	b.n	8010ffa <USB_ActivateEndpoint+0x2ea>
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	085b      	lsrs	r3, r3, #1
 8010fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	691b      	ldr	r3, [r3, #16]
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d002      	beq.n	8010fee <USB_ActivateEndpoint+0x2de>
 8010fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fea:	3301      	adds	r3, #1
 8010fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8010fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	029b      	lsls	r3, r3, #10
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	4413      	add	r3, r2
 8011004:	881b      	ldrh	r3, [r3, #0]
 8011006:	847b      	strh	r3, [r7, #34]	; 0x22
 8011008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d01b      	beq.n	801104a <USB_ActivateEndpoint+0x33a>
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	4413      	add	r3, r2
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	b29b      	uxth	r3, r3
 8011020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011028:	843b      	strh	r3, [r7, #32]
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	441a      	add	r2, r3
 8011034:	8c3b      	ldrh	r3, [r7, #32]
 8011036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801103a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801103e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011046:	b29b      	uxth	r3, r3
 8011048:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	4413      	add	r3, r2
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	b29b      	uxth	r3, r3
 8011058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801105c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011060:	83fb      	strh	r3, [r7, #30]
 8011062:	8bfb      	ldrh	r3, [r7, #30]
 8011064:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011068:	83fb      	strh	r3, [r7, #30]
 801106a:	8bfb      	ldrh	r3, [r7, #30]
 801106c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011070:	83fb      	strh	r3, [r7, #30]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	441a      	add	r2, r3
 801107c:	8bfb      	ldrh	r3, [r7, #30]
 801107e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801108e:	b29b      	uxth	r3, r3
 8011090:	8013      	strh	r3, [r2, #0]
 8011092:	e1c9      	b.n	8011428 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	78db      	ldrb	r3, [r3, #3]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d11e      	bne.n	80110da <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4413      	add	r3, r2
 80110a6:	881b      	ldrh	r3, [r3, #0]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	441a      	add	r2, r3
 80110c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80110c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80110d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	8013      	strh	r3, [r2, #0]
 80110d8:	e01d      	b.n	8011116 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80110ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	441a      	add	r2, r3
 80110fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8011102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801110a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011112:	b29b      	uxth	r3, r3
 8011114:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	65fb      	str	r3, [r7, #92]	; 0x5c
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011120:	b29b      	uxth	r3, r3
 8011122:	461a      	mov	r2, r3
 8011124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011126:	4413      	add	r3, r2
 8011128:	65fb      	str	r3, [r7, #92]	; 0x5c
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	00da      	lsls	r2, r3, #3
 8011130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011132:	4413      	add	r3, r2
 8011134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011138:	65bb      	str	r3, [r7, #88]	; 0x58
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	891b      	ldrh	r3, [r3, #8]
 801113e:	085b      	lsrs	r3, r3, #1
 8011140:	b29b      	uxth	r3, r3
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	b29a      	uxth	r2, r3
 8011146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011148:	801a      	strh	r2, [r3, #0]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	657b      	str	r3, [r7, #84]	; 0x54
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011154:	b29b      	uxth	r3, r3
 8011156:	461a      	mov	r2, r3
 8011158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801115a:	4413      	add	r3, r2
 801115c:	657b      	str	r3, [r7, #84]	; 0x54
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	00da      	lsls	r2, r3, #3
 8011164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011166:	4413      	add	r3, r2
 8011168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801116c:	653b      	str	r3, [r7, #80]	; 0x50
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	895b      	ldrh	r3, [r3, #10]
 8011172:	085b      	lsrs	r3, r3, #1
 8011174:	b29b      	uxth	r3, r3
 8011176:	005b      	lsls	r3, r3, #1
 8011178:	b29a      	uxth	r2, r3
 801117a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801117c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	785b      	ldrb	r3, [r3, #1]
 8011182:	2b00      	cmp	r3, #0
 8011184:	f040 8093 	bne.w	80112ae <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	4413      	add	r3, r2
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011198:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801119c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01b      	beq.n	80111dc <USB_ActivateEndpoint+0x4cc>
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4413      	add	r3, r2
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	441a      	add	r2, r3
 80111c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80111d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111d8:	b29b      	uxth	r3, r3
 80111da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	009b      	lsls	r3, r3, #2
 80111e4:	4413      	add	r3, r2
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80111ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80111ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d01b      	beq.n	801122c <USB_ActivateEndpoint+0x51c>
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4413      	add	r3, r2
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	b29b      	uxth	r3, r3
 8011202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801120a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	441a      	add	r2, r3
 8011216:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801121c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011228:	b29b      	uxth	r3, r3
 801122a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	4413      	add	r3, r2
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	b29b      	uxth	r3, r3
 801123a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801123e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011242:	873b      	strh	r3, [r7, #56]	; 0x38
 8011244:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801124a:	873b      	strh	r3, [r7, #56]	; 0x38
 801124c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801124e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011252:	873b      	strh	r3, [r7, #56]	; 0x38
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	441a      	add	r2, r3
 801125e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011270:	b29b      	uxth	r3, r3
 8011272:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	b29b      	uxth	r3, r3
 8011282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801128a:	86fb      	strh	r3, [r7, #54]	; 0x36
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	441a      	add	r2, r3
 8011296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801129c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	8013      	strh	r3, [r2, #0]
 80112ac:	e0bc      	b.n	8011428 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	4413      	add	r3, r2
 80112b8:	881b      	ldrh	r3, [r3, #0]
 80112ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80112be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80112c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d01d      	beq.n	8011306 <USB_ActivateEndpoint+0x5f6>
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	4413      	add	r3, r2
 80112d4:	881b      	ldrh	r3, [r3, #0]
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	441a      	add	r2, r3
 80112ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80112f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80112fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011302:	b29b      	uxth	r3, r3
 8011304:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	4413      	add	r3, r2
 8011310:	881b      	ldrh	r3, [r3, #0]
 8011312:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011316:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801131e:	2b00      	cmp	r3, #0
 8011320:	d01d      	beq.n	801135e <USB_ActivateEndpoint+0x64e>
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	b29b      	uxth	r3, r3
 8011330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011338:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	441a      	add	r2, r3
 8011346:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801134a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801134e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801135a:	b29b      	uxth	r3, r3
 801135c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	78db      	ldrb	r3, [r3, #3]
 8011362:	2b01      	cmp	r3, #1
 8011364:	d024      	beq.n	80113b0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	4413      	add	r3, r2
 8011370:	881b      	ldrh	r3, [r3, #0]
 8011372:	b29b      	uxth	r3, r3
 8011374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801137c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011384:	f083 0320 	eor.w	r3, r3, #32
 8011388:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	441a      	add	r2, r3
 8011396:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801139a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801139e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	8013      	strh	r3, [r2, #0]
 80113ae:	e01d      	b.n	80113ec <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	4413      	add	r3, r2
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	b29b      	uxth	r3, r3
 80113be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80113ca:	687a      	ldr	r2, [r7, #4]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	441a      	add	r2, r3
 80113d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80113d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4413      	add	r3, r2
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011402:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	441a      	add	r2, r3
 8011410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011424:	b29b      	uxth	r3, r3
 8011426:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011428:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801142c:	4618      	mov	r0, r3
 801142e:	3774      	adds	r7, #116	; 0x74
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011438:	b480      	push	{r7}
 801143a:	b08d      	sub	sp, #52	; 0x34
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	7b1b      	ldrb	r3, [r3, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	f040 808e 	bne.w	8011568 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	785b      	ldrb	r3, [r3, #1]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d044      	beq.n	80114de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	81bb      	strh	r3, [r7, #12]
 8011462:	89bb      	ldrh	r3, [r7, #12]
 8011464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011468:	2b00      	cmp	r3, #0
 801146a:	d01b      	beq.n	80114a4 <USB_DeactivateEndpoint+0x6c>
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	4413      	add	r3, r2
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	b29b      	uxth	r3, r3
 801147a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801147e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011482:	817b      	strh	r3, [r7, #10]
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	441a      	add	r2, r3
 801148e:	897b      	ldrh	r3, [r7, #10]
 8011490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801149c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	4413      	add	r3, r2
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114ba:	813b      	strh	r3, [r7, #8]
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	441a      	add	r2, r3
 80114c6:	893b      	ldrh	r3, [r7, #8]
 80114c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d8:	b29b      	uxth	r3, r3
 80114da:	8013      	strh	r3, [r2, #0]
 80114dc:	e192      	b.n	8011804 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	4413      	add	r3, r2
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	827b      	strh	r3, [r7, #18]
 80114ec:	8a7b      	ldrh	r3, [r7, #18]
 80114ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d01b      	beq.n	801152e <USB_DeactivateEndpoint+0xf6>
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	4413      	add	r3, r2
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	b29b      	uxth	r3, r3
 8011504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801150c:	823b      	strh	r3, [r7, #16]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	441a      	add	r2, r3
 8011518:	8a3b      	ldrh	r3, [r7, #16]
 801151a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801151e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801152a:	b29b      	uxth	r3, r3
 801152c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4413      	add	r3, r2
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	b29b      	uxth	r3, r3
 801153c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011544:	81fb      	strh	r3, [r7, #14]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	441a      	add	r2, r3
 8011550:	89fb      	ldrh	r3, [r7, #14]
 8011552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801155a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011562:	b29b      	uxth	r3, r3
 8011564:	8013      	strh	r3, [r2, #0]
 8011566:	e14d      	b.n	8011804 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	785b      	ldrb	r3, [r3, #1]
 801156c:	2b00      	cmp	r3, #0
 801156e:	f040 80a5 	bne.w	80116bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	4413      	add	r3, r2
 801157c:	881b      	ldrh	r3, [r3, #0]
 801157e:	843b      	strh	r3, [r7, #32]
 8011580:	8c3b      	ldrh	r3, [r7, #32]
 8011582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011586:	2b00      	cmp	r3, #0
 8011588:	d01b      	beq.n	80115c2 <USB_DeactivateEndpoint+0x18a>
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	b29b      	uxth	r3, r3
 8011598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801159c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115a0:	83fb      	strh	r3, [r7, #30]
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	441a      	add	r2, r3
 80115ac:	8bfb      	ldrh	r3, [r7, #30]
 80115ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80115ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115be:	b29b      	uxth	r3, r3
 80115c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	83bb      	strh	r3, [r7, #28]
 80115d0:	8bbb      	ldrh	r3, [r7, #28]
 80115d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d01b      	beq.n	8011612 <USB_DeactivateEndpoint+0x1da>
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4413      	add	r3, r2
 80115e4:	881b      	ldrh	r3, [r3, #0]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115f0:	837b      	strh	r3, [r7, #26]
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	441a      	add	r2, r3
 80115fc:	8b7b      	ldrh	r3, [r7, #26]
 80115fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801160a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801160e:	b29b      	uxth	r3, r3
 8011610:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	4413      	add	r3, r2
 801161c:	881b      	ldrh	r3, [r3, #0]
 801161e:	b29b      	uxth	r3, r3
 8011620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011628:	833b      	strh	r3, [r7, #24]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	441a      	add	r2, r3
 8011634:	8b3b      	ldrh	r3, [r7, #24]
 8011636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801163a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011646:	b29b      	uxth	r3, r3
 8011648:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4413      	add	r3, r2
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	b29b      	uxth	r3, r3
 8011658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801165c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011660:	82fb      	strh	r3, [r7, #22]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	441a      	add	r2, r3
 801166c:	8afb      	ldrh	r3, [r7, #22]
 801166e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167e:	b29b      	uxth	r3, r3
 8011680:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	4413      	add	r3, r2
 801168c:	881b      	ldrh	r3, [r3, #0]
 801168e:	b29b      	uxth	r3, r3
 8011690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011698:	82bb      	strh	r3, [r7, #20]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	441a      	add	r2, r3
 80116a4:	8abb      	ldrh	r3, [r7, #20]
 80116a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	8013      	strh	r3, [r2, #0]
 80116ba:	e0a3      	b.n	8011804 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	4413      	add	r3, r2
 80116c6:	881b      	ldrh	r3, [r3, #0]
 80116c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80116ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d01b      	beq.n	801170c <USB_DeactivateEndpoint+0x2d4>
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	4413      	add	r3, r2
 80116de:	881b      	ldrh	r3, [r3, #0]
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	441a      	add	r2, r3
 80116f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011708:	b29b      	uxth	r3, r3
 801170a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	4413      	add	r3, r2
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	857b      	strh	r3, [r7, #42]	; 0x2a
 801171a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801171c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011720:	2b00      	cmp	r3, #0
 8011722:	d01b      	beq.n	801175c <USB_DeactivateEndpoint+0x324>
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4413      	add	r3, r2
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	b29b      	uxth	r3, r3
 8011732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801173a:	853b      	strh	r3, [r7, #40]	; 0x28
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	441a      	add	r2, r3
 8011746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801174c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011758:	b29b      	uxth	r3, r3
 801175a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	881b      	ldrh	r3, [r3, #0]
 8011768:	b29b      	uxth	r3, r3
 801176a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801176e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011772:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	441a      	add	r2, r3
 801177e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011790:	b29b      	uxth	r3, r3
 8011792:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	4413      	add	r3, r2
 801179e:	881b      	ldrh	r3, [r3, #0]
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	441a      	add	r2, r3
 80117b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	009b      	lsls	r3, r3, #2
 80117d4:	4413      	add	r3, r2
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80117de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	441a      	add	r2, r3
 80117ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011800:	b29b      	uxth	r3, r3
 8011802:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3734      	adds	r7, #52	; 0x34
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr

08011812 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b0c2      	sub	sp, #264	; 0x108
 8011816:	af00      	add	r7, sp, #0
 8011818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801181c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011820:	6018      	str	r0, [r3, #0]
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801182a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801182c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	785b      	ldrb	r3, [r3, #1]
 8011838:	2b01      	cmp	r3, #1
 801183a:	f040 867b 	bne.w	8012534 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801183e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	699a      	ldr	r2, [r3, #24]
 801184a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801184e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	691b      	ldr	r3, [r3, #16]
 8011856:	429a      	cmp	r2, r3
 8011858:	d908      	bls.n	801186c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 801185a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801186a:	e007      	b.n	801187c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 801186c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801187c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	7b1b      	ldrb	r3, [r3, #12]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d13a      	bne.n	8011902 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801188c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	6959      	ldr	r1, [r3, #20]
 8011898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	88da      	ldrh	r2, [r3, #6]
 80118a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80118ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80118b2:	6800      	ldr	r0, [r0, #0]
 80118b4:	f001 fc1d 	bl	80130f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80118b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	613b      	str	r3, [r7, #16]
 80118c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	461a      	mov	r2, r3
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	4413      	add	r3, r2
 80118da:	613b      	str	r3, [r7, #16]
 80118dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	00da      	lsls	r2, r3, #3
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	4413      	add	r3, r2
 80118ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118f2:	60fb      	str	r3, [r7, #12]
 80118f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	801a      	strh	r2, [r3, #0]
 80118fe:	f000 bde3 	b.w	80124c8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	78db      	ldrb	r3, [r3, #3]
 801190e:	2b02      	cmp	r3, #2
 8011910:	f040 843a 	bne.w	8012188 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	6a1a      	ldr	r2, [r3, #32]
 8011920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	691b      	ldr	r3, [r3, #16]
 801192c:	429a      	cmp	r2, r3
 801192e:	f240 83b7 	bls.w	80120a0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011958:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801195c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801196a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	009b      	lsls	r3, r3, #2
 8011974:	441a      	add	r2, r3
 8011976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801197a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801197e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011982:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801198a:	b29b      	uxth	r3, r3
 801198c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801198e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	6a1a      	ldr	r2, [r3, #32]
 801199a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801199e:	1ad2      	subs	r2, r2, r3
 80119a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80119ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f000 81b3 	beq.w	8011d3a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80119d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	633b      	str	r3, [r7, #48]	; 0x30
 80119e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	785b      	ldrb	r3, [r3, #1]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d16d      	bne.n	8011acc <USB_EPStartXfer+0x2ba>
 80119f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80119fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a10:	4413      	add	r3, r2
 8011a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	00da      	lsls	r2, r3, #3
 8011a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a24:	4413      	add	r3, r2
 8011a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a30:	2b3e      	cmp	r3, #62	; 0x3e
 8011a32:	d91c      	bls.n	8011a6e <USB_EPStartXfer+0x25c>
 8011a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a38:	095b      	lsrs	r3, r3, #5
 8011a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a42:	f003 031f 	and.w	r3, r3, #31
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d104      	bne.n	8011a54 <USB_EPStartXfer+0x242>
 8011a4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011a54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	029b      	lsls	r3, r3, #10
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	801a      	strh	r2, [r3, #0]
 8011a6c:	e053      	b.n	8011b16 <USB_EPStartXfer+0x304>
 8011a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d112      	bne.n	8011a9c <USB_EPStartXfer+0x28a>
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	801a      	strh	r2, [r3, #0]
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	801a      	strh	r2, [r3, #0]
 8011a9a:	e03c      	b.n	8011b16 <USB_EPStartXfer+0x304>
 8011a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aa0:	085b      	lsrs	r3, r3, #1
 8011aa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aaa:	f003 0301 	and.w	r3, r3, #1
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d004      	beq.n	8011abc <USB_EPStartXfer+0x2aa>
 8011ab2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011abc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	029b      	lsls	r3, r3, #10
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	801a      	strh	r2, [r3, #0]
 8011aca:	e024      	b.n	8011b16 <USB_EPStartXfer+0x304>
 8011acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	785b      	ldrb	r3, [r3, #1]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d11c      	bne.n	8011b16 <USB_EPStartXfer+0x304>
 8011adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	461a      	mov	r2, r3
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	4413      	add	r3, r2
 8011af2:	633b      	str	r3, [r7, #48]	; 0x30
 8011af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	00da      	lsls	r2, r3, #3
 8011b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b04:	4413      	add	r3, r2
 8011b06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	895b      	ldrh	r3, [r3, #10]
 8011b22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	6959      	ldr	r1, [r3, #20]
 8011b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011b3c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b40:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b44:	6800      	ldr	r0, [r0, #0]
 8011b46:	f001 fad4 	bl	80130f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8011b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	695a      	ldr	r2, [r3, #20]
 8011b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b5a:	441a      	add	r2, r3
 8011b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	6a1a      	ldr	r2, [r3, #32]
 8011b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	691b      	ldr	r3, [r3, #16]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d90f      	bls.n	8011ba4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	6a1a      	ldr	r2, [r3, #32]
 8011b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b94:	1ad2      	subs	r2, r2, r3
 8011b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	621a      	str	r2, [r3, #32]
 8011ba2:	e00e      	b.n	8011bc2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	6a1b      	ldr	r3, [r3, #32]
 8011bb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	785b      	ldrb	r3, [r3, #1]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d16d      	bne.n	8011cae <USB_EPStartXfer+0x49c>
 8011bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	61bb      	str	r3, [r7, #24]
 8011bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	461a      	mov	r2, r3
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	61bb      	str	r3, [r7, #24]
 8011bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	00da      	lsls	r2, r3, #3
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	4413      	add	r3, r2
 8011c08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011c0c:	617b      	str	r3, [r7, #20]
 8011c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c12:	2b3e      	cmp	r3, #62	; 0x3e
 8011c14:	d91c      	bls.n	8011c50 <USB_EPStartXfer+0x43e>
 8011c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c1a:	095b      	lsrs	r3, r3, #5
 8011c1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c24:	f003 031f 	and.w	r3, r3, #31
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d104      	bne.n	8011c36 <USB_EPStartXfer+0x424>
 8011c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c30:	3b01      	subs	r3, #1
 8011c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	029b      	lsls	r3, r3, #10
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	801a      	strh	r2, [r3, #0]
 8011c4e:	e059      	b.n	8011d04 <USB_EPStartXfer+0x4f2>
 8011c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d112      	bne.n	8011c7e <USB_EPStartXfer+0x46c>
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	881b      	ldrh	r3, [r3, #0]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	801a      	strh	r2, [r3, #0]
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	801a      	strh	r2, [r3, #0]
 8011c7c:	e042      	b.n	8011d04 <USB_EPStartXfer+0x4f2>
 8011c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c82:	085b      	lsrs	r3, r3, #1
 8011c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c8c:	f003 0301 	and.w	r3, r3, #1
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d004      	beq.n	8011c9e <USB_EPStartXfer+0x48c>
 8011c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c98:	3301      	adds	r3, #1
 8011c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	029b      	lsls	r3, r3, #10
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	801a      	strh	r2, [r3, #0]
 8011cac:	e02a      	b.n	8011d04 <USB_EPStartXfer+0x4f2>
 8011cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	785b      	ldrb	r3, [r3, #1]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d122      	bne.n	8011d04 <USB_EPStartXfer+0x4f2>
 8011cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	623b      	str	r3, [r7, #32]
 8011cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	461a      	mov	r2, r3
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	4413      	add	r3, r2
 8011ce0:	623b      	str	r3, [r7, #32]
 8011ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	00da      	lsls	r2, r3, #3
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011cf8:	61fb      	str	r3, [r7, #28]
 8011cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	891b      	ldrh	r3, [r3, #8]
 8011d10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	6959      	ldr	r1, [r3, #20]
 8011d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011d2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011d2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011d32:	6800      	ldr	r0, [r0, #0]
 8011d34:	f001 f9dd 	bl	80130f2 <USB_WritePMA>
 8011d38:	e3c6      	b.n	80124c8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	785b      	ldrb	r3, [r3, #1]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d16d      	bne.n	8011e26 <USB_EPStartXfer+0x614>
 8011d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	461a      	mov	r2, r3
 8011d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d6a:	4413      	add	r3, r2
 8011d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	00da      	lsls	r2, r3, #3
 8011d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d7e:	4413      	add	r3, r2
 8011d80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011d84:	647b      	str	r3, [r7, #68]	; 0x44
 8011d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8011d8c:	d91c      	bls.n	8011dc8 <USB_EPStartXfer+0x5b6>
 8011d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d92:	095b      	lsrs	r3, r3, #5
 8011d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d9c:	f003 031f 	and.w	r3, r3, #31
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d104      	bne.n	8011dae <USB_EPStartXfer+0x59c>
 8011da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011da8:	3b01      	subs	r3, #1
 8011daa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	029b      	lsls	r3, r3, #10
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dc4:	801a      	strh	r2, [r3, #0]
 8011dc6:	e059      	b.n	8011e7c <USB_EPStartXfer+0x66a>
 8011dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d112      	bne.n	8011df6 <USB_EPStartXfer+0x5e4>
 8011dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dde:	801a      	strh	r2, [r3, #0]
 8011de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011df2:	801a      	strh	r2, [r3, #0]
 8011df4:	e042      	b.n	8011e7c <USB_EPStartXfer+0x66a>
 8011df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dfa:	085b      	lsrs	r3, r3, #1
 8011dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e04:	f003 0301 	and.w	r3, r3, #1
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d004      	beq.n	8011e16 <USB_EPStartXfer+0x604>
 8011e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e10:	3301      	adds	r3, #1
 8011e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	029b      	lsls	r3, r3, #10
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e22:	801a      	strh	r2, [r3, #0]
 8011e24:	e02a      	b.n	8011e7c <USB_EPStartXfer+0x66a>
 8011e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	785b      	ldrb	r3, [r3, #1]
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d122      	bne.n	8011e7c <USB_EPStartXfer+0x66a>
 8011e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	653b      	str	r3, [r7, #80]	; 0x50
 8011e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	461a      	mov	r2, r3
 8011e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e56:	4413      	add	r3, r2
 8011e58:	653b      	str	r3, [r7, #80]	; 0x50
 8011e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	00da      	lsls	r2, r3, #3
 8011e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	891b      	ldrh	r3, [r3, #8]
 8011e88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	6959      	ldr	r1, [r3, #20]
 8011e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ea2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011ea6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	f001 f921 	bl	80130f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8011eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	695a      	ldr	r2, [r3, #20]
 8011ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ec0:	441a      	add	r2, r3
 8011ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	6a1a      	ldr	r2, [r3, #32]
 8011eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d90f      	bls.n	8011f0a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8011eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6a1a      	ldr	r2, [r3, #32]
 8011ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011efa:	1ad2      	subs	r2, r2, r3
 8011efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	621a      	str	r2, [r3, #32]
 8011f08:	e00e      	b.n	8011f28 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8011f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	6a1b      	ldr	r3, [r3, #32]
 8011f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2200      	movs	r2, #0
 8011f26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	643b      	str	r3, [r7, #64]	; 0x40
 8011f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	785b      	ldrb	r3, [r3, #1]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d16d      	bne.n	8012020 <USB_EPStartXfer+0x80e>
 8011f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	461a      	mov	r2, r3
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	4413      	add	r3, r2
 8011f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	00da      	lsls	r2, r3, #3
 8011f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f78:	4413      	add	r3, r2
 8011f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f84:	2b3e      	cmp	r3, #62	; 0x3e
 8011f86:	d91c      	bls.n	8011fc2 <USB_EPStartXfer+0x7b0>
 8011f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f8c:	095b      	lsrs	r3, r3, #5
 8011f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f96:	f003 031f 	and.w	r3, r3, #31
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d104      	bne.n	8011fa8 <USB_EPStartXfer+0x796>
 8011f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	029b      	lsls	r3, r3, #10
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbe:	801a      	strh	r2, [r3, #0]
 8011fc0:	e053      	b.n	801206a <USB_EPStartXfer+0x858>
 8011fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d112      	bne.n	8011ff0 <USB_EPStartXfer+0x7de>
 8011fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fcc:	881b      	ldrh	r3, [r3, #0]
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd8:	801a      	strh	r2, [r3, #0]
 8011fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fec:	801a      	strh	r2, [r3, #0]
 8011fee:	e03c      	b.n	801206a <USB_EPStartXfer+0x858>
 8011ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ff4:	085b      	lsrs	r3, r3, #1
 8011ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ffe:	f003 0301 	and.w	r3, r3, #1
 8012002:	2b00      	cmp	r3, #0
 8012004:	d004      	beq.n	8012010 <USB_EPStartXfer+0x7fe>
 8012006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801200a:	3301      	adds	r3, #1
 801200c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012014:	b29b      	uxth	r3, r3
 8012016:	029b      	lsls	r3, r3, #10
 8012018:	b29a      	uxth	r2, r3
 801201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201c:	801a      	strh	r2, [r3, #0]
 801201e:	e024      	b.n	801206a <USB_EPStartXfer+0x858>
 8012020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	785b      	ldrb	r3, [r3, #1]
 801202c:	2b01      	cmp	r3, #1
 801202e:	d11c      	bne.n	801206a <USB_EPStartXfer+0x858>
 8012030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801203e:	b29b      	uxth	r3, r3
 8012040:	461a      	mov	r2, r3
 8012042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012044:	4413      	add	r3, r2
 8012046:	643b      	str	r3, [r7, #64]	; 0x40
 8012048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	00da      	lsls	r2, r3, #3
 8012056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012058:	4413      	add	r3, r2
 801205a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012064:	b29a      	uxth	r2, r3
 8012066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801206a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801206e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	895b      	ldrh	r3, [r3, #10]
 8012076:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801207a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801207e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	6959      	ldr	r1, [r3, #20]
 8012086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801208a:	b29b      	uxth	r3, r3
 801208c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012090:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012094:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012098:	6800      	ldr	r0, [r0, #0]
 801209a:	f001 f82a 	bl	80130f2 <USB_WritePMA>
 801209e:	e213      	b.n	80124c8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80120a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6a1b      	ldr	r3, [r3, #32]
 80120ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80120b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	881b      	ldrh	r3, [r3, #0]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80120d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80120da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	441a      	add	r2, r3
 80120f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80120f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012108:	b29b      	uxth	r3, r3
 801210a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801210c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801211c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012126:	b29b      	uxth	r3, r3
 8012128:	461a      	mov	r2, r3
 801212a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801212c:	4413      	add	r3, r2
 801212e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	00da      	lsls	r2, r3, #3
 801213e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012140:	4413      	add	r3, r2
 8012142:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012146:	65bb      	str	r3, [r7, #88]	; 0x58
 8012148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801214c:	b29a      	uxth	r2, r3
 801214e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012150:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	891b      	ldrh	r3, [r3, #8]
 801215e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	6959      	ldr	r1, [r3, #20]
 801216e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012172:	b29b      	uxth	r3, r3
 8012174:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012178:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801217c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012180:	6800      	ldr	r0, [r0, #0]
 8012182:	f000 ffb6 	bl	80130f2 <USB_WritePMA>
 8012186:	e19f      	b.n	80124c8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801218c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	6a1a      	ldr	r2, [r3, #32]
 8012194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012198:	1ad2      	subs	r2, r2, r3
 801219a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801219e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80121a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	4413      	add	r3, r2
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	f000 80bc 	beq.w	8012346 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80121ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	673b      	str	r3, [r7, #112]	; 0x70
 80121da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	785b      	ldrb	r3, [r3, #1]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d16d      	bne.n	80122c6 <USB_EPStartXfer+0xab4>
 80121ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80121f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012204:	b29b      	uxth	r3, r3
 8012206:	461a      	mov	r2, r3
 8012208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801220a:	4413      	add	r3, r2
 801220c:	66bb      	str	r3, [r7, #104]	; 0x68
 801220e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	00da      	lsls	r2, r3, #3
 801221c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801221e:	4413      	add	r3, r2
 8012220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012224:	667b      	str	r3, [r7, #100]	; 0x64
 8012226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801222a:	2b3e      	cmp	r3, #62	; 0x3e
 801222c:	d91c      	bls.n	8012268 <USB_EPStartXfer+0xa56>
 801222e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012232:	095b      	lsrs	r3, r3, #5
 8012234:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801223c:	f003 031f 	and.w	r3, r3, #31
 8012240:	2b00      	cmp	r3, #0
 8012242:	d104      	bne.n	801224e <USB_EPStartXfer+0xa3c>
 8012244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012248:	3b01      	subs	r3, #1
 801224a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801224e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012252:	b29b      	uxth	r3, r3
 8012254:	029b      	lsls	r3, r3, #10
 8012256:	b29b      	uxth	r3, r3
 8012258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801225c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012260:	b29a      	uxth	r2, r3
 8012262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012264:	801a      	strh	r2, [r3, #0]
 8012266:	e053      	b.n	8012310 <USB_EPStartXfer+0xafe>
 8012268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801226c:	2b00      	cmp	r3, #0
 801226e:	d112      	bne.n	8012296 <USB_EPStartXfer+0xa84>
 8012270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012272:	881b      	ldrh	r3, [r3, #0]
 8012274:	b29b      	uxth	r3, r3
 8012276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801227a:	b29a      	uxth	r2, r3
 801227c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801227e:	801a      	strh	r2, [r3, #0]
 8012280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	b29b      	uxth	r3, r3
 8012286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801228a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801228e:	b29a      	uxth	r2, r3
 8012290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012292:	801a      	strh	r2, [r3, #0]
 8012294:	e03c      	b.n	8012310 <USB_EPStartXfer+0xafe>
 8012296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801229a:	085b      	lsrs	r3, r3, #1
 801229c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80122a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d004      	beq.n	80122b6 <USB_EPStartXfer+0xaa4>
 80122ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80122b0:	3301      	adds	r3, #1
 80122b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80122b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	029b      	lsls	r3, r3, #10
 80122be:	b29a      	uxth	r2, r3
 80122c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122c2:	801a      	strh	r2, [r3, #0]
 80122c4:	e024      	b.n	8012310 <USB_EPStartXfer+0xafe>
 80122c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	785b      	ldrb	r3, [r3, #1]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d11c      	bne.n	8012310 <USB_EPStartXfer+0xafe>
 80122d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	461a      	mov	r2, r3
 80122e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122ea:	4413      	add	r3, r2
 80122ec:	673b      	str	r3, [r7, #112]	; 0x70
 80122ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	00da      	lsls	r2, r3, #3
 80122fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122fe:	4413      	add	r3, r2
 8012300:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801230a:	b29a      	uxth	r2, r3
 801230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801230e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	895b      	ldrh	r3, [r3, #10]
 801231c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	6959      	ldr	r1, [r3, #20]
 801232c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012330:	b29b      	uxth	r3, r3
 8012332:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012336:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801233a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801233e:	6800      	ldr	r0, [r0, #0]
 8012340:	f000 fed7 	bl	80130f2 <USB_WritePMA>
 8012344:	e0c0      	b.n	80124c8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	785b      	ldrb	r3, [r3, #1]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d16d      	bne.n	8012432 <USB_EPStartXfer+0xc20>
 8012356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801235a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012370:	b29b      	uxth	r3, r3
 8012372:	461a      	mov	r2, r3
 8012374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012376:	4413      	add	r3, r2
 8012378:	67fb      	str	r3, [r7, #124]	; 0x7c
 801237a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801237e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	00da      	lsls	r2, r3, #3
 8012388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801238a:	4413      	add	r3, r2
 801238c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012390:	67bb      	str	r3, [r7, #120]	; 0x78
 8012392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012396:	2b3e      	cmp	r3, #62	; 0x3e
 8012398:	d91c      	bls.n	80123d4 <USB_EPStartXfer+0xbc2>
 801239a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801239e:	095b      	lsrs	r3, r3, #5
 80123a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80123a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123a8:	f003 031f 	and.w	r3, r3, #31
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d104      	bne.n	80123ba <USB_EPStartXfer+0xba8>
 80123b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80123b4:	3b01      	subs	r3, #1
 80123b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80123ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80123be:	b29b      	uxth	r3, r3
 80123c0:	029b      	lsls	r3, r3, #10
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123d0:	801a      	strh	r2, [r3, #0]
 80123d2:	e05f      	b.n	8012494 <USB_EPStartXfer+0xc82>
 80123d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d112      	bne.n	8012402 <USB_EPStartXfer+0xbf0>
 80123dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123ea:	801a      	strh	r2, [r3, #0]
 80123ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123fe:	801a      	strh	r2, [r3, #0]
 8012400:	e048      	b.n	8012494 <USB_EPStartXfer+0xc82>
 8012402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012406:	085b      	lsrs	r3, r3, #1
 8012408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801240c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012410:	f003 0301 	and.w	r3, r3, #1
 8012414:	2b00      	cmp	r3, #0
 8012416:	d004      	beq.n	8012422 <USB_EPStartXfer+0xc10>
 8012418:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801241c:	3301      	adds	r3, #1
 801241e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012426:	b29b      	uxth	r3, r3
 8012428:	029b      	lsls	r3, r3, #10
 801242a:	b29a      	uxth	r2, r3
 801242c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801242e:	801a      	strh	r2, [r3, #0]
 8012430:	e030      	b.n	8012494 <USB_EPStartXfer+0xc82>
 8012432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	785b      	ldrb	r3, [r3, #1]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d128      	bne.n	8012494 <USB_EPStartXfer+0xc82>
 8012442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801245e:	b29b      	uxth	r3, r3
 8012460:	461a      	mov	r2, r3
 8012462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012466:	4413      	add	r3, r2
 8012468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801246c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	00da      	lsls	r2, r3, #3
 801247a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801247e:	4413      	add	r3, r2
 8012480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801248c:	b29a      	uxth	r2, r3
 801248e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012492:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	891b      	ldrh	r3, [r3, #8]
 80124a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	6959      	ldr	r1, [r3, #20]
 80124b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80124ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80124be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80124c2:	6800      	ldr	r0, [r0, #0]
 80124c4:	f000 fe15 	bl	80130f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80124c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	009b      	lsls	r3, r3, #2
 80124e0:	4413      	add	r3, r2
 80124e2:	881b      	ldrh	r3, [r3, #0]
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80124ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124ee:	817b      	strh	r3, [r7, #10]
 80124f0:	897b      	ldrh	r3, [r7, #10]
 80124f2:	f083 0310 	eor.w	r3, r3, #16
 80124f6:	817b      	strh	r3, [r7, #10]
 80124f8:	897b      	ldrh	r3, [r7, #10]
 80124fa:	f083 0320 	eor.w	r3, r3, #32
 80124fe:	817b      	strh	r3, [r7, #10]
 8012500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801250e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	441a      	add	r2, r3
 801251a:	897b      	ldrh	r3, [r7, #10]
 801251c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801252c:	b29b      	uxth	r3, r3
 801252e:	8013      	strh	r3, [r2, #0]
 8012530:	f000 bc9f 	b.w	8012e72 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	7b1b      	ldrb	r3, [r3, #12]
 8012540:	2b00      	cmp	r3, #0
 8012542:	f040 80ae 	bne.w	80126a2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801254a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	699a      	ldr	r2, [r3, #24]
 8012552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	691b      	ldr	r3, [r3, #16]
 801255e:	429a      	cmp	r2, r3
 8012560:	d917      	bls.n	8012592 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8012562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8012572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	699a      	ldr	r2, [r3, #24]
 801257e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012582:	1ad2      	subs	r2, r2, r3
 8012584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	619a      	str	r2, [r3, #24]
 8012590:	e00e      	b.n	80125b0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8012592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	699b      	ldr	r3, [r3, #24]
 801259e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80125a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2200      	movs	r2, #0
 80125ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80125b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	461a      	mov	r2, r3
 80125d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125d4:	4413      	add	r3, r2
 80125d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	00da      	lsls	r2, r3, #3
 80125e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125ec:	4413      	add	r3, r2
 80125ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80125f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80125f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125fa:	2b3e      	cmp	r3, #62	; 0x3e
 80125fc:	d91d      	bls.n	801263a <USB_EPStartXfer+0xe28>
 80125fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012602:	095b      	lsrs	r3, r3, #5
 8012604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801260c:	f003 031f 	and.w	r3, r3, #31
 8012610:	2b00      	cmp	r3, #0
 8012612:	d104      	bne.n	801261e <USB_EPStartXfer+0xe0c>
 8012614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012618:	3b01      	subs	r3, #1
 801261a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801261e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012622:	b29b      	uxth	r3, r3
 8012624:	029b      	lsls	r3, r3, #10
 8012626:	b29b      	uxth	r3, r3
 8012628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012630:	b29a      	uxth	r2, r3
 8012632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012636:	801a      	strh	r2, [r3, #0]
 8012638:	e3e1      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
 801263a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801263e:	2b00      	cmp	r3, #0
 8012640:	d116      	bne.n	8012670 <USB_EPStartXfer+0xe5e>
 8012642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	b29b      	uxth	r3, r3
 801264a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801264e:	b29a      	uxth	r2, r3
 8012650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012654:	801a      	strh	r2, [r3, #0]
 8012656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801265a:	881b      	ldrh	r3, [r3, #0]
 801265c:	b29b      	uxth	r3, r3
 801265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012666:	b29a      	uxth	r2, r3
 8012668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801266c:	801a      	strh	r2, [r3, #0]
 801266e:	e3c6      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
 8012670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012674:	085b      	lsrs	r3, r3, #1
 8012676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801267a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801267e:	f003 0301 	and.w	r3, r3, #1
 8012682:	2b00      	cmp	r3, #0
 8012684:	d004      	beq.n	8012690 <USB_EPStartXfer+0xe7e>
 8012686:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801268a:	3301      	adds	r3, #1
 801268c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012690:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012694:	b29b      	uxth	r3, r3
 8012696:	029b      	lsls	r3, r3, #10
 8012698:	b29a      	uxth	r2, r3
 801269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801269e:	801a      	strh	r2, [r3, #0]
 80126a0:	e3ad      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80126a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	78db      	ldrb	r3, [r3, #3]
 80126ae:	2b02      	cmp	r3, #2
 80126b0:	f040 8200 	bne.w	8012ab4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80126b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	785b      	ldrb	r3, [r3, #1]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	f040 8091 	bne.w	80127e8 <USB_EPStartXfer+0xfd6>
 80126c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80126d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	461a      	mov	r2, r3
 80126e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ea:	4413      	add	r3, r2
 80126ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80126f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	00da      	lsls	r2, r3, #3
 80126fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012702:	4413      	add	r3, r2
 8012704:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801270c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	691b      	ldr	r3, [r3, #16]
 8012718:	2b3e      	cmp	r3, #62	; 0x3e
 801271a:	d925      	bls.n	8012768 <USB_EPStartXfer+0xf56>
 801271c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	095b      	lsrs	r3, r3, #5
 801272a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801272e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	f003 031f 	and.w	r3, r3, #31
 801273e:	2b00      	cmp	r3, #0
 8012740:	d104      	bne.n	801274c <USB_EPStartXfer+0xf3a>
 8012742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012746:	3b01      	subs	r3, #1
 8012748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801274c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012750:	b29b      	uxth	r3, r3
 8012752:	029b      	lsls	r3, r3, #10
 8012754:	b29b      	uxth	r3, r3
 8012756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801275a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801275e:	b29a      	uxth	r2, r3
 8012760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012764:	801a      	strh	r2, [r3, #0]
 8012766:	e074      	b.n	8012852 <USB_EPStartXfer+0x1040>
 8012768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801276c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d116      	bne.n	80127a6 <USB_EPStartXfer+0xf94>
 8012778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	b29b      	uxth	r3, r3
 8012780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012784:	b29a      	uxth	r2, r3
 8012786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801278a:	801a      	strh	r2, [r3, #0]
 801278c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012790:	881b      	ldrh	r3, [r3, #0]
 8012792:	b29b      	uxth	r3, r3
 8012794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801279c:	b29a      	uxth	r2, r3
 801279e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80127a2:	801a      	strh	r2, [r3, #0]
 80127a4:	e055      	b.n	8012852 <USB_EPStartXfer+0x1040>
 80127a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	691b      	ldr	r3, [r3, #16]
 80127b2:	085b      	lsrs	r3, r3, #1
 80127b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80127b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	691b      	ldr	r3, [r3, #16]
 80127c4:	f003 0301 	and.w	r3, r3, #1
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d004      	beq.n	80127d6 <USB_EPStartXfer+0xfc4>
 80127cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127d0:	3301      	adds	r3, #1
 80127d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80127d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127da:	b29b      	uxth	r3, r3
 80127dc:	029b      	lsls	r3, r3, #10
 80127de:	b29a      	uxth	r2, r3
 80127e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80127e4:	801a      	strh	r2, [r3, #0]
 80127e6:	e034      	b.n	8012852 <USB_EPStartXfer+0x1040>
 80127e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	785b      	ldrb	r3, [r3, #1]
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d12c      	bne.n	8012852 <USB_EPStartXfer+0x1040>
 80127f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801280a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012814:	b29b      	uxth	r3, r3
 8012816:	461a      	mov	r2, r3
 8012818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801281c:	4413      	add	r3, r2
 801281e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	00da      	lsls	r2, r3, #3
 8012830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012834:	4413      	add	r3, r2
 8012836:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801283a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801283e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	691b      	ldr	r3, [r3, #16]
 801284a:	b29a      	uxth	r2, r3
 801284c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012850:	801a      	strh	r2, [r3, #0]
 8012852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	785b      	ldrb	r3, [r3, #1]
 801286c:	2b00      	cmp	r3, #0
 801286e:	f040 8091 	bne.w	8012994 <USB_EPStartXfer+0x1182>
 8012872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801288e:	b29b      	uxth	r3, r3
 8012890:	461a      	mov	r2, r3
 8012892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012896:	4413      	add	r3, r2
 8012898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801289c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	00da      	lsls	r2, r3, #3
 80128aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128ae:	4413      	add	r3, r2
 80128b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80128b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80128b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	2b3e      	cmp	r3, #62	; 0x3e
 80128c6:	d925      	bls.n	8012914 <USB_EPStartXfer+0x1102>
 80128c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	691b      	ldr	r3, [r3, #16]
 80128d4:	095b      	lsrs	r3, r3, #5
 80128d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80128da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	691b      	ldr	r3, [r3, #16]
 80128e6:	f003 031f 	and.w	r3, r3, #31
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d104      	bne.n	80128f8 <USB_EPStartXfer+0x10e6>
 80128ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128f2:	3b01      	subs	r3, #1
 80128f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80128f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	029b      	lsls	r3, r3, #10
 8012900:	b29b      	uxth	r3, r3
 8012902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801290a:	b29a      	uxth	r2, r3
 801290c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012910:	801a      	strh	r2, [r3, #0]
 8012912:	e06d      	b.n	80129f0 <USB_EPStartXfer+0x11de>
 8012914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	691b      	ldr	r3, [r3, #16]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d116      	bne.n	8012952 <USB_EPStartXfer+0x1140>
 8012924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	b29b      	uxth	r3, r3
 801292c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012930:	b29a      	uxth	r2, r3
 8012932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012936:	801a      	strh	r2, [r3, #0]
 8012938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	b29b      	uxth	r3, r3
 8012940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012948:	b29a      	uxth	r2, r3
 801294a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801294e:	801a      	strh	r2, [r3, #0]
 8012950:	e04e      	b.n	80129f0 <USB_EPStartXfer+0x11de>
 8012952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	691b      	ldr	r3, [r3, #16]
 801295e:	085b      	lsrs	r3, r3, #1
 8012960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	2b00      	cmp	r3, #0
 8012976:	d004      	beq.n	8012982 <USB_EPStartXfer+0x1170>
 8012978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801297c:	3301      	adds	r3, #1
 801297e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012986:	b29b      	uxth	r3, r3
 8012988:	029b      	lsls	r3, r3, #10
 801298a:	b29a      	uxth	r2, r3
 801298c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012990:	801a      	strh	r2, [r3, #0]
 8012992:	e02d      	b.n	80129f0 <USB_EPStartXfer+0x11de>
 8012994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	785b      	ldrb	r3, [r3, #1]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d125      	bne.n	80129f0 <USB_EPStartXfer+0x11de>
 80129a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	461a      	mov	r2, r3
 80129b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80129ba:	4413      	add	r3, r2
 80129bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80129c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	00da      	lsls	r2, r3, #3
 80129ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80129d2:	4413      	add	r3, r2
 80129d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80129d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80129dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	691b      	ldr	r3, [r3, #16]
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80129f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f000 81fe 	beq.w	8012dfe <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d005      	beq.n	8012a3a <USB_EPStartXfer+0x1228>
 8012a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d10d      	bne.n	8012a56 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012a3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 81db 	bne.w	8012dfe <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012a48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f040 81d4 	bne.w	8012dfe <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a7c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	441a      	add	r2, r3
 8012a9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	8013      	strh	r3, [r2, #0]
 8012ab2:	e1a4      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	78db      	ldrb	r3, [r3, #3]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	f040 819a 	bne.w	8012dfa <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	699a      	ldr	r2, [r3, #24]
 8012ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d917      	bls.n	8012b12 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	691b      	ldr	r3, [r3, #16]
 8012aee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	699a      	ldr	r2, [r3, #24]
 8012afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b02:	1ad2      	subs	r2, r2, r3
 8012b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	619a      	str	r2, [r3, #24]
 8012b10:	e00e      	b.n	8012b30 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8012b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	699b      	ldr	r3, [r3, #24]
 8012b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	785b      	ldrb	r3, [r3, #1]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d178      	bne.n	8012c32 <USB_EPStartXfer+0x1420>
 8012b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	461a      	mov	r2, r3
 8012b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012b64:	4413      	add	r3, r2
 8012b66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	00da      	lsls	r2, r3, #3
 8012b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012b7c:	4413      	add	r3, r2
 8012b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8012b8c:	d91d      	bls.n	8012bca <USB_EPStartXfer+0x13b8>
 8012b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b92:	095b      	lsrs	r3, r3, #5
 8012b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b9c:	f003 031f 	and.w	r3, r3, #31
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d104      	bne.n	8012bae <USB_EPStartXfer+0x139c>
 8012ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ba8:	3b01      	subs	r3, #1
 8012baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	029b      	lsls	r3, r3, #10
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012bc6:	801a      	strh	r2, [r3, #0]
 8012bc8:	e064      	b.n	8012c94 <USB_EPStartXfer+0x1482>
 8012bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d116      	bne.n	8012c00 <USB_EPStartXfer+0x13ee>
 8012bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012be4:	801a      	strh	r2, [r3, #0]
 8012be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012bea:	881b      	ldrh	r3, [r3, #0]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012bfc:	801a      	strh	r2, [r3, #0]
 8012bfe:	e049      	b.n	8012c94 <USB_EPStartXfer+0x1482>
 8012c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c04:	085b      	lsrs	r3, r3, #1
 8012c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d004      	beq.n	8012c20 <USB_EPStartXfer+0x140e>
 8012c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	029b      	lsls	r3, r3, #10
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012c2e:	801a      	strh	r2, [r3, #0]
 8012c30:	e030      	b.n	8012c94 <USB_EPStartXfer+0x1482>
 8012c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d128      	bne.n	8012c94 <USB_EPStartXfer+0x1482>
 8012c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	461a      	mov	r2, r3
 8012c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012c66:	4413      	add	r3, r2
 8012c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	00da      	lsls	r2, r3, #3
 8012c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012c7e:	4413      	add	r3, r2
 8012c80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012c92:	801a      	strh	r2, [r3, #0]
 8012c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	785b      	ldrb	r3, [r3, #1]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d178      	bne.n	8012da4 <USB_EPStartXfer+0x1592>
 8012cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012cd6:	4413      	add	r3, r2
 8012cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	00da      	lsls	r2, r3, #3
 8012cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012cee:	4413      	add	r3, r2
 8012cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8012cfe:	d91d      	bls.n	8012d3c <USB_EPStartXfer+0x152a>
 8012d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d04:	095b      	lsrs	r3, r3, #5
 8012d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d0e:	f003 031f 	and.w	r3, r3, #31
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d104      	bne.n	8012d20 <USB_EPStartXfer+0x150e>
 8012d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	029b      	lsls	r3, r3, #10
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d38:	801a      	strh	r2, [r3, #0]
 8012d3a:	e060      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
 8012d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d116      	bne.n	8012d72 <USB_EPStartXfer+0x1560>
 8012d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d56:	801a      	strh	r2, [r3, #0]
 8012d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d6e:	801a      	strh	r2, [r3, #0]
 8012d70:	e045      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
 8012d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d76:	085b      	lsrs	r3, r3, #1
 8012d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <USB_EPStartXfer+0x1580>
 8012d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	029b      	lsls	r3, r3, #10
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012da0:	801a      	strh	r2, [r3, #0]
 8012da2:	e02c      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
 8012da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	785b      	ldrb	r3, [r3, #1]
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d124      	bne.n	8012dfe <USB_EPStartXfer+0x15ec>
 8012db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012dca:	4413      	add	r3, r2
 8012dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	00da      	lsls	r2, r3, #3
 8012dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012de2:	4413      	add	r3, r2
 8012de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012df6:	801a      	strh	r2, [r3, #0]
 8012df8:	e001      	b.n	8012dfe <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e03a      	b.n	8012e74 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4413      	add	r3, r2
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012e28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012e2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012e30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012e34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012e3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	441a      	add	r2, r3
 8012e5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012e7e:	b480      	push	{r7}
 8012e80:	b085      	sub	sp, #20
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	785b      	ldrb	r3, [r3, #1]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d020      	beq.n	8012ed2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ea6:	81bb      	strh	r3, [r7, #12]
 8012ea8:	89bb      	ldrh	r3, [r7, #12]
 8012eaa:	f083 0310 	eor.w	r3, r3, #16
 8012eae:	81bb      	strh	r3, [r7, #12]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	441a      	add	r2, r3
 8012eba:	89bb      	ldrh	r3, [r7, #12]
 8012ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	8013      	strh	r3, [r2, #0]
 8012ed0:	e01f      	b.n	8012f12 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	4413      	add	r3, r2
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ee8:	81fb      	strh	r3, [r7, #14]
 8012eea:	89fb      	ldrh	r3, [r7, #14]
 8012eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012ef0:	81fb      	strh	r3, [r7, #14]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	441a      	add	r2, r3
 8012efc:	89fb      	ldrh	r3, [r7, #14]
 8012efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b087      	sub	sp, #28
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	7b1b      	ldrb	r3, [r3, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f040 809d 	bne.w	801306e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	785b      	ldrb	r3, [r3, #1]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d04c      	beq.n	8012fd6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4413      	add	r3, r2
 8012f46:	881b      	ldrh	r3, [r3, #0]
 8012f48:	823b      	strh	r3, [r7, #16]
 8012f4a:	8a3b      	ldrh	r3, [r7, #16]
 8012f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d01b      	beq.n	8012f8c <USB_EPClearStall+0x6c>
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	4413      	add	r3, r2
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f6a:	81fb      	strh	r3, [r7, #14]
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	441a      	add	r2, r3
 8012f76:	89fb      	ldrh	r3, [r7, #14]
 8012f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	78db      	ldrb	r3, [r3, #3]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d06c      	beq.n	801306e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	4413      	add	r3, r2
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012faa:	81bb      	strh	r3, [r7, #12]
 8012fac:	89bb      	ldrh	r3, [r7, #12]
 8012fae:	f083 0320 	eor.w	r3, r3, #32
 8012fb2:	81bb      	strh	r3, [r7, #12]
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	441a      	add	r2, r3
 8012fbe:	89bb      	ldrh	r3, [r7, #12]
 8012fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	8013      	strh	r3, [r2, #0]
 8012fd4:	e04b      	b.n	801306e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4413      	add	r3, r2
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	82fb      	strh	r3, [r7, #22]
 8012fe4:	8afb      	ldrh	r3, [r7, #22]
 8012fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d01b      	beq.n	8013026 <USB_EPClearStall+0x106>
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	4413      	add	r3, r2
 8012ff8:	881b      	ldrh	r3, [r3, #0]
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013004:	82bb      	strh	r3, [r7, #20]
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	441a      	add	r2, r3
 8013010:	8abb      	ldrh	r3, [r7, #20]
 8013012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801301a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801301e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013022:	b29b      	uxth	r3, r3
 8013024:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4413      	add	r3, r2
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	b29b      	uxth	r3, r3
 8013034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801303c:	827b      	strh	r3, [r7, #18]
 801303e:	8a7b      	ldrh	r3, [r7, #18]
 8013040:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013044:	827b      	strh	r3, [r7, #18]
 8013046:	8a7b      	ldrh	r3, [r7, #18]
 8013048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801304c:	827b      	strh	r3, [r7, #18]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	441a      	add	r2, r3
 8013058:	8a7b      	ldrh	r3, [r7, #18]
 801305a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801305e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801306a:	b29b      	uxth	r3, r3
 801306c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	371c      	adds	r7, #28
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	460b      	mov	r3, r1
 8013086:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8013088:	78fb      	ldrb	r3, [r7, #3]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d103      	bne.n	8013096 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2280      	movs	r2, #128	; 0x80
 8013092:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	370c      	adds	r7, #12
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr

080130a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80130bc:	b29a      	uxth	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80130c4:	2300      	movs	r3, #0
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr

080130d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80130d2:	b480      	push	{r7}
 80130d4:	b085      	sub	sp, #20
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80130e4:	68fb      	ldr	r3, [r7, #12]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3714      	adds	r7, #20
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr

080130f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80130f2:	b480      	push	{r7}
 80130f4:	b08d      	sub	sp, #52	; 0x34
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	60f8      	str	r0, [r7, #12]
 80130fa:	60b9      	str	r1, [r7, #8]
 80130fc:	4611      	mov	r1, r2
 80130fe:	461a      	mov	r2, r3
 8013100:	460b      	mov	r3, r1
 8013102:	80fb      	strh	r3, [r7, #6]
 8013104:	4613      	mov	r3, r2
 8013106:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013108:	88bb      	ldrh	r3, [r7, #4]
 801310a:	3301      	adds	r3, #1
 801310c:	085b      	lsrs	r3, r3, #1
 801310e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013118:	88fa      	ldrh	r2, [r7, #6]
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	4413      	add	r3, r2
 801311e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013122:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8013124:	6a3b      	ldr	r3, [r7, #32]
 8013126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013128:	e01b      	b.n	8013162 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	3301      	adds	r3, #1
 8013134:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	b29b      	uxth	r3, r3
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	b29b      	uxth	r3, r3
 8013140:	461a      	mov	r2, r3
 8013142:	69bb      	ldr	r3, [r7, #24]
 8013144:	4313      	orrs	r3, r2
 8013146:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	b29a      	uxth	r2, r3
 801314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013152:	3302      	adds	r3, #2
 8013154:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013158:	3301      	adds	r3, #1
 801315a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315e:	3b01      	subs	r3, #1
 8013160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013164:	2b00      	cmp	r3, #0
 8013166:	d1e0      	bne.n	801312a <USB_WritePMA+0x38>
  }
}
 8013168:	bf00      	nop
 801316a:	bf00      	nop
 801316c:	3734      	adds	r7, #52	; 0x34
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr

08013176 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013176:	b480      	push	{r7}
 8013178:	b08b      	sub	sp, #44	; 0x2c
 801317a:	af00      	add	r7, sp, #0
 801317c:	60f8      	str	r0, [r7, #12]
 801317e:	60b9      	str	r1, [r7, #8]
 8013180:	4611      	mov	r1, r2
 8013182:	461a      	mov	r2, r3
 8013184:	460b      	mov	r3, r1
 8013186:	80fb      	strh	r3, [r7, #6]
 8013188:	4613      	mov	r3, r2
 801318a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801318c:	88bb      	ldrh	r3, [r7, #4]
 801318e:	085b      	lsrs	r3, r3, #1
 8013190:	b29b      	uxth	r3, r3
 8013192:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801319c:	88fa      	ldrh	r2, [r7, #6]
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	4413      	add	r3, r2
 80131a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80131a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	627b      	str	r3, [r7, #36]	; 0x24
 80131ac:	e018      	b.n	80131e0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80131ae:	6a3b      	ldr	r3, [r7, #32]
 80131b0:	881b      	ldrh	r3, [r3, #0]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80131b6:	6a3b      	ldr	r3, [r7, #32]
 80131b8:	3302      	adds	r3, #2
 80131ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	b2da      	uxtb	r2, r3
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	3301      	adds	r3, #1
 80131c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	0a1b      	lsrs	r3, r3, #8
 80131ce:	b2da      	uxtb	r2, r3
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	3301      	adds	r3, #1
 80131d8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	3b01      	subs	r3, #1
 80131de:	627b      	str	r3, [r7, #36]	; 0x24
 80131e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d1e3      	bne.n	80131ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80131e6:	88bb      	ldrh	r3, [r7, #4]
 80131e8:	f003 0301 	and.w	r3, r3, #1
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d007      	beq.n	8013202 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80131f2:	6a3b      	ldr	r3, [r7, #32]
 80131f4:	881b      	ldrh	r3, [r3, #0]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	b2da      	uxtb	r2, r3
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	701a      	strb	r2, [r3, #0]
  }
}
 8013202:	bf00      	nop
 8013204:	372c      	adds	r7, #44	; 0x2c
 8013206:	46bd      	mov	sp, r7
 8013208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320c:	4770      	bx	lr

0801320e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801320e:	b580      	push	{r7, lr}
 8013210:	b084      	sub	sp, #16
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
 8013216:	460b      	mov	r3, r1
 8013218:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801321a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801321e:	f002 f931 	bl	8015484 <USBD_static_malloc>
 8013222:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d105      	bne.n	8013236 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013232:	2302      	movs	r3, #2
 8013234:	e066      	b.n	8013304 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	68fa      	ldr	r2, [r7, #12]
 801323a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	7c1b      	ldrb	r3, [r3, #16]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d119      	bne.n	801327a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013246:	f44f 7300 	mov.w	r3, #512	; 0x200
 801324a:	2202      	movs	r2, #2
 801324c:	2181      	movs	r1, #129	; 0x81
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f001 ffbd 	bl	80151ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801325a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801325e:	2202      	movs	r2, #2
 8013260:	2101      	movs	r1, #1
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f001 ffb3 	bl	80151ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2201      	movs	r2, #1
 801326c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2210      	movs	r2, #16
 8013274:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013278:	e016      	b.n	80132a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801327a:	2340      	movs	r3, #64	; 0x40
 801327c:	2202      	movs	r2, #2
 801327e:	2181      	movs	r1, #129	; 0x81
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f001 ffa4 	bl	80151ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2201      	movs	r2, #1
 801328a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801328c:	2340      	movs	r3, #64	; 0x40
 801328e:	2202      	movs	r2, #2
 8013290:	2101      	movs	r1, #1
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f001 ff9b 	bl	80151ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2201      	movs	r2, #1
 801329c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2210      	movs	r2, #16
 80132a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80132a8:	2308      	movs	r3, #8
 80132aa:	2203      	movs	r2, #3
 80132ac:	2182      	movs	r1, #130	; 0x82
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f001 ff8d 	bl	80151ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2201      	movs	r2, #1
 80132b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2200      	movs	r2, #0
 80132ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	7c1b      	ldrb	r3, [r3, #16]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d109      	bne.n	80132f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132e8:	2101      	movs	r1, #1
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f002 f85f 	bl	80153ae <USBD_LL_PrepareReceive>
 80132f0:	e007      	b.n	8013302 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132f8:	2340      	movs	r3, #64	; 0x40
 80132fa:	2101      	movs	r1, #1
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f002 f856 	bl	80153ae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	460b      	mov	r3, r1
 8013316:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013318:	2181      	movs	r1, #129	; 0x81
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f001 ff7d 	bl	801521a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013326:	2101      	movs	r1, #1
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f001 ff76 	bl	801521a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013336:	2182      	movs	r1, #130	; 0x82
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f001 ff6e 	bl	801521a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2200      	movs	r2, #0
 801334a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013354:	2b00      	cmp	r3, #0
 8013356:	d00e      	beq.n	8013376 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013368:	4618      	mov	r0, r3
 801336a:	f002 f899 	bl	80154a0 <USBD_static_free>
    pdev->pClassData = NULL;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013390:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013392:	2300      	movs	r3, #0
 8013394:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013396:	2300      	movs	r3, #0
 8013398:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801339a:	2300      	movs	r3, #0
 801339c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d101      	bne.n	80133a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80133a4:	2303      	movs	r3, #3
 80133a6:	e0af      	b.n	8013508 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d03f      	beq.n	8013434 <USBD_CDC_Setup+0xb4>
 80133b4:	2b20      	cmp	r3, #32
 80133b6:	f040 809f 	bne.w	80134f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	88db      	ldrh	r3, [r3, #6]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d02e      	beq.n	8013420 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	b25b      	sxtb	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	da16      	bge.n	80133fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80133d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80133da:	683a      	ldr	r2, [r7, #0]
 80133dc:	88d2      	ldrh	r2, [r2, #6]
 80133de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	88db      	ldrh	r3, [r3, #6]
 80133e4:	2b07      	cmp	r3, #7
 80133e6:	bf28      	it	cs
 80133e8:	2307      	movcs	r3, #7
 80133ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	89fa      	ldrh	r2, [r7, #14]
 80133f0:	4619      	mov	r1, r3
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f001 facf 	bl	8014996 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80133f8:	e085      	b.n	8013506 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	785a      	ldrb	r2, [r3, #1]
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	88db      	ldrh	r3, [r3, #6]
 8013408:	b2da      	uxtb	r2, r3
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013410:	6939      	ldr	r1, [r7, #16]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	88db      	ldrh	r3, [r3, #6]
 8013416:	461a      	mov	r2, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f001 fae8 	bl	80149ee <USBD_CtlPrepareRx>
      break;
 801341e:	e072      	b.n	8013506 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013426:	689b      	ldr	r3, [r3, #8]
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	7850      	ldrb	r0, [r2, #1]
 801342c:	2200      	movs	r2, #0
 801342e:	6839      	ldr	r1, [r7, #0]
 8013430:	4798      	blx	r3
      break;
 8013432:	e068      	b.n	8013506 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	785b      	ldrb	r3, [r3, #1]
 8013438:	2b0b      	cmp	r3, #11
 801343a:	d852      	bhi.n	80134e2 <USBD_CDC_Setup+0x162>
 801343c:	a201      	add	r2, pc, #4	; (adr r2, 8013444 <USBD_CDC_Setup+0xc4>)
 801343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013442:	bf00      	nop
 8013444:	08013475 	.word	0x08013475
 8013448:	080134f1 	.word	0x080134f1
 801344c:	080134e3 	.word	0x080134e3
 8013450:	080134e3 	.word	0x080134e3
 8013454:	080134e3 	.word	0x080134e3
 8013458:	080134e3 	.word	0x080134e3
 801345c:	080134e3 	.word	0x080134e3
 8013460:	080134e3 	.word	0x080134e3
 8013464:	080134e3 	.word	0x080134e3
 8013468:	080134e3 	.word	0x080134e3
 801346c:	0801349f 	.word	0x0801349f
 8013470:	080134c9 	.word	0x080134c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801347a:	b2db      	uxtb	r3, r3
 801347c:	2b03      	cmp	r3, #3
 801347e:	d107      	bne.n	8013490 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013480:	f107 030a 	add.w	r3, r7, #10
 8013484:	2202      	movs	r2, #2
 8013486:	4619      	mov	r1, r3
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f001 fa84 	bl	8014996 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801348e:	e032      	b.n	80134f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013490:	6839      	ldr	r1, [r7, #0]
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f001 fa0e 	bl	80148b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013498:	2303      	movs	r3, #3
 801349a:	75fb      	strb	r3, [r7, #23]
          break;
 801349c:	e02b      	b.n	80134f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	2b03      	cmp	r3, #3
 80134a8:	d107      	bne.n	80134ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80134aa:	f107 030d 	add.w	r3, r7, #13
 80134ae:	2201      	movs	r2, #1
 80134b0:	4619      	mov	r1, r3
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f001 fa6f 	bl	8014996 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80134b8:	e01d      	b.n	80134f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f001 f9f9 	bl	80148b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80134c2:	2303      	movs	r3, #3
 80134c4:	75fb      	strb	r3, [r7, #23]
          break;
 80134c6:	e016      	b.n	80134f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	2b03      	cmp	r3, #3
 80134d2:	d00f      	beq.n	80134f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80134d4:	6839      	ldr	r1, [r7, #0]
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f001 f9ec 	bl	80148b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80134dc:	2303      	movs	r3, #3
 80134de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80134e0:	e008      	b.n	80134f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80134e2:	6839      	ldr	r1, [r7, #0]
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f001 f9e5 	bl	80148b4 <USBD_CtlError>
          ret = USBD_FAIL;
 80134ea:	2303      	movs	r3, #3
 80134ec:	75fb      	strb	r3, [r7, #23]
          break;
 80134ee:	e002      	b.n	80134f6 <USBD_CDC_Setup+0x176>
          break;
 80134f0:	bf00      	nop
 80134f2:	e008      	b.n	8013506 <USBD_CDC_Setup+0x186>
          break;
 80134f4:	bf00      	nop
      }
      break;
 80134f6:	e006      	b.n	8013506 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80134f8:	6839      	ldr	r1, [r7, #0]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f001 f9da 	bl	80148b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8013500:	2303      	movs	r3, #3
 8013502:	75fb      	strb	r3, [r7, #23]
      break;
 8013504:	bf00      	nop
  }

  return (uint8_t)ret;
 8013506:	7dfb      	ldrb	r3, [r7, #23]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	460b      	mov	r3, r1
 801351a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801352a:	2b00      	cmp	r3, #0
 801352c:	d101      	bne.n	8013532 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801352e:	2303      	movs	r3, #3
 8013530:	e04f      	b.n	80135d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013538:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801353a:	78fa      	ldrb	r2, [r7, #3]
 801353c:	6879      	ldr	r1, [r7, #4]
 801353e:	4613      	mov	r3, r2
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4413      	add	r3, r2
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	440b      	add	r3, r1
 8013548:	3318      	adds	r3, #24
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d029      	beq.n	80135a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013550:	78fa      	ldrb	r2, [r7, #3]
 8013552:	6879      	ldr	r1, [r7, #4]
 8013554:	4613      	mov	r3, r2
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	4413      	add	r3, r2
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	440b      	add	r3, r1
 801355e:	3318      	adds	r3, #24
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	78f9      	ldrb	r1, [r7, #3]
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	460b      	mov	r3, r1
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	440b      	add	r3, r1
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	4403      	add	r3, r0
 8013570:	3338      	adds	r3, #56	; 0x38
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	fbb2 f1f3 	udiv	r1, r2, r3
 8013578:	fb01 f303 	mul.w	r3, r1, r3
 801357c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801357e:	2b00      	cmp	r3, #0
 8013580:	d110      	bne.n	80135a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013582:	78fa      	ldrb	r2, [r7, #3]
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	4613      	mov	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	4413      	add	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	440b      	add	r3, r1
 8013590:	3318      	adds	r3, #24
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013596:	78f9      	ldrb	r1, [r7, #3]
 8013598:	2300      	movs	r3, #0
 801359a:	2200      	movs	r2, #0
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f001 fee5 	bl	801536c <USBD_LL_Transmit>
 80135a2:	e015      	b.n	80135d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2200      	movs	r2, #0
 80135a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135b2:	691b      	ldr	r3, [r3, #16]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d00b      	beq.n	80135d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135be:	691b      	ldr	r3, [r3, #16]
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80135c6:	68ba      	ldr	r2, [r7, #8]
 80135c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80135cc:	78fa      	ldrb	r2, [r7, #3]
 80135ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80135da:	b580      	push	{r7, lr}
 80135dc:	b084      	sub	sp, #16
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
 80135e2:	460b      	mov	r3, r1
 80135e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d101      	bne.n	80135fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80135f8:	2303      	movs	r3, #3
 80135fa:	e015      	b.n	8013628 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80135fc:	78fb      	ldrb	r3, [r7, #3]
 80135fe:	4619      	mov	r1, r3
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f001 fef5 	bl	80153f0 <USBD_LL_GetRxDataSize>
 8013606:	4602      	mov	r2, r0
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013614:	68db      	ldr	r3, [r3, #12]
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801361c:	68fa      	ldr	r2, [r7, #12]
 801361e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013622:	4611      	mov	r1, r2
 8013624:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013626:	2300      	movs	r3, #0
}
 8013628:	4618      	mov	r0, r3
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801363e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d101      	bne.n	801364a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013646:	2303      	movs	r3, #3
 8013648:	e01b      	b.n	8013682 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d015      	beq.n	8013680 <USBD_CDC_EP0_RxReady+0x50>
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801365a:	2bff      	cmp	r3, #255	; 0xff
 801365c:	d010      	beq.n	8013680 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013664:	689b      	ldr	r3, [r3, #8]
 8013666:	68fa      	ldr	r2, [r7, #12]
 8013668:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801366c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801366e:	68fa      	ldr	r2, [r7, #12]
 8013670:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013674:	b292      	uxth	r2, r2
 8013676:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	22ff      	movs	r2, #255	; 0xff
 801367c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
	...

0801368c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2243      	movs	r2, #67	; 0x43
 8013698:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801369a:	4b03      	ldr	r3, [pc, #12]	; (80136a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr
 80136a8:	20000094 	.word	0x20000094

080136ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2243      	movs	r2, #67	; 0x43
 80136b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80136ba:	4b03      	ldr	r3, [pc, #12]	; (80136c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80136bc:	4618      	mov	r0, r3
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr
 80136c8:	20000050 	.word	0x20000050

080136cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b083      	sub	sp, #12
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2243      	movs	r2, #67	; 0x43
 80136d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80136da:	4b03      	ldr	r3, [pc, #12]	; (80136e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80136dc:	4618      	mov	r0, r3
 80136de:	370c      	adds	r7, #12
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr
 80136e8:	200000d8 	.word	0x200000d8

080136ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	220a      	movs	r2, #10
 80136f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80136fa:	4b03      	ldr	r3, [pc, #12]	; (8013708 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	370c      	adds	r7, #12
 8013700:	46bd      	mov	sp, r7
 8013702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013706:	4770      	bx	lr
 8013708:	2000000c 	.word	0x2000000c

0801370c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d101      	bne.n	8013720 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801371c:	2303      	movs	r3, #3
 801371e:	e004      	b.n	801372a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013728:	2300      	movs	r3, #0
}
 801372a:	4618      	mov	r0, r3
 801372c:	370c      	adds	r7, #12
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013736:	b480      	push	{r7}
 8013738:	b087      	sub	sp, #28
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013748:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d101      	bne.n	8013754 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013750:	2303      	movs	r3, #3
 8013752:	e008      	b.n	8013766 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013764:	2300      	movs	r3, #0
}
 8013766:	4618      	mov	r0, r3
 8013768:	371c      	adds	r7, #28
 801376a:	46bd      	mov	sp, r7
 801376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013770:	4770      	bx	lr

08013772 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013772:	b480      	push	{r7}
 8013774:	b085      	sub	sp, #20
 8013776:	af00      	add	r7, sp, #0
 8013778:	6078      	str	r0, [r7, #4]
 801377a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013782:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d101      	bne.n	801378e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801378a:	2303      	movs	r3, #3
 801378c:	e004      	b.n	8013798 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013796:	2300      	movs	r3, #0
}
 8013798:	4618      	mov	r0, r3
 801379a:	3714      	adds	r7, #20
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80137b4:	2301      	movs	r3, #1
 80137b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d101      	bne.n	80137c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e01a      	b.n	80137fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d114      	bne.n	80137fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	2201      	movs	r2, #1
 80137d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137ee:	2181      	movs	r1, #129	; 0x81
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f001 fdbb 	bl	801536c <USBD_LL_Transmit>

    ret = USBD_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80137fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3710      	adds	r7, #16
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013812:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801381e:	2303      	movs	r3, #3
 8013820:	e016      	b.n	8013850 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	7c1b      	ldrb	r3, [r3, #16]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d109      	bne.n	801383e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013834:	2101      	movs	r1, #1
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f001 fdb9 	bl	80153ae <USBD_LL_PrepareReceive>
 801383c:	e007      	b.n	801384e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013844:	2340      	movs	r3, #64	; 0x40
 8013846:	2101      	movs	r1, #1
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f001 fdb0 	bl	80153ae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801384e:	2300      	movs	r3, #0
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	4613      	mov	r3, r2
 8013864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d101      	bne.n	8013870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801386c:	2303      	movs	r3, #3
 801386e:	e01f      	b.n	80138b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2200      	movs	r2, #0
 8013874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2200      	movs	r2, #0
 801387c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2200      	movs	r2, #0
 8013884:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2201      	movs	r2, #1
 801389a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	79fa      	ldrb	r2, [r7, #7]
 80138a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f001 fc17 	bl	80150d8 <USBD_LL_Init>
 80138aa:	4603      	mov	r3, r0
 80138ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80138ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80138c2:	2300      	movs	r3, #0
 80138c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d101      	bne.n	80138d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80138cc:	2303      	movs	r3, #3
 80138ce:	e016      	b.n	80138fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00b      	beq.n	80138fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ec:	f107 020e 	add.w	r2, r7, #14
 80138f0:	4610      	mov	r0, r2
 80138f2:	4798      	blx	r3
 80138f4:	4602      	mov	r2, r0
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80138fc:	2300      	movs	r3, #0
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3710      	adds	r7, #16
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}

08013906 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013906:	b580      	push	{r7, lr}
 8013908:	b082      	sub	sp, #8
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f001 fc42 	bl	8015198 <USBD_LL_Start>
 8013914:	4603      	mov	r3, r0
}
 8013916:	4618      	mov	r0, r3
 8013918:	3708      	adds	r7, #8
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}

0801391e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801391e:	b480      	push	{r7}
 8013920:	b083      	sub	sp, #12
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013926:	2300      	movs	r3, #0
}
 8013928:	4618      	mov	r0, r3
 801392a:	370c      	adds	r7, #12
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	460b      	mov	r3, r1
 801393e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013940:	2303      	movs	r3, #3
 8013942:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801394a:	2b00      	cmp	r3, #0
 801394c:	d009      	beq.n	8013962 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	78fa      	ldrb	r2, [r7, #3]
 8013958:	4611      	mov	r1, r2
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	4798      	blx	r3
 801395e:	4603      	mov	r3, r0
 8013960:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013962:	7bfb      	ldrb	r3, [r7, #15]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	460b      	mov	r3, r1
 8013976:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801397e:	2b00      	cmp	r3, #0
 8013980:	d007      	beq.n	8013992 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	78fa      	ldrb	r2, [r7, #3]
 801398c:	4611      	mov	r1, r2
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	4798      	blx	r3
  }

  return USBD_OK;
 8013992:	2300      	movs	r3, #0
}
 8013994:	4618      	mov	r0, r3
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139ac:	6839      	ldr	r1, [r7, #0]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f000 ff46 	bl	8014840 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2201      	movs	r2, #1
 80139b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80139c2:	461a      	mov	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80139d0:	f003 031f 	and.w	r3, r3, #31
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d01a      	beq.n	8013a0e <USBD_LL_SetupStage+0x72>
 80139d8:	2b02      	cmp	r3, #2
 80139da:	d822      	bhi.n	8013a22 <USBD_LL_SetupStage+0x86>
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d002      	beq.n	80139e6 <USBD_LL_SetupStage+0x4a>
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d00a      	beq.n	80139fa <USBD_LL_SetupStage+0x5e>
 80139e4:	e01d      	b.n	8013a22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139ec:	4619      	mov	r1, r3
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 f9ee 	bl	8013dd0 <USBD_StdDevReq>
 80139f4:	4603      	mov	r3, r0
 80139f6:	73fb      	strb	r3, [r7, #15]
      break;
 80139f8:	e020      	b.n	8013a3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013a00:	4619      	mov	r1, r3
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f000 fa52 	bl	8013eac <USBD_StdItfReq>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a0c:	e016      	b.n	8013a3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013a14:	4619      	mov	r1, r3
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f000 fa91 	bl	8013f3e <USBD_StdEPReq>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8013a20:	e00c      	b.n	8013a3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	4619      	mov	r1, r3
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f001 fc11 	bl	8015258 <USBD_LL_StallEP>
 8013a36:	4603      	mov	r3, r0
 8013a38:	73fb      	strb	r3, [r7, #15]
      break;
 8013a3a:	bf00      	nop
  }

  return ret;
 8013a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3710      	adds	r7, #16
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b086      	sub	sp, #24
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	60f8      	str	r0, [r7, #12]
 8013a4e:	460b      	mov	r3, r1
 8013a50:	607a      	str	r2, [r7, #4]
 8013a52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013a54:	7afb      	ldrb	r3, [r7, #11]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d138      	bne.n	8013acc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013a60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a68:	2b03      	cmp	r3, #3
 8013a6a:	d14a      	bne.n	8013b02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	689a      	ldr	r2, [r3, #8]
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d913      	bls.n	8013aa0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	689a      	ldr	r2, [r3, #8]
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	1ad2      	subs	r2, r2, r3
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	68da      	ldr	r2, [r3, #12]
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	bf28      	it	cs
 8013a92:	4613      	movcs	r3, r2
 8013a94:	461a      	mov	r2, r3
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	f000 ffc5 	bl	8014a28 <USBD_CtlContinueRx>
 8013a9e:	e030      	b.n	8013b02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	2b03      	cmp	r3, #3
 8013aaa:	d10b      	bne.n	8013ac4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ab2:	691b      	ldr	r3, [r3, #16]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d005      	beq.n	8013ac4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013abe:	691b      	ldr	r3, [r3, #16]
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f000 ffc0 	bl	8014a4a <USBD_CtlSendStatus>
 8013aca:	e01a      	b.n	8013b02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ad2:	b2db      	uxtb	r3, r3
 8013ad4:	2b03      	cmp	r3, #3
 8013ad6:	d114      	bne.n	8013b02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ade:	699b      	ldr	r3, [r3, #24]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00e      	beq.n	8013b02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013aea:	699b      	ldr	r3, [r3, #24]
 8013aec:	7afa      	ldrb	r2, [r7, #11]
 8013aee:	4611      	mov	r1, r2
 8013af0:	68f8      	ldr	r0, [r7, #12]
 8013af2:	4798      	blx	r3
 8013af4:	4603      	mov	r3, r0
 8013af6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013af8:	7dfb      	ldrb	r3, [r7, #23]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d001      	beq.n	8013b02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013afe:	7dfb      	ldrb	r3, [r7, #23]
 8013b00:	e000      	b.n	8013b04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013b02:	2300      	movs	r3, #0
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3718      	adds	r7, #24
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b086      	sub	sp, #24
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	460b      	mov	r3, r1
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013b1a:	7afb      	ldrb	r3, [r7, #11]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d16b      	bne.n	8013bf8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	3314      	adds	r3, #20
 8013b24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013b2c:	2b02      	cmp	r3, #2
 8013b2e:	d156      	bne.n	8013bde <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	689a      	ldr	r2, [r3, #8]
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d914      	bls.n	8013b66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	689a      	ldr	r2, [r3, #8]
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	1ad2      	subs	r2, r2, r3
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	461a      	mov	r2, r3
 8013b50:	6879      	ldr	r1, [r7, #4]
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f000 ff3a 	bl	80149cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b58:	2300      	movs	r3, #0
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	2100      	movs	r1, #0
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	f001 fc25 	bl	80153ae <USBD_LL_PrepareReceive>
 8013b64:	e03b      	b.n	8013bde <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	68da      	ldr	r2, [r3, #12]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d11c      	bne.n	8013bac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	685a      	ldr	r2, [r3, #4]
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d316      	bcc.n	8013bac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	685a      	ldr	r2, [r3, #4]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d20f      	bcs.n	8013bac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2100      	movs	r1, #0
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f000 ff1b 	bl	80149cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	68f8      	ldr	r0, [r7, #12]
 8013ba6:	f001 fc02 	bl	80153ae <USBD_LL_PrepareReceive>
 8013baa:	e018      	b.n	8013bde <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	2b03      	cmp	r3, #3
 8013bb6:	d10b      	bne.n	8013bd0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d005      	beq.n	8013bd0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bd0:	2180      	movs	r1, #128	; 0x80
 8013bd2:	68f8      	ldr	r0, [r7, #12]
 8013bd4:	f001 fb40 	bl	8015258 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013bd8:	68f8      	ldr	r0, [r7, #12]
 8013bda:	f000 ff49 	bl	8014a70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d122      	bne.n	8013c2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013be8:	68f8      	ldr	r0, [r7, #12]
 8013bea:	f7ff fe98 	bl	801391e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013bf6:	e01a      	b.n	8013c2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b03      	cmp	r3, #3
 8013c02:	d114      	bne.n	8013c2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c0a:	695b      	ldr	r3, [r3, #20]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d00e      	beq.n	8013c2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c16:	695b      	ldr	r3, [r3, #20]
 8013c18:	7afa      	ldrb	r2, [r7, #11]
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	68f8      	ldr	r0, [r7, #12]
 8013c1e:	4798      	blx	r3
 8013c20:	4603      	mov	r3, r0
 8013c22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013c24:	7dfb      	ldrb	r3, [r7, #23]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d001      	beq.n	8013c2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
 8013c2c:	e000      	b.n	8013c30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013c2e:	2300      	movs	r3, #0
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d101      	bne.n	8013c6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013c68:	2303      	movs	r3, #3
 8013c6a:	e02f      	b.n	8013ccc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00f      	beq.n	8013c96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d009      	beq.n	8013c96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	6852      	ldr	r2, [r2, #4]
 8013c8e:	b2d2      	uxtb	r2, r2
 8013c90:	4611      	mov	r1, r2
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c96:	2340      	movs	r3, #64	; 0x40
 8013c98:	2200      	movs	r2, #0
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f001 fa96 	bl	80151ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2240      	movs	r2, #64	; 0x40
 8013cae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013cb2:	2340      	movs	r3, #64	; 0x40
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	2180      	movs	r1, #128	; 0x80
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f001 fa88 	bl	80151ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2240      	movs	r2, #64	; 0x40
 8013cc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3708      	adds	r7, #8
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b083      	sub	sp, #12
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	78fa      	ldrb	r2, [r7, #3]
 8013ce4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	370c      	adds	r7, #12
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2204      	movs	r2, #4
 8013d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b04      	cmp	r3, #4
 8013d32:	d106      	bne.n	8013d42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013d3a:	b2da      	uxtb	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d101      	bne.n	8013d66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013d62:	2303      	movs	r3, #3
 8013d64:	e012      	b.n	8013d8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	2b03      	cmp	r3, #3
 8013d70:	d10b      	bne.n	8013d8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d78:	69db      	ldr	r3, [r3, #28]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d005      	beq.n	8013d8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d84:	69db      	ldr	r3, [r3, #28]
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013d8a:	2300      	movs	r3, #0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b087      	sub	sp, #28
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	3301      	adds	r3, #1
 8013daa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013db2:	8a3b      	ldrh	r3, [r7, #16]
 8013db4:	021b      	lsls	r3, r3, #8
 8013db6:	b21a      	sxth	r2, r3
 8013db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013dbc:	4313      	orrs	r3, r2
 8013dbe:	b21b      	sxth	r3, r3
 8013dc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	371c      	adds	r7, #28
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013de6:	2b40      	cmp	r3, #64	; 0x40
 8013de8:	d005      	beq.n	8013df6 <USBD_StdDevReq+0x26>
 8013dea:	2b40      	cmp	r3, #64	; 0x40
 8013dec:	d853      	bhi.n	8013e96 <USBD_StdDevReq+0xc6>
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00b      	beq.n	8013e0a <USBD_StdDevReq+0x3a>
 8013df2:	2b20      	cmp	r3, #32
 8013df4:	d14f      	bne.n	8013e96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	6839      	ldr	r1, [r7, #0]
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	4798      	blx	r3
 8013e04:	4603      	mov	r3, r0
 8013e06:	73fb      	strb	r3, [r7, #15]
      break;
 8013e08:	e04a      	b.n	8013ea0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	785b      	ldrb	r3, [r3, #1]
 8013e0e:	2b09      	cmp	r3, #9
 8013e10:	d83b      	bhi.n	8013e8a <USBD_StdDevReq+0xba>
 8013e12:	a201      	add	r2, pc, #4	; (adr r2, 8013e18 <USBD_StdDevReq+0x48>)
 8013e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e18:	08013e6d 	.word	0x08013e6d
 8013e1c:	08013e81 	.word	0x08013e81
 8013e20:	08013e8b 	.word	0x08013e8b
 8013e24:	08013e77 	.word	0x08013e77
 8013e28:	08013e8b 	.word	0x08013e8b
 8013e2c:	08013e4b 	.word	0x08013e4b
 8013e30:	08013e41 	.word	0x08013e41
 8013e34:	08013e8b 	.word	0x08013e8b
 8013e38:	08013e63 	.word	0x08013e63
 8013e3c:	08013e55 	.word	0x08013e55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013e40:	6839      	ldr	r1, [r7, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 f9de 	bl	8014204 <USBD_GetDescriptor>
          break;
 8013e48:	e024      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013e4a:	6839      	ldr	r1, [r7, #0]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 fb6d 	bl	801452c <USBD_SetAddress>
          break;
 8013e52:	e01f      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 fbac 	bl	80145b4 <USBD_SetConfig>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8013e60:	e018      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013e62:	6839      	ldr	r1, [r7, #0]
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 fc4b 	bl	8014700 <USBD_GetConfig>
          break;
 8013e6a:	e013      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013e6c:	6839      	ldr	r1, [r7, #0]
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 fc7c 	bl	801476c <USBD_GetStatus>
          break;
 8013e74:	e00e      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013e76:	6839      	ldr	r1, [r7, #0]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f000 fcab 	bl	80147d4 <USBD_SetFeature>
          break;
 8013e7e:	e009      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013e80:	6839      	ldr	r1, [r7, #0]
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 fcba 	bl	80147fc <USBD_ClrFeature>
          break;
 8013e88:	e004      	b.n	8013e94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013e8a:	6839      	ldr	r1, [r7, #0]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 fd11 	bl	80148b4 <USBD_CtlError>
          break;
 8013e92:	bf00      	nop
      }
      break;
 8013e94:	e004      	b.n	8013ea0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013e96:	6839      	ldr	r1, [r7, #0]
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f000 fd0b 	bl	80148b4 <USBD_CtlError>
      break;
 8013e9e:	bf00      	nop
  }

  return ret;
 8013ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3710      	adds	r7, #16
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop

08013eac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ec2:	2b40      	cmp	r3, #64	; 0x40
 8013ec4:	d005      	beq.n	8013ed2 <USBD_StdItfReq+0x26>
 8013ec6:	2b40      	cmp	r3, #64	; 0x40
 8013ec8:	d82f      	bhi.n	8013f2a <USBD_StdItfReq+0x7e>
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d001      	beq.n	8013ed2 <USBD_StdItfReq+0x26>
 8013ece:	2b20      	cmp	r3, #32
 8013ed0:	d12b      	bne.n	8013f2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	3b01      	subs	r3, #1
 8013edc:	2b02      	cmp	r3, #2
 8013ede:	d81d      	bhi.n	8013f1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	889b      	ldrh	r3, [r3, #4]
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	d813      	bhi.n	8013f12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	6839      	ldr	r1, [r7, #0]
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	4798      	blx	r3
 8013ef8:	4603      	mov	r3, r0
 8013efa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	88db      	ldrh	r3, [r3, #6]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d110      	bne.n	8013f26 <USBD_StdItfReq+0x7a>
 8013f04:	7bfb      	ldrb	r3, [r7, #15]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10d      	bne.n	8013f26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f000 fd9d 	bl	8014a4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013f10:	e009      	b.n	8013f26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013f12:	6839      	ldr	r1, [r7, #0]
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f000 fccd 	bl	80148b4 <USBD_CtlError>
          break;
 8013f1a:	e004      	b.n	8013f26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013f1c:	6839      	ldr	r1, [r7, #0]
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f000 fcc8 	bl	80148b4 <USBD_CtlError>
          break;
 8013f24:	e000      	b.n	8013f28 <USBD_StdItfReq+0x7c>
          break;
 8013f26:	bf00      	nop
      }
      break;
 8013f28:	e004      	b.n	8013f34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013f2a:	6839      	ldr	r1, [r7, #0]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f000 fcc1 	bl	80148b4 <USBD_CtlError>
      break;
 8013f32:	bf00      	nop
  }

  return ret;
 8013f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3710      	adds	r7, #16
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b084      	sub	sp, #16
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
 8013f46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	889b      	ldrh	r3, [r3, #4]
 8013f50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f5a:	2b40      	cmp	r3, #64	; 0x40
 8013f5c:	d007      	beq.n	8013f6e <USBD_StdEPReq+0x30>
 8013f5e:	2b40      	cmp	r3, #64	; 0x40
 8013f60:	f200 8145 	bhi.w	80141ee <USBD_StdEPReq+0x2b0>
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00c      	beq.n	8013f82 <USBD_StdEPReq+0x44>
 8013f68:	2b20      	cmp	r3, #32
 8013f6a:	f040 8140 	bne.w	80141ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	6839      	ldr	r1, [r7, #0]
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	4798      	blx	r3
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8013f80:	e13a      	b.n	80141f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	785b      	ldrb	r3, [r3, #1]
 8013f86:	2b03      	cmp	r3, #3
 8013f88:	d007      	beq.n	8013f9a <USBD_StdEPReq+0x5c>
 8013f8a:	2b03      	cmp	r3, #3
 8013f8c:	f300 8129 	bgt.w	80141e2 <USBD_StdEPReq+0x2a4>
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d07f      	beq.n	8014094 <USBD_StdEPReq+0x156>
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d03c      	beq.n	8014012 <USBD_StdEPReq+0xd4>
 8013f98:	e123      	b.n	80141e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fa0:	b2db      	uxtb	r3, r3
 8013fa2:	2b02      	cmp	r3, #2
 8013fa4:	d002      	beq.n	8013fac <USBD_StdEPReq+0x6e>
 8013fa6:	2b03      	cmp	r3, #3
 8013fa8:	d016      	beq.n	8013fd8 <USBD_StdEPReq+0x9a>
 8013faa:	e02c      	b.n	8014006 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fac:	7bbb      	ldrb	r3, [r7, #14]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d00d      	beq.n	8013fce <USBD_StdEPReq+0x90>
 8013fb2:	7bbb      	ldrb	r3, [r7, #14]
 8013fb4:	2b80      	cmp	r3, #128	; 0x80
 8013fb6:	d00a      	beq.n	8013fce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fb8:	7bbb      	ldrb	r3, [r7, #14]
 8013fba:	4619      	mov	r1, r3
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f001 f94b 	bl	8015258 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fc2:	2180      	movs	r1, #128	; 0x80
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f001 f947 	bl	8015258 <USBD_LL_StallEP>
 8013fca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013fcc:	e020      	b.n	8014010 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013fce:	6839      	ldr	r1, [r7, #0]
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f000 fc6f 	bl	80148b4 <USBD_CtlError>
              break;
 8013fd6:	e01b      	b.n	8014010 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	885b      	ldrh	r3, [r3, #2]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10e      	bne.n	8013ffe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013fe0:	7bbb      	ldrb	r3, [r7, #14]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00b      	beq.n	8013ffe <USBD_StdEPReq+0xc0>
 8013fe6:	7bbb      	ldrb	r3, [r7, #14]
 8013fe8:	2b80      	cmp	r3, #128	; 0x80
 8013fea:	d008      	beq.n	8013ffe <USBD_StdEPReq+0xc0>
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	88db      	ldrh	r3, [r3, #6]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d104      	bne.n	8013ffe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ff4:	7bbb      	ldrb	r3, [r7, #14]
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f001 f92d 	bl	8015258 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f000 fd23 	bl	8014a4a <USBD_CtlSendStatus>

              break;
 8014004:	e004      	b.n	8014010 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fc53 	bl	80148b4 <USBD_CtlError>
              break;
 801400e:	bf00      	nop
          }
          break;
 8014010:	e0ec      	b.n	80141ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b02      	cmp	r3, #2
 801401c:	d002      	beq.n	8014024 <USBD_StdEPReq+0xe6>
 801401e:	2b03      	cmp	r3, #3
 8014020:	d016      	beq.n	8014050 <USBD_StdEPReq+0x112>
 8014022:	e030      	b.n	8014086 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014024:	7bbb      	ldrb	r3, [r7, #14]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00d      	beq.n	8014046 <USBD_StdEPReq+0x108>
 801402a:	7bbb      	ldrb	r3, [r7, #14]
 801402c:	2b80      	cmp	r3, #128	; 0x80
 801402e:	d00a      	beq.n	8014046 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014030:	7bbb      	ldrb	r3, [r7, #14]
 8014032:	4619      	mov	r1, r3
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f001 f90f 	bl	8015258 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801403a:	2180      	movs	r1, #128	; 0x80
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f001 f90b 	bl	8015258 <USBD_LL_StallEP>
 8014042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014044:	e025      	b.n	8014092 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fc33 	bl	80148b4 <USBD_CtlError>
              break;
 801404e:	e020      	b.n	8014092 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	885b      	ldrh	r3, [r3, #2]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d11b      	bne.n	8014090 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014058:	7bbb      	ldrb	r3, [r7, #14]
 801405a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801405e:	2b00      	cmp	r3, #0
 8014060:	d004      	beq.n	801406c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014062:	7bbb      	ldrb	r3, [r7, #14]
 8014064:	4619      	mov	r1, r3
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f001 f915 	bl	8015296 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 fcec 	bl	8014a4a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014078:	689b      	ldr	r3, [r3, #8]
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	4798      	blx	r3
 8014080:	4603      	mov	r3, r0
 8014082:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014084:	e004      	b.n	8014090 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 fc13 	bl	80148b4 <USBD_CtlError>
              break;
 801408e:	e000      	b.n	8014092 <USBD_StdEPReq+0x154>
              break;
 8014090:	bf00      	nop
          }
          break;
 8014092:	e0ab      	b.n	80141ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801409a:	b2db      	uxtb	r3, r3
 801409c:	2b02      	cmp	r3, #2
 801409e:	d002      	beq.n	80140a6 <USBD_StdEPReq+0x168>
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	d032      	beq.n	801410a <USBD_StdEPReq+0x1cc>
 80140a4:	e097      	b.n	80141d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140a6:	7bbb      	ldrb	r3, [r7, #14]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d007      	beq.n	80140bc <USBD_StdEPReq+0x17e>
 80140ac:	7bbb      	ldrb	r3, [r7, #14]
 80140ae:	2b80      	cmp	r3, #128	; 0x80
 80140b0:	d004      	beq.n	80140bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 fbfd 	bl	80148b4 <USBD_CtlError>
                break;
 80140ba:	e091      	b.n	80141e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	da0b      	bge.n	80140dc <USBD_StdEPReq+0x19e>
 80140c4:	7bbb      	ldrb	r3, [r7, #14]
 80140c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80140ca:	4613      	mov	r3, r2
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	4413      	add	r3, r2
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	3310      	adds	r3, #16
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	4413      	add	r3, r2
 80140d8:	3304      	adds	r3, #4
 80140da:	e00b      	b.n	80140f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80140dc:	7bbb      	ldrb	r3, [r7, #14]
 80140de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140e2:	4613      	mov	r3, r2
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	4413      	add	r3, r2
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	4413      	add	r3, r2
 80140f2:	3304      	adds	r3, #4
 80140f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	2200      	movs	r2, #0
 80140fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	2202      	movs	r2, #2
 8014100:	4619      	mov	r1, r3
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 fc47 	bl	8014996 <USBD_CtlSendData>
              break;
 8014108:	e06a      	b.n	80141e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801410a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801410e:	2b00      	cmp	r3, #0
 8014110:	da11      	bge.n	8014136 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014112:	7bbb      	ldrb	r3, [r7, #14]
 8014114:	f003 020f 	and.w	r2, r3, #15
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	4613      	mov	r3, r2
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	4413      	add	r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	440b      	add	r3, r1
 8014124:	3324      	adds	r3, #36	; 0x24
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d117      	bne.n	801415c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801412c:	6839      	ldr	r1, [r7, #0]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 fbc0 	bl	80148b4 <USBD_CtlError>
                  break;
 8014134:	e054      	b.n	80141e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014136:	7bbb      	ldrb	r3, [r7, #14]
 8014138:	f003 020f 	and.w	r2, r3, #15
 801413c:	6879      	ldr	r1, [r7, #4]
 801413e:	4613      	mov	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4413      	add	r3, r2
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	440b      	add	r3, r1
 8014148:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801414c:	881b      	ldrh	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d104      	bne.n	801415c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f000 fbad 	bl	80148b4 <USBD_CtlError>
                  break;
 801415a:	e041      	b.n	80141e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801415c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014160:	2b00      	cmp	r3, #0
 8014162:	da0b      	bge.n	801417c <USBD_StdEPReq+0x23e>
 8014164:	7bbb      	ldrb	r3, [r7, #14]
 8014166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801416a:	4613      	mov	r3, r2
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	4413      	add	r3, r2
 8014170:	009b      	lsls	r3, r3, #2
 8014172:	3310      	adds	r3, #16
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	4413      	add	r3, r2
 8014178:	3304      	adds	r3, #4
 801417a:	e00b      	b.n	8014194 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801417c:	7bbb      	ldrb	r3, [r7, #14]
 801417e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014182:	4613      	mov	r3, r2
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	4413      	add	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	4413      	add	r3, r2
 8014192:	3304      	adds	r3, #4
 8014194:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014196:	7bbb      	ldrb	r3, [r7, #14]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d002      	beq.n	80141a2 <USBD_StdEPReq+0x264>
 801419c:	7bbb      	ldrb	r3, [r7, #14]
 801419e:	2b80      	cmp	r3, #128	; 0x80
 80141a0:	d103      	bne.n	80141aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	2200      	movs	r2, #0
 80141a6:	601a      	str	r2, [r3, #0]
 80141a8:	e00e      	b.n	80141c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80141aa:	7bbb      	ldrb	r3, [r7, #14]
 80141ac:	4619      	mov	r1, r3
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f001 f890 	bl	80152d4 <USBD_LL_IsStallEP>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2201      	movs	r2, #1
 80141be:	601a      	str	r2, [r3, #0]
 80141c0:	e002      	b.n	80141c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	2200      	movs	r2, #0
 80141c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	2202      	movs	r2, #2
 80141cc:	4619      	mov	r1, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 fbe1 	bl	8014996 <USBD_CtlSendData>
              break;
 80141d4:	e004      	b.n	80141e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80141d6:	6839      	ldr	r1, [r7, #0]
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f000 fb6b 	bl	80148b4 <USBD_CtlError>
              break;
 80141de:	bf00      	nop
          }
          break;
 80141e0:	e004      	b.n	80141ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80141e2:	6839      	ldr	r1, [r7, #0]
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 fb65 	bl	80148b4 <USBD_CtlError>
          break;
 80141ea:	bf00      	nop
      }
      break;
 80141ec:	e004      	b.n	80141f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80141ee:	6839      	ldr	r1, [r7, #0]
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 fb5f 	bl	80148b4 <USBD_CtlError>
      break;
 80141f6:	bf00      	nop
  }

  return ret;
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
	...

08014204 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801420e:	2300      	movs	r3, #0
 8014210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014212:	2300      	movs	r3, #0
 8014214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014216:	2300      	movs	r3, #0
 8014218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	885b      	ldrh	r3, [r3, #2]
 801421e:	0a1b      	lsrs	r3, r3, #8
 8014220:	b29b      	uxth	r3, r3
 8014222:	3b01      	subs	r3, #1
 8014224:	2b0e      	cmp	r3, #14
 8014226:	f200 8152 	bhi.w	80144ce <USBD_GetDescriptor+0x2ca>
 801422a:	a201      	add	r2, pc, #4	; (adr r2, 8014230 <USBD_GetDescriptor+0x2c>)
 801422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014230:	080142a1 	.word	0x080142a1
 8014234:	080142b9 	.word	0x080142b9
 8014238:	080142f9 	.word	0x080142f9
 801423c:	080144cf 	.word	0x080144cf
 8014240:	080144cf 	.word	0x080144cf
 8014244:	0801446f 	.word	0x0801446f
 8014248:	0801449b 	.word	0x0801449b
 801424c:	080144cf 	.word	0x080144cf
 8014250:	080144cf 	.word	0x080144cf
 8014254:	080144cf 	.word	0x080144cf
 8014258:	080144cf 	.word	0x080144cf
 801425c:	080144cf 	.word	0x080144cf
 8014260:	080144cf 	.word	0x080144cf
 8014264:	080144cf 	.word	0x080144cf
 8014268:	0801426d 	.word	0x0801426d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014272:	69db      	ldr	r3, [r3, #28]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00b      	beq.n	8014290 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801427e:	69db      	ldr	r3, [r3, #28]
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	7c12      	ldrb	r2, [r2, #16]
 8014284:	f107 0108 	add.w	r1, r7, #8
 8014288:	4610      	mov	r0, r2
 801428a:	4798      	blx	r3
 801428c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801428e:	e126      	b.n	80144de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014290:	6839      	ldr	r1, [r7, #0]
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f000 fb0e 	bl	80148b4 <USBD_CtlError>
        err++;
 8014298:	7afb      	ldrb	r3, [r7, #11]
 801429a:	3301      	adds	r3, #1
 801429c:	72fb      	strb	r3, [r7, #11]
      break;
 801429e:	e11e      	b.n	80144de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	7c12      	ldrb	r2, [r2, #16]
 80142ac:	f107 0108 	add.w	r1, r7, #8
 80142b0:	4610      	mov	r0, r2
 80142b2:	4798      	blx	r3
 80142b4:	60f8      	str	r0, [r7, #12]
      break;
 80142b6:	e112      	b.n	80144de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	7c1b      	ldrb	r3, [r3, #16]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d10d      	bne.n	80142dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c8:	f107 0208 	add.w	r2, r7, #8
 80142cc:	4610      	mov	r0, r2
 80142ce:	4798      	blx	r3
 80142d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	3301      	adds	r3, #1
 80142d6:	2202      	movs	r2, #2
 80142d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80142da:	e100      	b.n	80144de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e4:	f107 0208 	add.w	r2, r7, #8
 80142e8:	4610      	mov	r0, r2
 80142ea:	4798      	blx	r3
 80142ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	3301      	adds	r3, #1
 80142f2:	2202      	movs	r2, #2
 80142f4:	701a      	strb	r2, [r3, #0]
      break;
 80142f6:	e0f2      	b.n	80144de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	885b      	ldrh	r3, [r3, #2]
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	2b05      	cmp	r3, #5
 8014300:	f200 80ac 	bhi.w	801445c <USBD_GetDescriptor+0x258>
 8014304:	a201      	add	r2, pc, #4	; (adr r2, 801430c <USBD_GetDescriptor+0x108>)
 8014306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430a:	bf00      	nop
 801430c:	08014325 	.word	0x08014325
 8014310:	08014359 	.word	0x08014359
 8014314:	0801438d 	.word	0x0801438d
 8014318:	080143c1 	.word	0x080143c1
 801431c:	080143f5 	.word	0x080143f5
 8014320:	08014429 	.word	0x08014429
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00b      	beq.n	8014348 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	7c12      	ldrb	r2, [r2, #16]
 801433c:	f107 0108 	add.w	r1, r7, #8
 8014340:	4610      	mov	r0, r2
 8014342:	4798      	blx	r3
 8014344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014346:	e091      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f000 fab2 	bl	80148b4 <USBD_CtlError>
            err++;
 8014350:	7afb      	ldrb	r3, [r7, #11]
 8014352:	3301      	adds	r3, #1
 8014354:	72fb      	strb	r3, [r7, #11]
          break;
 8014356:	e089      	b.n	801446c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d00b      	beq.n	801437c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801436a:	689b      	ldr	r3, [r3, #8]
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	7c12      	ldrb	r2, [r2, #16]
 8014370:	f107 0108 	add.w	r1, r7, #8
 8014374:	4610      	mov	r0, r2
 8014376:	4798      	blx	r3
 8014378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801437a:	e077      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801437c:	6839      	ldr	r1, [r7, #0]
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f000 fa98 	bl	80148b4 <USBD_CtlError>
            err++;
 8014384:	7afb      	ldrb	r3, [r7, #11]
 8014386:	3301      	adds	r3, #1
 8014388:	72fb      	strb	r3, [r7, #11]
          break;
 801438a:	e06f      	b.n	801446c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d00b      	beq.n	80143b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	7c12      	ldrb	r2, [r2, #16]
 80143a4:	f107 0108 	add.w	r1, r7, #8
 80143a8:	4610      	mov	r0, r2
 80143aa:	4798      	blx	r3
 80143ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143ae:	e05d      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143b0:	6839      	ldr	r1, [r7, #0]
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f000 fa7e 	bl	80148b4 <USBD_CtlError>
            err++;
 80143b8:	7afb      	ldrb	r3, [r7, #11]
 80143ba:	3301      	adds	r3, #1
 80143bc:	72fb      	strb	r3, [r7, #11]
          break;
 80143be:	e055      	b.n	801446c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143c6:	691b      	ldr	r3, [r3, #16]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d00b      	beq.n	80143e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143d2:	691b      	ldr	r3, [r3, #16]
 80143d4:	687a      	ldr	r2, [r7, #4]
 80143d6:	7c12      	ldrb	r2, [r2, #16]
 80143d8:	f107 0108 	add.w	r1, r7, #8
 80143dc:	4610      	mov	r0, r2
 80143de:	4798      	blx	r3
 80143e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143e2:	e043      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143e4:	6839      	ldr	r1, [r7, #0]
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 fa64 	bl	80148b4 <USBD_CtlError>
            err++;
 80143ec:	7afb      	ldrb	r3, [r7, #11]
 80143ee:	3301      	adds	r3, #1
 80143f0:	72fb      	strb	r3, [r7, #11]
          break;
 80143f2:	e03b      	b.n	801446c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143fa:	695b      	ldr	r3, [r3, #20]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00b      	beq.n	8014418 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014406:	695b      	ldr	r3, [r3, #20]
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	7c12      	ldrb	r2, [r2, #16]
 801440c:	f107 0108 	add.w	r1, r7, #8
 8014410:	4610      	mov	r0, r2
 8014412:	4798      	blx	r3
 8014414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014416:	e029      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014418:	6839      	ldr	r1, [r7, #0]
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f000 fa4a 	bl	80148b4 <USBD_CtlError>
            err++;
 8014420:	7afb      	ldrb	r3, [r7, #11]
 8014422:	3301      	adds	r3, #1
 8014424:	72fb      	strb	r3, [r7, #11]
          break;
 8014426:	e021      	b.n	801446c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801442e:	699b      	ldr	r3, [r3, #24]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00b      	beq.n	801444c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801443a:	699b      	ldr	r3, [r3, #24]
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	7c12      	ldrb	r2, [r2, #16]
 8014440:	f107 0108 	add.w	r1, r7, #8
 8014444:	4610      	mov	r0, r2
 8014446:	4798      	blx	r3
 8014448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801444a:	e00f      	b.n	801446c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fa30 	bl	80148b4 <USBD_CtlError>
            err++;
 8014454:	7afb      	ldrb	r3, [r7, #11]
 8014456:	3301      	adds	r3, #1
 8014458:	72fb      	strb	r3, [r7, #11]
          break;
 801445a:	e007      	b.n	801446c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 fa28 	bl	80148b4 <USBD_CtlError>
          err++;
 8014464:	7afb      	ldrb	r3, [r7, #11]
 8014466:	3301      	adds	r3, #1
 8014468:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801446a:	bf00      	nop
      }
      break;
 801446c:	e037      	b.n	80144de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	7c1b      	ldrb	r3, [r3, #16]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d109      	bne.n	801448a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801447e:	f107 0208 	add.w	r2, r7, #8
 8014482:	4610      	mov	r0, r2
 8014484:	4798      	blx	r3
 8014486:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014488:	e029      	b.n	80144de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801448a:	6839      	ldr	r1, [r7, #0]
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f000 fa11 	bl	80148b4 <USBD_CtlError>
        err++;
 8014492:	7afb      	ldrb	r3, [r7, #11]
 8014494:	3301      	adds	r3, #1
 8014496:	72fb      	strb	r3, [r7, #11]
      break;
 8014498:	e021      	b.n	80144de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	7c1b      	ldrb	r3, [r3, #16]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10d      	bne.n	80144be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144aa:	f107 0208 	add.w	r2, r7, #8
 80144ae:	4610      	mov	r0, r2
 80144b0:	4798      	blx	r3
 80144b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	3301      	adds	r3, #1
 80144b8:	2207      	movs	r2, #7
 80144ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144bc:	e00f      	b.n	80144de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 f9f7 	bl	80148b4 <USBD_CtlError>
        err++;
 80144c6:	7afb      	ldrb	r3, [r7, #11]
 80144c8:	3301      	adds	r3, #1
 80144ca:	72fb      	strb	r3, [r7, #11]
      break;
 80144cc:	e007      	b.n	80144de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f9ef 	bl	80148b4 <USBD_CtlError>
      err++;
 80144d6:	7afb      	ldrb	r3, [r7, #11]
 80144d8:	3301      	adds	r3, #1
 80144da:	72fb      	strb	r3, [r7, #11]
      break;
 80144dc:	bf00      	nop
  }

  if (err != 0U)
 80144de:	7afb      	ldrb	r3, [r7, #11]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d11e      	bne.n	8014522 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	88db      	ldrh	r3, [r3, #6]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d016      	beq.n	801451a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80144ec:	893b      	ldrh	r3, [r7, #8]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00e      	beq.n	8014510 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	88da      	ldrh	r2, [r3, #6]
 80144f6:	893b      	ldrh	r3, [r7, #8]
 80144f8:	4293      	cmp	r3, r2
 80144fa:	bf28      	it	cs
 80144fc:	4613      	movcs	r3, r2
 80144fe:	b29b      	uxth	r3, r3
 8014500:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014502:	893b      	ldrh	r3, [r7, #8]
 8014504:	461a      	mov	r2, r3
 8014506:	68f9      	ldr	r1, [r7, #12]
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 fa44 	bl	8014996 <USBD_CtlSendData>
 801450e:	e009      	b.n	8014524 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f9ce 	bl	80148b4 <USBD_CtlError>
 8014518:	e004      	b.n	8014524 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fa95 	bl	8014a4a <USBD_CtlSendStatus>
 8014520:	e000      	b.n	8014524 <USBD_GetDescriptor+0x320>
    return;
 8014522:	bf00      	nop
  }
}
 8014524:	3710      	adds	r7, #16
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop

0801452c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	889b      	ldrh	r3, [r3, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d131      	bne.n	80145a2 <USBD_SetAddress+0x76>
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	88db      	ldrh	r3, [r3, #6]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d12d      	bne.n	80145a2 <USBD_SetAddress+0x76>
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	885b      	ldrh	r3, [r3, #2]
 801454a:	2b7f      	cmp	r3, #127	; 0x7f
 801454c:	d829      	bhi.n	80145a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	885b      	ldrh	r3, [r3, #2]
 8014552:	b2db      	uxtb	r3, r3
 8014554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014558:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014560:	b2db      	uxtb	r3, r3
 8014562:	2b03      	cmp	r3, #3
 8014564:	d104      	bne.n	8014570 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014566:	6839      	ldr	r1, [r7, #0]
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f000 f9a3 	bl	80148b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801456e:	e01d      	b.n	80145ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	7bfa      	ldrb	r2, [r7, #15]
 8014574:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014578:	7bfb      	ldrb	r3, [r7, #15]
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f000 fed6 	bl	801532e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f000 fa61 	bl	8014a4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014588:	7bfb      	ldrb	r3, [r7, #15]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d004      	beq.n	8014598 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2202      	movs	r2, #2
 8014592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014596:	e009      	b.n	80145ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2201      	movs	r2, #1
 801459c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145a0:	e004      	b.n	80145ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80145a2:	6839      	ldr	r1, [r7, #0]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 f985 	bl	80148b4 <USBD_CtlError>
  }
}
 80145aa:	bf00      	nop
 80145ac:	bf00      	nop
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145be:	2300      	movs	r3, #0
 80145c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	885b      	ldrh	r3, [r3, #2]
 80145c6:	b2da      	uxtb	r2, r3
 80145c8:	4b4c      	ldr	r3, [pc, #304]	; (80146fc <USBD_SetConfig+0x148>)
 80145ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145cc:	4b4b      	ldr	r3, [pc, #300]	; (80146fc <USBD_SetConfig+0x148>)
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d905      	bls.n	80145e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80145d4:	6839      	ldr	r1, [r7, #0]
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f000 f96c 	bl	80148b4 <USBD_CtlError>
    return USBD_FAIL;
 80145dc:	2303      	movs	r3, #3
 80145de:	e088      	b.n	80146f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d002      	beq.n	80145f2 <USBD_SetConfig+0x3e>
 80145ec:	2b03      	cmp	r3, #3
 80145ee:	d025      	beq.n	801463c <USBD_SetConfig+0x88>
 80145f0:	e071      	b.n	80146d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80145f2:	4b42      	ldr	r3, [pc, #264]	; (80146fc <USBD_SetConfig+0x148>)
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d01c      	beq.n	8014634 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80145fa:	4b40      	ldr	r3, [pc, #256]	; (80146fc <USBD_SetConfig+0x148>)
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	461a      	mov	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014604:	4b3d      	ldr	r3, [pc, #244]	; (80146fc <USBD_SetConfig+0x148>)
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	4619      	mov	r1, r3
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7ff f992 	bl	8013934 <USBD_SetClassConfig>
 8014610:	4603      	mov	r3, r0
 8014612:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014614:	7bfb      	ldrb	r3, [r7, #15]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d004      	beq.n	8014624 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 f949 	bl	80148b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014622:	e065      	b.n	80146f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 fa10 	bl	8014a4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2203      	movs	r2, #3
 801462e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014632:	e05d      	b.n	80146f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 fa08 	bl	8014a4a <USBD_CtlSendStatus>
      break;
 801463a:	e059      	b.n	80146f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801463c:	4b2f      	ldr	r3, [pc, #188]	; (80146fc <USBD_SetConfig+0x148>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d112      	bne.n	801466a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2202      	movs	r2, #2
 8014648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801464c:	4b2b      	ldr	r3, [pc, #172]	; (80146fc <USBD_SetConfig+0x148>)
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	461a      	mov	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014656:	4b29      	ldr	r3, [pc, #164]	; (80146fc <USBD_SetConfig+0x148>)
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	4619      	mov	r1, r3
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f7ff f985 	bl	801396c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 f9f1 	bl	8014a4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014668:	e042      	b.n	80146f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801466a:	4b24      	ldr	r3, [pc, #144]	; (80146fc <USBD_SetConfig+0x148>)
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	461a      	mov	r2, r3
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	429a      	cmp	r2, r3
 8014676:	d02a      	beq.n	80146ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	685b      	ldr	r3, [r3, #4]
 801467c:	b2db      	uxtb	r3, r3
 801467e:	4619      	mov	r1, r3
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7ff f973 	bl	801396c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014686:	4b1d      	ldr	r3, [pc, #116]	; (80146fc <USBD_SetConfig+0x148>)
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	461a      	mov	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014690:	4b1a      	ldr	r3, [pc, #104]	; (80146fc <USBD_SetConfig+0x148>)
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	4619      	mov	r1, r3
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f7ff f94c 	bl	8013934 <USBD_SetClassConfig>
 801469c:	4603      	mov	r3, r0
 801469e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80146a0:	7bfb      	ldrb	r3, [r7, #15]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00f      	beq.n	80146c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 f903 	bl	80148b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	b2db      	uxtb	r3, r3
 80146b4:	4619      	mov	r1, r3
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f7ff f958 	bl	801396c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2202      	movs	r2, #2
 80146c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80146c4:	e014      	b.n	80146f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f000 f9bf 	bl	8014a4a <USBD_CtlSendStatus>
      break;
 80146cc:	e010      	b.n	80146f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f9bb 	bl	8014a4a <USBD_CtlSendStatus>
      break;
 80146d4:	e00c      	b.n	80146f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80146d6:	6839      	ldr	r1, [r7, #0]
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 f8eb 	bl	80148b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146de:	4b07      	ldr	r3, [pc, #28]	; (80146fc <USBD_SetConfig+0x148>)
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	4619      	mov	r1, r3
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7ff f941 	bl	801396c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80146ea:	2303      	movs	r3, #3
 80146ec:	73fb      	strb	r3, [r7, #15]
      break;
 80146ee:	bf00      	nop
  }

  return ret;
 80146f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	20000aa4 	.word	0x20000aa4

08014700 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	88db      	ldrh	r3, [r3, #6]
 801470e:	2b01      	cmp	r3, #1
 8014710:	d004      	beq.n	801471c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014712:	6839      	ldr	r1, [r7, #0]
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f000 f8cd 	bl	80148b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801471a:	e023      	b.n	8014764 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b02      	cmp	r3, #2
 8014726:	dc02      	bgt.n	801472e <USBD_GetConfig+0x2e>
 8014728:	2b00      	cmp	r3, #0
 801472a:	dc03      	bgt.n	8014734 <USBD_GetConfig+0x34>
 801472c:	e015      	b.n	801475a <USBD_GetConfig+0x5a>
 801472e:	2b03      	cmp	r3, #3
 8014730:	d00b      	beq.n	801474a <USBD_GetConfig+0x4a>
 8014732:	e012      	b.n	801475a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	3308      	adds	r3, #8
 801473e:	2201      	movs	r2, #1
 8014740:	4619      	mov	r1, r3
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 f927 	bl	8014996 <USBD_CtlSendData>
        break;
 8014748:	e00c      	b.n	8014764 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	3304      	adds	r3, #4
 801474e:	2201      	movs	r2, #1
 8014750:	4619      	mov	r1, r3
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f91f 	bl	8014996 <USBD_CtlSendData>
        break;
 8014758:	e004      	b.n	8014764 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801475a:	6839      	ldr	r1, [r7, #0]
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 f8a9 	bl	80148b4 <USBD_CtlError>
        break;
 8014762:	bf00      	nop
}
 8014764:	bf00      	nop
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801477c:	b2db      	uxtb	r3, r3
 801477e:	3b01      	subs	r3, #1
 8014780:	2b02      	cmp	r3, #2
 8014782:	d81e      	bhi.n	80147c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	88db      	ldrh	r3, [r3, #6]
 8014788:	2b02      	cmp	r3, #2
 801478a:	d004      	beq.n	8014796 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801478c:	6839      	ldr	r1, [r7, #0]
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f890 	bl	80148b4 <USBD_CtlError>
        break;
 8014794:	e01a      	b.n	80147cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2201      	movs	r2, #1
 801479a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d005      	beq.n	80147b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	f043 0202 	orr.w	r2, r3, #2
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	330c      	adds	r3, #12
 80147b6:	2202      	movs	r2, #2
 80147b8:	4619      	mov	r1, r3
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f8eb 	bl	8014996 <USBD_CtlSendData>
      break;
 80147c0:	e004      	b.n	80147cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80147c2:	6839      	ldr	r1, [r7, #0]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 f875 	bl	80148b4 <USBD_CtlError>
      break;
 80147ca:	bf00      	nop
  }
}
 80147cc:	bf00      	nop
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	885b      	ldrh	r3, [r3, #2]
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d106      	bne.n	80147f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2201      	movs	r2, #1
 80147ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 f92b 	bl	8014a4a <USBD_CtlSendStatus>
  }
}
 80147f4:	bf00      	nop
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801480c:	b2db      	uxtb	r3, r3
 801480e:	3b01      	subs	r3, #1
 8014810:	2b02      	cmp	r3, #2
 8014812:	d80b      	bhi.n	801482c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	885b      	ldrh	r3, [r3, #2]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d10c      	bne.n	8014836 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2200      	movs	r2, #0
 8014820:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 f910 	bl	8014a4a <USBD_CtlSendStatus>
      }
      break;
 801482a:	e004      	b.n	8014836 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801482c:	6839      	ldr	r1, [r7, #0]
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f000 f840 	bl	80148b4 <USBD_CtlError>
      break;
 8014834:	e000      	b.n	8014838 <USBD_ClrFeature+0x3c>
      break;
 8014836:	bf00      	nop
  }
}
 8014838:	bf00      	nop
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	781a      	ldrb	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	3301      	adds	r3, #1
 801485a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	781a      	ldrb	r2, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	3301      	adds	r3, #1
 8014868:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f7ff fa92 	bl	8013d94 <SWAPBYTE>
 8014870:	4603      	mov	r3, r0
 8014872:	461a      	mov	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	3301      	adds	r3, #1
 801487c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	3301      	adds	r3, #1
 8014882:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff fa85 	bl	8013d94 <SWAPBYTE>
 801488a:	4603      	mov	r3, r0
 801488c:	461a      	mov	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	3301      	adds	r3, #1
 8014896:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3301      	adds	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f7ff fa78 	bl	8013d94 <SWAPBYTE>
 80148a4:	4603      	mov	r3, r0
 80148a6:	461a      	mov	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	80da      	strh	r2, [r3, #6]
}
 80148ac:	bf00      	nop
 80148ae:	3710      	adds	r7, #16
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148be:	2180      	movs	r1, #128	; 0x80
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 fcc9 	bl	8015258 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148c6:	2100      	movs	r1, #0
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 fcc5 	bl	8015258 <USBD_LL_StallEP>
}
 80148ce:	bf00      	nop
 80148d0:	3708      	adds	r7, #8
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}

080148d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80148d6:	b580      	push	{r7, lr}
 80148d8:	b086      	sub	sp, #24
 80148da:	af00      	add	r7, sp, #0
 80148dc:	60f8      	str	r0, [r7, #12]
 80148de:	60b9      	str	r1, [r7, #8]
 80148e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80148e2:	2300      	movs	r3, #0
 80148e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d036      	beq.n	801495a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80148f0:	6938      	ldr	r0, [r7, #16]
 80148f2:	f000 f836 	bl	8014962 <USBD_GetLen>
 80148f6:	4603      	mov	r3, r0
 80148f8:	3301      	adds	r3, #1
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	b29a      	uxth	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014904:	7dfb      	ldrb	r3, [r7, #23]
 8014906:	68ba      	ldr	r2, [r7, #8]
 8014908:	4413      	add	r3, r2
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	7812      	ldrb	r2, [r2, #0]
 801490e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014910:	7dfb      	ldrb	r3, [r7, #23]
 8014912:	3301      	adds	r3, #1
 8014914:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	68ba      	ldr	r2, [r7, #8]
 801491a:	4413      	add	r3, r2
 801491c:	2203      	movs	r2, #3
 801491e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014920:	7dfb      	ldrb	r3, [r7, #23]
 8014922:	3301      	adds	r3, #1
 8014924:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014926:	e013      	b.n	8014950 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014928:	7dfb      	ldrb	r3, [r7, #23]
 801492a:	68ba      	ldr	r2, [r7, #8]
 801492c:	4413      	add	r3, r2
 801492e:	693a      	ldr	r2, [r7, #16]
 8014930:	7812      	ldrb	r2, [r2, #0]
 8014932:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	3301      	adds	r3, #1
 8014938:	613b      	str	r3, [r7, #16]
    idx++;
 801493a:	7dfb      	ldrb	r3, [r7, #23]
 801493c:	3301      	adds	r3, #1
 801493e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014940:	7dfb      	ldrb	r3, [r7, #23]
 8014942:	68ba      	ldr	r2, [r7, #8]
 8014944:	4413      	add	r3, r2
 8014946:	2200      	movs	r2, #0
 8014948:	701a      	strb	r2, [r3, #0]
    idx++;
 801494a:	7dfb      	ldrb	r3, [r7, #23]
 801494c:	3301      	adds	r3, #1
 801494e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d1e7      	bne.n	8014928 <USBD_GetString+0x52>
 8014958:	e000      	b.n	801495c <USBD_GetString+0x86>
    return;
 801495a:	bf00      	nop
  }
}
 801495c:	3718      	adds	r7, #24
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}

08014962 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014962:	b480      	push	{r7}
 8014964:	b085      	sub	sp, #20
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801496a:	2300      	movs	r3, #0
 801496c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014972:	e005      	b.n	8014980 <USBD_GetLen+0x1e>
  {
    len++;
 8014974:	7bfb      	ldrb	r3, [r7, #15]
 8014976:	3301      	adds	r3, #1
 8014978:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	3301      	adds	r3, #1
 801497e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d1f5      	bne.n	8014974 <USBD_GetLen+0x12>
  }

  return len;
 8014988:	7bfb      	ldrb	r3, [r7, #15]
}
 801498a:	4618      	mov	r0, r3
 801498c:	3714      	adds	r7, #20
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr

08014996 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b084      	sub	sp, #16
 801499a:	af00      	add	r7, sp, #0
 801499c:	60f8      	str	r0, [r7, #12]
 801499e:	60b9      	str	r1, [r7, #8]
 80149a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2202      	movs	r2, #2
 80149a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	2100      	movs	r1, #0
 80149bc:	68f8      	ldr	r0, [r7, #12]
 80149be:	f000 fcd5 	bl	801536c <USBD_LL_Transmit>

  return USBD_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3710      	adds	r7, #16
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	68ba      	ldr	r2, [r7, #8]
 80149dc:	2100      	movs	r1, #0
 80149de:	68f8      	ldr	r0, [r7, #12]
 80149e0:	f000 fcc4 	bl	801536c <USBD_LL_Transmit>

  return USBD_OK;
 80149e4:	2300      	movs	r3, #0
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b084      	sub	sp, #16
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	60f8      	str	r0, [r7, #12]
 80149f6:	60b9      	str	r1, [r7, #8]
 80149f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2203      	movs	r2, #3
 80149fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	68ba      	ldr	r2, [r7, #8]
 8014a16:	2100      	movs	r1, #0
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f000 fcc8 	bl	80153ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3710      	adds	r7, #16
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	68ba      	ldr	r2, [r7, #8]
 8014a38:	2100      	movs	r1, #0
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f000 fcb7 	bl	80153ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a40:	2300      	movs	r3, #0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3710      	adds	r7, #16
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}

08014a4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b082      	sub	sp, #8
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2204      	movs	r2, #4
 8014a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	2100      	movs	r1, #0
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 fc83 	bl	801536c <USBD_LL_Transmit>

  return USBD_OK;
 8014a66:	2300      	movs	r3, #0
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}

08014a70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2205      	movs	r2, #5
 8014a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014a80:	2300      	movs	r3, #0
 8014a82:	2200      	movs	r2, #0
 8014a84:	2100      	movs	r1, #0
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fc91 	bl	80153ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
	...

08014a98 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	4912      	ldr	r1, [pc, #72]	; (8014ae8 <MX_USB_Device_Init+0x50>)
 8014aa0:	4812      	ldr	r0, [pc, #72]	; (8014aec <MX_USB_Device_Init+0x54>)
 8014aa2:	f7fe fed9 	bl	8013858 <USBD_Init>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014aac:	f7f0 fe48 	bl	8005740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014ab0:	490f      	ldr	r1, [pc, #60]	; (8014af0 <MX_USB_Device_Init+0x58>)
 8014ab2:	480e      	ldr	r0, [pc, #56]	; (8014aec <MX_USB_Device_Init+0x54>)
 8014ab4:	f7fe ff00 	bl	80138b8 <USBD_RegisterClass>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d001      	beq.n	8014ac2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014abe:	f7f0 fe3f 	bl	8005740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014ac2:	490c      	ldr	r1, [pc, #48]	; (8014af4 <MX_USB_Device_Init+0x5c>)
 8014ac4:	4809      	ldr	r0, [pc, #36]	; (8014aec <MX_USB_Device_Init+0x54>)
 8014ac6:	f7fe fe21 	bl	801370c <USBD_CDC_RegisterInterface>
 8014aca:	4603      	mov	r3, r0
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d001      	beq.n	8014ad4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014ad0:	f7f0 fe36 	bl	8005740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014ad4:	4805      	ldr	r0, [pc, #20]	; (8014aec <MX_USB_Device_Init+0x54>)
 8014ad6:	f7fe ff16 	bl	8013906 <USBD_Start>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d001      	beq.n	8014ae4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014ae0:	f7f0 fe2e 	bl	8005740 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014ae4:	bf00      	nop
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	20000130 	.word	0x20000130
 8014aec:	20000aa8 	.word	0x20000aa8
 8014af0:	20000018 	.word	0x20000018
 8014af4:	2000011c 	.word	0x2000011c

08014af8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014afc:	2200      	movs	r2, #0
 8014afe:	4905      	ldr	r1, [pc, #20]	; (8014b14 <CDC_Init_FS+0x1c>)
 8014b00:	4805      	ldr	r0, [pc, #20]	; (8014b18 <CDC_Init_FS+0x20>)
 8014b02:	f7fe fe18 	bl	8013736 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014b06:	4905      	ldr	r1, [pc, #20]	; (8014b1c <CDC_Init_FS+0x24>)
 8014b08:	4803      	ldr	r0, [pc, #12]	; (8014b18 <CDC_Init_FS+0x20>)
 8014b0a:	f7fe fe32 	bl	8013772 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8014b0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	200015b8 	.word	0x200015b8
 8014b18:	20000aa8 	.word	0x20000aa8
 8014b1c:	20000db8 	.word	0x20000db8

08014b20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014b20:	b480      	push	{r7}
 8014b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8014b24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr

08014b30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014b30:	b480      	push	{r7}
 8014b32:	b085      	sub	sp, #20
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	4603      	mov	r3, r0
 8014b38:	6039      	str	r1, [r7, #0]
 8014b3a:	71fb      	strb	r3, [r7, #7]
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8014b40:	79fb      	ldrb	r3, [r7, #7]
 8014b42:	2b23      	cmp	r3, #35	; 0x23
 8014b44:	d85a      	bhi.n	8014bfc <CDC_Control_FS+0xcc>
 8014b46:	a201      	add	r2, pc, #4	; (adr r2, 8014b4c <CDC_Control_FS+0x1c>)
 8014b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b4c:	08014bfd 	.word	0x08014bfd
 8014b50:	08014bfd 	.word	0x08014bfd
 8014b54:	08014bfd 	.word	0x08014bfd
 8014b58:	08014bfd 	.word	0x08014bfd
 8014b5c:	08014bfd 	.word	0x08014bfd
 8014b60:	08014bfd 	.word	0x08014bfd
 8014b64:	08014bfd 	.word	0x08014bfd
 8014b68:	08014bfd 	.word	0x08014bfd
 8014b6c:	08014bfd 	.word	0x08014bfd
 8014b70:	08014bfd 	.word	0x08014bfd
 8014b74:	08014bfd 	.word	0x08014bfd
 8014b78:	08014bfd 	.word	0x08014bfd
 8014b7c:	08014bfd 	.word	0x08014bfd
 8014b80:	08014bfd 	.word	0x08014bfd
 8014b84:	08014bfd 	.word	0x08014bfd
 8014b88:	08014bfd 	.word	0x08014bfd
 8014b8c:	08014bfd 	.word	0x08014bfd
 8014b90:	08014bfd 	.word	0x08014bfd
 8014b94:	08014bfd 	.word	0x08014bfd
 8014b98:	08014bfd 	.word	0x08014bfd
 8014b9c:	08014bfd 	.word	0x08014bfd
 8014ba0:	08014bfd 	.word	0x08014bfd
 8014ba4:	08014bfd 	.word	0x08014bfd
 8014ba8:	08014bfd 	.word	0x08014bfd
 8014bac:	08014bfd 	.word	0x08014bfd
 8014bb0:	08014bfd 	.word	0x08014bfd
 8014bb4:	08014bfd 	.word	0x08014bfd
 8014bb8:	08014bfd 	.word	0x08014bfd
 8014bbc:	08014bfd 	.word	0x08014bfd
 8014bc0:	08014bfd 	.word	0x08014bfd
 8014bc4:	08014bfd 	.word	0x08014bfd
 8014bc8:	08014bfd 	.word	0x08014bfd
 8014bcc:	08014bfd 	.word	0x08014bfd
 8014bd0:	08014bfd 	.word	0x08014bfd
 8014bd4:	08014bdd 	.word	0x08014bdd
 8014bd8:	08014bfd 	.word	0x08014bfd

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	885b      	ldrh	r3, [r3, #2]
 8014be4:	f003 0301 	and.w	r3, r3, #1
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d003      	beq.n	8014bf4 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 8014bec:	4b07      	ldr	r3, [pc, #28]	; (8014c0c <CDC_Control_FS+0xdc>)
 8014bee:	2201      	movs	r2, #1
 8014bf0:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 8014bf2:	e004      	b.n	8014bfe <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8014bf4:	4b05      	ldr	r3, [pc, #20]	; (8014c0c <CDC_Control_FS+0xdc>)
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	701a      	strb	r2, [r3, #0]
		break;
 8014bfa:	e000      	b.n	8014bfe <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8014bfc:	bf00      	nop
	}

	return (USBD_OK);
 8014bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3714      	adds	r7, #20
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr
 8014c0c:	20001db8 	.word	0x20001db8

08014c10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014c1a:	6879      	ldr	r1, [r7, #4]
 8014c1c:	480f      	ldr	r0, [pc, #60]	; (8014c5c <CDC_Receive_FS+0x4c>)
 8014c1e:	f7fe fda8 	bl	8013772 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014c22:	480e      	ldr	r0, [pc, #56]	; (8014c5c <CDC_Receive_FS+0x4c>)
 8014c24:	f7fe fdee 	bl	8013804 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8014c28:	2240      	movs	r2, #64	; 0x40
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	480c      	ldr	r0, [pc, #48]	; (8014c60 <CDC_Receive_FS+0x50>)
 8014c2e:	f000 fcf3 	bl	8015618 <memset>
	uint8_t len = (uint8_t) *Len;
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8014c38:	7bfb      	ldrb	r3, [r7, #15]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	6879      	ldr	r1, [r7, #4]
 8014c3e:	4808      	ldr	r0, [pc, #32]	; (8014c60 <CDC_Receive_FS+0x50>)
 8014c40:	f000 fcdc 	bl	80155fc <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8014c44:	7bfb      	ldrb	r3, [r7, #15]
 8014c46:	461a      	mov	r2, r3
 8014c48:	2100      	movs	r1, #0
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f000 fce4 	bl	8015618 <memset>

	return (USBD_OK);
 8014c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	20000aa8 	.word	0x20000aa8
 8014c60:	20000d78 	.word	0x20000d78

08014c64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014c70:	2300      	movs	r3, #0
 8014c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8014c74:	4b12      	ldr	r3, [pc, #72]	; (8014cc0 <CDC_Transmit_FS+0x5c>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d01b      	beq.n	8014cb4 <CDC_Transmit_FS+0x50>
 8014c7c:	4b11      	ldr	r3, [pc, #68]	; (8014cc4 <CDC_Transmit_FS+0x60>)
 8014c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	2b03      	cmp	r3, #3
 8014c86:	d115      	bne.n	8014cb4 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8014c88:	4b0e      	ldr	r3, [pc, #56]	; (8014cc4 <CDC_Transmit_FS+0x60>)
 8014c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c8e:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	e00b      	b.n	8014cb6 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014c9e:	887b      	ldrh	r3, [r7, #2]
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	6879      	ldr	r1, [r7, #4]
 8014ca4:	4807      	ldr	r0, [pc, #28]	; (8014cc4 <CDC_Transmit_FS+0x60>)
 8014ca6:	f7fe fd46 	bl	8013736 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014caa:	4806      	ldr	r0, [pc, #24]	; (8014cc4 <CDC_Transmit_FS+0x60>)
 8014cac:	f7fe fd7a 	bl	80137a4 <USBD_CDC_TransmitPacket>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8014cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3710      	adds	r7, #16
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	20001db8 	.word	0x20001db8
 8014cc4:	20000aa8 	.word	0x20000aa8

08014cc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b087      	sub	sp, #28
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	371c      	adds	r7, #28
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr
	...

08014cec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	6039      	str	r1, [r7, #0]
 8014cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	2212      	movs	r2, #18
 8014cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014cfe:	4b03      	ldr	r3, [pc, #12]	; (8014d0c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr
 8014d0c:	20000150 	.word	0x20000150

08014d10 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	4603      	mov	r3, r0
 8014d18:	6039      	str	r1, [r7, #0]
 8014d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	2204      	movs	r2, #4
 8014d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014d22:	4b03      	ldr	r3, [pc, #12]	; (8014d30 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	370c      	adds	r7, #12
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	20000164 	.word	0x20000164

08014d34 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	6039      	str	r1, [r7, #0]
 8014d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d40:	79fb      	ldrb	r3, [r7, #7]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d105      	bne.n	8014d52 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	4907      	ldr	r1, [pc, #28]	; (8014d68 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014d4a:	4808      	ldr	r0, [pc, #32]	; (8014d6c <USBD_CDC_ProductStrDescriptor+0x38>)
 8014d4c:	f7ff fdc3 	bl	80148d6 <USBD_GetString>
 8014d50:	e004      	b.n	8014d5c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	4904      	ldr	r1, [pc, #16]	; (8014d68 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014d56:	4805      	ldr	r0, [pc, #20]	; (8014d6c <USBD_CDC_ProductStrDescriptor+0x38>)
 8014d58:	f7ff fdbd 	bl	80148d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d5c:	4b02      	ldr	r3, [pc, #8]	; (8014d68 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3708      	adds	r7, #8
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20001dbc 	.word	0x20001dbc
 8014d6c:	0801887c 	.word	0x0801887c

08014d70 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	4603      	mov	r3, r0
 8014d78:	6039      	str	r1, [r7, #0]
 8014d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014d7c:	683a      	ldr	r2, [r7, #0]
 8014d7e:	4904      	ldr	r1, [pc, #16]	; (8014d90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014d80:	4804      	ldr	r0, [pc, #16]	; (8014d94 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014d82:	f7ff fda8 	bl	80148d6 <USBD_GetString>
  return USBD_StrDesc;
 8014d86:	4b02      	ldr	r3, [pc, #8]	; (8014d90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	20001dbc 	.word	0x20001dbc
 8014d94:	08018894 	.word	0x08018894

08014d98 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	4603      	mov	r3, r0
 8014da0:	6039      	str	r1, [r7, #0]
 8014da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	221a      	movs	r2, #26
 8014da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014daa:	f000 f843 	bl	8014e34 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014dae:	4b02      	ldr	r3, [pc, #8]	; (8014db8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	20000168 	.word	0x20000168

08014dbc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	6039      	str	r1, [r7, #0]
 8014dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014dc8:	79fb      	ldrb	r3, [r7, #7]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d105      	bne.n	8014dda <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014dce:	683a      	ldr	r2, [r7, #0]
 8014dd0:	4907      	ldr	r1, [pc, #28]	; (8014df0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014dd2:	4808      	ldr	r0, [pc, #32]	; (8014df4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014dd4:	f7ff fd7f 	bl	80148d6 <USBD_GetString>
 8014dd8:	e004      	b.n	8014de4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014dda:	683a      	ldr	r2, [r7, #0]
 8014ddc:	4904      	ldr	r1, [pc, #16]	; (8014df0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014dde:	4805      	ldr	r0, [pc, #20]	; (8014df4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014de0:	f7ff fd79 	bl	80148d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014de4:	4b02      	ldr	r3, [pc, #8]	; (8014df0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	20001dbc 	.word	0x20001dbc
 8014df4:	080188a8 	.word	0x080188a8

08014df8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	4603      	mov	r3, r0
 8014e00:	6039      	str	r1, [r7, #0]
 8014e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e04:	79fb      	ldrb	r3, [r7, #7]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d105      	bne.n	8014e16 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	4907      	ldr	r1, [pc, #28]	; (8014e2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014e0e:	4808      	ldr	r0, [pc, #32]	; (8014e30 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014e10:	f7ff fd61 	bl	80148d6 <USBD_GetString>
 8014e14:	e004      	b.n	8014e20 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	4904      	ldr	r1, [pc, #16]	; (8014e2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014e1a:	4805      	ldr	r0, [pc, #20]	; (8014e30 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014e1c:	f7ff fd5b 	bl	80148d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e20:	4b02      	ldr	r3, [pc, #8]	; (8014e2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3708      	adds	r7, #8
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	20001dbc 	.word	0x20001dbc
 8014e30:	080188b4 	.word	0x080188b4

08014e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014e3a:	4b0f      	ldr	r3, [pc, #60]	; (8014e78 <Get_SerialNum+0x44>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014e40:	4b0e      	ldr	r3, [pc, #56]	; (8014e7c <Get_SerialNum+0x48>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014e46:	4b0e      	ldr	r3, [pc, #56]	; (8014e80 <Get_SerialNum+0x4c>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014e4c:	68fa      	ldr	r2, [r7, #12]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4413      	add	r3, r2
 8014e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d009      	beq.n	8014e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014e5a:	2208      	movs	r2, #8
 8014e5c:	4909      	ldr	r1, [pc, #36]	; (8014e84 <Get_SerialNum+0x50>)
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f000 f814 	bl	8014e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014e64:	2204      	movs	r2, #4
 8014e66:	4908      	ldr	r1, [pc, #32]	; (8014e88 <Get_SerialNum+0x54>)
 8014e68:	68b8      	ldr	r0, [r7, #8]
 8014e6a:	f000 f80f 	bl	8014e8c <IntToUnicode>
  }
}
 8014e6e:	bf00      	nop
 8014e70:	3710      	adds	r7, #16
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	1fff7590 	.word	0x1fff7590
 8014e7c:	1fff7594 	.word	0x1fff7594
 8014e80:	1fff7598 	.word	0x1fff7598
 8014e84:	2000016a 	.word	0x2000016a
 8014e88:	2000017a 	.word	0x2000017a

08014e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b087      	sub	sp, #28
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	4613      	mov	r3, r2
 8014e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	75fb      	strb	r3, [r7, #23]
 8014ea2:	e027      	b.n	8014ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	0f1b      	lsrs	r3, r3, #28
 8014ea8:	2b09      	cmp	r3, #9
 8014eaa:	d80b      	bhi.n	8014ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	0f1b      	lsrs	r3, r3, #28
 8014eb0:	b2da      	uxtb	r2, r3
 8014eb2:	7dfb      	ldrb	r3, [r7, #23]
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	4619      	mov	r1, r3
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	440b      	add	r3, r1
 8014ebc:	3230      	adds	r2, #48	; 0x30
 8014ebe:	b2d2      	uxtb	r2, r2
 8014ec0:	701a      	strb	r2, [r3, #0]
 8014ec2:	e00a      	b.n	8014eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	0f1b      	lsrs	r3, r3, #28
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	7dfb      	ldrb	r3, [r7, #23]
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	4619      	mov	r1, r3
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	440b      	add	r3, r1
 8014ed4:	3237      	adds	r2, #55	; 0x37
 8014ed6:	b2d2      	uxtb	r2, r2
 8014ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	011b      	lsls	r3, r3, #4
 8014ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014ee0:	7dfb      	ldrb	r3, [r7, #23]
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	3301      	adds	r3, #1
 8014ee6:	68ba      	ldr	r2, [r7, #8]
 8014ee8:	4413      	add	r3, r2
 8014eea:	2200      	movs	r2, #0
 8014eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014eee:	7dfb      	ldrb	r3, [r7, #23]
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	75fb      	strb	r3, [r7, #23]
 8014ef4:	7dfa      	ldrb	r2, [r7, #23]
 8014ef6:	79fb      	ldrb	r3, [r7, #7]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d3d3      	bcc.n	8014ea4 <IntToUnicode+0x18>
  }
}
 8014efc:	bf00      	nop
 8014efe:	bf00      	nop
 8014f00:	371c      	adds	r7, #28
 8014f02:	46bd      	mov	sp, r7
 8014f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f08:	4770      	bx	lr
	...

08014f0c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b098      	sub	sp, #96	; 0x60
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8014f14:	f107 030c 	add.w	r3, r7, #12
 8014f18:	2254      	movs	r2, #84	; 0x54
 8014f1a:	2100      	movs	r1, #0
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f000 fb7b 	bl	8015618 <memset>
  if(pcdHandle->Instance==USB)
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4a15      	ldr	r2, [pc, #84]	; (8014f7c <HAL_PCD_MspInit+0x70>)
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	d122      	bne.n	8014f72 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014f30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014f32:	2300      	movs	r3, #0
 8014f34:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014f36:	f107 030c 	add.w	r3, r7, #12
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f8 fcc4 	bl	800d8c8 <HAL_RCCEx_PeriphCLKConfig>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d001      	beq.n	8014f4a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8014f46:	f7f0 fbfb 	bl	8005740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014f4a:	4b0d      	ldr	r3, [pc, #52]	; (8014f80 <HAL_PCD_MspInit+0x74>)
 8014f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f4e:	4a0c      	ldr	r2, [pc, #48]	; (8014f80 <HAL_PCD_MspInit+0x74>)
 8014f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014f54:	6593      	str	r3, [r2, #88]	; 0x58
 8014f56:	4b0a      	ldr	r3, [pc, #40]	; (8014f80 <HAL_PCD_MspInit+0x74>)
 8014f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014f5e:	60bb      	str	r3, [r7, #8]
 8014f60:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8014f62:	2200      	movs	r2, #0
 8014f64:	2100      	movs	r1, #0
 8014f66:	2014      	movs	r0, #20
 8014f68:	f7f3 fc99 	bl	800889e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014f6c:	2014      	movs	r0, #20
 8014f6e:	f7f3 fcb0 	bl	80088d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014f72:	bf00      	nop
 8014f74:	3760      	adds	r7, #96	; 0x60
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	40005c00 	.word	0x40005c00
 8014f80:	40021000 	.word	0x40021000

08014f84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014f98:	4619      	mov	r1, r3
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	f7fe fcfe 	bl	801399c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014fa0:	bf00      	nop
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014fba:	78fa      	ldrb	r2, [r7, #3]
 8014fbc:	6879      	ldr	r1, [r7, #4]
 8014fbe:	4613      	mov	r3, r2
 8014fc0:	009b      	lsls	r3, r3, #2
 8014fc2:	4413      	add	r3, r2
 8014fc4:	00db      	lsls	r3, r3, #3
 8014fc6:	440b      	add	r3, r1
 8014fc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	78fb      	ldrb	r3, [r7, #3]
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	f7fe fd38 	bl	8013a46 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014fd6:	bf00      	nop
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014ff0:	78fa      	ldrb	r2, [r7, #3]
 8014ff2:	6879      	ldr	r1, [r7, #4]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	440b      	add	r3, r1
 8014ffe:	333c      	adds	r3, #60	; 0x3c
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	78fb      	ldrb	r3, [r7, #3]
 8015004:	4619      	mov	r1, r3
 8015006:	f7fe fd81 	bl	8013b0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801500a:	bf00      	nop
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}

08015012 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015012:	b580      	push	{r7, lr}
 8015014:	b082      	sub	sp, #8
 8015016:	af00      	add	r7, sp, #0
 8015018:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015020:	4618      	mov	r0, r3
 8015022:	f7fe fe95 	bl	8013d50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}

0801502e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801502e:	b580      	push	{r7, lr}
 8015030:	b084      	sub	sp, #16
 8015032:	af00      	add	r7, sp, #0
 8015034:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015036:	2301      	movs	r3, #1
 8015038:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	2b02      	cmp	r3, #2
 8015040:	d001      	beq.n	8015046 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015042:	f7f0 fb7d 	bl	8005740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801504c:	7bfa      	ldrb	r2, [r7, #15]
 801504e:	4611      	mov	r1, r2
 8015050:	4618      	mov	r0, r3
 8015052:	f7fe fe3f 	bl	8013cd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801505c:	4618      	mov	r0, r3
 801505e:	f7fe fdeb 	bl	8013c38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015062:	bf00      	nop
 8015064:	3710      	adds	r7, #16
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
	...

0801506c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801507a:	4618      	mov	r0, r3
 801507c:	f7fe fe3a 	bl	8013cf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d005      	beq.n	8015094 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015088:	4b04      	ldr	r3, [pc, #16]	; (801509c <HAL_PCD_SuspendCallback+0x30>)
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	4a03      	ldr	r2, [pc, #12]	; (801509c <HAL_PCD_SuspendCallback+0x30>)
 801508e:	f043 0306 	orr.w	r3, r3, #6
 8015092:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015094:	bf00      	nop
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	e000ed00 	.word	0xe000ed00

080150a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	699b      	ldr	r3, [r3, #24]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d007      	beq.n	80150c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80150b0:	4b08      	ldr	r3, [pc, #32]	; (80150d4 <HAL_PCD_ResumeCallback+0x34>)
 80150b2:	691b      	ldr	r3, [r3, #16]
 80150b4:	4a07      	ldr	r2, [pc, #28]	; (80150d4 <HAL_PCD_ResumeCallback+0x34>)
 80150b6:	f023 0306 	bic.w	r3, r3, #6
 80150ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80150bc:	f000 f9fa 	bl	80154b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7fe fe2a 	bl	8013d20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	e000ed00 	.word	0xe000ed00

080150d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80150e0:	4a2b      	ldr	r2, [pc, #172]	; (8015190 <USBD_LL_Init+0xb8>)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4a29      	ldr	r2, [pc, #164]	; (8015190 <USBD_LL_Init+0xb8>)
 80150ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80150f0:	4b27      	ldr	r3, [pc, #156]	; (8015190 <USBD_LL_Init+0xb8>)
 80150f2:	4a28      	ldr	r2, [pc, #160]	; (8015194 <USBD_LL_Init+0xbc>)
 80150f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80150f6:	4b26      	ldr	r3, [pc, #152]	; (8015190 <USBD_LL_Init+0xb8>)
 80150f8:	2208      	movs	r2, #8
 80150fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80150fc:	4b24      	ldr	r3, [pc, #144]	; (8015190 <USBD_LL_Init+0xb8>)
 80150fe:	2202      	movs	r2, #2
 8015100:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015102:	4b23      	ldr	r3, [pc, #140]	; (8015190 <USBD_LL_Init+0xb8>)
 8015104:	2202      	movs	r2, #2
 8015106:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015108:	4b21      	ldr	r3, [pc, #132]	; (8015190 <USBD_LL_Init+0xb8>)
 801510a:	2200      	movs	r2, #0
 801510c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801510e:	4b20      	ldr	r3, [pc, #128]	; (8015190 <USBD_LL_Init+0xb8>)
 8015110:	2200      	movs	r2, #0
 8015112:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015114:	4b1e      	ldr	r3, [pc, #120]	; (8015190 <USBD_LL_Init+0xb8>)
 8015116:	2200      	movs	r2, #0
 8015118:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801511a:	4b1d      	ldr	r3, [pc, #116]	; (8015190 <USBD_LL_Init+0xb8>)
 801511c:	2200      	movs	r2, #0
 801511e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015120:	481b      	ldr	r0, [pc, #108]	; (8015190 <USBD_LL_Init+0xb8>)
 8015122:	f7f6 f8c5 	bl	800b2b0 <HAL_PCD_Init>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d001      	beq.n	8015130 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801512c:	f7f0 fb08 	bl	8005740 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015136:	2318      	movs	r3, #24
 8015138:	2200      	movs	r2, #0
 801513a:	2100      	movs	r1, #0
 801513c:	f7f7 fd7e 	bl	800cc3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015146:	2358      	movs	r3, #88	; 0x58
 8015148:	2200      	movs	r2, #0
 801514a:	2180      	movs	r1, #128	; 0x80
 801514c:	f7f7 fd76 	bl	800cc3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015156:	23c0      	movs	r3, #192	; 0xc0
 8015158:	2200      	movs	r2, #0
 801515a:	2181      	movs	r1, #129	; 0x81
 801515c:	f7f7 fd6e 	bl	800cc3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015166:	f44f 7388 	mov.w	r3, #272	; 0x110
 801516a:	2200      	movs	r2, #0
 801516c:	2101      	movs	r1, #1
 801516e:	f7f7 fd65 	bl	800cc3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801517c:	2200      	movs	r2, #0
 801517e:	2182      	movs	r1, #130	; 0x82
 8015180:	f7f7 fd5c 	bl	800cc3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015184:	2300      	movs	r3, #0
}
 8015186:	4618      	mov	r0, r3
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	20001fbc 	.word	0x20001fbc
 8015194:	40005c00 	.word	0x40005c00

08015198 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b084      	sub	sp, #16
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151a0:	2300      	movs	r3, #0
 80151a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151a4:	2300      	movs	r3, #0
 80151a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7f6 f963 	bl	800b47a <HAL_PCD_Start>
 80151b4:	4603      	mov	r3, r0
 80151b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151b8:	7bfb      	ldrb	r3, [r7, #15]
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 f9c8 	bl	8015550 <USBD_Get_USB_Status>
 80151c0:	4603      	mov	r3, r0
 80151c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3710      	adds	r7, #16
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}

080151ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b084      	sub	sp, #16
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
 80151d6:	4608      	mov	r0, r1
 80151d8:	4611      	mov	r1, r2
 80151da:	461a      	mov	r2, r3
 80151dc:	4603      	mov	r3, r0
 80151de:	70fb      	strb	r3, [r7, #3]
 80151e0:	460b      	mov	r3, r1
 80151e2:	70bb      	strb	r3, [r7, #2]
 80151e4:	4613      	mov	r3, r2
 80151e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151e8:	2300      	movs	r3, #0
 80151ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151ec:	2300      	movs	r3, #0
 80151ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80151f6:	78bb      	ldrb	r3, [r7, #2]
 80151f8:	883a      	ldrh	r2, [r7, #0]
 80151fa:	78f9      	ldrb	r1, [r7, #3]
 80151fc:	f7f6 faab 	bl	800b756 <HAL_PCD_EP_Open>
 8015200:	4603      	mov	r3, r0
 8015202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015204:	7bfb      	ldrb	r3, [r7, #15]
 8015206:	4618      	mov	r0, r3
 8015208:	f000 f9a2 	bl	8015550 <USBD_Get_USB_Status>
 801520c:	4603      	mov	r3, r0
 801520e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015210:	7bbb      	ldrb	r3, [r7, #14]
}
 8015212:	4618      	mov	r0, r3
 8015214:	3710      	adds	r7, #16
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801521a:	b580      	push	{r7, lr}
 801521c:	b084      	sub	sp, #16
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	460b      	mov	r3, r1
 8015224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015226:	2300      	movs	r3, #0
 8015228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801522a:	2300      	movs	r3, #0
 801522c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015234:	78fa      	ldrb	r2, [r7, #3]
 8015236:	4611      	mov	r1, r2
 8015238:	4618      	mov	r0, r3
 801523a:	f7f6 faf2 	bl	800b822 <HAL_PCD_EP_Close>
 801523e:	4603      	mov	r3, r0
 8015240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015242:	7bfb      	ldrb	r3, [r7, #15]
 8015244:	4618      	mov	r0, r3
 8015246:	f000 f983 	bl	8015550 <USBD_Get_USB_Status>
 801524a:	4603      	mov	r3, r0
 801524c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801524e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015250:	4618      	mov	r0, r3
 8015252:	3710      	adds	r7, #16
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	460b      	mov	r3, r1
 8015262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015264:	2300      	movs	r3, #0
 8015266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015272:	78fa      	ldrb	r2, [r7, #3]
 8015274:	4611      	mov	r1, r2
 8015276:	4618      	mov	r0, r3
 8015278:	f7f6 fbb3 	bl	800b9e2 <HAL_PCD_EP_SetStall>
 801527c:	4603      	mov	r3, r0
 801527e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015280:	7bfb      	ldrb	r3, [r7, #15]
 8015282:	4618      	mov	r0, r3
 8015284:	f000 f964 	bl	8015550 <USBD_Get_USB_Status>
 8015288:	4603      	mov	r3, r0
 801528a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801528c:	7bbb      	ldrb	r3, [r7, #14]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3710      	adds	r7, #16
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b084      	sub	sp, #16
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
 801529e:	460b      	mov	r3, r1
 80152a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152a2:	2300      	movs	r3, #0
 80152a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152a6:	2300      	movs	r3, #0
 80152a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152b0:	78fa      	ldrb	r2, [r7, #3]
 80152b2:	4611      	mov	r1, r2
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f6 fbe6 	bl	800ba86 <HAL_PCD_EP_ClrStall>
 80152ba:	4603      	mov	r3, r0
 80152bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152be:	7bfb      	ldrb	r3, [r7, #15]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f000 f945 	bl	8015550 <USBD_Get_USB_Status>
 80152c6:	4603      	mov	r3, r0
 80152c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80152e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	da0c      	bge.n	801530a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80152f0:	78fb      	ldrb	r3, [r7, #3]
 80152f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152f6:	68f9      	ldr	r1, [r7, #12]
 80152f8:	1c5a      	adds	r2, r3, #1
 80152fa:	4613      	mov	r3, r2
 80152fc:	009b      	lsls	r3, r3, #2
 80152fe:	4413      	add	r3, r2
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	440b      	add	r3, r1
 8015304:	3302      	adds	r3, #2
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	e00b      	b.n	8015322 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801530a:	78fb      	ldrb	r3, [r7, #3]
 801530c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015310:	68f9      	ldr	r1, [r7, #12]
 8015312:	4613      	mov	r3, r2
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015320:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015322:	4618      	mov	r0, r3
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr

0801532e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801532e:	b580      	push	{r7, lr}
 8015330:	b084      	sub	sp, #16
 8015332:	af00      	add	r7, sp, #0
 8015334:	6078      	str	r0, [r7, #4]
 8015336:	460b      	mov	r3, r1
 8015338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801533e:	2300      	movs	r3, #0
 8015340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015348:	78fa      	ldrb	r2, [r7, #3]
 801534a:	4611      	mov	r1, r2
 801534c:	4618      	mov	r0, r3
 801534e:	f7f6 f9dd 	bl	800b70c <HAL_PCD_SetAddress>
 8015352:	4603      	mov	r3, r0
 8015354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f8f9 	bl	8015550 <USBD_Get_USB_Status>
 801535e:	4603      	mov	r3, r0
 8015360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015362:	7bbb      	ldrb	r3, [r7, #14]
}
 8015364:	4618      	mov	r0, r3
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b086      	sub	sp, #24
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	607a      	str	r2, [r7, #4]
 8015376:	603b      	str	r3, [r7, #0]
 8015378:	460b      	mov	r3, r1
 801537a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801537c:	2300      	movs	r3, #0
 801537e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015380:	2300      	movs	r3, #0
 8015382:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801538a:	7af9      	ldrb	r1, [r7, #11]
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	f7f6 fae4 	bl	800b95c <HAL_PCD_EP_Transmit>
 8015394:	4603      	mov	r3, r0
 8015396:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015398:	7dfb      	ldrb	r3, [r7, #23]
 801539a:	4618      	mov	r0, r3
 801539c:	f000 f8d8 	bl	8015550 <USBD_Get_USB_Status>
 80153a0:	4603      	mov	r3, r0
 80153a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3718      	adds	r7, #24
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b086      	sub	sp, #24
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	60f8      	str	r0, [r7, #12]
 80153b6:	607a      	str	r2, [r7, #4]
 80153b8:	603b      	str	r3, [r7, #0]
 80153ba:	460b      	mov	r3, r1
 80153bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153be:	2300      	movs	r3, #0
 80153c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153c2:	2300      	movs	r3, #0
 80153c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153cc:	7af9      	ldrb	r1, [r7, #11]
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	f7f6 fa6e 	bl	800b8b2 <HAL_PCD_EP_Receive>
 80153d6:	4603      	mov	r3, r0
 80153d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153da:	7dfb      	ldrb	r3, [r7, #23]
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 f8b7 	bl	8015550 <USBD_Get_USB_Status>
 80153e2:	4603      	mov	r3, r0
 80153e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3718      	adds	r7, #24
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	460b      	mov	r3, r1
 80153fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015402:	78fa      	ldrb	r2, [r7, #3]
 8015404:	4611      	mov	r1, r2
 8015406:	4618      	mov	r0, r3
 8015408:	f7f6 fa90 	bl	800b92c <HAL_PCD_EP_GetRxCount>
 801540c:	4603      	mov	r3, r0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
	...

08015418 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015424:	78fb      	ldrb	r3, [r7, #3]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d002      	beq.n	8015430 <HAL_PCDEx_LPM_Callback+0x18>
 801542a:	2b01      	cmp	r3, #1
 801542c:	d013      	beq.n	8015456 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801542e:	e023      	b.n	8015478 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	699b      	ldr	r3, [r3, #24]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d007      	beq.n	8015448 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015438:	f000 f83c 	bl	80154b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801543c:	4b10      	ldr	r3, [pc, #64]	; (8015480 <HAL_PCDEx_LPM_Callback+0x68>)
 801543e:	691b      	ldr	r3, [r3, #16]
 8015440:	4a0f      	ldr	r2, [pc, #60]	; (8015480 <HAL_PCDEx_LPM_Callback+0x68>)
 8015442:	f023 0306 	bic.w	r3, r3, #6
 8015446:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801544e:	4618      	mov	r0, r3
 8015450:	f7fe fc66 	bl	8013d20 <USBD_LL_Resume>
    break;
 8015454:	e010      	b.n	8015478 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801545c:	4618      	mov	r0, r3
 801545e:	f7fe fc49 	bl	8013cf4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	699b      	ldr	r3, [r3, #24]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d005      	beq.n	8015476 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801546a:	4b05      	ldr	r3, [pc, #20]	; (8015480 <HAL_PCDEx_LPM_Callback+0x68>)
 801546c:	691b      	ldr	r3, [r3, #16]
 801546e:	4a04      	ldr	r2, [pc, #16]	; (8015480 <HAL_PCDEx_LPM_Callback+0x68>)
 8015470:	f043 0306 	orr.w	r3, r3, #6
 8015474:	6113      	str	r3, [r2, #16]
    break;
 8015476:	bf00      	nop
}
 8015478:	bf00      	nop
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	e000ed00 	.word	0xe000ed00

08015484 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015484:	b480      	push	{r7}
 8015486:	b083      	sub	sp, #12
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801548c:	4b03      	ldr	r3, [pc, #12]	; (801549c <USBD_static_malloc+0x18>)
}
 801548e:	4618      	mov	r0, r3
 8015490:	370c      	adds	r7, #12
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	200022b0 	.word	0x200022b0

080154a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80154a0:	b480      	push	{r7}
 80154a2:	b083      	sub	sp, #12
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]

}
 80154a8:	bf00      	nop
 80154aa:	370c      	adds	r7, #12
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr

080154b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b094      	sub	sp, #80	; 0x50
 80154b8:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80154ba:	f107 0318 	add.w	r3, r7, #24
 80154be:	2238      	movs	r2, #56	; 0x38
 80154c0:	2100      	movs	r1, #0
 80154c2:	4618      	mov	r0, r3
 80154c4:	f000 f8a8 	bl	8015618 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80154c8:	1d3b      	adds	r3, r7, #4
 80154ca:	2200      	movs	r2, #0
 80154cc:	601a      	str	r2, [r3, #0]
 80154ce:	605a      	str	r2, [r3, #4]
 80154d0:	609a      	str	r2, [r3, #8]
 80154d2:	60da      	str	r2, [r3, #12]
 80154d4:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80154d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80154da:	f7f7 fc1d 	bl	800cd18 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80154de:	2322      	movs	r3, #34	; 0x22
 80154e0:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80154e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80154e6:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80154e8:	2340      	movs	r3, #64	; 0x40
 80154ea:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80154ec:	2301      	movs	r3, #1
 80154ee:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80154f0:	2302      	movs	r3, #2
 80154f2:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80154f4:	2302      	movs	r3, #2
 80154f6:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80154f8:	2301      	movs	r3, #1
 80154fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 80154fc:	2310      	movs	r3, #16
 80154fe:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015500:	2302      	movs	r3, #2
 8015502:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8015504:	2302      	movs	r3, #2
 8015506:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8015508:	2302      	movs	r3, #2
 801550a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801550c:	f107 0318 	add.w	r3, r7, #24
 8015510:	4618      	mov	r0, r3
 8015512:	f7f7 fca5 	bl	800ce60 <HAL_RCC_OscConfig>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d001      	beq.n	8015520 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 801551c:	f7f0 f910 	bl	8005740 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015520:	230f      	movs	r3, #15
 8015522:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015524:	2303      	movs	r3, #3
 8015526:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015528:	2300      	movs	r3, #0
 801552a:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801552c:	2300      	movs	r3, #0
 801552e:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8015530:	2300      	movs	r3, #0
 8015532:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8015534:	1d3b      	adds	r3, r7, #4
 8015536:	2103      	movs	r1, #3
 8015538:	4618      	mov	r0, r3
 801553a:	f7f7 ffa9 	bl	800d490 <HAL_RCC_ClockConfig>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d001      	beq.n	8015548 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8015544:	f7f0 f8fc 	bl	8005740 <Error_Handler>
		  }

}
 8015548:	bf00      	nop
 801554a:	3750      	adds	r7, #80	; 0x50
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
 8015556:	4603      	mov	r3, r0
 8015558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801555a:	2300      	movs	r3, #0
 801555c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801555e:	79fb      	ldrb	r3, [r7, #7]
 8015560:	2b03      	cmp	r3, #3
 8015562:	d817      	bhi.n	8015594 <USBD_Get_USB_Status+0x44>
 8015564:	a201      	add	r2, pc, #4	; (adr r2, 801556c <USBD_Get_USB_Status+0x1c>)
 8015566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801556a:	bf00      	nop
 801556c:	0801557d 	.word	0x0801557d
 8015570:	08015583 	.word	0x08015583
 8015574:	08015589 	.word	0x08015589
 8015578:	0801558f 	.word	0x0801558f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801557c:	2300      	movs	r3, #0
 801557e:	73fb      	strb	r3, [r7, #15]
    break;
 8015580:	e00b      	b.n	801559a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015582:	2303      	movs	r3, #3
 8015584:	73fb      	strb	r3, [r7, #15]
    break;
 8015586:	e008      	b.n	801559a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015588:	2301      	movs	r3, #1
 801558a:	73fb      	strb	r3, [r7, #15]
    break;
 801558c:	e005      	b.n	801559a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801558e:	2303      	movs	r3, #3
 8015590:	73fb      	strb	r3, [r7, #15]
    break;
 8015592:	e002      	b.n	801559a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015594:	2303      	movs	r3, #3
 8015596:	73fb      	strb	r3, [r7, #15]
    break;
 8015598:	bf00      	nop
  }
  return usb_status;
 801559a:	7bfb      	ldrb	r3, [r7, #15]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3714      	adds	r7, #20
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr

080155a8 <__errno>:
 80155a8:	4b01      	ldr	r3, [pc, #4]	; (80155b0 <__errno+0x8>)
 80155aa:	6818      	ldr	r0, [r3, #0]
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	20000184 	.word	0x20000184

080155b4 <__libc_init_array>:
 80155b4:	b570      	push	{r4, r5, r6, lr}
 80155b6:	4d0d      	ldr	r5, [pc, #52]	; (80155ec <__libc_init_array+0x38>)
 80155b8:	4c0d      	ldr	r4, [pc, #52]	; (80155f0 <__libc_init_array+0x3c>)
 80155ba:	1b64      	subs	r4, r4, r5
 80155bc:	10a4      	asrs	r4, r4, #2
 80155be:	2600      	movs	r6, #0
 80155c0:	42a6      	cmp	r6, r4
 80155c2:	d109      	bne.n	80155d8 <__libc_init_array+0x24>
 80155c4:	4d0b      	ldr	r5, [pc, #44]	; (80155f4 <__libc_init_array+0x40>)
 80155c6:	4c0c      	ldr	r4, [pc, #48]	; (80155f8 <__libc_init_array+0x44>)
 80155c8:	f002 fdc2 	bl	8018150 <_init>
 80155cc:	1b64      	subs	r4, r4, r5
 80155ce:	10a4      	asrs	r4, r4, #2
 80155d0:	2600      	movs	r6, #0
 80155d2:	42a6      	cmp	r6, r4
 80155d4:	d105      	bne.n	80155e2 <__libc_init_array+0x2e>
 80155d6:	bd70      	pop	{r4, r5, r6, pc}
 80155d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80155dc:	4798      	blx	r3
 80155de:	3601      	adds	r6, #1
 80155e0:	e7ee      	b.n	80155c0 <__libc_init_array+0xc>
 80155e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80155e6:	4798      	blx	r3
 80155e8:	3601      	adds	r6, #1
 80155ea:	e7f2      	b.n	80155d2 <__libc_init_array+0x1e>
 80155ec:	08018de4 	.word	0x08018de4
 80155f0:	08018de4 	.word	0x08018de4
 80155f4:	08018de4 	.word	0x08018de4
 80155f8:	08018de8 	.word	0x08018de8

080155fc <memcpy>:
 80155fc:	440a      	add	r2, r1
 80155fe:	4291      	cmp	r1, r2
 8015600:	f100 33ff 	add.w	r3, r0, #4294967295
 8015604:	d100      	bne.n	8015608 <memcpy+0xc>
 8015606:	4770      	bx	lr
 8015608:	b510      	push	{r4, lr}
 801560a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801560e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015612:	4291      	cmp	r1, r2
 8015614:	d1f9      	bne.n	801560a <memcpy+0xe>
 8015616:	bd10      	pop	{r4, pc}

08015618 <memset>:
 8015618:	4402      	add	r2, r0
 801561a:	4603      	mov	r3, r0
 801561c:	4293      	cmp	r3, r2
 801561e:	d100      	bne.n	8015622 <memset+0xa>
 8015620:	4770      	bx	lr
 8015622:	f803 1b01 	strb.w	r1, [r3], #1
 8015626:	e7f9      	b.n	801561c <memset+0x4>

08015628 <__cvt>:
 8015628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801562c:	ec55 4b10 	vmov	r4, r5, d0
 8015630:	2d00      	cmp	r5, #0
 8015632:	460e      	mov	r6, r1
 8015634:	4619      	mov	r1, r3
 8015636:	462b      	mov	r3, r5
 8015638:	bfbb      	ittet	lt
 801563a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801563e:	461d      	movlt	r5, r3
 8015640:	2300      	movge	r3, #0
 8015642:	232d      	movlt	r3, #45	; 0x2d
 8015644:	700b      	strb	r3, [r1, #0]
 8015646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801564c:	4691      	mov	r9, r2
 801564e:	f023 0820 	bic.w	r8, r3, #32
 8015652:	bfbc      	itt	lt
 8015654:	4622      	movlt	r2, r4
 8015656:	4614      	movlt	r4, r2
 8015658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801565c:	d005      	beq.n	801566a <__cvt+0x42>
 801565e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015662:	d100      	bne.n	8015666 <__cvt+0x3e>
 8015664:	3601      	adds	r6, #1
 8015666:	2102      	movs	r1, #2
 8015668:	e000      	b.n	801566c <__cvt+0x44>
 801566a:	2103      	movs	r1, #3
 801566c:	ab03      	add	r3, sp, #12
 801566e:	9301      	str	r3, [sp, #4]
 8015670:	ab02      	add	r3, sp, #8
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	ec45 4b10 	vmov	d0, r4, r5
 8015678:	4653      	mov	r3, sl
 801567a:	4632      	mov	r2, r6
 801567c:	f000 fe18 	bl	80162b0 <_dtoa_r>
 8015680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015684:	4607      	mov	r7, r0
 8015686:	d102      	bne.n	801568e <__cvt+0x66>
 8015688:	f019 0f01 	tst.w	r9, #1
 801568c:	d022      	beq.n	80156d4 <__cvt+0xac>
 801568e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015692:	eb07 0906 	add.w	r9, r7, r6
 8015696:	d110      	bne.n	80156ba <__cvt+0x92>
 8015698:	783b      	ldrb	r3, [r7, #0]
 801569a:	2b30      	cmp	r3, #48	; 0x30
 801569c:	d10a      	bne.n	80156b4 <__cvt+0x8c>
 801569e:	2200      	movs	r2, #0
 80156a0:	2300      	movs	r3, #0
 80156a2:	4620      	mov	r0, r4
 80156a4:	4629      	mov	r1, r5
 80156a6:	f7eb fa37 	bl	8000b18 <__aeabi_dcmpeq>
 80156aa:	b918      	cbnz	r0, 80156b4 <__cvt+0x8c>
 80156ac:	f1c6 0601 	rsb	r6, r6, #1
 80156b0:	f8ca 6000 	str.w	r6, [sl]
 80156b4:	f8da 3000 	ldr.w	r3, [sl]
 80156b8:	4499      	add	r9, r3
 80156ba:	2200      	movs	r2, #0
 80156bc:	2300      	movs	r3, #0
 80156be:	4620      	mov	r0, r4
 80156c0:	4629      	mov	r1, r5
 80156c2:	f7eb fa29 	bl	8000b18 <__aeabi_dcmpeq>
 80156c6:	b108      	cbz	r0, 80156cc <__cvt+0xa4>
 80156c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80156cc:	2230      	movs	r2, #48	; 0x30
 80156ce:	9b03      	ldr	r3, [sp, #12]
 80156d0:	454b      	cmp	r3, r9
 80156d2:	d307      	bcc.n	80156e4 <__cvt+0xbc>
 80156d4:	9b03      	ldr	r3, [sp, #12]
 80156d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156d8:	1bdb      	subs	r3, r3, r7
 80156da:	4638      	mov	r0, r7
 80156dc:	6013      	str	r3, [r2, #0]
 80156de:	b004      	add	sp, #16
 80156e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e4:	1c59      	adds	r1, r3, #1
 80156e6:	9103      	str	r1, [sp, #12]
 80156e8:	701a      	strb	r2, [r3, #0]
 80156ea:	e7f0      	b.n	80156ce <__cvt+0xa6>

080156ec <__exponent>:
 80156ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156ee:	4603      	mov	r3, r0
 80156f0:	2900      	cmp	r1, #0
 80156f2:	bfb8      	it	lt
 80156f4:	4249      	neglt	r1, r1
 80156f6:	f803 2b02 	strb.w	r2, [r3], #2
 80156fa:	bfb4      	ite	lt
 80156fc:	222d      	movlt	r2, #45	; 0x2d
 80156fe:	222b      	movge	r2, #43	; 0x2b
 8015700:	2909      	cmp	r1, #9
 8015702:	7042      	strb	r2, [r0, #1]
 8015704:	dd2a      	ble.n	801575c <__exponent+0x70>
 8015706:	f10d 0407 	add.w	r4, sp, #7
 801570a:	46a4      	mov	ip, r4
 801570c:	270a      	movs	r7, #10
 801570e:	46a6      	mov	lr, r4
 8015710:	460a      	mov	r2, r1
 8015712:	fb91 f6f7 	sdiv	r6, r1, r7
 8015716:	fb07 1516 	mls	r5, r7, r6, r1
 801571a:	3530      	adds	r5, #48	; 0x30
 801571c:	2a63      	cmp	r2, #99	; 0x63
 801571e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015722:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015726:	4631      	mov	r1, r6
 8015728:	dcf1      	bgt.n	801570e <__exponent+0x22>
 801572a:	3130      	adds	r1, #48	; 0x30
 801572c:	f1ae 0502 	sub.w	r5, lr, #2
 8015730:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015734:	1c44      	adds	r4, r0, #1
 8015736:	4629      	mov	r1, r5
 8015738:	4561      	cmp	r1, ip
 801573a:	d30a      	bcc.n	8015752 <__exponent+0x66>
 801573c:	f10d 0209 	add.w	r2, sp, #9
 8015740:	eba2 020e 	sub.w	r2, r2, lr
 8015744:	4565      	cmp	r5, ip
 8015746:	bf88      	it	hi
 8015748:	2200      	movhi	r2, #0
 801574a:	4413      	add	r3, r2
 801574c:	1a18      	subs	r0, r3, r0
 801574e:	b003      	add	sp, #12
 8015750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015756:	f804 2f01 	strb.w	r2, [r4, #1]!
 801575a:	e7ed      	b.n	8015738 <__exponent+0x4c>
 801575c:	2330      	movs	r3, #48	; 0x30
 801575e:	3130      	adds	r1, #48	; 0x30
 8015760:	7083      	strb	r3, [r0, #2]
 8015762:	70c1      	strb	r1, [r0, #3]
 8015764:	1d03      	adds	r3, r0, #4
 8015766:	e7f1      	b.n	801574c <__exponent+0x60>

08015768 <_printf_float>:
 8015768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801576c:	ed2d 8b02 	vpush	{d8}
 8015770:	b08d      	sub	sp, #52	; 0x34
 8015772:	460c      	mov	r4, r1
 8015774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015778:	4616      	mov	r6, r2
 801577a:	461f      	mov	r7, r3
 801577c:	4605      	mov	r5, r0
 801577e:	f001 fd3d 	bl	80171fc <_localeconv_r>
 8015782:	f8d0 a000 	ldr.w	sl, [r0]
 8015786:	4650      	mov	r0, sl
 8015788:	f7ea fd4a 	bl	8000220 <strlen>
 801578c:	2300      	movs	r3, #0
 801578e:	930a      	str	r3, [sp, #40]	; 0x28
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	9305      	str	r3, [sp, #20]
 8015794:	f8d8 3000 	ldr.w	r3, [r8]
 8015798:	f894 b018 	ldrb.w	fp, [r4, #24]
 801579c:	3307      	adds	r3, #7
 801579e:	f023 0307 	bic.w	r3, r3, #7
 80157a2:	f103 0208 	add.w	r2, r3, #8
 80157a6:	f8c8 2000 	str.w	r2, [r8]
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80157b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80157b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157ba:	9307      	str	r3, [sp, #28]
 80157bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80157c0:	ee08 0a10 	vmov	s16, r0
 80157c4:	4b9f      	ldr	r3, [pc, #636]	; (8015a44 <_printf_float+0x2dc>)
 80157c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157ca:	f04f 32ff 	mov.w	r2, #4294967295
 80157ce:	f7eb f9d5 	bl	8000b7c <__aeabi_dcmpun>
 80157d2:	bb88      	cbnz	r0, 8015838 <_printf_float+0xd0>
 80157d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157d8:	4b9a      	ldr	r3, [pc, #616]	; (8015a44 <_printf_float+0x2dc>)
 80157da:	f04f 32ff 	mov.w	r2, #4294967295
 80157de:	f7eb f9af 	bl	8000b40 <__aeabi_dcmple>
 80157e2:	bb48      	cbnz	r0, 8015838 <_printf_float+0xd0>
 80157e4:	2200      	movs	r2, #0
 80157e6:	2300      	movs	r3, #0
 80157e8:	4640      	mov	r0, r8
 80157ea:	4649      	mov	r1, r9
 80157ec:	f7eb f99e 	bl	8000b2c <__aeabi_dcmplt>
 80157f0:	b110      	cbz	r0, 80157f8 <_printf_float+0x90>
 80157f2:	232d      	movs	r3, #45	; 0x2d
 80157f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157f8:	4b93      	ldr	r3, [pc, #588]	; (8015a48 <_printf_float+0x2e0>)
 80157fa:	4894      	ldr	r0, [pc, #592]	; (8015a4c <_printf_float+0x2e4>)
 80157fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015800:	bf94      	ite	ls
 8015802:	4698      	movls	r8, r3
 8015804:	4680      	movhi	r8, r0
 8015806:	2303      	movs	r3, #3
 8015808:	6123      	str	r3, [r4, #16]
 801580a:	9b05      	ldr	r3, [sp, #20]
 801580c:	f023 0204 	bic.w	r2, r3, #4
 8015810:	6022      	str	r2, [r4, #0]
 8015812:	f04f 0900 	mov.w	r9, #0
 8015816:	9700      	str	r7, [sp, #0]
 8015818:	4633      	mov	r3, r6
 801581a:	aa0b      	add	r2, sp, #44	; 0x2c
 801581c:	4621      	mov	r1, r4
 801581e:	4628      	mov	r0, r5
 8015820:	f000 f9d8 	bl	8015bd4 <_printf_common>
 8015824:	3001      	adds	r0, #1
 8015826:	f040 8090 	bne.w	801594a <_printf_float+0x1e2>
 801582a:	f04f 30ff 	mov.w	r0, #4294967295
 801582e:	b00d      	add	sp, #52	; 0x34
 8015830:	ecbd 8b02 	vpop	{d8}
 8015834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015838:	4642      	mov	r2, r8
 801583a:	464b      	mov	r3, r9
 801583c:	4640      	mov	r0, r8
 801583e:	4649      	mov	r1, r9
 8015840:	f7eb f99c 	bl	8000b7c <__aeabi_dcmpun>
 8015844:	b140      	cbz	r0, 8015858 <_printf_float+0xf0>
 8015846:	464b      	mov	r3, r9
 8015848:	2b00      	cmp	r3, #0
 801584a:	bfbc      	itt	lt
 801584c:	232d      	movlt	r3, #45	; 0x2d
 801584e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015852:	487f      	ldr	r0, [pc, #508]	; (8015a50 <_printf_float+0x2e8>)
 8015854:	4b7f      	ldr	r3, [pc, #508]	; (8015a54 <_printf_float+0x2ec>)
 8015856:	e7d1      	b.n	80157fc <_printf_float+0x94>
 8015858:	6863      	ldr	r3, [r4, #4]
 801585a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801585e:	9206      	str	r2, [sp, #24]
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	d13f      	bne.n	80158e4 <_printf_float+0x17c>
 8015864:	2306      	movs	r3, #6
 8015866:	6063      	str	r3, [r4, #4]
 8015868:	9b05      	ldr	r3, [sp, #20]
 801586a:	6861      	ldr	r1, [r4, #4]
 801586c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015870:	2300      	movs	r3, #0
 8015872:	9303      	str	r3, [sp, #12]
 8015874:	ab0a      	add	r3, sp, #40	; 0x28
 8015876:	e9cd b301 	strd	fp, r3, [sp, #4]
 801587a:	ab09      	add	r3, sp, #36	; 0x24
 801587c:	ec49 8b10 	vmov	d0, r8, r9
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	6022      	str	r2, [r4, #0]
 8015884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015888:	4628      	mov	r0, r5
 801588a:	f7ff fecd 	bl	8015628 <__cvt>
 801588e:	9b06      	ldr	r3, [sp, #24]
 8015890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015892:	2b47      	cmp	r3, #71	; 0x47
 8015894:	4680      	mov	r8, r0
 8015896:	d108      	bne.n	80158aa <_printf_float+0x142>
 8015898:	1cc8      	adds	r0, r1, #3
 801589a:	db02      	blt.n	80158a2 <_printf_float+0x13a>
 801589c:	6863      	ldr	r3, [r4, #4]
 801589e:	4299      	cmp	r1, r3
 80158a0:	dd41      	ble.n	8015926 <_printf_float+0x1be>
 80158a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80158a6:	fa5f fb8b 	uxtb.w	fp, fp
 80158aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158ae:	d820      	bhi.n	80158f2 <_printf_float+0x18a>
 80158b0:	3901      	subs	r1, #1
 80158b2:	465a      	mov	r2, fp
 80158b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80158b8:	9109      	str	r1, [sp, #36]	; 0x24
 80158ba:	f7ff ff17 	bl	80156ec <__exponent>
 80158be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158c0:	1813      	adds	r3, r2, r0
 80158c2:	2a01      	cmp	r2, #1
 80158c4:	4681      	mov	r9, r0
 80158c6:	6123      	str	r3, [r4, #16]
 80158c8:	dc02      	bgt.n	80158d0 <_printf_float+0x168>
 80158ca:	6822      	ldr	r2, [r4, #0]
 80158cc:	07d2      	lsls	r2, r2, #31
 80158ce:	d501      	bpl.n	80158d4 <_printf_float+0x16c>
 80158d0:	3301      	adds	r3, #1
 80158d2:	6123      	str	r3, [r4, #16]
 80158d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d09c      	beq.n	8015816 <_printf_float+0xae>
 80158dc:	232d      	movs	r3, #45	; 0x2d
 80158de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158e2:	e798      	b.n	8015816 <_printf_float+0xae>
 80158e4:	9a06      	ldr	r2, [sp, #24]
 80158e6:	2a47      	cmp	r2, #71	; 0x47
 80158e8:	d1be      	bne.n	8015868 <_printf_float+0x100>
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d1bc      	bne.n	8015868 <_printf_float+0x100>
 80158ee:	2301      	movs	r3, #1
 80158f0:	e7b9      	b.n	8015866 <_printf_float+0xfe>
 80158f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80158f6:	d118      	bne.n	801592a <_printf_float+0x1c2>
 80158f8:	2900      	cmp	r1, #0
 80158fa:	6863      	ldr	r3, [r4, #4]
 80158fc:	dd0b      	ble.n	8015916 <_printf_float+0x1ae>
 80158fe:	6121      	str	r1, [r4, #16]
 8015900:	b913      	cbnz	r3, 8015908 <_printf_float+0x1a0>
 8015902:	6822      	ldr	r2, [r4, #0]
 8015904:	07d0      	lsls	r0, r2, #31
 8015906:	d502      	bpl.n	801590e <_printf_float+0x1a6>
 8015908:	3301      	adds	r3, #1
 801590a:	440b      	add	r3, r1
 801590c:	6123      	str	r3, [r4, #16]
 801590e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015910:	f04f 0900 	mov.w	r9, #0
 8015914:	e7de      	b.n	80158d4 <_printf_float+0x16c>
 8015916:	b913      	cbnz	r3, 801591e <_printf_float+0x1b6>
 8015918:	6822      	ldr	r2, [r4, #0]
 801591a:	07d2      	lsls	r2, r2, #31
 801591c:	d501      	bpl.n	8015922 <_printf_float+0x1ba>
 801591e:	3302      	adds	r3, #2
 8015920:	e7f4      	b.n	801590c <_printf_float+0x1a4>
 8015922:	2301      	movs	r3, #1
 8015924:	e7f2      	b.n	801590c <_printf_float+0x1a4>
 8015926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801592a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801592c:	4299      	cmp	r1, r3
 801592e:	db05      	blt.n	801593c <_printf_float+0x1d4>
 8015930:	6823      	ldr	r3, [r4, #0]
 8015932:	6121      	str	r1, [r4, #16]
 8015934:	07d8      	lsls	r0, r3, #31
 8015936:	d5ea      	bpl.n	801590e <_printf_float+0x1a6>
 8015938:	1c4b      	adds	r3, r1, #1
 801593a:	e7e7      	b.n	801590c <_printf_float+0x1a4>
 801593c:	2900      	cmp	r1, #0
 801593e:	bfd4      	ite	le
 8015940:	f1c1 0202 	rsble	r2, r1, #2
 8015944:	2201      	movgt	r2, #1
 8015946:	4413      	add	r3, r2
 8015948:	e7e0      	b.n	801590c <_printf_float+0x1a4>
 801594a:	6823      	ldr	r3, [r4, #0]
 801594c:	055a      	lsls	r2, r3, #21
 801594e:	d407      	bmi.n	8015960 <_printf_float+0x1f8>
 8015950:	6923      	ldr	r3, [r4, #16]
 8015952:	4642      	mov	r2, r8
 8015954:	4631      	mov	r1, r6
 8015956:	4628      	mov	r0, r5
 8015958:	47b8      	blx	r7
 801595a:	3001      	adds	r0, #1
 801595c:	d12c      	bne.n	80159b8 <_printf_float+0x250>
 801595e:	e764      	b.n	801582a <_printf_float+0xc2>
 8015960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015964:	f240 80e0 	bls.w	8015b28 <_printf_float+0x3c0>
 8015968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801596c:	2200      	movs	r2, #0
 801596e:	2300      	movs	r3, #0
 8015970:	f7eb f8d2 	bl	8000b18 <__aeabi_dcmpeq>
 8015974:	2800      	cmp	r0, #0
 8015976:	d034      	beq.n	80159e2 <_printf_float+0x27a>
 8015978:	4a37      	ldr	r2, [pc, #220]	; (8015a58 <_printf_float+0x2f0>)
 801597a:	2301      	movs	r3, #1
 801597c:	4631      	mov	r1, r6
 801597e:	4628      	mov	r0, r5
 8015980:	47b8      	blx	r7
 8015982:	3001      	adds	r0, #1
 8015984:	f43f af51 	beq.w	801582a <_printf_float+0xc2>
 8015988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801598c:	429a      	cmp	r2, r3
 801598e:	db02      	blt.n	8015996 <_printf_float+0x22e>
 8015990:	6823      	ldr	r3, [r4, #0]
 8015992:	07d8      	lsls	r0, r3, #31
 8015994:	d510      	bpl.n	80159b8 <_printf_float+0x250>
 8015996:	ee18 3a10 	vmov	r3, s16
 801599a:	4652      	mov	r2, sl
 801599c:	4631      	mov	r1, r6
 801599e:	4628      	mov	r0, r5
 80159a0:	47b8      	blx	r7
 80159a2:	3001      	adds	r0, #1
 80159a4:	f43f af41 	beq.w	801582a <_printf_float+0xc2>
 80159a8:	f04f 0800 	mov.w	r8, #0
 80159ac:	f104 091a 	add.w	r9, r4, #26
 80159b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159b2:	3b01      	subs	r3, #1
 80159b4:	4543      	cmp	r3, r8
 80159b6:	dc09      	bgt.n	80159cc <_printf_float+0x264>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	079b      	lsls	r3, r3, #30
 80159bc:	f100 8105 	bmi.w	8015bca <_printf_float+0x462>
 80159c0:	68e0      	ldr	r0, [r4, #12]
 80159c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159c4:	4298      	cmp	r0, r3
 80159c6:	bfb8      	it	lt
 80159c8:	4618      	movlt	r0, r3
 80159ca:	e730      	b.n	801582e <_printf_float+0xc6>
 80159cc:	2301      	movs	r3, #1
 80159ce:	464a      	mov	r2, r9
 80159d0:	4631      	mov	r1, r6
 80159d2:	4628      	mov	r0, r5
 80159d4:	47b8      	blx	r7
 80159d6:	3001      	adds	r0, #1
 80159d8:	f43f af27 	beq.w	801582a <_printf_float+0xc2>
 80159dc:	f108 0801 	add.w	r8, r8, #1
 80159e0:	e7e6      	b.n	80159b0 <_printf_float+0x248>
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dc39      	bgt.n	8015a5c <_printf_float+0x2f4>
 80159e8:	4a1b      	ldr	r2, [pc, #108]	; (8015a58 <_printf_float+0x2f0>)
 80159ea:	2301      	movs	r3, #1
 80159ec:	4631      	mov	r1, r6
 80159ee:	4628      	mov	r0, r5
 80159f0:	47b8      	blx	r7
 80159f2:	3001      	adds	r0, #1
 80159f4:	f43f af19 	beq.w	801582a <_printf_float+0xc2>
 80159f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159fc:	4313      	orrs	r3, r2
 80159fe:	d102      	bne.n	8015a06 <_printf_float+0x29e>
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	07d9      	lsls	r1, r3, #31
 8015a04:	d5d8      	bpl.n	80159b8 <_printf_float+0x250>
 8015a06:	ee18 3a10 	vmov	r3, s16
 8015a0a:	4652      	mov	r2, sl
 8015a0c:	4631      	mov	r1, r6
 8015a0e:	4628      	mov	r0, r5
 8015a10:	47b8      	blx	r7
 8015a12:	3001      	adds	r0, #1
 8015a14:	f43f af09 	beq.w	801582a <_printf_float+0xc2>
 8015a18:	f04f 0900 	mov.w	r9, #0
 8015a1c:	f104 0a1a 	add.w	sl, r4, #26
 8015a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a22:	425b      	negs	r3, r3
 8015a24:	454b      	cmp	r3, r9
 8015a26:	dc01      	bgt.n	8015a2c <_printf_float+0x2c4>
 8015a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a2a:	e792      	b.n	8015952 <_printf_float+0x1ea>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	4652      	mov	r2, sl
 8015a30:	4631      	mov	r1, r6
 8015a32:	4628      	mov	r0, r5
 8015a34:	47b8      	blx	r7
 8015a36:	3001      	adds	r0, #1
 8015a38:	f43f aef7 	beq.w	801582a <_printf_float+0xc2>
 8015a3c:	f109 0901 	add.w	r9, r9, #1
 8015a40:	e7ee      	b.n	8015a20 <_printf_float+0x2b8>
 8015a42:	bf00      	nop
 8015a44:	7fefffff 	.word	0x7fefffff
 8015a48:	08018a08 	.word	0x08018a08
 8015a4c:	08018a0c 	.word	0x08018a0c
 8015a50:	08018a14 	.word	0x08018a14
 8015a54:	08018a10 	.word	0x08018a10
 8015a58:	08018a18 	.word	0x08018a18
 8015a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a60:	429a      	cmp	r2, r3
 8015a62:	bfa8      	it	ge
 8015a64:	461a      	movge	r2, r3
 8015a66:	2a00      	cmp	r2, #0
 8015a68:	4691      	mov	r9, r2
 8015a6a:	dc37      	bgt.n	8015adc <_printf_float+0x374>
 8015a6c:	f04f 0b00 	mov.w	fp, #0
 8015a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a74:	f104 021a 	add.w	r2, r4, #26
 8015a78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a7a:	9305      	str	r3, [sp, #20]
 8015a7c:	eba3 0309 	sub.w	r3, r3, r9
 8015a80:	455b      	cmp	r3, fp
 8015a82:	dc33      	bgt.n	8015aec <_printf_float+0x384>
 8015a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	db3b      	blt.n	8015b04 <_printf_float+0x39c>
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	07da      	lsls	r2, r3, #31
 8015a90:	d438      	bmi.n	8015b04 <_printf_float+0x39c>
 8015a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a94:	9a05      	ldr	r2, [sp, #20]
 8015a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a98:	1a9a      	subs	r2, r3, r2
 8015a9a:	eba3 0901 	sub.w	r9, r3, r1
 8015a9e:	4591      	cmp	r9, r2
 8015aa0:	bfa8      	it	ge
 8015aa2:	4691      	movge	r9, r2
 8015aa4:	f1b9 0f00 	cmp.w	r9, #0
 8015aa8:	dc35      	bgt.n	8015b16 <_printf_float+0x3ae>
 8015aaa:	f04f 0800 	mov.w	r8, #0
 8015aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ab2:	f104 0a1a 	add.w	sl, r4, #26
 8015ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015aba:	1a9b      	subs	r3, r3, r2
 8015abc:	eba3 0309 	sub.w	r3, r3, r9
 8015ac0:	4543      	cmp	r3, r8
 8015ac2:	f77f af79 	ble.w	80159b8 <_printf_float+0x250>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	4652      	mov	r2, sl
 8015aca:	4631      	mov	r1, r6
 8015acc:	4628      	mov	r0, r5
 8015ace:	47b8      	blx	r7
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	f43f aeaa 	beq.w	801582a <_printf_float+0xc2>
 8015ad6:	f108 0801 	add.w	r8, r8, #1
 8015ada:	e7ec      	b.n	8015ab6 <_printf_float+0x34e>
 8015adc:	4613      	mov	r3, r2
 8015ade:	4631      	mov	r1, r6
 8015ae0:	4642      	mov	r2, r8
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	47b8      	blx	r7
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	d1c0      	bne.n	8015a6c <_printf_float+0x304>
 8015aea:	e69e      	b.n	801582a <_printf_float+0xc2>
 8015aec:	2301      	movs	r3, #1
 8015aee:	4631      	mov	r1, r6
 8015af0:	4628      	mov	r0, r5
 8015af2:	9205      	str	r2, [sp, #20]
 8015af4:	47b8      	blx	r7
 8015af6:	3001      	adds	r0, #1
 8015af8:	f43f ae97 	beq.w	801582a <_printf_float+0xc2>
 8015afc:	9a05      	ldr	r2, [sp, #20]
 8015afe:	f10b 0b01 	add.w	fp, fp, #1
 8015b02:	e7b9      	b.n	8015a78 <_printf_float+0x310>
 8015b04:	ee18 3a10 	vmov	r3, s16
 8015b08:	4652      	mov	r2, sl
 8015b0a:	4631      	mov	r1, r6
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	47b8      	blx	r7
 8015b10:	3001      	adds	r0, #1
 8015b12:	d1be      	bne.n	8015a92 <_printf_float+0x32a>
 8015b14:	e689      	b.n	801582a <_printf_float+0xc2>
 8015b16:	9a05      	ldr	r2, [sp, #20]
 8015b18:	464b      	mov	r3, r9
 8015b1a:	4442      	add	r2, r8
 8015b1c:	4631      	mov	r1, r6
 8015b1e:	4628      	mov	r0, r5
 8015b20:	47b8      	blx	r7
 8015b22:	3001      	adds	r0, #1
 8015b24:	d1c1      	bne.n	8015aaa <_printf_float+0x342>
 8015b26:	e680      	b.n	801582a <_printf_float+0xc2>
 8015b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b2a:	2a01      	cmp	r2, #1
 8015b2c:	dc01      	bgt.n	8015b32 <_printf_float+0x3ca>
 8015b2e:	07db      	lsls	r3, r3, #31
 8015b30:	d538      	bpl.n	8015ba4 <_printf_float+0x43c>
 8015b32:	2301      	movs	r3, #1
 8015b34:	4642      	mov	r2, r8
 8015b36:	4631      	mov	r1, r6
 8015b38:	4628      	mov	r0, r5
 8015b3a:	47b8      	blx	r7
 8015b3c:	3001      	adds	r0, #1
 8015b3e:	f43f ae74 	beq.w	801582a <_printf_float+0xc2>
 8015b42:	ee18 3a10 	vmov	r3, s16
 8015b46:	4652      	mov	r2, sl
 8015b48:	4631      	mov	r1, r6
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	47b8      	blx	r7
 8015b4e:	3001      	adds	r0, #1
 8015b50:	f43f ae6b 	beq.w	801582a <_printf_float+0xc2>
 8015b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b58:	2200      	movs	r2, #0
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	f7ea ffdc 	bl	8000b18 <__aeabi_dcmpeq>
 8015b60:	b9d8      	cbnz	r0, 8015b9a <_printf_float+0x432>
 8015b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b64:	f108 0201 	add.w	r2, r8, #1
 8015b68:	3b01      	subs	r3, #1
 8015b6a:	4631      	mov	r1, r6
 8015b6c:	4628      	mov	r0, r5
 8015b6e:	47b8      	blx	r7
 8015b70:	3001      	adds	r0, #1
 8015b72:	d10e      	bne.n	8015b92 <_printf_float+0x42a>
 8015b74:	e659      	b.n	801582a <_printf_float+0xc2>
 8015b76:	2301      	movs	r3, #1
 8015b78:	4652      	mov	r2, sl
 8015b7a:	4631      	mov	r1, r6
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	47b8      	blx	r7
 8015b80:	3001      	adds	r0, #1
 8015b82:	f43f ae52 	beq.w	801582a <_printf_float+0xc2>
 8015b86:	f108 0801 	add.w	r8, r8, #1
 8015b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	4543      	cmp	r3, r8
 8015b90:	dcf1      	bgt.n	8015b76 <_printf_float+0x40e>
 8015b92:	464b      	mov	r3, r9
 8015b94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b98:	e6dc      	b.n	8015954 <_printf_float+0x1ec>
 8015b9a:	f04f 0800 	mov.w	r8, #0
 8015b9e:	f104 0a1a 	add.w	sl, r4, #26
 8015ba2:	e7f2      	b.n	8015b8a <_printf_float+0x422>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	4642      	mov	r2, r8
 8015ba8:	e7df      	b.n	8015b6a <_printf_float+0x402>
 8015baa:	2301      	movs	r3, #1
 8015bac:	464a      	mov	r2, r9
 8015bae:	4631      	mov	r1, r6
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	47b8      	blx	r7
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	f43f ae38 	beq.w	801582a <_printf_float+0xc2>
 8015bba:	f108 0801 	add.w	r8, r8, #1
 8015bbe:	68e3      	ldr	r3, [r4, #12]
 8015bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bc2:	1a5b      	subs	r3, r3, r1
 8015bc4:	4543      	cmp	r3, r8
 8015bc6:	dcf0      	bgt.n	8015baa <_printf_float+0x442>
 8015bc8:	e6fa      	b.n	80159c0 <_printf_float+0x258>
 8015bca:	f04f 0800 	mov.w	r8, #0
 8015bce:	f104 0919 	add.w	r9, r4, #25
 8015bd2:	e7f4      	b.n	8015bbe <_printf_float+0x456>

08015bd4 <_printf_common>:
 8015bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bd8:	4616      	mov	r6, r2
 8015bda:	4699      	mov	r9, r3
 8015bdc:	688a      	ldr	r2, [r1, #8]
 8015bde:	690b      	ldr	r3, [r1, #16]
 8015be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015be4:	4293      	cmp	r3, r2
 8015be6:	bfb8      	it	lt
 8015be8:	4613      	movlt	r3, r2
 8015bea:	6033      	str	r3, [r6, #0]
 8015bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015bf0:	4607      	mov	r7, r0
 8015bf2:	460c      	mov	r4, r1
 8015bf4:	b10a      	cbz	r2, 8015bfa <_printf_common+0x26>
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	6033      	str	r3, [r6, #0]
 8015bfa:	6823      	ldr	r3, [r4, #0]
 8015bfc:	0699      	lsls	r1, r3, #26
 8015bfe:	bf42      	ittt	mi
 8015c00:	6833      	ldrmi	r3, [r6, #0]
 8015c02:	3302      	addmi	r3, #2
 8015c04:	6033      	strmi	r3, [r6, #0]
 8015c06:	6825      	ldr	r5, [r4, #0]
 8015c08:	f015 0506 	ands.w	r5, r5, #6
 8015c0c:	d106      	bne.n	8015c1c <_printf_common+0x48>
 8015c0e:	f104 0a19 	add.w	sl, r4, #25
 8015c12:	68e3      	ldr	r3, [r4, #12]
 8015c14:	6832      	ldr	r2, [r6, #0]
 8015c16:	1a9b      	subs	r3, r3, r2
 8015c18:	42ab      	cmp	r3, r5
 8015c1a:	dc26      	bgt.n	8015c6a <_printf_common+0x96>
 8015c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c20:	1e13      	subs	r3, r2, #0
 8015c22:	6822      	ldr	r2, [r4, #0]
 8015c24:	bf18      	it	ne
 8015c26:	2301      	movne	r3, #1
 8015c28:	0692      	lsls	r2, r2, #26
 8015c2a:	d42b      	bmi.n	8015c84 <_printf_common+0xb0>
 8015c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c30:	4649      	mov	r1, r9
 8015c32:	4638      	mov	r0, r7
 8015c34:	47c0      	blx	r8
 8015c36:	3001      	adds	r0, #1
 8015c38:	d01e      	beq.n	8015c78 <_printf_common+0xa4>
 8015c3a:	6823      	ldr	r3, [r4, #0]
 8015c3c:	68e5      	ldr	r5, [r4, #12]
 8015c3e:	6832      	ldr	r2, [r6, #0]
 8015c40:	f003 0306 	and.w	r3, r3, #6
 8015c44:	2b04      	cmp	r3, #4
 8015c46:	bf08      	it	eq
 8015c48:	1aad      	subeq	r5, r5, r2
 8015c4a:	68a3      	ldr	r3, [r4, #8]
 8015c4c:	6922      	ldr	r2, [r4, #16]
 8015c4e:	bf0c      	ite	eq
 8015c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c54:	2500      	movne	r5, #0
 8015c56:	4293      	cmp	r3, r2
 8015c58:	bfc4      	itt	gt
 8015c5a:	1a9b      	subgt	r3, r3, r2
 8015c5c:	18ed      	addgt	r5, r5, r3
 8015c5e:	2600      	movs	r6, #0
 8015c60:	341a      	adds	r4, #26
 8015c62:	42b5      	cmp	r5, r6
 8015c64:	d11a      	bne.n	8015c9c <_printf_common+0xc8>
 8015c66:	2000      	movs	r0, #0
 8015c68:	e008      	b.n	8015c7c <_printf_common+0xa8>
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	4652      	mov	r2, sl
 8015c6e:	4649      	mov	r1, r9
 8015c70:	4638      	mov	r0, r7
 8015c72:	47c0      	blx	r8
 8015c74:	3001      	adds	r0, #1
 8015c76:	d103      	bne.n	8015c80 <_printf_common+0xac>
 8015c78:	f04f 30ff 	mov.w	r0, #4294967295
 8015c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c80:	3501      	adds	r5, #1
 8015c82:	e7c6      	b.n	8015c12 <_printf_common+0x3e>
 8015c84:	18e1      	adds	r1, r4, r3
 8015c86:	1c5a      	adds	r2, r3, #1
 8015c88:	2030      	movs	r0, #48	; 0x30
 8015c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c8e:	4422      	add	r2, r4
 8015c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c98:	3302      	adds	r3, #2
 8015c9a:	e7c7      	b.n	8015c2c <_printf_common+0x58>
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	4649      	mov	r1, r9
 8015ca2:	4638      	mov	r0, r7
 8015ca4:	47c0      	blx	r8
 8015ca6:	3001      	adds	r0, #1
 8015ca8:	d0e6      	beq.n	8015c78 <_printf_common+0xa4>
 8015caa:	3601      	adds	r6, #1
 8015cac:	e7d9      	b.n	8015c62 <_printf_common+0x8e>
	...

08015cb0 <_printf_i>:
 8015cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb4:	7e0f      	ldrb	r7, [r1, #24]
 8015cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015cb8:	2f78      	cmp	r7, #120	; 0x78
 8015cba:	4691      	mov	r9, r2
 8015cbc:	4680      	mov	r8, r0
 8015cbe:	460c      	mov	r4, r1
 8015cc0:	469a      	mov	sl, r3
 8015cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015cc6:	d807      	bhi.n	8015cd8 <_printf_i+0x28>
 8015cc8:	2f62      	cmp	r7, #98	; 0x62
 8015cca:	d80a      	bhi.n	8015ce2 <_printf_i+0x32>
 8015ccc:	2f00      	cmp	r7, #0
 8015cce:	f000 80d8 	beq.w	8015e82 <_printf_i+0x1d2>
 8015cd2:	2f58      	cmp	r7, #88	; 0x58
 8015cd4:	f000 80a3 	beq.w	8015e1e <_printf_i+0x16e>
 8015cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ce0:	e03a      	b.n	8015d58 <_printf_i+0xa8>
 8015ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015ce6:	2b15      	cmp	r3, #21
 8015ce8:	d8f6      	bhi.n	8015cd8 <_printf_i+0x28>
 8015cea:	a101      	add	r1, pc, #4	; (adr r1, 8015cf0 <_printf_i+0x40>)
 8015cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015cf0:	08015d49 	.word	0x08015d49
 8015cf4:	08015d5d 	.word	0x08015d5d
 8015cf8:	08015cd9 	.word	0x08015cd9
 8015cfc:	08015cd9 	.word	0x08015cd9
 8015d00:	08015cd9 	.word	0x08015cd9
 8015d04:	08015cd9 	.word	0x08015cd9
 8015d08:	08015d5d 	.word	0x08015d5d
 8015d0c:	08015cd9 	.word	0x08015cd9
 8015d10:	08015cd9 	.word	0x08015cd9
 8015d14:	08015cd9 	.word	0x08015cd9
 8015d18:	08015cd9 	.word	0x08015cd9
 8015d1c:	08015e69 	.word	0x08015e69
 8015d20:	08015d8d 	.word	0x08015d8d
 8015d24:	08015e4b 	.word	0x08015e4b
 8015d28:	08015cd9 	.word	0x08015cd9
 8015d2c:	08015cd9 	.word	0x08015cd9
 8015d30:	08015e8b 	.word	0x08015e8b
 8015d34:	08015cd9 	.word	0x08015cd9
 8015d38:	08015d8d 	.word	0x08015d8d
 8015d3c:	08015cd9 	.word	0x08015cd9
 8015d40:	08015cd9 	.word	0x08015cd9
 8015d44:	08015e53 	.word	0x08015e53
 8015d48:	682b      	ldr	r3, [r5, #0]
 8015d4a:	1d1a      	adds	r2, r3, #4
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	602a      	str	r2, [r5, #0]
 8015d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d58:	2301      	movs	r3, #1
 8015d5a:	e0a3      	b.n	8015ea4 <_printf_i+0x1f4>
 8015d5c:	6820      	ldr	r0, [r4, #0]
 8015d5e:	6829      	ldr	r1, [r5, #0]
 8015d60:	0606      	lsls	r6, r0, #24
 8015d62:	f101 0304 	add.w	r3, r1, #4
 8015d66:	d50a      	bpl.n	8015d7e <_printf_i+0xce>
 8015d68:	680e      	ldr	r6, [r1, #0]
 8015d6a:	602b      	str	r3, [r5, #0]
 8015d6c:	2e00      	cmp	r6, #0
 8015d6e:	da03      	bge.n	8015d78 <_printf_i+0xc8>
 8015d70:	232d      	movs	r3, #45	; 0x2d
 8015d72:	4276      	negs	r6, r6
 8015d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d78:	485e      	ldr	r0, [pc, #376]	; (8015ef4 <_printf_i+0x244>)
 8015d7a:	230a      	movs	r3, #10
 8015d7c:	e019      	b.n	8015db2 <_printf_i+0x102>
 8015d7e:	680e      	ldr	r6, [r1, #0]
 8015d80:	602b      	str	r3, [r5, #0]
 8015d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d86:	bf18      	it	ne
 8015d88:	b236      	sxthne	r6, r6
 8015d8a:	e7ef      	b.n	8015d6c <_printf_i+0xbc>
 8015d8c:	682b      	ldr	r3, [r5, #0]
 8015d8e:	6820      	ldr	r0, [r4, #0]
 8015d90:	1d19      	adds	r1, r3, #4
 8015d92:	6029      	str	r1, [r5, #0]
 8015d94:	0601      	lsls	r1, r0, #24
 8015d96:	d501      	bpl.n	8015d9c <_printf_i+0xec>
 8015d98:	681e      	ldr	r6, [r3, #0]
 8015d9a:	e002      	b.n	8015da2 <_printf_i+0xf2>
 8015d9c:	0646      	lsls	r6, r0, #25
 8015d9e:	d5fb      	bpl.n	8015d98 <_printf_i+0xe8>
 8015da0:	881e      	ldrh	r6, [r3, #0]
 8015da2:	4854      	ldr	r0, [pc, #336]	; (8015ef4 <_printf_i+0x244>)
 8015da4:	2f6f      	cmp	r7, #111	; 0x6f
 8015da6:	bf0c      	ite	eq
 8015da8:	2308      	moveq	r3, #8
 8015daa:	230a      	movne	r3, #10
 8015dac:	2100      	movs	r1, #0
 8015dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015db2:	6865      	ldr	r5, [r4, #4]
 8015db4:	60a5      	str	r5, [r4, #8]
 8015db6:	2d00      	cmp	r5, #0
 8015db8:	bfa2      	ittt	ge
 8015dba:	6821      	ldrge	r1, [r4, #0]
 8015dbc:	f021 0104 	bicge.w	r1, r1, #4
 8015dc0:	6021      	strge	r1, [r4, #0]
 8015dc2:	b90e      	cbnz	r6, 8015dc8 <_printf_i+0x118>
 8015dc4:	2d00      	cmp	r5, #0
 8015dc6:	d04d      	beq.n	8015e64 <_printf_i+0x1b4>
 8015dc8:	4615      	mov	r5, r2
 8015dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8015dce:	fb03 6711 	mls	r7, r3, r1, r6
 8015dd2:	5dc7      	ldrb	r7, [r0, r7]
 8015dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015dd8:	4637      	mov	r7, r6
 8015dda:	42bb      	cmp	r3, r7
 8015ddc:	460e      	mov	r6, r1
 8015dde:	d9f4      	bls.n	8015dca <_printf_i+0x11a>
 8015de0:	2b08      	cmp	r3, #8
 8015de2:	d10b      	bne.n	8015dfc <_printf_i+0x14c>
 8015de4:	6823      	ldr	r3, [r4, #0]
 8015de6:	07de      	lsls	r6, r3, #31
 8015de8:	d508      	bpl.n	8015dfc <_printf_i+0x14c>
 8015dea:	6923      	ldr	r3, [r4, #16]
 8015dec:	6861      	ldr	r1, [r4, #4]
 8015dee:	4299      	cmp	r1, r3
 8015df0:	bfde      	ittt	le
 8015df2:	2330      	movle	r3, #48	; 0x30
 8015df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015dfc:	1b52      	subs	r2, r2, r5
 8015dfe:	6122      	str	r2, [r4, #16]
 8015e00:	f8cd a000 	str.w	sl, [sp]
 8015e04:	464b      	mov	r3, r9
 8015e06:	aa03      	add	r2, sp, #12
 8015e08:	4621      	mov	r1, r4
 8015e0a:	4640      	mov	r0, r8
 8015e0c:	f7ff fee2 	bl	8015bd4 <_printf_common>
 8015e10:	3001      	adds	r0, #1
 8015e12:	d14c      	bne.n	8015eae <_printf_i+0x1fe>
 8015e14:	f04f 30ff 	mov.w	r0, #4294967295
 8015e18:	b004      	add	sp, #16
 8015e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e1e:	4835      	ldr	r0, [pc, #212]	; (8015ef4 <_printf_i+0x244>)
 8015e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015e24:	6829      	ldr	r1, [r5, #0]
 8015e26:	6823      	ldr	r3, [r4, #0]
 8015e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8015e2c:	6029      	str	r1, [r5, #0]
 8015e2e:	061d      	lsls	r5, r3, #24
 8015e30:	d514      	bpl.n	8015e5c <_printf_i+0x1ac>
 8015e32:	07df      	lsls	r7, r3, #31
 8015e34:	bf44      	itt	mi
 8015e36:	f043 0320 	orrmi.w	r3, r3, #32
 8015e3a:	6023      	strmi	r3, [r4, #0]
 8015e3c:	b91e      	cbnz	r6, 8015e46 <_printf_i+0x196>
 8015e3e:	6823      	ldr	r3, [r4, #0]
 8015e40:	f023 0320 	bic.w	r3, r3, #32
 8015e44:	6023      	str	r3, [r4, #0]
 8015e46:	2310      	movs	r3, #16
 8015e48:	e7b0      	b.n	8015dac <_printf_i+0xfc>
 8015e4a:	6823      	ldr	r3, [r4, #0]
 8015e4c:	f043 0320 	orr.w	r3, r3, #32
 8015e50:	6023      	str	r3, [r4, #0]
 8015e52:	2378      	movs	r3, #120	; 0x78
 8015e54:	4828      	ldr	r0, [pc, #160]	; (8015ef8 <_printf_i+0x248>)
 8015e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015e5a:	e7e3      	b.n	8015e24 <_printf_i+0x174>
 8015e5c:	0659      	lsls	r1, r3, #25
 8015e5e:	bf48      	it	mi
 8015e60:	b2b6      	uxthmi	r6, r6
 8015e62:	e7e6      	b.n	8015e32 <_printf_i+0x182>
 8015e64:	4615      	mov	r5, r2
 8015e66:	e7bb      	b.n	8015de0 <_printf_i+0x130>
 8015e68:	682b      	ldr	r3, [r5, #0]
 8015e6a:	6826      	ldr	r6, [r4, #0]
 8015e6c:	6961      	ldr	r1, [r4, #20]
 8015e6e:	1d18      	adds	r0, r3, #4
 8015e70:	6028      	str	r0, [r5, #0]
 8015e72:	0635      	lsls	r5, r6, #24
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	d501      	bpl.n	8015e7c <_printf_i+0x1cc>
 8015e78:	6019      	str	r1, [r3, #0]
 8015e7a:	e002      	b.n	8015e82 <_printf_i+0x1d2>
 8015e7c:	0670      	lsls	r0, r6, #25
 8015e7e:	d5fb      	bpl.n	8015e78 <_printf_i+0x1c8>
 8015e80:	8019      	strh	r1, [r3, #0]
 8015e82:	2300      	movs	r3, #0
 8015e84:	6123      	str	r3, [r4, #16]
 8015e86:	4615      	mov	r5, r2
 8015e88:	e7ba      	b.n	8015e00 <_printf_i+0x150>
 8015e8a:	682b      	ldr	r3, [r5, #0]
 8015e8c:	1d1a      	adds	r2, r3, #4
 8015e8e:	602a      	str	r2, [r5, #0]
 8015e90:	681d      	ldr	r5, [r3, #0]
 8015e92:	6862      	ldr	r2, [r4, #4]
 8015e94:	2100      	movs	r1, #0
 8015e96:	4628      	mov	r0, r5
 8015e98:	f7ea f9ca 	bl	8000230 <memchr>
 8015e9c:	b108      	cbz	r0, 8015ea2 <_printf_i+0x1f2>
 8015e9e:	1b40      	subs	r0, r0, r5
 8015ea0:	6060      	str	r0, [r4, #4]
 8015ea2:	6863      	ldr	r3, [r4, #4]
 8015ea4:	6123      	str	r3, [r4, #16]
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015eac:	e7a8      	b.n	8015e00 <_printf_i+0x150>
 8015eae:	6923      	ldr	r3, [r4, #16]
 8015eb0:	462a      	mov	r2, r5
 8015eb2:	4649      	mov	r1, r9
 8015eb4:	4640      	mov	r0, r8
 8015eb6:	47d0      	blx	sl
 8015eb8:	3001      	adds	r0, #1
 8015eba:	d0ab      	beq.n	8015e14 <_printf_i+0x164>
 8015ebc:	6823      	ldr	r3, [r4, #0]
 8015ebe:	079b      	lsls	r3, r3, #30
 8015ec0:	d413      	bmi.n	8015eea <_printf_i+0x23a>
 8015ec2:	68e0      	ldr	r0, [r4, #12]
 8015ec4:	9b03      	ldr	r3, [sp, #12]
 8015ec6:	4298      	cmp	r0, r3
 8015ec8:	bfb8      	it	lt
 8015eca:	4618      	movlt	r0, r3
 8015ecc:	e7a4      	b.n	8015e18 <_printf_i+0x168>
 8015ece:	2301      	movs	r3, #1
 8015ed0:	4632      	mov	r2, r6
 8015ed2:	4649      	mov	r1, r9
 8015ed4:	4640      	mov	r0, r8
 8015ed6:	47d0      	blx	sl
 8015ed8:	3001      	adds	r0, #1
 8015eda:	d09b      	beq.n	8015e14 <_printf_i+0x164>
 8015edc:	3501      	adds	r5, #1
 8015ede:	68e3      	ldr	r3, [r4, #12]
 8015ee0:	9903      	ldr	r1, [sp, #12]
 8015ee2:	1a5b      	subs	r3, r3, r1
 8015ee4:	42ab      	cmp	r3, r5
 8015ee6:	dcf2      	bgt.n	8015ece <_printf_i+0x21e>
 8015ee8:	e7eb      	b.n	8015ec2 <_printf_i+0x212>
 8015eea:	2500      	movs	r5, #0
 8015eec:	f104 0619 	add.w	r6, r4, #25
 8015ef0:	e7f5      	b.n	8015ede <_printf_i+0x22e>
 8015ef2:	bf00      	nop
 8015ef4:	08018a1a 	.word	0x08018a1a
 8015ef8:	08018a2b 	.word	0x08018a2b

08015efc <iprintf>:
 8015efc:	b40f      	push	{r0, r1, r2, r3}
 8015efe:	4b0a      	ldr	r3, [pc, #40]	; (8015f28 <iprintf+0x2c>)
 8015f00:	b513      	push	{r0, r1, r4, lr}
 8015f02:	681c      	ldr	r4, [r3, #0]
 8015f04:	b124      	cbz	r4, 8015f10 <iprintf+0x14>
 8015f06:	69a3      	ldr	r3, [r4, #24]
 8015f08:	b913      	cbnz	r3, 8015f10 <iprintf+0x14>
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	f001 f8d8 	bl	80170c0 <__sinit>
 8015f10:	ab05      	add	r3, sp, #20
 8015f12:	9a04      	ldr	r2, [sp, #16]
 8015f14:	68a1      	ldr	r1, [r4, #8]
 8015f16:	9301      	str	r3, [sp, #4]
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f001 fe87 	bl	8017c2c <_vfiprintf_r>
 8015f1e:	b002      	add	sp, #8
 8015f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f24:	b004      	add	sp, #16
 8015f26:	4770      	bx	lr
 8015f28:	20000184 	.word	0x20000184

08015f2c <_puts_r>:
 8015f2c:	b570      	push	{r4, r5, r6, lr}
 8015f2e:	460e      	mov	r6, r1
 8015f30:	4605      	mov	r5, r0
 8015f32:	b118      	cbz	r0, 8015f3c <_puts_r+0x10>
 8015f34:	6983      	ldr	r3, [r0, #24]
 8015f36:	b90b      	cbnz	r3, 8015f3c <_puts_r+0x10>
 8015f38:	f001 f8c2 	bl	80170c0 <__sinit>
 8015f3c:	69ab      	ldr	r3, [r5, #24]
 8015f3e:	68ac      	ldr	r4, [r5, #8]
 8015f40:	b913      	cbnz	r3, 8015f48 <_puts_r+0x1c>
 8015f42:	4628      	mov	r0, r5
 8015f44:	f001 f8bc 	bl	80170c0 <__sinit>
 8015f48:	4b2c      	ldr	r3, [pc, #176]	; (8015ffc <_puts_r+0xd0>)
 8015f4a:	429c      	cmp	r4, r3
 8015f4c:	d120      	bne.n	8015f90 <_puts_r+0x64>
 8015f4e:	686c      	ldr	r4, [r5, #4]
 8015f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f52:	07db      	lsls	r3, r3, #31
 8015f54:	d405      	bmi.n	8015f62 <_puts_r+0x36>
 8015f56:	89a3      	ldrh	r3, [r4, #12]
 8015f58:	0598      	lsls	r0, r3, #22
 8015f5a:	d402      	bmi.n	8015f62 <_puts_r+0x36>
 8015f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f5e:	f001 f952 	bl	8017206 <__retarget_lock_acquire_recursive>
 8015f62:	89a3      	ldrh	r3, [r4, #12]
 8015f64:	0719      	lsls	r1, r3, #28
 8015f66:	d51d      	bpl.n	8015fa4 <_puts_r+0x78>
 8015f68:	6923      	ldr	r3, [r4, #16]
 8015f6a:	b1db      	cbz	r3, 8015fa4 <_puts_r+0x78>
 8015f6c:	3e01      	subs	r6, #1
 8015f6e:	68a3      	ldr	r3, [r4, #8]
 8015f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015f74:	3b01      	subs	r3, #1
 8015f76:	60a3      	str	r3, [r4, #8]
 8015f78:	bb39      	cbnz	r1, 8015fca <_puts_r+0x9e>
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	da38      	bge.n	8015ff0 <_puts_r+0xc4>
 8015f7e:	4622      	mov	r2, r4
 8015f80:	210a      	movs	r1, #10
 8015f82:	4628      	mov	r0, r5
 8015f84:	f000 f848 	bl	8016018 <__swbuf_r>
 8015f88:	3001      	adds	r0, #1
 8015f8a:	d011      	beq.n	8015fb0 <_puts_r+0x84>
 8015f8c:	250a      	movs	r5, #10
 8015f8e:	e011      	b.n	8015fb4 <_puts_r+0x88>
 8015f90:	4b1b      	ldr	r3, [pc, #108]	; (8016000 <_puts_r+0xd4>)
 8015f92:	429c      	cmp	r4, r3
 8015f94:	d101      	bne.n	8015f9a <_puts_r+0x6e>
 8015f96:	68ac      	ldr	r4, [r5, #8]
 8015f98:	e7da      	b.n	8015f50 <_puts_r+0x24>
 8015f9a:	4b1a      	ldr	r3, [pc, #104]	; (8016004 <_puts_r+0xd8>)
 8015f9c:	429c      	cmp	r4, r3
 8015f9e:	bf08      	it	eq
 8015fa0:	68ec      	ldreq	r4, [r5, #12]
 8015fa2:	e7d5      	b.n	8015f50 <_puts_r+0x24>
 8015fa4:	4621      	mov	r1, r4
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f000 f888 	bl	80160bc <__swsetup_r>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	d0dd      	beq.n	8015f6c <_puts_r+0x40>
 8015fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8015fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015fb6:	07da      	lsls	r2, r3, #31
 8015fb8:	d405      	bmi.n	8015fc6 <_puts_r+0x9a>
 8015fba:	89a3      	ldrh	r3, [r4, #12]
 8015fbc:	059b      	lsls	r3, r3, #22
 8015fbe:	d402      	bmi.n	8015fc6 <_puts_r+0x9a>
 8015fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fc2:	f001 f921 	bl	8017208 <__retarget_lock_release_recursive>
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	bd70      	pop	{r4, r5, r6, pc}
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	da04      	bge.n	8015fd8 <_puts_r+0xac>
 8015fce:	69a2      	ldr	r2, [r4, #24]
 8015fd0:	429a      	cmp	r2, r3
 8015fd2:	dc06      	bgt.n	8015fe2 <_puts_r+0xb6>
 8015fd4:	290a      	cmp	r1, #10
 8015fd6:	d004      	beq.n	8015fe2 <_puts_r+0xb6>
 8015fd8:	6823      	ldr	r3, [r4, #0]
 8015fda:	1c5a      	adds	r2, r3, #1
 8015fdc:	6022      	str	r2, [r4, #0]
 8015fde:	7019      	strb	r1, [r3, #0]
 8015fe0:	e7c5      	b.n	8015f6e <_puts_r+0x42>
 8015fe2:	4622      	mov	r2, r4
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f000 f817 	bl	8016018 <__swbuf_r>
 8015fea:	3001      	adds	r0, #1
 8015fec:	d1bf      	bne.n	8015f6e <_puts_r+0x42>
 8015fee:	e7df      	b.n	8015fb0 <_puts_r+0x84>
 8015ff0:	6823      	ldr	r3, [r4, #0]
 8015ff2:	250a      	movs	r5, #10
 8015ff4:	1c5a      	adds	r2, r3, #1
 8015ff6:	6022      	str	r2, [r4, #0]
 8015ff8:	701d      	strb	r5, [r3, #0]
 8015ffa:	e7db      	b.n	8015fb4 <_puts_r+0x88>
 8015ffc:	08018aec 	.word	0x08018aec
 8016000:	08018b0c 	.word	0x08018b0c
 8016004:	08018acc 	.word	0x08018acc

08016008 <puts>:
 8016008:	4b02      	ldr	r3, [pc, #8]	; (8016014 <puts+0xc>)
 801600a:	4601      	mov	r1, r0
 801600c:	6818      	ldr	r0, [r3, #0]
 801600e:	f7ff bf8d 	b.w	8015f2c <_puts_r>
 8016012:	bf00      	nop
 8016014:	20000184 	.word	0x20000184

08016018 <__swbuf_r>:
 8016018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601a:	460e      	mov	r6, r1
 801601c:	4614      	mov	r4, r2
 801601e:	4605      	mov	r5, r0
 8016020:	b118      	cbz	r0, 801602a <__swbuf_r+0x12>
 8016022:	6983      	ldr	r3, [r0, #24]
 8016024:	b90b      	cbnz	r3, 801602a <__swbuf_r+0x12>
 8016026:	f001 f84b 	bl	80170c0 <__sinit>
 801602a:	4b21      	ldr	r3, [pc, #132]	; (80160b0 <__swbuf_r+0x98>)
 801602c:	429c      	cmp	r4, r3
 801602e:	d12b      	bne.n	8016088 <__swbuf_r+0x70>
 8016030:	686c      	ldr	r4, [r5, #4]
 8016032:	69a3      	ldr	r3, [r4, #24]
 8016034:	60a3      	str	r3, [r4, #8]
 8016036:	89a3      	ldrh	r3, [r4, #12]
 8016038:	071a      	lsls	r2, r3, #28
 801603a:	d52f      	bpl.n	801609c <__swbuf_r+0x84>
 801603c:	6923      	ldr	r3, [r4, #16]
 801603e:	b36b      	cbz	r3, 801609c <__swbuf_r+0x84>
 8016040:	6923      	ldr	r3, [r4, #16]
 8016042:	6820      	ldr	r0, [r4, #0]
 8016044:	1ac0      	subs	r0, r0, r3
 8016046:	6963      	ldr	r3, [r4, #20]
 8016048:	b2f6      	uxtb	r6, r6
 801604a:	4283      	cmp	r3, r0
 801604c:	4637      	mov	r7, r6
 801604e:	dc04      	bgt.n	801605a <__swbuf_r+0x42>
 8016050:	4621      	mov	r1, r4
 8016052:	4628      	mov	r0, r5
 8016054:	f000 ffa0 	bl	8016f98 <_fflush_r>
 8016058:	bb30      	cbnz	r0, 80160a8 <__swbuf_r+0x90>
 801605a:	68a3      	ldr	r3, [r4, #8]
 801605c:	3b01      	subs	r3, #1
 801605e:	60a3      	str	r3, [r4, #8]
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	1c5a      	adds	r2, r3, #1
 8016064:	6022      	str	r2, [r4, #0]
 8016066:	701e      	strb	r6, [r3, #0]
 8016068:	6963      	ldr	r3, [r4, #20]
 801606a:	3001      	adds	r0, #1
 801606c:	4283      	cmp	r3, r0
 801606e:	d004      	beq.n	801607a <__swbuf_r+0x62>
 8016070:	89a3      	ldrh	r3, [r4, #12]
 8016072:	07db      	lsls	r3, r3, #31
 8016074:	d506      	bpl.n	8016084 <__swbuf_r+0x6c>
 8016076:	2e0a      	cmp	r6, #10
 8016078:	d104      	bne.n	8016084 <__swbuf_r+0x6c>
 801607a:	4621      	mov	r1, r4
 801607c:	4628      	mov	r0, r5
 801607e:	f000 ff8b 	bl	8016f98 <_fflush_r>
 8016082:	b988      	cbnz	r0, 80160a8 <__swbuf_r+0x90>
 8016084:	4638      	mov	r0, r7
 8016086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016088:	4b0a      	ldr	r3, [pc, #40]	; (80160b4 <__swbuf_r+0x9c>)
 801608a:	429c      	cmp	r4, r3
 801608c:	d101      	bne.n	8016092 <__swbuf_r+0x7a>
 801608e:	68ac      	ldr	r4, [r5, #8]
 8016090:	e7cf      	b.n	8016032 <__swbuf_r+0x1a>
 8016092:	4b09      	ldr	r3, [pc, #36]	; (80160b8 <__swbuf_r+0xa0>)
 8016094:	429c      	cmp	r4, r3
 8016096:	bf08      	it	eq
 8016098:	68ec      	ldreq	r4, [r5, #12]
 801609a:	e7ca      	b.n	8016032 <__swbuf_r+0x1a>
 801609c:	4621      	mov	r1, r4
 801609e:	4628      	mov	r0, r5
 80160a0:	f000 f80c 	bl	80160bc <__swsetup_r>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d0cb      	beq.n	8016040 <__swbuf_r+0x28>
 80160a8:	f04f 37ff 	mov.w	r7, #4294967295
 80160ac:	e7ea      	b.n	8016084 <__swbuf_r+0x6c>
 80160ae:	bf00      	nop
 80160b0:	08018aec 	.word	0x08018aec
 80160b4:	08018b0c 	.word	0x08018b0c
 80160b8:	08018acc 	.word	0x08018acc

080160bc <__swsetup_r>:
 80160bc:	4b32      	ldr	r3, [pc, #200]	; (8016188 <__swsetup_r+0xcc>)
 80160be:	b570      	push	{r4, r5, r6, lr}
 80160c0:	681d      	ldr	r5, [r3, #0]
 80160c2:	4606      	mov	r6, r0
 80160c4:	460c      	mov	r4, r1
 80160c6:	b125      	cbz	r5, 80160d2 <__swsetup_r+0x16>
 80160c8:	69ab      	ldr	r3, [r5, #24]
 80160ca:	b913      	cbnz	r3, 80160d2 <__swsetup_r+0x16>
 80160cc:	4628      	mov	r0, r5
 80160ce:	f000 fff7 	bl	80170c0 <__sinit>
 80160d2:	4b2e      	ldr	r3, [pc, #184]	; (801618c <__swsetup_r+0xd0>)
 80160d4:	429c      	cmp	r4, r3
 80160d6:	d10f      	bne.n	80160f8 <__swsetup_r+0x3c>
 80160d8:	686c      	ldr	r4, [r5, #4]
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160e0:	0719      	lsls	r1, r3, #28
 80160e2:	d42c      	bmi.n	801613e <__swsetup_r+0x82>
 80160e4:	06dd      	lsls	r5, r3, #27
 80160e6:	d411      	bmi.n	801610c <__swsetup_r+0x50>
 80160e8:	2309      	movs	r3, #9
 80160ea:	6033      	str	r3, [r6, #0]
 80160ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80160f0:	81a3      	strh	r3, [r4, #12]
 80160f2:	f04f 30ff 	mov.w	r0, #4294967295
 80160f6:	e03e      	b.n	8016176 <__swsetup_r+0xba>
 80160f8:	4b25      	ldr	r3, [pc, #148]	; (8016190 <__swsetup_r+0xd4>)
 80160fa:	429c      	cmp	r4, r3
 80160fc:	d101      	bne.n	8016102 <__swsetup_r+0x46>
 80160fe:	68ac      	ldr	r4, [r5, #8]
 8016100:	e7eb      	b.n	80160da <__swsetup_r+0x1e>
 8016102:	4b24      	ldr	r3, [pc, #144]	; (8016194 <__swsetup_r+0xd8>)
 8016104:	429c      	cmp	r4, r3
 8016106:	bf08      	it	eq
 8016108:	68ec      	ldreq	r4, [r5, #12]
 801610a:	e7e6      	b.n	80160da <__swsetup_r+0x1e>
 801610c:	0758      	lsls	r0, r3, #29
 801610e:	d512      	bpl.n	8016136 <__swsetup_r+0x7a>
 8016110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016112:	b141      	cbz	r1, 8016126 <__swsetup_r+0x6a>
 8016114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016118:	4299      	cmp	r1, r3
 801611a:	d002      	beq.n	8016122 <__swsetup_r+0x66>
 801611c:	4630      	mov	r0, r6
 801611e:	f001 fc7b 	bl	8017a18 <_free_r>
 8016122:	2300      	movs	r3, #0
 8016124:	6363      	str	r3, [r4, #52]	; 0x34
 8016126:	89a3      	ldrh	r3, [r4, #12]
 8016128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801612c:	81a3      	strh	r3, [r4, #12]
 801612e:	2300      	movs	r3, #0
 8016130:	6063      	str	r3, [r4, #4]
 8016132:	6923      	ldr	r3, [r4, #16]
 8016134:	6023      	str	r3, [r4, #0]
 8016136:	89a3      	ldrh	r3, [r4, #12]
 8016138:	f043 0308 	orr.w	r3, r3, #8
 801613c:	81a3      	strh	r3, [r4, #12]
 801613e:	6923      	ldr	r3, [r4, #16]
 8016140:	b94b      	cbnz	r3, 8016156 <__swsetup_r+0x9a>
 8016142:	89a3      	ldrh	r3, [r4, #12]
 8016144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801614c:	d003      	beq.n	8016156 <__swsetup_r+0x9a>
 801614e:	4621      	mov	r1, r4
 8016150:	4630      	mov	r0, r6
 8016152:	f001 f87f 	bl	8017254 <__smakebuf_r>
 8016156:	89a0      	ldrh	r0, [r4, #12]
 8016158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801615c:	f010 0301 	ands.w	r3, r0, #1
 8016160:	d00a      	beq.n	8016178 <__swsetup_r+0xbc>
 8016162:	2300      	movs	r3, #0
 8016164:	60a3      	str	r3, [r4, #8]
 8016166:	6963      	ldr	r3, [r4, #20]
 8016168:	425b      	negs	r3, r3
 801616a:	61a3      	str	r3, [r4, #24]
 801616c:	6923      	ldr	r3, [r4, #16]
 801616e:	b943      	cbnz	r3, 8016182 <__swsetup_r+0xc6>
 8016170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016174:	d1ba      	bne.n	80160ec <__swsetup_r+0x30>
 8016176:	bd70      	pop	{r4, r5, r6, pc}
 8016178:	0781      	lsls	r1, r0, #30
 801617a:	bf58      	it	pl
 801617c:	6963      	ldrpl	r3, [r4, #20]
 801617e:	60a3      	str	r3, [r4, #8]
 8016180:	e7f4      	b.n	801616c <__swsetup_r+0xb0>
 8016182:	2000      	movs	r0, #0
 8016184:	e7f7      	b.n	8016176 <__swsetup_r+0xba>
 8016186:	bf00      	nop
 8016188:	20000184 	.word	0x20000184
 801618c:	08018aec 	.word	0x08018aec
 8016190:	08018b0c 	.word	0x08018b0c
 8016194:	08018acc 	.word	0x08018acc

08016198 <quorem>:
 8016198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	6903      	ldr	r3, [r0, #16]
 801619e:	690c      	ldr	r4, [r1, #16]
 80161a0:	42a3      	cmp	r3, r4
 80161a2:	4607      	mov	r7, r0
 80161a4:	f2c0 8081 	blt.w	80162aa <quorem+0x112>
 80161a8:	3c01      	subs	r4, #1
 80161aa:	f101 0814 	add.w	r8, r1, #20
 80161ae:	f100 0514 	add.w	r5, r0, #20
 80161b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80161b6:	9301      	str	r3, [sp, #4]
 80161b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80161bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80161c0:	3301      	adds	r3, #1
 80161c2:	429a      	cmp	r2, r3
 80161c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80161c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80161cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80161d0:	d331      	bcc.n	8016236 <quorem+0x9e>
 80161d2:	f04f 0e00 	mov.w	lr, #0
 80161d6:	4640      	mov	r0, r8
 80161d8:	46ac      	mov	ip, r5
 80161da:	46f2      	mov	sl, lr
 80161dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80161e0:	b293      	uxth	r3, r2
 80161e2:	fb06 e303 	mla	r3, r6, r3, lr
 80161e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	ebaa 0303 	sub.w	r3, sl, r3
 80161f0:	f8dc a000 	ldr.w	sl, [ip]
 80161f4:	0c12      	lsrs	r2, r2, #16
 80161f6:	fa13 f38a 	uxtah	r3, r3, sl
 80161fa:	fb06 e202 	mla	r2, r6, r2, lr
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	9b00      	ldr	r3, [sp, #0]
 8016202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016206:	b292      	uxth	r2, r2
 8016208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801620c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016210:	f8bd 3000 	ldrh.w	r3, [sp]
 8016214:	4581      	cmp	r9, r0
 8016216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801621a:	f84c 3b04 	str.w	r3, [ip], #4
 801621e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016222:	d2db      	bcs.n	80161dc <quorem+0x44>
 8016224:	f855 300b 	ldr.w	r3, [r5, fp]
 8016228:	b92b      	cbnz	r3, 8016236 <quorem+0x9e>
 801622a:	9b01      	ldr	r3, [sp, #4]
 801622c:	3b04      	subs	r3, #4
 801622e:	429d      	cmp	r5, r3
 8016230:	461a      	mov	r2, r3
 8016232:	d32e      	bcc.n	8016292 <quorem+0xfa>
 8016234:	613c      	str	r4, [r7, #16]
 8016236:	4638      	mov	r0, r7
 8016238:	f001 fad6 	bl	80177e8 <__mcmp>
 801623c:	2800      	cmp	r0, #0
 801623e:	db24      	blt.n	801628a <quorem+0xf2>
 8016240:	3601      	adds	r6, #1
 8016242:	4628      	mov	r0, r5
 8016244:	f04f 0c00 	mov.w	ip, #0
 8016248:	f858 2b04 	ldr.w	r2, [r8], #4
 801624c:	f8d0 e000 	ldr.w	lr, [r0]
 8016250:	b293      	uxth	r3, r2
 8016252:	ebac 0303 	sub.w	r3, ip, r3
 8016256:	0c12      	lsrs	r2, r2, #16
 8016258:	fa13 f38e 	uxtah	r3, r3, lr
 801625c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016264:	b29b      	uxth	r3, r3
 8016266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801626a:	45c1      	cmp	r9, r8
 801626c:	f840 3b04 	str.w	r3, [r0], #4
 8016270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016274:	d2e8      	bcs.n	8016248 <quorem+0xb0>
 8016276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801627a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801627e:	b922      	cbnz	r2, 801628a <quorem+0xf2>
 8016280:	3b04      	subs	r3, #4
 8016282:	429d      	cmp	r5, r3
 8016284:	461a      	mov	r2, r3
 8016286:	d30a      	bcc.n	801629e <quorem+0x106>
 8016288:	613c      	str	r4, [r7, #16]
 801628a:	4630      	mov	r0, r6
 801628c:	b003      	add	sp, #12
 801628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016292:	6812      	ldr	r2, [r2, #0]
 8016294:	3b04      	subs	r3, #4
 8016296:	2a00      	cmp	r2, #0
 8016298:	d1cc      	bne.n	8016234 <quorem+0x9c>
 801629a:	3c01      	subs	r4, #1
 801629c:	e7c7      	b.n	801622e <quorem+0x96>
 801629e:	6812      	ldr	r2, [r2, #0]
 80162a0:	3b04      	subs	r3, #4
 80162a2:	2a00      	cmp	r2, #0
 80162a4:	d1f0      	bne.n	8016288 <quorem+0xf0>
 80162a6:	3c01      	subs	r4, #1
 80162a8:	e7eb      	b.n	8016282 <quorem+0xea>
 80162aa:	2000      	movs	r0, #0
 80162ac:	e7ee      	b.n	801628c <quorem+0xf4>
	...

080162b0 <_dtoa_r>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	ed2d 8b04 	vpush	{d8-d9}
 80162b8:	ec57 6b10 	vmov	r6, r7, d0
 80162bc:	b093      	sub	sp, #76	; 0x4c
 80162be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80162c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80162c4:	9106      	str	r1, [sp, #24]
 80162c6:	ee10 aa10 	vmov	sl, s0
 80162ca:	4604      	mov	r4, r0
 80162cc:	9209      	str	r2, [sp, #36]	; 0x24
 80162ce:	930c      	str	r3, [sp, #48]	; 0x30
 80162d0:	46bb      	mov	fp, r7
 80162d2:	b975      	cbnz	r5, 80162f2 <_dtoa_r+0x42>
 80162d4:	2010      	movs	r0, #16
 80162d6:	f000 fffd 	bl	80172d4 <malloc>
 80162da:	4602      	mov	r2, r0
 80162dc:	6260      	str	r0, [r4, #36]	; 0x24
 80162de:	b920      	cbnz	r0, 80162ea <_dtoa_r+0x3a>
 80162e0:	4ba7      	ldr	r3, [pc, #668]	; (8016580 <_dtoa_r+0x2d0>)
 80162e2:	21ea      	movs	r1, #234	; 0xea
 80162e4:	48a7      	ldr	r0, [pc, #668]	; (8016584 <_dtoa_r+0x2d4>)
 80162e6:	f001 fe37 	bl	8017f58 <__assert_func>
 80162ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80162ee:	6005      	str	r5, [r0, #0]
 80162f0:	60c5      	str	r5, [r0, #12]
 80162f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162f4:	6819      	ldr	r1, [r3, #0]
 80162f6:	b151      	cbz	r1, 801630e <_dtoa_r+0x5e>
 80162f8:	685a      	ldr	r2, [r3, #4]
 80162fa:	604a      	str	r2, [r1, #4]
 80162fc:	2301      	movs	r3, #1
 80162fe:	4093      	lsls	r3, r2
 8016300:	608b      	str	r3, [r1, #8]
 8016302:	4620      	mov	r0, r4
 8016304:	f001 f82e 	bl	8017364 <_Bfree>
 8016308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801630a:	2200      	movs	r2, #0
 801630c:	601a      	str	r2, [r3, #0]
 801630e:	1e3b      	subs	r3, r7, #0
 8016310:	bfaa      	itet	ge
 8016312:	2300      	movge	r3, #0
 8016314:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016318:	f8c8 3000 	strge.w	r3, [r8]
 801631c:	4b9a      	ldr	r3, [pc, #616]	; (8016588 <_dtoa_r+0x2d8>)
 801631e:	bfbc      	itt	lt
 8016320:	2201      	movlt	r2, #1
 8016322:	f8c8 2000 	strlt.w	r2, [r8]
 8016326:	ea33 030b 	bics.w	r3, r3, fp
 801632a:	d11b      	bne.n	8016364 <_dtoa_r+0xb4>
 801632c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801632e:	f242 730f 	movw	r3, #9999	; 0x270f
 8016332:	6013      	str	r3, [r2, #0]
 8016334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016338:	4333      	orrs	r3, r6
 801633a:	f000 8592 	beq.w	8016e62 <_dtoa_r+0xbb2>
 801633e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016340:	b963      	cbnz	r3, 801635c <_dtoa_r+0xac>
 8016342:	4b92      	ldr	r3, [pc, #584]	; (801658c <_dtoa_r+0x2dc>)
 8016344:	e022      	b.n	801638c <_dtoa_r+0xdc>
 8016346:	4b92      	ldr	r3, [pc, #584]	; (8016590 <_dtoa_r+0x2e0>)
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	3308      	adds	r3, #8
 801634c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801634e:	6013      	str	r3, [r2, #0]
 8016350:	9801      	ldr	r0, [sp, #4]
 8016352:	b013      	add	sp, #76	; 0x4c
 8016354:	ecbd 8b04 	vpop	{d8-d9}
 8016358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801635c:	4b8b      	ldr	r3, [pc, #556]	; (801658c <_dtoa_r+0x2dc>)
 801635e:	9301      	str	r3, [sp, #4]
 8016360:	3303      	adds	r3, #3
 8016362:	e7f3      	b.n	801634c <_dtoa_r+0x9c>
 8016364:	2200      	movs	r2, #0
 8016366:	2300      	movs	r3, #0
 8016368:	4650      	mov	r0, sl
 801636a:	4659      	mov	r1, fp
 801636c:	f7ea fbd4 	bl	8000b18 <__aeabi_dcmpeq>
 8016370:	ec4b ab19 	vmov	d9, sl, fp
 8016374:	4680      	mov	r8, r0
 8016376:	b158      	cbz	r0, 8016390 <_dtoa_r+0xe0>
 8016378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801637a:	2301      	movs	r3, #1
 801637c:	6013      	str	r3, [r2, #0]
 801637e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016380:	2b00      	cmp	r3, #0
 8016382:	f000 856b 	beq.w	8016e5c <_dtoa_r+0xbac>
 8016386:	4883      	ldr	r0, [pc, #524]	; (8016594 <_dtoa_r+0x2e4>)
 8016388:	6018      	str	r0, [r3, #0]
 801638a:	1e43      	subs	r3, r0, #1
 801638c:	9301      	str	r3, [sp, #4]
 801638e:	e7df      	b.n	8016350 <_dtoa_r+0xa0>
 8016390:	ec4b ab10 	vmov	d0, sl, fp
 8016394:	aa10      	add	r2, sp, #64	; 0x40
 8016396:	a911      	add	r1, sp, #68	; 0x44
 8016398:	4620      	mov	r0, r4
 801639a:	f001 facb 	bl	8017934 <__d2b>
 801639e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80163a2:	ee08 0a10 	vmov	s16, r0
 80163a6:	2d00      	cmp	r5, #0
 80163a8:	f000 8084 	beq.w	80164b4 <_dtoa_r+0x204>
 80163ac:	ee19 3a90 	vmov	r3, s19
 80163b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80163b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80163b8:	4656      	mov	r6, sl
 80163ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80163be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80163c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80163c6:	4b74      	ldr	r3, [pc, #464]	; (8016598 <_dtoa_r+0x2e8>)
 80163c8:	2200      	movs	r2, #0
 80163ca:	4630      	mov	r0, r6
 80163cc:	4639      	mov	r1, r7
 80163ce:	f7e9 ff83 	bl	80002d8 <__aeabi_dsub>
 80163d2:	a365      	add	r3, pc, #404	; (adr r3, 8016568 <_dtoa_r+0x2b8>)
 80163d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d8:	f7ea f936 	bl	8000648 <__aeabi_dmul>
 80163dc:	a364      	add	r3, pc, #400	; (adr r3, 8016570 <_dtoa_r+0x2c0>)
 80163de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e2:	f7e9 ff7b 	bl	80002dc <__adddf3>
 80163e6:	4606      	mov	r6, r0
 80163e8:	4628      	mov	r0, r5
 80163ea:	460f      	mov	r7, r1
 80163ec:	f7ea f8c2 	bl	8000574 <__aeabi_i2d>
 80163f0:	a361      	add	r3, pc, #388	; (adr r3, 8016578 <_dtoa_r+0x2c8>)
 80163f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f6:	f7ea f927 	bl	8000648 <__aeabi_dmul>
 80163fa:	4602      	mov	r2, r0
 80163fc:	460b      	mov	r3, r1
 80163fe:	4630      	mov	r0, r6
 8016400:	4639      	mov	r1, r7
 8016402:	f7e9 ff6b 	bl	80002dc <__adddf3>
 8016406:	4606      	mov	r6, r0
 8016408:	460f      	mov	r7, r1
 801640a:	f7ea fbcd 	bl	8000ba8 <__aeabi_d2iz>
 801640e:	2200      	movs	r2, #0
 8016410:	9000      	str	r0, [sp, #0]
 8016412:	2300      	movs	r3, #0
 8016414:	4630      	mov	r0, r6
 8016416:	4639      	mov	r1, r7
 8016418:	f7ea fb88 	bl	8000b2c <__aeabi_dcmplt>
 801641c:	b150      	cbz	r0, 8016434 <_dtoa_r+0x184>
 801641e:	9800      	ldr	r0, [sp, #0]
 8016420:	f7ea f8a8 	bl	8000574 <__aeabi_i2d>
 8016424:	4632      	mov	r2, r6
 8016426:	463b      	mov	r3, r7
 8016428:	f7ea fb76 	bl	8000b18 <__aeabi_dcmpeq>
 801642c:	b910      	cbnz	r0, 8016434 <_dtoa_r+0x184>
 801642e:	9b00      	ldr	r3, [sp, #0]
 8016430:	3b01      	subs	r3, #1
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	9b00      	ldr	r3, [sp, #0]
 8016436:	2b16      	cmp	r3, #22
 8016438:	d85a      	bhi.n	80164f0 <_dtoa_r+0x240>
 801643a:	9a00      	ldr	r2, [sp, #0]
 801643c:	4b57      	ldr	r3, [pc, #348]	; (801659c <_dtoa_r+0x2ec>)
 801643e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016446:	ec51 0b19 	vmov	r0, r1, d9
 801644a:	f7ea fb6f 	bl	8000b2c <__aeabi_dcmplt>
 801644e:	2800      	cmp	r0, #0
 8016450:	d050      	beq.n	80164f4 <_dtoa_r+0x244>
 8016452:	9b00      	ldr	r3, [sp, #0]
 8016454:	3b01      	subs	r3, #1
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	2300      	movs	r3, #0
 801645a:	930b      	str	r3, [sp, #44]	; 0x2c
 801645c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801645e:	1b5d      	subs	r5, r3, r5
 8016460:	1e6b      	subs	r3, r5, #1
 8016462:	9305      	str	r3, [sp, #20]
 8016464:	bf45      	ittet	mi
 8016466:	f1c5 0301 	rsbmi	r3, r5, #1
 801646a:	9304      	strmi	r3, [sp, #16]
 801646c:	2300      	movpl	r3, #0
 801646e:	2300      	movmi	r3, #0
 8016470:	bf4c      	ite	mi
 8016472:	9305      	strmi	r3, [sp, #20]
 8016474:	9304      	strpl	r3, [sp, #16]
 8016476:	9b00      	ldr	r3, [sp, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	db3d      	blt.n	80164f8 <_dtoa_r+0x248>
 801647c:	9b05      	ldr	r3, [sp, #20]
 801647e:	9a00      	ldr	r2, [sp, #0]
 8016480:	920a      	str	r2, [sp, #40]	; 0x28
 8016482:	4413      	add	r3, r2
 8016484:	9305      	str	r3, [sp, #20]
 8016486:	2300      	movs	r3, #0
 8016488:	9307      	str	r3, [sp, #28]
 801648a:	9b06      	ldr	r3, [sp, #24]
 801648c:	2b09      	cmp	r3, #9
 801648e:	f200 8089 	bhi.w	80165a4 <_dtoa_r+0x2f4>
 8016492:	2b05      	cmp	r3, #5
 8016494:	bfc4      	itt	gt
 8016496:	3b04      	subgt	r3, #4
 8016498:	9306      	strgt	r3, [sp, #24]
 801649a:	9b06      	ldr	r3, [sp, #24]
 801649c:	f1a3 0302 	sub.w	r3, r3, #2
 80164a0:	bfcc      	ite	gt
 80164a2:	2500      	movgt	r5, #0
 80164a4:	2501      	movle	r5, #1
 80164a6:	2b03      	cmp	r3, #3
 80164a8:	f200 8087 	bhi.w	80165ba <_dtoa_r+0x30a>
 80164ac:	e8df f003 	tbb	[pc, r3]
 80164b0:	59383a2d 	.word	0x59383a2d
 80164b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80164b8:	441d      	add	r5, r3
 80164ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80164be:	2b20      	cmp	r3, #32
 80164c0:	bfc1      	itttt	gt
 80164c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80164c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80164ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80164ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80164d2:	bfda      	itte	le
 80164d4:	f1c3 0320 	rsble	r3, r3, #32
 80164d8:	fa06 f003 	lslle.w	r0, r6, r3
 80164dc:	4318      	orrgt	r0, r3
 80164de:	f7ea f839 	bl	8000554 <__aeabi_ui2d>
 80164e2:	2301      	movs	r3, #1
 80164e4:	4606      	mov	r6, r0
 80164e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80164ea:	3d01      	subs	r5, #1
 80164ec:	930e      	str	r3, [sp, #56]	; 0x38
 80164ee:	e76a      	b.n	80163c6 <_dtoa_r+0x116>
 80164f0:	2301      	movs	r3, #1
 80164f2:	e7b2      	b.n	801645a <_dtoa_r+0x1aa>
 80164f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80164f6:	e7b1      	b.n	801645c <_dtoa_r+0x1ac>
 80164f8:	9b04      	ldr	r3, [sp, #16]
 80164fa:	9a00      	ldr	r2, [sp, #0]
 80164fc:	1a9b      	subs	r3, r3, r2
 80164fe:	9304      	str	r3, [sp, #16]
 8016500:	4253      	negs	r3, r2
 8016502:	9307      	str	r3, [sp, #28]
 8016504:	2300      	movs	r3, #0
 8016506:	930a      	str	r3, [sp, #40]	; 0x28
 8016508:	e7bf      	b.n	801648a <_dtoa_r+0x1da>
 801650a:	2300      	movs	r3, #0
 801650c:	9308      	str	r3, [sp, #32]
 801650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016510:	2b00      	cmp	r3, #0
 8016512:	dc55      	bgt.n	80165c0 <_dtoa_r+0x310>
 8016514:	2301      	movs	r3, #1
 8016516:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801651a:	461a      	mov	r2, r3
 801651c:	9209      	str	r2, [sp, #36]	; 0x24
 801651e:	e00c      	b.n	801653a <_dtoa_r+0x28a>
 8016520:	2301      	movs	r3, #1
 8016522:	e7f3      	b.n	801650c <_dtoa_r+0x25c>
 8016524:	2300      	movs	r3, #0
 8016526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016528:	9308      	str	r3, [sp, #32]
 801652a:	9b00      	ldr	r3, [sp, #0]
 801652c:	4413      	add	r3, r2
 801652e:	9302      	str	r3, [sp, #8]
 8016530:	3301      	adds	r3, #1
 8016532:	2b01      	cmp	r3, #1
 8016534:	9303      	str	r3, [sp, #12]
 8016536:	bfb8      	it	lt
 8016538:	2301      	movlt	r3, #1
 801653a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801653c:	2200      	movs	r2, #0
 801653e:	6042      	str	r2, [r0, #4]
 8016540:	2204      	movs	r2, #4
 8016542:	f102 0614 	add.w	r6, r2, #20
 8016546:	429e      	cmp	r6, r3
 8016548:	6841      	ldr	r1, [r0, #4]
 801654a:	d93d      	bls.n	80165c8 <_dtoa_r+0x318>
 801654c:	4620      	mov	r0, r4
 801654e:	f000 fec9 	bl	80172e4 <_Balloc>
 8016552:	9001      	str	r0, [sp, #4]
 8016554:	2800      	cmp	r0, #0
 8016556:	d13b      	bne.n	80165d0 <_dtoa_r+0x320>
 8016558:	4b11      	ldr	r3, [pc, #68]	; (80165a0 <_dtoa_r+0x2f0>)
 801655a:	4602      	mov	r2, r0
 801655c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016560:	e6c0      	b.n	80162e4 <_dtoa_r+0x34>
 8016562:	2301      	movs	r3, #1
 8016564:	e7df      	b.n	8016526 <_dtoa_r+0x276>
 8016566:	bf00      	nop
 8016568:	636f4361 	.word	0x636f4361
 801656c:	3fd287a7 	.word	0x3fd287a7
 8016570:	8b60c8b3 	.word	0x8b60c8b3
 8016574:	3fc68a28 	.word	0x3fc68a28
 8016578:	509f79fb 	.word	0x509f79fb
 801657c:	3fd34413 	.word	0x3fd34413
 8016580:	08018a49 	.word	0x08018a49
 8016584:	08018a60 	.word	0x08018a60
 8016588:	7ff00000 	.word	0x7ff00000
 801658c:	08018a45 	.word	0x08018a45
 8016590:	08018a3c 	.word	0x08018a3c
 8016594:	08018a19 	.word	0x08018a19
 8016598:	3ff80000 	.word	0x3ff80000
 801659c:	08018bb0 	.word	0x08018bb0
 80165a0:	08018abb 	.word	0x08018abb
 80165a4:	2501      	movs	r5, #1
 80165a6:	2300      	movs	r3, #0
 80165a8:	9306      	str	r3, [sp, #24]
 80165aa:	9508      	str	r5, [sp, #32]
 80165ac:	f04f 33ff 	mov.w	r3, #4294967295
 80165b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80165b4:	2200      	movs	r2, #0
 80165b6:	2312      	movs	r3, #18
 80165b8:	e7b0      	b.n	801651c <_dtoa_r+0x26c>
 80165ba:	2301      	movs	r3, #1
 80165bc:	9308      	str	r3, [sp, #32]
 80165be:	e7f5      	b.n	80165ac <_dtoa_r+0x2fc>
 80165c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80165c6:	e7b8      	b.n	801653a <_dtoa_r+0x28a>
 80165c8:	3101      	adds	r1, #1
 80165ca:	6041      	str	r1, [r0, #4]
 80165cc:	0052      	lsls	r2, r2, #1
 80165ce:	e7b8      	b.n	8016542 <_dtoa_r+0x292>
 80165d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165d2:	9a01      	ldr	r2, [sp, #4]
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	9b03      	ldr	r3, [sp, #12]
 80165d8:	2b0e      	cmp	r3, #14
 80165da:	f200 809d 	bhi.w	8016718 <_dtoa_r+0x468>
 80165de:	2d00      	cmp	r5, #0
 80165e0:	f000 809a 	beq.w	8016718 <_dtoa_r+0x468>
 80165e4:	9b00      	ldr	r3, [sp, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	dd32      	ble.n	8016650 <_dtoa_r+0x3a0>
 80165ea:	4ab7      	ldr	r2, [pc, #732]	; (80168c8 <_dtoa_r+0x618>)
 80165ec:	f003 030f 	and.w	r3, r3, #15
 80165f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80165f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80165f8:	9b00      	ldr	r3, [sp, #0]
 80165fa:	05d8      	lsls	r0, r3, #23
 80165fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016600:	d516      	bpl.n	8016630 <_dtoa_r+0x380>
 8016602:	4bb2      	ldr	r3, [pc, #712]	; (80168cc <_dtoa_r+0x61c>)
 8016604:	ec51 0b19 	vmov	r0, r1, d9
 8016608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801660c:	f7ea f946 	bl	800089c <__aeabi_ddiv>
 8016610:	f007 070f 	and.w	r7, r7, #15
 8016614:	4682      	mov	sl, r0
 8016616:	468b      	mov	fp, r1
 8016618:	2503      	movs	r5, #3
 801661a:	4eac      	ldr	r6, [pc, #688]	; (80168cc <_dtoa_r+0x61c>)
 801661c:	b957      	cbnz	r7, 8016634 <_dtoa_r+0x384>
 801661e:	4642      	mov	r2, r8
 8016620:	464b      	mov	r3, r9
 8016622:	4650      	mov	r0, sl
 8016624:	4659      	mov	r1, fp
 8016626:	f7ea f939 	bl	800089c <__aeabi_ddiv>
 801662a:	4682      	mov	sl, r0
 801662c:	468b      	mov	fp, r1
 801662e:	e028      	b.n	8016682 <_dtoa_r+0x3d2>
 8016630:	2502      	movs	r5, #2
 8016632:	e7f2      	b.n	801661a <_dtoa_r+0x36a>
 8016634:	07f9      	lsls	r1, r7, #31
 8016636:	d508      	bpl.n	801664a <_dtoa_r+0x39a>
 8016638:	4640      	mov	r0, r8
 801663a:	4649      	mov	r1, r9
 801663c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016640:	f7ea f802 	bl	8000648 <__aeabi_dmul>
 8016644:	3501      	adds	r5, #1
 8016646:	4680      	mov	r8, r0
 8016648:	4689      	mov	r9, r1
 801664a:	107f      	asrs	r7, r7, #1
 801664c:	3608      	adds	r6, #8
 801664e:	e7e5      	b.n	801661c <_dtoa_r+0x36c>
 8016650:	f000 809b 	beq.w	801678a <_dtoa_r+0x4da>
 8016654:	9b00      	ldr	r3, [sp, #0]
 8016656:	4f9d      	ldr	r7, [pc, #628]	; (80168cc <_dtoa_r+0x61c>)
 8016658:	425e      	negs	r6, r3
 801665a:	4b9b      	ldr	r3, [pc, #620]	; (80168c8 <_dtoa_r+0x618>)
 801665c:	f006 020f 	and.w	r2, r6, #15
 8016660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016668:	ec51 0b19 	vmov	r0, r1, d9
 801666c:	f7e9 ffec 	bl	8000648 <__aeabi_dmul>
 8016670:	1136      	asrs	r6, r6, #4
 8016672:	4682      	mov	sl, r0
 8016674:	468b      	mov	fp, r1
 8016676:	2300      	movs	r3, #0
 8016678:	2502      	movs	r5, #2
 801667a:	2e00      	cmp	r6, #0
 801667c:	d17a      	bne.n	8016774 <_dtoa_r+0x4c4>
 801667e:	2b00      	cmp	r3, #0
 8016680:	d1d3      	bne.n	801662a <_dtoa_r+0x37a>
 8016682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016684:	2b00      	cmp	r3, #0
 8016686:	f000 8082 	beq.w	801678e <_dtoa_r+0x4de>
 801668a:	4b91      	ldr	r3, [pc, #580]	; (80168d0 <_dtoa_r+0x620>)
 801668c:	2200      	movs	r2, #0
 801668e:	4650      	mov	r0, sl
 8016690:	4659      	mov	r1, fp
 8016692:	f7ea fa4b 	bl	8000b2c <__aeabi_dcmplt>
 8016696:	2800      	cmp	r0, #0
 8016698:	d079      	beq.n	801678e <_dtoa_r+0x4de>
 801669a:	9b03      	ldr	r3, [sp, #12]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d076      	beq.n	801678e <_dtoa_r+0x4de>
 80166a0:	9b02      	ldr	r3, [sp, #8]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	dd36      	ble.n	8016714 <_dtoa_r+0x464>
 80166a6:	9b00      	ldr	r3, [sp, #0]
 80166a8:	4650      	mov	r0, sl
 80166aa:	4659      	mov	r1, fp
 80166ac:	1e5f      	subs	r7, r3, #1
 80166ae:	2200      	movs	r2, #0
 80166b0:	4b88      	ldr	r3, [pc, #544]	; (80168d4 <_dtoa_r+0x624>)
 80166b2:	f7e9 ffc9 	bl	8000648 <__aeabi_dmul>
 80166b6:	9e02      	ldr	r6, [sp, #8]
 80166b8:	4682      	mov	sl, r0
 80166ba:	468b      	mov	fp, r1
 80166bc:	3501      	adds	r5, #1
 80166be:	4628      	mov	r0, r5
 80166c0:	f7e9 ff58 	bl	8000574 <__aeabi_i2d>
 80166c4:	4652      	mov	r2, sl
 80166c6:	465b      	mov	r3, fp
 80166c8:	f7e9 ffbe 	bl	8000648 <__aeabi_dmul>
 80166cc:	4b82      	ldr	r3, [pc, #520]	; (80168d8 <_dtoa_r+0x628>)
 80166ce:	2200      	movs	r2, #0
 80166d0:	f7e9 fe04 	bl	80002dc <__adddf3>
 80166d4:	46d0      	mov	r8, sl
 80166d6:	46d9      	mov	r9, fp
 80166d8:	4682      	mov	sl, r0
 80166da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80166de:	2e00      	cmp	r6, #0
 80166e0:	d158      	bne.n	8016794 <_dtoa_r+0x4e4>
 80166e2:	4b7e      	ldr	r3, [pc, #504]	; (80168dc <_dtoa_r+0x62c>)
 80166e4:	2200      	movs	r2, #0
 80166e6:	4640      	mov	r0, r8
 80166e8:	4649      	mov	r1, r9
 80166ea:	f7e9 fdf5 	bl	80002d8 <__aeabi_dsub>
 80166ee:	4652      	mov	r2, sl
 80166f0:	465b      	mov	r3, fp
 80166f2:	4680      	mov	r8, r0
 80166f4:	4689      	mov	r9, r1
 80166f6:	f7ea fa37 	bl	8000b68 <__aeabi_dcmpgt>
 80166fa:	2800      	cmp	r0, #0
 80166fc:	f040 8295 	bne.w	8016c2a <_dtoa_r+0x97a>
 8016700:	4652      	mov	r2, sl
 8016702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016706:	4640      	mov	r0, r8
 8016708:	4649      	mov	r1, r9
 801670a:	f7ea fa0f 	bl	8000b2c <__aeabi_dcmplt>
 801670e:	2800      	cmp	r0, #0
 8016710:	f040 8289 	bne.w	8016c26 <_dtoa_r+0x976>
 8016714:	ec5b ab19 	vmov	sl, fp, d9
 8016718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801671a:	2b00      	cmp	r3, #0
 801671c:	f2c0 8148 	blt.w	80169b0 <_dtoa_r+0x700>
 8016720:	9a00      	ldr	r2, [sp, #0]
 8016722:	2a0e      	cmp	r2, #14
 8016724:	f300 8144 	bgt.w	80169b0 <_dtoa_r+0x700>
 8016728:	4b67      	ldr	r3, [pc, #412]	; (80168c8 <_dtoa_r+0x618>)
 801672a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801672e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016734:	2b00      	cmp	r3, #0
 8016736:	f280 80d5 	bge.w	80168e4 <_dtoa_r+0x634>
 801673a:	9b03      	ldr	r3, [sp, #12]
 801673c:	2b00      	cmp	r3, #0
 801673e:	f300 80d1 	bgt.w	80168e4 <_dtoa_r+0x634>
 8016742:	f040 826f 	bne.w	8016c24 <_dtoa_r+0x974>
 8016746:	4b65      	ldr	r3, [pc, #404]	; (80168dc <_dtoa_r+0x62c>)
 8016748:	2200      	movs	r2, #0
 801674a:	4640      	mov	r0, r8
 801674c:	4649      	mov	r1, r9
 801674e:	f7e9 ff7b 	bl	8000648 <__aeabi_dmul>
 8016752:	4652      	mov	r2, sl
 8016754:	465b      	mov	r3, fp
 8016756:	f7ea f9fd 	bl	8000b54 <__aeabi_dcmpge>
 801675a:	9e03      	ldr	r6, [sp, #12]
 801675c:	4637      	mov	r7, r6
 801675e:	2800      	cmp	r0, #0
 8016760:	f040 8245 	bne.w	8016bee <_dtoa_r+0x93e>
 8016764:	9d01      	ldr	r5, [sp, #4]
 8016766:	2331      	movs	r3, #49	; 0x31
 8016768:	f805 3b01 	strb.w	r3, [r5], #1
 801676c:	9b00      	ldr	r3, [sp, #0]
 801676e:	3301      	adds	r3, #1
 8016770:	9300      	str	r3, [sp, #0]
 8016772:	e240      	b.n	8016bf6 <_dtoa_r+0x946>
 8016774:	07f2      	lsls	r2, r6, #31
 8016776:	d505      	bpl.n	8016784 <_dtoa_r+0x4d4>
 8016778:	e9d7 2300 	ldrd	r2, r3, [r7]
 801677c:	f7e9 ff64 	bl	8000648 <__aeabi_dmul>
 8016780:	3501      	adds	r5, #1
 8016782:	2301      	movs	r3, #1
 8016784:	1076      	asrs	r6, r6, #1
 8016786:	3708      	adds	r7, #8
 8016788:	e777      	b.n	801667a <_dtoa_r+0x3ca>
 801678a:	2502      	movs	r5, #2
 801678c:	e779      	b.n	8016682 <_dtoa_r+0x3d2>
 801678e:	9f00      	ldr	r7, [sp, #0]
 8016790:	9e03      	ldr	r6, [sp, #12]
 8016792:	e794      	b.n	80166be <_dtoa_r+0x40e>
 8016794:	9901      	ldr	r1, [sp, #4]
 8016796:	4b4c      	ldr	r3, [pc, #304]	; (80168c8 <_dtoa_r+0x618>)
 8016798:	4431      	add	r1, r6
 801679a:	910d      	str	r1, [sp, #52]	; 0x34
 801679c:	9908      	ldr	r1, [sp, #32]
 801679e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80167a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80167a6:	2900      	cmp	r1, #0
 80167a8:	d043      	beq.n	8016832 <_dtoa_r+0x582>
 80167aa:	494d      	ldr	r1, [pc, #308]	; (80168e0 <_dtoa_r+0x630>)
 80167ac:	2000      	movs	r0, #0
 80167ae:	f7ea f875 	bl	800089c <__aeabi_ddiv>
 80167b2:	4652      	mov	r2, sl
 80167b4:	465b      	mov	r3, fp
 80167b6:	f7e9 fd8f 	bl	80002d8 <__aeabi_dsub>
 80167ba:	9d01      	ldr	r5, [sp, #4]
 80167bc:	4682      	mov	sl, r0
 80167be:	468b      	mov	fp, r1
 80167c0:	4649      	mov	r1, r9
 80167c2:	4640      	mov	r0, r8
 80167c4:	f7ea f9f0 	bl	8000ba8 <__aeabi_d2iz>
 80167c8:	4606      	mov	r6, r0
 80167ca:	f7e9 fed3 	bl	8000574 <__aeabi_i2d>
 80167ce:	4602      	mov	r2, r0
 80167d0:	460b      	mov	r3, r1
 80167d2:	4640      	mov	r0, r8
 80167d4:	4649      	mov	r1, r9
 80167d6:	f7e9 fd7f 	bl	80002d8 <__aeabi_dsub>
 80167da:	3630      	adds	r6, #48	; 0x30
 80167dc:	f805 6b01 	strb.w	r6, [r5], #1
 80167e0:	4652      	mov	r2, sl
 80167e2:	465b      	mov	r3, fp
 80167e4:	4680      	mov	r8, r0
 80167e6:	4689      	mov	r9, r1
 80167e8:	f7ea f9a0 	bl	8000b2c <__aeabi_dcmplt>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d163      	bne.n	80168b8 <_dtoa_r+0x608>
 80167f0:	4642      	mov	r2, r8
 80167f2:	464b      	mov	r3, r9
 80167f4:	4936      	ldr	r1, [pc, #216]	; (80168d0 <_dtoa_r+0x620>)
 80167f6:	2000      	movs	r0, #0
 80167f8:	f7e9 fd6e 	bl	80002d8 <__aeabi_dsub>
 80167fc:	4652      	mov	r2, sl
 80167fe:	465b      	mov	r3, fp
 8016800:	f7ea f994 	bl	8000b2c <__aeabi_dcmplt>
 8016804:	2800      	cmp	r0, #0
 8016806:	f040 80b5 	bne.w	8016974 <_dtoa_r+0x6c4>
 801680a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801680c:	429d      	cmp	r5, r3
 801680e:	d081      	beq.n	8016714 <_dtoa_r+0x464>
 8016810:	4b30      	ldr	r3, [pc, #192]	; (80168d4 <_dtoa_r+0x624>)
 8016812:	2200      	movs	r2, #0
 8016814:	4650      	mov	r0, sl
 8016816:	4659      	mov	r1, fp
 8016818:	f7e9 ff16 	bl	8000648 <__aeabi_dmul>
 801681c:	4b2d      	ldr	r3, [pc, #180]	; (80168d4 <_dtoa_r+0x624>)
 801681e:	4682      	mov	sl, r0
 8016820:	468b      	mov	fp, r1
 8016822:	4640      	mov	r0, r8
 8016824:	4649      	mov	r1, r9
 8016826:	2200      	movs	r2, #0
 8016828:	f7e9 ff0e 	bl	8000648 <__aeabi_dmul>
 801682c:	4680      	mov	r8, r0
 801682e:	4689      	mov	r9, r1
 8016830:	e7c6      	b.n	80167c0 <_dtoa_r+0x510>
 8016832:	4650      	mov	r0, sl
 8016834:	4659      	mov	r1, fp
 8016836:	f7e9 ff07 	bl	8000648 <__aeabi_dmul>
 801683a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801683c:	9d01      	ldr	r5, [sp, #4]
 801683e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016840:	4682      	mov	sl, r0
 8016842:	468b      	mov	fp, r1
 8016844:	4649      	mov	r1, r9
 8016846:	4640      	mov	r0, r8
 8016848:	f7ea f9ae 	bl	8000ba8 <__aeabi_d2iz>
 801684c:	4606      	mov	r6, r0
 801684e:	f7e9 fe91 	bl	8000574 <__aeabi_i2d>
 8016852:	3630      	adds	r6, #48	; 0x30
 8016854:	4602      	mov	r2, r0
 8016856:	460b      	mov	r3, r1
 8016858:	4640      	mov	r0, r8
 801685a:	4649      	mov	r1, r9
 801685c:	f7e9 fd3c 	bl	80002d8 <__aeabi_dsub>
 8016860:	f805 6b01 	strb.w	r6, [r5], #1
 8016864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016866:	429d      	cmp	r5, r3
 8016868:	4680      	mov	r8, r0
 801686a:	4689      	mov	r9, r1
 801686c:	f04f 0200 	mov.w	r2, #0
 8016870:	d124      	bne.n	80168bc <_dtoa_r+0x60c>
 8016872:	4b1b      	ldr	r3, [pc, #108]	; (80168e0 <_dtoa_r+0x630>)
 8016874:	4650      	mov	r0, sl
 8016876:	4659      	mov	r1, fp
 8016878:	f7e9 fd30 	bl	80002dc <__adddf3>
 801687c:	4602      	mov	r2, r0
 801687e:	460b      	mov	r3, r1
 8016880:	4640      	mov	r0, r8
 8016882:	4649      	mov	r1, r9
 8016884:	f7ea f970 	bl	8000b68 <__aeabi_dcmpgt>
 8016888:	2800      	cmp	r0, #0
 801688a:	d173      	bne.n	8016974 <_dtoa_r+0x6c4>
 801688c:	4652      	mov	r2, sl
 801688e:	465b      	mov	r3, fp
 8016890:	4913      	ldr	r1, [pc, #76]	; (80168e0 <_dtoa_r+0x630>)
 8016892:	2000      	movs	r0, #0
 8016894:	f7e9 fd20 	bl	80002d8 <__aeabi_dsub>
 8016898:	4602      	mov	r2, r0
 801689a:	460b      	mov	r3, r1
 801689c:	4640      	mov	r0, r8
 801689e:	4649      	mov	r1, r9
 80168a0:	f7ea f944 	bl	8000b2c <__aeabi_dcmplt>
 80168a4:	2800      	cmp	r0, #0
 80168a6:	f43f af35 	beq.w	8016714 <_dtoa_r+0x464>
 80168aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80168ac:	1e6b      	subs	r3, r5, #1
 80168ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80168b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80168b4:	2b30      	cmp	r3, #48	; 0x30
 80168b6:	d0f8      	beq.n	80168aa <_dtoa_r+0x5fa>
 80168b8:	9700      	str	r7, [sp, #0]
 80168ba:	e049      	b.n	8016950 <_dtoa_r+0x6a0>
 80168bc:	4b05      	ldr	r3, [pc, #20]	; (80168d4 <_dtoa_r+0x624>)
 80168be:	f7e9 fec3 	bl	8000648 <__aeabi_dmul>
 80168c2:	4680      	mov	r8, r0
 80168c4:	4689      	mov	r9, r1
 80168c6:	e7bd      	b.n	8016844 <_dtoa_r+0x594>
 80168c8:	08018bb0 	.word	0x08018bb0
 80168cc:	08018b88 	.word	0x08018b88
 80168d0:	3ff00000 	.word	0x3ff00000
 80168d4:	40240000 	.word	0x40240000
 80168d8:	401c0000 	.word	0x401c0000
 80168dc:	40140000 	.word	0x40140000
 80168e0:	3fe00000 	.word	0x3fe00000
 80168e4:	9d01      	ldr	r5, [sp, #4]
 80168e6:	4656      	mov	r6, sl
 80168e8:	465f      	mov	r7, fp
 80168ea:	4642      	mov	r2, r8
 80168ec:	464b      	mov	r3, r9
 80168ee:	4630      	mov	r0, r6
 80168f0:	4639      	mov	r1, r7
 80168f2:	f7e9 ffd3 	bl	800089c <__aeabi_ddiv>
 80168f6:	f7ea f957 	bl	8000ba8 <__aeabi_d2iz>
 80168fa:	4682      	mov	sl, r0
 80168fc:	f7e9 fe3a 	bl	8000574 <__aeabi_i2d>
 8016900:	4642      	mov	r2, r8
 8016902:	464b      	mov	r3, r9
 8016904:	f7e9 fea0 	bl	8000648 <__aeabi_dmul>
 8016908:	4602      	mov	r2, r0
 801690a:	460b      	mov	r3, r1
 801690c:	4630      	mov	r0, r6
 801690e:	4639      	mov	r1, r7
 8016910:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016914:	f7e9 fce0 	bl	80002d8 <__aeabi_dsub>
 8016918:	f805 6b01 	strb.w	r6, [r5], #1
 801691c:	9e01      	ldr	r6, [sp, #4]
 801691e:	9f03      	ldr	r7, [sp, #12]
 8016920:	1bae      	subs	r6, r5, r6
 8016922:	42b7      	cmp	r7, r6
 8016924:	4602      	mov	r2, r0
 8016926:	460b      	mov	r3, r1
 8016928:	d135      	bne.n	8016996 <_dtoa_r+0x6e6>
 801692a:	f7e9 fcd7 	bl	80002dc <__adddf3>
 801692e:	4642      	mov	r2, r8
 8016930:	464b      	mov	r3, r9
 8016932:	4606      	mov	r6, r0
 8016934:	460f      	mov	r7, r1
 8016936:	f7ea f917 	bl	8000b68 <__aeabi_dcmpgt>
 801693a:	b9d0      	cbnz	r0, 8016972 <_dtoa_r+0x6c2>
 801693c:	4642      	mov	r2, r8
 801693e:	464b      	mov	r3, r9
 8016940:	4630      	mov	r0, r6
 8016942:	4639      	mov	r1, r7
 8016944:	f7ea f8e8 	bl	8000b18 <__aeabi_dcmpeq>
 8016948:	b110      	cbz	r0, 8016950 <_dtoa_r+0x6a0>
 801694a:	f01a 0f01 	tst.w	sl, #1
 801694e:	d110      	bne.n	8016972 <_dtoa_r+0x6c2>
 8016950:	4620      	mov	r0, r4
 8016952:	ee18 1a10 	vmov	r1, s16
 8016956:	f000 fd05 	bl	8017364 <_Bfree>
 801695a:	2300      	movs	r3, #0
 801695c:	9800      	ldr	r0, [sp, #0]
 801695e:	702b      	strb	r3, [r5, #0]
 8016960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016962:	3001      	adds	r0, #1
 8016964:	6018      	str	r0, [r3, #0]
 8016966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016968:	2b00      	cmp	r3, #0
 801696a:	f43f acf1 	beq.w	8016350 <_dtoa_r+0xa0>
 801696e:	601d      	str	r5, [r3, #0]
 8016970:	e4ee      	b.n	8016350 <_dtoa_r+0xa0>
 8016972:	9f00      	ldr	r7, [sp, #0]
 8016974:	462b      	mov	r3, r5
 8016976:	461d      	mov	r5, r3
 8016978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801697c:	2a39      	cmp	r2, #57	; 0x39
 801697e:	d106      	bne.n	801698e <_dtoa_r+0x6de>
 8016980:	9a01      	ldr	r2, [sp, #4]
 8016982:	429a      	cmp	r2, r3
 8016984:	d1f7      	bne.n	8016976 <_dtoa_r+0x6c6>
 8016986:	9901      	ldr	r1, [sp, #4]
 8016988:	2230      	movs	r2, #48	; 0x30
 801698a:	3701      	adds	r7, #1
 801698c:	700a      	strb	r2, [r1, #0]
 801698e:	781a      	ldrb	r2, [r3, #0]
 8016990:	3201      	adds	r2, #1
 8016992:	701a      	strb	r2, [r3, #0]
 8016994:	e790      	b.n	80168b8 <_dtoa_r+0x608>
 8016996:	4ba6      	ldr	r3, [pc, #664]	; (8016c30 <_dtoa_r+0x980>)
 8016998:	2200      	movs	r2, #0
 801699a:	f7e9 fe55 	bl	8000648 <__aeabi_dmul>
 801699e:	2200      	movs	r2, #0
 80169a0:	2300      	movs	r3, #0
 80169a2:	4606      	mov	r6, r0
 80169a4:	460f      	mov	r7, r1
 80169a6:	f7ea f8b7 	bl	8000b18 <__aeabi_dcmpeq>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d09d      	beq.n	80168ea <_dtoa_r+0x63a>
 80169ae:	e7cf      	b.n	8016950 <_dtoa_r+0x6a0>
 80169b0:	9a08      	ldr	r2, [sp, #32]
 80169b2:	2a00      	cmp	r2, #0
 80169b4:	f000 80d7 	beq.w	8016b66 <_dtoa_r+0x8b6>
 80169b8:	9a06      	ldr	r2, [sp, #24]
 80169ba:	2a01      	cmp	r2, #1
 80169bc:	f300 80ba 	bgt.w	8016b34 <_dtoa_r+0x884>
 80169c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169c2:	2a00      	cmp	r2, #0
 80169c4:	f000 80b2 	beq.w	8016b2c <_dtoa_r+0x87c>
 80169c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80169cc:	9e07      	ldr	r6, [sp, #28]
 80169ce:	9d04      	ldr	r5, [sp, #16]
 80169d0:	9a04      	ldr	r2, [sp, #16]
 80169d2:	441a      	add	r2, r3
 80169d4:	9204      	str	r2, [sp, #16]
 80169d6:	9a05      	ldr	r2, [sp, #20]
 80169d8:	2101      	movs	r1, #1
 80169da:	441a      	add	r2, r3
 80169dc:	4620      	mov	r0, r4
 80169de:	9205      	str	r2, [sp, #20]
 80169e0:	f000 fd78 	bl	80174d4 <__i2b>
 80169e4:	4607      	mov	r7, r0
 80169e6:	2d00      	cmp	r5, #0
 80169e8:	dd0c      	ble.n	8016a04 <_dtoa_r+0x754>
 80169ea:	9b05      	ldr	r3, [sp, #20]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	dd09      	ble.n	8016a04 <_dtoa_r+0x754>
 80169f0:	42ab      	cmp	r3, r5
 80169f2:	9a04      	ldr	r2, [sp, #16]
 80169f4:	bfa8      	it	ge
 80169f6:	462b      	movge	r3, r5
 80169f8:	1ad2      	subs	r2, r2, r3
 80169fa:	9204      	str	r2, [sp, #16]
 80169fc:	9a05      	ldr	r2, [sp, #20]
 80169fe:	1aed      	subs	r5, r5, r3
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	9305      	str	r3, [sp, #20]
 8016a04:	9b07      	ldr	r3, [sp, #28]
 8016a06:	b31b      	cbz	r3, 8016a50 <_dtoa_r+0x7a0>
 8016a08:	9b08      	ldr	r3, [sp, #32]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f000 80af 	beq.w	8016b6e <_dtoa_r+0x8be>
 8016a10:	2e00      	cmp	r6, #0
 8016a12:	dd13      	ble.n	8016a3c <_dtoa_r+0x78c>
 8016a14:	4639      	mov	r1, r7
 8016a16:	4632      	mov	r2, r6
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f000 fe1b 	bl	8017654 <__pow5mult>
 8016a1e:	ee18 2a10 	vmov	r2, s16
 8016a22:	4601      	mov	r1, r0
 8016a24:	4607      	mov	r7, r0
 8016a26:	4620      	mov	r0, r4
 8016a28:	f000 fd6a 	bl	8017500 <__multiply>
 8016a2c:	ee18 1a10 	vmov	r1, s16
 8016a30:	4680      	mov	r8, r0
 8016a32:	4620      	mov	r0, r4
 8016a34:	f000 fc96 	bl	8017364 <_Bfree>
 8016a38:	ee08 8a10 	vmov	s16, r8
 8016a3c:	9b07      	ldr	r3, [sp, #28]
 8016a3e:	1b9a      	subs	r2, r3, r6
 8016a40:	d006      	beq.n	8016a50 <_dtoa_r+0x7a0>
 8016a42:	ee18 1a10 	vmov	r1, s16
 8016a46:	4620      	mov	r0, r4
 8016a48:	f000 fe04 	bl	8017654 <__pow5mult>
 8016a4c:	ee08 0a10 	vmov	s16, r0
 8016a50:	2101      	movs	r1, #1
 8016a52:	4620      	mov	r0, r4
 8016a54:	f000 fd3e 	bl	80174d4 <__i2b>
 8016a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	4606      	mov	r6, r0
 8016a5e:	f340 8088 	ble.w	8016b72 <_dtoa_r+0x8c2>
 8016a62:	461a      	mov	r2, r3
 8016a64:	4601      	mov	r1, r0
 8016a66:	4620      	mov	r0, r4
 8016a68:	f000 fdf4 	bl	8017654 <__pow5mult>
 8016a6c:	9b06      	ldr	r3, [sp, #24]
 8016a6e:	2b01      	cmp	r3, #1
 8016a70:	4606      	mov	r6, r0
 8016a72:	f340 8081 	ble.w	8016b78 <_dtoa_r+0x8c8>
 8016a76:	f04f 0800 	mov.w	r8, #0
 8016a7a:	6933      	ldr	r3, [r6, #16]
 8016a7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016a80:	6918      	ldr	r0, [r3, #16]
 8016a82:	f000 fcd7 	bl	8017434 <__hi0bits>
 8016a86:	f1c0 0020 	rsb	r0, r0, #32
 8016a8a:	9b05      	ldr	r3, [sp, #20]
 8016a8c:	4418      	add	r0, r3
 8016a8e:	f010 001f 	ands.w	r0, r0, #31
 8016a92:	f000 8092 	beq.w	8016bba <_dtoa_r+0x90a>
 8016a96:	f1c0 0320 	rsb	r3, r0, #32
 8016a9a:	2b04      	cmp	r3, #4
 8016a9c:	f340 808a 	ble.w	8016bb4 <_dtoa_r+0x904>
 8016aa0:	f1c0 001c 	rsb	r0, r0, #28
 8016aa4:	9b04      	ldr	r3, [sp, #16]
 8016aa6:	4403      	add	r3, r0
 8016aa8:	9304      	str	r3, [sp, #16]
 8016aaa:	9b05      	ldr	r3, [sp, #20]
 8016aac:	4403      	add	r3, r0
 8016aae:	4405      	add	r5, r0
 8016ab0:	9305      	str	r3, [sp, #20]
 8016ab2:	9b04      	ldr	r3, [sp, #16]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	dd07      	ble.n	8016ac8 <_dtoa_r+0x818>
 8016ab8:	ee18 1a10 	vmov	r1, s16
 8016abc:	461a      	mov	r2, r3
 8016abe:	4620      	mov	r0, r4
 8016ac0:	f000 fe22 	bl	8017708 <__lshift>
 8016ac4:	ee08 0a10 	vmov	s16, r0
 8016ac8:	9b05      	ldr	r3, [sp, #20]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	dd05      	ble.n	8016ada <_dtoa_r+0x82a>
 8016ace:	4631      	mov	r1, r6
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f000 fe18 	bl	8017708 <__lshift>
 8016ad8:	4606      	mov	r6, r0
 8016ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d06e      	beq.n	8016bbe <_dtoa_r+0x90e>
 8016ae0:	ee18 0a10 	vmov	r0, s16
 8016ae4:	4631      	mov	r1, r6
 8016ae6:	f000 fe7f 	bl	80177e8 <__mcmp>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	da67      	bge.n	8016bbe <_dtoa_r+0x90e>
 8016aee:	9b00      	ldr	r3, [sp, #0]
 8016af0:	3b01      	subs	r3, #1
 8016af2:	ee18 1a10 	vmov	r1, s16
 8016af6:	9300      	str	r3, [sp, #0]
 8016af8:	220a      	movs	r2, #10
 8016afa:	2300      	movs	r3, #0
 8016afc:	4620      	mov	r0, r4
 8016afe:	f000 fc53 	bl	80173a8 <__multadd>
 8016b02:	9b08      	ldr	r3, [sp, #32]
 8016b04:	ee08 0a10 	vmov	s16, r0
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	f000 81b1 	beq.w	8016e70 <_dtoa_r+0xbc0>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	4639      	mov	r1, r7
 8016b12:	220a      	movs	r2, #10
 8016b14:	4620      	mov	r0, r4
 8016b16:	f000 fc47 	bl	80173a8 <__multadd>
 8016b1a:	9b02      	ldr	r3, [sp, #8]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	4607      	mov	r7, r0
 8016b20:	f300 808e 	bgt.w	8016c40 <_dtoa_r+0x990>
 8016b24:	9b06      	ldr	r3, [sp, #24]
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	dc51      	bgt.n	8016bce <_dtoa_r+0x91e>
 8016b2a:	e089      	b.n	8016c40 <_dtoa_r+0x990>
 8016b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016b32:	e74b      	b.n	80169cc <_dtoa_r+0x71c>
 8016b34:	9b03      	ldr	r3, [sp, #12]
 8016b36:	1e5e      	subs	r6, r3, #1
 8016b38:	9b07      	ldr	r3, [sp, #28]
 8016b3a:	42b3      	cmp	r3, r6
 8016b3c:	bfbf      	itttt	lt
 8016b3e:	9b07      	ldrlt	r3, [sp, #28]
 8016b40:	9607      	strlt	r6, [sp, #28]
 8016b42:	1af2      	sublt	r2, r6, r3
 8016b44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016b46:	bfb6      	itet	lt
 8016b48:	189b      	addlt	r3, r3, r2
 8016b4a:	1b9e      	subge	r6, r3, r6
 8016b4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	bfb8      	it	lt
 8016b52:	2600      	movlt	r6, #0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	bfb7      	itett	lt
 8016b58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016b5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016b60:	1a9d      	sublt	r5, r3, r2
 8016b62:	2300      	movlt	r3, #0
 8016b64:	e734      	b.n	80169d0 <_dtoa_r+0x720>
 8016b66:	9e07      	ldr	r6, [sp, #28]
 8016b68:	9d04      	ldr	r5, [sp, #16]
 8016b6a:	9f08      	ldr	r7, [sp, #32]
 8016b6c:	e73b      	b.n	80169e6 <_dtoa_r+0x736>
 8016b6e:	9a07      	ldr	r2, [sp, #28]
 8016b70:	e767      	b.n	8016a42 <_dtoa_r+0x792>
 8016b72:	9b06      	ldr	r3, [sp, #24]
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	dc18      	bgt.n	8016baa <_dtoa_r+0x8fa>
 8016b78:	f1ba 0f00 	cmp.w	sl, #0
 8016b7c:	d115      	bne.n	8016baa <_dtoa_r+0x8fa>
 8016b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b82:	b993      	cbnz	r3, 8016baa <_dtoa_r+0x8fa>
 8016b84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016b88:	0d1b      	lsrs	r3, r3, #20
 8016b8a:	051b      	lsls	r3, r3, #20
 8016b8c:	b183      	cbz	r3, 8016bb0 <_dtoa_r+0x900>
 8016b8e:	9b04      	ldr	r3, [sp, #16]
 8016b90:	3301      	adds	r3, #1
 8016b92:	9304      	str	r3, [sp, #16]
 8016b94:	9b05      	ldr	r3, [sp, #20]
 8016b96:	3301      	adds	r3, #1
 8016b98:	9305      	str	r3, [sp, #20]
 8016b9a:	f04f 0801 	mov.w	r8, #1
 8016b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	f47f af6a 	bne.w	8016a7a <_dtoa_r+0x7ca>
 8016ba6:	2001      	movs	r0, #1
 8016ba8:	e76f      	b.n	8016a8a <_dtoa_r+0x7da>
 8016baa:	f04f 0800 	mov.w	r8, #0
 8016bae:	e7f6      	b.n	8016b9e <_dtoa_r+0x8ee>
 8016bb0:	4698      	mov	r8, r3
 8016bb2:	e7f4      	b.n	8016b9e <_dtoa_r+0x8ee>
 8016bb4:	f43f af7d 	beq.w	8016ab2 <_dtoa_r+0x802>
 8016bb8:	4618      	mov	r0, r3
 8016bba:	301c      	adds	r0, #28
 8016bbc:	e772      	b.n	8016aa4 <_dtoa_r+0x7f4>
 8016bbe:	9b03      	ldr	r3, [sp, #12]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	dc37      	bgt.n	8016c34 <_dtoa_r+0x984>
 8016bc4:	9b06      	ldr	r3, [sp, #24]
 8016bc6:	2b02      	cmp	r3, #2
 8016bc8:	dd34      	ble.n	8016c34 <_dtoa_r+0x984>
 8016bca:	9b03      	ldr	r3, [sp, #12]
 8016bcc:	9302      	str	r3, [sp, #8]
 8016bce:	9b02      	ldr	r3, [sp, #8]
 8016bd0:	b96b      	cbnz	r3, 8016bee <_dtoa_r+0x93e>
 8016bd2:	4631      	mov	r1, r6
 8016bd4:	2205      	movs	r2, #5
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f000 fbe6 	bl	80173a8 <__multadd>
 8016bdc:	4601      	mov	r1, r0
 8016bde:	4606      	mov	r6, r0
 8016be0:	ee18 0a10 	vmov	r0, s16
 8016be4:	f000 fe00 	bl	80177e8 <__mcmp>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	f73f adbb 	bgt.w	8016764 <_dtoa_r+0x4b4>
 8016bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bf0:	9d01      	ldr	r5, [sp, #4]
 8016bf2:	43db      	mvns	r3, r3
 8016bf4:	9300      	str	r3, [sp, #0]
 8016bf6:	f04f 0800 	mov.w	r8, #0
 8016bfa:	4631      	mov	r1, r6
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 fbb1 	bl	8017364 <_Bfree>
 8016c02:	2f00      	cmp	r7, #0
 8016c04:	f43f aea4 	beq.w	8016950 <_dtoa_r+0x6a0>
 8016c08:	f1b8 0f00 	cmp.w	r8, #0
 8016c0c:	d005      	beq.n	8016c1a <_dtoa_r+0x96a>
 8016c0e:	45b8      	cmp	r8, r7
 8016c10:	d003      	beq.n	8016c1a <_dtoa_r+0x96a>
 8016c12:	4641      	mov	r1, r8
 8016c14:	4620      	mov	r0, r4
 8016c16:	f000 fba5 	bl	8017364 <_Bfree>
 8016c1a:	4639      	mov	r1, r7
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	f000 fba1 	bl	8017364 <_Bfree>
 8016c22:	e695      	b.n	8016950 <_dtoa_r+0x6a0>
 8016c24:	2600      	movs	r6, #0
 8016c26:	4637      	mov	r7, r6
 8016c28:	e7e1      	b.n	8016bee <_dtoa_r+0x93e>
 8016c2a:	9700      	str	r7, [sp, #0]
 8016c2c:	4637      	mov	r7, r6
 8016c2e:	e599      	b.n	8016764 <_dtoa_r+0x4b4>
 8016c30:	40240000 	.word	0x40240000
 8016c34:	9b08      	ldr	r3, [sp, #32]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	f000 80ca 	beq.w	8016dd0 <_dtoa_r+0xb20>
 8016c3c:	9b03      	ldr	r3, [sp, #12]
 8016c3e:	9302      	str	r3, [sp, #8]
 8016c40:	2d00      	cmp	r5, #0
 8016c42:	dd05      	ble.n	8016c50 <_dtoa_r+0x9a0>
 8016c44:	4639      	mov	r1, r7
 8016c46:	462a      	mov	r2, r5
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 fd5d 	bl	8017708 <__lshift>
 8016c4e:	4607      	mov	r7, r0
 8016c50:	f1b8 0f00 	cmp.w	r8, #0
 8016c54:	d05b      	beq.n	8016d0e <_dtoa_r+0xa5e>
 8016c56:	6879      	ldr	r1, [r7, #4]
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f000 fb43 	bl	80172e4 <_Balloc>
 8016c5e:	4605      	mov	r5, r0
 8016c60:	b928      	cbnz	r0, 8016c6e <_dtoa_r+0x9be>
 8016c62:	4b87      	ldr	r3, [pc, #540]	; (8016e80 <_dtoa_r+0xbd0>)
 8016c64:	4602      	mov	r2, r0
 8016c66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016c6a:	f7ff bb3b 	b.w	80162e4 <_dtoa_r+0x34>
 8016c6e:	693a      	ldr	r2, [r7, #16]
 8016c70:	3202      	adds	r2, #2
 8016c72:	0092      	lsls	r2, r2, #2
 8016c74:	f107 010c 	add.w	r1, r7, #12
 8016c78:	300c      	adds	r0, #12
 8016c7a:	f7fe fcbf 	bl	80155fc <memcpy>
 8016c7e:	2201      	movs	r2, #1
 8016c80:	4629      	mov	r1, r5
 8016c82:	4620      	mov	r0, r4
 8016c84:	f000 fd40 	bl	8017708 <__lshift>
 8016c88:	9b01      	ldr	r3, [sp, #4]
 8016c8a:	f103 0901 	add.w	r9, r3, #1
 8016c8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016c92:	4413      	add	r3, r2
 8016c94:	9305      	str	r3, [sp, #20]
 8016c96:	f00a 0301 	and.w	r3, sl, #1
 8016c9a:	46b8      	mov	r8, r7
 8016c9c:	9304      	str	r3, [sp, #16]
 8016c9e:	4607      	mov	r7, r0
 8016ca0:	4631      	mov	r1, r6
 8016ca2:	ee18 0a10 	vmov	r0, s16
 8016ca6:	f7ff fa77 	bl	8016198 <quorem>
 8016caa:	4641      	mov	r1, r8
 8016cac:	9002      	str	r0, [sp, #8]
 8016cae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016cb2:	ee18 0a10 	vmov	r0, s16
 8016cb6:	f000 fd97 	bl	80177e8 <__mcmp>
 8016cba:	463a      	mov	r2, r7
 8016cbc:	9003      	str	r0, [sp, #12]
 8016cbe:	4631      	mov	r1, r6
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	f000 fdad 	bl	8017820 <__mdiff>
 8016cc6:	68c2      	ldr	r2, [r0, #12]
 8016cc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8016ccc:	4605      	mov	r5, r0
 8016cce:	bb02      	cbnz	r2, 8016d12 <_dtoa_r+0xa62>
 8016cd0:	4601      	mov	r1, r0
 8016cd2:	ee18 0a10 	vmov	r0, s16
 8016cd6:	f000 fd87 	bl	80177e8 <__mcmp>
 8016cda:	4602      	mov	r2, r0
 8016cdc:	4629      	mov	r1, r5
 8016cde:	4620      	mov	r0, r4
 8016ce0:	9207      	str	r2, [sp, #28]
 8016ce2:	f000 fb3f 	bl	8017364 <_Bfree>
 8016ce6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016cea:	ea43 0102 	orr.w	r1, r3, r2
 8016cee:	9b04      	ldr	r3, [sp, #16]
 8016cf0:	430b      	orrs	r3, r1
 8016cf2:	464d      	mov	r5, r9
 8016cf4:	d10f      	bne.n	8016d16 <_dtoa_r+0xa66>
 8016cf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016cfa:	d02a      	beq.n	8016d52 <_dtoa_r+0xaa2>
 8016cfc:	9b03      	ldr	r3, [sp, #12]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	dd02      	ble.n	8016d08 <_dtoa_r+0xa58>
 8016d02:	9b02      	ldr	r3, [sp, #8]
 8016d04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016d08:	f88b a000 	strb.w	sl, [fp]
 8016d0c:	e775      	b.n	8016bfa <_dtoa_r+0x94a>
 8016d0e:	4638      	mov	r0, r7
 8016d10:	e7ba      	b.n	8016c88 <_dtoa_r+0x9d8>
 8016d12:	2201      	movs	r2, #1
 8016d14:	e7e2      	b.n	8016cdc <_dtoa_r+0xa2c>
 8016d16:	9b03      	ldr	r3, [sp, #12]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	db04      	blt.n	8016d26 <_dtoa_r+0xa76>
 8016d1c:	9906      	ldr	r1, [sp, #24]
 8016d1e:	430b      	orrs	r3, r1
 8016d20:	9904      	ldr	r1, [sp, #16]
 8016d22:	430b      	orrs	r3, r1
 8016d24:	d122      	bne.n	8016d6c <_dtoa_r+0xabc>
 8016d26:	2a00      	cmp	r2, #0
 8016d28:	ddee      	ble.n	8016d08 <_dtoa_r+0xa58>
 8016d2a:	ee18 1a10 	vmov	r1, s16
 8016d2e:	2201      	movs	r2, #1
 8016d30:	4620      	mov	r0, r4
 8016d32:	f000 fce9 	bl	8017708 <__lshift>
 8016d36:	4631      	mov	r1, r6
 8016d38:	ee08 0a10 	vmov	s16, r0
 8016d3c:	f000 fd54 	bl	80177e8 <__mcmp>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	dc03      	bgt.n	8016d4c <_dtoa_r+0xa9c>
 8016d44:	d1e0      	bne.n	8016d08 <_dtoa_r+0xa58>
 8016d46:	f01a 0f01 	tst.w	sl, #1
 8016d4a:	d0dd      	beq.n	8016d08 <_dtoa_r+0xa58>
 8016d4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016d50:	d1d7      	bne.n	8016d02 <_dtoa_r+0xa52>
 8016d52:	2339      	movs	r3, #57	; 0x39
 8016d54:	f88b 3000 	strb.w	r3, [fp]
 8016d58:	462b      	mov	r3, r5
 8016d5a:	461d      	mov	r5, r3
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016d62:	2a39      	cmp	r2, #57	; 0x39
 8016d64:	d071      	beq.n	8016e4a <_dtoa_r+0xb9a>
 8016d66:	3201      	adds	r2, #1
 8016d68:	701a      	strb	r2, [r3, #0]
 8016d6a:	e746      	b.n	8016bfa <_dtoa_r+0x94a>
 8016d6c:	2a00      	cmp	r2, #0
 8016d6e:	dd07      	ble.n	8016d80 <_dtoa_r+0xad0>
 8016d70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016d74:	d0ed      	beq.n	8016d52 <_dtoa_r+0xaa2>
 8016d76:	f10a 0301 	add.w	r3, sl, #1
 8016d7a:	f88b 3000 	strb.w	r3, [fp]
 8016d7e:	e73c      	b.n	8016bfa <_dtoa_r+0x94a>
 8016d80:	9b05      	ldr	r3, [sp, #20]
 8016d82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016d86:	4599      	cmp	r9, r3
 8016d88:	d047      	beq.n	8016e1a <_dtoa_r+0xb6a>
 8016d8a:	ee18 1a10 	vmov	r1, s16
 8016d8e:	2300      	movs	r3, #0
 8016d90:	220a      	movs	r2, #10
 8016d92:	4620      	mov	r0, r4
 8016d94:	f000 fb08 	bl	80173a8 <__multadd>
 8016d98:	45b8      	cmp	r8, r7
 8016d9a:	ee08 0a10 	vmov	s16, r0
 8016d9e:	f04f 0300 	mov.w	r3, #0
 8016da2:	f04f 020a 	mov.w	r2, #10
 8016da6:	4641      	mov	r1, r8
 8016da8:	4620      	mov	r0, r4
 8016daa:	d106      	bne.n	8016dba <_dtoa_r+0xb0a>
 8016dac:	f000 fafc 	bl	80173a8 <__multadd>
 8016db0:	4680      	mov	r8, r0
 8016db2:	4607      	mov	r7, r0
 8016db4:	f109 0901 	add.w	r9, r9, #1
 8016db8:	e772      	b.n	8016ca0 <_dtoa_r+0x9f0>
 8016dba:	f000 faf5 	bl	80173a8 <__multadd>
 8016dbe:	4639      	mov	r1, r7
 8016dc0:	4680      	mov	r8, r0
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	220a      	movs	r2, #10
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f000 faee 	bl	80173a8 <__multadd>
 8016dcc:	4607      	mov	r7, r0
 8016dce:	e7f1      	b.n	8016db4 <_dtoa_r+0xb04>
 8016dd0:	9b03      	ldr	r3, [sp, #12]
 8016dd2:	9302      	str	r3, [sp, #8]
 8016dd4:	9d01      	ldr	r5, [sp, #4]
 8016dd6:	ee18 0a10 	vmov	r0, s16
 8016dda:	4631      	mov	r1, r6
 8016ddc:	f7ff f9dc 	bl	8016198 <quorem>
 8016de0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016de4:	9b01      	ldr	r3, [sp, #4]
 8016de6:	f805 ab01 	strb.w	sl, [r5], #1
 8016dea:	1aea      	subs	r2, r5, r3
 8016dec:	9b02      	ldr	r3, [sp, #8]
 8016dee:	4293      	cmp	r3, r2
 8016df0:	dd09      	ble.n	8016e06 <_dtoa_r+0xb56>
 8016df2:	ee18 1a10 	vmov	r1, s16
 8016df6:	2300      	movs	r3, #0
 8016df8:	220a      	movs	r2, #10
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f000 fad4 	bl	80173a8 <__multadd>
 8016e00:	ee08 0a10 	vmov	s16, r0
 8016e04:	e7e7      	b.n	8016dd6 <_dtoa_r+0xb26>
 8016e06:	9b02      	ldr	r3, [sp, #8]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	bfc8      	it	gt
 8016e0c:	461d      	movgt	r5, r3
 8016e0e:	9b01      	ldr	r3, [sp, #4]
 8016e10:	bfd8      	it	le
 8016e12:	2501      	movle	r5, #1
 8016e14:	441d      	add	r5, r3
 8016e16:	f04f 0800 	mov.w	r8, #0
 8016e1a:	ee18 1a10 	vmov	r1, s16
 8016e1e:	2201      	movs	r2, #1
 8016e20:	4620      	mov	r0, r4
 8016e22:	f000 fc71 	bl	8017708 <__lshift>
 8016e26:	4631      	mov	r1, r6
 8016e28:	ee08 0a10 	vmov	s16, r0
 8016e2c:	f000 fcdc 	bl	80177e8 <__mcmp>
 8016e30:	2800      	cmp	r0, #0
 8016e32:	dc91      	bgt.n	8016d58 <_dtoa_r+0xaa8>
 8016e34:	d102      	bne.n	8016e3c <_dtoa_r+0xb8c>
 8016e36:	f01a 0f01 	tst.w	sl, #1
 8016e3a:	d18d      	bne.n	8016d58 <_dtoa_r+0xaa8>
 8016e3c:	462b      	mov	r3, r5
 8016e3e:	461d      	mov	r5, r3
 8016e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016e44:	2a30      	cmp	r2, #48	; 0x30
 8016e46:	d0fa      	beq.n	8016e3e <_dtoa_r+0xb8e>
 8016e48:	e6d7      	b.n	8016bfa <_dtoa_r+0x94a>
 8016e4a:	9a01      	ldr	r2, [sp, #4]
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d184      	bne.n	8016d5a <_dtoa_r+0xaaa>
 8016e50:	9b00      	ldr	r3, [sp, #0]
 8016e52:	3301      	adds	r3, #1
 8016e54:	9300      	str	r3, [sp, #0]
 8016e56:	2331      	movs	r3, #49	; 0x31
 8016e58:	7013      	strb	r3, [r2, #0]
 8016e5a:	e6ce      	b.n	8016bfa <_dtoa_r+0x94a>
 8016e5c:	4b09      	ldr	r3, [pc, #36]	; (8016e84 <_dtoa_r+0xbd4>)
 8016e5e:	f7ff ba95 	b.w	801638c <_dtoa_r+0xdc>
 8016e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	f47f aa6e 	bne.w	8016346 <_dtoa_r+0x96>
 8016e6a:	4b07      	ldr	r3, [pc, #28]	; (8016e88 <_dtoa_r+0xbd8>)
 8016e6c:	f7ff ba8e 	b.w	801638c <_dtoa_r+0xdc>
 8016e70:	9b02      	ldr	r3, [sp, #8]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	dcae      	bgt.n	8016dd4 <_dtoa_r+0xb24>
 8016e76:	9b06      	ldr	r3, [sp, #24]
 8016e78:	2b02      	cmp	r3, #2
 8016e7a:	f73f aea8 	bgt.w	8016bce <_dtoa_r+0x91e>
 8016e7e:	e7a9      	b.n	8016dd4 <_dtoa_r+0xb24>
 8016e80:	08018abb 	.word	0x08018abb
 8016e84:	08018a18 	.word	0x08018a18
 8016e88:	08018a3c 	.word	0x08018a3c

08016e8c <__sflush_r>:
 8016e8c:	898a      	ldrh	r2, [r1, #12]
 8016e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e92:	4605      	mov	r5, r0
 8016e94:	0710      	lsls	r0, r2, #28
 8016e96:	460c      	mov	r4, r1
 8016e98:	d458      	bmi.n	8016f4c <__sflush_r+0xc0>
 8016e9a:	684b      	ldr	r3, [r1, #4]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	dc05      	bgt.n	8016eac <__sflush_r+0x20>
 8016ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	dc02      	bgt.n	8016eac <__sflush_r+0x20>
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eae:	2e00      	cmp	r6, #0
 8016eb0:	d0f9      	beq.n	8016ea6 <__sflush_r+0x1a>
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016eb8:	682f      	ldr	r7, [r5, #0]
 8016eba:	602b      	str	r3, [r5, #0]
 8016ebc:	d032      	beq.n	8016f24 <__sflush_r+0x98>
 8016ebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016ec0:	89a3      	ldrh	r3, [r4, #12]
 8016ec2:	075a      	lsls	r2, r3, #29
 8016ec4:	d505      	bpl.n	8016ed2 <__sflush_r+0x46>
 8016ec6:	6863      	ldr	r3, [r4, #4]
 8016ec8:	1ac0      	subs	r0, r0, r3
 8016eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ecc:	b10b      	cbz	r3, 8016ed2 <__sflush_r+0x46>
 8016ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ed0:	1ac0      	subs	r0, r0, r3
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	4602      	mov	r2, r0
 8016ed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ed8:	6a21      	ldr	r1, [r4, #32]
 8016eda:	4628      	mov	r0, r5
 8016edc:	47b0      	blx	r6
 8016ede:	1c43      	adds	r3, r0, #1
 8016ee0:	89a3      	ldrh	r3, [r4, #12]
 8016ee2:	d106      	bne.n	8016ef2 <__sflush_r+0x66>
 8016ee4:	6829      	ldr	r1, [r5, #0]
 8016ee6:	291d      	cmp	r1, #29
 8016ee8:	d82c      	bhi.n	8016f44 <__sflush_r+0xb8>
 8016eea:	4a2a      	ldr	r2, [pc, #168]	; (8016f94 <__sflush_r+0x108>)
 8016eec:	40ca      	lsrs	r2, r1
 8016eee:	07d6      	lsls	r6, r2, #31
 8016ef0:	d528      	bpl.n	8016f44 <__sflush_r+0xb8>
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	6062      	str	r2, [r4, #4]
 8016ef6:	04d9      	lsls	r1, r3, #19
 8016ef8:	6922      	ldr	r2, [r4, #16]
 8016efa:	6022      	str	r2, [r4, #0]
 8016efc:	d504      	bpl.n	8016f08 <__sflush_r+0x7c>
 8016efe:	1c42      	adds	r2, r0, #1
 8016f00:	d101      	bne.n	8016f06 <__sflush_r+0x7a>
 8016f02:	682b      	ldr	r3, [r5, #0]
 8016f04:	b903      	cbnz	r3, 8016f08 <__sflush_r+0x7c>
 8016f06:	6560      	str	r0, [r4, #84]	; 0x54
 8016f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f0a:	602f      	str	r7, [r5, #0]
 8016f0c:	2900      	cmp	r1, #0
 8016f0e:	d0ca      	beq.n	8016ea6 <__sflush_r+0x1a>
 8016f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f14:	4299      	cmp	r1, r3
 8016f16:	d002      	beq.n	8016f1e <__sflush_r+0x92>
 8016f18:	4628      	mov	r0, r5
 8016f1a:	f000 fd7d 	bl	8017a18 <_free_r>
 8016f1e:	2000      	movs	r0, #0
 8016f20:	6360      	str	r0, [r4, #52]	; 0x34
 8016f22:	e7c1      	b.n	8016ea8 <__sflush_r+0x1c>
 8016f24:	6a21      	ldr	r1, [r4, #32]
 8016f26:	2301      	movs	r3, #1
 8016f28:	4628      	mov	r0, r5
 8016f2a:	47b0      	blx	r6
 8016f2c:	1c41      	adds	r1, r0, #1
 8016f2e:	d1c7      	bne.n	8016ec0 <__sflush_r+0x34>
 8016f30:	682b      	ldr	r3, [r5, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d0c4      	beq.n	8016ec0 <__sflush_r+0x34>
 8016f36:	2b1d      	cmp	r3, #29
 8016f38:	d001      	beq.n	8016f3e <__sflush_r+0xb2>
 8016f3a:	2b16      	cmp	r3, #22
 8016f3c:	d101      	bne.n	8016f42 <__sflush_r+0xb6>
 8016f3e:	602f      	str	r7, [r5, #0]
 8016f40:	e7b1      	b.n	8016ea6 <__sflush_r+0x1a>
 8016f42:	89a3      	ldrh	r3, [r4, #12]
 8016f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f48:	81a3      	strh	r3, [r4, #12]
 8016f4a:	e7ad      	b.n	8016ea8 <__sflush_r+0x1c>
 8016f4c:	690f      	ldr	r7, [r1, #16]
 8016f4e:	2f00      	cmp	r7, #0
 8016f50:	d0a9      	beq.n	8016ea6 <__sflush_r+0x1a>
 8016f52:	0793      	lsls	r3, r2, #30
 8016f54:	680e      	ldr	r6, [r1, #0]
 8016f56:	bf08      	it	eq
 8016f58:	694b      	ldreq	r3, [r1, #20]
 8016f5a:	600f      	str	r7, [r1, #0]
 8016f5c:	bf18      	it	ne
 8016f5e:	2300      	movne	r3, #0
 8016f60:	eba6 0807 	sub.w	r8, r6, r7
 8016f64:	608b      	str	r3, [r1, #8]
 8016f66:	f1b8 0f00 	cmp.w	r8, #0
 8016f6a:	dd9c      	ble.n	8016ea6 <__sflush_r+0x1a>
 8016f6c:	6a21      	ldr	r1, [r4, #32]
 8016f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f70:	4643      	mov	r3, r8
 8016f72:	463a      	mov	r2, r7
 8016f74:	4628      	mov	r0, r5
 8016f76:	47b0      	blx	r6
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	dc06      	bgt.n	8016f8a <__sflush_r+0xfe>
 8016f7c:	89a3      	ldrh	r3, [r4, #12]
 8016f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f82:	81a3      	strh	r3, [r4, #12]
 8016f84:	f04f 30ff 	mov.w	r0, #4294967295
 8016f88:	e78e      	b.n	8016ea8 <__sflush_r+0x1c>
 8016f8a:	4407      	add	r7, r0
 8016f8c:	eba8 0800 	sub.w	r8, r8, r0
 8016f90:	e7e9      	b.n	8016f66 <__sflush_r+0xda>
 8016f92:	bf00      	nop
 8016f94:	20400001 	.word	0x20400001

08016f98 <_fflush_r>:
 8016f98:	b538      	push	{r3, r4, r5, lr}
 8016f9a:	690b      	ldr	r3, [r1, #16]
 8016f9c:	4605      	mov	r5, r0
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	b913      	cbnz	r3, 8016fa8 <_fflush_r+0x10>
 8016fa2:	2500      	movs	r5, #0
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	bd38      	pop	{r3, r4, r5, pc}
 8016fa8:	b118      	cbz	r0, 8016fb2 <_fflush_r+0x1a>
 8016faa:	6983      	ldr	r3, [r0, #24]
 8016fac:	b90b      	cbnz	r3, 8016fb2 <_fflush_r+0x1a>
 8016fae:	f000 f887 	bl	80170c0 <__sinit>
 8016fb2:	4b14      	ldr	r3, [pc, #80]	; (8017004 <_fflush_r+0x6c>)
 8016fb4:	429c      	cmp	r4, r3
 8016fb6:	d11b      	bne.n	8016ff0 <_fflush_r+0x58>
 8016fb8:	686c      	ldr	r4, [r5, #4]
 8016fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d0ef      	beq.n	8016fa2 <_fflush_r+0xa>
 8016fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fc4:	07d0      	lsls	r0, r2, #31
 8016fc6:	d404      	bmi.n	8016fd2 <_fflush_r+0x3a>
 8016fc8:	0599      	lsls	r1, r3, #22
 8016fca:	d402      	bmi.n	8016fd2 <_fflush_r+0x3a>
 8016fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fce:	f000 f91a 	bl	8017206 <__retarget_lock_acquire_recursive>
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	f7ff ff59 	bl	8016e8c <__sflush_r>
 8016fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fdc:	07da      	lsls	r2, r3, #31
 8016fde:	4605      	mov	r5, r0
 8016fe0:	d4e0      	bmi.n	8016fa4 <_fflush_r+0xc>
 8016fe2:	89a3      	ldrh	r3, [r4, #12]
 8016fe4:	059b      	lsls	r3, r3, #22
 8016fe6:	d4dd      	bmi.n	8016fa4 <_fflush_r+0xc>
 8016fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fea:	f000 f90d 	bl	8017208 <__retarget_lock_release_recursive>
 8016fee:	e7d9      	b.n	8016fa4 <_fflush_r+0xc>
 8016ff0:	4b05      	ldr	r3, [pc, #20]	; (8017008 <_fflush_r+0x70>)
 8016ff2:	429c      	cmp	r4, r3
 8016ff4:	d101      	bne.n	8016ffa <_fflush_r+0x62>
 8016ff6:	68ac      	ldr	r4, [r5, #8]
 8016ff8:	e7df      	b.n	8016fba <_fflush_r+0x22>
 8016ffa:	4b04      	ldr	r3, [pc, #16]	; (801700c <_fflush_r+0x74>)
 8016ffc:	429c      	cmp	r4, r3
 8016ffe:	bf08      	it	eq
 8017000:	68ec      	ldreq	r4, [r5, #12]
 8017002:	e7da      	b.n	8016fba <_fflush_r+0x22>
 8017004:	08018aec 	.word	0x08018aec
 8017008:	08018b0c 	.word	0x08018b0c
 801700c:	08018acc 	.word	0x08018acc

08017010 <std>:
 8017010:	2300      	movs	r3, #0
 8017012:	b510      	push	{r4, lr}
 8017014:	4604      	mov	r4, r0
 8017016:	e9c0 3300 	strd	r3, r3, [r0]
 801701a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801701e:	6083      	str	r3, [r0, #8]
 8017020:	8181      	strh	r1, [r0, #12]
 8017022:	6643      	str	r3, [r0, #100]	; 0x64
 8017024:	81c2      	strh	r2, [r0, #14]
 8017026:	6183      	str	r3, [r0, #24]
 8017028:	4619      	mov	r1, r3
 801702a:	2208      	movs	r2, #8
 801702c:	305c      	adds	r0, #92	; 0x5c
 801702e:	f7fe faf3 	bl	8015618 <memset>
 8017032:	4b05      	ldr	r3, [pc, #20]	; (8017048 <std+0x38>)
 8017034:	6263      	str	r3, [r4, #36]	; 0x24
 8017036:	4b05      	ldr	r3, [pc, #20]	; (801704c <std+0x3c>)
 8017038:	62a3      	str	r3, [r4, #40]	; 0x28
 801703a:	4b05      	ldr	r3, [pc, #20]	; (8017050 <std+0x40>)
 801703c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801703e:	4b05      	ldr	r3, [pc, #20]	; (8017054 <std+0x44>)
 8017040:	6224      	str	r4, [r4, #32]
 8017042:	6323      	str	r3, [r4, #48]	; 0x30
 8017044:	bd10      	pop	{r4, pc}
 8017046:	bf00      	nop
 8017048:	08017ead 	.word	0x08017ead
 801704c:	08017ecf 	.word	0x08017ecf
 8017050:	08017f07 	.word	0x08017f07
 8017054:	08017f2b 	.word	0x08017f2b

08017058 <_cleanup_r>:
 8017058:	4901      	ldr	r1, [pc, #4]	; (8017060 <_cleanup_r+0x8>)
 801705a:	f000 b8af 	b.w	80171bc <_fwalk_reent>
 801705e:	bf00      	nop
 8017060:	08016f99 	.word	0x08016f99

08017064 <__sfmoreglue>:
 8017064:	b570      	push	{r4, r5, r6, lr}
 8017066:	2268      	movs	r2, #104	; 0x68
 8017068:	1e4d      	subs	r5, r1, #1
 801706a:	4355      	muls	r5, r2
 801706c:	460e      	mov	r6, r1
 801706e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017072:	f000 fd3d 	bl	8017af0 <_malloc_r>
 8017076:	4604      	mov	r4, r0
 8017078:	b140      	cbz	r0, 801708c <__sfmoreglue+0x28>
 801707a:	2100      	movs	r1, #0
 801707c:	e9c0 1600 	strd	r1, r6, [r0]
 8017080:	300c      	adds	r0, #12
 8017082:	60a0      	str	r0, [r4, #8]
 8017084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017088:	f7fe fac6 	bl	8015618 <memset>
 801708c:	4620      	mov	r0, r4
 801708e:	bd70      	pop	{r4, r5, r6, pc}

08017090 <__sfp_lock_acquire>:
 8017090:	4801      	ldr	r0, [pc, #4]	; (8017098 <__sfp_lock_acquire+0x8>)
 8017092:	f000 b8b8 	b.w	8017206 <__retarget_lock_acquire_recursive>
 8017096:	bf00      	nop
 8017098:	200024d1 	.word	0x200024d1

0801709c <__sfp_lock_release>:
 801709c:	4801      	ldr	r0, [pc, #4]	; (80170a4 <__sfp_lock_release+0x8>)
 801709e:	f000 b8b3 	b.w	8017208 <__retarget_lock_release_recursive>
 80170a2:	bf00      	nop
 80170a4:	200024d1 	.word	0x200024d1

080170a8 <__sinit_lock_acquire>:
 80170a8:	4801      	ldr	r0, [pc, #4]	; (80170b0 <__sinit_lock_acquire+0x8>)
 80170aa:	f000 b8ac 	b.w	8017206 <__retarget_lock_acquire_recursive>
 80170ae:	bf00      	nop
 80170b0:	200024d2 	.word	0x200024d2

080170b4 <__sinit_lock_release>:
 80170b4:	4801      	ldr	r0, [pc, #4]	; (80170bc <__sinit_lock_release+0x8>)
 80170b6:	f000 b8a7 	b.w	8017208 <__retarget_lock_release_recursive>
 80170ba:	bf00      	nop
 80170bc:	200024d2 	.word	0x200024d2

080170c0 <__sinit>:
 80170c0:	b510      	push	{r4, lr}
 80170c2:	4604      	mov	r4, r0
 80170c4:	f7ff fff0 	bl	80170a8 <__sinit_lock_acquire>
 80170c8:	69a3      	ldr	r3, [r4, #24]
 80170ca:	b11b      	cbz	r3, 80170d4 <__sinit+0x14>
 80170cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170d0:	f7ff bff0 	b.w	80170b4 <__sinit_lock_release>
 80170d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170d8:	6523      	str	r3, [r4, #80]	; 0x50
 80170da:	4b13      	ldr	r3, [pc, #76]	; (8017128 <__sinit+0x68>)
 80170dc:	4a13      	ldr	r2, [pc, #76]	; (801712c <__sinit+0x6c>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80170e2:	42a3      	cmp	r3, r4
 80170e4:	bf04      	itt	eq
 80170e6:	2301      	moveq	r3, #1
 80170e8:	61a3      	streq	r3, [r4, #24]
 80170ea:	4620      	mov	r0, r4
 80170ec:	f000 f820 	bl	8017130 <__sfp>
 80170f0:	6060      	str	r0, [r4, #4]
 80170f2:	4620      	mov	r0, r4
 80170f4:	f000 f81c 	bl	8017130 <__sfp>
 80170f8:	60a0      	str	r0, [r4, #8]
 80170fa:	4620      	mov	r0, r4
 80170fc:	f000 f818 	bl	8017130 <__sfp>
 8017100:	2200      	movs	r2, #0
 8017102:	60e0      	str	r0, [r4, #12]
 8017104:	2104      	movs	r1, #4
 8017106:	6860      	ldr	r0, [r4, #4]
 8017108:	f7ff ff82 	bl	8017010 <std>
 801710c:	68a0      	ldr	r0, [r4, #8]
 801710e:	2201      	movs	r2, #1
 8017110:	2109      	movs	r1, #9
 8017112:	f7ff ff7d 	bl	8017010 <std>
 8017116:	68e0      	ldr	r0, [r4, #12]
 8017118:	2202      	movs	r2, #2
 801711a:	2112      	movs	r1, #18
 801711c:	f7ff ff78 	bl	8017010 <std>
 8017120:	2301      	movs	r3, #1
 8017122:	61a3      	str	r3, [r4, #24]
 8017124:	e7d2      	b.n	80170cc <__sinit+0xc>
 8017126:	bf00      	nop
 8017128:	08018a04 	.word	0x08018a04
 801712c:	08017059 	.word	0x08017059

08017130 <__sfp>:
 8017130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017132:	4607      	mov	r7, r0
 8017134:	f7ff ffac 	bl	8017090 <__sfp_lock_acquire>
 8017138:	4b1e      	ldr	r3, [pc, #120]	; (80171b4 <__sfp+0x84>)
 801713a:	681e      	ldr	r6, [r3, #0]
 801713c:	69b3      	ldr	r3, [r6, #24]
 801713e:	b913      	cbnz	r3, 8017146 <__sfp+0x16>
 8017140:	4630      	mov	r0, r6
 8017142:	f7ff ffbd 	bl	80170c0 <__sinit>
 8017146:	3648      	adds	r6, #72	; 0x48
 8017148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801714c:	3b01      	subs	r3, #1
 801714e:	d503      	bpl.n	8017158 <__sfp+0x28>
 8017150:	6833      	ldr	r3, [r6, #0]
 8017152:	b30b      	cbz	r3, 8017198 <__sfp+0x68>
 8017154:	6836      	ldr	r6, [r6, #0]
 8017156:	e7f7      	b.n	8017148 <__sfp+0x18>
 8017158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801715c:	b9d5      	cbnz	r5, 8017194 <__sfp+0x64>
 801715e:	4b16      	ldr	r3, [pc, #88]	; (80171b8 <__sfp+0x88>)
 8017160:	60e3      	str	r3, [r4, #12]
 8017162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017166:	6665      	str	r5, [r4, #100]	; 0x64
 8017168:	f000 f84c 	bl	8017204 <__retarget_lock_init_recursive>
 801716c:	f7ff ff96 	bl	801709c <__sfp_lock_release>
 8017170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017178:	6025      	str	r5, [r4, #0]
 801717a:	61a5      	str	r5, [r4, #24]
 801717c:	2208      	movs	r2, #8
 801717e:	4629      	mov	r1, r5
 8017180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017184:	f7fe fa48 	bl	8015618 <memset>
 8017188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801718c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017190:	4620      	mov	r0, r4
 8017192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017194:	3468      	adds	r4, #104	; 0x68
 8017196:	e7d9      	b.n	801714c <__sfp+0x1c>
 8017198:	2104      	movs	r1, #4
 801719a:	4638      	mov	r0, r7
 801719c:	f7ff ff62 	bl	8017064 <__sfmoreglue>
 80171a0:	4604      	mov	r4, r0
 80171a2:	6030      	str	r0, [r6, #0]
 80171a4:	2800      	cmp	r0, #0
 80171a6:	d1d5      	bne.n	8017154 <__sfp+0x24>
 80171a8:	f7ff ff78 	bl	801709c <__sfp_lock_release>
 80171ac:	230c      	movs	r3, #12
 80171ae:	603b      	str	r3, [r7, #0]
 80171b0:	e7ee      	b.n	8017190 <__sfp+0x60>
 80171b2:	bf00      	nop
 80171b4:	08018a04 	.word	0x08018a04
 80171b8:	ffff0001 	.word	0xffff0001

080171bc <_fwalk_reent>:
 80171bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171c0:	4606      	mov	r6, r0
 80171c2:	4688      	mov	r8, r1
 80171c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80171c8:	2700      	movs	r7, #0
 80171ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171ce:	f1b9 0901 	subs.w	r9, r9, #1
 80171d2:	d505      	bpl.n	80171e0 <_fwalk_reent+0x24>
 80171d4:	6824      	ldr	r4, [r4, #0]
 80171d6:	2c00      	cmp	r4, #0
 80171d8:	d1f7      	bne.n	80171ca <_fwalk_reent+0xe>
 80171da:	4638      	mov	r0, r7
 80171dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171e0:	89ab      	ldrh	r3, [r5, #12]
 80171e2:	2b01      	cmp	r3, #1
 80171e4:	d907      	bls.n	80171f6 <_fwalk_reent+0x3a>
 80171e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171ea:	3301      	adds	r3, #1
 80171ec:	d003      	beq.n	80171f6 <_fwalk_reent+0x3a>
 80171ee:	4629      	mov	r1, r5
 80171f0:	4630      	mov	r0, r6
 80171f2:	47c0      	blx	r8
 80171f4:	4307      	orrs	r7, r0
 80171f6:	3568      	adds	r5, #104	; 0x68
 80171f8:	e7e9      	b.n	80171ce <_fwalk_reent+0x12>
	...

080171fc <_localeconv_r>:
 80171fc:	4800      	ldr	r0, [pc, #0]	; (8017200 <_localeconv_r+0x4>)
 80171fe:	4770      	bx	lr
 8017200:	200002d8 	.word	0x200002d8

08017204 <__retarget_lock_init_recursive>:
 8017204:	4770      	bx	lr

08017206 <__retarget_lock_acquire_recursive>:
 8017206:	4770      	bx	lr

08017208 <__retarget_lock_release_recursive>:
 8017208:	4770      	bx	lr

0801720a <__swhatbuf_r>:
 801720a:	b570      	push	{r4, r5, r6, lr}
 801720c:	460e      	mov	r6, r1
 801720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017212:	2900      	cmp	r1, #0
 8017214:	b096      	sub	sp, #88	; 0x58
 8017216:	4614      	mov	r4, r2
 8017218:	461d      	mov	r5, r3
 801721a:	da08      	bge.n	801722e <__swhatbuf_r+0x24>
 801721c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017220:	2200      	movs	r2, #0
 8017222:	602a      	str	r2, [r5, #0]
 8017224:	061a      	lsls	r2, r3, #24
 8017226:	d410      	bmi.n	801724a <__swhatbuf_r+0x40>
 8017228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801722c:	e00e      	b.n	801724c <__swhatbuf_r+0x42>
 801722e:	466a      	mov	r2, sp
 8017230:	f000 fed2 	bl	8017fd8 <_fstat_r>
 8017234:	2800      	cmp	r0, #0
 8017236:	dbf1      	blt.n	801721c <__swhatbuf_r+0x12>
 8017238:	9a01      	ldr	r2, [sp, #4]
 801723a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801723e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017242:	425a      	negs	r2, r3
 8017244:	415a      	adcs	r2, r3
 8017246:	602a      	str	r2, [r5, #0]
 8017248:	e7ee      	b.n	8017228 <__swhatbuf_r+0x1e>
 801724a:	2340      	movs	r3, #64	; 0x40
 801724c:	2000      	movs	r0, #0
 801724e:	6023      	str	r3, [r4, #0]
 8017250:	b016      	add	sp, #88	; 0x58
 8017252:	bd70      	pop	{r4, r5, r6, pc}

08017254 <__smakebuf_r>:
 8017254:	898b      	ldrh	r3, [r1, #12]
 8017256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017258:	079d      	lsls	r5, r3, #30
 801725a:	4606      	mov	r6, r0
 801725c:	460c      	mov	r4, r1
 801725e:	d507      	bpl.n	8017270 <__smakebuf_r+0x1c>
 8017260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017264:	6023      	str	r3, [r4, #0]
 8017266:	6123      	str	r3, [r4, #16]
 8017268:	2301      	movs	r3, #1
 801726a:	6163      	str	r3, [r4, #20]
 801726c:	b002      	add	sp, #8
 801726e:	bd70      	pop	{r4, r5, r6, pc}
 8017270:	ab01      	add	r3, sp, #4
 8017272:	466a      	mov	r2, sp
 8017274:	f7ff ffc9 	bl	801720a <__swhatbuf_r>
 8017278:	9900      	ldr	r1, [sp, #0]
 801727a:	4605      	mov	r5, r0
 801727c:	4630      	mov	r0, r6
 801727e:	f000 fc37 	bl	8017af0 <_malloc_r>
 8017282:	b948      	cbnz	r0, 8017298 <__smakebuf_r+0x44>
 8017284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017288:	059a      	lsls	r2, r3, #22
 801728a:	d4ef      	bmi.n	801726c <__smakebuf_r+0x18>
 801728c:	f023 0303 	bic.w	r3, r3, #3
 8017290:	f043 0302 	orr.w	r3, r3, #2
 8017294:	81a3      	strh	r3, [r4, #12]
 8017296:	e7e3      	b.n	8017260 <__smakebuf_r+0xc>
 8017298:	4b0d      	ldr	r3, [pc, #52]	; (80172d0 <__smakebuf_r+0x7c>)
 801729a:	62b3      	str	r3, [r6, #40]	; 0x28
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	6020      	str	r0, [r4, #0]
 80172a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172a4:	81a3      	strh	r3, [r4, #12]
 80172a6:	9b00      	ldr	r3, [sp, #0]
 80172a8:	6163      	str	r3, [r4, #20]
 80172aa:	9b01      	ldr	r3, [sp, #4]
 80172ac:	6120      	str	r0, [r4, #16]
 80172ae:	b15b      	cbz	r3, 80172c8 <__smakebuf_r+0x74>
 80172b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172b4:	4630      	mov	r0, r6
 80172b6:	f000 fea1 	bl	8017ffc <_isatty_r>
 80172ba:	b128      	cbz	r0, 80172c8 <__smakebuf_r+0x74>
 80172bc:	89a3      	ldrh	r3, [r4, #12]
 80172be:	f023 0303 	bic.w	r3, r3, #3
 80172c2:	f043 0301 	orr.w	r3, r3, #1
 80172c6:	81a3      	strh	r3, [r4, #12]
 80172c8:	89a0      	ldrh	r0, [r4, #12]
 80172ca:	4305      	orrs	r5, r0
 80172cc:	81a5      	strh	r5, [r4, #12]
 80172ce:	e7cd      	b.n	801726c <__smakebuf_r+0x18>
 80172d0:	08017059 	.word	0x08017059

080172d4 <malloc>:
 80172d4:	4b02      	ldr	r3, [pc, #8]	; (80172e0 <malloc+0xc>)
 80172d6:	4601      	mov	r1, r0
 80172d8:	6818      	ldr	r0, [r3, #0]
 80172da:	f000 bc09 	b.w	8017af0 <_malloc_r>
 80172de:	bf00      	nop
 80172e0:	20000184 	.word	0x20000184

080172e4 <_Balloc>:
 80172e4:	b570      	push	{r4, r5, r6, lr}
 80172e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80172e8:	4604      	mov	r4, r0
 80172ea:	460d      	mov	r5, r1
 80172ec:	b976      	cbnz	r6, 801730c <_Balloc+0x28>
 80172ee:	2010      	movs	r0, #16
 80172f0:	f7ff fff0 	bl	80172d4 <malloc>
 80172f4:	4602      	mov	r2, r0
 80172f6:	6260      	str	r0, [r4, #36]	; 0x24
 80172f8:	b920      	cbnz	r0, 8017304 <_Balloc+0x20>
 80172fa:	4b18      	ldr	r3, [pc, #96]	; (801735c <_Balloc+0x78>)
 80172fc:	4818      	ldr	r0, [pc, #96]	; (8017360 <_Balloc+0x7c>)
 80172fe:	2166      	movs	r1, #102	; 0x66
 8017300:	f000 fe2a 	bl	8017f58 <__assert_func>
 8017304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017308:	6006      	str	r6, [r0, #0]
 801730a:	60c6      	str	r6, [r0, #12]
 801730c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801730e:	68f3      	ldr	r3, [r6, #12]
 8017310:	b183      	cbz	r3, 8017334 <_Balloc+0x50>
 8017312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801731a:	b9b8      	cbnz	r0, 801734c <_Balloc+0x68>
 801731c:	2101      	movs	r1, #1
 801731e:	fa01 f605 	lsl.w	r6, r1, r5
 8017322:	1d72      	adds	r2, r6, #5
 8017324:	0092      	lsls	r2, r2, #2
 8017326:	4620      	mov	r0, r4
 8017328:	f000 fb60 	bl	80179ec <_calloc_r>
 801732c:	b160      	cbz	r0, 8017348 <_Balloc+0x64>
 801732e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017332:	e00e      	b.n	8017352 <_Balloc+0x6e>
 8017334:	2221      	movs	r2, #33	; 0x21
 8017336:	2104      	movs	r1, #4
 8017338:	4620      	mov	r0, r4
 801733a:	f000 fb57 	bl	80179ec <_calloc_r>
 801733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017340:	60f0      	str	r0, [r6, #12]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d1e4      	bne.n	8017312 <_Balloc+0x2e>
 8017348:	2000      	movs	r0, #0
 801734a:	bd70      	pop	{r4, r5, r6, pc}
 801734c:	6802      	ldr	r2, [r0, #0]
 801734e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017352:	2300      	movs	r3, #0
 8017354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017358:	e7f7      	b.n	801734a <_Balloc+0x66>
 801735a:	bf00      	nop
 801735c:	08018a49 	.word	0x08018a49
 8017360:	08018b2c 	.word	0x08018b2c

08017364 <_Bfree>:
 8017364:	b570      	push	{r4, r5, r6, lr}
 8017366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017368:	4605      	mov	r5, r0
 801736a:	460c      	mov	r4, r1
 801736c:	b976      	cbnz	r6, 801738c <_Bfree+0x28>
 801736e:	2010      	movs	r0, #16
 8017370:	f7ff ffb0 	bl	80172d4 <malloc>
 8017374:	4602      	mov	r2, r0
 8017376:	6268      	str	r0, [r5, #36]	; 0x24
 8017378:	b920      	cbnz	r0, 8017384 <_Bfree+0x20>
 801737a:	4b09      	ldr	r3, [pc, #36]	; (80173a0 <_Bfree+0x3c>)
 801737c:	4809      	ldr	r0, [pc, #36]	; (80173a4 <_Bfree+0x40>)
 801737e:	218a      	movs	r1, #138	; 0x8a
 8017380:	f000 fdea 	bl	8017f58 <__assert_func>
 8017384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017388:	6006      	str	r6, [r0, #0]
 801738a:	60c6      	str	r6, [r0, #12]
 801738c:	b13c      	cbz	r4, 801739e <_Bfree+0x3a>
 801738e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017390:	6862      	ldr	r2, [r4, #4]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017398:	6021      	str	r1, [r4, #0]
 801739a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801739e:	bd70      	pop	{r4, r5, r6, pc}
 80173a0:	08018a49 	.word	0x08018a49
 80173a4:	08018b2c 	.word	0x08018b2c

080173a8 <__multadd>:
 80173a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ac:	690d      	ldr	r5, [r1, #16]
 80173ae:	4607      	mov	r7, r0
 80173b0:	460c      	mov	r4, r1
 80173b2:	461e      	mov	r6, r3
 80173b4:	f101 0c14 	add.w	ip, r1, #20
 80173b8:	2000      	movs	r0, #0
 80173ba:	f8dc 3000 	ldr.w	r3, [ip]
 80173be:	b299      	uxth	r1, r3
 80173c0:	fb02 6101 	mla	r1, r2, r1, r6
 80173c4:	0c1e      	lsrs	r6, r3, #16
 80173c6:	0c0b      	lsrs	r3, r1, #16
 80173c8:	fb02 3306 	mla	r3, r2, r6, r3
 80173cc:	b289      	uxth	r1, r1
 80173ce:	3001      	adds	r0, #1
 80173d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80173d4:	4285      	cmp	r5, r0
 80173d6:	f84c 1b04 	str.w	r1, [ip], #4
 80173da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80173de:	dcec      	bgt.n	80173ba <__multadd+0x12>
 80173e0:	b30e      	cbz	r6, 8017426 <__multadd+0x7e>
 80173e2:	68a3      	ldr	r3, [r4, #8]
 80173e4:	42ab      	cmp	r3, r5
 80173e6:	dc19      	bgt.n	801741c <__multadd+0x74>
 80173e8:	6861      	ldr	r1, [r4, #4]
 80173ea:	4638      	mov	r0, r7
 80173ec:	3101      	adds	r1, #1
 80173ee:	f7ff ff79 	bl	80172e4 <_Balloc>
 80173f2:	4680      	mov	r8, r0
 80173f4:	b928      	cbnz	r0, 8017402 <__multadd+0x5a>
 80173f6:	4602      	mov	r2, r0
 80173f8:	4b0c      	ldr	r3, [pc, #48]	; (801742c <__multadd+0x84>)
 80173fa:	480d      	ldr	r0, [pc, #52]	; (8017430 <__multadd+0x88>)
 80173fc:	21b5      	movs	r1, #181	; 0xb5
 80173fe:	f000 fdab 	bl	8017f58 <__assert_func>
 8017402:	6922      	ldr	r2, [r4, #16]
 8017404:	3202      	adds	r2, #2
 8017406:	f104 010c 	add.w	r1, r4, #12
 801740a:	0092      	lsls	r2, r2, #2
 801740c:	300c      	adds	r0, #12
 801740e:	f7fe f8f5 	bl	80155fc <memcpy>
 8017412:	4621      	mov	r1, r4
 8017414:	4638      	mov	r0, r7
 8017416:	f7ff ffa5 	bl	8017364 <_Bfree>
 801741a:	4644      	mov	r4, r8
 801741c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017420:	3501      	adds	r5, #1
 8017422:	615e      	str	r6, [r3, #20]
 8017424:	6125      	str	r5, [r4, #16]
 8017426:	4620      	mov	r0, r4
 8017428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801742c:	08018abb 	.word	0x08018abb
 8017430:	08018b2c 	.word	0x08018b2c

08017434 <__hi0bits>:
 8017434:	0c03      	lsrs	r3, r0, #16
 8017436:	041b      	lsls	r3, r3, #16
 8017438:	b9d3      	cbnz	r3, 8017470 <__hi0bits+0x3c>
 801743a:	0400      	lsls	r0, r0, #16
 801743c:	2310      	movs	r3, #16
 801743e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017442:	bf04      	itt	eq
 8017444:	0200      	lsleq	r0, r0, #8
 8017446:	3308      	addeq	r3, #8
 8017448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801744c:	bf04      	itt	eq
 801744e:	0100      	lsleq	r0, r0, #4
 8017450:	3304      	addeq	r3, #4
 8017452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017456:	bf04      	itt	eq
 8017458:	0080      	lsleq	r0, r0, #2
 801745a:	3302      	addeq	r3, #2
 801745c:	2800      	cmp	r0, #0
 801745e:	db05      	blt.n	801746c <__hi0bits+0x38>
 8017460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017464:	f103 0301 	add.w	r3, r3, #1
 8017468:	bf08      	it	eq
 801746a:	2320      	moveq	r3, #32
 801746c:	4618      	mov	r0, r3
 801746e:	4770      	bx	lr
 8017470:	2300      	movs	r3, #0
 8017472:	e7e4      	b.n	801743e <__hi0bits+0xa>

08017474 <__lo0bits>:
 8017474:	6803      	ldr	r3, [r0, #0]
 8017476:	f013 0207 	ands.w	r2, r3, #7
 801747a:	4601      	mov	r1, r0
 801747c:	d00b      	beq.n	8017496 <__lo0bits+0x22>
 801747e:	07da      	lsls	r2, r3, #31
 8017480:	d423      	bmi.n	80174ca <__lo0bits+0x56>
 8017482:	0798      	lsls	r0, r3, #30
 8017484:	bf49      	itett	mi
 8017486:	085b      	lsrmi	r3, r3, #1
 8017488:	089b      	lsrpl	r3, r3, #2
 801748a:	2001      	movmi	r0, #1
 801748c:	600b      	strmi	r3, [r1, #0]
 801748e:	bf5c      	itt	pl
 8017490:	600b      	strpl	r3, [r1, #0]
 8017492:	2002      	movpl	r0, #2
 8017494:	4770      	bx	lr
 8017496:	b298      	uxth	r0, r3
 8017498:	b9a8      	cbnz	r0, 80174c6 <__lo0bits+0x52>
 801749a:	0c1b      	lsrs	r3, r3, #16
 801749c:	2010      	movs	r0, #16
 801749e:	b2da      	uxtb	r2, r3
 80174a0:	b90a      	cbnz	r2, 80174a6 <__lo0bits+0x32>
 80174a2:	3008      	adds	r0, #8
 80174a4:	0a1b      	lsrs	r3, r3, #8
 80174a6:	071a      	lsls	r2, r3, #28
 80174a8:	bf04      	itt	eq
 80174aa:	091b      	lsreq	r3, r3, #4
 80174ac:	3004      	addeq	r0, #4
 80174ae:	079a      	lsls	r2, r3, #30
 80174b0:	bf04      	itt	eq
 80174b2:	089b      	lsreq	r3, r3, #2
 80174b4:	3002      	addeq	r0, #2
 80174b6:	07da      	lsls	r2, r3, #31
 80174b8:	d403      	bmi.n	80174c2 <__lo0bits+0x4e>
 80174ba:	085b      	lsrs	r3, r3, #1
 80174bc:	f100 0001 	add.w	r0, r0, #1
 80174c0:	d005      	beq.n	80174ce <__lo0bits+0x5a>
 80174c2:	600b      	str	r3, [r1, #0]
 80174c4:	4770      	bx	lr
 80174c6:	4610      	mov	r0, r2
 80174c8:	e7e9      	b.n	801749e <__lo0bits+0x2a>
 80174ca:	2000      	movs	r0, #0
 80174cc:	4770      	bx	lr
 80174ce:	2020      	movs	r0, #32
 80174d0:	4770      	bx	lr
	...

080174d4 <__i2b>:
 80174d4:	b510      	push	{r4, lr}
 80174d6:	460c      	mov	r4, r1
 80174d8:	2101      	movs	r1, #1
 80174da:	f7ff ff03 	bl	80172e4 <_Balloc>
 80174de:	4602      	mov	r2, r0
 80174e0:	b928      	cbnz	r0, 80174ee <__i2b+0x1a>
 80174e2:	4b05      	ldr	r3, [pc, #20]	; (80174f8 <__i2b+0x24>)
 80174e4:	4805      	ldr	r0, [pc, #20]	; (80174fc <__i2b+0x28>)
 80174e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80174ea:	f000 fd35 	bl	8017f58 <__assert_func>
 80174ee:	2301      	movs	r3, #1
 80174f0:	6144      	str	r4, [r0, #20]
 80174f2:	6103      	str	r3, [r0, #16]
 80174f4:	bd10      	pop	{r4, pc}
 80174f6:	bf00      	nop
 80174f8:	08018abb 	.word	0x08018abb
 80174fc:	08018b2c 	.word	0x08018b2c

08017500 <__multiply>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	4691      	mov	r9, r2
 8017506:	690a      	ldr	r2, [r1, #16]
 8017508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801750c:	429a      	cmp	r2, r3
 801750e:	bfb8      	it	lt
 8017510:	460b      	movlt	r3, r1
 8017512:	460c      	mov	r4, r1
 8017514:	bfbc      	itt	lt
 8017516:	464c      	movlt	r4, r9
 8017518:	4699      	movlt	r9, r3
 801751a:	6927      	ldr	r7, [r4, #16]
 801751c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017520:	68a3      	ldr	r3, [r4, #8]
 8017522:	6861      	ldr	r1, [r4, #4]
 8017524:	eb07 060a 	add.w	r6, r7, sl
 8017528:	42b3      	cmp	r3, r6
 801752a:	b085      	sub	sp, #20
 801752c:	bfb8      	it	lt
 801752e:	3101      	addlt	r1, #1
 8017530:	f7ff fed8 	bl	80172e4 <_Balloc>
 8017534:	b930      	cbnz	r0, 8017544 <__multiply+0x44>
 8017536:	4602      	mov	r2, r0
 8017538:	4b44      	ldr	r3, [pc, #272]	; (801764c <__multiply+0x14c>)
 801753a:	4845      	ldr	r0, [pc, #276]	; (8017650 <__multiply+0x150>)
 801753c:	f240 115d 	movw	r1, #349	; 0x15d
 8017540:	f000 fd0a 	bl	8017f58 <__assert_func>
 8017544:	f100 0514 	add.w	r5, r0, #20
 8017548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801754c:	462b      	mov	r3, r5
 801754e:	2200      	movs	r2, #0
 8017550:	4543      	cmp	r3, r8
 8017552:	d321      	bcc.n	8017598 <__multiply+0x98>
 8017554:	f104 0314 	add.w	r3, r4, #20
 8017558:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801755c:	f109 0314 	add.w	r3, r9, #20
 8017560:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017564:	9202      	str	r2, [sp, #8]
 8017566:	1b3a      	subs	r2, r7, r4
 8017568:	3a15      	subs	r2, #21
 801756a:	f022 0203 	bic.w	r2, r2, #3
 801756e:	3204      	adds	r2, #4
 8017570:	f104 0115 	add.w	r1, r4, #21
 8017574:	428f      	cmp	r7, r1
 8017576:	bf38      	it	cc
 8017578:	2204      	movcc	r2, #4
 801757a:	9201      	str	r2, [sp, #4]
 801757c:	9a02      	ldr	r2, [sp, #8]
 801757e:	9303      	str	r3, [sp, #12]
 8017580:	429a      	cmp	r2, r3
 8017582:	d80c      	bhi.n	801759e <__multiply+0x9e>
 8017584:	2e00      	cmp	r6, #0
 8017586:	dd03      	ble.n	8017590 <__multiply+0x90>
 8017588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801758c:	2b00      	cmp	r3, #0
 801758e:	d05a      	beq.n	8017646 <__multiply+0x146>
 8017590:	6106      	str	r6, [r0, #16]
 8017592:	b005      	add	sp, #20
 8017594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017598:	f843 2b04 	str.w	r2, [r3], #4
 801759c:	e7d8      	b.n	8017550 <__multiply+0x50>
 801759e:	f8b3 a000 	ldrh.w	sl, [r3]
 80175a2:	f1ba 0f00 	cmp.w	sl, #0
 80175a6:	d024      	beq.n	80175f2 <__multiply+0xf2>
 80175a8:	f104 0e14 	add.w	lr, r4, #20
 80175ac:	46a9      	mov	r9, r5
 80175ae:	f04f 0c00 	mov.w	ip, #0
 80175b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80175b6:	f8d9 1000 	ldr.w	r1, [r9]
 80175ba:	fa1f fb82 	uxth.w	fp, r2
 80175be:	b289      	uxth	r1, r1
 80175c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80175c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80175c8:	f8d9 2000 	ldr.w	r2, [r9]
 80175cc:	4461      	add	r1, ip
 80175ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80175d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80175d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80175da:	b289      	uxth	r1, r1
 80175dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80175e0:	4577      	cmp	r7, lr
 80175e2:	f849 1b04 	str.w	r1, [r9], #4
 80175e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80175ea:	d8e2      	bhi.n	80175b2 <__multiply+0xb2>
 80175ec:	9a01      	ldr	r2, [sp, #4]
 80175ee:	f845 c002 	str.w	ip, [r5, r2]
 80175f2:	9a03      	ldr	r2, [sp, #12]
 80175f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80175f8:	3304      	adds	r3, #4
 80175fa:	f1b9 0f00 	cmp.w	r9, #0
 80175fe:	d020      	beq.n	8017642 <__multiply+0x142>
 8017600:	6829      	ldr	r1, [r5, #0]
 8017602:	f104 0c14 	add.w	ip, r4, #20
 8017606:	46ae      	mov	lr, r5
 8017608:	f04f 0a00 	mov.w	sl, #0
 801760c:	f8bc b000 	ldrh.w	fp, [ip]
 8017610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017614:	fb09 220b 	mla	r2, r9, fp, r2
 8017618:	4492      	add	sl, r2
 801761a:	b289      	uxth	r1, r1
 801761c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017620:	f84e 1b04 	str.w	r1, [lr], #4
 8017624:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017628:	f8be 1000 	ldrh.w	r1, [lr]
 801762c:	0c12      	lsrs	r2, r2, #16
 801762e:	fb09 1102 	mla	r1, r9, r2, r1
 8017632:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017636:	4567      	cmp	r7, ip
 8017638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801763c:	d8e6      	bhi.n	801760c <__multiply+0x10c>
 801763e:	9a01      	ldr	r2, [sp, #4]
 8017640:	50a9      	str	r1, [r5, r2]
 8017642:	3504      	adds	r5, #4
 8017644:	e79a      	b.n	801757c <__multiply+0x7c>
 8017646:	3e01      	subs	r6, #1
 8017648:	e79c      	b.n	8017584 <__multiply+0x84>
 801764a:	bf00      	nop
 801764c:	08018abb 	.word	0x08018abb
 8017650:	08018b2c 	.word	0x08018b2c

08017654 <__pow5mult>:
 8017654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017658:	4615      	mov	r5, r2
 801765a:	f012 0203 	ands.w	r2, r2, #3
 801765e:	4606      	mov	r6, r0
 8017660:	460f      	mov	r7, r1
 8017662:	d007      	beq.n	8017674 <__pow5mult+0x20>
 8017664:	4c25      	ldr	r4, [pc, #148]	; (80176fc <__pow5mult+0xa8>)
 8017666:	3a01      	subs	r2, #1
 8017668:	2300      	movs	r3, #0
 801766a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801766e:	f7ff fe9b 	bl	80173a8 <__multadd>
 8017672:	4607      	mov	r7, r0
 8017674:	10ad      	asrs	r5, r5, #2
 8017676:	d03d      	beq.n	80176f4 <__pow5mult+0xa0>
 8017678:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801767a:	b97c      	cbnz	r4, 801769c <__pow5mult+0x48>
 801767c:	2010      	movs	r0, #16
 801767e:	f7ff fe29 	bl	80172d4 <malloc>
 8017682:	4602      	mov	r2, r0
 8017684:	6270      	str	r0, [r6, #36]	; 0x24
 8017686:	b928      	cbnz	r0, 8017694 <__pow5mult+0x40>
 8017688:	4b1d      	ldr	r3, [pc, #116]	; (8017700 <__pow5mult+0xac>)
 801768a:	481e      	ldr	r0, [pc, #120]	; (8017704 <__pow5mult+0xb0>)
 801768c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017690:	f000 fc62 	bl	8017f58 <__assert_func>
 8017694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017698:	6004      	str	r4, [r0, #0]
 801769a:	60c4      	str	r4, [r0, #12]
 801769c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80176a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80176a4:	b94c      	cbnz	r4, 80176ba <__pow5mult+0x66>
 80176a6:	f240 2171 	movw	r1, #625	; 0x271
 80176aa:	4630      	mov	r0, r6
 80176ac:	f7ff ff12 	bl	80174d4 <__i2b>
 80176b0:	2300      	movs	r3, #0
 80176b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80176b6:	4604      	mov	r4, r0
 80176b8:	6003      	str	r3, [r0, #0]
 80176ba:	f04f 0900 	mov.w	r9, #0
 80176be:	07eb      	lsls	r3, r5, #31
 80176c0:	d50a      	bpl.n	80176d8 <__pow5mult+0x84>
 80176c2:	4639      	mov	r1, r7
 80176c4:	4622      	mov	r2, r4
 80176c6:	4630      	mov	r0, r6
 80176c8:	f7ff ff1a 	bl	8017500 <__multiply>
 80176cc:	4639      	mov	r1, r7
 80176ce:	4680      	mov	r8, r0
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7ff fe47 	bl	8017364 <_Bfree>
 80176d6:	4647      	mov	r7, r8
 80176d8:	106d      	asrs	r5, r5, #1
 80176da:	d00b      	beq.n	80176f4 <__pow5mult+0xa0>
 80176dc:	6820      	ldr	r0, [r4, #0]
 80176de:	b938      	cbnz	r0, 80176f0 <__pow5mult+0x9c>
 80176e0:	4622      	mov	r2, r4
 80176e2:	4621      	mov	r1, r4
 80176e4:	4630      	mov	r0, r6
 80176e6:	f7ff ff0b 	bl	8017500 <__multiply>
 80176ea:	6020      	str	r0, [r4, #0]
 80176ec:	f8c0 9000 	str.w	r9, [r0]
 80176f0:	4604      	mov	r4, r0
 80176f2:	e7e4      	b.n	80176be <__pow5mult+0x6a>
 80176f4:	4638      	mov	r0, r7
 80176f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176fa:	bf00      	nop
 80176fc:	08018c78 	.word	0x08018c78
 8017700:	08018a49 	.word	0x08018a49
 8017704:	08018b2c 	.word	0x08018b2c

08017708 <__lshift>:
 8017708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801770c:	460c      	mov	r4, r1
 801770e:	6849      	ldr	r1, [r1, #4]
 8017710:	6923      	ldr	r3, [r4, #16]
 8017712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017716:	68a3      	ldr	r3, [r4, #8]
 8017718:	4607      	mov	r7, r0
 801771a:	4691      	mov	r9, r2
 801771c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017720:	f108 0601 	add.w	r6, r8, #1
 8017724:	42b3      	cmp	r3, r6
 8017726:	db0b      	blt.n	8017740 <__lshift+0x38>
 8017728:	4638      	mov	r0, r7
 801772a:	f7ff fddb 	bl	80172e4 <_Balloc>
 801772e:	4605      	mov	r5, r0
 8017730:	b948      	cbnz	r0, 8017746 <__lshift+0x3e>
 8017732:	4602      	mov	r2, r0
 8017734:	4b2a      	ldr	r3, [pc, #168]	; (80177e0 <__lshift+0xd8>)
 8017736:	482b      	ldr	r0, [pc, #172]	; (80177e4 <__lshift+0xdc>)
 8017738:	f240 11d9 	movw	r1, #473	; 0x1d9
 801773c:	f000 fc0c 	bl	8017f58 <__assert_func>
 8017740:	3101      	adds	r1, #1
 8017742:	005b      	lsls	r3, r3, #1
 8017744:	e7ee      	b.n	8017724 <__lshift+0x1c>
 8017746:	2300      	movs	r3, #0
 8017748:	f100 0114 	add.w	r1, r0, #20
 801774c:	f100 0210 	add.w	r2, r0, #16
 8017750:	4618      	mov	r0, r3
 8017752:	4553      	cmp	r3, sl
 8017754:	db37      	blt.n	80177c6 <__lshift+0xbe>
 8017756:	6920      	ldr	r0, [r4, #16]
 8017758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801775c:	f104 0314 	add.w	r3, r4, #20
 8017760:	f019 091f 	ands.w	r9, r9, #31
 8017764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801776c:	d02f      	beq.n	80177ce <__lshift+0xc6>
 801776e:	f1c9 0e20 	rsb	lr, r9, #32
 8017772:	468a      	mov	sl, r1
 8017774:	f04f 0c00 	mov.w	ip, #0
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	fa02 f209 	lsl.w	r2, r2, r9
 801777e:	ea42 020c 	orr.w	r2, r2, ip
 8017782:	f84a 2b04 	str.w	r2, [sl], #4
 8017786:	f853 2b04 	ldr.w	r2, [r3], #4
 801778a:	4298      	cmp	r0, r3
 801778c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017790:	d8f2      	bhi.n	8017778 <__lshift+0x70>
 8017792:	1b03      	subs	r3, r0, r4
 8017794:	3b15      	subs	r3, #21
 8017796:	f023 0303 	bic.w	r3, r3, #3
 801779a:	3304      	adds	r3, #4
 801779c:	f104 0215 	add.w	r2, r4, #21
 80177a0:	4290      	cmp	r0, r2
 80177a2:	bf38      	it	cc
 80177a4:	2304      	movcc	r3, #4
 80177a6:	f841 c003 	str.w	ip, [r1, r3]
 80177aa:	f1bc 0f00 	cmp.w	ip, #0
 80177ae:	d001      	beq.n	80177b4 <__lshift+0xac>
 80177b0:	f108 0602 	add.w	r6, r8, #2
 80177b4:	3e01      	subs	r6, #1
 80177b6:	4638      	mov	r0, r7
 80177b8:	612e      	str	r6, [r5, #16]
 80177ba:	4621      	mov	r1, r4
 80177bc:	f7ff fdd2 	bl	8017364 <_Bfree>
 80177c0:	4628      	mov	r0, r5
 80177c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80177ca:	3301      	adds	r3, #1
 80177cc:	e7c1      	b.n	8017752 <__lshift+0x4a>
 80177ce:	3904      	subs	r1, #4
 80177d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80177d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80177d8:	4298      	cmp	r0, r3
 80177da:	d8f9      	bhi.n	80177d0 <__lshift+0xc8>
 80177dc:	e7ea      	b.n	80177b4 <__lshift+0xac>
 80177de:	bf00      	nop
 80177e0:	08018abb 	.word	0x08018abb
 80177e4:	08018b2c 	.word	0x08018b2c

080177e8 <__mcmp>:
 80177e8:	b530      	push	{r4, r5, lr}
 80177ea:	6902      	ldr	r2, [r0, #16]
 80177ec:	690c      	ldr	r4, [r1, #16]
 80177ee:	1b12      	subs	r2, r2, r4
 80177f0:	d10e      	bne.n	8017810 <__mcmp+0x28>
 80177f2:	f100 0314 	add.w	r3, r0, #20
 80177f6:	3114      	adds	r1, #20
 80177f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80177fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017808:	42a5      	cmp	r5, r4
 801780a:	d003      	beq.n	8017814 <__mcmp+0x2c>
 801780c:	d305      	bcc.n	801781a <__mcmp+0x32>
 801780e:	2201      	movs	r2, #1
 8017810:	4610      	mov	r0, r2
 8017812:	bd30      	pop	{r4, r5, pc}
 8017814:	4283      	cmp	r3, r0
 8017816:	d3f3      	bcc.n	8017800 <__mcmp+0x18>
 8017818:	e7fa      	b.n	8017810 <__mcmp+0x28>
 801781a:	f04f 32ff 	mov.w	r2, #4294967295
 801781e:	e7f7      	b.n	8017810 <__mcmp+0x28>

08017820 <__mdiff>:
 8017820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017824:	460c      	mov	r4, r1
 8017826:	4606      	mov	r6, r0
 8017828:	4611      	mov	r1, r2
 801782a:	4620      	mov	r0, r4
 801782c:	4690      	mov	r8, r2
 801782e:	f7ff ffdb 	bl	80177e8 <__mcmp>
 8017832:	1e05      	subs	r5, r0, #0
 8017834:	d110      	bne.n	8017858 <__mdiff+0x38>
 8017836:	4629      	mov	r1, r5
 8017838:	4630      	mov	r0, r6
 801783a:	f7ff fd53 	bl	80172e4 <_Balloc>
 801783e:	b930      	cbnz	r0, 801784e <__mdiff+0x2e>
 8017840:	4b3a      	ldr	r3, [pc, #232]	; (801792c <__mdiff+0x10c>)
 8017842:	4602      	mov	r2, r0
 8017844:	f240 2132 	movw	r1, #562	; 0x232
 8017848:	4839      	ldr	r0, [pc, #228]	; (8017930 <__mdiff+0x110>)
 801784a:	f000 fb85 	bl	8017f58 <__assert_func>
 801784e:	2301      	movs	r3, #1
 8017850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	bfa4      	itt	ge
 801785a:	4643      	movge	r3, r8
 801785c:	46a0      	movge	r8, r4
 801785e:	4630      	mov	r0, r6
 8017860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017864:	bfa6      	itte	ge
 8017866:	461c      	movge	r4, r3
 8017868:	2500      	movge	r5, #0
 801786a:	2501      	movlt	r5, #1
 801786c:	f7ff fd3a 	bl	80172e4 <_Balloc>
 8017870:	b920      	cbnz	r0, 801787c <__mdiff+0x5c>
 8017872:	4b2e      	ldr	r3, [pc, #184]	; (801792c <__mdiff+0x10c>)
 8017874:	4602      	mov	r2, r0
 8017876:	f44f 7110 	mov.w	r1, #576	; 0x240
 801787a:	e7e5      	b.n	8017848 <__mdiff+0x28>
 801787c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017880:	6926      	ldr	r6, [r4, #16]
 8017882:	60c5      	str	r5, [r0, #12]
 8017884:	f104 0914 	add.w	r9, r4, #20
 8017888:	f108 0514 	add.w	r5, r8, #20
 801788c:	f100 0e14 	add.w	lr, r0, #20
 8017890:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017898:	f108 0210 	add.w	r2, r8, #16
 801789c:	46f2      	mov	sl, lr
 801789e:	2100      	movs	r1, #0
 80178a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80178a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80178a8:	fa1f f883 	uxth.w	r8, r3
 80178ac:	fa11 f18b 	uxtah	r1, r1, fp
 80178b0:	0c1b      	lsrs	r3, r3, #16
 80178b2:	eba1 0808 	sub.w	r8, r1, r8
 80178b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80178ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80178be:	fa1f f888 	uxth.w	r8, r8
 80178c2:	1419      	asrs	r1, r3, #16
 80178c4:	454e      	cmp	r6, r9
 80178c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80178ca:	f84a 3b04 	str.w	r3, [sl], #4
 80178ce:	d8e7      	bhi.n	80178a0 <__mdiff+0x80>
 80178d0:	1b33      	subs	r3, r6, r4
 80178d2:	3b15      	subs	r3, #21
 80178d4:	f023 0303 	bic.w	r3, r3, #3
 80178d8:	3304      	adds	r3, #4
 80178da:	3415      	adds	r4, #21
 80178dc:	42a6      	cmp	r6, r4
 80178de:	bf38      	it	cc
 80178e0:	2304      	movcc	r3, #4
 80178e2:	441d      	add	r5, r3
 80178e4:	4473      	add	r3, lr
 80178e6:	469e      	mov	lr, r3
 80178e8:	462e      	mov	r6, r5
 80178ea:	4566      	cmp	r6, ip
 80178ec:	d30e      	bcc.n	801790c <__mdiff+0xec>
 80178ee:	f10c 0203 	add.w	r2, ip, #3
 80178f2:	1b52      	subs	r2, r2, r5
 80178f4:	f022 0203 	bic.w	r2, r2, #3
 80178f8:	3d03      	subs	r5, #3
 80178fa:	45ac      	cmp	ip, r5
 80178fc:	bf38      	it	cc
 80178fe:	2200      	movcc	r2, #0
 8017900:	441a      	add	r2, r3
 8017902:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017906:	b17b      	cbz	r3, 8017928 <__mdiff+0x108>
 8017908:	6107      	str	r7, [r0, #16]
 801790a:	e7a3      	b.n	8017854 <__mdiff+0x34>
 801790c:	f856 8b04 	ldr.w	r8, [r6], #4
 8017910:	fa11 f288 	uxtah	r2, r1, r8
 8017914:	1414      	asrs	r4, r2, #16
 8017916:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801791a:	b292      	uxth	r2, r2
 801791c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017920:	f84e 2b04 	str.w	r2, [lr], #4
 8017924:	1421      	asrs	r1, r4, #16
 8017926:	e7e0      	b.n	80178ea <__mdiff+0xca>
 8017928:	3f01      	subs	r7, #1
 801792a:	e7ea      	b.n	8017902 <__mdiff+0xe2>
 801792c:	08018abb 	.word	0x08018abb
 8017930:	08018b2c 	.word	0x08018b2c

08017934 <__d2b>:
 8017934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017938:	4689      	mov	r9, r1
 801793a:	2101      	movs	r1, #1
 801793c:	ec57 6b10 	vmov	r6, r7, d0
 8017940:	4690      	mov	r8, r2
 8017942:	f7ff fccf 	bl	80172e4 <_Balloc>
 8017946:	4604      	mov	r4, r0
 8017948:	b930      	cbnz	r0, 8017958 <__d2b+0x24>
 801794a:	4602      	mov	r2, r0
 801794c:	4b25      	ldr	r3, [pc, #148]	; (80179e4 <__d2b+0xb0>)
 801794e:	4826      	ldr	r0, [pc, #152]	; (80179e8 <__d2b+0xb4>)
 8017950:	f240 310a 	movw	r1, #778	; 0x30a
 8017954:	f000 fb00 	bl	8017f58 <__assert_func>
 8017958:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801795c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017960:	bb35      	cbnz	r5, 80179b0 <__d2b+0x7c>
 8017962:	2e00      	cmp	r6, #0
 8017964:	9301      	str	r3, [sp, #4]
 8017966:	d028      	beq.n	80179ba <__d2b+0x86>
 8017968:	4668      	mov	r0, sp
 801796a:	9600      	str	r6, [sp, #0]
 801796c:	f7ff fd82 	bl	8017474 <__lo0bits>
 8017970:	9900      	ldr	r1, [sp, #0]
 8017972:	b300      	cbz	r0, 80179b6 <__d2b+0x82>
 8017974:	9a01      	ldr	r2, [sp, #4]
 8017976:	f1c0 0320 	rsb	r3, r0, #32
 801797a:	fa02 f303 	lsl.w	r3, r2, r3
 801797e:	430b      	orrs	r3, r1
 8017980:	40c2      	lsrs	r2, r0
 8017982:	6163      	str	r3, [r4, #20]
 8017984:	9201      	str	r2, [sp, #4]
 8017986:	9b01      	ldr	r3, [sp, #4]
 8017988:	61a3      	str	r3, [r4, #24]
 801798a:	2b00      	cmp	r3, #0
 801798c:	bf14      	ite	ne
 801798e:	2202      	movne	r2, #2
 8017990:	2201      	moveq	r2, #1
 8017992:	6122      	str	r2, [r4, #16]
 8017994:	b1d5      	cbz	r5, 80179cc <__d2b+0x98>
 8017996:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801799a:	4405      	add	r5, r0
 801799c:	f8c9 5000 	str.w	r5, [r9]
 80179a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80179a4:	f8c8 0000 	str.w	r0, [r8]
 80179a8:	4620      	mov	r0, r4
 80179aa:	b003      	add	sp, #12
 80179ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80179b4:	e7d5      	b.n	8017962 <__d2b+0x2e>
 80179b6:	6161      	str	r1, [r4, #20]
 80179b8:	e7e5      	b.n	8017986 <__d2b+0x52>
 80179ba:	a801      	add	r0, sp, #4
 80179bc:	f7ff fd5a 	bl	8017474 <__lo0bits>
 80179c0:	9b01      	ldr	r3, [sp, #4]
 80179c2:	6163      	str	r3, [r4, #20]
 80179c4:	2201      	movs	r2, #1
 80179c6:	6122      	str	r2, [r4, #16]
 80179c8:	3020      	adds	r0, #32
 80179ca:	e7e3      	b.n	8017994 <__d2b+0x60>
 80179cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80179d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80179d4:	f8c9 0000 	str.w	r0, [r9]
 80179d8:	6918      	ldr	r0, [r3, #16]
 80179da:	f7ff fd2b 	bl	8017434 <__hi0bits>
 80179de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80179e2:	e7df      	b.n	80179a4 <__d2b+0x70>
 80179e4:	08018abb 	.word	0x08018abb
 80179e8:	08018b2c 	.word	0x08018b2c

080179ec <_calloc_r>:
 80179ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179ee:	fba1 2402 	umull	r2, r4, r1, r2
 80179f2:	b94c      	cbnz	r4, 8017a08 <_calloc_r+0x1c>
 80179f4:	4611      	mov	r1, r2
 80179f6:	9201      	str	r2, [sp, #4]
 80179f8:	f000 f87a 	bl	8017af0 <_malloc_r>
 80179fc:	9a01      	ldr	r2, [sp, #4]
 80179fe:	4605      	mov	r5, r0
 8017a00:	b930      	cbnz	r0, 8017a10 <_calloc_r+0x24>
 8017a02:	4628      	mov	r0, r5
 8017a04:	b003      	add	sp, #12
 8017a06:	bd30      	pop	{r4, r5, pc}
 8017a08:	220c      	movs	r2, #12
 8017a0a:	6002      	str	r2, [r0, #0]
 8017a0c:	2500      	movs	r5, #0
 8017a0e:	e7f8      	b.n	8017a02 <_calloc_r+0x16>
 8017a10:	4621      	mov	r1, r4
 8017a12:	f7fd fe01 	bl	8015618 <memset>
 8017a16:	e7f4      	b.n	8017a02 <_calloc_r+0x16>

08017a18 <_free_r>:
 8017a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a1a:	2900      	cmp	r1, #0
 8017a1c:	d044      	beq.n	8017aa8 <_free_r+0x90>
 8017a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a22:	9001      	str	r0, [sp, #4]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	f1a1 0404 	sub.w	r4, r1, #4
 8017a2a:	bfb8      	it	lt
 8017a2c:	18e4      	addlt	r4, r4, r3
 8017a2e:	f000 fb19 	bl	8018064 <__malloc_lock>
 8017a32:	4a1e      	ldr	r2, [pc, #120]	; (8017aac <_free_r+0x94>)
 8017a34:	9801      	ldr	r0, [sp, #4]
 8017a36:	6813      	ldr	r3, [r2, #0]
 8017a38:	b933      	cbnz	r3, 8017a48 <_free_r+0x30>
 8017a3a:	6063      	str	r3, [r4, #4]
 8017a3c:	6014      	str	r4, [r2, #0]
 8017a3e:	b003      	add	sp, #12
 8017a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a44:	f000 bb14 	b.w	8018070 <__malloc_unlock>
 8017a48:	42a3      	cmp	r3, r4
 8017a4a:	d908      	bls.n	8017a5e <_free_r+0x46>
 8017a4c:	6825      	ldr	r5, [r4, #0]
 8017a4e:	1961      	adds	r1, r4, r5
 8017a50:	428b      	cmp	r3, r1
 8017a52:	bf01      	itttt	eq
 8017a54:	6819      	ldreq	r1, [r3, #0]
 8017a56:	685b      	ldreq	r3, [r3, #4]
 8017a58:	1949      	addeq	r1, r1, r5
 8017a5a:	6021      	streq	r1, [r4, #0]
 8017a5c:	e7ed      	b.n	8017a3a <_free_r+0x22>
 8017a5e:	461a      	mov	r2, r3
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	b10b      	cbz	r3, 8017a68 <_free_r+0x50>
 8017a64:	42a3      	cmp	r3, r4
 8017a66:	d9fa      	bls.n	8017a5e <_free_r+0x46>
 8017a68:	6811      	ldr	r1, [r2, #0]
 8017a6a:	1855      	adds	r5, r2, r1
 8017a6c:	42a5      	cmp	r5, r4
 8017a6e:	d10b      	bne.n	8017a88 <_free_r+0x70>
 8017a70:	6824      	ldr	r4, [r4, #0]
 8017a72:	4421      	add	r1, r4
 8017a74:	1854      	adds	r4, r2, r1
 8017a76:	42a3      	cmp	r3, r4
 8017a78:	6011      	str	r1, [r2, #0]
 8017a7a:	d1e0      	bne.n	8017a3e <_free_r+0x26>
 8017a7c:	681c      	ldr	r4, [r3, #0]
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	6053      	str	r3, [r2, #4]
 8017a82:	4421      	add	r1, r4
 8017a84:	6011      	str	r1, [r2, #0]
 8017a86:	e7da      	b.n	8017a3e <_free_r+0x26>
 8017a88:	d902      	bls.n	8017a90 <_free_r+0x78>
 8017a8a:	230c      	movs	r3, #12
 8017a8c:	6003      	str	r3, [r0, #0]
 8017a8e:	e7d6      	b.n	8017a3e <_free_r+0x26>
 8017a90:	6825      	ldr	r5, [r4, #0]
 8017a92:	1961      	adds	r1, r4, r5
 8017a94:	428b      	cmp	r3, r1
 8017a96:	bf04      	itt	eq
 8017a98:	6819      	ldreq	r1, [r3, #0]
 8017a9a:	685b      	ldreq	r3, [r3, #4]
 8017a9c:	6063      	str	r3, [r4, #4]
 8017a9e:	bf04      	itt	eq
 8017aa0:	1949      	addeq	r1, r1, r5
 8017aa2:	6021      	streq	r1, [r4, #0]
 8017aa4:	6054      	str	r4, [r2, #4]
 8017aa6:	e7ca      	b.n	8017a3e <_free_r+0x26>
 8017aa8:	b003      	add	sp, #12
 8017aaa:	bd30      	pop	{r4, r5, pc}
 8017aac:	200024d4 	.word	0x200024d4

08017ab0 <sbrk_aligned>:
 8017ab0:	b570      	push	{r4, r5, r6, lr}
 8017ab2:	4e0e      	ldr	r6, [pc, #56]	; (8017aec <sbrk_aligned+0x3c>)
 8017ab4:	460c      	mov	r4, r1
 8017ab6:	6831      	ldr	r1, [r6, #0]
 8017ab8:	4605      	mov	r5, r0
 8017aba:	b911      	cbnz	r1, 8017ac2 <sbrk_aligned+0x12>
 8017abc:	f000 f9e6 	bl	8017e8c <_sbrk_r>
 8017ac0:	6030      	str	r0, [r6, #0]
 8017ac2:	4621      	mov	r1, r4
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	f000 f9e1 	bl	8017e8c <_sbrk_r>
 8017aca:	1c43      	adds	r3, r0, #1
 8017acc:	d00a      	beq.n	8017ae4 <sbrk_aligned+0x34>
 8017ace:	1cc4      	adds	r4, r0, #3
 8017ad0:	f024 0403 	bic.w	r4, r4, #3
 8017ad4:	42a0      	cmp	r0, r4
 8017ad6:	d007      	beq.n	8017ae8 <sbrk_aligned+0x38>
 8017ad8:	1a21      	subs	r1, r4, r0
 8017ada:	4628      	mov	r0, r5
 8017adc:	f000 f9d6 	bl	8017e8c <_sbrk_r>
 8017ae0:	3001      	adds	r0, #1
 8017ae2:	d101      	bne.n	8017ae8 <sbrk_aligned+0x38>
 8017ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8017ae8:	4620      	mov	r0, r4
 8017aea:	bd70      	pop	{r4, r5, r6, pc}
 8017aec:	200024d8 	.word	0x200024d8

08017af0 <_malloc_r>:
 8017af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017af4:	1ccd      	adds	r5, r1, #3
 8017af6:	f025 0503 	bic.w	r5, r5, #3
 8017afa:	3508      	adds	r5, #8
 8017afc:	2d0c      	cmp	r5, #12
 8017afe:	bf38      	it	cc
 8017b00:	250c      	movcc	r5, #12
 8017b02:	2d00      	cmp	r5, #0
 8017b04:	4607      	mov	r7, r0
 8017b06:	db01      	blt.n	8017b0c <_malloc_r+0x1c>
 8017b08:	42a9      	cmp	r1, r5
 8017b0a:	d905      	bls.n	8017b18 <_malloc_r+0x28>
 8017b0c:	230c      	movs	r3, #12
 8017b0e:	603b      	str	r3, [r7, #0]
 8017b10:	2600      	movs	r6, #0
 8017b12:	4630      	mov	r0, r6
 8017b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b18:	4e2e      	ldr	r6, [pc, #184]	; (8017bd4 <_malloc_r+0xe4>)
 8017b1a:	f000 faa3 	bl	8018064 <__malloc_lock>
 8017b1e:	6833      	ldr	r3, [r6, #0]
 8017b20:	461c      	mov	r4, r3
 8017b22:	bb34      	cbnz	r4, 8017b72 <_malloc_r+0x82>
 8017b24:	4629      	mov	r1, r5
 8017b26:	4638      	mov	r0, r7
 8017b28:	f7ff ffc2 	bl	8017ab0 <sbrk_aligned>
 8017b2c:	1c43      	adds	r3, r0, #1
 8017b2e:	4604      	mov	r4, r0
 8017b30:	d14d      	bne.n	8017bce <_malloc_r+0xde>
 8017b32:	6834      	ldr	r4, [r6, #0]
 8017b34:	4626      	mov	r6, r4
 8017b36:	2e00      	cmp	r6, #0
 8017b38:	d140      	bne.n	8017bbc <_malloc_r+0xcc>
 8017b3a:	6823      	ldr	r3, [r4, #0]
 8017b3c:	4631      	mov	r1, r6
 8017b3e:	4638      	mov	r0, r7
 8017b40:	eb04 0803 	add.w	r8, r4, r3
 8017b44:	f000 f9a2 	bl	8017e8c <_sbrk_r>
 8017b48:	4580      	cmp	r8, r0
 8017b4a:	d13a      	bne.n	8017bc2 <_malloc_r+0xd2>
 8017b4c:	6821      	ldr	r1, [r4, #0]
 8017b4e:	3503      	adds	r5, #3
 8017b50:	1a6d      	subs	r5, r5, r1
 8017b52:	f025 0503 	bic.w	r5, r5, #3
 8017b56:	3508      	adds	r5, #8
 8017b58:	2d0c      	cmp	r5, #12
 8017b5a:	bf38      	it	cc
 8017b5c:	250c      	movcc	r5, #12
 8017b5e:	4629      	mov	r1, r5
 8017b60:	4638      	mov	r0, r7
 8017b62:	f7ff ffa5 	bl	8017ab0 <sbrk_aligned>
 8017b66:	3001      	adds	r0, #1
 8017b68:	d02b      	beq.n	8017bc2 <_malloc_r+0xd2>
 8017b6a:	6823      	ldr	r3, [r4, #0]
 8017b6c:	442b      	add	r3, r5
 8017b6e:	6023      	str	r3, [r4, #0]
 8017b70:	e00e      	b.n	8017b90 <_malloc_r+0xa0>
 8017b72:	6822      	ldr	r2, [r4, #0]
 8017b74:	1b52      	subs	r2, r2, r5
 8017b76:	d41e      	bmi.n	8017bb6 <_malloc_r+0xc6>
 8017b78:	2a0b      	cmp	r2, #11
 8017b7a:	d916      	bls.n	8017baa <_malloc_r+0xba>
 8017b7c:	1961      	adds	r1, r4, r5
 8017b7e:	42a3      	cmp	r3, r4
 8017b80:	6025      	str	r5, [r4, #0]
 8017b82:	bf18      	it	ne
 8017b84:	6059      	strne	r1, [r3, #4]
 8017b86:	6863      	ldr	r3, [r4, #4]
 8017b88:	bf08      	it	eq
 8017b8a:	6031      	streq	r1, [r6, #0]
 8017b8c:	5162      	str	r2, [r4, r5]
 8017b8e:	604b      	str	r3, [r1, #4]
 8017b90:	4638      	mov	r0, r7
 8017b92:	f104 060b 	add.w	r6, r4, #11
 8017b96:	f000 fa6b 	bl	8018070 <__malloc_unlock>
 8017b9a:	f026 0607 	bic.w	r6, r6, #7
 8017b9e:	1d23      	adds	r3, r4, #4
 8017ba0:	1af2      	subs	r2, r6, r3
 8017ba2:	d0b6      	beq.n	8017b12 <_malloc_r+0x22>
 8017ba4:	1b9b      	subs	r3, r3, r6
 8017ba6:	50a3      	str	r3, [r4, r2]
 8017ba8:	e7b3      	b.n	8017b12 <_malloc_r+0x22>
 8017baa:	6862      	ldr	r2, [r4, #4]
 8017bac:	42a3      	cmp	r3, r4
 8017bae:	bf0c      	ite	eq
 8017bb0:	6032      	streq	r2, [r6, #0]
 8017bb2:	605a      	strne	r2, [r3, #4]
 8017bb4:	e7ec      	b.n	8017b90 <_malloc_r+0xa0>
 8017bb6:	4623      	mov	r3, r4
 8017bb8:	6864      	ldr	r4, [r4, #4]
 8017bba:	e7b2      	b.n	8017b22 <_malloc_r+0x32>
 8017bbc:	4634      	mov	r4, r6
 8017bbe:	6876      	ldr	r6, [r6, #4]
 8017bc0:	e7b9      	b.n	8017b36 <_malloc_r+0x46>
 8017bc2:	230c      	movs	r3, #12
 8017bc4:	603b      	str	r3, [r7, #0]
 8017bc6:	4638      	mov	r0, r7
 8017bc8:	f000 fa52 	bl	8018070 <__malloc_unlock>
 8017bcc:	e7a1      	b.n	8017b12 <_malloc_r+0x22>
 8017bce:	6025      	str	r5, [r4, #0]
 8017bd0:	e7de      	b.n	8017b90 <_malloc_r+0xa0>
 8017bd2:	bf00      	nop
 8017bd4:	200024d4 	.word	0x200024d4

08017bd8 <__sfputc_r>:
 8017bd8:	6893      	ldr	r3, [r2, #8]
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	b410      	push	{r4}
 8017be0:	6093      	str	r3, [r2, #8]
 8017be2:	da08      	bge.n	8017bf6 <__sfputc_r+0x1e>
 8017be4:	6994      	ldr	r4, [r2, #24]
 8017be6:	42a3      	cmp	r3, r4
 8017be8:	db01      	blt.n	8017bee <__sfputc_r+0x16>
 8017bea:	290a      	cmp	r1, #10
 8017bec:	d103      	bne.n	8017bf6 <__sfputc_r+0x1e>
 8017bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf2:	f7fe ba11 	b.w	8016018 <__swbuf_r>
 8017bf6:	6813      	ldr	r3, [r2, #0]
 8017bf8:	1c58      	adds	r0, r3, #1
 8017bfa:	6010      	str	r0, [r2, #0]
 8017bfc:	7019      	strb	r1, [r3, #0]
 8017bfe:	4608      	mov	r0, r1
 8017c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c04:	4770      	bx	lr

08017c06 <__sfputs_r>:
 8017c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c08:	4606      	mov	r6, r0
 8017c0a:	460f      	mov	r7, r1
 8017c0c:	4614      	mov	r4, r2
 8017c0e:	18d5      	adds	r5, r2, r3
 8017c10:	42ac      	cmp	r4, r5
 8017c12:	d101      	bne.n	8017c18 <__sfputs_r+0x12>
 8017c14:	2000      	movs	r0, #0
 8017c16:	e007      	b.n	8017c28 <__sfputs_r+0x22>
 8017c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c1c:	463a      	mov	r2, r7
 8017c1e:	4630      	mov	r0, r6
 8017c20:	f7ff ffda 	bl	8017bd8 <__sfputc_r>
 8017c24:	1c43      	adds	r3, r0, #1
 8017c26:	d1f3      	bne.n	8017c10 <__sfputs_r+0xa>
 8017c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c2c <_vfiprintf_r>:
 8017c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c30:	460d      	mov	r5, r1
 8017c32:	b09d      	sub	sp, #116	; 0x74
 8017c34:	4614      	mov	r4, r2
 8017c36:	4698      	mov	r8, r3
 8017c38:	4606      	mov	r6, r0
 8017c3a:	b118      	cbz	r0, 8017c44 <_vfiprintf_r+0x18>
 8017c3c:	6983      	ldr	r3, [r0, #24]
 8017c3e:	b90b      	cbnz	r3, 8017c44 <_vfiprintf_r+0x18>
 8017c40:	f7ff fa3e 	bl	80170c0 <__sinit>
 8017c44:	4b89      	ldr	r3, [pc, #548]	; (8017e6c <_vfiprintf_r+0x240>)
 8017c46:	429d      	cmp	r5, r3
 8017c48:	d11b      	bne.n	8017c82 <_vfiprintf_r+0x56>
 8017c4a:	6875      	ldr	r5, [r6, #4]
 8017c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c4e:	07d9      	lsls	r1, r3, #31
 8017c50:	d405      	bmi.n	8017c5e <_vfiprintf_r+0x32>
 8017c52:	89ab      	ldrh	r3, [r5, #12]
 8017c54:	059a      	lsls	r2, r3, #22
 8017c56:	d402      	bmi.n	8017c5e <_vfiprintf_r+0x32>
 8017c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c5a:	f7ff fad4 	bl	8017206 <__retarget_lock_acquire_recursive>
 8017c5e:	89ab      	ldrh	r3, [r5, #12]
 8017c60:	071b      	lsls	r3, r3, #28
 8017c62:	d501      	bpl.n	8017c68 <_vfiprintf_r+0x3c>
 8017c64:	692b      	ldr	r3, [r5, #16]
 8017c66:	b9eb      	cbnz	r3, 8017ca4 <_vfiprintf_r+0x78>
 8017c68:	4629      	mov	r1, r5
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	f7fe fa26 	bl	80160bc <__swsetup_r>
 8017c70:	b1c0      	cbz	r0, 8017ca4 <_vfiprintf_r+0x78>
 8017c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c74:	07dc      	lsls	r4, r3, #31
 8017c76:	d50e      	bpl.n	8017c96 <_vfiprintf_r+0x6a>
 8017c78:	f04f 30ff 	mov.w	r0, #4294967295
 8017c7c:	b01d      	add	sp, #116	; 0x74
 8017c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c82:	4b7b      	ldr	r3, [pc, #492]	; (8017e70 <_vfiprintf_r+0x244>)
 8017c84:	429d      	cmp	r5, r3
 8017c86:	d101      	bne.n	8017c8c <_vfiprintf_r+0x60>
 8017c88:	68b5      	ldr	r5, [r6, #8]
 8017c8a:	e7df      	b.n	8017c4c <_vfiprintf_r+0x20>
 8017c8c:	4b79      	ldr	r3, [pc, #484]	; (8017e74 <_vfiprintf_r+0x248>)
 8017c8e:	429d      	cmp	r5, r3
 8017c90:	bf08      	it	eq
 8017c92:	68f5      	ldreq	r5, [r6, #12]
 8017c94:	e7da      	b.n	8017c4c <_vfiprintf_r+0x20>
 8017c96:	89ab      	ldrh	r3, [r5, #12]
 8017c98:	0598      	lsls	r0, r3, #22
 8017c9a:	d4ed      	bmi.n	8017c78 <_vfiprintf_r+0x4c>
 8017c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c9e:	f7ff fab3 	bl	8017208 <__retarget_lock_release_recursive>
 8017ca2:	e7e9      	b.n	8017c78 <_vfiprintf_r+0x4c>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ca8:	2320      	movs	r3, #32
 8017caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cb2:	2330      	movs	r3, #48	; 0x30
 8017cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017e78 <_vfiprintf_r+0x24c>
 8017cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cbc:	f04f 0901 	mov.w	r9, #1
 8017cc0:	4623      	mov	r3, r4
 8017cc2:	469a      	mov	sl, r3
 8017cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cc8:	b10a      	cbz	r2, 8017cce <_vfiprintf_r+0xa2>
 8017cca:	2a25      	cmp	r2, #37	; 0x25
 8017ccc:	d1f9      	bne.n	8017cc2 <_vfiprintf_r+0x96>
 8017cce:	ebba 0b04 	subs.w	fp, sl, r4
 8017cd2:	d00b      	beq.n	8017cec <_vfiprintf_r+0xc0>
 8017cd4:	465b      	mov	r3, fp
 8017cd6:	4622      	mov	r2, r4
 8017cd8:	4629      	mov	r1, r5
 8017cda:	4630      	mov	r0, r6
 8017cdc:	f7ff ff93 	bl	8017c06 <__sfputs_r>
 8017ce0:	3001      	adds	r0, #1
 8017ce2:	f000 80aa 	beq.w	8017e3a <_vfiprintf_r+0x20e>
 8017ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ce8:	445a      	add	r2, fp
 8017cea:	9209      	str	r2, [sp, #36]	; 0x24
 8017cec:	f89a 3000 	ldrb.w	r3, [sl]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	f000 80a2 	beq.w	8017e3a <_vfiprintf_r+0x20e>
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8017cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d00:	f10a 0a01 	add.w	sl, sl, #1
 8017d04:	9304      	str	r3, [sp, #16]
 8017d06:	9307      	str	r3, [sp, #28]
 8017d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8017d0e:	4654      	mov	r4, sl
 8017d10:	2205      	movs	r2, #5
 8017d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d16:	4858      	ldr	r0, [pc, #352]	; (8017e78 <_vfiprintf_r+0x24c>)
 8017d18:	f7e8 fa8a 	bl	8000230 <memchr>
 8017d1c:	9a04      	ldr	r2, [sp, #16]
 8017d1e:	b9d8      	cbnz	r0, 8017d58 <_vfiprintf_r+0x12c>
 8017d20:	06d1      	lsls	r1, r2, #27
 8017d22:	bf44      	itt	mi
 8017d24:	2320      	movmi	r3, #32
 8017d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d2a:	0713      	lsls	r3, r2, #28
 8017d2c:	bf44      	itt	mi
 8017d2e:	232b      	movmi	r3, #43	; 0x2b
 8017d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d34:	f89a 3000 	ldrb.w	r3, [sl]
 8017d38:	2b2a      	cmp	r3, #42	; 0x2a
 8017d3a:	d015      	beq.n	8017d68 <_vfiprintf_r+0x13c>
 8017d3c:	9a07      	ldr	r2, [sp, #28]
 8017d3e:	4654      	mov	r4, sl
 8017d40:	2000      	movs	r0, #0
 8017d42:	f04f 0c0a 	mov.w	ip, #10
 8017d46:	4621      	mov	r1, r4
 8017d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d4c:	3b30      	subs	r3, #48	; 0x30
 8017d4e:	2b09      	cmp	r3, #9
 8017d50:	d94e      	bls.n	8017df0 <_vfiprintf_r+0x1c4>
 8017d52:	b1b0      	cbz	r0, 8017d82 <_vfiprintf_r+0x156>
 8017d54:	9207      	str	r2, [sp, #28]
 8017d56:	e014      	b.n	8017d82 <_vfiprintf_r+0x156>
 8017d58:	eba0 0308 	sub.w	r3, r0, r8
 8017d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d60:	4313      	orrs	r3, r2
 8017d62:	9304      	str	r3, [sp, #16]
 8017d64:	46a2      	mov	sl, r4
 8017d66:	e7d2      	b.n	8017d0e <_vfiprintf_r+0xe2>
 8017d68:	9b03      	ldr	r3, [sp, #12]
 8017d6a:	1d19      	adds	r1, r3, #4
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	9103      	str	r1, [sp, #12]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	bfbb      	ittet	lt
 8017d74:	425b      	neglt	r3, r3
 8017d76:	f042 0202 	orrlt.w	r2, r2, #2
 8017d7a:	9307      	strge	r3, [sp, #28]
 8017d7c:	9307      	strlt	r3, [sp, #28]
 8017d7e:	bfb8      	it	lt
 8017d80:	9204      	strlt	r2, [sp, #16]
 8017d82:	7823      	ldrb	r3, [r4, #0]
 8017d84:	2b2e      	cmp	r3, #46	; 0x2e
 8017d86:	d10c      	bne.n	8017da2 <_vfiprintf_r+0x176>
 8017d88:	7863      	ldrb	r3, [r4, #1]
 8017d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d8c:	d135      	bne.n	8017dfa <_vfiprintf_r+0x1ce>
 8017d8e:	9b03      	ldr	r3, [sp, #12]
 8017d90:	1d1a      	adds	r2, r3, #4
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	9203      	str	r2, [sp, #12]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	bfb8      	it	lt
 8017d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d9e:	3402      	adds	r4, #2
 8017da0:	9305      	str	r3, [sp, #20]
 8017da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e88 <_vfiprintf_r+0x25c>
 8017da6:	7821      	ldrb	r1, [r4, #0]
 8017da8:	2203      	movs	r2, #3
 8017daa:	4650      	mov	r0, sl
 8017dac:	f7e8 fa40 	bl	8000230 <memchr>
 8017db0:	b140      	cbz	r0, 8017dc4 <_vfiprintf_r+0x198>
 8017db2:	2340      	movs	r3, #64	; 0x40
 8017db4:	eba0 000a 	sub.w	r0, r0, sl
 8017db8:	fa03 f000 	lsl.w	r0, r3, r0
 8017dbc:	9b04      	ldr	r3, [sp, #16]
 8017dbe:	4303      	orrs	r3, r0
 8017dc0:	3401      	adds	r4, #1
 8017dc2:	9304      	str	r3, [sp, #16]
 8017dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dc8:	482c      	ldr	r0, [pc, #176]	; (8017e7c <_vfiprintf_r+0x250>)
 8017dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017dce:	2206      	movs	r2, #6
 8017dd0:	f7e8 fa2e 	bl	8000230 <memchr>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	d03f      	beq.n	8017e58 <_vfiprintf_r+0x22c>
 8017dd8:	4b29      	ldr	r3, [pc, #164]	; (8017e80 <_vfiprintf_r+0x254>)
 8017dda:	bb1b      	cbnz	r3, 8017e24 <_vfiprintf_r+0x1f8>
 8017ddc:	9b03      	ldr	r3, [sp, #12]
 8017dde:	3307      	adds	r3, #7
 8017de0:	f023 0307 	bic.w	r3, r3, #7
 8017de4:	3308      	adds	r3, #8
 8017de6:	9303      	str	r3, [sp, #12]
 8017de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dea:	443b      	add	r3, r7
 8017dec:	9309      	str	r3, [sp, #36]	; 0x24
 8017dee:	e767      	b.n	8017cc0 <_vfiprintf_r+0x94>
 8017df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017df4:	460c      	mov	r4, r1
 8017df6:	2001      	movs	r0, #1
 8017df8:	e7a5      	b.n	8017d46 <_vfiprintf_r+0x11a>
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	3401      	adds	r4, #1
 8017dfe:	9305      	str	r3, [sp, #20]
 8017e00:	4619      	mov	r1, r3
 8017e02:	f04f 0c0a 	mov.w	ip, #10
 8017e06:	4620      	mov	r0, r4
 8017e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e0c:	3a30      	subs	r2, #48	; 0x30
 8017e0e:	2a09      	cmp	r2, #9
 8017e10:	d903      	bls.n	8017e1a <_vfiprintf_r+0x1ee>
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d0c5      	beq.n	8017da2 <_vfiprintf_r+0x176>
 8017e16:	9105      	str	r1, [sp, #20]
 8017e18:	e7c3      	b.n	8017da2 <_vfiprintf_r+0x176>
 8017e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e1e:	4604      	mov	r4, r0
 8017e20:	2301      	movs	r3, #1
 8017e22:	e7f0      	b.n	8017e06 <_vfiprintf_r+0x1da>
 8017e24:	ab03      	add	r3, sp, #12
 8017e26:	9300      	str	r3, [sp, #0]
 8017e28:	462a      	mov	r2, r5
 8017e2a:	4b16      	ldr	r3, [pc, #88]	; (8017e84 <_vfiprintf_r+0x258>)
 8017e2c:	a904      	add	r1, sp, #16
 8017e2e:	4630      	mov	r0, r6
 8017e30:	f7fd fc9a 	bl	8015768 <_printf_float>
 8017e34:	4607      	mov	r7, r0
 8017e36:	1c78      	adds	r0, r7, #1
 8017e38:	d1d6      	bne.n	8017de8 <_vfiprintf_r+0x1bc>
 8017e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e3c:	07d9      	lsls	r1, r3, #31
 8017e3e:	d405      	bmi.n	8017e4c <_vfiprintf_r+0x220>
 8017e40:	89ab      	ldrh	r3, [r5, #12]
 8017e42:	059a      	lsls	r2, r3, #22
 8017e44:	d402      	bmi.n	8017e4c <_vfiprintf_r+0x220>
 8017e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e48:	f7ff f9de 	bl	8017208 <__retarget_lock_release_recursive>
 8017e4c:	89ab      	ldrh	r3, [r5, #12]
 8017e4e:	065b      	lsls	r3, r3, #25
 8017e50:	f53f af12 	bmi.w	8017c78 <_vfiprintf_r+0x4c>
 8017e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e56:	e711      	b.n	8017c7c <_vfiprintf_r+0x50>
 8017e58:	ab03      	add	r3, sp, #12
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	462a      	mov	r2, r5
 8017e5e:	4b09      	ldr	r3, [pc, #36]	; (8017e84 <_vfiprintf_r+0x258>)
 8017e60:	a904      	add	r1, sp, #16
 8017e62:	4630      	mov	r0, r6
 8017e64:	f7fd ff24 	bl	8015cb0 <_printf_i>
 8017e68:	e7e4      	b.n	8017e34 <_vfiprintf_r+0x208>
 8017e6a:	bf00      	nop
 8017e6c:	08018aec 	.word	0x08018aec
 8017e70:	08018b0c 	.word	0x08018b0c
 8017e74:	08018acc 	.word	0x08018acc
 8017e78:	08018c84 	.word	0x08018c84
 8017e7c:	08018c8e 	.word	0x08018c8e
 8017e80:	08015769 	.word	0x08015769
 8017e84:	08017c07 	.word	0x08017c07
 8017e88:	08018c8a 	.word	0x08018c8a

08017e8c <_sbrk_r>:
 8017e8c:	b538      	push	{r3, r4, r5, lr}
 8017e8e:	4d06      	ldr	r5, [pc, #24]	; (8017ea8 <_sbrk_r+0x1c>)
 8017e90:	2300      	movs	r3, #0
 8017e92:	4604      	mov	r4, r0
 8017e94:	4608      	mov	r0, r1
 8017e96:	602b      	str	r3, [r5, #0]
 8017e98:	f7ee fbea 	bl	8006670 <_sbrk>
 8017e9c:	1c43      	adds	r3, r0, #1
 8017e9e:	d102      	bne.n	8017ea6 <_sbrk_r+0x1a>
 8017ea0:	682b      	ldr	r3, [r5, #0]
 8017ea2:	b103      	cbz	r3, 8017ea6 <_sbrk_r+0x1a>
 8017ea4:	6023      	str	r3, [r4, #0]
 8017ea6:	bd38      	pop	{r3, r4, r5, pc}
 8017ea8:	200024dc 	.word	0x200024dc

08017eac <__sread>:
 8017eac:	b510      	push	{r4, lr}
 8017eae:	460c      	mov	r4, r1
 8017eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eb4:	f000 f8e2 	bl	801807c <_read_r>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	bfab      	itete	ge
 8017ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8017ec0:	181b      	addge	r3, r3, r0
 8017ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ec6:	bfac      	ite	ge
 8017ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017eca:	81a3      	strhlt	r3, [r4, #12]
 8017ecc:	bd10      	pop	{r4, pc}

08017ece <__swrite>:
 8017ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed2:	461f      	mov	r7, r3
 8017ed4:	898b      	ldrh	r3, [r1, #12]
 8017ed6:	05db      	lsls	r3, r3, #23
 8017ed8:	4605      	mov	r5, r0
 8017eda:	460c      	mov	r4, r1
 8017edc:	4616      	mov	r6, r2
 8017ede:	d505      	bpl.n	8017eec <__swrite+0x1e>
 8017ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ee4:	2302      	movs	r3, #2
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	f000 f898 	bl	801801c <_lseek_r>
 8017eec:	89a3      	ldrh	r3, [r4, #12]
 8017eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ef6:	81a3      	strh	r3, [r4, #12]
 8017ef8:	4632      	mov	r2, r6
 8017efa:	463b      	mov	r3, r7
 8017efc:	4628      	mov	r0, r5
 8017efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f02:	f000 b817 	b.w	8017f34 <_write_r>

08017f06 <__sseek>:
 8017f06:	b510      	push	{r4, lr}
 8017f08:	460c      	mov	r4, r1
 8017f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f0e:	f000 f885 	bl	801801c <_lseek_r>
 8017f12:	1c43      	adds	r3, r0, #1
 8017f14:	89a3      	ldrh	r3, [r4, #12]
 8017f16:	bf15      	itete	ne
 8017f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f22:	81a3      	strheq	r3, [r4, #12]
 8017f24:	bf18      	it	ne
 8017f26:	81a3      	strhne	r3, [r4, #12]
 8017f28:	bd10      	pop	{r4, pc}

08017f2a <__sclose>:
 8017f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f2e:	f000 b831 	b.w	8017f94 <_close_r>
	...

08017f34 <_write_r>:
 8017f34:	b538      	push	{r3, r4, r5, lr}
 8017f36:	4d07      	ldr	r5, [pc, #28]	; (8017f54 <_write_r+0x20>)
 8017f38:	4604      	mov	r4, r0
 8017f3a:	4608      	mov	r0, r1
 8017f3c:	4611      	mov	r1, r2
 8017f3e:	2200      	movs	r2, #0
 8017f40:	602a      	str	r2, [r5, #0]
 8017f42:	461a      	mov	r2, r3
 8017f44:	f7ee fb33 	bl	80065ae <_write>
 8017f48:	1c43      	adds	r3, r0, #1
 8017f4a:	d102      	bne.n	8017f52 <_write_r+0x1e>
 8017f4c:	682b      	ldr	r3, [r5, #0]
 8017f4e:	b103      	cbz	r3, 8017f52 <_write_r+0x1e>
 8017f50:	6023      	str	r3, [r4, #0]
 8017f52:	bd38      	pop	{r3, r4, r5, pc}
 8017f54:	200024dc 	.word	0x200024dc

08017f58 <__assert_func>:
 8017f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f5a:	4614      	mov	r4, r2
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	4b09      	ldr	r3, [pc, #36]	; (8017f84 <__assert_func+0x2c>)
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	4605      	mov	r5, r0
 8017f64:	68d8      	ldr	r0, [r3, #12]
 8017f66:	b14c      	cbz	r4, 8017f7c <__assert_func+0x24>
 8017f68:	4b07      	ldr	r3, [pc, #28]	; (8017f88 <__assert_func+0x30>)
 8017f6a:	9100      	str	r1, [sp, #0]
 8017f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f70:	4906      	ldr	r1, [pc, #24]	; (8017f8c <__assert_func+0x34>)
 8017f72:	462b      	mov	r3, r5
 8017f74:	f000 f81e 	bl	8017fb4 <fiprintf>
 8017f78:	f000 f89f 	bl	80180ba <abort>
 8017f7c:	4b04      	ldr	r3, [pc, #16]	; (8017f90 <__assert_func+0x38>)
 8017f7e:	461c      	mov	r4, r3
 8017f80:	e7f3      	b.n	8017f6a <__assert_func+0x12>
 8017f82:	bf00      	nop
 8017f84:	20000184 	.word	0x20000184
 8017f88:	08018c95 	.word	0x08018c95
 8017f8c:	08018ca2 	.word	0x08018ca2
 8017f90:	08018cd0 	.word	0x08018cd0

08017f94 <_close_r>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	4d06      	ldr	r5, [pc, #24]	; (8017fb0 <_close_r+0x1c>)
 8017f98:	2300      	movs	r3, #0
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	4608      	mov	r0, r1
 8017f9e:	602b      	str	r3, [r5, #0]
 8017fa0:	f7ee fb32 	bl	8006608 <_close>
 8017fa4:	1c43      	adds	r3, r0, #1
 8017fa6:	d102      	bne.n	8017fae <_close_r+0x1a>
 8017fa8:	682b      	ldr	r3, [r5, #0]
 8017faa:	b103      	cbz	r3, 8017fae <_close_r+0x1a>
 8017fac:	6023      	str	r3, [r4, #0]
 8017fae:	bd38      	pop	{r3, r4, r5, pc}
 8017fb0:	200024dc 	.word	0x200024dc

08017fb4 <fiprintf>:
 8017fb4:	b40e      	push	{r1, r2, r3}
 8017fb6:	b503      	push	{r0, r1, lr}
 8017fb8:	4601      	mov	r1, r0
 8017fba:	ab03      	add	r3, sp, #12
 8017fbc:	4805      	ldr	r0, [pc, #20]	; (8017fd4 <fiprintf+0x20>)
 8017fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fc2:	6800      	ldr	r0, [r0, #0]
 8017fc4:	9301      	str	r3, [sp, #4]
 8017fc6:	f7ff fe31 	bl	8017c2c <_vfiprintf_r>
 8017fca:	b002      	add	sp, #8
 8017fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fd0:	b003      	add	sp, #12
 8017fd2:	4770      	bx	lr
 8017fd4:	20000184 	.word	0x20000184

08017fd8 <_fstat_r>:
 8017fd8:	b538      	push	{r3, r4, r5, lr}
 8017fda:	4d07      	ldr	r5, [pc, #28]	; (8017ff8 <_fstat_r+0x20>)
 8017fdc:	2300      	movs	r3, #0
 8017fde:	4604      	mov	r4, r0
 8017fe0:	4608      	mov	r0, r1
 8017fe2:	4611      	mov	r1, r2
 8017fe4:	602b      	str	r3, [r5, #0]
 8017fe6:	f7ee fb1b 	bl	8006620 <_fstat>
 8017fea:	1c43      	adds	r3, r0, #1
 8017fec:	d102      	bne.n	8017ff4 <_fstat_r+0x1c>
 8017fee:	682b      	ldr	r3, [r5, #0]
 8017ff0:	b103      	cbz	r3, 8017ff4 <_fstat_r+0x1c>
 8017ff2:	6023      	str	r3, [r4, #0]
 8017ff4:	bd38      	pop	{r3, r4, r5, pc}
 8017ff6:	bf00      	nop
 8017ff8:	200024dc 	.word	0x200024dc

08017ffc <_isatty_r>:
 8017ffc:	b538      	push	{r3, r4, r5, lr}
 8017ffe:	4d06      	ldr	r5, [pc, #24]	; (8018018 <_isatty_r+0x1c>)
 8018000:	2300      	movs	r3, #0
 8018002:	4604      	mov	r4, r0
 8018004:	4608      	mov	r0, r1
 8018006:	602b      	str	r3, [r5, #0]
 8018008:	f7ee fb1a 	bl	8006640 <_isatty>
 801800c:	1c43      	adds	r3, r0, #1
 801800e:	d102      	bne.n	8018016 <_isatty_r+0x1a>
 8018010:	682b      	ldr	r3, [r5, #0]
 8018012:	b103      	cbz	r3, 8018016 <_isatty_r+0x1a>
 8018014:	6023      	str	r3, [r4, #0]
 8018016:	bd38      	pop	{r3, r4, r5, pc}
 8018018:	200024dc 	.word	0x200024dc

0801801c <_lseek_r>:
 801801c:	b538      	push	{r3, r4, r5, lr}
 801801e:	4d07      	ldr	r5, [pc, #28]	; (801803c <_lseek_r+0x20>)
 8018020:	4604      	mov	r4, r0
 8018022:	4608      	mov	r0, r1
 8018024:	4611      	mov	r1, r2
 8018026:	2200      	movs	r2, #0
 8018028:	602a      	str	r2, [r5, #0]
 801802a:	461a      	mov	r2, r3
 801802c:	f7ee fb13 	bl	8006656 <_lseek>
 8018030:	1c43      	adds	r3, r0, #1
 8018032:	d102      	bne.n	801803a <_lseek_r+0x1e>
 8018034:	682b      	ldr	r3, [r5, #0]
 8018036:	b103      	cbz	r3, 801803a <_lseek_r+0x1e>
 8018038:	6023      	str	r3, [r4, #0]
 801803a:	bd38      	pop	{r3, r4, r5, pc}
 801803c:	200024dc 	.word	0x200024dc

08018040 <__ascii_mbtowc>:
 8018040:	b082      	sub	sp, #8
 8018042:	b901      	cbnz	r1, 8018046 <__ascii_mbtowc+0x6>
 8018044:	a901      	add	r1, sp, #4
 8018046:	b142      	cbz	r2, 801805a <__ascii_mbtowc+0x1a>
 8018048:	b14b      	cbz	r3, 801805e <__ascii_mbtowc+0x1e>
 801804a:	7813      	ldrb	r3, [r2, #0]
 801804c:	600b      	str	r3, [r1, #0]
 801804e:	7812      	ldrb	r2, [r2, #0]
 8018050:	1e10      	subs	r0, r2, #0
 8018052:	bf18      	it	ne
 8018054:	2001      	movne	r0, #1
 8018056:	b002      	add	sp, #8
 8018058:	4770      	bx	lr
 801805a:	4610      	mov	r0, r2
 801805c:	e7fb      	b.n	8018056 <__ascii_mbtowc+0x16>
 801805e:	f06f 0001 	mvn.w	r0, #1
 8018062:	e7f8      	b.n	8018056 <__ascii_mbtowc+0x16>

08018064 <__malloc_lock>:
 8018064:	4801      	ldr	r0, [pc, #4]	; (801806c <__malloc_lock+0x8>)
 8018066:	f7ff b8ce 	b.w	8017206 <__retarget_lock_acquire_recursive>
 801806a:	bf00      	nop
 801806c:	200024d0 	.word	0x200024d0

08018070 <__malloc_unlock>:
 8018070:	4801      	ldr	r0, [pc, #4]	; (8018078 <__malloc_unlock+0x8>)
 8018072:	f7ff b8c9 	b.w	8017208 <__retarget_lock_release_recursive>
 8018076:	bf00      	nop
 8018078:	200024d0 	.word	0x200024d0

0801807c <_read_r>:
 801807c:	b538      	push	{r3, r4, r5, lr}
 801807e:	4d07      	ldr	r5, [pc, #28]	; (801809c <_read_r+0x20>)
 8018080:	4604      	mov	r4, r0
 8018082:	4608      	mov	r0, r1
 8018084:	4611      	mov	r1, r2
 8018086:	2200      	movs	r2, #0
 8018088:	602a      	str	r2, [r5, #0]
 801808a:	461a      	mov	r2, r3
 801808c:	f7ee fa72 	bl	8006574 <_read>
 8018090:	1c43      	adds	r3, r0, #1
 8018092:	d102      	bne.n	801809a <_read_r+0x1e>
 8018094:	682b      	ldr	r3, [r5, #0]
 8018096:	b103      	cbz	r3, 801809a <_read_r+0x1e>
 8018098:	6023      	str	r3, [r4, #0]
 801809a:	bd38      	pop	{r3, r4, r5, pc}
 801809c:	200024dc 	.word	0x200024dc

080180a0 <__ascii_wctomb>:
 80180a0:	b149      	cbz	r1, 80180b6 <__ascii_wctomb+0x16>
 80180a2:	2aff      	cmp	r2, #255	; 0xff
 80180a4:	bf85      	ittet	hi
 80180a6:	238a      	movhi	r3, #138	; 0x8a
 80180a8:	6003      	strhi	r3, [r0, #0]
 80180aa:	700a      	strbls	r2, [r1, #0]
 80180ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80180b0:	bf98      	it	ls
 80180b2:	2001      	movls	r0, #1
 80180b4:	4770      	bx	lr
 80180b6:	4608      	mov	r0, r1
 80180b8:	4770      	bx	lr

080180ba <abort>:
 80180ba:	b508      	push	{r3, lr}
 80180bc:	2006      	movs	r0, #6
 80180be:	f000 f82b 	bl	8018118 <raise>
 80180c2:	2001      	movs	r0, #1
 80180c4:	f7ee fa4c 	bl	8006560 <_exit>

080180c8 <_raise_r>:
 80180c8:	291f      	cmp	r1, #31
 80180ca:	b538      	push	{r3, r4, r5, lr}
 80180cc:	4604      	mov	r4, r0
 80180ce:	460d      	mov	r5, r1
 80180d0:	d904      	bls.n	80180dc <_raise_r+0x14>
 80180d2:	2316      	movs	r3, #22
 80180d4:	6003      	str	r3, [r0, #0]
 80180d6:	f04f 30ff 	mov.w	r0, #4294967295
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80180de:	b112      	cbz	r2, 80180e6 <_raise_r+0x1e>
 80180e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80180e4:	b94b      	cbnz	r3, 80180fa <_raise_r+0x32>
 80180e6:	4620      	mov	r0, r4
 80180e8:	f000 f830 	bl	801814c <_getpid_r>
 80180ec:	462a      	mov	r2, r5
 80180ee:	4601      	mov	r1, r0
 80180f0:	4620      	mov	r0, r4
 80180f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180f6:	f000 b817 	b.w	8018128 <_kill_r>
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d00a      	beq.n	8018114 <_raise_r+0x4c>
 80180fe:	1c59      	adds	r1, r3, #1
 8018100:	d103      	bne.n	801810a <_raise_r+0x42>
 8018102:	2316      	movs	r3, #22
 8018104:	6003      	str	r3, [r0, #0]
 8018106:	2001      	movs	r0, #1
 8018108:	e7e7      	b.n	80180da <_raise_r+0x12>
 801810a:	2400      	movs	r4, #0
 801810c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018110:	4628      	mov	r0, r5
 8018112:	4798      	blx	r3
 8018114:	2000      	movs	r0, #0
 8018116:	e7e0      	b.n	80180da <_raise_r+0x12>

08018118 <raise>:
 8018118:	4b02      	ldr	r3, [pc, #8]	; (8018124 <raise+0xc>)
 801811a:	4601      	mov	r1, r0
 801811c:	6818      	ldr	r0, [r3, #0]
 801811e:	f7ff bfd3 	b.w	80180c8 <_raise_r>
 8018122:	bf00      	nop
 8018124:	20000184 	.word	0x20000184

08018128 <_kill_r>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	4d07      	ldr	r5, [pc, #28]	; (8018148 <_kill_r+0x20>)
 801812c:	2300      	movs	r3, #0
 801812e:	4604      	mov	r4, r0
 8018130:	4608      	mov	r0, r1
 8018132:	4611      	mov	r1, r2
 8018134:	602b      	str	r3, [r5, #0]
 8018136:	f7ee fa03 	bl	8006540 <_kill>
 801813a:	1c43      	adds	r3, r0, #1
 801813c:	d102      	bne.n	8018144 <_kill_r+0x1c>
 801813e:	682b      	ldr	r3, [r5, #0]
 8018140:	b103      	cbz	r3, 8018144 <_kill_r+0x1c>
 8018142:	6023      	str	r3, [r4, #0]
 8018144:	bd38      	pop	{r3, r4, r5, pc}
 8018146:	bf00      	nop
 8018148:	200024dc 	.word	0x200024dc

0801814c <_getpid_r>:
 801814c:	f7ee b9f0 	b.w	8006530 <_getpid>

08018150 <_init>:
 8018150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018152:	bf00      	nop
 8018154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018156:	bc08      	pop	{r3}
 8018158:	469e      	mov	lr, r3
 801815a:	4770      	bx	lr

0801815c <_fini>:
 801815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801815e:	bf00      	nop
 8018160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018162:	bc08      	pop	{r3}
 8018164:	469e      	mov	lr, r3
 8018166:	4770      	bx	lr
